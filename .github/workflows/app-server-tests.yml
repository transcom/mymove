name: App Server Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'pkg/**'
              - 'cmd/**'
              - 'Makefile'
              - 'swagger/**'
              - 'go.mod'
              - 'go.sum'
              - 'migrations/**'
              - 'testdata/**'

  server:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest

    services:
      # Currently running steps outside container, so need to
      # expose ports
      # https://docs.github.com/en/actions/using-containerized-services/about-service-containers#mapping-docker-host-and-service-container-ports
      postgres:
        image: postgres:12.11
        env:
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: test_db
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:5.0.6
        ports:
          - 6379:6379
    steps:
      - name: Check out repository
        uses: actions/checkout@v3.3.0

      - name: Set up node
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.3'
          cache: true

      - name: Install dependencies
        run: go mod tidy

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pre-commit==2.20.0

      - name: pre-commit cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-v1|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install and run go pre-commit tests without golangci-lint
        env:
          SKIP: 'golangci-lint'
        run: |
          python -m pip install pre-commit==2.20.0
          # looking for .go files is a great way to only run
          # pre-commit hooks for go
          git ls-files -- '*.go' | xargs pre-commit run --files
          # explicitly run swagger checks in go pre check
          make bin/swagger
          pre-commit run --all-files swagger
      - name: Run golangci-lint
        run: |
          # TODO: is this the right concurrency?
          export GOLANGCI_LINT_CONCURRENCY=1
          export GOLANGCI_LINT_VERBOSE=-v
          mkdir -p tmp/test-results/pretest
          pre-commit run -v --all-files golangci-lint | tee tmp/test-results/pretest/golangci-lint.out

      - name: Run server test:coverage
        run: |
          export MIGRATION_MANIFEST="${PWD}/migrations/app/migrations_manifest.txt"
          export MIGRATION_PATH="file://${PWD}/migrations/app/schema;file://${PWD}/migrations/app/secure"
          make server_test
        env:
            APPLICATION: app
            GOFLAGS: '-p=4'
            DB_PASSWORD: mysecretpassword
            DB_USER_LOW_PRIV: crud
            DB_PASSWORD_LOW_PRIV: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT_TEST: 5433
            DB_PORT: 5432
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            DTOD_USE_MOCK: true
            ENV: test
            ENVIRONMENT: test
            REDIS_HOST: localhost
            SERVER_REPORT: 1
            COVERAGE: 1

      - name: Publish server test report
        uses: mikepenz/action-junit-report@v3
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: 'tmp/test-results/gotest/app/go-test-report.xml'

      - name: Archive server code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: server-code-coverage-report
          path: tmp/test-results/gotest/app
