#! /usr/bin/env bash
#
# A script to apply all migrations, including secure migrations, to a local database.
# https://github.com/transcom/mymove#secure-migrations
#
# You can override the database to use by setting DB_NAME outside the script.

set -eu -o pipefail

export SECURE_MIGRATION_SOURCE=s3
export AWS_S3_BUCKET_NAME=transcom-ppp-app-prod-us-west-2
export PSQL_SSL_MODE=disable
export DB_NAME="${PROD_MIGRATION_DB_NAME:-prod_migrations}"

function proceed() {
  proceed_message=${1:-"proceed"}
  echo -n "${proceed_message} (y/N) "
  read -r proceed
  if [[ "$proceed" =~ ^[^yY]*$ ]]; then
    echo "exiting"
    exit 0
  fi
}

function run() {
  readonly command=( "$@" )
  echo "...executing: ${command[*]}"
  ${command[*]}
}

#
# Pre-flight checks
#

# Ensure our `aws` command is the one infra has wrapped with aws-vault
command -v aws 2> /dev/null | grep "ppp-infra/bin/aws" &> /dev/null || \
  ( echo "error: aws command not pointing to 'ppp-infra/bin/aws"
    echo "see https://github.com/transcom/ppp-infra/blob/master/transcom-ppp/README.md#using-aws-vault"
    exit 1
  )

# Test AWS command and freshen AWS session token
aws s3 ls "${AWS_S3_BUCKET_NAME}/secure-migrations" > /dev/null

#
# Run migrations
#

proceed "Running production migrations against the ${DB_NAME} database. This will delete everything in that db."

export PGPASSWORD=${DB_PASSWORD}
dropdb -h localhost -U postgres -w --if-exists "${DB_NAME}"
createdb -h localhost -U postgres -w "${DB_NAME}"
run make db_dev_migrate || (
  echo "error: migrations failed!"
  exit 1
  )

echo "Production migrations applied to ${DB_NAME}."
