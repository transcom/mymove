// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	tls "crypto/tls"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/transcom/mymove/cmd/webhook-client/utils"
)

// WebhookRuntimeClient is an autogenerated mock type for the WebhookClientPoster type
type WebhookRuntimeClient struct {
	mock.Mock
}

// Post provides a mock function with given fields: data, url
func (_m *WebhookRuntimeClient) Post(data []byte, url string) (*http.Response, []byte, error) {
	ret := _m.Called(data, url)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func([]byte, string) *http.Response); ok {
		r0 = rf(data, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func([]byte, string) []byte); ok {
		r1 = rf(data, url)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func([]byte, string) error); ok {
		r2 = rf(data, url)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetupClient provides a mock function with given fields: cert
func (_m *WebhookRuntimeClient) SetupClient(cert *tls.Certificate) (*utils.WebhookRuntime, error) {
	ret := _m.Called(cert)

	var r0 *utils.WebhookRuntime
	if rf, ok := ret.Get(0).(func(*tls.Certificate) *utils.WebhookRuntime); ok {
		r0 = rf(cert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.WebhookRuntime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tls.Certificate) error); ok {
		r1 = rf(cert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
