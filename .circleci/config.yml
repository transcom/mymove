############
#
# Caches
#
# Caches may have a `v1-` prefix, since caches in CircleCI 2.0 are immutable.
# A prefix provides an easy way to invalidate a cache.  See https://circleci.com/docs/2.0/caching/#clearing-cache
#
############

version: "2.1"

executors:
  # `mymove` uses the `trussworks/circleci-docker-primary` docker image with a checkout of the mymove code
  mymove:
    working_directory: ~/go/src/github.com/transcom/mymove
    docker:
      - image: trussworks/circleci-docker-primary:15ee0da2d70c5cdae5a7922bbc87ed6b9a9e3bd6
  # `mymove_and_postgres` adds a secondary `postgres:10.1` container and is used during testing.
  mymove_and_postgres:
    working_directory: ~/go/src/github.com/transcom/mymove
    docker:
      - image: trussworks/circleci-docker-primary:15ee0da2d70c5cdae5a7922bbc87ed6b9a9e3bd6
      - image: postgres:10.1
        environment:
          - POSTGRES_PASSWORD: mysecretpassword
          - POSTGRES_DB: test_db

commands:
  announce_failure:
    parameters:
    steps:
      - run:
          name: Announce failure
          command: |
            [[ $CIRCLE_BRANCH = master ]] || exit 0
            bin/circleci-announce-broken-branch
          when: on_fail
  deploy_migrations_steps:
    steps:
      - checkout
      - run:
          name: Snapshot database and run migrations
          command: bin/do-exclusively --job-name ${CIRCLE_JOB} bin/rds-snapshot-app-db $APP_ENVIRONMENT && bin/ecs-run-app-migrations-container config/app-migrations.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:git-${CIRCLE_SHA1} $APP_ENVIRONMENT
      - announce_failure
  deploy_app_steps:
    parameters:
      health_check_url:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - deploy:
          name: Deploy app service
          command: bin/do-exclusively --job-name ${CIRCLE_JOB} bin/ecs-deploy-service-container app config/app.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1} $APP_ENVIRONMENT FARGATE
      - health_check:
          url: << parameters.health_check_url >>
      - announce_failure
  deploy_app_client_tls_steps:
    parameters:
      health_check_url:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - deploy:
          name: Deploy app-client-tls service
          command: bin/do-exclusively --job-name ${CIRCLE_JOB} bin/ecs-deploy-service-container app-client-tls config/app-client-tls.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1} $APP_ENVIRONMENT FARGATE
      - health_check_tls:
          url: << parameters.health_check_url >>
      - announce_failure
  health_check:
    parameters:
      url:
        type: string
    steps:
      - run:
          name: Health check app site
          command: |
            for retry in `seq 1 10`; do
              if curl -f -sS -o /dev/null << parameters.url >>; then
                echo Passed.;
                exit 0;
              else
                sleep $(($retry*3));
              fi;
            done;
            exit 1
  health_check_tls:
    parameters:
      url:
        type: string
    steps:
      - run:
          name: Health check app site
          command: |
            for retry in `seq 1 10`; do
              httpResponse=$(curl << parameters.url >> --key <(echo "$EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY" | base64 --decode) --cert <(echo "$EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT" | base64 --decode) --cacert <(echo "$EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA" | base64 --decode) -I)
              statusCode=$(echo "$httpResponse" | grep HTTP/2 | awk {'print $2'})
              if [[ "$statusCode" == "200" ]]; then
                echo Passed.;
                exit 0;
              else
                sleep $(($retry*3));
              fi;
            done;
            exit 1
  build_tag_push:
    parameters:
      dockerfile:
        type: string
      tag:
        type: string
      repo:
        type: string
    steps:
      - run:
          name: "Build, tag, and push docker image << parameters.tag >> from Dockerfile << parameters.dockerfile >>"
          command: |
            docker build -f << parameters.dockerfile >> -t << parameters.tag >> .
            bash -c "$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)"
            docker tag << parameters.tag >> ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-${CIRCLE_SHA1}

jobs:

  # `pre_deps_golang` is used for cache dep soruces and the vendor directory for mymove.
  pre_deps_golang:
    executor: mymove
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-pkg-dep-sources-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          keys:
            - mymove-vendor-{{ checksum "Gopkg.lock" }}
      - run:
          name: Install dependencies
          command: dep ensure -vendor-only
      # `go-pkg-dep-sources-{{ checksum "Gopkg.lock" }}` is used to caches sources for dep, the Go dependency manager.
      - save_cache:
          key: go-pkg-dep-sources-{{ checksum "Gopkg.lock" }}
          paths:
            - ~/go/pkg/dep/sources
      # `mymove-vendor-{{ checksum "Gopkg.lock" }}` is used for caching the vendor directory for mymove.
      - save_cache:
          key: mymove-vendor-{{ checksum "Gopkg.lock" }}
          paths:
            - ~/go/src/github.com/transcom/mymove/vendor
      - announce_failure

  # `pre_deps_yarn` is used to cache yarn sources and installed node modules.
  pre_deps_yarn:
    executor: mymove
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-cache-yarn-v2-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v1-mymove-node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Install YARN dependencies
          command: yarn install
      # `v1-cache-yarn-v2-{{ checksum "yarn.lock" }}` is used to cache yarn sources
      - save_cache:
          key: v1-cache-yarn-v2-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn/v2
      # `v1-mymove-node-modules-{{ checksum "yarn.lock" }}` is used to cache installed node modules
      - save_cache:
          key: v1-mymove-node-modules-{{ checksum "yarn.lock" }}
          paths:
            - ~/go/src/github.com/transcom/mymove/node_modules
      - announce_failure

  # `pre_test` runs pre-commit against all files.
  pre_test:
    executor: mymove
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-pkg-dep-sources-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          keys:
            - mymove-vendor-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          keys:
            - v1-cache-yarn-v2-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v1-mymove-node-modules-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - run:
          name: Install prettier
          command: yarn add prettier@~1.12.0
      - run:
          name: Install markdown-spellcheck
          command: yarn add markdown-spellcheck
      - run:
          name: Install markdown-toc
          command: yarn add markdown-toc
      - run: echo 'export PATH=${PATH}:~/go/bin' >> $BASH_ENV
      - run:
          name: Run make server_generate
          command: make server_generate
      - run:
          name: Run pre-commit tests
          command: pre-commit run --all-files
      # `pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}` is used to cache pre-commit plugins.
      - save_cache:
          key: pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit
      - announce_failure

  # `integration_tests` runs integration tests using Cypress.  https://www.cypress.io/
  integration_tests:
    executor: mymove_and_postgres
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - go-pkg-dep-sources-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          keys:
            - mymove-vendor-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          keys:
            - v1-cache-yarn-v2-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v1-cache-cypress-3.1.0
      - restore_cache:
          keys:
            - v1-mymove-node-modules-{{ checksum "yarn.lock" }}
      - run:
          # This is needed to use `psql` to test DB connectivity, until the app
          # itself starts making database connections.
          name: Install postgres client
          command: |
            sudo apt-get -qq update
            sudo apt-get -qq -y install postgresql-client-9.6
      - run:
          name: Cypress deps
          command: |
            sudo apt-get -qq -y install xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2
      - run:
          name: Install cypress
          command: yarn add cypress@~3.1.0
      - run:
          name: Setup hostnames
          command: |
            echo 127.0.0.1 officelocal | sudo tee -a /etc/hosts
            echo 127.0.0.1 tsplocal | sudo tee -a /etc/hosts
      - run:
          name: make e2e_test_ci
          command: |
            echo 'export MOVE_MIL_DOD_CA_CERT=$(cat /home/circleci/go/src/github.com/transcom/mymove/config/tls/devlocal-ca.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_CERT=$(cat /home/circleci/go/src/github.com/transcom/mymove/config/tls/devlocal-https.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_KEY=$(cat /home/circleci/go/src/github.com/transcom/mymove/config/tls/devlocal-https.key)' >> $BASH_ENV
            echo 'export HTTPS_CLIENT_AUTH_CA_CERT=$(cat /home/circleci/go/src/github.com/transcom/mymove/config/tls/devlocal-ca.pem)' >> $BASH_ENV
            echo 'export CLIENT_AUTH_SECRET_KEY=$(cat /home/circleci/go/src/github.com/transcom/mymove/config/tls/devlocal-client_auth_secret.key)' >> $BASH_ENV
            echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
            echo 'export LOGIN_GOV_HOSTNAME=$E2E_LOGIN_GOV_HOSTNAME' >> $BASH_ENV
            echo 'export HERE_MAPS_APP_ID=$E2E_HERE_MAPS_APP_ID' >> $BASH_ENV
            echo 'export HERE_MAPS_APP_CODE=$E2E_HERE_MAPS_APP_CODE' >> $BASH_ENV
            source $BASH_ENV
            make e2e_test_ci
          environment:
              # Env vars needed by the `bin/apply-secure-migrations.sh` script
              DB_PASSWORD: mysecretpassword
              DB_USER: postgres
              DB_HOST: localhost
              DB_PORT: 5432
              DB_NAME: test_db
              # Env vars needed for the webserver to run
              SECURE_MIGRATION_DIR: /home/circleci/go/src/github.com/transcom/mymove/local_migrations
              SECURE_MIGRATION_SOURCE: local
              LOGIN_GOV_CALLBACK_PROTOCOL: http://
              LOGIN_GOV_MY_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:mymovemillocal
              LOGIN_GOV_OFFICE_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:officemovemillocal
              LOGIN_GOV_TSP_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:tspmovemillocal
              LOGIN_GOV_HOSTNAME: idp.int.identitysandbox.gov
              HERE_MAPS_GEOCODE_ENDPOINT: https://geocoder.cit.api.here.com/6.2/geocode.json
              HERE_MAPS_ROUTING_ENDPOINT: https://route.cit.api.here.com/routing/7.2/calculateroute.json
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots
      - store_test_results:
          path: cypress/results
      # `v1-cache-cypress-3.1.0` is used to cache the Cypress binary
      - save_cache:
          key: v1-cache-cypress-3.1.0
          paths:
            - ~/.cache/Cypress/3.1.0
      - announce_failure

  # `server_test` runs the server side Go tests
  server_test:
    executor: mymove_and_postgres
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - go-pkg-dep-sources-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          keys:
            - mymove-vendor-{{ checksum "Gopkg.lock" }}
      - run:
          # This is needed to use `psql` to test DB connectivity, until the app
          # itself starts making database connections.
          name: Install postgres client
          command: |
            sudo apt-get -qq update
            sudo apt-get -qq -y install postgresql-client-9.6
      - run: echo 'export PATH=${PATH}:~/go/bin' >> $BASH_ENV
      - run:
          name: make server_test
          command: make server_test
          environment:
            # Env vars needed by the `bin/apply-secure-migrations.sh` script
            DB_PASSWORD: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT: 5432
            DB_NAME: test_db
            SECURE_MIGRATION_DIR: /home/circleci/go/src/github.com/transcom/mymove/local_migrations
            SECURE_MIGRATION_SOURCE: local

  # `client_test` runs the client side Javascript tests
  client_test:
    executor: mymove
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - v1-cache-yarn-v2-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v1-mymove-node-modules-{{ checksum "yarn.lock" }}
      - run: make client_test

  # `build_tools` builds the mymove-specific CLI tools in `mymove/cmd`
  build_tools:
    executor: mymove
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-pkg-dep-sources-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          keys:
            - mymove-vendor-{{ checksum "Gopkg.lock" }}
      - run: make build_tools

  # `build_app` builds the application container and pushes to the container repository
  build_app:
    executor: mymove_and_postgres
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - go-pkg-dep-sources-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          keys:
            - mymove-vendor-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          keys:
            - v1-cache-yarn-v2-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v1-mymove-node-modules-{{ checksum "yarn.lock" }}
      # TODO (dynamike): Move the building chamber binary into the Makefile
      - run: go build -o bin/chamber -ldflags "-linkmode external -extldflags -static" ./vendor/github.com/segmentio/chamber
      - run: make build
      - build_tag_push:
          dockerfile: Dockerfile
          tag: ppp:web-dev
          repo: app
      - announce_failure

  # `build_migrations` builds the migrations container and pushes to the container repository
  build_migrations:
    executor: mymove
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - mymove-vendor-{{ checksum "Gopkg.lock" }}
      # TODO (pjdufour-truss): Move the building of soda and chamber binaries into the Makefile
      - run:
          name: Build Chamber and Soda
          command: |
            go build -o bin/chamber -ldflags "-linkmode external -extldflags -static" ./vendor/github.com/segmentio/chamber
            go build -o bin/soda -ldflags "-linkmode external -extldflags -static" ./vendor/github.com/gobuffalo/pop/soda
      - build_tag_push:
          dockerfile: Dockerfile.migrations
          tag: ppp-migrations:dev
          repo: app-migrations
      - announce_failure

  # `deploy_experimental_migrations` deploys migrations to the experimental environment
  deploy_experimental_migrations:
    executor: mymove
    environment:
      - APP_ENVIRONMENT: "experimental"
    steps:
      - deploy_migrations_steps

  # `deploy_experimental_app` updates the server-TLS app service in the experimental environment
  deploy_experimental_app:
    executor: mymove
    environment:
      - APP_ENVIRONMENT: "experimental"
    steps:
      - deploy_app_steps:
          health_check_url: "https://my.experimental.move.mil/health"

  # `deploy_experimental_app_client_tls` updates the mutual-TLS service in the experimental environment
  deploy_experimental_app_client_tls:
    executor: mymove
    environment:
      - APP_ENVIRONMENT: "experimental"
    steps:
      - deploy_app_client_tls_steps:
          health_check_url: "https://office.experimental.move.mil/health"

  # `deploy_staging_migrations` deploys migrations to the staging environment
  deploy_staging_migrations:
    executor: mymove
    environment:
      - APP_ENVIRONMENT: "staging"
    steps:
      - deploy_migrations_steps

  # `deploy_staging_app` updates the server-TLS app service in staging environment
  deploy_staging_app:
    executor: mymove
    environment:
      - APP_ENVIRONMENT: "staging"
    steps:
      - deploy_app_steps:
          health_check_url: "https://my.staging.move.mil/health"

  # `deploy_staging_app_client_tls` updates the mutual-TLS service in the staging environment
  deploy_staging_app_client_tls:
    executor: mymove
    environment:
      - APP_ENVIRONMENT: "staging"
    steps:
      - deploy_app_client_tls_steps:
          health_check_url: "https://office.staging.move.mil/health"

  # `deploy_prod_migrations` deploys migrations to the staging environment
  deploy_prod_migrations:
    executor: mymove
    environment:
      - APP_ENVIRONMENT: "prod"
    steps:
      - deploy_migrations_steps

  # `deploy_prod_app` updates the server-TLS app service in the prod environment
  deploy_prod_app:
    executor: mymove
    environment:
      - APP_ENVIRONMENT: "prod"
    steps:
      - deploy_app_steps:
          health_check_url: "https://my.move.mil/health"

  # `deploy_prod_app_client_tls` updates the mutual-TLS service in the prod environment
  deploy_prod_app_client_tls:
    executor: mymove
    environment:
      - APP_ENVIRONMENT: "prod"
    steps:
      - deploy_app_client_tls_steps:
          health_check_url: "https://office.move.mil/health"

  # `update_dependencies` periodically updates pre-commit, yarn, and Go dependencies.
  # The changes are submitted as a pull request for review.
  update_dependencies:
    executor: mymove
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-pkg-dep-sources-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          keys:
            - mymove-vendor-{{ checksum "Gopkg.lock" }}
      - run:
          name: Add ~/go/bin to path for golint
          command: echo 'export PATH=${PATH}:~/go/bin' >> $BASH_ENV
      - run: pre-commit autoupdate
      - run: make server_deps_update
      - run: make client_deps_update
      - run:
          name: Display changes
          command: |
            git --no-pager status
            git --no-pager diff --ignore-all-space --color
      - run:
          name: Push changes
          command: bin/circleci-push-dependency-updates

workflows:
  version: 2

  app:
    jobs:
      - pre_deps_golang

      - pre_deps_yarn

      - pre_test:
          requires:
            - pre_deps_golang
            - pre_deps_yarn

      - integration_tests:
          requires:
            - pre_deps_golang
            - pre_deps_yarn

      - client_test:
          requires:
            - pre_deps_yarn

      - server_test:
          requires:
            - pre_deps_golang

      - build_app:
          requires:
            - pre_deps_golang
            - pre_deps_yarn

      - build_tools:
          requires:
            - pre_deps_golang

      - build_migrations:
          requires:
            - pre_deps_golang

      - deploy_experimental_migrations:
          requires:
            - pre_test
            - client_test
            - server_test
            - build_app
            # - build_tools # tools don't need to build to deploy to experimental
            - build_migrations
          filters:
            branches:
              only: mk-serial-deploys

      - deploy_experimental_app:
          requires:
            - deploy_experimental_migrations
          filters:
            branches:
              only: mk-serial-deploys

      - deploy_experimental_app_client_tls:
          requires:
            - deploy_experimental_migrations
          filters:
            branches:
              only: mk-serial-deploys

      - deploy_staging_migrations:
          requires:
            - pre_test
            - client_test
            - server_test
            - build_app
            - build_tools
            - build_migrations
            - integration_tests
          filters:
            branches:
              only: master

      - deploy_staging_app:
          requires:
            - deploy_staging_migrations
          filters:
            branches:
              only: master

      - deploy_staging_app_client_tls:
          requires:
            - deploy_staging_migrations
          filters:
            branches:
              only: master

      - approve_prod_deploy:
          type: approval
          requires:
            - deploy_staging_app
            - deploy_staging_app_client_tls

      - deploy_prod_migrations:
          requires:
            - approve_prod_deploy
          filters:
            branches:
              only: master

      - deploy_prod_app:
          requires:
            - deploy_prod_migrations
          filters:
            branches:
              only: master

      - deploy_prod_app_client_tls:
          requires:
            - deploy_prod_migrations
          filters:
            branches:
              only: master


  dependency_updater:
    triggers:
      - schedule:
          # Monday at 4am/7am PST/EST
          cron: "0 12 * * 1"
          filters:
            branches:
              only: master
    jobs:
      - update_dependencies

experimental:
  notify:
    branches:
      only:
        - master
