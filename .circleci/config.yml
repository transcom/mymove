############
#
# Caches
#
# Caches may have a `v1-` prefix, since caches in CircleCI 2.0 are immutable.
# A prefix provides an easy way to invalidate a cache.  See https://circleci.com/docs/2.0/caching/#clearing-cache
#
# Please do not use docker_layer_caching! It costs too much money to run. Please set to `false`.
#
############

version: '2.1'

# References for variables shared across the file
references:
  circleci-docker: &circleci-docker milmove/circleci-docker:milmove-app-1e5a1038cb264651fbd844b82489401a476e9f7e
  postgres: &postgres postgres:12.2

executors:
  av_medium:
    resource_class: medium
    working_directory: /root/project
    docker:
      - image: mk0x/docker-clamav:alpine
  # `mymove_small` and `mymove_medium` use the `milmove/milmove-app` docker image with a checkout of the mymove code
  mymove_small:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
  mymove_medium:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
  mymove_medium_plus:
    resource_class: medium+
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
  mymove_large:
    resource_class: large
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
  # `mymove_and_postgres_medium` adds a secondary postgres container to be used during testing.
  mymove_and_postgres_medium:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
      - image: *postgres
        environment:
          - POSTGRES_PASSWORD: mysecretpassword
          - POSTGRES_DB: test_db
        command: '-c fsync=off -c full_page_writes=off -c max_connections=200'
  mymove_and_postgres_large:
    resource_class: large
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
      - image: *postgres
        environment:
          - POSTGRES_PASSWORD: mysecretpassword
          - POSTGRES_DB: test_db
        command: '-c fsync=off -c full_page_writes=off -c max_connections=200'

commands:
  aws_vars_legacy:
    steps:
      - run:
          name: 'Setting up AWS environment variables for legacy env'
          command: |
            echo "export AWS_DEFAULT_REGION=$LEGACY_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$LEGACY_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$LEGACY_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$LEGACY_SECRET_ACCESS_KEY" >> $BASH_ENV
            source $BASH_ENV
  aws_vars_exp:
    steps:
      - run:
          name: 'Setting up AWS environment variables for exp env'
          command: |
            echo "export AWS_DEFAULT_REGION=$EXP_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$EXP_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$EXP_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$EXP_SECRET_ACCESS_KEY" >> $BASH_ENV
            source $BASH_ENV
  aws_vars_stg:
    steps:
      - run:
          name: 'Setting up AWS environment variables for stg env'
          command: |
            echo "export AWS_DEFAULT_REGION=$STG_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$STG_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$STG_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$STG_SECRET_ACCESS_KEY" >> $BASH_ENV
            source $BASH_ENV
  aws_vars_prd:
    steps:
      - run:
          name: 'Setting up AWS environment variables for prd env'
          command: |
            echo "export AWS_DEFAULT_REGION=$PRD_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$PRD_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$PRD_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$PRD_SECRET_ACCESS_KEY" >> $BASH_ENV
            source $BASH_ENV
  aws_vars_transcom_com_dev:
    steps:
      - run:
          name: 'Setting up AWS environment variables for prd env'
          command: |
            echo "export AWS_DEFAULT_REGION=$COM_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$DEV_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$DEV_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$DEV_SECRET_KEY" >> $BASH_ENV
            source $BASH_ENV
  announce_failure:
    parameters:
    steps:
      - run:
          name: Announce failure
          command: |
            [[ $CIRCLE_BRANCH = master ]] || exit 0
            scripts/circleci-announce-broken-branch
          when: on_fail
  deploy_migrations_steps:
    parameters:
      ecr_env:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/transcom/mymove/bin
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat /home/circleci/transcom/mymove/bin/sha/ECR_DIGEST_app-migrations_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - run:
          name: Snapshot database
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/rds-snapshot-app-db $APP_ENVIRONMENT
      - run:
          name: Run migrations
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-run-app-migrations-container ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations@${ECR_DIGEST} $APP_ENVIRONMENT
          no_output_timeout: 60m
          environment:
            CHAMBER_RETRIES: 20
      - announce_failure
  deploy_tasks_steps:
    parameters:
      ecr_env:
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}}
      - attach_workspace:
          at: /home/circleci/transcom/mymove/bin
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat /home/circleci/transcom/mymove/bin/sha/ECR_DIGEST_app-tasks_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - deploy:
          name: Deploy GHC fuel price data task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container save-ghc-fuel-price-data "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - deploy:
          name: Deploy post move email survey task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container send-post-move-survey "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - deploy:
          name: Deploy payment reminder email task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container send-payment-reminder "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - deploy:
          name: Deploy post to GEX service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container post-file-to-gex "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
  deploy_app_steps:
    parameters:
      compare_host:
        type: string
      health_check_hosts:
        type: string
      ecr_env:
        type: string
    steps:
      - checkout
      - run:
          name: Compare against deployed commit
          command: |
            [[ -z "<< parameters.compare_host >>" ]] || scripts/compare-deployed-commit "<< parameters.compare_host >>" $CIRCLE_SHA1
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
      - attach_workspace:
          at: /home/circleci/transcom/mymove/bin
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat /home/circleci/transcom/mymove/bin/sha/ECR_DIGEST_app_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - deploy:
          name: Deploy app service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container app "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - run:
          name: Health Check
          command: bin/health-checker --schemes http,https --hosts << parameters.health_check_hosts >> --tries 10 --backoff 3 --log-level info --timeout 15m
      - run:
          name: TLS Check
          command: bin/tls-checker --schemes https --hosts << parameters.health_check_hosts >> --log-level info --timeout 15m
      - run:
          name: Check deployed commits
          command: scripts/check-deployed-commit "<< parameters.health_check_hosts >>" "$CIRCLE_SHA1"
      - announce_failure
  deploy_app_client_tls_steps:
    parameters:
      compare_host:
        type: string
      health_check_hosts:
        type: string
      ecr_env:
        type: string
    steps:
      - checkout
      - run:
          name: Compare against deployed commit
          command: |
            [[ -z "<< parameters.compare_host >>" ]] || scripts/compare-deployed-commit "<< parameters.compare_host >>" $CIRCLE_SHA1 ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA}
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
      - attach_workspace:
          at: /home/circleci/transcom/mymove/bin
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat /home/circleci/transcom/mymove/bin/sha/ECR_DIGEST_app_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - deploy:
          name: Deploy app-client-tls service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container app-client-tls "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - run:
          name: Health Check
          command: |
            bin/health-checker --schemes https --hosts << parameters.health_check_hosts >> --key ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} --cert ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT} --ca ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA} --tries 10 --backoff 3 --log-level info --timeout 15m
      - run:
          name: TLS Check
          command: |
            bin/tls-checker --schemes https --hosts << parameters.health_check_hosts >> --key ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} --cert ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT} --ca ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA} --log-level info --timeout 15m
      - run:
          name: Check deployed commits
          command: scripts/check-deployed-commit "<< parameters.health_check_hosts >>" "$CIRCLE_SHA1" ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA}
      - announce_failure
  deploy_app_storybook:
    parameters:
      s3_bucket:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/storybook
      - checkout
      - deploy:
          name: Push StoryBook build to S3
          command: scripts/push-storybook-assets "<< parameters.s3_bucket>>"

  build_image:
    parameters:
      dockerfile:
        type: string
      image_name:
        type: string
      tag:
        type: string
      working_dir:
        type: string
    steps:
      - run:
          name: 'Build docker image'
          working_directory: << parameters.working_dir >>
          command: |
            docker build -f << parameters.dockerfile>> -t << parameters.image_name >>:<< parameters.tag >> .
            mkdir -p /home/circleci/transcom/mymove/bin/images
            docker save -o /home/circleci/transcom/mymove/bin/images/<< parameters.image_name >> << parameters.image_name >>:<< parameters.tag >>
      - persist_to_workspace:
          root: bin
          paths:
            - images/<< parameters.image_name >>

  push_image:
    parameters:
      ecr_env:
        type: string
      image_name:
        type: string
      tag:
        type: string
      repo:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/transcom/mymove/bin
      - run:
          name: 'Retrieve docker image from workspace'
          command: |
            docker load -i /home/circleci/transcom/mymove/bin/images/<< parameters.image_name >>
      - run:
          name: 'Tag and push docker image'
          command: |
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker tag << parameters.image_name >>:<< parameters.tag >> ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-${CIRCLE_SHA1}
            shopt -s extglob
            docker tag << parameters.image_name >>:<< parameters.tag >> ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-branch-${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-branch-${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}
      - run:
          name: 'Record ECR Image Digest'
          command: |
            mkdir -p /home/circleci/transcom/mymove/bin/sha
            echo $(aws ecr describe-images --repository-name << parameters.repo >> --image-ids imageTag=git-${CIRCLE_SHA1} | jq ".imageDetails[0] .imageDigest" -r) > /home/circleci/transcom/mymove/bin/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>
            cat /home/circleci/transcom/mymove/bin/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>
      - run:
          name: 'Describe image scan findings'
          command: scripts/ecr-describe-image-scan-findings << parameters.repo >> ${CIRCLE_SHA1}
      - persist_to_workspace:
          root: bin
          paths: sha/

  server_tests_step:
    parameters:
      application:
        type: string
    steps:
      - run:
          name: make server_test_build for <<parameters.application>>
          command: make server_test_build
          environment:
            APPLICATION: '<< parameters.application >>'
            GOFLAGS: '-p=4'
      - run:
          name: make db_test_reset for <<parameters.application>>
          command: make db_test_reset
          environment:
            APPLICATION: '<< parameters.application >>'
            DB_PASSWORD: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT_TEST: 5433
            DB_PORT: 5432
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/<< parameters.application >>/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/<< parameters.application >>/schema;file:///home/circleci/transcom/mymove/migrations/<< parameters.application >>/secure'
      - run:
          name: make db_test_migrate for <<parameters.application>>
          command: make db_test_migrate
          environment:
            APPLICATION: '<< parameters.application >>'
            DB_PASSWORD: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT_TEST: 5433
            DB_PORT: 5432
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/<< parameters.application >>/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/<< parameters.application >>/schema;file:///home/circleci/transcom/mymove/migrations/<< parameters.application >>/secure'
      - run:
          name: make server_test_standalone for <<parameters.application>>
          command: |
            echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
            source $BASH_ENV
            make server_test_standalone
          environment:
            APPLICATION: '<< parameters.application >>'
            DB_PASSWORD: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT_TEST: 5433
            DB_PORT: 5432
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            EIA_KEY: db2522a43820268a41a802a16ae9fd26 # dummy key generated with openssl rand -hex 16
            ENV: test
            ENVIRONMENT: test
            GOFLAGS: '-p=4'
            JUNIT: 1
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/<< parameters.application >>/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/<< parameters.application >>/schema;file:///home/circleci/transcom/mymove/migrations/<< parameters.application >>/secure'
            SERVE_API_INTERNAL: true
  e2e_tests:
    steps:
      - run:
          name: make e2e_test_docker
          command: |
            echo 'export MOVE_MIL_DOD_CA_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.key)' >> $BASH_ENV
            echo 'export CLIENT_AUTH_SECRET_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-client_auth_secret.key)' >> $BASH_ENV
            echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
            echo 'export LOGIN_GOV_HOSTNAME=$E2E_LOGIN_GOV_HOSTNAME' >> $BASH_ENV
            echo 'export HERE_MAPS_APP_ID=$E2E_HERE_MAPS_APP_ID' >> $BASH_ENV
            echo 'export HERE_MAPS_APP_CODE=$E2E_HERE_MAPS_APP_CODE' >> $BASH_ENV
            echo "export SPEC=$(find cypress/integration -type f -name '*.js' | circleci tests split | tr '\n' ',' )" >> $BASH_ENV
            source $BASH_ENV
            make e2e_test_docker
          environment:
            # Env vars needed for the webserver to run inside docker
            APPLICATION: app
            LOGIN_GOV_CALLBACK_PROTOCOL: http
            LOGIN_GOV_MY_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:mymovemillocal
            LOGIN_GOV_OFFICE_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:officemovemillocal
            LOGIN_GOV_ADMIN_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:adminmovemillocal
            LOGIN_GOV_HOSTNAME: idp.int.identitysandbox.gov
            HERE_MAPS_GEOCODE_ENDPOINT: https://geocoder.api.here.com/6.2/geocode.json
            HERE_MAPS_ROUTING_ENDPOINT: https://route.api.here.com/routing/7.2/calculateroute.json
            DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.6_DoD.der.p7b

  e2e_tests_mtls:
    steps:
      - run:
          name: make e2e_mtls_test_docker
          command: |
            echo 'export MOVE_MIL_DOD_CA_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.key)' >> $BASH_ENV
            echo 'export CLIENT_AUTH_SECRET_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-client_auth_secret.key)' >> $BASH_ENV
            echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
            echo 'export LOGIN_GOV_HOSTNAME=$E2E_LOGIN_GOV_HOSTNAME' >> $BASH_ENV
            source $BASH_ENV
            make e2e_mtls_test_docker
          environment:
            # Env vars needed for the webserver to run inside docker
            APPLICATION: app
            LOGIN_GOV_CALLBACK_PROTOCOL: http
            LOGIN_GOV_MY_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:mymovemillocal
            LOGIN_GOV_OFFICE_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:officemovemillocal
            LOGIN_GOV_ADMIN_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:adminmovemillocal
            LOGIN_GOV_HOSTNAME: idp.int.identitysandbox.gov
            DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.6_DoD.der.p7b

jobs:
  # `pre_deps_golang` is used for caching Go module sources
  pre_deps_golang:
    executor: mymove_medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
      - run:
          name: Install dependencies
          command: for i in $(seq 1 5); do go get ./... && s=0 && break || s=$? && sleep 5; done; (exit $s)
      - run: scripts/check-generated-code go.sum
      - save_cache:
          key: go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
          paths:
            - '/go/pkg/mod'
      - announce_failure

  # `pre_deps_yarn` is used to cache yarn sources and installed node modules.
  pre_deps_yarn:
    executor: mymove_medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v3-mymove-node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Install YARN dependencies
          # setting network concurrency to 1 because using the default failed with errors trying to extract package tar files saying they were corrupt.
          # this was workaround that seemed to fix the issue See for details https://github.com/yarnpkg/yarn/issues/7212
          # This is caused by a timing issue when using react-uswds branch. It can be removed once we switch to a released version
          command: yarn install --network-concurrency 1
      - run: scripts/check-generated-code yarn.lock
      # `v3-cache-yarn-v3-{{ checksum "yarn.lock" }}` is used to cache yarn sources
      - save_cache:
          key: v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn/v3
      # `v3-mymove-node-modules-{{ checksum "yarn.lock" }}` is used to cache installed node modules
      - save_cache:
          key: v3-mymove-node-modules-{{ checksum "yarn.lock" }}
          paths:
            - ~/transcom/mymove/node_modules
      - announce_failure

  pre_deps_cypress:
    executor: mymove_medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-cache-cypress-yarn-{{ checksum "cypress/yarn.lock" }}
      - restore_cache:
          keys:
            - v1-cache-cypress-node-modules-{{ checksum "cypress/yarn.lock" }}
      - run:
          name: Install YARN dependencies
          # setting network concurrency to 1 to follow the others; this is pretty standard for cloud yarning. see note in pre_deps_yarn for more detail.
          command: yarn install --network-concurrency 1
      # `v1-cache-cypress-yarn-{{ checksum "cypress/yarn.lock" }}` is used to cache yarn sources
      - save_cache:
          key: v1-cache-cypress-yarn-{{ checksum "cypress/yarn.lock" }}
          paths:
            - ~/.cache/cypress/yarn/v1
      # `v1-cache-cypress-node-modules-{{ checksum "cypress/yarn.lock" }}` is used to cache installed node modules
      - save_cache:
          key: v1-cache-cypress-node-modules-{{ checksum "cypress/yarn.lock" }}
          paths:
            - ~/.cache/cypress/node_modules/v1
      - announce_failure

  # `check_generated_code` is used to ensure generated code doesn't change
  check_generated_code:
    executor: mymove_medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
      - run: echo 'export PATH=${PATH}:~/go/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - run: rm -rf pkg/assets/assets.go && make pkg/assets/assets.go
      - run: make server_generate mocks_generate
      - run: scripts/check-generated-code pkg/gen/ $(find . -type d -name "mocks" -exec echo -n '{} ' \;)
      - save_cache:
          key: go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
          paths:
            - '/go/pkg/mod'
      - announce_failure

  # `anti_virus` uses virus detection software to scan the source code
  anti_virus:
    executor: av_medium
    steps:
      - run: apk update && apk add --no-cache git openssh
      - checkout
      - run: clamscan --version
      - run: cp -v /root/project/anti-virus/whitelist-*.{fp,ign2} /store
      - run:
          name: freshclam --config-file /etc/clamav/freshclam.conf --datadir=/store
          command: for i in $(seq 1 5); do freshclam --config-file /etc/clamav/freshclam.conf --datadir=/store && s=0 && break || s=$? && sleep 5; done; (exit $s)
      - run: >
          clamscan \
            --recursive \
            --infected \
            --detect-pua=yes \
            --exclude-pua=NetTool \
            --exclude-pua=PWTool \
            --max-scansize=300M \
            --max-filesize=100M \
            --max-recursion=30 \
            --max-files=50000 \
            --tempdir=/tmp \
            --database=/store \
            /root/project \
            /store
      - announce_failure

  # `pre_test` runs pre-commit against all files.
  pre_test:
    executor: mymove_medium_plus
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}}
      - restore_cache:
          keys:
            - v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v3-mymove-node-modules-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - run: echo 'export PATH=${PATH}:~/go/bin:~/transcom/mymove/bin' >> $BASH_ENV
      # this is so we can avoid go mod downloading and resulting in an error on a false positive
      - run: scripts/pre-commit-go-mod || exit 0
      - run:
          name: Run pre-commit tests without golangci-lint
          command: SKIP=golangci-lint pre-commit run --all-files
      # The output of golangci-lint is an artifact towards STIG compliance
      - run:
          name: Run pre-commit tests with golangci-lint only
          command: |
            echo 'export GOLANGCI_LINT_CONCURRENCY=1' >> $BASH_ENV
            echo 'export GOLANGCI_LINT_VERBOSE=-v' >> $BASH_ENV
            source $BASH_ENV
            mkdir -p tmp/test-results/pretest
            pre-commit run -v --all-files golangci-lint | tee tmp/test-results/pretest/golangci-lint.out
      # adding danger checks here as they are similar to our pre-commit hooks
      - run:
          name: Run DangerJS checks
          command: yarn danger ci --failOnErrors
      # `pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}` is used to cache pre-commit plugins.
      - save_cache:
          key: pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit
      - store_artifacts:
          path: ~/transcom/mymove/tmp/test-results
          destination: test-results
      - announce_failure

  # `acceptance_tests` runs acceptance tests for the webserver against the local, experimental, and staging environments.
  acceptance_tests:
    executor: mymove_medium
    steps:
      - aws_vars_legacy
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
      - run:
          name: Run Local acceptance tests
          command: |
            echo 'export MOVE_MIL_DOD_CA_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.key)' >> $BASH_ENV
            echo 'export CLIENT_AUTH_SECRET_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-client_auth_secret.key)' >> $BASH_ENV
            echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
            echo 'export LOGIN_GOV_HOSTNAME=$E2E_LOGIN_GOV_HOSTNAME' >> $BASH_ENV
            echo 'export HERE_MAPS_APP_ID=$E2E_HERE_MAPS_APP_ID' >> $BASH_ENV
            echo 'export HERE_MAPS_APP_CODE=$E2E_HERE_MAPS_APP_CODE' >> $BASH_ENV
            source $BASH_ENV
            make acceptance_test
          environment:
            CHAMBER_RETRIES: 20
            DB_REGION: us-west-2
            DB_RETRY_INTERVAL: 5s
            DEVLOCAL_CA: /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem
            DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.6_DoD.der.p7b
            ENV: test
            ENVIRONMENT: test
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/app/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/app/schema;file:///home/circleci/transcom/mymove/migrations/app/secure'
            NO_TLS_ENABLED: true
            PWD: /home/circleci/transcom/mymove
      - run:
          name: Run Experimental acceptance tests
          command: make acceptance_test
          environment:
            CHAMBER_RETRIES: 20
            DB_REGION: us-west-2
            DB_RETRY_INTERVAL: 5s
            DEVLOCAL_CA: /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem
            DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.6_DoD.der.p7b
            ENV: test
            ENVIRONMENT: experimental
            NO_TLS_ENABLED: true
            PWD: /home/circleci/transcom/mymove
            TEST_ACC_ENV: experimental
      - run:
          name: Run Staging acceptance tests
          command: make acceptance_test
          environment:
            CHAMBER_RETRIES: 20
            DB_REGION: us-west-2
            DB_RETRY_INTERVAL: 5s
            DEVLOCAL_CA: /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem
            DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.6_DoD.der.p7b
            ENV: test
            ENVIRONMENT: staging
            NO_TLS_ENABLED: true
            PWD: /home/circleci/transcom/mymove
            TEST_ACC_ENV: staging
      - run: echo "Prod acceptance tests are prohibited in CircleCI"
      - announce_failure

  # `integration_tests` runs integration tests using Cypress.  https://www.cypress.io/
  integration_tests:
    parallelism: 5
    executor: mymove_large
    steps:
      - aws_vars_legacy
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
      - restore_cache:
          keys:
            - v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v3-mymove-node-modules-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v1-cache-cypress-yarn-{{ checksum "cypress/yarn.lock" }}
      - restore_cache:
          keys:
            - v1-cache-cypress-node-modules-{{ checksum "cypress/yarn.lock" }}
      - attach_workspace:
          at: /home/circleci/transcom/mymove/bin
      - run: rm -f pkg/assets/assets.go && make pkg/assets/assets.go
      - run: make server_generate
      - run: rm -f bin/generate-test-data && make bin/generate-test-data
      - run: rm -f bin/prime-api-client && make bin/prime-api-client
      - e2e_tests
      - store_artifacts:
          path: cypress/videos
          destination: videos
      - store_artifacts:
          path: cypress/screenshots
          destination: screenshots
      - store_test_results:
          path: cypress/results
      - announce_failure

  # `integration_tests` runs integration tests using Cypress.  https://www.cypress.io/
  integration_tests_mtls:
    executor: mymove_medium_plus
    steps:
      - aws_vars_legacy
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
      - restore_cache:
          keys:
            - v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v3-mymove-node-modules-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: /home/circleci/transcom/mymove/bin
      - run: rm -f pkg/assets/assets.go && make pkg/assets/assets.go
      - run: make server_generate
      - run: rm -f bin/generate-test-data && make bin/generate-test-data
      - run: rm -f bin/prime-api-client && make bin/prime-api-client
      - e2e_tests_mtls
      - store_test_results:
          path: cypress/results
      - announce_failure

  # `server_test` runs the server side Go tests
  server_test:
    executor: mymove_and_postgres_large
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
      - run: echo 'export PATH=${PATH}:~/go/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - run: sudo apt-get update && sudo apt-get install -yy postgresql-client
      - run: make bin/go-junit-report
      - run: make bin/milmove
      - server_tests_step:
          application: app
      - server_tests_step:
          application: orders
      - store_artifacts:
          path: ~/transcom/mymove/tmp/test-results
          destination: test-results
      - store_test_results:
          path: ~/transcom/mymove/tmp/test-results
      - announce_failure

  # `client_test` runs the client side Javascript tests
  client_test:
    executor: mymove_large
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v2-mymove-node-modules-{{ checksum "yarn.lock" }}
      - run: make client_test
      - announce_failure

  # `build_tools` builds the mymove-specific CLI tools in `mymove/cmd`
  build_tools:
    executor: mymove_medium_plus
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
      - run: make build_tools
      - persist_to_workspace:
          root: /home/circleci/transcom/mymove/bin
          paths:
            - ecs-deploy # for registering task defs and deploying task container
            - ecs-service-logs # for showing logs on failed deploy
            - generate-test-data # for integration tests
            - health-checker # for confirming deploy success.
            - mockery # for generating mocks
            - renderer # for rendering ECS task definition
            - tls-checker # for confirming app won't respond to invalid TLS settings.
            - prime-api-client #for running Prime API integration tests
      - announce_failure

  # `build_app` builds the application container
  build_app:
    executor: mymove_medium_plus
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
      - restore_cache:
          keys:
            - v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v3-mymove-node-modules-{{ checksum "yarn.lock" }}
      - run: make bin/rds-ca-2019-root.pem
      - run: make bin/rds-ca-us-gov-west-1-2017-root.pem
      - run: make client_build
      - run: make server_build
      - build_image:
          dockerfile: Dockerfile
          image_name: ppp
          tag: web-dev
          working_dir: ~/transcom/mymove
      - announce_failure

  # `push_app_legacy` pushes the app container to the legacy container repository
  push_app_legacy:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_legacy
      - push_image:
          ecr_env: legacy
          image_name: ppp
          tag: web-dev
          repo: app
      - announce_failure

  # `push_app_exp` pushes the app container to the milmove-exp container repository
  push_app_exp:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_exp
      - push_image:
          ecr_env: exp
          image_name: ppp
          tag: web-dev
          repo: app
      - announce_failure

  # `push_app_stg` pushes the app container to the milmove-stg container repository
  push_app_stg:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_stg
      - push_image:
          ecr_env: stg
          image_name: ppp
          tag: web-dev
          repo: app
      - announce_failure

  # `push_app_prd` pushes the app container to the milmove-prd container repository
  push_app_prd:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_prd
      - push_image:
          ecr_env: prd
          image_name: ppp
          tag: web-dev
          repo: app
      - announce_failure

  # `storybook_tests` builds the storybook application container and pushes to the container repository
  storybook_tests:
    executor: mymove_medium_plus
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - restore_cache:
          keys:
            - v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v3-mymove-node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: make storybook_tests
          command: make storybook_tests
          environment:
            CHROME_CONCURRENCY: 3
      - run: make storybook_build
      - persist_to_workspace:
          root: /home/circleci/transcom/mymove/
          paths:
            - storybook-static
      - store_artifacts:
          path: .loki/current
          destination: current
      - store_artifacts:
          path: .loki/difference
          destination: difference
      - store_artifacts:
          path: .loki/reference
          destination: reference
      - announce_failure

  # `build_migrations` builds the migrations container
  build_migrations:
    executor: mymove_medium
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: make bin/rds-ca-2019-root.pem
      - run: make bin/rds-ca-us-gov-west-1-2017-root.pem
      - run: make server_build
      - build_image:
          dockerfile: Dockerfile.migrations
          image_name: ppp-migrations
          tag: dev
          working_dir: ~/transcom/mymove
      - announce_failure

  # `push_migrations_legacy` pushes the migrations container to the legacy container repository
  push_migrations_legacy:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_legacy
      - push_image:
          ecr_env: legacy
          image_name: ppp-migrations
          tag: dev
          repo: app-migrations
      - announce_failure

  # `push_migrations_exp` pushes the migrations container to the milmove-exp container repository
  push_migrations_exp:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_exp
      - push_image:
          ecr_env: exp
          image_name: ppp-migrations
          tag: dev
          repo: app-migrations
      - announce_failure

  # `push_migrations_stg` pushes the migrations container to the milmove-stg container repository
  push_migrations_stg:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_stg
      - push_image:
          ecr_env: stg
          image_name: ppp-migrations
          tag: dev
          repo: app-migrations
      - announce_failure

  # `push_migrations_prd` pushes the migrations container to the milmove-prd container repository
  push_migrations_prd:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_prd
      - push_image:
          ecr_env: prd
          image_name: ppp-migrations
          tag: dev
          repo: app-migrations
      - announce_failure

  # `build_django_app` builds the django app container
  build_milmove_admin_app:
    executor: mymove_and_postgres_medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
      - run: echo 'export PATH=${PATH}:~/go/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - run: sudo apt-get update && sudo apt-get install -yy postgresql-client
      - run:
          name: make db_test_reset for milmove_admin
          command: make db_test_reset
          environment:
            APPLICATION: app
            DB_PASSWORD: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT_TEST: 5433
            DB_PORT: 5432
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/app/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/app/schema;file:///home/circleci/transcom/mymove/migrations/app/secure'
      - run:
          name: make db_test_migrate for milmove_admin
          command: make db_test_migrate
          environment:
            APPLICATION: app
            DB_PASSWORD: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT_TEST: 5433
            DB_PORT: 5432
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/app/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/app/schema;file:///home/circleci/transcom/mymove/migrations/app/secure'
      - run:
          name: clone mymove_admin repo
          command: git clone https://github.com/transcom/milmove_admin.git
          working_directory: ~/transcom
      - run:
          name: generate models file for migrations
          command: make generate_models_standalone
          working_directory: ~/transcom/milmove_admin
          environment:
            DB_PASSWORD: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT: 5432
            DB_NAME: test_db
            DJANGO_ALLOWED_HOSTS: 'localhost 127.0.0.1 [::1]'
            LOGIN_GOV_HOSTNAME: idp.int.identitysandbox.gov
            LOGIN_GOV_CALLBACK_PROTOCOL: http
            LOGIN_GOV_ENGADMIN_CLIENT_ID: 'urn:gov:gsa:openidconnect.profiles:sp:sso:dod:engadminmovemillocal'
            LOCAL_HOST_NAME: engadminlocal
            LOGIN_GOV_CALLBACK_PORT: 3000
            LOGIN_GOV_KID_JWK: milmove_admin
            LOGIN_GOV_JWK_SET_FILENAME: keyset.jwk
      - setup_remote_docker:
          docker_layer_caching: false
      - build_image:
          dockerfile: Dockerfile.prod
          image_name: engadmin
          tag: dev
          working_dir: ~/transcom/milmove_admin/app
      - build_image:
          dockerfile: Dockerfile
          image_name: engadmin-nginx
          tag: dev
          working_dir: ~/transcom/milmove_admin/nginx
      - announce_failure

  # `push_milmove_admin_app_legacy` pushes the django admin container to the legacy container repository
  push_milmove_admin_app_legacy:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_legacy
      - push_image:
          ecr_env: legacy
          image_name: engadmin
          tag: dev
          repo: app-engadmin
      - push_image:
          ecr_env: legacy
          image_name: engadmin-nginx
          tag: dev
          repo: app-engadmin-nginx
      - announce_failure

  # `push_milmove_admin_app_exp` pushes the django admin container to the milmove-exp container repository
  push_milmove_admin_app_exp:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_exp
      - push_image:
          ecr_env: exp
          image_name: engadmin
          tag: dev
          repo: app-engadmin
      - push_image:
          ecr_env: exp
          image_name: engadmin-nginx
          tag: dev
          repo: app-engadmin-nginx
      - announce_failure

  # `push_milmove_admin_app_stg` pushes the django admin container to the milmove-stg container repository
  push_milmove_admin_app_stg:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_stg
      - push_image:
          ecr_env: stg
          image_name: engadmin
          tag: dev
          repo: app-engadmin
      - push_image:
          ecr_env: stg
          image_name: engadmin-nginx
          tag: dev
          repo: app-engadmin-nginx
      - announce_failure

  # `push_milmove_admin_app_prd` pushes the django admin container to the milmove-prd container repository
  push_milmove_admin_app_prd:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_prd
      - push_image:
          ecr_env: prd
          image_name: engadmin
          tag: dev
          repo: app-engadmin
      - push_image:
          ecr_env: prd
          image_name: engadmin-nginx
          tag: dev
          repo: app-engadmin-nginx
      - announce_failure

  # `build_tasks` builds the tasks containers
  build_tasks:
    executor: mymove_medium
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}}
      - run: make bin/rds-ca-2019-root.pem
      - run: make bin/rds-ca-us-gov-west-1-2017-root.pem
      - run: rm -f pkg/assets/assets.go && make pkg/assets/assets.go
      - run: make server_generate
      - run: rm -f bin/milmove-tasks && make bin/milmove-tasks
      - build_image:
          dockerfile: Dockerfile.tasks
          image_name: tasks
          tag: dev
          working_dir: ~/transcom/mymove
      - announce_failure

  # `push_tasks_legacy` pushes the tasks containers to the legacy container repository
  push_tasks_legacy:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_legacy
      - push_image:
          ecr_env: legacy
          image_name: tasks
          tag: dev
          repo: app-tasks
      - announce_failure

  # `push_tasks_exp` pushes the tasks containers to the milmove-exp container repository
  push_tasks_exp:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_exp
      - push_image:
          ecr_env: exp
          image_name: tasks
          tag: dev
          repo: app-tasks
      - announce_failure

  # `push_tasks_stg` pushes the tasks containers to the milmove-stg container repository
  push_tasks_stg:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_stg
      - push_image:
          ecr_env: stg
          image_name: tasks
          tag: dev
          repo: app-tasks
      - announce_failure

  # `push_tasks_prd` pushes the tasks containers to the milmove-prd container repository
  push_tasks_prd:
    executor: mymove_small
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - aws_vars_prd
      - push_image:
          ecr_env: prd
          image_name: tasks
          tag: dev
          repo: app-tasks
      - announce_failure

  # `deploy_experimental_migrations` deploys migrations to the experimental environment
  deploy_experimental_migrations:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'experimental'
    steps:
      - aws_vars_legacy
      - deploy_migrations_steps:
          ecr_env: legacy

  # `deploy_experimental_tasks` deploys scheduled tasks to the experimental environment
  deploy_experimental_tasks:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'experimental'
    steps:
      - aws_vars_legacy
      - deploy_tasks_steps:
          ecr_env: legacy

  # `deploy_experimental_app` updates the server-TLS app service in the experimental environment
  deploy_experimental_app:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'experimental'
    steps:
      - aws_vars_legacy
      - deploy_app_steps:
          compare_host: '' # leave blank since we want experimental to be able to roll back
          health_check_hosts: my.experimental.move.mil,office.experimental.move.mil,admin.experimental.move.mil
          ecr_env: legacy

  # `deploy_experimental_app_client_tls` updates the mutual-TLS service in the experimental environment
  deploy_experimental_app_client_tls:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'experimental'
    steps:
      - aws_vars_legacy
      - deploy_app_client_tls_steps:
          compare_host: '' # leave blank since we want experimental to be able to roll back
          health_check_hosts: gex.experimental.move.mil,dps.experimental.move.mil,orders.experimental.move.mil
          ecr_env: legacy

  # `deploy_exp_migrations` deploys migrations to the exp environment
  deploy_exp_migrations:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'exp'
    steps:
      - aws_vars_exp
      - deploy_migrations_steps:
          ecr_env: exp

  # `deploy_exp_tasks` deploys scheduled tasks to the exp environment
  deploy_exp_tasks:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'exp'
    steps:
      - aws_vars_exp
      - deploy_tasks_steps:
          ecr_env: exp

  # `deploy_exp_app` updates the server-TLS app service in the exp environment
  deploy_exp_app:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'exp'
    steps:
      - aws_vars_exp
      - deploy_app_steps:
          compare_host: '' # leave blank since we want exp to be able to roll back
          health_check_hosts: my.exp.move.mil,office.exp.move.mil,admin.exp.move.mil
          ecr_env: exp
  # `deploy_exp_app_client_tls` updates the mutual-TLS service in the exp environment
  deploy_exp_app_client_tls:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'exp'
    steps:
      - aws_vars_exp
      - deploy_app_client_tls_steps:
          compare_host: '' # leave blank since we want exp to be able to roll back
          health_check_hosts: gex.exp.move.mil,dps.exp.move.mil,orders.exp.move.mil
          ecr_env: exp

  check_circle_against_staging_sha:
    executor: mymove_small
    steps:
      - checkout
      - run:
          name: Halt workflow to prevent old master deploying to staging
          command: scripts/compare-deployed-commit my.staging.move.mil $CIRCLE_SHA1

  # `deploy_staging_migrations` deploys migrations to the staging environment
  deploy_staging_migrations:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'staging'
    steps:
      - aws_vars_legacy
      - deploy_migrations_steps:
          ecr_env: legacy

  # `deploy_staging_tasks` deploys scheduled tasks to the staging environment
  deploy_staging_tasks:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'staging'
    steps:
      - aws_vars_legacy
      - deploy_tasks_steps:
          ecr_env: legacy

  # `deploy_staging_app` updates the server-TLS app service in staging environment
  deploy_staging_app:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'staging'
    steps:
      - aws_vars_legacy
      - deploy_app_steps:
          compare_host: my.staging.move.mil
          health_check_hosts: my.staging.move.mil,office.staging.move.mil,admin.staging.move.mil
          ecr_env: legacy

  # `deploy_staging_app_client_tls` updates the mutual-TLS service in the staging environment
  deploy_staging_app_client_tls:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'staging'
    steps:
      - aws_vars_legacy
      - deploy_app_client_tls_steps:
          compare_host: gex.staging.move.mil
          health_check_hosts: gex.staging.move.mil,dps.staging.move.mil,orders.staging.move.mil
          ecr_env: legacy

  check_circle_against_stg_sha:
    executor: mymove_small
    steps:
      - checkout
      - run:
          name: Halt workflow to prevent old master deploying to staging
          command: scripts/compare-deployed-commit my.stg.move.mil $CIRCLE_SHA1

  # `deploy_stg_migrations` deploys migrations to the stg environment
  deploy_stg_migrations:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'stg'
    steps:
      - aws_vars_stg
      - deploy_migrations_steps:
          ecr_env: stg

  # `deploy_stg_tasks` deploys scheduled tasks to the stg environment
  deploy_stg_tasks:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'stg'
    steps:
      - aws_vars_stg
      - deploy_tasks_steps:
          ecr_env: stg

  # `deploy_stg_app` updates the server-TLS app service in stg environment
  deploy_stg_app:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'stg'
    steps:
      - aws_vars_stg
      - deploy_app_steps:
          compare_host: my.stg.move.mil
          health_check_hosts: my.stg.move.mil,office.stg.move.mil,admin.stg.move.mil
          ecr_env: stg

  # `deploy_stg_app_client_tls` updates the mutual-TLS service in the stg environment
  deploy_stg_app_client_tls:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'stg'
    steps:
      - aws_vars_stg
      - deploy_app_client_tls_steps:
          compare_host: gex.stg.move.mil
          health_check_hosts: gex.stg.move.mil,dps.stg.move.mil,orders.stg.move.mil
          ecr_env: stg

  # `deploy_prod_migrations` deploys migrations to the prod environment
  deploy_prod_migrations:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'prod'
    steps:
      - aws_vars_legacy
      - deploy_migrations_steps:
          ecr_env: legacy

  # `deploy_prod_tasks` deploys scheduled tasks to the prod environment
  deploy_prod_tasks:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'prod'
    steps:
      - aws_vars_legacy
      - deploy_tasks_steps:
          ecr_env: legacy

  # `deploy_prod_app` updates the server-TLS app service in the prod environment
  deploy_prod_app:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'prod'
    steps:
      - aws_vars_legacy
      - deploy_app_steps:
          compare_host: my.move.mil
          health_check_hosts: my.move.mil,office.move.mil,admin.move.mil
          ecr_env: legacy

  # `deploy_prod_app_client_tls` updates the mutual-TLS service in the prod environment
  deploy_prod_app_client_tls:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'prod'
    steps:
      - aws_vars_legacy
      - deploy_app_client_tls_steps:
          compare_host: gex.move.mil
          health_check_hosts: gex.move.mil,dps.move.mil,orders.move.mil
          ecr_env: legacy

  deploy_prod_storybook:
    executor: mymove_small
    steps:
      - aws_vars_legacy
      - deploy_app_storybook:
          s3_bucket: storybook.move.mil

  deploy_storybook_dp3:
    executor: mymove_small
    steps:
      - aws_vars_transcom_com_dev
      - deploy_app_storybook:
          s3_bucket: storybook.dp3.us

  # `deploy_prd_migrations` deploys migrations to the milmove-prd environment
  deploy_prd_migrations:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'prd'
    steps:
      - aws_vars_prd
      - deploy_migrations_steps:
          ecr_env: prd

  # `deploy_prd_tasks` deploys ECS tasks in the milmove-prd environment
  deploy_prd_tasks:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'prd'
    steps:
      - aws_vars_prd
      - deploy_tasks_steps:
          ecr_env: prd

  # `deploy_prd_app` updates the server-TLS app service in the milmove-prd environment
  deploy_prd_app:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'prd'
    steps:
      - aws_vars_prd
      - deploy_app_steps:
          compare_host: my.prd.move.mil
          health_check_hosts: my.prd.move.mil,office.prd.move.mil,admin.prd.move.mil
          ecr_env: prd

  # `deploy_prd_app_client_tls` updates the mutual-TLS service in the milmove-prd environment
  deploy_prd_app_client_tls:
    executor: mymove_small
    environment:
      - APP_ENVIRONMENT: 'prd'
    steps:
      - aws_vars_prd
      - deploy_app_client_tls_steps:
          compare_host: gex.prd.move.mil
          health_check_hosts: gex.prd.move.mil,dps.prd.move.mil,orders.prd.move.mil
          ecr_env: prd

workflows:
  version: 2

  app:
    jobs:
      - pre_deps_golang

      - pre_deps_yarn

      - build_milmove_admin_app:
          requires:
            - pre_deps_golang

      - push_milmove_admin_app_legacy:
          requires:
            - build_milmove_admin_app

      - check_generated_code:
          requires:
            - pre_deps_golang

      - anti_virus:
          filters:
            branches:
              only: master

      - pre_test:
          requires:
            - pre_deps_golang
            - pre_deps_yarn

      - acceptance_tests:
          requires:
            - pre_deps_golang

      - pre_deps_cypress

      - integration_tests:
          requires:
            - pre_deps_golang
            - pre_deps_yarn
            - pre_deps_cypress
            - check_generated_code
            - push_app_legacy
            - push_app_stg
            - push_migrations_legacy
            - push_migrations_stg
            - acceptance_tests
          # if testing on experimental, you can disable these tests by using the commented block below.
          filters:
            branches:
              ignore: placeholder_branch_name

      - integration_tests_mtls:
          requires:
            - pre_deps_golang
            - check_generated_code
            - push_app_legacy
            - push_app_stg
            - push_migrations_legacy
            - push_migrations_stg
            - acceptance_tests
          # if testing on experimental, you can disable these tests by using the commented block below.
          filters:
            branches:
              ignore: placeholder_branch_name

      - client_test:
          requires:
            - pre_deps_yarn
          # if testing on experimental, you can disable these tests by using the commented block below.
          filters:
            branches:
              ignore: placeholder_branch_name

      - server_test:
          requires:
            - pre_deps_golang
          # if testing on experimental, you can disable these tests by using the commented block below.
          filters:
            branches:
              ignore: placeholder_branch_name

      - build_app:
          requires:
            - anti_virus
            - pre_deps_golang
            - pre_deps_yarn
            - acceptance_tests # don't bother building and pushing the application if it won't even start properly

      - push_app_legacy:
          requires:
            - build_app

      - build_tools:
          requires:
            - anti_virus
            - pre_deps_golang

      - build_migrations:
          requires:
            - anti_virus
            - pre_deps_golang

      - push_migrations_legacy:
          requires:
            - build_migrations

      - build_tasks:
          requires:
            - build_tools

      - push_tasks_legacy:
          requires:
            - build_tasks

      - deploy_experimental_migrations:
          requires:
            - pre_test
            - client_test
            - server_test
            - acceptance_tests
            - push_app_legacy
            - build_tools
            - push_tasks_legacy
            - push_migrations_legacy
          filters:
            branches:
              only: placeholder_branch_name

      - deploy_experimental_tasks:
          requires:
            - deploy_experimental_migrations
          filters:
            branches:
              only: placeholder_branch_name

      - deploy_experimental_app:
          requires:
            - deploy_experimental_migrations
          filters:
            branches:
              only: placeholder_branch_name

      - deploy_experimental_app_client_tls:
          requires:
            - deploy_experimental_migrations
          filters:
            branches:
              only: placeholder_branch_name

      - push_milmove_admin_app_exp:
          requires:
            - build_milmove_admin_app
          filters:
            branches:
              only: placeholder_branch_name

      - push_app_exp:
          requires:
            - build_app
          filters:
            branches:
              only: placeholder_branch_name

      - push_migrations_exp:
          requires:
            - build_migrations
          filters:
            branches:
              only: placeholder_branch_name

      - push_tasks_exp:
          requires:
            - build_tasks
          filters:
            branches:
              only: placeholder_branch_name

      - deploy_exp_migrations:
          requires:
            - pre_test
            - client_test
            - server_test
            - acceptance_tests
            - push_app_exp
            - build_tools
            - push_tasks_exp
            - push_migrations_exp
          filters:
            branches:
              only: placeholder_branch_name

      - deploy_exp_tasks:
          requires:
            - deploy_exp_migrations
          filters:
            branches:
              only: placeholder_branch_name

      - deploy_exp_app:
          requires:
            - deploy_exp_migrations
          filters:
            branches:
              only: placeholder_branch_name

      - deploy_exp_app_client_tls:
          requires:
            - deploy_exp_migrations
          filters:
            branches:
              only: placeholder_branch_name

      - check_circle_against_staging_sha:
          requires:
            - pre_test
            - client_test
            - server_test
            - push_app_legacy
            - build_tools
            - push_migrations_legacy
            - push_tasks_legacy
            - acceptance_tests
            - integration_tests
            - integration_tests_mtls
          filters:
            branches:
              only: master

      - deploy_staging_migrations:
          requires:
            - check_circle_against_staging_sha
          filters:
            branches:
              only: master

      - deploy_staging_tasks:
          requires:
            - deploy_staging_migrations
          filters:
            branches:
              only: master

      - deploy_staging_app:
          requires:
            - deploy_staging_migrations
          filters:
            branches:
              only: master

      - deploy_staging_app_client_tls:
          requires:
            - deploy_staging_migrations
          filters:
            branches:
              only: master

      - push_app_stg:
          requires:
            - build_app
          filters:
            branches:
              only: master

      - push_migrations_stg:
          requires:
            - build_migrations
          filters:
            branches:
              only: master

      - push_tasks_stg:
          requires:
            - build_tasks
          filters:
            branches:
              only: master

      - check_circle_against_stg_sha:
          requires:
            - pre_test
            - client_test
            - server_test
            - push_app_stg
            - build_tools
            - push_migrations_stg
            - push_tasks_stg
            - acceptance_tests
            - integration_tests
            - integration_tests_mtls
          filters:
            branches:
              only: master

      - deploy_stg_migrations:
          requires:
            - check_circle_against_stg_sha
          filters:
            branches:
              only: master

      - deploy_stg_tasks:
          requires:
            - deploy_stg_migrations
          filters:
            branches:
              only: master

      - deploy_stg_app:
          requires:
            - deploy_stg_migrations
          filters:
            branches:
              only: master

      - deploy_stg_app_client_tls:
          requires:
            - deploy_stg_migrations
          filters:
            branches:
              only: master

      - approve_prod_deploy:
          type: approval
          requires:
            - deploy_staging_tasks
            - deploy_staging_app
            - deploy_staging_app_client_tls

      - deploy_prod_migrations:
          requires:
            - approve_prod_deploy
          filters:
            branches:
              only: master

      - deploy_prod_tasks:
          requires:
            - deploy_prod_migrations
          filters:
            branches:
              only: master

      - deploy_prod_app:
          requires:
            - deploy_prod_migrations
          filters:
            branches:
              only: master

      - deploy_prod_app_client_tls:
          requires:
            - deploy_prod_migrations
          filters:
            branches:
              only: master

      - deploy_prod_storybook:
          requires:
            - storybook_tests
          filters:
            branches:
              only: master

      - deploy_storybook_dp3:
          requires:
            - storybook_tests
          filters:
            branches:
              only: master

      - storybook_tests:
          requires:
            - anti_virus
            - pre_deps_yarn

      - push_app_prd:
          requires:
            - build_app # replace with approve_prod_deploy
          filters:
            branches:
              only: DEPLOY_PRD_PLACEHOLDER

      - push_migrations_prd:
          requires:
            - build_migrations # replace with approve_prod_deploy
          filters:
            branches:
              only: DEPLOY_PRD_PLACEHOLDER

      - push_tasks_prd:
          requires:
            - build_tasks # replace with approve_prod_deploy
          filters:
            branches:
              only: DEPLOY_PRD_PLACEHOLDER

      - deploy_prd_migrations:
          requires:
            - push_migrations_prd
            - pre_test # delete
            - client_test # delete
            - server_test # delete
            - acceptance_tests # delete
            - build_tools # delete
            - push_app_prd
            - push_tasks_prd
          filters:
            branches:
              only: DEPLOY_PRD_PLACEHOLDER

      - deploy_prd_tasks:
          requires:
            - deploy_prd_migrations
            - push_tasks_prd
          filters:
            branches:
              only: DEPLOY_PRD_PLACEHOLDER

      - deploy_prd_app:
          requires:
            - deploy_prd_migrations
            - push_app_prd
          filters:
            branches:
              only: DEPLOY_PRD_PLACEHOLDER

      - deploy_prd_app_client_tls:
          requires:
            - deploy_prd_migrations
            - push_app_prd
          filters:
            branches:
              only: DEPLOY_PRD_PLACEHOLDER

experimental:
  notify:
    branches:
      only:
        - master
