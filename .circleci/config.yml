version: 2
jobs:

  pre_test:
    working_directory: ~/go/src/github.com/transcom/mymove
    docker:
      - image: trussworks/circleci-docker-primary:4bb9cacfdfa1fbc995e89204f030264843f5bc91
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-go-pkg-dep-{{ checksum "Gopkg.lock" }}
            - v1-go-pkg-dep
      - restore_cache:
          keys:
            - pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - run:
          name: Install prettier
          command: npm install prettier@~1.12.0
      - run:
          name: Install markdown-spellcheck
          command: npm install markdown-spellcheck
      - run:
          name: Install markdown-toc
          command: npm install markdown-toc
      - run: echo 'export PATH=${PATH}:~/go/bin' >> $BASH_ENV
      - run:
          name: Install dep
          command: go get -u github.com/golang/dep/cmd/dep
      - run:
          name: Run make server_generate
          command: make server_generate
      - run:
          name: Run pre-commit tests
          command: pre-commit run --all-files
      - save_cache:
          key: pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit
      - save_cache:
          key: v1-go-pkg-dep-{{ checksum "Gopkg.lock" }}
          paths:
            - ~/go/pkg/dep
      - run: &announce_failure
          name: Announce failure
          command: |
            [[ $CIRCLE_BRANCH = master ]] || exit 0
            bin/circleci-announce-broken-branch
          when: on_fail

  build_app:
    working_directory: ~/go/src/github.com/transcom/mymove
    docker:
      - image: trussworks/circleci-docker-primary:4bb9cacfdfa1fbc995e89204f030264843f5bc91
      - image: postgres:latest
        environment:
          - POSTGRES_PASSWORD: mysecretpassword
          - POSTGRES_DB: test_db
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - v1-go-pkg-dep-{{ checksum "Gopkg.lock" }}
            - v1-go-pkg-dep
      - restore_cache:
          keys:
            - yarn-node-modules-cache-{{ checksum "yarn.lock" }}

      - run:
          # This is needed to use `psql` to test DB connectivity, until the app
          # itself starts making database connections.
          name: Install postgres client
          command: |
            sudo apt-get -qq update
            sudo apt-get -qq -y install postgresql-client-9.4
      - run:
          name: Install dep
          command: |
            go get -u github.com/golang/dep/cmd/dep
            echo 'export PATH=${PATH}:~/go/bin' >> $BASH_ENV

      - run: echo 'export PATH=${PATH}:~/go/bin' >> $BASH_ENV
      - run: make deps
      - run: make client_build
      - run: make client_test
      - run:
          name: make server_test
          command: make server_test
          environment:
            # Env vars needed by the `bin/apply-secure-migrations.sh` script
            DB_PASSWORD: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT: 5432
            DB_NAME: test_db
            SECURE_MIGRATION_DIR: /home/circleci/go/src/github.com/transcom/mymove/local_migrations
            SECURE_MIGRATION_SOURCE: local
      - run: make tools_build
      - run: make server_build_docker
      - run:
          name: Tag and push image
          command: |
            bash -c "$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)"
            docker tag ppp:web-dev ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1}

      - save_cache:
          key: v1-go-pkg-dep-{{ checksum "Gopkg.lock" }}
          paths:
            - ~/go/pkg/dep
      - save_cache:
          key: yarn-node-modules-cache-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

      - run: *announce_failure

  build_migrations:
    docker:
      - image: trussworks/circleci-docker-primary:4bb9cacfdfa1fbc995e89204f030264843f5bc91
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: make db_build_docker
      - run:
          name: Tag and push migrations image
          command: |
            bash -c "$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)"
            docker tag ppp-migrations:dev ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:git-${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:git-${CIRCLE_SHA1}
      - run: *announce_failure

  deploy_staging_migrations:
    docker:
      - image: trussworks/circleci-docker-primary:4bb9cacfdfa1fbc995e89204f030264843f5bc91
    environment:
      - APP_ENVIRONMENT: "staging"
    steps: &deploy_migrations_steps
      - checkout
      - run:
          name: Snapshot database
          command: bin/rds-snapshot-app-db $APP_ENVIRONMENT
      - run:
          name: Run database migrations
          command: bin/ecs-run-app-migrations-container config/app-migrations.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:git-${CIRCLE_SHA1} $APP_ENVIRONMENT
      - run: *announce_failure

  deploy_staging_app_redirect:
    docker:
      - image: trussworks/circleci-docker-primary:4bb9cacfdfa1fbc995e89204f030264843f5bc91
    environment:
      - APP_ENVIRONMENT: "staging"
      - APP_REDIRECT_HEALTH_CHECK_URL: "http://my.staging.move.mil/"
    steps: &deploy_app_redirect_steps
      - checkout
      - setup_remote_docker
      - deploy:
          name: Deploy https redirect service
          command: bin/ecs-deploy-service-container app-redirect config/app-redirect.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/https-redirect $APP_ENVIRONMENT FARGATE
      - run:
          name: Health check https redirect
          command: for retry in `seq 1 10`; do if [[ $(curl -f -sS -o /dev/null -w '%{http_code}' $APP_REDIRECT_HEALTH_CHECK_URL) -eq 301 ]]; then echo Passed.; exit 0; else sleep $(($retry*3)); fi; done; exit 1
      - run: *announce_failure

  deploy_staging_app:
    docker:
      - image: trussworks/circleci-docker-primary:4bb9cacfdfa1fbc995e89204f030264843f5bc91
    environment:
      - APP_ENVIRONMENT: "staging"
      - APP_HEALTH_CHECK_URL: "https://my.staging.move.mil/health"
    steps: &deploy_app_steps
      - checkout
      - setup_remote_docker
      - deploy:
          name: Deploy app service
          command: bin/ecs-deploy-service-container app config/app.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1} $APP_ENVIRONMENT FARGATE
      - run:
          name: Health check app site
          command: for retry in `seq 1 10`; do if curl -f -sS -o /dev/null $APP_HEALTH_CHECK_URL; then echo Passed.; exit 0; else sleep $(($retry*3)); fi; done; exit 1
      - run: *announce_failure

  deploy_prod_migrations:
    docker:
      - image: trussworks/circleci-docker-primary:4bb9cacfdfa1fbc995e89204f030264843f5bc91
    environment:
      - APP_ENVIRONMENT: "prod"
    steps: *deploy_migrations_steps

  deploy_prod_app_redirect:
    docker:
      - image: trussworks/circleci-docker-primary:4bb9cacfdfa1fbc995e89204f030264843f5bc91
    environment:
      - APP_ENVIRONMENT: "prod"
      - APP_REDIRECT_HEALTH_CHECK_URL: "http://my.move.mil/"
    steps: *deploy_app_redirect_steps

  deploy_prod_app:
    docker:
      - image: trussworks/circleci-docker-primary:4bb9cacfdfa1fbc995e89204f030264843f5bc91
    environment:
      - APP_ENVIRONMENT: "prod"
      - APP_HEALTH_CHECK_URL: "https://my.move.mil/health"
    steps: *deploy_app_steps

  integration_tests:
    docker:
      - image: trussworks/circleci-docker-primary:4bb9cacfdfa1fbc995e89204f030264843f5bc91
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-node-modules-cache-{{ checksum "yarn.lock" }}

      - run: make e2e_test
      - save_cache:
          key: yarn-node-modules-cache-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run: *announce_failure

  update_dependencies:
    working_directory: ~/go/src/github.com/transcom/mymove
    docker:
      - image: trussworks/circleci-docker-primary:4bb9cacfdfa1fbc995e89204f030264843f5bc91
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-go-pkg-dep-{{ checksum "Gopkg.lock" }}
            - v1-go-pkg-dep

      - run:
          name: Install dep
          command: |
            go get -u github.com/golang/dep/cmd/dep
            echo 'export PATH=${PATH}:~/go/bin' >> $BASH_ENV
      - run: pre-commit autoupdate
      - run: make server_deps_update
      - run: make client_deps_update
      - run:
          name: Display changes
          command: |
            git --no-pager status
            git --no-pager diff --ignore-all-space --color
      - run:
          name: Push changes
          command: bin/circleci-push-dependency-updates
      - save_cache:
          key: v1-go-pkg-dep-{{ checksum "Gopkg.lock" }}
          paths:
            - ~/go/pkg/dep

workflows:
  version: 2

  app:
    jobs:
      - pre_test
      - build_app
      - build_migrations

      - deploy_staging_migrations:
          requires:
            - pre_test
            - build_app
            - build_migrations
          filters:
            branches:
              only: master

      - deploy_staging_app_redirect:
          requires:
            - deploy_staging_migrations
          filters:
            branches:
              only: master
      - deploy_staging_app:
          requires:
            - deploy_staging_migrations
          filters:
            branches:
              only: master

      - approve_prod_deploy:
          type: approval
          requires:
            - deploy_staging_app_redirect
            - deploy_staging_app

      - deploy_prod_migrations:
          requires:
            - approve_prod_deploy
          filters:
            branches:
              only: master

      - deploy_prod_app_redirect:
          requires:
            - deploy_prod_migrations
          filters:
            branches:
              only: master
      - deploy_prod_app:
          requires:
            - deploy_prod_migrations
          filters:
            branches:
              only: master


  dependency_updater:
    triggers:
      - schedule:
          # Monday at 4am/7am PST/EST
          cron: "0 12 * * 1"
          filters:
            branches:
              only: master
    jobs:
      - update_dependencies

experimental:
  notify:
    branches:
      only:
        - master
