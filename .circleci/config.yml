# yaml-language-server: $schema=https://json.schemastore.org/circleciconfig.json
############
#
# Caches
#
# Caches may have a `v1-` prefix, since caches in CircleCI 2.0 are immutable.
# A prefix provides an easy way to invalidate a cache.  See https://circleci.com/docs/2.0/caching/#clearing-cache
#
# Please do not use docker_layer_caching! It costs too much money to run. Please set to `false`.
#
############

version: 2.1

# References for variables shared across the file
references:
  circleci-docker: &circleci-docker milmove/circleci-docker:milmove-app-ab729849a08a773ea2557b19b67f378551d1ad3d

  # the playwright image to use
  playwright: &playwright cimg/node:18.13.0-browsers

  # the image to use for running load tests
  # see milmove_load_testing for the right config
  load_tester: &load_tester cimg/python:3.11.3

  postgres: &postgres cimg/postgres:12.11

  redis: &redis redis:5.0.6

  # base image that spins up quickly
  cimg_base: &cimg_base cimg/base:2022.12-22.04

  aws-otel-collector: &aws-otel-collector public.ecr.aws/aws-observability/aws-otel-collector:v0.31.0

  # To deploy to loadtest, demo or exp:
  # set dp3-branch to the branch you want to deploy to the env specifed
  # in dp3-env (loadtest, demo, exp), or
  # `placeholder_branch_name` if you don't want to deploy to dp3
  #

  # In addition, it's common practice to disable acceptance tests and
  # ignore tests for dp3 deploys. See the branch settings below.
  dp3-branch: &dp3-branch placeholder_branch_name
  # MUST BE ONE OF: loadtest, demo, exp.
  # These are used to pull in env vars so the spelling matters!
  dp3-env: &dp3-env placeholder_env

  # set integration-ignore-branch to the branch if you want to IGNORE
  # integration tests, or `placeholder_branch_name` if you do want to
  # run them
  integration-ignore-branch: &integration-ignore-branch placeholder_branch_name

  # set integration-mtls-ignore-branch to the branch if you want to
  # IGNORE mtls integration tests, or `placeholder_branch_name` if you
  # do want to run them
  integration-mtls-ignore-branch: &integration-mtls-ignore-branch placeholder_branch_name

  # set client-ignore-branch to the branch if you want to IGNORE
  # client tests, or `placeholder_branch_name` if you do want to run
  # them
  client-ignore-branch: &client-ignore-branch placeholder_branch_name

  # set server-ignore-branch to the branch if you want to IGNORE
  # server tests, or `placeholder_branch_name` if you do want to run
  # them
  server-ignore-branch: &server-ignore-branch placeholder_branch_name

executors:
  base_small:
    resource_class: small
    docker:
      - image: *cimg_base
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  tls_small:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  av_medium:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
      - image: milmove/clamav-ci
        # Authenticate with Docker Hub to avoid rate limit problems beginning on Nov 1st, 2020.
        # See https://www.docker.com/blog/scaling-docker-to-serve-millions-more-developers-network-egress/ for details
        # We'll need this until CircleCI and Docker Hub work out a deal to prevent rate limiting errors from CircleCI
        # IPs.
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  mymove_pusher:
    # needs to be medium+ so it can checkout and restore the workspace
    resource_class: medium+
    working_directory: /mnt/ramdisk
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  mymove_builder:
    resource_class: medium+
    working_directory: /mnt/ramdisk
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  mymove_compiler:
    # large and no ram disk
    resource_class: large
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          GOPATH: /home/circleci/go

  mymove_compiler_xlarge:
    # xlarge and no ram disk
    resource_class: xlarge
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          GOPATH: /home/circleci/go

  mymove_ramdisk_compiler:
    # large with ram disk
    resource_class: large
    working_directory: /mnt/ramdisk
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          GOPATH: /home/circleci/go

  mymove_ramdisk_compiler_xlarge:
    # xlarge with ram disk
    resource_class: xlarge
    working_directory: /mnt/ramdisk
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          GOPATH: /home/circleci/go

  mymove_tester:
    resource_class: xlarge
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          GOPATH: /home/circleci/go
      - image: *postgres
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: test_db
          # use ramdisk for better performance
          # https://circleci.com/docs/databases/#optimizing-postgresql-images
          PGDATA: /dev/shm/pgdata/data
        # override entrypoint/command for ramdisk
        # this has been fixed in versions of postgres newer than 13.9
        # https://github.com/CircleCI-Public/cimg-postgres/commit/3b320e26e4f187d0cd144efea1bc26cf5a2b68b0
        # milmove is still on 12.11
        entrypoint: /bin/bash
        command: -c 'ln -s /dev/shm/pgdata/data /var/lib/postgresql/ && exec /usr/local/bin/docker-entrypoint.sh postgres'

      - image: *redis
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

  mymove_load_tester:
    resource_class: large
    working_directory: ~/project
    docker:
      - image: *load_tester
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          GOPATH: /home/circleci/go
      - image: *postgres
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: test_db
          # use ramdisk for better performance
          # https://circleci.com/docs/databases/#optimizing-postgresql-images
          PGDATA: /dev/shm/pgdata/data
        # override entrypoint/command for ramdisk
        # this has been fixed in versions of postgres newer than 13.9
        # https://github.com/CircleCI-Public/cimg-postgres/commit/3b320e26e4f187d0cd144efea1bc26cf5a2b68b0
        # milmove is still on 12.11
        entrypoint: /bin/bash
        command: -c 'ln -s /dev/shm/pgdata/data /var/lib/postgresql/ && exec /usr/local/bin/docker-entrypoint.sh postgres'

      - image: *redis
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

  milmove_playwright_tester:
    # maybe don't need xlarge, but getting many timeouts with large
    # ahobson - 2023-02-07
    resource_class: xlarge
    # use ~/project as that already exists in cimg/node and is owned
    # by circleci
    working_directory: ~/project
    docker:
      - image: *playwright
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          GOPATH: /home/circleci/go
      - image: *postgres
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: test_db
          # use ramdisk for better performance
          # https://circleci.com/docs/databases/#optimizing-postgresql-images
          PGDATA: /dev/shm/pgdata/data
        # override entrypoint/command for ramdisk
        # this has been fixed in versions of postgres newer than 13.9
        # https://github.com/CircleCI-Public/cimg-postgres/commit/3b320e26e4f187d0cd144efea1bc26cf5a2b68b0
        # milmove is still on 12.11
        entrypoint: /bin/bash
        command: -c 'ln -s /dev/shm/pgdata/data /var/lib/postgresql/ && exec /usr/local/bin/docker-entrypoint.sh postgres'
      - image: *redis
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

commands:
  create_dot_go_version:
    description: 'Creates a .go-version file (if needed) which can be used for cache keys specific to golang'
    steps:
      - run:
          name: Create a .go-version file
          command: |
            if [ -f ".go-version" ]; then
              echo ".go-version already exists, no need to re-create"
            else
              GO_VERSION=$(awk '/golang/ { print $2 }' .tool-versions)
              echo "Creating .go-version using version ${GO_VERSION}"
              echo $GO_VERSION > .go-version
            fi

  restore_cache_for_go:
    steps:
      - create_dot_go_version
      - restore_cache:
          keys:
            - go-mod-sources-v7-{{ checksum "go.sum" }}-{{ checksum ".go-version" }}

  save_cache_for_go:
    steps:
      - create_dot_go_version
      - save_cache:
          key: go-mod-sources-v7-{{ checksum "go.sum" }}-{{ checksum ".go-version" }}
          paths:
            - '~/go'
            - '~/transcom/mymove/bin/swagger'

  aws_vars_stg:
    steps:
      - run:
          name: 'Setting up AWS environment variables for stg env'
          command: |
            echo "export AWS_DEFAULT_REGION=$STG_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$STG_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$STG_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$STG_SECRET_ACCESS_KEY" >> $BASH_ENV
            # override default cpu/memory for staging
            echo "export SERVICE_RESERVATION_CPU=2048" >> $BASH_ENV
            echo "export SERVICE_RESERVATION_MEM=4096" >> $BASH_ENV
            source $BASH_ENV
  tls_vars_stg:
    steps:
      - run:
          name: 'Setting up TLS environment variables for stg env'
          command: |
            echo "export TLS_CERT=$STG_MOVE_MIL_DOD_TLS_CERT" >> $BASH_ENV
            echo "export TLS_KEY=$STG_MOVE_MIL_DOD_TLS_KEY" >> $BASH_ENV
            echo "export TLS_CA=$STG_MOVE_MIL_DOD_TLS_CA" >> $BASH_ENV
            source $BASH_ENV
  aws_vars_prd:
    steps:
      - run:
          name: 'Setting up AWS environment variables for prd env'
          command: |
            echo "export AWS_DEFAULT_REGION=$PRD_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$PRD_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$PRD_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$PRD_SECRET_ACCESS_KEY" >> $BASH_ENV
            # override default cpu/memory for production
            echo "export SERVICE_RESERVATION_CPU=2048" >> $BASH_ENV
            echo "export SERVICE_RESERVATION_MEM=4096" >> $BASH_ENV
            source $BASH_ENV
  tls_vars_prd:
    steps:
      - run:
          name: 'Setting up TLS environment variables for prd env'
          command: |
            echo "export TLS_CERT=$PRD_MOVE_MIL_DOD_TLS_CERT" >> $BASH_ENV
            echo "export TLS_KEY=$PRD_MOVE_MIL_DOD_TLS_KEY" >> $BASH_ENV
            echo "export TLS_CA=$PRD_MOVE_MIL_DOD_TLS_CA" >> $BASH_ENV
            source $BASH_ENV
  aws_vars_transcom_gov_dev:
    parameters:
      when:
        description: when to run
        type: string
        default: on_success
    steps:
      - run:
          name: 'Setting up AWS environment variables for gov-dev env'
          command: |
            echo "export AWS_DEFAULT_REGION=$GOV_DEV_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$GOV_DEV_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$GOV_DEV_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$GOV_DEV_SECRET_KEY" >> $BASH_ENV
            source $BASH_ENV
          when: << parameters.when >>
  tls_vars_gov_dev:
    steps:
      - run:
          name: 'Setting up TLS environment variables for gov-dev env'
          command: |
            echo "export TLS_CERT=$EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT" >> $BASH_ENV
            echo "export TLS_KEY=$EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY" >> $BASH_ENV
            echo "export TLS_CA=$EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA" >> $BASH_ENV
            source $BASH_ENV
  aws_vars_transcom_com_dev:
    steps:
      - run:
          name: 'Setting up AWS environment variables for com-dev env'
          command: |
            echo "export AWS_DEFAULT_REGION=$COM_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$DEV_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$DEV_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$DEV_SECRET_KEY" >> $BASH_ENV
            source $BASH_ENV
  aws_vars_dp3:
    parameters:
      dp3-env:
        description: dp3 env to deploy to (exp, loadtest, demo)
        type: string
        default: *dp3-env
    steps:
      - run:
          name: 'Setting up AWS environment variables for dp3 env defined in &dp3-env'
          command: |
            echo "export AWS_DEFAULT_REGION=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_SECRET_ACCESS_KEY" >> $BASH_ENV
      - when:
          condition:
            equal: [loadtest, << parameters.dp3-env >>]
          steps:
            - run:
                name: 'Increase cpu/memory reservation for loadtest'
                command: |
                  # override default cpu/memory
                  echo "export SERVICE_RESERVATION_CPU=2048" >> $BASH_ENV
                  echo "export SERVICE_RESERVATION_MEM=4096" >> $BASH_ENV
                  source $BASH_ENV
  tls_vars_dp3:
    parameters:
      dp3-env:
        description: dp3 env to deploy to (exp, loadtest, demo)
        type: string
        default: *dp3-env
    steps:
      - run:
          name: 'Setting up TLS environment variables for dp3 env defined in &dp3-env'
          command: |
            echo "export TLS_CERT=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_DP3_CERT" >> $BASH_ENV
            echo "export TLS_KEY=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_DP3_KEY" >> $BASH_ENV
            echo "export TLS_CA=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_DP3_CA" >> $BASH_ENV
            source $BASH_ENV

  announce_failure:
    # parameters:
    steps:
      - run:
          name: Announce failure
          command: |
            [[ $CIRCLE_BRANCH = main ]] || exit 0
            scripts/circleci-announce-broken-branch
          when: on_fail

  deploy_migrations_steps:
    parameters:
      ecr_env:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat images/sha/ECR_DIGEST_app-migrations_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - run:
          name: Snapshot database
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/rds-snapshot-app-db $APP_ENVIRONMENT
      - run:
          name: Run migrations
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-run-app-migrations-container ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations@${ECR_DIGEST} $APP_ENVIRONMENT
          no_output_timeout: 60m
          environment:
            CHAMBER_RETRIES: 20
      - announce_failure
  deploy_tasks_steps:
    parameters:
      ecr_env:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat images/sha/ECR_DIGEST_app-tasks_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - run:
          name: Deploy connect to GEX via SFTP service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container connect-to-gex-via-sftp "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - run:
          name: Deploy GHC fuel price data task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container save-ghc-fuel-price-data "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - run:
          name: Deploy payment reminder email task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container send-payment-reminder "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - run:
          name: Deploy post to GEX service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container post-file-to-gex "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - run:
          name: Deploy process EDIs service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container process-edis "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
  # Used for dp3 sites, which do not include gex/orders
  deploy_dp3_tasks_steps:
    parameters:
      ecr_env:
        type: string
        default: *dp3-env
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat images/sha/ECR_DIGEST_app-tasks_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - run:
          name: Deploy GHC fuel price data task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container save-ghc-fuel-price-data "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - run:
          name: Deploy payment reminder email task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container send-payment-reminder "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
  deploy_app_steps:
    parameters:
      compare_host:
        type: string
      health_check_hosts:
        type: string
      ecr_env:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Compare against deployed commit
          command: |
            [[ -z "<< parameters.compare_host >>" ]] || scripts/compare-deployed-commit "<< parameters.compare_host >>" $CIRCLE_SHA1
      - restore_cache_for_go
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat images/sha/ECR_DIGEST_app_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - run:
          name: Get otel collector digest from filesystem
          command: |
            OTEL_ECR_DIGEST=$(cat images/sha/ECR_DIGEST_otel-collector_<< parameters.ecr_env >>)
            echo "export OTEL_ECR_DIGEST=${OTEL_ECR_DIGEST}" | tee -a "${BASH_ENV}"

            echo "export OTEL_COLLECTOR_IMAGE=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/otel-collector@${OTEL_ECR_DIGEST}" | tee -a "${BASH_ENV}"
      - run:
          name: Deploy app service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container app "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app@${ECR_DIGEST}" "${APP_ENVIRONMENT}" "/bin/milmove serve"
          no_output_timeout: 20m
      - run:
          name: Health Check
          command: bin/health-checker --schemes https --hosts << parameters.health_check_hosts >> --tries 10 --backoff 3 --log-level info --timeout 5m
      - run:
          name: TLS Check
          command: bin/tls-checker --schemes https --hosts << parameters.health_check_hosts >> --log-level info --timeout 15m
      - run:
          name: Check deployed commits
          command: scripts/check-deployed-commit "<< parameters.health_check_hosts >>" "$CIRCLE_SHA1"
      - announce_failure
  deploy_app_client_tls_steps:
    parameters:
      compare_host:
        type: string
      health_check_hosts:
        type: string
      ecr_env:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Compare against deployed commit
          command: |
            [[ -z "<< parameters.compare_host >>" ]] || scripts/compare-deployed-commit "<< parameters.compare_host >>" $CIRCLE_SHA1 ${TLS_KEY} ${TLS_CERT} ${TLS_CA}
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat images/sha/ECR_DIGEST_app_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - run:
          name: Get otel collector digest from filesystem
          command: |
            OTEL_ECR_DIGEST=$(cat images/sha/ECR_DIGEST_otel-collector_<< parameters.ecr_env >>)
            echo "export OTEL_ECR_DIGEST=${OTEL_ECR_DIGEST}" | tee -a "${BASH_ENV}"

            echo "export OTEL_COLLECTOR_IMAGE=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/otel-collector@${OTEL_ECR_DIGEST}" | tee -a "${BASH_ENV}"
      - run:
          name: Deploy app-client-tls service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container app-client-tls "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app@${ECR_DIGEST}" "${APP_ENVIRONMENT}" "/bin/milmove serve"
          no_output_timeout: 20m
      - run:
          name: Health Check
          command: |
            bin/health-checker --schemes https --hosts << parameters.health_check_hosts >> --key ${TLS_KEY} --cert ${TLS_CERT} --ca ${TLS_CA} --tries 10 --backoff 3 --log-level info --timeout 5m
      - run:
          name: TLS Check
          command: |
            bin/tls-checker --schemes https --hosts << parameters.health_check_hosts >> --key ${TLS_KEY} --cert ${TLS_CERT} --ca ${TLS_CA} --log-level info --timeout 15m
      - run:
          name: Check deployed commits
          command: scripts/check-deployed-commit "<< parameters.health_check_hosts >>" "$CIRCLE_SHA1" ${TLS_KEY} ${TLS_CERT} ${TLS_CA}
      - announce_failure

  deploy_app_storybook:
    parameters:
      s3_bucket:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/storybook
      - checkout
      - run:
          name: Push Storybook build to S3
          command: scripts/push-storybook-assets "<< parameters.s3_bucket>>"

  build_image:
    parameters:
      dockerfile:
        type: string
      image_name:
        type: string
      tag:
        type: string
      working_dir:
        type: string
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: 'Build docker image'
          working_directory: << parameters.working_dir >>
          command: |
            docker build -f << parameters.dockerfile>> -t << parameters.image_name >>:<< parameters.tag >> .
            mkdir -p images
            docker save -o images/<< parameters.image_name >> << parameters.image_name >>:<< parameters.tag >>
      - persist_to_workspace:
          root: .
          paths:
            - images/<< parameters.image_name >>

  push_image:
    parameters:
      ecr_env:
        type: string
      image_name:
        type: string
      tag:
        type: string
      repo:
        type: string
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: 'Retrieve docker image from workspace'
          command: |
            docker load -i images/<< parameters.image_name >>
      - run:
          name: 'Tag and push docker image'

          command: |
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker tag << parameters.image_name >>:<< parameters.tag >> ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-${CIRCLE_SHA1}
            shopt -s extglob

            # README: We are going to replace any unwanted characters with dashes then truncate
            #         the tag name to 100 characters. Docker tags can be a maximum of 128 characters
            #         and this leaves some room for a prefix.
            docker_tag_from_branch_name=${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}
            docker_tag_shortened_name=${docker_tag_from_branch_name:0:100}

            docker tag << parameters.image_name >>:<< parameters.tag >> ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-branch-${docker_tag_shortened_name}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-branch-${docker_tag_shortened_name}
      - run:
          name: 'Record ECR Image Digest'
          command: |
            mkdir -p images/sha
            echo $(aws ecr describe-images --repository-name << parameters.repo >> --image-ids imageTag=git-${CIRCLE_SHA1} | jq ".imageDetails[0] .imageDigest" -r) > images/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>
            cat images/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>
            sleep 60
      - run:
          name: 'Describe image scan findings'
          command: scripts/ecr-describe-image-scan-findings << parameters.repo >> $(cat images/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>)
      - persist_to_workspace:
          root: .
          paths:
            - images/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>

  # The ATO environments cannot pull from outside repositories
  # the error is: x509: certificate signed by unknown authority
  #
  # So pull the image and then push to our own ECR repo. For docker
  # STIG reasons, we need to do an image scan AND we need to expire
  # old images, so always create a new tag on each deployment
  push_otel_collector_image:
    parameters:
      ecr_env:
        type: string
      aws_otel_collector_image:
        type: string
      repo:
        type: string
        default: otel-collector
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - attach_workspace:
          at: .
      - run:
          name: 'Tag and push docker image'
          command: |
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            otel_image=$(echo << parameters.aws_otel_collector_image >>)
            docker pull "${otel_image}"
            shopt -s extglob
            # this removes everything before the colon, which separates the
            # image name from the image tag
            otel_image_tag=${otel_image#*:}
            repo_name=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>
            image_name="${repo_name}:${otel_image_tag}"
            docker pull "${otel_image}"
            # use git prefix for ECR expiration policy
            docker tag "${otel_image}" "${repo_name}:git-${otel_image_tag}-${CIRCLE_SHA1}"
            docker push "${repo_name}:git-${otel_image_tag}-${CIRCLE_SHA1}"

      - run:
          name: 'Record ECR Image Digest'
          command: |
            otel_image=$(echo << parameters.aws_otel_collector_image >>)
            shopt -s extglob
            # this removes everything before the colon, which separates the
            # image name from the image tag
            otel_image_tag=${otel_image#*:}
            mkdir -p images/sha
            echo $(aws ecr describe-images --repository-name << parameters.repo >> --image-ids imageTag=git-${otel_image_tag}-${CIRCLE_SHA1} | jq ".imageDetails[0] .imageDigest" -r) > images/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>
            cat images/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>
      # The scans of the upstream otel collector image result in
      #
      #   UnsupportedImageError: The operating system and/or package manager are not supported
      # The irony of the AWS open telemetry collector being built in a
      # way that is not compatible with AWS image scanning is not lost
      # on me
      # - run:
      #     name: 'Describe image scan findings'
      #     command: scripts/ecr-describe-image-scan-findings << parameters.repo >> $(cat images/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>) || true
      - persist_to_workspace:
          root: .
          paths:
            - images/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>

  server_tests_step:
    parameters:
      application:
        type: string
    steps:
      - run:
          name: make server_test_build for <<parameters.application>>
          command: |
            export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)
            export OKTA_CUST_CLIENT_ID=notrealkey
            export OKTA_OFFICE_CLIENT_ID=notrealkey1
            export OKTA_ADMIN_CLIENT_ID=notrealkey2
            export OKTA_CUSTOMER_SECRET_KEY=notrealkey
            export OKTA_OFFICE_SECRET_KEY=notrealkey1
            export OKTA_ADMIN_SECRET_KEY=notrealkey2
            export OKTA_TENANT_ORG_URL=test-milmove.okta.mil
            export OKTA_API_KEY=notrealapikey
            export OKTA_OFFICE_GROUP_ID=notrealgroupId
            export OKTA_CUSTOMER_GROUP_ID=notrealcustomergroupId


            make server_test
          no_output_timeout: 20m
          environment:
            APPLICATION: '<< parameters.application >>'
            # 8 since this runs on xlarge with 8 CPUs
            GOTEST_PARALLEL: 8
            DB_PASSWORD: mysecretpassword
            DB_USER_LOW_PRIV: crud
            DB_PASSWORD_LOW_PRIV: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT_TEST: 5433
            DB_PORT: 5432
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            DTOD_USE_MOCK: 'true'
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/<< parameters.application >>/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/<< parameters.application >>/schema;file:///home/circleci/transcom/mymove/migrations/<< parameters.application >>/secure'
            EIA_KEY: db2522a43820268a41a802a16ae9fd26 # dummy key generated with openssl rand -hex 16
            ENV: test
            ENVIRONMENT: test
            SERVER_REPORT: 1
            COVERAGE: 1
            SERVE_API_INTERNAL: 'true'
            OKTA_CUSTOMER_CLIENT_ID: 1q2w3e4r5t6y7u8i9o
            OKTA_ADMIN_CLIENT_ID: AQ1SW2DE3FR4G5
            OKTA_OFFICE_CLIENT_ID: 9f9f9s8s90gig9
            OKTA_API_KEY: notrealapikey8675309
            OKTA_OFFICE_GROUP_ID: notrealgroupId
            OKTA_CUSTOMER_GROUP_ID: notrealcustomergroupId

  # run playwright tests without using setup_remote_docker
  # the remote docker resources are not configurable and thus are
  # SLOOOOOOW
  #
  # https://circleci.com/docs/building-docker-images/#specifications
  #
  # Run postgresql + redis in docker, but run the tests locally
  #
  e2e_tests_playwright:
    parameters:
      workers:
        type: integer
        # We tried this in an xlarge resource with 5 workers and still
        # had flaky tests because of pages being slow to load
        # Instead, we run in a large instance with 1 worker and
        # increased parallelism as needed
        default: 1
      path:
        type: string
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - v4-cache-yarn-v4-{{ checksum "yarn.lock" }}
      - run:
          name: setup hosts
          command: |
            # futz with /etc/hosts for running in circleci
            echo "127.0.0.1 milmovelocal" | sudo tee -a /etc/hosts
            echo "127.0.0.1 officelocal" | sudo tee -a /etc/hosts
            echo "127.0.0.1 adminlocal" | sudo tee -a /etc/hosts
            echo "127.0.0.1 primelocal" | sudo tee -a /etc/hosts
      - run:
          background: true
          name: run server
          environment:
            MIGRATION_MANIFEST: '/home/circleci/project/migrations/app/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/project/migrations/app/schema;file:///home/circleci/project/migrations/app/secure'
          command: |
            export MOVE_MIL_DOD_CA_CERT=$(cat config/tls/devlocal-ca.pem)
            export MOVE_MIL_DOD_TLS_CERT=$(cat config/tls/devlocal-https.pem)
            export MOVE_MIL_DOD_TLS_KEY=$(cat config/tls/devlocal-https.key)
            export CLIENT_AUTH_SECRET_KEY=$(cat config/tls/devlocal-client_auth_secret.key)
            export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)
            export HERE_MAPS_APP_ID=$E2E_HERE_MAPS_APP_ID
            export HERE_MAPS_APP_CODE=$E2E_HERE_MAPS_APP_CODE
            # pull in review app settings here so we don't have to
            # reproduce them
            sed 's,^,export ,' config/env/review.app.env > server_env
            source server_env

            # now do a few overrides
            export HERE_MAPS_GEOCODE_ENDPOINT=https://geocoder.api.here.com/6.2/geocode.json
            export HERE_MAPS_ROUTING_ENDPOINT=https://route.api.here.com/routing/7.2/calculateroute.json
            export LOGIN_GOV_CALLBACK_PORT=4000
            export LOGIN_GOV_CALLBACK_PROTOCOL=http
            export OKTA_CUSTOMER_CLIENT_ID=1q2w3e4r5t6y7u8i9o
            export OKTA_ADMIN_CLIENT_ID=AQ1SW2DE3FR4G5
            export OKTA_OFFICE_CLIENT_ID=9f9f9s8s90gig9
            export OKTA_CUSTOMER_SECRET_KEY=notrealkey
            export OKTA_OFFICE_SECRET_KEY=notrealkey1
            export OKTA_ADMIN_SECRET_KEY=notrealkey2
            export OKTA_TENANT_CALLBACK_PORT=4000
            export OKTA_TENANT_CALLBACK_PROTOCOL=http
            export OKTA_TENANT_ORG_URL=test-milmove.okta.mil
            export OKTA_API_KEY=notrealapikey
            export OKTA_OFFICE_GROUP_ID=notrealgroupId
            export OKTA_CUSTOMER_GROUP_ID=notrealcustomergroupId

            export SERVE_API_PRIME=false
            export SERVE_API_SUPPORT=true
            export SERVE_PRIME_SIMULATOR=true
            export DEVLOCAL_CA=$PWD/config/tls/devlocal-ca.pem
            export DOD_CA_PACKAGE=$PWD/config/tls/milmove-cert-bundle.p7b
            export HTTP_ADMIN_SERVER_NAME=adminlocal
            export HTTP_MY_SERVER_NAME=milmovelocal
            export HTTP_OFFICE_SERVER_NAME=officelocal
            export HTTP_ORDERS_SERVER_NAME=orderslocal
            export HTTP_PRIME_SERVER_NAME=primelocal
            export ENVIRONMENT=test
            export FEATURE_FLAG_MULTI_MOVE=true
            export FEATURE_FLAG_PPM=true
            export FEATURE_FLAG_NTS=true
            export FEATURE_FLAG_NTSR=true
            export FEATURE_FLAG_BOAT=true
            export FEATURE_FLAG_MOBILE_HOME=true
            export FEATURE_FLAG_CAC_VALIDATED_LOGIN=false
            export FEATURE_FLAG_VALIDATION_CODE_REQUIRED=false
            export FEATURE_FLAG_MOVE_LOCK=false
            export FEATURE_FLAG_OKTA_DODID_INPUT=false
            export FEATURE_FLAG_HEADQUARTERS_ROLE=false
            export FEATURE_FLAG_SAFETY_MOVE=false
            export FEATURE_FLAG_MANAGE_SUPPORTING_DOCS=false
            export FEATURE_FLAG_THIRD_ADDRESS_AVAILABLE=false
            export FEATURE_FLAG_QUEUE_MANAGEMENT=false

            # disable for speed, playwright tests can fail otherwise
            export DB_DEBUG=false

            make db_dev_create
            bin/milmove migrate
            # playwright tests DO NOT NEED SEED DATA
            bin/milmove serve 2>&1 | fmt
      - run:
          name: wait for server
          command: |
            # install yarn dependencies while waiting for the server
            # to start. This installs our pinned version of playwright
            yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
            # install playwright browsers while waiting for the server to start
            ./node_modules/.bin/playwright install
            dockerize -wait http://milmovelocal:4000 -timeout 5m
      - run:
          name: run e2e_test playwright
          environment:
            PLAYWRIGHT_MY_URL: http://milmovelocal:4000
            PLAYWRIGHT_ADMIN_URL: http://adminlocal:4000
            PLAYWRIGHT_OFFICE_URL: http://officelocal:4000
            # partially taken from https://playwright.dev/docs/ci#sharding-in-circleci
            FEATURE_FLAG_MULTI_MOVE: 'true'
            FEATURE_FLAG_PPM: 'true'
            FEATURE_FLAG_NTS: 'true'
            FEATURE_FLAG_NTSR: 'true'
            FEATURE_FLAG_BOAT: 'true'
            FEATURE_FLAG_MOBILE_HOME: 'true'
            FEATURE_FLAG_CAC_VALIDATED_LOGIN: 'false'
            FEATURE_FLAG_VALIDATION_CODE_REQUIRED: 'false'
            FEATURE_FLAG_MOVE_LOCK: 'false'
            FEATURE_FLAG_OKTA_DODID_INPUT: 'false'
            FEATURE_FLAG_HEADQUARTERS_ROLE: 'false'
            FEATURE_FLAG_SAFETY_MOVE: 'false'
            FEATURE_FLAG_MANAGE_SUPPORTING_DOCS: 'false'
            FEATURE_FLAG_THIRD_ADDRESS_AVAILABLE: 'false'
            FEATURE_FLAG_QUEUE_MANAGEMENT: 'false'
          command: |
            SHARD=$((${CIRCLE_NODE_INDEX}+1))
            PLAYWRIGHT_JUNIT_OUTPUT_NAME=playwright-results.xml \
            ./node_modules/.bin/playwright test \
            --reporter=html,junit \
            --trace=on \
            --workers << parameters.workers >> \
            --shard="${SHARD}/${CIRCLE_NODE_TOTAL}" \
            << parameters.path >>
          no_output_timeout: 60m
      - store_artifacts:
          path: playwright-report
      - run:
          name: create playwright report archive for download
          when: always
          command: |
            zip -r complete-playwright-report.zip playwright-report
      - store_artifacts:
          path: complete-playwright-report.zip
      - store_test_results:
          path: playwright-results.xml

  # this custom step has some duplication with
  # scripts/run-e2e-mtls-test-docker because we want to run some of the
  # steps below in parallel
  e2e_tests_mtls:
    steps:
      - attach_workspace:
          at: .
      - run:
          name: setup hosts
          command: |
            # futz with /etc/hosts for running in circleci
            echo "127.0.0.1 milmovelocal" | sudo tee -a /etc/hosts
            echo "127.0.0.1 officelocal" | sudo tee -a /etc/hosts
            echo "127.0.0.1 adminlocal" | sudo tee -a /etc/hosts
            echo "127.0.0.1 primelocal" | sudo tee -a /etc/hosts
      - run:
          background: true
          name: run server
          environment:
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/app/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/app/schema;file:///home/circleci/transcom/mymove/migrations/app/secure'
          command: |
            export MOVE_MIL_DOD_CA_CERT=$(cat config/tls/devlocal-ca.pem)
            export MOVE_MIL_DOD_TLS_CERT=$(cat config/tls/devlocal-https.pem)
            export MOVE_MIL_DOD_TLS_KEY=$(cat config/tls/devlocal-https.key)
            export CLIENT_AUTH_SECRET_KEY=$(cat config/tls/devlocal-client_auth_secret.key)
            export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)
            export HERE_MAPS_APP_ID=$E2E_HERE_MAPS_APP_ID
            export HERE_MAPS_APP_CODE=$E2E_HERE_MAPS_APP_CODE
            # pull in review app settings here so we don't have to
            # reproduce them
            sed 's,^,export ,' config/env/review.app.env > server_env
            source server_env

            # now do a few overrides
            export HERE_MAPS_GEOCODE_ENDPOINT=https://geocoder.api.here.com/6.2/geocode.json
            export HERE_MAPS_ROUTING_ENDPOINT=https://route.api.here.com/routing/7.2/calculateroute.json
            export LOGIN_GOV_CALLBACK_PORT=4000
            export LOGIN_GOV_CALLBACK_PROTOCOL=http
            export OKTA_CUSTOMER_CLIENT_ID=1q2w3e4r5t6y7u8i9o
            export OKTA_ADMIN_CLIENT_ID=AQ1SW2DE3FR4G5
            export OKTA_OFFICE_CLIENT_ID=9f9f9s8s90gig9
            export OKTA_CUSTOMER_SECRET_KEY=notrealkey
            export OKTA_OFFICE_SECRET_KEY=notrealkey1
            export OKTA_ADMIN_SECRET_KEY=notrealkey2
            export OKTA_TENANT_CALLBACK_PORT=4000
            export OKTA_TENANT_CALLBACK_PROTOCOL=http
            export OKTA_TENANT_ORG_URL=test-milmove.okta.mil
            export OKTA_API_KEY=notrealapikey
            export OKTA_OFFICE_GROUP_ID=notrealgroupId
            export OKTA_CUSTOMER_GROUP_ID=notrealcustomergroupId

            export SERVE_API_SUPPORT=true
            export SERVE_PRIME_SIMULATOR=true
            export DEVLOCAL_CA=$PWD/config/tls/devlocal-ca.pem
            export DOD_CA_PACKAGE=$PWD/config/tls/milmove-cert-bundle.p7b
            export HTTP_ADMIN_SERVER_NAME=adminlocal
            export HTTP_MY_SERVER_NAME=milmovelocal
            export HTTP_OFFICE_SERVER_NAME=officelocal
            export HTTP_ORDERS_SERVER_NAME=orderslocal
            export HTTP_PRIME_SERVER_NAME=primelocal
            export ENVIRONMENT=test
            export MUTUAL_TLS_ENABLED=true
            export MUTUAL_TLS_PORT=9443
            export SERVE_API_PRIME=true
            # disable for speed, tests can fail otherwise
            export DB_DEBUG=false

            make db_dev_create
            bin/milmove migrate
            # mtls tests do not need client
            mkdir -p build
            touch build/index.html
            # mtls tests DO NOT NEED SEED DATA
            bin/milmove serve 2>&1 | fmt
      - run:
          name: wait for server
          command: |
            dockerize -wait http://milmovelocal:4000 -timeout 5m
      - run:
          name: run e2e mtls tests
          command: |
            ./scripts/run-e2e-mtls-test

  e2e_tests_load:
    parameters:
      workers:
        type: integer
        # We tried this in an xlarge resource with 5 workers and still
        # had flaky tests because of pages being slow to load
        # Instead, we run in a large instance with 1 worker and
        # increased parallelism as needed
        default: 1
    steps:
      - attach_workspace:
          at: .
      - run:
          name: setup hosts
          command: |
            # futz with /etc/hosts for running in circleci
            echo "127.0.0.1 milmovelocal" | sudo tee -a /etc/hosts
            echo "127.0.0.1 officelocal" | sudo tee -a /etc/hosts
            echo "127.0.0.1 adminlocal" | sudo tee -a /etc/hosts
            echo "127.0.0.1 primelocal" | sudo tee -a /etc/hosts
      - run:
          background: true
          name: run server
          environment:
            MIGRATION_MANIFEST: '/home/circleci/project/migrations/app/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/project/migrations/app/schema;file:///home/circleci/project/migrations/app/secure'
          command: |
            export MOVE_MIL_DOD_CA_CERT=$(cat config/tls/devlocal-ca.pem)
            export MOVE_MIL_DOD_TLS_CERT=$(cat config/tls/devlocal-https.pem)
            export MOVE_MIL_DOD_TLS_KEY=$(cat config/tls/devlocal-https.key)
            export CLIENT_AUTH_SECRET_KEY=$(cat config/tls/devlocal-client_auth_secret.key)
            export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)
            export HERE_MAPS_APP_ID=$E2E_HERE_MAPS_APP_ID
            export HERE_MAPS_APP_CODE=$E2E_HERE_MAPS_APP_CODE
            # pull in review app settings here so we don't have to
            # reproduce them
            sed 's,^,export ,' config/env/review.app.env > server_env
            source server_env

            # now do a few overrides
            export HERE_MAPS_GEOCODE_ENDPOINT=https://geocoder.api.here.com/6.2/geocode.json
            export HERE_MAPS_ROUTING_ENDPOINT=https://route.api.here.com/routing/7.2/calculateroute.json
            export LOGIN_GOV_CALLBACK_PORT=4000
            export LOGIN_GOV_CALLBACK_PROTOCOL=http
            export OKTA_CUSTOMER_CLIENT_ID=1q2w3e4r5t6y7u8i9o
            export OKTA_ADMIN_CLIENT_ID=AQ1SW2DE3FR4G5
            export OKTA_OFFICE_CLIENT_ID=9f9f9s8s90gig9
            export OKTA_CUSTOMER_SECRET_KEY=notrealkey
            export OKTA_OFFICE_SECRET_KEY=notrealkey1
            export OKTA_ADMIN_SECRET_KEY=notrealkey2
            export OKTA_TENANT_CALLBACK_PORT=4000
            export OKTA_TENANT_CALLBACK_PROTOCOL=http
            export OKTA_TENANT_ORG_URL=test-milmove.okta.mil
            export OKTA_API_KEY=notrealapikey
            export OKTA_OFFICE_GROUP_ID=notrealgroupId
            export OKTA_CUSTOMER_GROUP_ID=notrealcustomergroupId

            export SERVE_API_SUPPORT=true
            export MUTUAL_TLS_ENABLED=true
            export SERVE_PRIME_SIMULATOR=true
            export DEVLOCAL_CA=$PWD/config/tls/devlocal-ca.pem
            export DOD_CA_PACKAGE=$PWD/config/tls/milmove-cert-bundle.p7b
            export HTTP_ADMIN_SERVER_NAME=adminlocal
            export HTTP_MY_SERVER_NAME=milmovelocal
            export HTTP_OFFICE_SERVER_NAME=officelocal
            export HTTP_ORDERS_SERVER_NAME=orderslocal
            export HTTP_PRIME_SERVER_NAME=primelocal
            export ENVIRONMENT=test
            # disable for speed, tests can fail otherwise
            export DB_DEBUG=false
            export MUTUAL_TLS_ENABLED=true
            export MUTUAL_TLS_PORT=9443
            export SERVE_API_PRIME=true
            export SERVE_API_PPTAS=true
            make db_dev_create
            bin/milmove migrate
            # load tests do not need client files
            mkdir -p build
            touch build/index.html
            bin/milmove serve 2>&1 | fmt
      - run:
          name: checkout load testing repo
          command: |
            mkdir -p tmp && cd tmp
            git clone https://github.com/transcom/milmove_load_testing.git
            # print out last git commit sha
            (cd milmove_load_testing && git rev-list -1 HEAD)
      - restore_cache:
          keys:
            # need milmove_load_testing repo checked out before cache check
            - v2-pipenv-{{ checksum "tmp/milmove_load_testing/Pipfile.lock" }}-{{ .Environment.PYTHON_VERSION }}
      - run:
          name: wait for server
          command: |
            # install python dependencies while waiting for the server
            # to start.
            cd tmp/milmove_load_testing
            pipenv sync -d
            dockerize -wait http://milmovelocal:4000 -timeout 5m
      - run:
          name: run load testing
          environment:
            LOCAL_PORT: 4000
          # If there's a breaking change in milmove or the load
          # testing app, we could check out a particular branch or sha
          # here as a workaround until the HEAD of both repos work
          # together again
          command: |
            cd tmp/milmove_load_testing
            pipenv run locust -f locustfiles/queue.py \
            --host local \
            -u 10 \
            --csv local_load_tests \
            --html local_load_tests.html \
            -t 60s \
            --headless
      - save_cache:
          key: v2-pipenv-{{ checksum "Pipfile.lock" }}-{{ .Environment.PYTHON_VERSION }}
          paths:
            - '~/transcom/mymove/tmp/milmove_load_testing/.venv'
      - run:
          name: extract results
          # always try to extract the artifacts so it can help us
          # figure out why a test is failing
          when: always
          command: |
            mkdir reports
            mv tmp/milmove_load_testing/local_load_tests* reports

jobs:
  base_noop:
    executor: base_small
    steps:
      - run: echo "noop"

  # `pre_deps_golang` is used for caching Go module sources
  pre_deps_golang:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache_for_go
      - run: echo 'export PATH=${PATH}:${GOPATH}/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - run:
          name: Install dependencies
          command: for i in $(seq 1 5); do go mod download && break || s=$? && sleep 5; done; (exit $s)
      - run: scripts/check-generated-code go.sum
      - run:
          name: Install go-swagger
          command: make bin/swagger
      - save_cache_for_go
      - announce_failure

  # `pre_deps_yarn` is used to cache yarn sources
  pre_deps_yarn:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-cache-yarn-v4-{{ checksum "yarn.lock" }}
      - run:
          name: Install Frozen YARN dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - run: scripts/check-generated-code yarn.lock
      # `v4-cache-yarn-v4-{{ checksum "yarn.lock" }}` is used to cache yarn sources
      - save_cache:
          key: v4-cache-yarn-v4-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - announce_failure

  # `check_generated_code` is used to ensure generated code doesn't change
  check_generated_code:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache_for_go
      - run: echo 'export PATH=${PATH}:${GOPATH}/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - run: make server_generate mocks_generate
      - run: scripts/check-generated-code pkg/gen/ $(find . -type d -name "*mocks" -exec echo -n '{} ' \;)
      - announce_failure

  # `check_tls_certificate_env` is used to confirm that the certificate-key pair match
  check_tls_certificate_prd:
    executor: tls_small
    steps:
      - tls_vars_prd
      - run: /usr/local/bin/check-tls-pair ${TLS_KEY} ${TLS_CERT}
      - announce_failure

  check_tls_certificate_stg:
    executor: tls_small
    steps:
      - tls_vars_stg
      - run: /usr/local/bin/check-tls-pair ${TLS_KEY} ${TLS_CERT}
      - announce_failure

  check_tls_certificate_dp3:
    executor: tls_small
    parameters:
      dp3-env:
        type: string
        default: *dp3-env
    steps:
      - run:
          name: Check if we are using a dp3 environment at all
          command: |
            if [[ << parameters.dp3-env >> != "demo" && << parameters.dp3-env >> != "exp" && << parameters.dp3-env >> != "loadtest" ]]; then
              circleci-agent step halt
            fi
      - tls_vars_dp3
      - run: /usr/local/bin/check-tls-pair ${TLS_KEY} ${TLS_CERT}
      - announce_failure

  # `anti_virus` uses virus detection software to scan the source code
  anti_virus:
    executor: av_medium
    steps:
      - checkout
      - run: clamscan --version
      - run: cp -v ~/transcom/mymove/anti-virus/whitelist-*.{fp,ign2} /var/lib/clamav/
      - run: >
          clamscan \
            --recursive \
            --infected \
            --detect-pua=yes \
            --exclude-pua=NetTool \
            --exclude-pua=PWTool \
            --max-scansize=300M \
            --max-filesize=100M \
            --max-recursion=30 \
            --max-files=50000 \
            --tempdir=/tmp \
            ~/transcom/mymove
      - announce_failure

  # `pre_test` runs pre-commit against all files.
  pre_test:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache_for_go
      - restore_cache:
          keys:
            - v4-cache-yarn-v4-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v1-pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - restore_cache:
          keys:
            #
            # https://circleci.com/docs/caching/#restoring-cache
            #
            # restore the latest version of the listing results in the
            # cache
            #
            # To manually reset counts increment the version number of
            # the cache e.g. go from v1-spectrial-lint- to
            # v2-spectral-lint-
            #
            # Make sure you also update the key in the save_cache below
            #
            # The trailing hyphen in restore_cache seems important
            # according to the page linked above
            - v20-spectral-lint-
      - run:
          name: Save Baseline Spectral Lint
          command: |
            [ -d ~/transcom/mymove/spectral ] && cp -r ~/transcom/mymove/spectral /tmp/spectral_baseline || echo "Skipping saving baseline"
            rm -rf ~/transcom/mymove/spectral
      - run: echo 'export PATH=${PATH}:${GOPATH}/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - run:
          name: Install Frozen YARN dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      # this is so we can avoid go mod downloading and resulting in an error on a false positive
      - run: scripts/pre-commit-go-mod || exit 0
      - run:
          name: Run pre-commit tests without golangci-lint, eslint, or prettier
          command: SKIP=golangci-lint,eslint,prettier pre-commit run --all-files
      # The output of golangci-lint is an artifact towards STIG compliance
      - run:
          name: Run pre-commit tests with golangci-lint only
          # CONCURRENCY=4 as this runs on a large instance with 4 CPUs
          command: |
            echo 'export GOLANGCI_LINT_CONCURRENCY=4' >> $BASH_ENV
            echo 'export GOLANGCI_LINT_VERBOSE=-v' >> $BASH_ENV
            source $BASH_ENV
            mkdir -p tmp/test-results/pretest
            pre-commit run -v --all-files golangci-lint | tee tmp/test-results/pretest/golangci-lint.out
      - run:
          name: Run prettier checks
          command: yarn prettier-ci
      - run:
          name: Run eslint checks
          command: yarn lint
      # Add DangerJS checks here since they are similar to our pre-commit hooks. This requires that
      # the DANGER_GITHUB_API_TOKEN environment variable is set in the project settings for
      # CircleCI. To generate a new token, log into the robot-mymove account and regenerate the
      # personal access token named "MyMove Report Danger bot".
      - run:
          name: Run DangerJS checks
          command: yarn danger ci --failOnErrors
      # `v1-pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}` is used to cache pre-commit plugins.
      - run:
          name: Run spectral linter on all files
          command: |
            ./scripts/ensure-spectral-lint /tmp/spectral_baseline spectral
      - save_cache:
          key: v1-pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit
      # only save the cache on default branch builds because we only want to
      # change the baseline of test results on main builds
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            # Make sure this key prefix matches the one above in
            # restore_cache
            #
            # Use the BuildNum to update the cache key so that the
            # coverage cache is always updated
            - save_cache:
                key: v20-spectral-lint-{{ .BuildNum }}
                paths:
                  - ~/transcom/mymove/spectral
      - store_artifacts:
          path: ~/transcom/mymove/spectral
      - announce_failure

  # separate the integration tests by site so that if there is a flaky
  # test, we only have to re-run part of the integration tests
  integration_tests_admin:
    executor: milmove_playwright_tester
    parallelism: 6
    steps:
      - e2e_tests_playwright:
          path: playwright/tests/admin
      - announce_failure

  integration_tests_office:
    executor: milmove_playwright_tester
    parallelism: 10
    steps:
      - e2e_tests_playwright:
          path: playwright/tests/office
      - announce_failure

  # reads integration tests in mymove dir, should eventually be removed when tests are in milmove dir
  integration_tests_my:
    executor: milmove_playwright_tester
    parallelism: 10
    steps:
      - e2e_tests_playwright:
          path: playwright/tests/my
      - announce_failure

  # `integration_tests_devseed` runs the devseed data generation
  integration_tests_devseed:
    executor: mymove_tester
    steps:
      - checkout
      - restore_cache_for_go
      - run: echo 'export PATH=${PATH}:${GOPATH}/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - run:
          name: db_dev_fresh
          command: |
            echo 'export MOVE_MIL_DOD_CA_CERT=$(cat config/tls/devlocal-ca.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_CERT=$(cat config/tls/devlocal-https.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_KEY=$(cat config/tls/devlocal-https.key)' >> $BASH_ENV
            source $BASH_ENV
            make db_dev_fresh
          no_output_timeout: 60m
          environment:
            APPLICATION: app
            DB_PASSWORD: mysecretpassword
            DB_USER_LOW_PRIV: crud
            DB_PASSWORD_LOW_PRIV: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT: 5432
            DB_NAME: dev_db
            DB_NAME_DEV: dev_db
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/app/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/app/schema;file:///home/circleci/transcom/mymove/migrations/app/secure'
            EIA_KEY: db2522a43820268a41a802a16ae9fd26 # dummy key generated with openssl rand -hex 16
            ENVIRONMENT: development
            DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/milmove-cert-bundle.p7b
      - announce_failure

  # `integration_tests` is just a fake step so that we don't have to
  # keep track of the manual splitting of the integration_tests when
  # specifying dependencies
  integration_tests:
    executor: base_small
    steps:
      - run: echo "integration_tests done"

  # `integration_tests_mtls` runs integration tests using
  # prime-api-client.
  #
  integration_tests_mtls:
    executor: mymove_tester
    steps:
      - attach_workspace:
          at: .
      - e2e_tests_mtls
      - announce_failure

  integration_tests_load:
    executor: mymove_load_tester
    steps:
      - attach_workspace:
          at: .
      - e2e_tests_load
      - store_artifacts:
          path: reports
          destination: reports

  # `server_test` runs the server side Go tests
  server_test:
    executor: mymove_tester
    steps:
      - checkout
      - restore_cache_for_go
      - run: echo 'export PATH=${PATH}:${GOPATH}/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - run:
          # https://support.circleci.com/hc/en-us/articles/10816400480411-How-to-pass-environment-variables-between-jobs
          name: Copy Workflow Job ID to file
          command: |
            echo "export SERVER_TEST_JOB_ID=$CIRCLE_WORKFLOW_JOB_ID" >> server_test_job_id.env
      - persist_to_workspace:
          root: .
          paths:
            - server_test_job_id.env
      # make -j 2 tells make to run 2 simultaneous builds
      - run: make -j 2 bin/milmove bin/gotestsum
      - server_tests_step:
          application: app
      - store_artifacts:
          path: ~/transcom/mymove/tmp/test-results
          destination: test-results
      - store_test_results:
          path: ~/transcom/mymove/tmp/test-results
      - persist_to_workspace:
          root: .
          paths:
            - tmp/test-results/gotest
      - announce_failure

  server_test_coverage:
    executor: tls_small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            #
            # https://circleci.com/docs/caching/#restoring-cache
            #
            # restore the latest version of the test coverage in the
            # cache
            #
            # To manually reset test coverage (e.g. a refactor or
            # deleting code means coverage has gone down and we are ok
            # with it), increment the version number of the cache
            # e.g. go from v1-server-tests-coverage- to
            # v2-server-tests-coverage-
            #
            # ##### NOTE: Make sure you also update the key in the
            # ##### save_cache below
            #
            # The trailing hyphen in restore_cache seems important
            # according to the page linked above
            - v8-server-tests-coverage-
      - run:
          name: Ensure Test Coverage Increasing
          command: |
            ./scripts/ensure-go-test-coverage \
            tmp/baseline-go-coverage/go-coverage.txt \
            tmp/test-results/gotest/app/go-coverage.txt
      - run:
          # on failure, post a comment to the PR with a link to the report
          when: on_fail
          name: 'Post server coverage failure comment to GitHub'
          command: |
            source server_test_job_id.env
            ./scripts/handle-pr-comment \
            $CIRCLE_BRANCH \
            https://output.circle-artifacts.com/output/job/${SERVER_TEST_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/test-results/gotest/app/go-coverage.html \
            "server" \
            "failure"
      - run:
          # on success, check for an existing PR comment and remove it
          when: on_success
          name: 'Delete server coverage failure comment on PR if present'
          command: |
            ./scripts/handle-pr-comment \
            $CIRCLE_BRANCH \
            "" \
            "server" \
            "success"

      # only save the cache on default branch builds because we only want to
      # change the baseline of test results on main builds
      #
      # Save the new baseline regardless of if the coverage succeeds
      # or fails as a merge to main means we have a new baseline. We
      # will use other means to measure if our coverage is increasing
      # or decreasing
      - when:
          condition:
            and:
              - equal: [main, << pipeline.git.branch >>]
              - when: always
          steps:
            - run:
                name: 'Copy coverage to baseline'
                command: |
                  mkdir -p ~/transcom/mymove/tmp/baseline-go-coverage
                  cp ~/transcom/mymove/tmp/test-results/gotest/app/go-coverage.txt \
                        ~/transcom/mymove/tmp/baseline-go-coverage/go-coverage.txt

                when: always
            # ##### NOTE: Make sure this key prefix matches the one
            # ##### below above
            #
            # Use the BuildNum to update the cache key so that the
            # coverage cache is always updated
            - save_cache:
                key: v7-server-tests-coverage-{{ .BuildNum }}
                paths:
                  - ~/transcom/mymove/tmp/baseline-go-coverage
                when: always
            - aws_vars_transcom_gov_dev:
                when: always
            - run:
                name: 'Record server coverage stats'
                command: |
                  timestamp=$(date +"%Y-%m-%dT%H:%M:%SZ")
                  coverage=$(grep statements tmp/test-results/gotest/app/go-coverage.txt | grep -o '[0-9.]*')
                  aws cloudwatch put-metric-data \
                  --metric-name server_test_coverage \
                  --namespace circleci \
                  --value "${coverage}" \
                  --timestamp "${timestamp}"
                when: always

  # `client_test` runs the client side Javascript tests
  client_test:
    executor: mymove_compiler_xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-cache-yarn-v4-{{ checksum "yarn.lock" }}
      - run:
          name: Install Frozen YARN dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - run:
          name: client test coverage
          command: JEST_JUNIT_OUTPUT_DIR=jest-junit-reports make client_test_coverage
      - run:
          # https://support.circleci.com/hc/en-us/articles/10816400480411-How-to-pass-environment-variables-between-jobs
          name: Copy Workflow Job ID to file
          command: |
            echo "export CLIENT_TEST_JOB_ID=$CIRCLE_WORKFLOW_JOB_ID" >> client_test_job_id.env
      - persist_to_workspace:
          root: .
          paths:
            - client_test_job_id.env

      - store_artifacts:
          path: ~/transcom/mymove/coverage
          destination: coverage
      - store_test_results:
          path: ~/transcom/mymove/jest-junit-reports
      - persist_to_workspace:
          root: .
          paths:
            - coverage
      - announce_failure

  client_test_coverage:
    executor: tls_small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          #
          # https://circleci.com/docs/caching/#restoring-cache
          #
          # restore the latest version of the test coverage in the
          # cache
          #
          # To manually reset test coverage (e.g. a refactor or
          # deleting code means coverage has gone down and we are ok
          # with it), increment the version number of the cache
          # e.g. go from v1-client-tests-coverage- to
          # v2-client-tests-coverage-
          #
          # ##### NOTE: Make sure you also update the key in the
          # ##### save_cache below
          #
          # The trailing hyphen in restore_cache seems important
          # according to the page linked above
          keys:
            - v6-client-tests-coverage-
      - run:
          name: Ensure Test Coverage Increasing
          command: |
            ./scripts/ensure-js-test-coverage \
            tmp/baseline-jest-coverage/clover.xml \
            coverage/clover.xml
      - run:
          # on failure, post a comment to the PR with a link to the report
          when: on_fail
          name: 'Post client coverage failure comment to GitHub'
          command: |
            source client_test_job_id.env
            ./scripts/handle-pr-comment \
            $CIRCLE_BRANCH \
            "https://output.circle-artifacts.com/output/job/${CLIENT_TEST_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/coverage/lcov-report/index.html" \
            "client" \
            "failure"
      - run:
          # on success, check for an existing PR comment and remove it
          when: on_success
          name: 'Delete client coverage failure comment on PR if present'
          command: |
            ./scripts/handle-pr-comment \
            $CIRCLE_BRANCH \
            "" \
            "client" \
            "success"
      # only save the cache on default branch builds because we only want to
      # change the baseline of test results on main builds
      # Save the new baseline regardless of if the coverage succeeds
      # or fails as a merge to main means we have a new baseline. We
      # will use other means to measure if our coverage is increasing
      # or decreasing
      - when:
          condition:
            and:
              - equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: 'Copy coverage to baseline'
                command: |
                  mkdir -p ~/transcom/mymove/tmp/baseline-jest-coverage
                  cp ~/transcom/mymove/coverage/clover.xml \
                        ~/transcom/mymove/tmp/baseline-jest-coverage/clover.xml
                when: always
            # ##### NOTE: Make sure this key prefix matches the one
            # ##### above
            #
            # Use the BuildNum to update the cache key so that the
            # coverage cache is always updated
            - save_cache:
                key: v5-client-tests-coverage-{{ .BuildNum }}
                paths:
                  - ~/transcom/mymove/tmp/baseline-jest-coverage
                when: always
            - aws_vars_transcom_gov_dev:
                when: always
            - run:
                name: 'Record client coverage stats'
                command: |
                  timestamp=$(date +"%Y-%m-%dT%H:%M:%SZ")
                  coverage=$(grep -B 1 'span.*Statements' coverage/lcov-report/index.html | grep -o '[0-9.]*')
                  aws cloudwatch put-metric-data \
                  --metric-name client_test_coverage \
                  --namespace circleci \
                  --value "${coverage}" \
                  --timestamp "${timestamp}"
                when: always

  # Compile the server side of the app once and persist the relevant
  # build artifacts to the workspace.
  # This way we don't have to re-run the build and since all necessary
  # items are in the workspace, we don't even have to checkout the
  # code again
  compile_app_server:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache_for_go
      # make -j 4 tells make to run 4 simultaneous builds
      - run: make -j 4 server_build build_tools
      - persist_to_workspace:
          root: .
          paths:
            # Makefile for integration tests
            - Makefile
            # all the Dockerfiles
            - Dockerfile
            - Dockerfile.dp3
            - Dockerfile.e2e
            - Dockerfile.migrations
            - Dockerfile.tasks
            - Dockerfile.tasks_dp3
            - Dockerfile.tools
            - bin
            - config
            - migrations
            # save scripts for deploy
            - scripts
            - swagger
            - pkg/testdatagen/testdata
      - announce_failure

  # Compile the client side of the app once and persist the relevant
  # build artifacts to the workspace.
  # This way we don't have to re-run the build and since all necessary
  # items are in the workspace, we don't even have to checkout the
  # code again
  #
  # the babel/terser cache below takes the compile step from ~6-7m to ~4-5m !!
  compile_app_client:
    # ahobson tested this and saw 75% of the 16GB being used
    # (according to the resources tab on CircleCI)
    # if it starts running out of memory, we should move away from
    # using a ramdisk
    #
    # This entire step takes ~6 minutes with xlarge ramdisk
    # This entire step takes ~7 minutes without xlarge ramdisk
    executor: mymove_ramdisk_compiler_xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-cache-yarn-v4-{{ checksum "yarn.lock" }}
      - run:
          name: Install Frozen YARN dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn

      # babel and terser both have a cache
      #
      # see https://webpack.js.org/loaders/babel-loader/ and look for
      # cacheDirectory
      #
      # see https://www.npmjs.com/package/terser-webpack-plugin/v/1.4.4#cache
      #
      # use the yarn.lock as a key so that PRs with the same
      # dependencies will use the same cache
      - restore_cache:
          keys:
            - v2-node-modules-cache-{{ checksum "yarn.lock" }}
      - run:
          name: make client_build
          command: |
            export REACT_APP_ERROR_LOGGING=otel
            make client_build
          no_output_timeout: 20m
      # only save the cache on default branch builds so that PRs don't pollute
      # the cache
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - save_cache:
                key: v2-node-modules-cache-{{ checksum "yarn.lock" }}
                paths:
                  - ./node_modules/.cache
      - persist_to_workspace:
          root: .
          # Need build for integration tests
          # Need playwright, playwright.config.js, package.json, and
          # yarn.lock for playwright
          # Need eslint-plugin-ato as referenced by package.json/yarn.lock
          paths:
            - build
            - playwright
            - playwright.config.js
            - package.json
            - yarn.lock
            - eslint-plugin-ato
      - announce_failure

  # `build_app` builds the application container
  build_app:
    executor: mymove_builder
    steps:
      - build_image:
          dockerfile: Dockerfile
          image_name: app
          tag: web-dev
          working_dir: /mnt/ramdisk
      - announce_failure

  # `build_dp3_app` builds the application container, replacing DoD chain/certs with non-ato version
  build_dp3_app:
    executor: mymove_builder
    steps:
      - build_image:
          dockerfile: Dockerfile.dp3
          image_name: app
          tag: web-dev
          working_dir: /mnt/ramdisk
      - announce_failure

  # `push_otel_collector_image_dp3` pushes the aws otel collector image
  # to the milmove-<dp3-env> container repository
  push_otel_collector_image_dp3:
    executor: mymove_pusher
    steps:
      - aws_vars_dp3
      - push_otel_collector_image:
          ecr_env: *dp3-env
          aws_otel_collector_image: *aws-otel-collector
      - announce_failure

  # `push_otel_collector_image_stg` pushes the aws otel collector image
  # to the milmove-stg container repository
  push_otel_collector_image_stg:
    executor: mymove_pusher
    steps:
      - aws_vars_stg
      - push_otel_collector_image:
          ecr_env: stg
          aws_otel_collector_image: *aws-otel-collector
      - announce_failure

  # `push_otel_collector_image_stg` pushes the aws otel collector image
  # to the milmove-stg container repository
  push_otel_collector_image_prd:
    executor: mymove_pusher
    steps:
      - aws_vars_prd
      - push_otel_collector_image:
          ecr_env: prd
          aws_otel_collector_image: *aws-otel-collector
      - announce_failure

  # `push_app_gov_dev` pushes the app container to the gov_dev container repository
  push_app_gov_dev:
    executor: mymove_pusher
    steps:
      - aws_vars_transcom_gov_dev
      - push_image:
          ecr_env: gov_dev
          image_name: app
          tag: web-dev
          repo: app
      - announce_failure

  # `push_app_dp3` pushes the app container to the milmove-<dp3-env> container repository
  push_app_dp3:
    executor: mymove_pusher
    steps:
      - aws_vars_dp3
      - push_image:
          ecr_env: *dp3-env
          image_name: app
          tag: web-dev
          repo: app
      - announce_failure

  # `push_app_stg` pushes the app container to the milmove-stg container repository
  push_app_stg:
    executor: mymove_pusher
    steps:
      - aws_vars_stg
      - push_image:
          ecr_env: stg
          image_name: app
          tag: web-dev
          repo: app
      - announce_failure

  # `push_app_prd` pushes the app container to the milmove-prd container repository
  push_app_prd:
    executor: mymove_pusher
    steps:
      - aws_vars_prd
      - push_image:
          ecr_env: prd
          image_name: app
          tag: web-dev
          repo: app
      - announce_failure

  # `build_storybook` builds static storybook assets for deploy
  build_storybook:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-cache-yarn-v4-{{ checksum "yarn.lock" }}
      - run:
          name: Install Frozen YARN dependencies
          command: yarn install --frozen-lockfile
      - restore_cache:
          keys:
            - v1-node-modules-cache
      - run:
          name: Build Storybook
          command: yarn build-storybook
      - persist_to_workspace:
          root: .
          paths:
            - storybook-static
      - store_artifacts:
          path: ~/transcom/mymove/storybook-static
          destination: storybook
      - announce_failure

  # `build_migrations` builds the migrations container
  build_migrations:
    executor: mymove_builder
    steps:
      - build_image:
          dockerfile: Dockerfile.migrations
          image_name: app-migrations
          tag: dev
          working_dir: /mnt/ramdisk
      - announce_failure

  # `push_migrations_gov_dev` pushes the migrations container to the gov_dev container repository
  push_migrations_gov_dev:
    executor: mymove_pusher
    steps:
      - aws_vars_transcom_gov_dev
      - push_image:
          ecr_env: gov_dev
          image_name: app-migrations
          tag: dev
          repo: app-migrations
      - announce_failure

  # `push_migrations_dp3` pushes the migrations container to the milmove-dp3 container repository
  push_migrations_dp3:
    executor: mymove_pusher
    steps:
      - aws_vars_dp3
      - push_image:
          ecr_env: *dp3-env
          image_name: app-migrations
          tag: dev
          repo: app-migrations
      - announce_failure

  # `push_migrations_stg` pushes the migrations container to the milmove-stg container repository
  push_migrations_stg:
    executor: mymove_pusher
    steps:
      - aws_vars_stg
      - push_image:
          ecr_env: stg
          image_name: app-migrations
          tag: dev
          repo: app-migrations
      - announce_failure

  # `push_migrations_prd` pushes the migrations container to the milmove-prd container repository
  push_migrations_prd:
    executor: mymove_pusher
    steps:
      - aws_vars_prd
      - push_image:
          ecr_env: prd
          image_name: app-migrations
          tag: dev
          repo: app-migrations
      - announce_failure

  # `build_tasks` builds the tasks containers
  build_tasks:
    executor: mymove_builder
    steps:
      - build_image:
          dockerfile: Dockerfile.tasks
          image_name: tasks
          tag: dev
          working_dir: /mnt/ramdisk
      - announce_failure

  #`build_dp3_tasks` builds the task container, replacing DoD chain/certs with non-ato version
  build_dp3_tasks:
    executor: mymove_builder
    steps:
      - build_image:
          dockerfile: Dockerfile.tasks_dp3
          image_name: tasks
          tag: dev
          working_dir: /mnt/ramdisk
      - announce_failure

  # `push_tasks_gov_dev` pushes the tasks containers to the gov_dev container repository
  push_tasks_gov_dev:
    executor: mymove_pusher
    steps:
      - aws_vars_transcom_gov_dev
      - push_image:
          ecr_env: gov_dev
          image_name: tasks
          tag: dev
          repo: app-tasks
      - announce_failure

  # `push_tasks_dp3` pushes the tasks containers to the milmove-dp3 container repository
  push_tasks_dp3:
    executor: mymove_pusher
    steps:
      - aws_vars_dp3
      - push_image:
          ecr_env: *dp3-env
          image_name: tasks
          tag: dev
          repo: app-tasks
      - announce_failure

  # `push_tasks_stg` pushes the tasks containers to the milmove-stg container repository
  push_tasks_stg:
    executor: mymove_pusher
    steps:
      - aws_vars_stg
      - push_image:
          ecr_env: stg
          image_name: tasks
          tag: dev
          repo: app-tasks
      - announce_failure

  # `push_tasks_prd` pushes the tasks containers to the milmove-prd container repository
  push_tasks_prd:
    executor: mymove_pusher
    steps:
      - aws_vars_prd
      - push_image:
          ecr_env: prd
          image_name: tasks
          tag: dev
          repo: app-tasks
      - announce_failure

  # `prod_auth_check` checks if approved before going to prod
  prod_auth_check:
    executor: tls_small
    steps:
      - run: echo "build approved by $CIRCLE_USERNAME"
      - run:
          name: Check if Prod approval has rights
          command: |
            if [[ $CIRCLE_USERNAME != "josiahzimmerman-caci" && $CIRCLE_USERNAME != "deandreJones" && $CIRCLE_USERNAME != "cameroncaci" ]]; then
               exit 1
            fi
      - announce_failure
  # All of the deploy tasks need to checkout the code so they can run the `scripts/do-exclusively` script

  # `deploy_dp3_migrations` deploys migrations to the dp3 environment
  deploy_dp3_migrations:
    executor: mymove_pusher
    environment:
      APP_ENVIRONMENT: *dp3-env
    steps:
      - checkout
      - aws_vars_dp3
      - deploy_migrations_steps:
          ecr_env: *dp3-env

  # `deploy_dp3_tasks` deploys scheduled tasks to the dp3 environment
  deploy_dp3_tasks:
    executor: mymove_pusher
    environment:
      APP_ENVIRONMENT: *dp3-env
    steps:
      - checkout
      - aws_vars_dp3
      - deploy_dp3_tasks_steps:
          ecr_env: *dp3-env

  # `deploy_dp3_app` updates the server-TLS app service in the dp3 environment
  deploy_dp3_app:
    executor: mymove_pusher
    parameters:
      dp3-env:
        type: string
        default: *dp3-env

    environment:
      APP_ENVIRONMENT: *dp3-env
      OPEN_TELEMETRY_SIDECAR: 'true'
      HEALTH_CHECK: 'true'
    steps:
      - checkout
      - aws_vars_dp3
      - deploy_app_steps:
          compare_host: '' # leave blank since we want dp3 to be able to roll back
          health_check_hosts: my.<< parameters.dp3-env >>.dp3.us,office.<< parameters.dp3-env >>.dp3.us,admin.<< parameters.dp3-env >>.dp3.us
          ecr_env: *dp3-env

  # `deploy_dp3_app_client_tls` updates the mutual-TLS service in the dp3 environment
  deploy_dp3_app_client_tls:
    executor: mymove_pusher
    parameters:
      dp3-env:
        type: string
        default: *dp3-env
    environment:
      APP_ENVIRONMENT: *dp3-env
      OPEN_TELEMETRY_SIDECAR: 'true'
      HEALTH_CHECK: 'true'
    steps:
      - checkout
      - aws_vars_dp3
      - tls_vars_dp3
      - deploy_app_client_tls_steps:
          compare_host: '' # leave blank since we want dp3 to be able to roll back
          health_check_hosts: api.<< parameters.dp3-env >>.dp3.us
          ecr_env: *dp3-env

  check_circle_against_stg_sha:
    executor: mymove_pusher
    steps:
      - checkout
      - run:
          name: Halt workflow to prevent old default branch deploying to staging
          command: scripts/compare-deployed-commit my.stg.move.mil $CIRCLE_SHA1

  # `deploy_stg_migrations` deploys migrations to the stg environment
  deploy_stg_migrations:
    executor: mymove_pusher
    environment:
      APP_ENVIRONMENT: 'stg'
    steps:
      - checkout
      - aws_vars_stg
      - deploy_migrations_steps:
          ecr_env: stg

  # `deploy_stg_tasks` deploys scheduled tasks to the stg environment
  deploy_stg_tasks:
    executor: mymove_pusher
    environment:
      APP_ENVIRONMENT: 'stg'
    steps:
      - checkout
      - aws_vars_stg
      - deploy_tasks_steps:
          ecr_env: stg

  # `deploy_stg_app` updates the server-TLS app service in stg environment
  deploy_stg_app:
    executor: mymove_pusher
    environment:
      APP_ENVIRONMENT: 'stg'
      OPEN_TELEMETRY_SIDECAR: 'true'
      HEALTH_CHECK: 'true'
    steps:
      - checkout
      - aws_vars_stg
      - deploy_app_steps:
          compare_host: my.stg.move.mil
          health_check_hosts: my.stg.move.mil,office.stg.move.mil,admin.stg.move.mil
          ecr_env: stg

  # `deploy_stg_app_client_tls` updates the mutual-TLS service in the stg environment
  deploy_stg_app_client_tls:
    executor: mymove_pusher
    # use dockerhub otel collector image as govcloud does not have the
    # right certs for pulling from public.ecr.aws
    environment:
      APP_ENVIRONMENT: 'stg'
      OPEN_TELEMETRY_SIDECAR: 'true'
      HEALTH_CHECK: 'true'
    steps:
      - checkout
      - aws_vars_stg
      - tls_vars_stg
      - deploy_app_client_tls_steps:
          compare_host: gex.stg.move.mil
          health_check_hosts: gex.stg.move.mil
          ecr_env: stg

  deploy_storybook_dp3:
    executor: mymove_pusher
    steps:
      - checkout
      - aws_vars_transcom_com_dev
      - deploy_app_storybook:
          s3_bucket: storybook.dp3.us

  # `deploy_prd_migrations` deploys migrations to the milmove-prd environment
  deploy_prd_migrations:
    executor: mymove_pusher
    environment:
      APP_ENVIRONMENT: 'prd'
    steps:
      - checkout
      - aws_vars_prd
      - deploy_migrations_steps:
          ecr_env: prd

  # `deploy_prd_tasks` deploys ECS tasks in the milmove-prd environment
  deploy_prd_tasks:
    executor: mymove_pusher
    environment:
      APP_ENVIRONMENT: 'prd'
    steps:
      - checkout
      - aws_vars_prd
      - deploy_tasks_steps:
          ecr_env: prd

  # `deploy_prd_app` updates the server-TLS app service in the milmove-prd environment
  deploy_prd_app:
    executor: mymove_pusher
    environment:
      APP_ENVIRONMENT: 'prd'
      OPEN_TELEMETRY_SIDECAR: 'true'
      HEALTH_CHECK: 'true'
    steps:
      - checkout
      - aws_vars_prd
      - deploy_app_steps:
          compare_host: my.move.mil
          health_check_hosts: my.move.mil,office.move.mil,admin.move.mil
          ecr_env: prd

  # `deploy_prd_app_client_tls` updates the mutual-TLS service in the milmove-prd environment
  deploy_prd_app_client_tls:
    executor: mymove_pusher
    environment:
      APP_ENVIRONMENT: 'prd'
      OPEN_TELEMETRY_SIDECAR: 'true'
      HEALTH_CHECK: 'true'
    steps:
      - checkout
      - aws_vars_prd
      - tls_vars_prd
      - deploy_app_client_tls_steps:
          compare_host: gex.move.mil
          health_check_hosts: gex.move.mil
          ecr_env: prd

workflows:
  version: 2

  app:
    jobs:
      - check_tls_certificate_dp3

      - check_tls_certificate_stg

      - check_tls_certificate_prd

      - pre_deps_golang

      - pre_deps_yarn

      - base_noop

      - anti_virus:
          filters:
            branches:
              only: main

      # compile_app_client does not rely on pre_deps_yarn
      # anymore so that it can start sooner. This helps the
      # overall build time since the compile is so slow. It does
      # the same steps as pre_deps_yarn, it just doesn't cache
      # the yarn downloads, so compile_app_client and
      # pre_deps_yarn might both wind up downloading packages,
      # but the speedup is worth the duplicate work
      #
      # CircleCI has a "feature" where if all dependencies are
      # filtered, the job is not run, so add a base_noop step that
      # should complete very quickly
      # See workflows -> jobs -> requires at
      #
      # https://circleci.com/docs/configuration-reference/
      - compile_app_client:
          requires:
            - base_noop
            - anti_virus

      - check_generated_code:
          requires:
            - pre_deps_golang
          filters:
            branches:
              ignore: [*integration-mtls-ignore-branch, *integration-ignore-branch]

      - pre_test:
          requires:
            - pre_deps_golang
            - pre_deps_yarn
            - check_tls_certificate_dp3
            - check_tls_certificate_stg
            - check_tls_certificate_prd

      - integration_tests_admin:
          requires:
            - compile_app_server
            - compile_app_client
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-ignore-branch

      - integration_tests_office:
          requires:
            - compile_app_server
            - compile_app_client
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-ignore-branch

      - integration_tests_my:
          requires:
            - compile_app_server
            - compile_app_client
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-ignore-branch

      - integration_tests_devseed:
          requires:
            - pre_deps_golang
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-ignore-branch

      - integration_tests:
          requires:
            - integration_tests_admin
            - integration_tests_office
            - integration_tests_my
            - integration_tests_devseed
            - integration_tests_mtls
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-ignore-branch

      - integration_tests_mtls:
          # mtls integration tests use the same server image as the
          # e2e playwright tests and so needs the client build
          requires:
            - compile_app_server
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-mtls-ignore-branch

      - integration_tests_load:
          requires:
            - compile_app_server
            # limiting this run to integrationBranch only due to multiple branch pipeline
          filters:
            branches:
              only: integrationTesting

      - client_test:
          requires:
            - pre_deps_yarn
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *client-ignore-branch

      - client_test_coverage:
          requires:
            - client_test
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *client-ignore-branch

      - server_test:
          requires:
            - pre_deps_golang
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *server-ignore-branch

      - server_test_coverage:
          requires:
            - server_test
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *server-ignore-branch

      - compile_app_server:
          requires:
            - anti_virus
            - pre_deps_golang

      - build_app:
          requires:
            - compile_app_server
            - compile_app_client
          filters:
            branches:
              ignore: *dp3-branch

      - push_app_gov_dev:
          requires:
            - build_app

      - build_migrations:
          requires:
            - compile_app_server
            - compile_app_client

      - push_migrations_gov_dev:
          requires:
            - build_migrations
          filters:
            branches:
              ignore: [*integration-mtls-ignore-branch, *integration-ignore-branch]

      - build_tasks:
          requires:
            - compile_app_server
            - compile_app_client
          filters:
            branches:
              ignore: *dp3-branch

      - push_tasks_gov_dev:
          requires:
            - build_tasks

      - build_dp3_app:
          requires:
            - compile_app_server
            - compile_app_client
          filters:
            branches:
              only: *dp3-branch

      - build_dp3_tasks:
          requires:
            - compile_app_server
            - compile_app_client
          filters:
            branches:
              only: *dp3-branch

      - push_otel_collector_image_dp3:
          requires:
            - compile_app_server
          filters:
            branches:
              only: *dp3-branch

      - push_app_dp3:
          requires:
            - build_dp3_app
          filters:
            branches:
              only: *dp3-branch

      - push_migrations_dp3:
          requires:
            - build_migrations
          filters:
            branches:
              only: *dp3-branch

      - push_tasks_dp3:
          requires:
            - build_dp3_tasks
          filters:
            branches:
              only: *dp3-branch

      - deploy_dp3_migrations:
          requires:
            - pre_deps_golang
            - pre_test
            - client_test
            - server_test
            - push_app_dp3
            - push_otel_collector_image_dp3
            - compile_app_server
            - compile_app_client
            - push_tasks_dp3
            - push_migrations_dp3
          filters:
            branches:
              only: *dp3-branch

      - deploy_dp3_tasks:
          requires:
            - deploy_dp3_migrations
          filters:
            branches:
              only: *dp3-branch

      - deploy_dp3_app:
          requires:
            - deploy_dp3_migrations
          filters:
            branches:
              only: *dp3-branch

      - deploy_dp3_app_client_tls:
          requires:
            - deploy_dp3_migrations
          filters:
            branches:
              only: *dp3-branch

      - push_otel_collector_image_stg:
          requires:
            - compile_app_server
          filters:
            branches:
              only: main

      - push_app_stg:
          requires:
            - build_app
          filters:
            branches:
              only: main

      - push_migrations_stg:
          requires:
            - build_migrations
          filters:
            branches:
              only: main

      - push_tasks_stg:
          requires:
            - build_tasks
          filters:
            branches:
              only: main

      - check_circle_against_stg_sha:
          requires:
            - pre_deps_golang
            - pre_test
            - client_test
            - server_test
            - push_app_stg
            - push_otel_collector_image_stg
            - compile_app_server
            - compile_app_client
            - push_migrations_stg
            - push_tasks_stg
            - integration_tests
            - integration_tests_mtls
          filters:
            branches:
              only: main

      - deploy_stg_migrations:
          requires:
            - check_circle_against_stg_sha
          filters:
            branches:
              only: main

      - deploy_stg_tasks:
          requires:
            - deploy_stg_migrations
          filters:
            branches:
              only: main

      - deploy_stg_app:
          requires:
            - deploy_stg_migrations
          filters:
            branches:
              only: main

      - deploy_stg_app_client_tls:
          requires:
            - deploy_stg_migrations
          filters:
            branches:
              only: main

      - approve_prd_deploy:
          type: approval
          context:
            - Production Workflow Approvers
          requires:
            - deploy_stg_tasks
            - deploy_stg_app
            - deploy_stg_app_client_tls

      - prod_auth_check:
          requires:
            - approve_prd_deploy
          filters:
            branches:
              only: main

      - deploy_storybook_dp3:
          requires:
            - build_storybook
          filters:
            branches:
              only: main

      - build_storybook:
          requires:
            - anti_virus
            - pre_deps_yarn

      - push_otel_collector_image_prd:
          requires:
            - prod_auth_check
          filters:
            branches:
              only: main

      - push_app_prd:
          requires:
            - prod_auth_check
          filters:
            branches:
              only: main

      - push_migrations_prd:
          requires:
            - prod_auth_check
          filters:
            branches:
              only: main

      - push_tasks_prd:
          requires:
            - prod_auth_check
          filters:
            branches:
              only: main

      - deploy_prd_migrations:
          requires:
            - push_migrations_prd
            - push_app_prd
            - push_tasks_prd
            - push_otel_collector_image_prd
          filters:
            branches:
              only: main

      - deploy_prd_tasks:
          requires:
            - deploy_prd_migrations
            - push_tasks_prd
          filters:
            branches:
              only: main

      - deploy_prd_app:
          requires:
            - deploy_prd_migrations
            - push_app_prd
          filters:
            branches:
              only: main

      - deploy_prd_app_client_tls:
          requires:
            - deploy_prd_migrations
            - push_app_prd
          filters:
            branches:
              only: main

experimental:
  notify:
    branches:
      only:
        - main
