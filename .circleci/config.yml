############
#
# Caches
#
# Caches may have a `v1-` prefix, since caches in CircleCI 2.0 are immutable.
# A prefix provides an easy way to invalidate a cache.  See https://circleci.com/docs/2.0/caching/#clearing-cache
#
# Please do not use docker_layer_caching! It costs too much money to run. Please set to `false`.
#
############

version: '2.1'

# References for variables shared across the file
references:
  circleci-docker: &circleci-docker milmove/circleci-docker:milmove-app-4dbb2bcb421ecd4a7ea1e511b954e285a317c8fc

  # the cypress image to use
  cypress: &cypress milmove/circleci-docker:milmove-cypress-f678d1c6a5e2085f733f5408b7affd628f9f3576

  # https://circleci.com/docs/2.0/databases/#optimizing-postgres-images
  postgres: &postgres cimg/postgres:12.7

  redis: &redis redis:5.0.6

  # To deploy to loadtest, demo or exp:
  # set dp3-branch to the branch you want to deploy to the env specifed
  # in dp3-env (loadtest, demo, exp), or
  # `placeholder_branch_name` if you don't want to deploy to dp3
  #
  # In addition, it's common practice to disable acceptance tests and
  # ignore tests for dp3 deploys. See the branch settings below.
  dp3-branch: &dp3-branch placeholder_branch_name
  # MUST BE ONE OF: loadtest, demo, exp.
  # These are used to pull in env vars so the spelling matters!
  dp3-env: &dp3-env placeholder_env

  # set acceptance-branch to the branch you want to ENABLE acceptance
  # tests, or `placeholder_branch_name` if you don't want to run them
  acceptance-branch: &acceptance-branch placeholder_branch_name

  # set integration-ignore-branch to the branch if you want to IGNORE
  # integration tests, or `placeholder_branch_name` if you do want to
  # run them
  integration-ignore-branch: &integration-ignore-branch placeholder_branch_name

  # set integration-mtls-ignore-branch to the branch if you want to
  # IGNORE mtls integration tests, or `placeholder_branch_name` if you
  # do want to run them
  integration-mtls-ignore-branch: &integration-mtls-ignore-branch placeholder_branch_name

  # set client-ignore-branch to the branch if you want to IGNORE
  # client tests, or `placeholder_branch_name` if you do want to run
  # them
  client-ignore-branch: &client-ignore-branch placeholder_branch_name

  # set server-ignore-branch to the branch if you want to IGNORE
  # server tests, or `placeholder_branch_name` if you do want to run
  # them
  server-ignore-branch: &server-ignore-branch placeholder_branch_name

executors:
  av_medium:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
      - image: milmove/clamav-ci
        # Authenticate with Docker Hub to avoid rate limit problems beginning on Nov 1st, 2020.
        # See https://www.docker.com/blog/scaling-docker-to-serve-millions-more-developers-network-egress/ for details
        # We'll need this until CircleCI and Docker Hub work out a deal to prevent rate limiting errors from CircleCI
        # IPs.
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  mymove_pusher:
    # needs to be medium+ so it can checkout and restore the workspace
    resource_class: medium+
    working_directory: /mnt/ramdisk
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  mymove_builder:
    resource_class: medium+
    working_directory: /mnt/ramdisk
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  mymove_compiler:
    # large and no ram disk
    resource_class: large
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          GOPATH: /home/circleci/go

  mymove_compiler_xlarge:
    # xlarge and no ram disk
    resource_class: xlarge
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          GOPATH: /home/circleci/go

  mymove_ramdisk_compiler:
    # large with ram disk
    resource_class: large
    working_directory: /mnt/ramdisk
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          GOPATH: /home/circleci/go

  mymove_ramdisk_compiler_xlarge:
    # xlarge with ram disk
    resource_class: xlarge
    working_directory: /mnt/ramdisk
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          GOPATH: /home/circleci/go

  mymove_tester:
    resource_class: large
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          GOPATH: /home/circleci/go
      - image: *postgres
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: test_db
      - image: *redis
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

  milmove_integration_tester:
    resource_class: large
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
        name: adminlocal
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

commands:
  aws_vars_stg:
    steps:
      - run:
          name: 'Setting up AWS environment variables for stg env'
          command: |
            echo "export AWS_DEFAULT_REGION=$STG_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$STG_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$STG_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$STG_SECRET_ACCESS_KEY" >> $BASH_ENV
            source $BASH_ENV
  tls_vars_stg:
    steps:
      - run:
          name: 'Setting up TLS environment variables for stg env'
          command: |
            echo "export TLS_CERT=$STG_MOVE_MIL_DOD_TLS_CERT" >> $BASH_ENV
            echo "export TLS_KEY=$STG_MOVE_MIL_DOD_TLS_KEY" >> $BASH_ENV
            echo "export TLS_CA=$STG_MOVE_MIL_DOD_TLS_CA" >> $BASH_ENV
            source $BASH_ENV
  aws_vars_prd:
    steps:
      - run:
          name: 'Setting up AWS environment variables for prd env'
          command: |
            echo "export AWS_DEFAULT_REGION=$PRD_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$PRD_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$PRD_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$PRD_SECRET_ACCESS_KEY" >> $BASH_ENV
            source $BASH_ENV
  tls_vars_prd:
    steps:
      - run:
          name: 'Setting up TLS environment variables for prd env'
          command: |
            echo "export TLS_CERT=$PRD_MOVE_MIL_DOD_TLS_CERT" >> $BASH_ENV
            echo "export TLS_KEY=$PRD_MOVE_MIL_DOD_TLS_KEY" >> $BASH_ENV
            echo "export TLS_CA=$PRD_MOVE_MIL_DOD_TLS_CA" >> $BASH_ENV
            source $BASH_ENV
  aws_vars_transcom_gov_dev:
    steps:
      - run:
          name: 'Setting up AWS environment variables for gov-dev env'
          command: |
            echo "export AWS_DEFAULT_REGION=$GOV_DEV_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$GOV_DEV_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$GOV_DEV_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$GOV_DEV_SECRET_KEY" >> $BASH_ENV
            source $BASH_ENV
  tls_vars_gov_dev:
    steps:
      - run:
          name: 'Setting up TLS environment variables for gov-dev env'
          command: |
            echo "export TLS_CERT=$EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT" >> $BASH_ENV
            echo "export TLS_KEY=$EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY" >> $BASH_ENV
            echo "export TLS_CA=$EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA" >> $BASH_ENV
            source $BASH_ENV
  aws_vars_transcom_com_dev:
    steps:
      - run:
          name: 'Setting up AWS environment variables for com-dev env'
          command: |
            echo "export AWS_DEFAULT_REGION=$COM_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=$DEV_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$DEV_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$DEV_SECRET_KEY" >> $BASH_ENV
            source $BASH_ENV
  aws_vars_dp3:
    parameters:
      dp3-env:
        description: dp3 env to deploy to (exp, loadtest, demo)
        type: string
        default: *dp3-env
    steps:
      - run:
          name: 'Setting up AWS environment variables for dp3 env defined in &dp3-env'
          command: |
            echo "export AWS_DEFAULT_REGION=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_REGION" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_ACCOUNT_ID" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_SECRET_ACCESS_KEY" >> $BASH_ENV
            source $BASH_ENV
  tls_vars_dp3:
    parameters:
      dp3-env:
        description: dp3 env to deploy to (exp, loadtest, demo)
        type: string
        default: *dp3-env
    steps:
      - run:
          name: 'Setting up TLS environment variables for dp3 env defined in &dp3-env'
          command: |
            echo "export TLS_CERT=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_DP3_CERT" >> $BASH_ENV
            echo "export TLS_KEY=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_DP3_KEY" >> $BASH_ENV
            echo "export TLS_CA=\$$(echo << parameters.dp3-env >> | tr 'a-z' 'A-Z')_DP3_CA" >> $BASH_ENV
            source $BASH_ENV

  announce_failure:
    parameters:
    steps:
      - run:
          name: Announce failure
          command: |
            [[ $CIRCLE_BRANCH = master ]] || exit 0
            scripts/circleci-announce-broken-branch
          when: on_fail

  deploy_migrations_steps:
    parameters:
      ecr_env:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat images/sha/ECR_DIGEST_app-migrations_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - run:
          name: Snapshot database
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/rds-snapshot-app-db $APP_ENVIRONMENT
      - run:
          name: Run migrations
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-run-app-migrations-container ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations@${ECR_DIGEST} $APP_ENVIRONMENT
          no_output_timeout: 60m
          environment:
            CHAMBER_RETRIES: 20
      - announce_failure
  deploy_tasks_steps:
    parameters:
      ecr_env:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat images/sha/ECR_DIGEST_app-tasks_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - deploy:
          name: Deploy connect to GEX via SFTP service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container connect-to-gex-via-sftp "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - deploy:
          name: Deploy GHC fuel price data task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container save-ghc-fuel-price-data "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - deploy:
          name: Deploy post move email survey task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container send-post-move-survey "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - deploy:
          name: Deploy payment reminder email task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container send-payment-reminder "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - deploy:
          name: Deploy post to GEX service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container post-file-to-gex "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - deploy:
          name: Deploy process EDIs service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container process-edis "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
  # Used for dp3 sites, which do not include gex/orders
  deploy_dp3_tasks_steps:
    parameters:
      ecr_env:
        type: string
        default: *dp3-env
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat images/sha/ECR_DIGEST_app-tasks_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - deploy:
          name: Deploy GHC fuel price data task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container save-ghc-fuel-price-data "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - deploy:
          name: Deploy post move email survey task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container send-post-move-survey "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
      - deploy:
          name: Deploy payment reminder email task service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-task-container send-payment-reminder "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks@${ECR_DIGEST}" "${APP_ENVIRONMENT}"
          no_output_timeout: 20m
      - announce_failure
  deploy_app_steps:
    parameters:
      compare_host:
        type: string
      health_check_hosts:
        type: string
      ecr_env:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Compare against deployed commit
          command: |
            [[ -z "<< parameters.compare_host >>" ]] || scripts/compare-deployed-commit "<< parameters.compare_host >>" $CIRCLE_SHA1
      - restore_cache:
          keys:
            - go-mod-sources-v4-{{ checksum "go.sum" }}-{{ checksum ".go-version" }}
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat images/sha/ECR_DIGEST_app_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - deploy:
          name: Deploy app service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container app "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app@${ECR_DIGEST}" "${APP_ENVIRONMENT}" "/bin/milmove serve"
          no_output_timeout: 20m
      - run:
          name: Health Check
          command: bin/health-checker --schemes https --hosts << parameters.health_check_hosts >> --tries 10 --backoff 3 --log-level info --timeout 5m
      - run:
          name: TLS Check
          command: bin/tls-checker --schemes https --hosts << parameters.health_check_hosts >> --log-level info --timeout 15m
      - run:
          name: Check deployed commits
          command: scripts/check-deployed-commit "<< parameters.health_check_hosts >>" "$CIRCLE_SHA1"
      - announce_failure
  deploy_app_client_tls_steps:
    parameters:
      compare_host:
        type: string
      health_check_hosts:
        type: string
      ecr_env:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Compare against deployed commit
          command: |
            [[ -z "<< parameters.compare_host >>" ]] || scripts/compare-deployed-commit "<< parameters.compare_host >>" $CIRCLE_SHA1 ${TLS_KEY} ${TLS_CERT} ${TLS_CA}
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat images/sha/ECR_DIGEST_app_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - deploy:
          name: Deploy app-client-tls service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container app-client-tls "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app@${ECR_DIGEST}" "${APP_ENVIRONMENT}" "/bin/milmove serve"
          no_output_timeout: 20m
      - run:
          name: Health Check
          command: |
            bin/health-checker --schemes https --hosts << parameters.health_check_hosts >> --key ${TLS_KEY} --cert ${TLS_CERT} --ca ${TLS_CA} --tries 10 --backoff 3 --log-level info --timeout 5m
      - run:
          name: TLS Check
          command: |
            bin/tls-checker --schemes https --hosts << parameters.health_check_hosts >> --key ${TLS_KEY} --cert ${TLS_CERT} --ca ${TLS_CA} --log-level info --timeout 15m
      - run:
          name: Check deployed commits
          command: scripts/check-deployed-commit "<< parameters.health_check_hosts >>" "$CIRCLE_SHA1" ${TLS_KEY} ${TLS_CERT} ${TLS_CA}
      - announce_failure

  deploy_webhook_client_steps:
    parameters:
      ecr_env:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Get Digest from filesystem
          command: echo 'export ECR_DIGEST=$(cat images/sha/ECR_DIGEST_app-webhook-client_<< parameters.ecr_env >>)' | tee -a "${BASH_ENV}"
      - deploy:
          name: Deploy app-webhook-client service
          command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container app-webhook-client "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-webhook-client@${ECR_DIGEST}" "${APP_ENVIRONMENT}" "/bin/webhook-client webhook-notify"
          no_output_timeout: 20m
      - announce_failure

  deploy_app_storybook:
    parameters:
      s3_bucket:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/storybook
      - checkout
      - deploy:
          name: Push Storybook build to S3
          command: scripts/push-storybook-assets "<< parameters.s3_bucket>>"

  build_image:
    parameters:
      dockerfile:
        type: string
      image_name:
        type: string
      tag:
        type: string
      working_dir:
        type: string
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: 'Build docker image'
          working_directory: << parameters.working_dir >>
          command: |
            docker build -f << parameters.dockerfile>> -t << parameters.image_name >>:<< parameters.tag >> .
            mkdir -p images
            docker save -o images/<< parameters.image_name >> << parameters.image_name >>:<< parameters.tag >>
      - persist_to_workspace:
          root: .
          paths:
            - images/<< parameters.image_name >>

  push_image:
    parameters:
      ecr_env:
        type: string
      image_name:
        type: string
      tag:
        type: string
      repo:
        type: string
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: 'Retrieve docker image from workspace'
          command: |
            docker load -i images/<< parameters.image_name >>
      - run:
          name: 'Tag and push docker image'
          command: |
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker tag << parameters.image_name >>:<< parameters.tag >> ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-${CIRCLE_SHA1}
            shopt -s extglob
            docker tag << parameters.image_name >>:<< parameters.tag >> ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-branch-${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.repo >>:git-branch-${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}
      - run:
          name: 'Record ECR Image Digest'
          command: |
            mkdir -p images/sha
            echo $(aws ecr describe-images --repository-name << parameters.repo >> --image-ids imageTag=git-${CIRCLE_SHA1} | jq ".imageDetails[0] .imageDigest" -r) > images/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>
            cat images/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>
      - run:
          name: 'Describe image scan findings'
          command: scripts/ecr-describe-image-scan-findings << parameters.repo >> ${CIRCLE_SHA1}
      - persist_to_workspace:
          root: .
          paths: images/sha/ECR_DIGEST_<< parameters.repo >>_<< parameters.ecr_env >>

  server_tests_step:
    parameters:
      application:
        type: string
    steps:
      - run: echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
          source $BASH_ENV
      - run:
          name: make server_test_build for <<parameters.application>>
          command: make server_test
          environment:
            APPLICATION: '<< parameters.application >>'
            GOFLAGS: '-p=4'
            DB_PASSWORD: mysecretpassword
            DB_USER_LOW_PRIV: crud
            DB_PASSWORD_LOW_PRIV: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT_TEST: 5433
            DB_PORT: 5432
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/<< parameters.application >>/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/<< parameters.application >>/schema;file:///home/circleci/transcom/mymove/migrations/<< parameters.application >>/secure'
            EIA_KEY: db2522a43820268a41a802a16ae9fd26 # dummy key generated with openssl rand -hex 16
            ENV: test
            ENVIRONMENT: test
            SERVER_REPORT: 1
            COVERAGE: 1
            SERVE_API_INTERNAL: true

  # this custom step has some duplication with
  # scripts/run-e2e-test-docker because we want to run some of the
  # steps below in parallel
  e2e_tests_cypress:
    parameters:
      spec_glob:
        type: string
      cypress_image:
        type: string
        default: *cypress
    steps:
      - setup_remote_docker:
          version: 17.09.0-ce
          docker_layer_caching: false
      - run:
          name: setup docker for server
          command: |
            docker version
            docker network create e2e_cypress
            docker build -t milmove_e2e:local -f Dockerfile.e2e .
      - run:
          background: true
          name: run server
          command: |
            echo 'export MOVE_MIL_DOD_CA_CERT=$(cat config/tls/devlocal-ca.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_CERT=$(cat config/tls/devlocal-https.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_KEY=$(cat config/tls/devlocal-https.key)' >> $BASH_ENV
            echo 'export CLIENT_AUTH_SECRET_KEY=$(cat config/tls/devlocal-client_auth_secret.key)' >> $BASH_ENV
            echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
            echo 'export HERE_MAPS_APP_ID=$E2E_HERE_MAPS_APP_ID' >> $BASH_ENV
            echo 'export HERE_MAPS_APP_CODE=$E2E_HERE_MAPS_APP_CODE' >> $BASH_ENV
            source $BASH_ENV
            docker-compose -f docker-compose.e2e.yml up
      - run:
          name: wait for server
          # Use the cypress_image here to run dockerize so that the
          # cypress image can be downloaded while the migrations, test
          # data generation, and server startup happens in the
          # background.
          #
          # Downloading this huge image takes ~2 minutes on circleci,
          # so doing it in parallel with the server setup is a massive speedup.
          command: |
            docker run --network e2e_cypress << parameters.cypress_image >> dockerize -wait http://milmovelocal:4000 -timeout 5m
      - run:
          name: run e2e_test cypress
          # the junit report from the mocha reporter doesn't seem to
          # support the right attributes to support
          # --split-by=timings, but it seems like filesize is a
          # reasonable proxy for test time
          command: |
            SPECS=$(circleci tests glob "<< parameters.spec_glob >>" | circleci tests split --split-by=filesize | paste -s -d, -)
            if [ -z "${SPECS}" ]; then
              echo "CircleCI Parallelism greater than number of files in glob. Please adjust the number parallelism value to a lower number."
              exit 1
            fi
            echo $SPECS
            docker build -t cypress:local -f cypress/Dockerfile.cypress cypress
            docker run --name cypress --network e2e_cypress -e CYPRESS_baseUrl="http://milmovelocal:4000" cypress:local run --spec "${SPECS}"
      - run:
          name: extract results
          # always try to extract the artifacts so it can help us
          # figure out why a test is failing
          when: always
          command: |
            docker cp cypress:/home/circleci/cypress/results cypress/
            docker cp cypress:/home/circleci/cypress/screenshots cypress/ 2>/dev/null || echo "No cypress screenshots copied"
            docker cp cypress:/home/circleci/cypress/videos cypress/ 2>/dev/null || echo "No cypress videos copied"
            docker cp cypress:/home/circleci/cypress/reports cypress/ 2>/dev/null || echo "No cypress reports copied"

  # this custom step has some duplication with
  # scripts/run-e2e-mtls-test-docker because we want to run some of the
  # steps below in parallel
  e2e_tests_mtls:
    steps:
      - setup_remote_docker:
          version: 17.09.0-ce
          docker_layer_caching: false
      - run:
          name: setup docker for server
          command: |
            docker network create e2e_mtls
            docker build -t milmove_mtls:local -f Dockerfile.e2e .
      - run:
          background: true
          name: run server
          command: |
            echo 'export MOVE_MIL_DOD_CA_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.key)' >> $BASH_ENV
            echo 'export CLIENT_AUTH_SECRET_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-client_auth_secret.key)' >> $BASH_ENV
            echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
            echo 'export LOGIN_GOV_HOSTNAME=$E2E_LOGIN_GOV_HOSTNAME' >> $BASH_ENV
            source $BASH_ENV
            docker-compose -f docker-compose.mtls.yml up
      - run:
          name: run e2e mtls tests
          command: |
            docker run \
            --name prime_api_client \
            --network e2e_mtls \
            --entrypoint /scripts/run-e2e-mtls-test \
            milmove_mtls:local

jobs:
  # `pre_deps_golang` is used for caching Go module sources
  pre_deps_golang:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v4-{{ checksum "go.sum" }}-{{ checksum ".go-version" }}
      - run: echo 'export PATH=${PATH}:${GOPATH}/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - run:
          name: Install dependencies
          command: for i in $(seq 1 5); do go mod download && break || s=$? && sleep 5; done; (exit $s)
      - run: scripts/check-generated-code go.sum
      - run:
          name: Install go-swagger
          command: make bin/swagger
      - save_cache:
          key: go-mod-sources-v4-{{ checksum "go.sum" }}-{{ checksum ".go-version" }}
          paths:
            - '~/go'
            - '~/transcom/mymove/bin/swagger'
      - announce_failure

  # `pre_deps_yarn` is used to cache yarn sources
  pre_deps_yarn:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
      - run:
          name: Install Frozen YARN dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - run: scripts/check-generated-code yarn.lock
      # `v3-cache-yarn-v3-{{ checksum "yarn.lock" }}` is used to cache yarn sources
      - save_cache:
          key: v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - announce_failure

  # `check_generated_code` is used to ensure generated code doesn't change
  check_generated_code:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v4-{{ checksum "go.sum" }}-{{ checksum ".go-version" }}
      - run: echo 'export PATH=${PATH}:${GOPATH}/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - run: make server_generate mocks_generate
      - run: scripts/check-generated-code pkg/gen/ $(find . -type d -name "*mocks" -exec echo -n '{} ' \;)
      - announce_failure

  # `anti_virus` uses virus detection software to scan the source code
  anti_virus:
    executor: av_medium
    steps:
      - checkout
      - run: clamscan --version
      - run: cp -v ~/transcom/mymove/anti-virus/whitelist-*.{fp,ign2} /var/lib/clamav/
      - run: >
          clamscan \
            --recursive \
            --infected \
            --detect-pua=yes \
            --exclude-pua=NetTool \
            --exclude-pua=PWTool \
            --max-scansize=300M \
            --max-filesize=100M \
            --max-recursion=30 \
            --max-files=50000 \
            --tempdir=/tmp \
            ~/transcom/mymove
      - announce_failure

  # `pre_test` runs pre-commit against all files.
  pre_test:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v4-{{ checksum "go.sum" }}-{{ checksum ".go-version" }}
      - restore_cache:
          keys:
            - v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v1-pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - run: echo 'export PATH=${PATH}:${GOPATH}/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - run:
          name: Install Frozen YARN dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      # this is so we can avoid go mod downloading and resulting in an error on a false positive
      - run: scripts/pre-commit-go-mod || exit 0
      - run:
          name: Run pre-commit tests without golangci-lint, eslint, or prettier
          command: SKIP=golangci-lint,eslint,prettier pre-commit run --all-files
      # The output of golangci-lint is an artifact towards STIG compliance
      - run:
          name: Run pre-commit tests with golangci-lint only
          command: |
            echo 'export GOLANGCI_LINT_CONCURRENCY=1' >> $BASH_ENV
            echo 'export GOLANGCI_LINT_VERBOSE=-v' >> $BASH_ENV
            source $BASH_ENV
            mkdir -p tmp/test-results/pretest
            pre-commit run -v --all-files golangci-lint | tee tmp/test-results/pretest/golangci-lint.out
      - run:
          name: Run prettier checks
          command: yarn prettier-ci
      - run:
          name: Run eslint checks
          command: yarn lint
      # Add DangerJS checks here since they are similar to our pre-commit hooks. This requires that
      # the DANGER_GITHUB_API_TOKEN environment variable is set in the project settings for
      # CircleCI. To generate a new token, log into the robot-mymove account and regenerate the
      # personal access token named "MyMove Report Danger bot".
      - run:
          name: Run DangerJS checks
          command: yarn danger ci --failOnErrors
      # `v1-pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}` is used to cache pre-commit plugins.
      - save_cache:
          key: v1-pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit
      - store_artifacts:
          path: ~/transcom/mymove/tmp/test-results
          destination: test-results
      - announce_failure

  # `acceptance_tests` runs acceptance tests for the webserver against the local, exp, and staging environments.
  acceptance_tests:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v4-{{ checksum "go.sum" }}-{{ checksum ".go-version" }}
      - run:
          name: Run Local acceptance tests
          command: |
            echo 'export MOVE_MIL_DOD_CA_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.key)' >> $BASH_ENV
            echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
            source $BASH_ENV
            make acceptance_test
          environment:
            CHAMBER_RETRIES: 20
            DB_RETRY_INTERVAL: 5s
            DEVLOCAL_CA: /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem
            DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.6_DoD.der.p7b
            ENV: test
            ENVIRONMENT: test
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/app/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/app/schema;file:///home/circleci/transcom/mymove/migrations/app/secure'
            NO_TLS_ENABLED: true
            PWD: /home/circleci/transcom/mymove
      - aws_vars_dp3
      - run:
          name: Run dp3 acceptance tests
          command: make acceptance_test
          environment:
            CHAMBER_RETRIES: 20
            DEVLOCAL_CA: /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem
            DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.6_DoD.der.p7b
            ENV: *dp3-env
            ENVIRONMENT: *dp3-env
            NO_TLS_ENABLED: true
            PWD: /home/circleci/transcom/mymove
            TEST_ACC_ENV: *dp3-env
      - aws_vars_stg
      - run:
          name: Run Staging acceptance tests
          command: make acceptance_test
          environment:
            CHAMBER_RETRIES: 20
            DEVLOCAL_CA: /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem
            DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.6_DoD.der.p7b
            ENV: stg
            ENVIRONMENT: stg
            NO_TLS_ENABLED: true
            PWD: /home/circleci/transcom/mymove
            TEST_ACC_ENV: stg
      - run: echo "Prod acceptance tests are prohibited in CircleCI"
      - announce_failure

  # separate the integration tests by site so that if there is a flaky
  # test, we only have to re-run part of the integration tests
  integration_tests_admin:
    # parallelism requires enough files to divide by the # of parallel threads. So you need at least 4 files here
    parallelism: 4
    executor: milmove_integration_tester
    steps:
      - attach_workspace:
          at: .
      - e2e_tests_cypress:
          spec_glob: cypress/integration/admin/**/*.js
      - store_artifacts:
          path: cypress/reports
          destination: reports
      - store_artifacts:
          path: cypress/videos
          destination: videos
      - store_artifacts:
          path: cypress/screenshots
          destination: screenshots
      - store_test_results:
          path: cypress/results
      - announce_failure

  integration_tests_office:
    # parallelism requires enough files to divide by the # of parallel threads. So you need at least 12 files here
    parallelism: 12
    executor: milmove_integration_tester
    steps:
      - attach_workspace:
          at: .
      - e2e_tests_cypress:
          spec_glob: cypress/integration/office/**/*.js
      - store_artifacts:
          path: cypress/reports
          destination: reports
      - store_artifacts:
          path: cypress/videos
          destination: videos
      - store_artifacts:
          path: cypress/screenshots
          destination: screenshots
      - store_test_results:
          path: cypress/results
      - announce_failure

  integration_tests_prime:
    executor: milmove_integration_tester
    steps:
      - attach_workspace:
          at: .
      - e2e_tests_cypress:
          spec_glob: cypress/integration/api/**/*.js
      - store_artifacts:
          path: cypress/reports
          destination: reports
      - store_artifacts:
          path: cypress/videos
          destination: videos
      - store_artifacts:
          path: cypress/screenshots
          destination: screenshots
      - store_test_results:
          path: cypress/results
      - announce_failure

  # reads integration tests in mymove dir, should eventually be removed when tests are in milmove dir
  integration_tests_mymove:
    # parallelism requires enough files to divide by the # of parallel threads. So you need at least 8 files here
    parallelism: 8
    executor: milmove_integration_tester
    steps:
      - attach_workspace:
          at: .
      - e2e_tests_cypress:
          spec_glob: cypress/integration/mymove/**/*.js
      - store_artifacts:
          path: cypress/reports
          destination: reports
      - store_artifacts:
          path: cypress/videos
          destination: videos
      - store_artifacts:
          path: cypress/screenshots
          destination: screenshots
      - store_test_results:
          path: cypress/results
      - announce_failure

  integration_tests_milmove:
    # parallelism requires enough files to divide by the # of parallel threads. So you need at least 6 files here
    parallelism: 6
    executor: milmove_integration_tester
    steps:
      - attach_workspace:
          at: .
      - e2e_tests_cypress:
          spec_glob: cypress/integration/milmove/**/*.js
      - store_artifacts:
          path: cypress/reports
          destination: reports
      - store_artifacts:
          path: cypress/videos
          destination: videos
      - store_artifacts:
          path: cypress/screenshots
          destination: screenshots
      - store_test_results:
          path: cypress/results
      - announce_failure

  # `integration_tests_devseed` runs the devseed data generation
  integration_tests_devseed:
    executor: mymove_tester
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v4-{{ checksum "go.sum" }}-{{ checksum ".go-version" }}
      - run: echo 'export PATH=${PATH}:${GOPATH}/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - run:
          name: db_dev_fresh
          command: |
            echo 'export MOVE_MIL_DOD_CA_CERT=$(cat config/tls/devlocal-ca.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_CERT=$(cat config/tls/devlocal-https.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_KEY=$(cat config/tls/devlocal-https.key)' >> $BASH_ENV
            source $BASH_ENV
            make db_dev_fresh
          environment:
            APPLICATION: app
            DB_PASSWORD: mysecretpassword
            DB_USER_LOW_PRIV: crud
            DB_PASSWORD_LOW_PRIV: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT: 5432
            DB_NAME: dev_db
            DB_NAME_DEV: dev_db
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/app/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/app/schema;file:///home/circleci/transcom/mymove/migrations/app/secure'
            EIA_KEY: db2522a43820268a41a802a16ae9fd26 # dummy key generated with openssl rand -hex 16
            ENVIRONMENT: development
            DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.6_DoD.der.p7b
      - announce_failure

  # `integration_tests` is just a fake step so that we don't have to
  # keep track of the manual splitting of the integration_tests when
  # specifying dependencies
  integration_tests:
    executor: mymove_pusher
    steps:
      - run: echo "integration_tests done"

  # `integration_tests_mtls` runs integration tests using
  # prime-api-client.
  #
  integration_tests_mtls:
    executor: mymove_compiler
    steps:
      - attach_workspace:
          at: .
      - e2e_tests_mtls
      - announce_failure

  # `server_test` runs the server side Go tests
  server_test:
    executor: mymove_tester
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v4-{{ checksum "go.sum" }}-{{ checksum ".go-version" }}
      - run: echo 'export PATH=${PATH}:${GOPATH}/bin:~/transcom/mymove/bin' >> $BASH_ENV
      - restore_cache:
          keys:
            - server-tests-coverage
      - run:
          name: Save Baseline Test Coverage
          command: |
            [ -r ~/transcom/mymove/tmp/test-results/gotest/app/go-coverage.txt ] && cp ~/transcom/mymove/tmp/test-results/gotest/app/go-coverage.txt /tmp/coverage_baseline.txt || echo "Skipping saving baseline"
            rm -rf ~/transcom/mymove/tmp/test-results
      # make -j 2 tells make to run 2 simultaneous builds
      - run: make -j 2 bin/milmove bin/go-junit-report
      - server_tests_step:
          application: app
      - run:
          name: Ensure we save both the coverage baseline & the go-coverage text files before checking test coverage status
          command: |
            if [ -r /tmp/coverage_baseline.txt ]; then
              cp -v /tmp/coverage_baseline.txt ~/transcom/mymove/tmp/test-results/previous-coverage-baseline.txt
            fi
            if [ -r ~/transcom/mymove/tmp/test-results/gotest/app/go-coverage.txt ]; then
              cp -v ~/transcom/mymove/tmp/test-results/gotest/app/go-coverage.txt ~/transcom/mymove/tmp/test-results/current-coverage.txt
            fi
      - run:
          name: Ensure Test Coverage Increasing
          command: |
            ./scripts/ensure-go-test-coverage /tmp/coverage_baseline.txt tmp/test-results/gotest/app/go-coverage.txt
      - store_artifacts:
          path: ~/transcom/mymove/tmp/test-results
          destination: test-results
      - store_test_results:
          path: ~/transcom/mymove/tmp/test-results
      # only save the cache on master builds because we only want to
      # change the baseline of test results on master builds
      - when:
          condition:
            equal: [master, << pipeline.git.branch >>]
          steps:
            save_cache:
              key: server-tests-coverage
              paths:
                - ~/transcom/mymove/tmp/test-results
      - announce_failure

  # `client_test` runs the client side Javascript tests
  client_test:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - client-tests-coverage
      - run:
          name: Save Baseline Test Coverage
          command: |
            [ -r ~/transcom/mymove/coverage/clover.xml ] && cp ~/transcom/mymove/coverage/clover.xml /tmp/clover_baseline.xml || echo "Skipping saving baseline"
            rm -rf ~/transcom/mymove/coverage
      - run:
          name: Install Frozen YARN dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - run: make client_test_coverage
      - run:
          name: Ensure Test Coverage Increasing
          command: |
            ./scripts/ensure-js-test-coverage /tmp/clover_baseline.xml coverage/clover.xml
      - store_artifacts:
          path: ~/transcom/mymove/coverage
          destination: coverage
      - store_test_results:
          path: ~/transcom/mymove
      # only save the cache on master builds because we only want to
      # change the baseline of test results on master builds
      - when:
          condition:
            equal: [master, << pipeline.git.branch >>]
          steps:
            save_cache:
              key: client-tests-coverage
              paths:
                - ~/transcom/mymove/coverage
      - announce_failure

  # `webhook_client_test` runs the webhook client Go tests
  webhook_client_test:
    executor: mymove_tester
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v4-{{ checksum "go.sum" }}-{{ checksum ".go-version" }}
      - run: make db_test_reset
      - run:
          command: make db_test_migrate
          environment:
            APPLICATION: app
            DB_HOST: localhost
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            DB_PASSWORD: mysecretpassword
            DB_PORT: 5432
            DB_PORT_TEST: 5432
            DB_USER: postgres
            MIGRATION_MANIFEST: '/home/circleci/transcom/mymove/migrations/app/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/transcom/mymove/migrations/app/schema;file:///home/circleci/transcom/mymove/migrations/app/secure'
      - run:
          command: make db_e2e_up
          environment:
            APPLICATION: app
            DB_HOST: localhost
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            DB_PASSWORD: mysecretpassword
            DB_PORT: 5432
            DB_PORT_TEST: 5432
            DB_USER: postgres
      - run:
          command: make webhook_client_test_standalone
          environment:
            DB_HOST: localhost
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            DB_PASSWORD: mysecretpassword
            DB_PASSWORD_LOW_PRIV: mysecretpassword
            DB_PORT: 5432
            DB_PORT_TEST: 5432
            DB_USER: postgres
            DB_USER_LOW_PRIV: crud
      - announce_failure

  # Compile the server side of the app once and persist the relevant
  # build artifacts to the workspace.
  # This way we don't have to re-run the build and since all necessary
  # items are in the workspace, we don't even have to checkout the
  # code again
  compile_app_server:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v4-{{ checksum "go.sum" }}-{{ checksum ".go-version" }}
      # make -j 4 tells make to run 4 simultaneous builds
      - run: make -j 4 server_build build_tools
      - persist_to_workspace:
          root: .
          paths:
            # Makefile for integration tests
            - Makefile
            # all the Dockerfiles
            - Dockerfile
            - Dockerfile.dp3
            - Dockerfile.e2e
            - Dockerfile.migrations
            - Dockerfile.tasks
            - Dockerfile.tasks_dp3
            - Dockerfile.tools
            - Dockerfile.webhook_client
            - Dockerfile.webhook_client_dp3
            - docker-compose.e2e.yml
            - docker-compose.mtls.yml
            - bin
            - config
            - migrations
            # save scripts for deploy
            - scripts
            - swagger
            - pkg/testdatagen/testdata
      - announce_failure

  # Compile the client side of the app once and persist the relevant
  # build artifacts to the workspace.
  # This way we don't have to re-run the build and since all necessary
  # items are in the workspace, we don't even have to checkout the
  # code again
  #
  # the babel/terser cache below takes the compile step from ~6-7m to ~4-5m !!
  compile_app_client:
    # ahobson tested this and saw 75% of the 16GB being used
    # (according to the resources tab on CircleCI)
    # if it starts running out of memory, we should move away from
    # using a ramdisk
    #
    # This entire step takes ~6 minutes with xlarge ramdisk
    # This entire step takes ~7 minutes without xlarge ramdisk
    executor: mymove_ramdisk_compiler_xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
      - run:
          name: Install Frozen YARN dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn

      # babel and terser both have a cache
      #
      # see https://webpack.js.org/loaders/babel-loader/ and look for
      # cacheDirectory
      #
      # see https://www.npmjs.com/package/terser-webpack-plugin/v/1.4.4#cache
      #
      # use the yarn.lock as a key so that PRs with the same
      # dependencies will use the same cache
      - restore_cache:
          keys:
            - v2-node-modules-cache-{{ checksum "yarn.lock" }}
      - run: make client_build
      # only save the cache on master builds so that PRs don't pollute
      # the cache
      - when:
          condition:
            equal: [master, << pipeline.git.branch >>]
          steps:
            save_cache:
              key: v2-node-modules-cache-{{ checksum "yarn.lock" }}
              paths:
                - ./node_modules/.cache
      - persist_to_workspace:
          root: .
          paths:
            - build
            - cypress
      - announce_failure

  # `build_app` builds the application container
  build_app:
    executor: mymove_builder
    steps:
      - build_image:
          dockerfile: Dockerfile
          image_name: app
          tag: web-dev
          working_dir: /mnt/ramdisk
      - announce_failure

  # `build_dp3_app` builds the application container, replacing DoD chain/certs with non-ato version
  build_dp3_app:
    executor: mymove_builder
    steps:
      - build_image:
          dockerfile: Dockerfile.dp3
          image_name: app
          tag: web-dev
          working_dir: /mnt/ramdisk
      - announce_failure

  # `push_app_gov_dev` pushes the app container to the gov_dev container repository
  push_app_gov_dev:
    executor: mymove_pusher
    steps:
      - aws_vars_transcom_gov_dev
      - push_image:
          ecr_env: gov_dev
          image_name: app
          tag: web-dev
          repo: app
      - announce_failure

  # `push_app_dp3` pushes the app container to the milmove-<dp3-env> container repository
  push_app_dp3:
    executor: mymove_pusher
    steps:
      - aws_vars_dp3
      - push_image:
          ecr_env: *dp3-env
          image_name: app
          tag: web-dev
          repo: app
      - announce_failure

  # `push_app_stg` pushes the app container to the milmove-stg container repository
  push_app_stg:
    executor: mymove_pusher
    steps:
      - aws_vars_stg
      - push_image:
          ecr_env: stg
          image_name: app
          tag: web-dev
          repo: app
      - announce_failure

  # `push_app_prd` pushes the app container to the milmove-prd container repository
  push_app_prd:
    executor: mymove_pusher
    steps:
      - aws_vars_prd
      - push_image:
          ecr_env: prd
          image_name: app
          tag: web-dev
          repo: app
      - announce_failure

  # `build_storybook` builds static storybook assets for deploy
  build_storybook:
    executor: mymove_compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-cache-yarn-v3-{{ checksum "yarn.lock" }}
      - run:
          name: Install Frozen YARN dependencies
          command: yarn install --frozen-lockfile
      - restore_cache:
          keys:
            - v1-node-modules-cache
      - run:
          name: Build Storybook
          command: yarn build-storybook
      - persist_to_workspace:
          root: .
          paths:
            - storybook-static
      - store_artifacts:
          path: ~/transcom/mymove/storybook-static
          destination: storybook
      - announce_failure

  # `build_migrations` builds the migrations container
  build_migrations:
    executor: mymove_builder
    steps:
      - build_image:
          dockerfile: Dockerfile.migrations
          image_name: app-migrations
          tag: dev
          working_dir: /mnt/ramdisk
      - announce_failure

  # `push_migrations_gov_dev` pushes the migrations container to the gov_dev container repository
  push_migrations_gov_dev:
    executor: mymove_pusher
    steps:
      - aws_vars_transcom_gov_dev
      - push_image:
          ecr_env: gov_dev
          image_name: app-migrations
          tag: dev
          repo: app-migrations
      - announce_failure

  # `push_migrations_dp3` pushes the migrations container to the milmove-dp3 container repository
  push_migrations_dp3:
    executor: mymove_pusher
    steps:
      - aws_vars_dp3
      - push_image:
          ecr_env: *dp3-env
          image_name: app-migrations
          tag: dev
          repo: app-migrations
      - announce_failure

  # `push_migrations_stg` pushes the migrations container to the milmove-stg container repository
  push_migrations_stg:
    executor: mymove_pusher
    steps:
      - aws_vars_stg
      - push_image:
          ecr_env: stg
          image_name: app-migrations
          tag: dev
          repo: app-migrations
      - announce_failure

  # `push_migrations_prd` pushes the migrations container to the milmove-prd container repository
  push_migrations_prd:
    executor: mymove_pusher
    steps:
      - aws_vars_prd
      - push_image:
          ecr_env: prd
          image_name: app-migrations
          tag: dev
          repo: app-migrations
      - announce_failure

  # `build_tasks` builds the tasks containers
  build_tasks:
    executor: mymove_builder
    steps:
      - build_image:
          dockerfile: Dockerfile.tasks
          image_name: tasks
          tag: dev
          working_dir: /mnt/ramdisk
      - announce_failure

  #`build_dp3_tasks` builds the task container, replacing DoD chain/certs with non-ato version
  build_dp3_tasks:
    executor: mymove_builder
    steps:
      - build_image:
          dockerfile: Dockerfile.tasks_dp3
          image_name: tasks
          tag: dev
          working_dir: /mnt/ramdisk
      - announce_failure

  # `push_tasks_gov_dev` pushes the tasks containers to the gov_dev container repository
  push_tasks_gov_dev:
    executor: mymove_pusher
    steps:
      - aws_vars_transcom_gov_dev
      - push_image:
          ecr_env: gov_dev
          image_name: tasks
          tag: dev
          repo: app-tasks
      - announce_failure

  # `push_tasks_dp3` pushes the tasks containers to the milmove-dp3 container repository
  push_tasks_dp3:
    executor: mymove_pusher
    steps:
      - aws_vars_dp3
      - push_image:
          ecr_env: *dp3-env
          image_name: tasks
          tag: dev
          repo: app-tasks
      - announce_failure

  # `push_tasks_stg` pushes the tasks containers to the milmove-stg container repository
  push_tasks_stg:
    executor: mymove_pusher
    steps:
      - aws_vars_stg
      - push_image:
          ecr_env: stg
          image_name: tasks
          tag: dev
          repo: app-tasks
      - announce_failure

  # `push_tasks_prd` pushes the tasks containers to the milmove-prd container repository
  push_tasks_prd:
    executor: mymove_pusher
    steps:
      - aws_vars_prd
      - push_image:
          ecr_env: prd
          image_name: tasks
          tag: dev
          repo: app-tasks
      - announce_failure

  # `build_webhook_client` builds the webhook client container
  build_webhook_client:
    executor: mymove_builder
    steps:
      - build_image:
          dockerfile: Dockerfile.webhook_client
          image_name: webhook_client
          tag: dev
          working_dir: /mnt/ramdisk
      - announce_failure

  # `build_dp3_webhook_client`builds the webhookd container, replacing DoD chain/certs with non-ato version
  build_dp3_webhook_client:
    executor: mymove_builder
    steps:
      - build_image:
          dockerfile: Dockerfile.webhook_client_dp3
          image_name: webhook_client
          tag: dev
          working_dir: /mnt/ramdisk
      - announce_failure

  # `push_webhook_client_dp3` pushes the webhook client container to the dp3 container repository
  push_webhook_client_dp3:
    executor: mymove_pusher
    steps:
      - aws_vars_dp3
      - push_image:
          ecr_env: *dp3-env
          image_name: webhook_client
          tag: dev
          repo: app-webhook-client
      - announce_failure

  # `push_webhook_client_stg` pushes the webhook client container to the stg container repository
  push_webhook_client_stg:
    executor: mymove_pusher
    steps:
      - aws_vars_stg
      - push_image:
          ecr_env: stg
          image_name: webhook_client
          tag: dev
          repo: app-webhook-client
      - announce_failure

  # All of the deploy tasks need to checkout the code so they can run the `scripts/do-exclusively` script

  # `deploy_dp3_migrations` deploys migrations to the dp3 environment
  deploy_dp3_migrations:
    executor: mymove_pusher
    environment:
      - APP_ENVIRONMENT: *dp3-env
    steps:
      - checkout
      - aws_vars_dp3
      - deploy_migrations_steps:
          ecr_env: *dp3-env

  # `deploy_dp3_tasks` deploys scheduled tasks to the dp3 environment
  deploy_dp3_tasks:
    executor: mymove_pusher
    environment:
      - APP_ENVIRONMENT: *dp3-env
    steps:
      - checkout
      - aws_vars_dp3
      - deploy_dp3_tasks_steps:
          ecr_env: *dp3-env

  # `deploy_dp3_app` updates the server-TLS app service in the dp3 environment
  deploy_dp3_app:
    executor: mymove_pusher
    parameters:
      dp3-env:
        type: string
        default: *dp3-env

    environment:
      - APP_ENVIRONMENT: *dp3-env
      - OPEN_TELEMETRY_SIDECAR: 'true'
    steps:
      - checkout
      - aws_vars_dp3
      - deploy_app_steps:
          compare_host: '' # leave blank since we want dp3 to be able to roll back
          health_check_hosts: my.<< parameters.dp3-env >>.dp3.us,office.<< parameters.dp3-env >>.dp3.us,admin.<< parameters.dp3-env >>.dp3.us
          ecr_env: *dp3-env

  # `deploy_dp3_app_client_tls` updates the mutual-TLS service in the dp3 environment
  deploy_dp3_app_client_tls:
    executor: mymove_pusher
    parameters:
      dp3-env:
        type: string
        default: *dp3-env
    environment:
      - APP_ENVIRONMENT: *dp3-env
      - OPEN_TELEMETRY_SIDECAR: 'true'
    steps:
      - checkout
      - aws_vars_dp3
      - tls_vars_dp3
      - deploy_app_client_tls_steps:
          compare_host: '' # leave blank since we want dp3 to be able to roll back
          health_check_hosts: api.<< parameters.dp3-env >>.dp3.us
          ecr_env: *dp3-env

  # `deploy_dp3_webhook_client` deploys the webhook client to dp3
  deploy_dp3_webhook_client:
    executor: mymove_pusher
    environment:
      APP_ENVIRONMENT: *dp3-env
      OPEN_TELEMETRY_SIDECAR: 'true'
    steps:
      - checkout
      - aws_vars_dp3
      - deploy_webhook_client_steps:
          ecr_env: *dp3-env

  check_circle_against_stg_sha:
    executor: mymove_pusher
    steps:
      - checkout
      - run:
          name: Halt workflow to prevent old master deploying to staging
          command: scripts/compare-deployed-commit my.stg.move.mil $CIRCLE_SHA1

  # `deploy_stg_migrations` deploys migrations to the stg environment
  deploy_stg_migrations:
    executor: mymove_pusher
    environment:
      - APP_ENVIRONMENT: 'stg'
    steps:
      - checkout
      - aws_vars_stg
      - deploy_migrations_steps:
          ecr_env: stg

  # `deploy_stg_tasks` deploys scheduled tasks to the stg environment
  deploy_stg_tasks:
    executor: mymove_pusher
    environment:
      - APP_ENVIRONMENT: 'stg'
    steps:
      - checkout
      - aws_vars_stg
      - deploy_tasks_steps:
          ecr_env: stg

  # `deploy_stg_app` updates the server-TLS app service in stg environment
  deploy_stg_app:
    executor: mymove_pusher
    environment:
      - APP_ENVIRONMENT: 'stg'
    steps:
      - checkout
      - aws_vars_stg
      - deploy_app_steps:
          compare_host: my.stg.move.mil
          health_check_hosts: my.stg.move.mil,office.stg.move.mil,admin.stg.move.mil
          ecr_env: stg

  # `deploy_stg_app_client_tls` updates the mutual-TLS service in the stg environment
  deploy_stg_app_client_tls:
    executor: mymove_pusher
    environment:
      - APP_ENVIRONMENT: 'stg'
    steps:
      - checkout
      - aws_vars_stg
      - tls_vars_stg
      - deploy_app_client_tls_steps:
          compare_host: gex.stg.move.mil
          health_check_hosts: gex.stg.move.mil
          ecr_env: stg

  # `deploy_stg_webhook_client` deploys the webhook client to stg
  deploy_stg_webhook_client:
    executor: mymove_pusher
    environment:
      APP_ENVIRONMENT: 'stg'
    steps:
      - checkout
      - aws_vars_stg
      - deploy_webhook_client_steps:
          ecr_env: stg

  deploy_storybook_dp3:
    executor: mymove_pusher
    steps:
      - checkout
      - aws_vars_transcom_com_dev
      - deploy_app_storybook:
          s3_bucket: storybook.dp3.us

  # `deploy_prd_migrations` deploys migrations to the milmove-prd environment
  deploy_prd_migrations:
    executor: mymove_pusher
    environment:
      - APP_ENVIRONMENT: 'prd'
    steps:
      - checkout
      - aws_vars_prd
      - deploy_migrations_steps:
          ecr_env: prd

  # `deploy_prd_tasks` deploys ECS tasks in the milmove-prd environment
  deploy_prd_tasks:
    executor: mymove_pusher
    environment:
      - APP_ENVIRONMENT: 'prd'
    steps:
      - checkout
      - aws_vars_prd
      - deploy_tasks_steps:
          ecr_env: prd

  # `deploy_prd_app` updates the server-TLS app service in the milmove-prd environment
  deploy_prd_app:
    executor: mymove_pusher
    environment:
      - APP_ENVIRONMENT: 'prd'
    steps:
      - checkout
      - aws_vars_prd
      - deploy_app_steps:
          compare_host: my.move.mil
          health_check_hosts: my.move.mil,office.move.mil,admin.move.mil
          ecr_env: prd

  # `deploy_prd_app_client_tls` updates the mutual-TLS service in the milmove-prd environment
  deploy_prd_app_client_tls:
    executor: mymove_pusher
    environment:
      - APP_ENVIRONMENT: 'prd'
    steps:
      - checkout
      - aws_vars_prd
      - tls_vars_prd
      - deploy_app_client_tls_steps:
          compare_host: gex.move.mil
          health_check_hosts: gex.move.mil
          ecr_env: prd

workflows:
  version: 2

  app:
    jobs:
      - pre_deps_golang

      - pre_deps_yarn

      - check_generated_code:
          requires:
            - pre_deps_golang
          filters:
            branches:
              ignore: [*integration-mtls-ignore-branch, *integration-ignore-branch]

      - anti_virus:
          filters:
            branches:
              only: master

      - pre_test:
          requires:
            - pre_deps_golang
            - pre_deps_yarn

      - acceptance_tests:
          requires:
            - pre_deps_golang
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              only: *acceptance-branch

      - integration_tests_admin:
          requires:
            - compile_app_server
            - compile_app_client
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-ignore-branch

      - integration_tests_office:
          requires:
            - compile_app_server
            - compile_app_client
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-ignore-branch

      - integration_tests_prime:
          requires:
            - compile_app_server
            - compile_app_client
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-ignore-branch

      - integration_tests_mymove:
          requires:
            - compile_app_server
            - compile_app_client
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-ignore-branch

      - integration_tests_milmove:
          requires:
            - compile_app_server
            - compile_app_client
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-ignore-branch

      - integration_tests_devseed:
          requires:
            - pre_deps_golang
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-ignore-branch

      - integration_tests:
          requires:
            - integration_tests_admin
            - integration_tests_office
            - integration_tests_prime
            - integration_tests_mymove
            - integration_tests_milmove
            - integration_tests_devseed
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-ignore-branch

      - integration_tests_mtls:
          # mtls integration tests use the same server image as the
          # e2e cypress tests and so needs the client build
          requires:
            - compile_app_server
            - compile_app_client
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *integration-mtls-ignore-branch

      - client_test:
          requires:
            - pre_deps_yarn
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *client-ignore-branch

      - server_test:
          requires:
            - pre_deps_golang
          # See comments at the top of this file for configuring/using
          # this branch config
          filters:
            branches:
              ignore: *server-ignore-branch

      - compile_app_server:
          requires:
            - anti_virus
            - pre_deps_golang

      - compile_app_client:
          requires:
            - anti_virus
            - pre_deps_yarn

      - build_app:
          requires:
            - compile_app_server
            - compile_app_client
          filters:
            branches:
              ignore: *dp3-branch

      - push_app_gov_dev:
          requires:
            - build_app

      - build_migrations:
          requires:
            - compile_app_server
            - compile_app_client

      - push_migrations_gov_dev:
          requires:
            - build_migrations
          filters:
            branches:
              ignore: [*integration-mtls-ignore-branch, *integration-ignore-branch]

      - build_tasks:
          requires:
            - compile_app_server
            - compile_app_client
          filters:
            branches:
              ignore: *dp3-branch

      - build_webhook_client:
          requires:
            - compile_app_server
            - compile_app_client
          filters:
            branches:
              ignore: *dp3-branch

      - push_tasks_gov_dev:
          requires:
            - build_tasks

      - build_dp3_app:
          requires:
            - compile_app_server
            - compile_app_client
          filters:
            branches:
              only: *dp3-branch

      - build_dp3_tasks:
          requires:
            - compile_app_server
            - compile_app_client
          filters:
            branches:
              only: *dp3-branch

      - build_dp3_webhook_client:
          requires:
            - compile_app_server
            - compile_app_client
          filters:
            branches:
              only: *dp3-branch

      - push_app_dp3:
          requires:
            - build_dp3_app
          filters:
            branches:
              only: *dp3-branch

      - push_migrations_dp3:
          requires:
            - build_migrations
          filters:
            branches:
              only: *dp3-branch

      - push_tasks_dp3:
          requires:
            - build_dp3_tasks
          filters:
            branches:
              only: *dp3-branch

      - push_webhook_client_dp3:
          requires:
            - build_dp3_webhook_client
          filters:
            branches:
              only: *dp3-branch

      - deploy_dp3_migrations:
          requires:
            - pre_deps_golang
            - pre_test
            - client_test
            - server_test
            - push_app_dp3
            - compile_app_server
            - compile_app_client
            - push_tasks_dp3
            - push_migrations_dp3
            - push_webhook_client_dp3
          filters:
            branches:
              only: *dp3-branch

      - deploy_dp3_tasks:
          requires:
            - deploy_dp3_migrations
          filters:
            branches:
              only: *dp3-branch

      - deploy_dp3_app:
          requires:
            - deploy_dp3_migrations
          filters:
            branches:
              only: *dp3-branch

      - deploy_dp3_app_client_tls:
          requires:
            - deploy_dp3_migrations
          filters:
            branches:
              only: *dp3-branch

      - deploy_dp3_webhook_client:
          requires:
            - deploy_dp3_migrations
          filters:
            branches:
              only: *dp3-branch

      - push_app_stg:
          requires:
            - build_app
          filters:
            branches:
              only: master

      - push_migrations_stg:
          requires:
            - build_migrations
          filters:
            branches:
              only: master

      - push_tasks_stg:
          requires:
            - build_tasks
          filters:
            branches:
              only: master

      - push_webhook_client_stg:
          requires:
            - build_webhook_client
          filters:
            branches:
              only: master

      - check_circle_against_stg_sha:
          requires:
            - pre_deps_golang
            - pre_test
            - client_test
            - server_test
            - push_app_stg
            - compile_app_server
            - compile_app_client
            - push_migrations_stg
            - push_tasks_stg
            - push_webhook_client_stg
            - integration_tests
            - integration_tests_mtls
          filters:
            branches:
              only: master

      - deploy_stg_migrations:
          requires:
            - check_circle_against_stg_sha
          filters:
            branches:
              only: master

      - deploy_stg_tasks:
          requires:
            - deploy_stg_migrations
          filters:
            branches:
              only: master

      - deploy_stg_app:
          requires:
            - deploy_stg_migrations
          filters:
            branches:
              only: master

      - deploy_stg_app_client_tls:
          requires:
            - deploy_stg_migrations
          filters:
            branches:
              only: master

      - deploy_stg_webhook_client:
          requires:
            - deploy_stg_migrations
          filters:
            branches:
              only: master

      - approve_prd_deploy:
          type: approval
          requires:
            - deploy_stg_tasks
            - deploy_stg_app
            - deploy_stg_app_client_tls
            - deploy_stg_webhook_client

      - deploy_storybook_dp3:
          requires:
            - build_storybook
          filters:
            branches:
              only: master

      - build_storybook:
          requires:
            - anti_virus
            - pre_deps_yarn

      - push_app_prd:
          requires:
            - approve_prd_deploy
          filters:
            branches:
              only: master

      - push_migrations_prd:
          requires:
            - approve_prd_deploy
          filters:
            branches:
              only: master

      - push_tasks_prd:
          requires:
            - approve_prd_deploy
          filters:
            branches:
              only: master

      - deploy_prd_migrations:
          requires:
            - push_migrations_prd
            - push_app_prd
            - push_tasks_prd
          filters:
            branches:
              only: master

      - deploy_prd_tasks:
          requires:
            - deploy_prd_migrations
            - push_tasks_prd
          filters:
            branches:
              only: master

      - deploy_prd_app:
          requires:
            - deploy_prd_migrations
            - push_app_prd
          filters:
            branches:
              only: master

      - deploy_prd_app_client_tls:
          requires:
            - deploy_prd_migrations
            - push_app_prd
          filters:
            branches:
              only: master

experimental:
  notify:
    branches:
      only:
        - master
