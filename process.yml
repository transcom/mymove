version: 2
jobs:
  update_dependencies_js:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - restore_cache:
        keys:
        - v2-cache-yarn-v2-{{ checksum "yarn.lock" }}
    - restore_cache:
        keys:
        - v2-mymove-node-modules-{{ checksum "yarn.lock" }}
    - run:
        command: make client_deps_update
    - run:
        name: Display changes
        command: |
          git --no-pager status
          git --no-pager diff --ignore-all-space --color
    - run:
        name: Push changes
        command: scripts/circleci-push-dependency-updates js
  anti_virus:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        command: make anti_virus
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  acceptance_tests_experimental:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - run:
        name: Build Chamber
        command: make bin/chamber
    - run:
        name: Run acceptance tests
        command: make webserver_test
        environment:
          ENV: test
          ENVIRONMENT: experimental
          CHAMBER_RETRIES: 20
          PWD: /home/circleci/transcom/mymove
          DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.4_DoD.der.p7b
          TEST_ACC_ENV: experimental
          NO_TLS_ENABLED: true
          DB_REGION: us-west-2
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  deploy_prod_app:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    environment:
    - APP_ENVIRONMENT: prod
    steps:
    - checkout
    - run:
        name: Compare against deployed commit
        command: |
          [[ -z "my.move.mil" ]] || scripts/compare-deployed-commit "my.move.mil" $CIRCLE_SHA1
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - attach_workspace:
        at: bin
    - deploy:
        name: Deploy app service
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container
          app config/app.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1}
          $APP_ENVIRONMENT FARGATE
        no_output_timeout: 20m
    - run:
        name: Health Check
        command: bin/health-checker --schemes http,https --hosts my.move.mil,office.move.mil,tsp.move.mil
          --tries 10 --backoff 3 --log-level info --timeout 15m
    - run:
        name: Check deployed commits
        command: scripts/check-deployed-commit "my.move.mil,office.move.mil,tsp.move.mil"
          "$CIRCLE_SHA1"
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  deploy_experimental_app:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    environment:
    - APP_ENVIRONMENT: experimental
    steps:
    - checkout
    - run:
        name: Compare against deployed commit
        command: |
          [[ -z "" ]] || scripts/compare-deployed-commit "" $CIRCLE_SHA1
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - attach_workspace:
        at: bin
    - deploy:
        name: Deploy app service
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container
          app config/app.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1}
          $APP_ENVIRONMENT FARGATE
        no_output_timeout: 20m
    - run:
        name: Health Check
        command: bin/health-checker --schemes http,https --hosts my.experimental.move.mil,office.experimental.move.mil,tsp.experimental.move.mil
          --tries 10 --backoff 3 --log-level info --timeout 15m
    - run:
        name: Check deployed commits
        command: scripts/check-deployed-commit "my.experimental.move.mil,office.experimental.move.mil,tsp.experimental.move.mil"
          "$CIRCLE_SHA1"
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  client_test:
    resource_class: large
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - restore_cache:
        keys:
        - v2-cache-yarn-v2-{{ checksum "yarn.lock" }}
    - restore_cache:
        keys:
        - v2-mymove-node-modules-{{ checksum "yarn.lock" }}
    - run:
        command: make client_test
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  pre_deps_golang:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - run:
        name: Install dependencies
        command: for i in $(seq 1 5); do go get ./... && s=0 && break || s=$? && sleep
          5; done; (exit $s)
        environment:
          GOPROXY: https://gocenter.io
    - save_cache:
        key: go-mod-sources-v2-{{ checksum "go.sum" }}
        paths:
        - /go/pkg/mod
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  check_circle_against_staging_sha:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - run:
        name: Halt workflow to prevent old master deploying to staging
        command: scripts/compare-deployed-commit my.staging.move.mil $CIRCLE_SHA1
  server_test:
    resource_class: large
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    - image: postgres:10.9
      environment:
      - POSTGRES_PASSWORD: mysecretpassword
      - POSTGRES_DB: test_db
      command: -c fsync=off -c full_page_writes=off -c max_connections=200
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - run:
        name: Build Go Junit Report
        command: make bin/go-junit-report
    - run:
        name: Install postgres client
        command: |
          # Debian stretch only supports 9.6 client, so add the Postgresql apt repository for 10.x
          echo "deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main" | sudo tee -a /etc/apt/sources.list.d/pgdg.list
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get -qq update
          sudo apt-get -qq -y install postgresql-client-10
    - run:
        command: echo 'export PATH=${PATH}:~/go/bin:~/transcom/mymove/bin' >> $BASH_ENV
    - run:
        command: make bin/milmove
    - run:
        command: make db_test_reset
    - run:
        command: make db_test_migrate
    - run:
        name: make server_test_standalone
        command: |
          echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
          source $BASH_ENV
          mkdir -p tmp/test-results/gotest
          # setup a trap incase the tests fail, we still want to generate the report
          trap "bin/go-junit-report < tmp/test-results/gotest/go-test.out >  tmp/test-results/gotest/go-test-report.xml" EXIT
          make server_test_standalone | tee tmp/test-results/gotest/go-test.out
        environment:
          DB_PASSWORD: mysecretpassword
          DB_USER: postgres
          DB_HOST: localhost
          DB_PORT_TEST: 5433
          DB_PORT: 5432
          DB_NAME: test_db
          EIA_KEY: db2522a43820268a41a802a16ae9fd26
          ENV: test
          ENVIRONMENT: test
          MIGRATION_PATH: file:///home/circleci/transcom/mymove/local_migrations;file:///home/circleci/transcom/mymove/migrations
          MIGRATION_MANIFEST: /home/circleci/transcom/mymove/migrations_manifest.txt
          SERVE_API_INTERNAL: true
    - store_artifacts:
        path: ~/transcom/mymove/tmp/test-results
        destination: test-results
    - store_test_results:
        path: ~/transcom/mymove/tmp/test-results
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  deploy_staging_app:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    environment:
    - APP_ENVIRONMENT: staging
    steps:
    - checkout
    - run:
        name: Compare against deployed commit
        command: |
          [[ -z "my.staging.move.mil" ]] || scripts/compare-deployed-commit "my.staging.move.mil" $CIRCLE_SHA1
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - attach_workspace:
        at: bin
    - deploy:
        name: Deploy app service
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container
          app config/app.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1}
          $APP_ENVIRONMENT FARGATE
        no_output_timeout: 20m
    - run:
        name: Health Check
        command: bin/health-checker --schemes http,https --hosts my.staging.move.mil,office.staging.move.mil,tsp.staging.move.mil
          --tries 10 --backoff 3 --log-level info --timeout 15m
    - run:
        name: Check deployed commits
        command: scripts/check-deployed-commit "my.staging.move.mil,office.staging.move.mil,tsp.staging.move.mil"
          "$CIRCLE_SHA1"
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  deploy_experimental_app_client_tls:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    environment:
    - APP_ENVIRONMENT: experimental
    steps:
    - checkout
    - run:
        name: Compare against deployed commit
        command: |
          [[ -z "" ]] || scripts/compare-deployed-commit "" $CIRCLE_SHA1 ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA}
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - attach_workspace:
        at: bin
    - deploy:
        name: Deploy app-client-tls service
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container
          app-client-tls config/app-client-tls.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1}
          $APP_ENVIRONMENT FARGATE
        no_output_timeout: 20m
    - run:
        name: Health Check
        command: |
          bin/health-checker --schemes https --hosts gex.experimental.move.mil,dps.experimental.move.mil,orders.experimental.move.mil --key ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} --cert ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT} --ca ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA} --tries 10 --backoff 3 --log-level info --timeout 15m
    - run:
        name: Check deployed commits
        command: scripts/check-deployed-commit "gex.experimental.move.mil,dps.experimental.move.mil,orders.experimental.move.mil"
          "$CIRCLE_SHA1" ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT}
          ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA}
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  deploy_prod_tasks:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    environment:
    - APP_ENVIRONMENT: prod
    steps:
    - checkout
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - attach_workspace:
        at: bin
    - deploy:
        name: Deploy fuel price data task service
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} bin/ecs-deploy-task-container
          --aws-account-id ${AWS_ACCOUNT_ID} --aws-region ${AWS_DEFAULT_REGION} --service
          app --environment ${APP_ENVIRONMENT} --repository-name app-tasks --image-tag
          git-${CIRCLE_SHA1} --command "milmove-tasks save-fuel-price-data" --command-args
          "--db-iam --db-iam-role arn:aws:iam::923914045601:role/ecs-rds-role-app-${APP_ENVIRONMENT}
          --db-region us-west-2"
        environment:
          DB_PORT: 5432
          DB_USER: ecs_user
          DB_NAME: app
          DB_SSL_MODE: verify-full
          DB_SSL_ROOT_CERT: /bin/rds-combined-ca-bundle.pem
        no_output_timeout: 20m
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
    - deploy:
        name: Deploy post move email survey task service
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} bin/ecs-deploy-task-container
          --aws-account-id ${AWS_ACCOUNT_ID} --aws-region ${AWS_DEFAULT_REGION} --service
          app --environment ${APP_ENVIRONMENT} --repository-name app-tasks --image-tag
          git-${CIRCLE_SHA1} --command "milmove-tasks send-post-move-survey" --command-args
          "--db-iam --db-iam-role arn:aws:iam::923914045601:role/ecs-rds-role-app-${APP_ENVIRONMENT}
          --db-region us-west-2 --email-backend=ses --offset-days 15"
        environment:
          DB_PORT: 5432
          DB_USER: ecs_user
          DB_NAME: app
          DB_SSL_MODE: verify-full
          DB_SSL_ROOT_CERT: /bin/rds-combined-ca-bundle.pem
        no_output_timeout: 20m
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  build_tasks:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - run:
        command: make bin/chamber
    - run:
        command: make bin/rds-combined-ca-bundle.pem
    - run:
        command: make tasks_build
    - run:
        name: Build, tag, and push docker image tasks:dev from Dockerfile Dockerfile.tasks
        command: |
          docker build -f Dockerfile.tasks -t tasks:dev .
          bash -c "$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)"
          docker tag tasks:dev ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks:git-${CIRCLE_SHA1}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks:git-${CIRCLE_SHA1}
          shopt -s extglob
          docker tag tasks:dev ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks:git-branch-${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-tasks:git-branch-${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  deploy_prod_migrations:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    environment:
    - APP_ENVIRONMENT: prod
    steps:
    - checkout
    - attach_workspace:
        at: bin
    - run:
        name: Snapshot database
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/rds-snapshot-app-db
          $APP_ENVIRONMENT
    - run:
        name: Run migrations
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-run-app-migrations-container
          config/app-migrations.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:git-${CIRCLE_SHA1}
          $APP_ENVIRONMENT
        no_output_timeout: 60m
        environment:
          CHAMBER_RETRIES: 20
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  deploy_staging_app_client_tls:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    environment:
    - APP_ENVIRONMENT: staging
    steps:
    - checkout
    - run:
        name: Compare against deployed commit
        command: |
          [[ -z "gex.staging.move.mil" ]] || scripts/compare-deployed-commit "gex.staging.move.mil" $CIRCLE_SHA1 ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA}
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - attach_workspace:
        at: bin
    - deploy:
        name: Deploy app-client-tls service
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container
          app-client-tls config/app-client-tls.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1}
          $APP_ENVIRONMENT FARGATE
        no_output_timeout: 20m
    - run:
        name: Health Check
        command: |
          bin/health-checker --schemes https --hosts gex.staging.move.mil,dps.staging.move.mil,orders.staging.move.mil --key ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} --cert ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT} --ca ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA} --tries 10 --backoff 3 --log-level info --timeout 15m
    - run:
        name: Check deployed commits
        command: scripts/check-deployed-commit "gex.staging.move.mil,dps.staging.move.mil,orders.staging.move.mil"
          "$CIRCLE_SHA1" ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT}
          ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA}
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  build_migrations:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        command: make bin/chamber
    - run:
        command: make bin/rds-combined-ca-bundle.pem
    - run:
        command: make server_build
    - run:
        name: Build, tag, and push docker image ppp-migrations:dev from Dockerfile
          Dockerfile.migrations
        command: |
          docker build -f Dockerfile.migrations -t ppp-migrations:dev .
          bash -c "$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)"
          docker tag ppp-migrations:dev ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:git-${CIRCLE_SHA1}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:git-${CIRCLE_SHA1}
          shopt -s extglob
          docker tag ppp-migrations:dev ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:git-branch-${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:git-branch-${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  integration_tests:
    resource_class: medium+
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    parallelism: 10
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - restore_cache:
        keys:
        - v2-cache-yarn-v2-{{ checksum "yarn.lock" }}
    - restore_cache:
        keys:
        - v2-mymove-node-modules-{{ checksum "yarn.lock" }}
    - run:
        name: make e2e_test_docker
        command: |
          echo 'export MOVE_MIL_DOD_CA_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem)' >> $BASH_ENV
          echo 'export MOVE_MIL_DOD_TLS_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.pem)' >> $BASH_ENV
          echo 'export MOVE_MIL_DOD_TLS_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.key)' >> $BASH_ENV
          echo 'export CLIENT_AUTH_SECRET_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-client_auth_secret.key)' >> $BASH_ENV
          echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
          echo 'export LOGIN_GOV_HOSTNAME=$E2E_LOGIN_GOV_HOSTNAME' >> $BASH_ENV
          echo 'export HERE_MAPS_APP_ID=$E2E_HERE_MAPS_APP_ID' >> $BASH_ENV
          echo 'export HERE_MAPS_APP_CODE=$E2E_HERE_MAPS_APP_CODE' >> $BASH_ENV
          echo "export SPEC=$(find cypress/integration -type f -name '*.js' | circleci tests split | tr '\n' ',' )" >> $BASH_ENV
          source $BASH_ENV
          make e2e_test_docker
        environment:
          LOGIN_GOV_CALLBACK_PROTOCOL: http
          LOGIN_GOV_MY_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:mymovemillocal
          LOGIN_GOV_OFFICE_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:officemovemillocal
          LOGIN_GOV_TSP_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:tspmovemillocal
          LOGIN_GOV_ADMIN_CLIENT_ID: urn:gov:gsa:openidconnect.profiles:sp:sso:dod:adminmovemillocal
          LOGIN_GOV_HOSTNAME: idp.int.identitysandbox.gov
          HERE_MAPS_GEOCODE_ENDPOINT: https://geocoder.cit.api.here.com/6.2/geocode.json
          HERE_MAPS_ROUTING_ENDPOINT: https://route.cit.api.here.com/routing/7.2/calculateroute.json
          DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.4_DoD.der.p7b
    - store_artifacts:
        path: cypress/videos
        destination: videos
    - store_artifacts:
        path: cypress/screenshots
        destination: screenshots
    - store_test_results:
        path: cypress/results
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  build_storybook_app:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - restore_cache:
        keys:
        - v2-cache-yarn-v2-{{ checksum "yarn.lock" }}
    - restore_cache:
        keys:
        - v2-mymove-node-modules-{{ checksum "yarn.lock" }}
    - run:
        command: make storybook_build
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  pre_test:
    resource_class: medium+
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - restore_cache:
        keys:
        - v2-cache-yarn-v2-{{ checksum "yarn.lock" }}
    - restore_cache:
        keys:
        - v2-mymove-node-modules-{{ checksum "yarn.lock" }}
    - restore_cache:
        keys:
        - pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
    - run:
        command: echo 'export PATH=${PATH}:~/go/bin:~/transcom/mymove/bin' >> $BASH_ENV
    - run:
        command: echo 'export GOLANGCI_LINT_CONCURRENCY=1' >> $BASH_ENV
    - run:
        command: make bin/swagger
    - run:
        command: scripts/pre-commit-go-mod || exit 0
    - run:
        name: Run pre-commit tests
        command: pre-commit run --all-files
    - save_cache:
        key: pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
        paths:
        - ~/.cache/pre-commit
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  pre_deps_yarn:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - restore_cache:
        keys:
        - v2-cache-yarn-v2-{{ checksum "yarn.lock" }}
    - restore_cache:
        keys:
        - v2-mymove-node-modules-{{ checksum "yarn.lock" }}
    - run:
        name: Install YARN dependencies
        command: yarn install
    - save_cache:
        key: v2-cache-yarn-v2-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache/yarn/v2
    - save_cache:
        key: v2-mymove-node-modules-{{ checksum "yarn.lock" }}
        paths:
        - ~/transcom/mymove/node_modules
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  acceptance_tests_staging:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - run:
        name: Build Chamber
        command: make bin/chamber
    - run:
        name: Run acceptance tests
        command: make webserver_test
        environment:
          ENV: test
          ENVIRONMENT: staging
          CHAMBER_RETRIES: 20
          PWD: /home/circleci/transcom/mymove
          DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.4_DoD.der.p7b
          TEST_ACC_ENV: staging
          NO_TLS_ENABLED: true
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  deploy_experimental_migrations:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    environment:
    - APP_ENVIRONMENT: experimental
    steps:
    - checkout
    - attach_workspace:
        at: bin
    - run:
        name: Snapshot database
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/rds-snapshot-app-db
          $APP_ENVIRONMENT
    - run:
        name: Run migrations
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-run-app-migrations-container
          config/app-migrations.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:git-${CIRCLE_SHA1}
          $APP_ENVIRONMENT
        no_output_timeout: 60m
        environment:
          CHAMBER_RETRIES: 20
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  check_generated_code:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - run:
        command: echo 'export PATH=${PATH}:~/go/bin:~/transcom/mymove/bin' >> $BASH_ENV
    - run:
        command: make server_generate mocks_generate
    - run:
        command: scripts/check-generated-code
    - save_cache:
        key: go-mod-sources-v2-{{ checksum "go.sum" }}
        paths:
        - /go/pkg/mod
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  build_app:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - restore_cache:
        keys:
        - v2-cache-yarn-v2-{{ checksum "yarn.lock" }}
    - restore_cache:
        keys:
        - v2-mymove-node-modules-{{ checksum "yarn.lock" }}
    - run:
        command: make bin/chamber
    - run:
        command: make bin/rds-combined-ca-bundle.pem
    - run:
        command: make client_build
    - run:
        command: make server_build
    - run:
        name: Build, tag, and push docker image ppp:web-dev from Dockerfile Dockerfile
        command: |
          docker build -f Dockerfile -t ppp:web-dev .
          bash -c "$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)"
          docker tag ppp:web-dev ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1}
          shopt -s extglob
          docker tag ppp:web-dev ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-branch-${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-branch-${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  server_test_coverage:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    - image: postgres:10.9
      environment:
      - POSTGRES_PASSWORD: mysecretpassword
      - POSTGRES_DB: test_db
      command: -c fsync=off -c full_page_writes=off -c max_connections=200
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - run:
        name: Install postgres client
        command: |
          # Debian stretch only supports 9.6 client, so add the Postgresql apt repository for 10.x
          echo "deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main" | sudo tee -a /etc/apt/sources.list.d/pgdg.list
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get -qq update
          sudo apt-get -qq -y install postgresql-client-10
    - run:
        command: echo 'export PATH=${PATH}:~/go/bin:~/transcom/mymove/bin' >> $BASH_ENV
    - run:
        name: Setup Code Climate test-reporter
        command: |
          # download test reporter as a static binary
          curl -L --retry 5 --retry-connrefused https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 --output /home/circleci/cc-test-reporter
          chmod +x /home/circleci/cc-test-reporter
          /home/circleci/cc-test-reporter before-build -d
    - run:
        name: make server_test_coverage_generate
        command: |
          echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
          source $BASH_ENV
          make server_test_coverage_generate
        environment:
          DB_PASSWORD: mysecretpassword
          DB_USER: postgres
          DB_HOST: localhost
          DB_PORT_TEST: 5433
          DB_PORT: 5432
          DB_NAME: test_db
          EIA_KEY: db2522a43820268a41a802a16ae9fd26
          ENV: test
          ENVIRONMENT: test
          MIGRATION_PATH: file:///home/circleci/transcom/mymove/local_migrations;file:///home/circleci/transcom/mymove/migrations
          MIGRATION_MANIFEST: /home/circleci/transcom/mymove/migrations_manifest.txt
          SERVE_API_INTERNAL: true
    - run:
        name: upload code coverage to codecov
        command: |
          curl -L --retry 5 --retry-connrefused https://codecov.io/bash --output /home/circleci/codecov || exit 0
          chmod +x /home/circleci/codecov
          /home/circleci/codecov -F go -f coverage.out
    - store_artifacts:
        path: ~/transcom/mymove/coverage.out
  update_dependencies_go:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - run:
        name: Add ~/go/bin to path for golint
        command: echo 'export PATH=${PATH}:~/go/bin:~/transcom/mymove/bin' >> $BASH_ENV
    - run:
        command: make go_deps_update
    - run:
        name: Display changes
        command: |
          git --no-pager status
          git --no-pager diff --ignore-all-space --color
    - run:
        name: Push changes
        command: scripts/circleci-push-dependency-updates golang
  update_dependencies_pre_commit:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - run:
        command: pre-commit autoupdate
    - run:
        name: Display changes
        command: |
          git --no-pager status
          git --no-pager diff --ignore-all-space --color
    - run:
        name: Push changes
        command: scripts/circleci-push-dependency-updates pre-commit
  deploy_prod_app_client_tls:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    environment:
    - APP_ENVIRONMENT: prod
    steps:
    - checkout
    - run:
        name: Compare against deployed commit
        command: |
          [[ -z "gex.move.mil" ]] || scripts/compare-deployed-commit "gex.move.mil" $CIRCLE_SHA1 ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA}
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - attach_workspace:
        at: bin
    - deploy:
        name: Deploy app-client-tls service
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-deploy-service-container
          app-client-tls config/app-client-tls.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:git-${CIRCLE_SHA1}
          $APP_ENVIRONMENT FARGATE
        no_output_timeout: 20m
    - run:
        name: Health Check
        command: |
          bin/health-checker --schemes https --hosts gex.move.mil,dps.move.mil,orders.move.mil --key ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} --cert ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT} --ca ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA} --tries 10 --backoff 3 --log-level info --timeout 15m
    - run:
        name: Check deployed commits
        command: scripts/check-deployed-commit "gex.move.mil,dps.move.mil,orders.move.mil"
          "$CIRCLE_SHA1" ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_KEY} ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CERT}
          ${EXPERIMENTAL_MOVE_MIL_DOD_TLS_CA}
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  deploy_staging_tasks:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    environment:
    - APP_ENVIRONMENT: staging
    steps:
    - checkout
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - attach_workspace:
        at: bin
    - deploy:
        name: Deploy fuel price data task service
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} bin/ecs-deploy-task-container
          --aws-account-id ${AWS_ACCOUNT_ID} --aws-region ${AWS_DEFAULT_REGION} --service
          app --environment ${APP_ENVIRONMENT} --repository-name app-tasks --image-tag
          git-${CIRCLE_SHA1} --command "milmove-tasks save-fuel-price-data" --command-args
          "--db-iam --db-iam-role arn:aws:iam::923914045601:role/ecs-rds-role-app-${APP_ENVIRONMENT}
          --db-region us-west-2"
        environment:
          DB_PORT: 5432
          DB_USER: ecs_user
          DB_NAME: app
          DB_SSL_MODE: verify-full
          DB_SSL_ROOT_CERT: /bin/rds-combined-ca-bundle.pem
        no_output_timeout: 20m
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
    - deploy:
        name: Deploy post move email survey task service
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} bin/ecs-deploy-task-container
          --aws-account-id ${AWS_ACCOUNT_ID} --aws-region ${AWS_DEFAULT_REGION} --service
          app --environment ${APP_ENVIRONMENT} --repository-name app-tasks --image-tag
          git-${CIRCLE_SHA1} --command "milmove-tasks send-post-move-survey" --command-args
          "--db-iam --db-iam-role arn:aws:iam::923914045601:role/ecs-rds-role-app-${APP_ENVIRONMENT}
          --db-region us-west-2 --email-backend=ses --offset-days 15"
        environment:
          DB_PORT: 5432
          DB_USER: ecs_user
          DB_NAME: app
          DB_SSL_MODE: verify-full
          DB_SSL_ROOT_CERT: /bin/rds-combined-ca-bundle.pem
        no_output_timeout: 20m
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  deploy_staging_migrations:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    environment:
    - APP_ENVIRONMENT: staging
    steps:
    - checkout
    - attach_workspace:
        at: bin
    - run:
        name: Snapshot database
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/rds-snapshot-app-db
          $APP_ENVIRONMENT
    - run:
        name: Run migrations
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} scripts/ecs-run-app-migrations-container
          config/app-migrations.container-definition.json ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:git-${CIRCLE_SHA1}
          $APP_ENVIRONMENT
        no_output_timeout: 60m
        environment:
          CHAMBER_RETRIES: 20
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  acceptance_tests_local:
    resource_class: medium
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - run:
        name: Run acceptance tests
        command: |
          echo 'export MOVE_MIL_DOD_CA_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem)' >> $BASH_ENV
          echo 'export MOVE_MIL_DOD_TLS_CERT=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.pem)' >> $BASH_ENV
          echo 'export MOVE_MIL_DOD_TLS_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-https.key)' >> $BASH_ENV
          echo 'export CLIENT_AUTH_SECRET_KEY=$(cat /home/circleci/transcom/mymove/config/tls/devlocal-client_auth_secret.key)' >> $BASH_ENV
          echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
          echo 'export LOGIN_GOV_HOSTNAME=$E2E_LOGIN_GOV_HOSTNAME' >> $BASH_ENV
          echo 'export HERE_MAPS_APP_ID=$E2E_HERE_MAPS_APP_ID' >> $BASH_ENV
          echo 'export HERE_MAPS_APP_CODE=$E2E_HERE_MAPS_APP_CODE' >> $BASH_ENV
          source $BASH_ENV
          make webserver_test
        environment:
          ENV: test
          ENVIRONMENT: test
          PWD: /home/circleci/transcom/mymove
          LOGIN_GOV_HOSTNAME: idp.int.identitysandbox.gov
          DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.4_DoD.der.p7b
          DEVLOCAL_CA: /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem
          NO_TLS_ENABLED: true
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  build_tools:
    resource_class: medium+
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    steps:
    - checkout
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - run:
        command: make build_tools
    - persist_to_workspace:
        root: bin
        paths:
        - renderer
        - health-checker
        - ecs-service-logs
        - ecs-deploy-task-container
        - mockery
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
  deploy_experimental_tasks:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
    - image: trussworks/circleci-docker-primary:e5c10bf19185aa55354901106bad3ffd4c016265
    environment:
    - APP_ENVIRONMENT: experimental
    steps:
    - checkout
    - restore_cache:
        keys:
        - go-mod-sources-v2-{{ checksum "go.sum" }}
    - attach_workspace:
        at: bin
    - deploy:
        name: Deploy fuel price data task service
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} bin/ecs-deploy-task-container
          --aws-account-id ${AWS_ACCOUNT_ID} --aws-region ${AWS_DEFAULT_REGION} --service
          app --environment ${APP_ENVIRONMENT} --repository-name app-tasks --image-tag
          git-${CIRCLE_SHA1} --command "milmove-tasks save-fuel-price-data" --command-args
          "--db-iam --db-iam-role arn:aws:iam::923914045601:role/ecs-rds-role-app-${APP_ENVIRONMENT}
          --db-region us-west-2"
        environment:
          DB_PORT: 5432
          DB_USER: ecs_user
          DB_NAME: app
          DB_SSL_MODE: verify-full
          DB_SSL_ROOT_CERT: /bin/rds-combined-ca-bundle.pem
        no_output_timeout: 20m
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
    - deploy:
        name: Deploy post move email survey task service
        command: scripts/do-exclusively --job-name ${CIRCLE_JOB} bin/ecs-deploy-task-container
          --aws-account-id ${AWS_ACCOUNT_ID} --aws-region ${AWS_DEFAULT_REGION} --service
          app --environment ${APP_ENVIRONMENT} --repository-name app-tasks --image-tag
          git-${CIRCLE_SHA1} --command "milmove-tasks send-post-move-survey" --command-args
          "--db-iam --db-iam-role arn:aws:iam::923914045601:role/ecs-rds-role-app-${APP_ENVIRONMENT}
          --db-region us-west-2 --email-backend=ses --offset-days 15"
        environment:
          DB_PORT: 5432
          DB_USER: ecs_user
          DB_NAME: app
          DB_SSL_MODE: verify-full
          DB_SSL_ROOT_CERT: /bin/rds-combined-ca-bundle.pem
        no_output_timeout: 20m
    - run:
        name: Announce failure
        command: |
          [[ $CIRCLE_BRANCH = master ]] || exit 0
          scripts/circleci-announce-broken-branch
        when: on_fail
workflows:
  version: 2
  app:
    jobs:
    - pre_deps_golang
    - pre_deps_yarn
    - check_generated_code:
        requires:
        - pre_deps_golang
    - anti_virus:
        filters:
          branches:
            only: master
    - pre_test:
        requires:
        - pre_deps_golang
        - pre_deps_yarn
    - acceptance_tests_local:
        requires:
        - pre_deps_golang
        - pre_deps_yarn
    - acceptance_tests_experimental:
        requires:
        - pre_deps_golang
        - pre_deps_yarn
    - acceptance_tests_staging:
        requires:
        - pre_deps_golang
        - pre_deps_yarn
    - integration_tests:
        filters:
          branches:
            ignore: placeholder_branch_name
        requires:
        - pre_deps_golang
        - pre_deps_yarn
        - check_generated_code
        - build_app
        - build_migrations
        - acceptance_tests_local
    - client_test:
        filters:
          branches:
            ignore: placeholder_branch_name
        requires:
        - pre_deps_yarn
    - server_test:
        filters:
          branches:
            ignore: placeholder_branch_name
        requires:
        - pre_deps_golang
    - server_test_coverage:
        filters:
          branches:
            ignore: placeholder_branch_name
        requires:
        - pre_deps_golang
    - build_app:
        requires:
        - anti_virus
        - pre_deps_golang
        - pre_deps_yarn
        - acceptance_tests_local
    - build_storybook_app:
        requires:
        - anti_virus
        - pre_deps_yarn
    - build_tools:
        requires:
        - anti_virus
        - pre_deps_golang
    - build_migrations:
        requires:
        - anti_virus
        - pre_deps_golang
    - build_tasks:
        requires:
        - build_tools
    - deploy_experimental_migrations:
        filters:
          branches:
            only: placeholder_branch_name
        requires:
        - pre_test
        - client_test
        - server_test
        - acceptance_tests_local
        - acceptance_tests_experimental
        - build_app
        - build_tools
        - build_tasks
        - build_migrations
    - deploy_experimental_tasks:
        filters:
          branches:
            only: placeholder_branch_name
        requires:
        - deploy_experimental_migrations
    - deploy_experimental_app:
        filters:
          branches:
            only: placeholder_branch_name
        requires:
        - deploy_experimental_migrations
    - deploy_experimental_app_client_tls:
        filters:
          branches:
            only: placeholder_branch_name
        requires:
        - deploy_experimental_migrations
    - check_circle_against_staging_sha:
        filters:
          branches:
            only: master
        requires:
        - pre_test
        - client_test
        - server_test
        - build_app
        - build_tools
        - build_migrations
        - build_tasks
        - acceptance_tests_local
        - acceptance_tests_staging
        - integration_tests
    - deploy_staging_migrations:
        filters:
          branches:
            only: master
        requires:
        - check_circle_against_staging_sha
    - deploy_staging_tasks:
        filters:
          branches:
            only: master
        requires:
        - deploy_staging_migrations
    - deploy_staging_app:
        filters:
          branches:
            only: master
        requires:
        - deploy_staging_migrations
    - deploy_staging_app_client_tls:
        filters:
          branches:
            only: master
        requires:
        - deploy_staging_migrations
    - approve_prod_deploy:
        type: approval
        requires:
        - deploy_staging_tasks
        - deploy_staging_app
        - deploy_staging_app_client_tls
    - deploy_prod_migrations:
        filters:
          branches:
            only: master
        requires:
        - approve_prod_deploy
    - deploy_prod_tasks:
        filters:
          branches:
            only: master
        requires:
        - deploy_prod_migrations
    - deploy_prod_app:
        filters:
          branches:
            only: master
        requires:
        - deploy_prod_migrations
    - deploy_prod_app_client_tls:
        filters:
          branches:
            only: master
        requires:
        - deploy_prod_migrations
  dependency_updater_go:
    triggers:
    - schedule:
        cron: 0 12 * * 1
        filters:
          branches:
            only: master
    jobs:
    - update_dependencies_go
  dependency_updater_js:
    triggers:
    - schedule:
        cron: 0 12 * * 1
        filters:
          branches:
            only: master
    jobs:
    - update_dependencies_js
  dependency_updater_pre_commit:
    triggers:
    - schedule:
        cron: 0 12 * * 1
        filters:
          branches:
            only: master
    jobs:
    - update_dependencies_pre_commit
experimental:
  notify:
    branches:
      only:
      - master
