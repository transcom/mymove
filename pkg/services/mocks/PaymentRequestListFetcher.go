// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"

	uuid "github.com/gofrs/uuid"
)

// PaymentRequestListFetcher is an autogenerated mock type for the PaymentRequestListFetcher type
type PaymentRequestListFetcher struct {
	mock.Mock
}

// FetchPaymentRequestList provides a mock function with given fields: appCtx, officeUserID, params
func (_m *PaymentRequestListFetcher) FetchPaymentRequestList(appCtx appcontext.AppContext, officeUserID uuid.UUID, params *services.FetchPaymentRequestListParams) (*models.PaymentRequests, int, error) {
	ret := _m.Called(appCtx, officeUserID, params)

	if len(ret) == 0 {
		panic("no return value specified for FetchPaymentRequestList")
	}

	var r0 *models.PaymentRequests
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, *services.FetchPaymentRequestListParams) (*models.PaymentRequests, int, error)); ok {
		return rf(appCtx, officeUserID, params)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, *services.FetchPaymentRequestListParams) *models.PaymentRequests); ok {
		r0 = rf(appCtx, officeUserID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PaymentRequests)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, *services.FetchPaymentRequestListParams) int); ok {
		r1 = rf(appCtx, officeUserID, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, *services.FetchPaymentRequestListParams) error); ok {
		r2 = rf(appCtx, officeUserID, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchPaymentRequestListByMove provides a mock function with given fields: appCtx, locator
func (_m *PaymentRequestListFetcher) FetchPaymentRequestListByMove(appCtx appcontext.AppContext, locator string) (*models.PaymentRequests, error) {
	ret := _m.Called(appCtx, locator)

	if len(ret) == 0 {
		panic("no return value specified for FetchPaymentRequestListByMove")
	}

	var r0 *models.PaymentRequests
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string) (*models.PaymentRequests, error)); ok {
		return rf(appCtx, locator)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string) *models.PaymentRequests); ok {
		r0 = rf(appCtx, locator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PaymentRequests)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, string) error); ok {
		r1 = rf(appCtx, locator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentRequestListFetcher creates a new instance of PaymentRequestListFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentRequestListFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentRequestListFetcher {
	mock := &PaymentRequestListFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
