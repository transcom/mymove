// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	unit "github.com/transcom/mymove/pkg/unit"
)

// ServiceItemPricer is an autogenerated mock type for the ServiceItemPricer type
type ServiceItemPricer struct {
	mock.Mock
}

// PriceServiceItem provides a mock function with given fields: appCtx, item
func (_m *ServiceItemPricer) PriceServiceItem(appCtx appcontext.AppContext, item models.PaymentServiceItem) (unit.Cents, models.PaymentServiceItemParams, error) {
	ret := _m.Called(appCtx, item)

	if len(ret) == 0 {
		panic("no return value specified for PriceServiceItem")
	}

	var r0 unit.Cents
	var r1 models.PaymentServiceItemParams
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.PaymentServiceItem) (unit.Cents, models.PaymentServiceItemParams, error)); ok {
		return rf(appCtx, item)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.PaymentServiceItem) unit.Cents); ok {
		r0 = rf(appCtx, item)
	} else {
		r0 = ret.Get(0).(unit.Cents)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.PaymentServiceItem) models.PaymentServiceItemParams); ok {
		r1 = rf(appCtx, item)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(models.PaymentServiceItemParams)
		}
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, models.PaymentServiceItem) error); ok {
		r2 = rf(appCtx, item)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewServiceItemPricer creates a new instance of ServiceItemPricer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceItemPricer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceItemPricer {
	mock := &ServiceItemPricer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
