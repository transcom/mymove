// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// WeightTicketFetcher is an autogenerated mock type for the WeightTicketFetcher type
type WeightTicketFetcher struct {
	mock.Mock
}

// GetWeightTicket provides a mock function with given fields: appCtx, weightTicketID
func (_m *WeightTicketFetcher) GetWeightTicket(appCtx appcontext.AppContext, weightTicketID uuid.UUID) (*models.WeightTicket, error) {
	ret := _m.Called(appCtx, weightTicketID)

	var r0 *models.WeightTicket
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) *models.WeightTicket); ok {
		r0 = rf(appCtx, weightTicketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WeightTicket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID) error); ok {
		r1 = rf(appCtx, weightTicketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWeightTickets provides a mock function with given fields: appCtx, ppmShipmentID
func (_m *WeightTicketFetcher) ListWeightTickets(appCtx appcontext.AppContext, ppmShipmentID uuid.UUID) (models.WeightTickets, error) {
	ret := _m.Called(appCtx, ppmShipmentID)

	var r0 models.WeightTickets
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) models.WeightTickets); ok {
		r0 = rf(appCtx, ppmShipmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.WeightTickets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID) error); ok {
		r1 = rf(appCtx, ppmShipmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWeightTicketFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewWeightTicketFetcher creates a new instance of WeightTicketFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWeightTicketFetcher(t mockConstructorTestingTNewWeightTicketFetcher) *WeightTicketFetcher {
	mock := &WeightTicketFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
