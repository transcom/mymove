// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"

	validate "github.com/gobuffalo/validate/v3"
)

// ClientCertRemover is an autogenerated mock type for the ClientCertRemover type
type ClientCertRemover struct {
	mock.Mock
}

// RemoveClientCert provides a mock function with given fields: appCtx, id
func (_m *ClientCertRemover) RemoveClientCert(appCtx appcontext.AppContext, id uuid.UUID) (*models.ClientCert, *validate.Errors, error) {
	ret := _m.Called(appCtx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveClientCert")
	}

	var r0 *models.ClientCert
	var r1 *validate.Errors
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) (*models.ClientCert, *validate.Errors, error)); ok {
		return rf(appCtx, id)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) *models.ClientCert); ok {
		r0 = rf(appCtx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ClientCert)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID) *validate.Errors); ok {
		r1 = rf(appCtx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*validate.Errors)
		}
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID) error); ok {
		r2 = rf(appCtx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewClientCertRemover creates a new instance of ClientCertRemover. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientCertRemover(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientCertRemover {
	mock := &ClientCertRemover{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
