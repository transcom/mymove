// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	appcontext "github.com/transcom/mymove/pkg/appcontext"
	internalmessages "github.com/transcom/mymove/pkg/gen/internalmessages"

	mock "github.com/stretchr/testify/mock"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"

	validate "github.com/gobuffalo/validate/v3"
)

// MoveDocumentUpdater is an autogenerated mock type for the MoveDocumentUpdater type
type MoveDocumentUpdater struct {
	mock.Mock
}

// Update provides a mock function with given fields: appCtx, moveDocumentPayload, moveID
func (_m *MoveDocumentUpdater) Update(appCtx appcontext.AppContext, moveDocumentPayload *internalmessages.MoveDocumentPayload, moveID uuid.UUID) (*models.MoveDocument, *validate.Errors, error) {
	ret := _m.Called(appCtx, moveDocumentPayload, moveID)

	var r0 *models.MoveDocument
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *internalmessages.MoveDocumentPayload, uuid.UUID) *models.MoveDocument); ok {
		r0 = rf(appCtx, moveDocumentPayload, moveID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MoveDocument)
		}
	}

	var r1 *validate.Errors
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *internalmessages.MoveDocumentPayload, uuid.UUID) *validate.Errors); ok {
		r1 = rf(appCtx, moveDocumentPayload, moveID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*validate.Errors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(appcontext.AppContext, *internalmessages.MoveDocumentPayload, uuid.UUID) error); ok {
		r2 = rf(appCtx, moveDocumentPayload, moveID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateMoveDocumentStatus provides a mock function with given fields: appCtx, moveDocumentPayload, moveDocument
func (_m *MoveDocumentUpdater) UpdateMoveDocumentStatus(appCtx appcontext.AppContext, moveDocumentPayload *internalmessages.MoveDocumentPayload, moveDocument *models.MoveDocument) (*models.MoveDocument, *validate.Errors, error) {
	ret := _m.Called(appCtx, moveDocumentPayload, moveDocument)

	var r0 *models.MoveDocument
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *internalmessages.MoveDocumentPayload, *models.MoveDocument) *models.MoveDocument); ok {
		r0 = rf(appCtx, moveDocumentPayload, moveDocument)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MoveDocument)
		}
	}

	var r1 *validate.Errors
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *internalmessages.MoveDocumentPayload, *models.MoveDocument) *validate.Errors); ok {
		r1 = rf(appCtx, moveDocumentPayload, moveDocument)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*validate.Errors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(appcontext.AppContext, *internalmessages.MoveDocumentPayload, *models.MoveDocument) error); ok {
		r2 = rf(appCtx, moveDocumentPayload, moveDocument)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
