// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	auth "github.com/transcom/mymove/pkg/auth"
	internalmessages "github.com/transcom/mymove/pkg/gen/internalmessages"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"

	validate "github.com/gobuffalo/validate/v3"
)

// MoveDocumentUpdater is an autogenerated mock type for the MoveDocumentUpdater type
type MoveDocumentUpdater struct {
	mock.Mock
}

// Update provides a mock function with given fields: moveDocumentPayload, moveID, session
func (_m *MoveDocumentUpdater) Update(moveDocumentPayload *internalmessages.MoveDocumentPayload, moveID uuid.UUID, session *auth.Session) (*models.MoveDocument, *validate.Errors, error) {
	ret := _m.Called(moveDocumentPayload, moveID, session)

	var r0 *models.MoveDocument
	if rf, ok := ret.Get(0).(func(*internalmessages.MoveDocumentPayload, uuid.UUID, *auth.Session) *models.MoveDocument); ok {
		r0 = rf(moveDocumentPayload, moveID, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MoveDocument)
		}
	}

	var r1 *validate.Errors
	if rf, ok := ret.Get(1).(func(*internalmessages.MoveDocumentPayload, uuid.UUID, *auth.Session) *validate.Errors); ok {
		r1 = rf(moveDocumentPayload, moveID, session)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*validate.Errors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*internalmessages.MoveDocumentPayload, uuid.UUID, *auth.Session) error); ok {
		r2 = rf(moveDocumentPayload, moveID, session)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateMoveDocumentStatus provides a mock function with given fields: moveDocumentPayload, moveDocument, session
func (_m *MoveDocumentUpdater) UpdateMoveDocumentStatus(moveDocumentPayload *internalmessages.MoveDocumentPayload, moveDocument *models.MoveDocument, session *auth.Session) (*models.MoveDocument, *validate.Errors, error) {
	ret := _m.Called(moveDocumentPayload, moveDocument, session)

	var r0 *models.MoveDocument
	if rf, ok := ret.Get(0).(func(*internalmessages.MoveDocumentPayload, *models.MoveDocument, *auth.Session) *models.MoveDocument); ok {
		r0 = rf(moveDocumentPayload, moveDocument, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MoveDocument)
		}
	}

	var r1 *validate.Errors
	if rf, ok := ret.Get(1).(func(*internalmessages.MoveDocumentPayload, *models.MoveDocument, *auth.Session) *validate.Errors); ok {
		r1 = rf(moveDocumentPayload, moveDocument, session)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*validate.Errors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*internalmessages.MoveDocumentPayload, *models.MoveDocument, *auth.Session) error); ok {
		r2 = rf(moveDocumentPayload, moveDocument, session)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
