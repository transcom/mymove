// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	services "github.com/transcom/mymove/pkg/services"
)

// ListFetcher is an autogenerated mock type for the ListFetcher type
type ListFetcher struct {
	mock.Mock
}

// FetchRecordCount provides a mock function with given fields: appCtx, model, filters
func (_m *ListFetcher) FetchRecordCount(appCtx appcontext.AppContext, model interface{}, filters []services.QueryFilter) (int, error) {
	ret := _m.Called(appCtx, model, filters)

	if len(ret) == 0 {
		panic("no return value specified for FetchRecordCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, interface{}, []services.QueryFilter) (int, error)); ok {
		return rf(appCtx, model, filters)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, interface{}, []services.QueryFilter) int); ok {
		r0 = rf(appCtx, model, filters)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, interface{}, []services.QueryFilter) error); ok {
		r1 = rf(appCtx, model, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchRecordList provides a mock function with given fields: appCtx, model, filters, associations, pagination, ordering
func (_m *ListFetcher) FetchRecordList(appCtx appcontext.AppContext, model interface{}, filters []services.QueryFilter, associations services.QueryAssociations, pagination services.Pagination, ordering services.QueryOrder) error {
	ret := _m.Called(appCtx, model, filters, associations, pagination, ordering)

	if len(ret) == 0 {
		panic("no return value specified for FetchRecordList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, interface{}, []services.QueryFilter, services.QueryAssociations, services.Pagination, services.QueryOrder) error); ok {
		r0 = rf(appCtx, model, filters, associations, pagination, ordering)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewListFetcher creates a new instance of ListFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListFetcher {
	mock := &ListFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
