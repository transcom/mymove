// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	services "github.com/transcom/mymove/pkg/services"

	testing "testing"

	time "time"
)

// SyncadaSFTPReader is an autogenerated mock type for the SyncadaSFTPReader type
type SyncadaSFTPReader struct {
	mock.Mock
}

// FetchAndProcessSyncadaFiles provides a mock function with given fields: appCtx, pickupPath, lastRead, processor
func (_m *SyncadaSFTPReader) FetchAndProcessSyncadaFiles(appCtx appcontext.AppContext, pickupPath string, lastRead time.Time, processor services.SyncadaFileProcessor) (time.Time, error) {
	ret := _m.Called(appCtx, pickupPath, lastRead, processor)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, time.Time, services.SyncadaFileProcessor) time.Time); ok {
		r0 = rf(appCtx, pickupPath, lastRead, processor)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, string, time.Time, services.SyncadaFileProcessor) error); ok {
		r1 = rf(appCtx, pickupPath, lastRead, processor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSyncadaSFTPReader creates a new instance of SyncadaSFTPReader. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSyncadaSFTPReader(t testing.TB) *SyncadaSFTPReader {
	mock := &SyncadaSFTPReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
