// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// UserPrivilegeAssociator is an autogenerated mock type for the UserPrivilegeAssociator type
type UserPrivilegeAssociator struct {
	mock.Mock
}

// UpdateUserPrivileges provides a mock function with given fields: appCtx, userID, privileges
func (_m *UserPrivilegeAssociator) UpdateUserPrivileges(appCtx appcontext.AppContext, userID uuid.UUID, privileges []models.PrivilegeType) ([]models.UsersPrivileges, error) {
	ret := _m.Called(appCtx, userID, privileges)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPrivileges")
	}

	var r0 []models.UsersPrivileges
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, []models.PrivilegeType) ([]models.UsersPrivileges, error)); ok {
		return rf(appCtx, userID, privileges)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, []models.PrivilegeType) []models.UsersPrivileges); ok {
		r0 = rf(appCtx, userID, privileges)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UsersPrivileges)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, []models.PrivilegeType) error); ok {
		r1 = rf(appCtx, userID, privileges)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserPrivilegeAssociator creates a new instance of UserPrivilegeAssociator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserPrivilegeAssociator(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserPrivilegeAssociator {
	mock := &UserPrivilegeAssociator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
