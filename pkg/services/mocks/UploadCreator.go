// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	io "io"

	appcontext "github.com/transcom/mymove/pkg/appcontext"

	mock "github.com/stretchr/testify/mock"

	models "github.com/transcom/mymove/pkg/models"
)

// UploadCreator is an autogenerated mock type for the UploadCreator type
type UploadCreator struct {
	mock.Mock
}

// CreateUpload provides a mock function with given fields: appCtx, file, uploadFilename, uploadType
func (_m *UploadCreator) CreateUpload(appCtx appcontext.AppContext, file io.ReadCloser, uploadFilename string, uploadType models.UploadType) (*models.Upload, error) {
	ret := _m.Called(appCtx, file, uploadFilename, uploadType)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpload")
	}

	var r0 *models.Upload
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, io.ReadCloser, string, models.UploadType) (*models.Upload, error)); ok {
		return rf(appCtx, file, uploadFilename, uploadType)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, io.ReadCloser, string, models.UploadType) *models.Upload); ok {
		r0 = rf(appCtx, file, uploadFilename, uploadType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Upload)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, io.ReadCloser, string, models.UploadType) error); ok {
		r1 = rf(appCtx, file, uploadFilename, uploadType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUploadCreator creates a new instance of UploadCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUploadCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *UploadCreator {
	mock := &UploadCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
