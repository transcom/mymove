// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"

	validate "github.com/gobuffalo/validate/v3"
)

// PaymentServiceItemStatusUpdater is an autogenerated mock type for the PaymentServiceItemStatusUpdater type
type PaymentServiceItemStatusUpdater struct {
	mock.Mock
}

// UpdatePaymentServiceItemStatus provides a mock function with given fields: appCtx, paymentServiceItemID, status, rejectionReason, eTag
func (_m *PaymentServiceItemStatusUpdater) UpdatePaymentServiceItemStatus(appCtx appcontext.AppContext, paymentServiceItemID uuid.UUID, status models.PaymentServiceItemStatus, rejectionReason *string, eTag string) (models.PaymentServiceItem, *validate.Errors, error) {
	ret := _m.Called(appCtx, paymentServiceItemID, status, rejectionReason, eTag)

	var r0 models.PaymentServiceItem
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, models.PaymentServiceItemStatus, *string, string) models.PaymentServiceItem); ok {
		r0 = rf(appCtx, paymentServiceItemID, status, rejectionReason, eTag)
	} else {
		r0 = ret.Get(0).(models.PaymentServiceItem)
	}

	var r1 *validate.Errors
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, models.PaymentServiceItemStatus, *string, string) *validate.Errors); ok {
		r1 = rf(appCtx, paymentServiceItemID, status, rejectionReason, eTag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*validate.Errors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, models.PaymentServiceItemStatus, *string, string) error); ok {
		r2 = rf(appCtx, paymentServiceItemID, status, rejectionReason, eTag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
