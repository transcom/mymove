// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	roles "github.com/transcom/mymove/pkg/models/roles"

	uuid "github.com/gofrs/uuid"
)

// OfficeUserFetcherPop is an autogenerated mock type for the OfficeUserFetcherPop type
type OfficeUserFetcherPop struct {
	mock.Mock
}

// FetchOfficeUserByID provides a mock function with given fields: appCtx, id
func (_m *OfficeUserFetcherPop) FetchOfficeUserByID(appCtx appcontext.AppContext, id uuid.UUID) (models.OfficeUser, error) {
	ret := _m.Called(appCtx, id)

	if len(ret) == 0 {
		panic("no return value specified for FetchOfficeUserByID")
	}

	var r0 models.OfficeUser
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) (models.OfficeUser, error)); ok {
		return rf(appCtx, id)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) models.OfficeUser); ok {
		r0 = rf(appCtx, id)
	} else {
		r0 = ret.Get(0).(models.OfficeUser)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID) error); ok {
		r1 = rf(appCtx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOfficeUsersByRoleAndOffice provides a mock function with given fields: appCtx, role, officeID
func (_m *OfficeUserFetcherPop) FetchOfficeUsersByRoleAndOffice(appCtx appcontext.AppContext, role roles.RoleType, officeID uuid.UUID) ([]models.OfficeUser, error) {
	ret := _m.Called(appCtx, role, officeID)

	if len(ret) == 0 {
		panic("no return value specified for FetchOfficeUsersByRoleAndOffice")
	}

	var r0 []models.OfficeUser
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, roles.RoleType, uuid.UUID) ([]models.OfficeUser, error)); ok {
		return rf(appCtx, role, officeID)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, roles.RoleType, uuid.UUID) []models.OfficeUser); ok {
		r0 = rf(appCtx, role, officeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OfficeUser)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, roles.RoleType, uuid.UUID) error); ok {
		r1 = rf(appCtx, role, officeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOfficeUserFetcherPop creates a new instance of OfficeUserFetcherPop. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOfficeUserFetcherPop(t interface {
	mock.TestingT
	Cleanup(func())
}) *OfficeUserFetcherPop {
	mock := &OfficeUserFetcherPop{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
