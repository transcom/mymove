// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	appcontext "github.com/transcom/mymove/pkg/appcontext"
	internalmessages "github.com/transcom/mymove/pkg/gen/internalmessages"

	mock "github.com/stretchr/testify/mock"

	models "github.com/transcom/mymove/pkg/models"
)

// WeightAllotmentFetcher is an autogenerated mock type for the WeightAllotmentFetcher type
type WeightAllotmentFetcher struct {
	mock.Mock
}

// GetAllWeightAllotments provides a mock function with given fields: appCtx
func (_m *WeightAllotmentFetcher) GetAllWeightAllotments(appCtx appcontext.AppContext) (map[internalmessages.OrderPayGrade]models.WeightAllotment, error) {
	ret := _m.Called(appCtx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWeightAllotments")
	}

	var r0 map[internalmessages.OrderPayGrade]models.WeightAllotment
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext) (map[internalmessages.OrderPayGrade]models.WeightAllotment, error)); ok {
		return rf(appCtx)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext) map[internalmessages.OrderPayGrade]models.WeightAllotment); ok {
		r0 = rf(appCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[internalmessages.OrderPayGrade]models.WeightAllotment)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext) error); ok {
		r1 = rf(appCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalWeightAllotment provides a mock function with given fields: appCtx, order, entitlement
func (_m *WeightAllotmentFetcher) GetTotalWeightAllotment(appCtx appcontext.AppContext, order models.Order, entitlement models.Entitlement) (int, error) {
	ret := _m.Called(appCtx, order, entitlement)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalWeightAllotment")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.Order, models.Entitlement) (int, error)); ok {
		return rf(appCtx, order, entitlement)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.Order, models.Entitlement) int); ok {
		r0 = rf(appCtx, order, entitlement)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.Order, models.Entitlement) error); ok {
		r1 = rf(appCtx, order, entitlement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeightAllotment provides a mock function with given fields: appCtx, grade, ordersType
func (_m *WeightAllotmentFetcher) GetWeightAllotment(appCtx appcontext.AppContext, grade string, ordersType internalmessages.OrdersType) (models.WeightAllotment, error) {
	ret := _m.Called(appCtx, grade, ordersType)

	if len(ret) == 0 {
		panic("no return value specified for GetWeightAllotment")
	}

	var r0 models.WeightAllotment
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, internalmessages.OrdersType) (models.WeightAllotment, error)); ok {
		return rf(appCtx, grade, ordersType)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, internalmessages.OrdersType) models.WeightAllotment); ok {
		r0 = rf(appCtx, grade, ordersType)
	} else {
		r0 = ret.Get(0).(models.WeightAllotment)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, string, internalmessages.OrdersType) error); ok {
		r1 = rf(appCtx, grade, ordersType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeightAllotmentByOrdersType provides a mock function with given fields: appCtx, ordersType
func (_m *WeightAllotmentFetcher) GetWeightAllotmentByOrdersType(appCtx appcontext.AppContext, ordersType internalmessages.OrdersType) (models.WeightAllotment, error) {
	ret := _m.Called(appCtx, ordersType)

	if len(ret) == 0 {
		panic("no return value specified for GetWeightAllotmentByOrdersType")
	}

	var r0 models.WeightAllotment
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, internalmessages.OrdersType) (models.WeightAllotment, error)); ok {
		return rf(appCtx, ordersType)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, internalmessages.OrdersType) models.WeightAllotment); ok {
		r0 = rf(appCtx, ordersType)
	} else {
		r0 = ret.Get(0).(models.WeightAllotment)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, internalmessages.OrdersType) error); ok {
		r1 = rf(appCtx, ordersType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWeightAllotmentFetcher creates a new instance of WeightAllotmentFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeightAllotmentFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeightAllotmentFetcher {
	mock := &WeightAllotmentFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
