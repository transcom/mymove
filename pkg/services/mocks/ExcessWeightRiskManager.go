// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// ExcessWeightRiskManager is an autogenerated mock type for the ExcessWeightRiskManager type
type ExcessWeightRiskManager struct {
	mock.Mock
}

// AcknowledgeExcessWeightRisk provides a mock function with given fields: appCtx, moveID, eTag
func (_m *ExcessWeightRiskManager) AcknowledgeExcessWeightRisk(appCtx appcontext.AppContext, moveID uuid.UUID, eTag string) (*models.Move, error) {
	ret := _m.Called(appCtx, moveID, eTag)

	if len(ret) == 0 {
		panic("no return value specified for AcknowledgeExcessWeightRisk")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string) (*models.Move, error)); ok {
		return rf(appCtx, moveID, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string) *models.Move); ok {
		r0 = rf(appCtx, moveID, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, string) error); ok {
		r1 = rf(appCtx, moveID, eTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBillableWeightAsTOO provides a mock function with given fields: appCtx, orderID, weight, eTag
func (_m *ExcessWeightRiskManager) UpdateBillableWeightAsTOO(appCtx appcontext.AppContext, orderID uuid.UUID, weight *int, eTag string) (*models.Order, uuid.UUID, error) {
	ret := _m.Called(appCtx, orderID, weight, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBillableWeightAsTOO")
	}

	var r0 *models.Order
	var r1 uuid.UUID
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, *int, string) (*models.Order, uuid.UUID, error)); ok {
		return rf(appCtx, orderID, weight, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, *int, string) *models.Order); ok {
		r0 = rf(appCtx, orderID, weight, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, *int, string) uuid.UUID); ok {
		r1 = rf(appCtx, orderID, weight, eTag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, *int, string) error); ok {
		r2 = rf(appCtx, orderID, weight, eTag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateMaxBillableWeightAsTIO provides a mock function with given fields: appCtx, orderID, weight, remarks, eTag
func (_m *ExcessWeightRiskManager) UpdateMaxBillableWeightAsTIO(appCtx appcontext.AppContext, orderID uuid.UUID, weight *int, remarks *string, eTag string) (*models.Order, uuid.UUID, error) {
	ret := _m.Called(appCtx, orderID, weight, remarks, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMaxBillableWeightAsTIO")
	}

	var r0 *models.Order
	var r1 uuid.UUID
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, *int, *string, string) (*models.Order, uuid.UUID, error)); ok {
		return rf(appCtx, orderID, weight, remarks, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, *int, *string, string) *models.Order); ok {
		r0 = rf(appCtx, orderID, weight, remarks, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, *int, *string, string) uuid.UUID); ok {
		r1 = rf(appCtx, orderID, weight, remarks, eTag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, *int, *string, string) error); ok {
		r2 = rf(appCtx, orderID, weight, remarks, eTag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewExcessWeightRiskManager creates a new instance of ExcessWeightRiskManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExcessWeightRiskManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExcessWeightRiskManager {
	mock := &ExcessWeightRiskManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
