// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	os "os"

	mock "github.com/stretchr/testify/mock"

	services "github.com/transcom/mymove/pkg/services"
)

// SFTPClient is an autogenerated mock type for the SFTPClient type
type SFTPClient struct {
	mock.Mock
}

// Open provides a mock function with given fields: path
func (_m *SFTPClient) Open(path string) (services.SFTPFiler, error) {
	ret := _m.Called(path)

	var r0 services.SFTPFiler
	if rf, ok := ret.Get(0).(func(string) services.SFTPFiler); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.SFTPFiler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDir provides a mock function with given fields: p
func (_m *SFTPClient) ReadDir(p string) ([]os.FileInfo, error) {
	ret := _m.Called(p)

	var r0 []os.FileInfo
	if rf, ok := ret.Get(0).(func(string) []os.FileInfo); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]os.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: path
func (_m *SFTPClient) Remove(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
