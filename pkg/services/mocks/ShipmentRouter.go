// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// ShipmentRouter is an autogenerated mock type for the ShipmentRouter type
type ShipmentRouter struct {
	mock.Mock
}

// Approve provides a mock function with given fields: appCtx, shipment
func (_m *ShipmentRouter) Approve(appCtx appcontext.AppContext, shipment *models.MTOShipment) error {
	ret := _m.Called(appCtx, shipment)

	if len(ret) == 0 {
		panic("no return value specified for Approve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOShipment) error); ok {
		r0 = rf(appCtx, shipment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApproveDiversion provides a mock function with given fields: appCtx, shipment
func (_m *ShipmentRouter) ApproveDiversion(appCtx appcontext.AppContext, shipment *models.MTOShipment) error {
	ret := _m.Called(appCtx, shipment)

	if len(ret) == 0 {
		panic("no return value specified for ApproveDiversion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOShipment) error); ok {
		r0 = rf(appCtx, shipment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cancel provides a mock function with given fields: appCtx, shipment
func (_m *ShipmentRouter) Cancel(appCtx appcontext.AppContext, shipment *models.MTOShipment) error {
	ret := _m.Called(appCtx, shipment)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOShipment) error); ok {
		r0 = rf(appCtx, shipment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reject provides a mock function with given fields: appCtx, shipment, rejectionReason
func (_m *ShipmentRouter) Reject(appCtx appcontext.AppContext, shipment *models.MTOShipment, rejectionReason *string) error {
	ret := _m.Called(appCtx, shipment, rejectionReason)

	if len(ret) == 0 {
		panic("no return value specified for Reject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOShipment, *string) error); ok {
		r0 = rf(appCtx, shipment, rejectionReason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestCancellation provides a mock function with given fields: appCtx, shipment
func (_m *ShipmentRouter) RequestCancellation(appCtx appcontext.AppContext, shipment *models.MTOShipment) error {
	ret := _m.Called(appCtx, shipment)

	if len(ret) == 0 {
		panic("no return value specified for RequestCancellation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOShipment) error); ok {
		r0 = rf(appCtx, shipment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestDiversion provides a mock function with given fields: appCtx, shipment, diversionReason
func (_m *ShipmentRouter) RequestDiversion(appCtx appcontext.AppContext, shipment *models.MTOShipment, diversionReason *string) error {
	ret := _m.Called(appCtx, shipment, diversionReason)

	if len(ret) == 0 {
		panic("no return value specified for RequestDiversion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOShipment, *string) error); ok {
		r0 = rf(appCtx, shipment, diversionReason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Submit provides a mock function with given fields: appCtx, shipment
func (_m *ShipmentRouter) Submit(appCtx appcontext.AppContext, shipment *models.MTOShipment) error {
	ret := _m.Called(appCtx, shipment)

	if len(ret) == 0 {
		panic("no return value specified for Submit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOShipment) error); ok {
		r0 = rf(appCtx, shipment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewShipmentRouter creates a new instance of ShipmentRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShipmentRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShipmentRouter {
	mock := &ShipmentRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
