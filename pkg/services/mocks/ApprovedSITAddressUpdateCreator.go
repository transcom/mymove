// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// ApprovedSITAddressUpdateCreator is an autogenerated mock type for the ApprovedSITAddressUpdateCreator type
type ApprovedSITAddressUpdateCreator struct {
	mock.Mock
}

// CreateApprovedSITAddressUpdate provides a mock function with given fields: appCtx, sitAddressUpdate
func (_m *ApprovedSITAddressUpdateCreator) CreateApprovedSITAddressUpdate(appCtx appcontext.AppContext, sitAddressUpdate *models.SITAddressUpdate) (*models.SITAddressUpdate, error) {
	ret := _m.Called(appCtx, sitAddressUpdate)

	var r0 *models.SITAddressUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.SITAddressUpdate) (*models.SITAddressUpdate, error)); ok {
		return rf(appCtx, sitAddressUpdate)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.SITAddressUpdate) *models.SITAddressUpdate); ok {
		r0 = rf(appCtx, sitAddressUpdate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SITAddressUpdate)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *models.SITAddressUpdate) error); ok {
		r1 = rf(appCtx, sitAddressUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewApprovedSITAddressUpdateCreator interface {
	mock.TestingT
	Cleanup(func())
}

// NewApprovedSITAddressUpdateCreator creates a new instance of ApprovedSITAddressUpdateCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApprovedSITAddressUpdateCreator(t mockConstructorTestingTNewApprovedSITAddressUpdateCreator) *ApprovedSITAddressUpdateCreator {
	mock := &ApprovedSITAddressUpdateCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
