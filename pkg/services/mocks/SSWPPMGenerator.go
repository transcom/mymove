// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	afero "github.com/spf13/afero"
	mock "github.com/stretchr/testify/mock"

	pdfcpu "github.com/pdfcpu/pdfcpu/pkg/pdfcpu"

	services "github.com/transcom/mymove/pkg/services"
)

// SSWPPMGenerator is an autogenerated mock type for the SSWPPMGenerator type
type SSWPPMGenerator struct {
	mock.Mock
}

// FillSSWPDFForm provides a mock function with given fields: _a0, _a1
func (_m *SSWPPMGenerator) FillSSWPDFForm(_a0 services.Page1Values, _a1 services.Page2Values) (afero.File, *pdfcpu.PDFInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 afero.File
	var r1 *pdfcpu.PDFInfo
	var r2 error
	if rf, ok := ret.Get(0).(func(services.Page1Values, services.Page2Values) (afero.File, *pdfcpu.PDFInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(services.Page1Values, services.Page2Values) afero.File); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.File)
		}
	}

	if rf, ok := ret.Get(1).(func(services.Page1Values, services.Page2Values) *pdfcpu.PDFInfo); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pdfcpu.PDFInfo)
		}
	}

	if rf, ok := ret.Get(2).(func(services.Page1Values, services.Page2Values) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewSSWPPMGenerator creates a new instance of SSWPPMGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSSWPPMGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *SSWPPMGenerator {
	mock := &SSWPPMGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
