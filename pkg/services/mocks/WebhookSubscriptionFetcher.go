// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"
)

// WebhookSubscriptionFetcher is an autogenerated mock type for the WebhookSubscriptionFetcher type
type WebhookSubscriptionFetcher struct {
	mock.Mock
}

// FetchWebhookSubscription provides a mock function with given fields: appCtx, filters
func (_m *WebhookSubscriptionFetcher) FetchWebhookSubscription(appCtx appcontext.AppContext, filters []services.QueryFilter) (models.WebhookSubscription, error) {
	ret := _m.Called(appCtx, filters)

	if len(ret) == 0 {
		panic("no return value specified for FetchWebhookSubscription")
	}

	var r0 models.WebhookSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []services.QueryFilter) (models.WebhookSubscription, error)); ok {
		return rf(appCtx, filters)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []services.QueryFilter) models.WebhookSubscription); ok {
		r0 = rf(appCtx, filters)
	} else {
		r0 = ret.Get(0).(models.WebhookSubscription)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, []services.QueryFilter) error); ok {
		r1 = rf(appCtx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWebhookSubscriptionFetcher creates a new instance of WebhookSubscriptionFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookSubscriptionFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookSubscriptionFetcher {
	mock := &WebhookSubscriptionFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
