// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	appcontext "github.com/transcom/mymove/pkg/appcontext"
	adminmessages "github.com/transcom/mymove/pkg/gen/adminmessages"

	mock "github.com/stretchr/testify/mock"

	models "github.com/transcom/mymove/pkg/models"

	scs "github.com/alexedwards/scs/v2"

	testing "testing"

	uuid "github.com/gofrs/uuid"

	validate "github.com/gobuffalo/validate/v3"
)

// UserSessionRevocation is an autogenerated mock type for the UserSessionRevocation type
type UserSessionRevocation struct {
	mock.Mock
}

// RevokeUserSession provides a mock function with given fields: appCtx, id, payload, sessionStore
func (_m *UserSessionRevocation) RevokeUserSession(appCtx appcontext.AppContext, id uuid.UUID, payload *adminmessages.UserUpdatePayload, sessionStore scs.Store) (*models.User, *validate.Errors, error) {
	ret := _m.Called(appCtx, id, payload, sessionStore)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, *adminmessages.UserUpdatePayload, scs.Store) *models.User); ok {
		r0 = rf(appCtx, id, payload, sessionStore)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 *validate.Errors
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, *adminmessages.UserUpdatePayload, scs.Store) *validate.Errors); ok {
		r1 = rf(appCtx, id, payload, sessionStore)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*validate.Errors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, *adminmessages.UserUpdatePayload, scs.Store) error); ok {
		r2 = rf(appCtx, id, payload, sessionStore)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewUserSessionRevocation creates a new instance of UserSessionRevocation. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserSessionRevocation(t testing.TB) *UserSessionRevocation {
	mock := &UserSessionRevocation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
