// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"
)

// ClientCertFetcher is an autogenerated mock type for the ClientCertFetcher type
type ClientCertFetcher struct {
	mock.Mock
}

// FetchClientCert provides a mock function with given fields: appCtx, filters
func (_m *ClientCertFetcher) FetchClientCert(appCtx appcontext.AppContext, filters []services.QueryFilter) (models.ClientCert, error) {
	ret := _m.Called(appCtx, filters)

	var r0 models.ClientCert
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []services.QueryFilter) (models.ClientCert, error)); ok {
		return rf(appCtx, filters)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []services.QueryFilter) models.ClientCert); ok {
		r0 = rf(appCtx, filters)
	} else {
		r0 = ret.Get(0).(models.ClientCert)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, []services.QueryFilter) error); ok {
		r1 = rf(appCtx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClientCertFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientCertFetcher creates a new instance of ClientCertFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientCertFetcher(t mockConstructorTestingTNewClientCertFetcher) *ClientCertFetcher {
	mock := &ClientCertFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
