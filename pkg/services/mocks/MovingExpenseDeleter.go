// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	uuid "github.com/gofrs/uuid"
)

// MovingExpenseDeleter is an autogenerated mock type for the MovingExpenseDeleter type
type MovingExpenseDeleter struct {
	mock.Mock
}

// DeleteMovingExpense provides a mock function with given fields: appCtx, ppmID, movingExpenseID
func (_m *MovingExpenseDeleter) DeleteMovingExpense(appCtx appcontext.AppContext, ppmID uuid.UUID, movingExpenseID uuid.UUID) error {
	ret := _m.Called(appCtx, ppmID, movingExpenseID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMovingExpense")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(appCtx, ppmID, movingExpenseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMovingExpenseDeleter creates a new instance of MovingExpenseDeleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovingExpenseDeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MovingExpenseDeleter {
	mock := &MovingExpenseDeleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
