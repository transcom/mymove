// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// EvaluationReportUpdater is an autogenerated mock type for the EvaluationReportUpdater type
type EvaluationReportUpdater struct {
	mock.Mock
}

// SubmitEvaluationReport provides a mock function with given fields: appCtx, evaluationReportID, officeUserID, eTag
func (_m *EvaluationReportUpdater) SubmitEvaluationReport(appCtx appcontext.AppContext, evaluationReportID uuid.UUID, officeUserID uuid.UUID, eTag string) error {
	ret := _m.Called(appCtx, evaluationReportID, officeUserID, eTag)

	if len(ret) == 0 {
		panic("no return value specified for SubmitEvaluationReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, uuid.UUID, string) error); ok {
		r0 = rf(appCtx, evaluationReportID, officeUserID, eTag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEvaluationReport provides a mock function with given fields: appCtx, evaluationReport, officeUserID, eTag
func (_m *EvaluationReportUpdater) UpdateEvaluationReport(appCtx appcontext.AppContext, evaluationReport *models.EvaluationReport, officeUserID uuid.UUID, eTag string) error {
	ret := _m.Called(appCtx, evaluationReport, officeUserID, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvaluationReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.EvaluationReport, uuid.UUID, string) error); ok {
		r0 = rf(appCtx, evaluationReport, officeUserID, eTag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEvaluationReportUpdater creates a new instance of EvaluationReportUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvaluationReportUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *EvaluationReportUpdater {
	mock := &EvaluationReportUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
