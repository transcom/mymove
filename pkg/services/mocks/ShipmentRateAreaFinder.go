// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"
)

// ShipmentRateAreaFinder is an autogenerated mock type for the ShipmentRateAreaFinder type
type ShipmentRateAreaFinder struct {
	mock.Mock
}

// GetPrimeMoveShipmentOconusRateArea provides a mock function with given fields: appCtx, move
func (_m *ShipmentRateAreaFinder) GetPrimeMoveShipmentOconusRateArea(appCtx appcontext.AppContext, move models.Move) (*[]services.ShipmentPostalCodeRateArea, error) {
	ret := _m.Called(appCtx, move)

	if len(ret) == 0 {
		panic("no return value specified for GetPrimeMoveShipmentOconusRateArea")
	}

	var r0 *[]services.ShipmentPostalCodeRateArea
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.Move) (*[]services.ShipmentPostalCodeRateArea, error)); ok {
		return rf(appCtx, move)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.Move) *[]services.ShipmentPostalCodeRateArea); ok {
		r0 = rf(appCtx, move)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]services.ShipmentPostalCodeRateArea)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.Move) error); ok {
		r1 = rf(appCtx, move)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewShipmentRateAreaFinder creates a new instance of ShipmentRateAreaFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShipmentRateAreaFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShipmentRateAreaFinder {
	mock := &ShipmentRateAreaFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
