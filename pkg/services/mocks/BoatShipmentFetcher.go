// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// BoatShipmentFetcher is an autogenerated mock type for the BoatShipmentFetcher type
type BoatShipmentFetcher struct {
	mock.Mock
}

// GetBoatShipment provides a mock function with given fields: appCtx, boatShipmentID, eagerPreloadAssociations, postloadAssociations
func (_m *BoatShipmentFetcher) GetBoatShipment(appCtx appcontext.AppContext, boatShipmentID uuid.UUID, eagerPreloadAssociations []string, postloadAssociations []string) (*models.BoatShipment, error) {
	ret := _m.Called(appCtx, boatShipmentID, eagerPreloadAssociations, postloadAssociations)

	if len(ret) == 0 {
		panic("no return value specified for GetBoatShipment")
	}

	var r0 *models.BoatShipment
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, []string, []string) (*models.BoatShipment, error)); ok {
		return rf(appCtx, boatShipmentID, eagerPreloadAssociations, postloadAssociations)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, []string, []string) *models.BoatShipment); ok {
		r0 = rf(appCtx, boatShipmentID, eagerPreloadAssociations, postloadAssociations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoatShipment)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, []string, []string) error); ok {
		r1 = rf(appCtx, boatShipmentID, eagerPreloadAssociations, postloadAssociations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostloadAssociations provides a mock function with given fields: appCtx, boatShipment, postloadAssociations
func (_m *BoatShipmentFetcher) PostloadAssociations(appCtx appcontext.AppContext, boatShipment *models.BoatShipment, postloadAssociations []string) error {
	ret := _m.Called(appCtx, boatShipment, postloadAssociations)

	if len(ret) == 0 {
		panic("no return value specified for PostloadAssociations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.BoatShipment, []string) error); ok {
		r0 = rf(appCtx, boatShipment, postloadAssociations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBoatShipmentFetcher creates a new instance of BoatShipmentFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBoatShipmentFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *BoatShipmentFetcher {
	mock := &BoatShipmentFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
