// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// MoveTaskOrderUpdater is an autogenerated mock type for the MoveTaskOrderUpdater type
type MoveTaskOrderUpdater struct {
	mock.Mock
}

// MakeAvailableToPrime provides a mock function with given fields: appCtx, moveTaskOrderID, eTag, includeServiceCodeMS, includeServiceCodeCS
func (_m *MoveTaskOrderUpdater) MakeAvailableToPrime(appCtx appcontext.AppContext, moveTaskOrderID uuid.UUID, eTag string, includeServiceCodeMS bool, includeServiceCodeCS bool) (*models.Move, error) {
	ret := _m.Called(appCtx, moveTaskOrderID, eTag, includeServiceCodeMS, includeServiceCodeCS)

	if len(ret) == 0 {
		panic("no return value specified for MakeAvailableToPrime")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string, bool, bool) (*models.Move, error)); ok {
		return rf(appCtx, moveTaskOrderID, eTag, includeServiceCodeMS, includeServiceCodeCS)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string, bool, bool) *models.Move); ok {
		r0 = rf(appCtx, moveTaskOrderID, eTag, includeServiceCodeMS, includeServiceCodeCS)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, string, bool, bool) error); ok {
		r1 = rf(appCtx, moveTaskOrderID, eTag, includeServiceCodeMS, includeServiceCodeCS)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowHide provides a mock function with given fields: appCtx, moveTaskOrderID, show
func (_m *MoveTaskOrderUpdater) ShowHide(appCtx appcontext.AppContext, moveTaskOrderID uuid.UUID, show *bool) (*models.Move, error) {
	ret := _m.Called(appCtx, moveTaskOrderID, show)

	if len(ret) == 0 {
		panic("no return value specified for ShowHide")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, *bool) (*models.Move, error)); ok {
		return rf(appCtx, moveTaskOrderID, show)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, *bool) *models.Move); ok {
		r0 = rf(appCtx, moveTaskOrderID, show)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, *bool) error); ok {
		r1 = rf(appCtx, moveTaskOrderID, show)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePPMType provides a mock function with given fields: appCtx, moveTaskOrderID
func (_m *MoveTaskOrderUpdater) UpdatePPMType(appCtx appcontext.AppContext, moveTaskOrderID uuid.UUID) (*models.Move, error) {
	ret := _m.Called(appCtx, moveTaskOrderID)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePPMType")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) (*models.Move, error)); ok {
		return rf(appCtx, moveTaskOrderID)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) *models.Move); ok {
		r0 = rf(appCtx, moveTaskOrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID) error); ok {
		r1 = rf(appCtx, moveTaskOrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePostCounselingInfo provides a mock function with given fields: appCtx, moveTaskOrderID, eTag
func (_m *MoveTaskOrderUpdater) UpdatePostCounselingInfo(appCtx appcontext.AppContext, moveTaskOrderID uuid.UUID, eTag string) (*models.Move, error) {
	ret := _m.Called(appCtx, moveTaskOrderID, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostCounselingInfo")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string) (*models.Move, error)); ok {
		return rf(appCtx, moveTaskOrderID, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string) *models.Move); ok {
		r0 = rf(appCtx, moveTaskOrderID, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, string) error); ok {
		r1 = rf(appCtx, moveTaskOrderID, eTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReviewedBillableWeightsAt provides a mock function with given fields: appCtx, moveTaskOrderID, eTag
func (_m *MoveTaskOrderUpdater) UpdateReviewedBillableWeightsAt(appCtx appcontext.AppContext, moveTaskOrderID uuid.UUID, eTag string) (*models.Move, error) {
	ret := _m.Called(appCtx, moveTaskOrderID, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReviewedBillableWeightsAt")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string) (*models.Move, error)); ok {
		return rf(appCtx, moveTaskOrderID, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string) *models.Move); ok {
		r0 = rf(appCtx, moveTaskOrderID, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, string) error); ok {
		r1 = rf(appCtx, moveTaskOrderID, eTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusServiceCounselingCompleted provides a mock function with given fields: appCtx, moveTaskOrderID, eTag
func (_m *MoveTaskOrderUpdater) UpdateStatusServiceCounselingCompleted(appCtx appcontext.AppContext, moveTaskOrderID uuid.UUID, eTag string) (*models.Move, error) {
	ret := _m.Called(appCtx, moveTaskOrderID, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusServiceCounselingCompleted")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string) (*models.Move, error)); ok {
		return rf(appCtx, moveTaskOrderID, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string) *models.Move); ok {
		r0 = rf(appCtx, moveTaskOrderID, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, string) error); ok {
		r1 = rf(appCtx, moveTaskOrderID, eTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTIORemarks provides a mock function with given fields: appCtx, moveTaskOrderID, eTag, remarks
func (_m *MoveTaskOrderUpdater) UpdateTIORemarks(appCtx appcontext.AppContext, moveTaskOrderID uuid.UUID, eTag string, remarks string) (*models.Move, error) {
	ret := _m.Called(appCtx, moveTaskOrderID, eTag, remarks)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTIORemarks")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string, string) (*models.Move, error)); ok {
		return rf(appCtx, moveTaskOrderID, eTag, remarks)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string, string) *models.Move); ok {
		r0 = rf(appCtx, moveTaskOrderID, eTag, remarks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, string, string) error); ok {
		r1 = rf(appCtx, moveTaskOrderID, eTag, remarks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMoveTaskOrderUpdater creates a new instance of MoveTaskOrderUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMoveTaskOrderUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MoveTaskOrderUpdater {
	mock := &MoveTaskOrderUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
