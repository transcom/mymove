// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	tppspaidinvoicereport "github.com/transcom/mymove/pkg/edi/tpps_paid_invoice_report"

	validate "github.com/gobuffalo/validate/v3"
)

// TPPSPaidInvoiceReportProcessor is an autogenerated mock type for the TPPSPaidInvoiceReportProcessor type
type TPPSPaidInvoiceReportProcessor struct {
	mock.Mock
}

// ProcessFile provides a mock function with given fields: appCtx, syncadaPath, text
func (_m *TPPSPaidInvoiceReportProcessor) ProcessFile(appCtx appcontext.AppContext, syncadaPath string, text string) error {
	ret := _m.Called(appCtx, syncadaPath, text)

	if len(ret) == 0 {
		panic("no return value specified for ProcessFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, string) error); ok {
		r0 = rf(appCtx, syncadaPath, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreTPPSPaidInvoiceReportInDatabase provides a mock function with given fields: appCtx, tppsData
func (_m *TPPSPaidInvoiceReportProcessor) StoreTPPSPaidInvoiceReportInDatabase(appCtx appcontext.AppContext, tppsData []tppspaidinvoicereport.TPPSData) (*validate.Errors, int, int, error) {
	ret := _m.Called(appCtx, tppsData)

	if len(ret) == 0 {
		panic("no return value specified for StoreTPPSPaidInvoiceReportInDatabase")
	}

	var r0 *validate.Errors
	var r1 int
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []tppspaidinvoicereport.TPPSData) (*validate.Errors, int, int, error)); ok {
		return rf(appCtx, tppsData)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []tppspaidinvoicereport.TPPSData) *validate.Errors); ok {
		r0 = rf(appCtx, tppsData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*validate.Errors)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, []tppspaidinvoicereport.TPPSData) int); ok {
		r1 = rf(appCtx, tppsData)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, []tppspaidinvoicereport.TPPSData) int); ok {
		r2 = rf(appCtx, tppsData)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(appcontext.AppContext, []tppspaidinvoicereport.TPPSData) error); ok {
		r3 = rf(appCtx, tppsData)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewTPPSPaidInvoiceReportProcessor creates a new instance of TPPSPaidInvoiceReportProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTPPSPaidInvoiceReportProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *TPPSPaidInvoiceReportProcessor {
	mock := &TPPSPaidInvoiceReportProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
