// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// WeightTicketUpdater is an autogenerated mock type for the WeightTicketUpdater type
type WeightTicketUpdater struct {
	mock.Mock
}

// UpdateWeightTicket provides a mock function with given fields: appCtx, weightTicket, eTag
func (_m *WeightTicketUpdater) UpdateWeightTicket(appCtx appcontext.AppContext, weightTicket models.WeightTicket, eTag string) (*models.WeightTicket, error) {
	ret := _m.Called(appCtx, weightTicket, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWeightTicket")
	}

	var r0 *models.WeightTicket
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.WeightTicket, string) (*models.WeightTicket, error)); ok {
		return rf(appCtx, weightTicket, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.WeightTicket, string) *models.WeightTicket); ok {
		r0 = rf(appCtx, weightTicket, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WeightTicket)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.WeightTicket, string) error); ok {
		r1 = rf(appCtx, weightTicket, eTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWeightTicketUpdater creates a new instance of WeightTicketUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeightTicketUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeightTicketUpdater {
	mock := &WeightTicketUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
