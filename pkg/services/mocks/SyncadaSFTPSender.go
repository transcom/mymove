// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	io "io"

	appcontext "github.com/transcom/mymove/pkg/appcontext"

	mock "github.com/stretchr/testify/mock"
)

// SyncadaSFTPSender is an autogenerated mock type for the SyncadaSFTPSender type
type SyncadaSFTPSender struct {
	mock.Mock
}

// SendToSyncadaViaSFTP provides a mock function with given fields: appCtx, localDataReader, syncadaFileName
func (_m *SyncadaSFTPSender) SendToSyncadaViaSFTP(appCtx appcontext.AppContext, localDataReader io.Reader, syncadaFileName string) (int64, error) {
	ret := _m.Called(appCtx, localDataReader, syncadaFileName)

	if len(ret) == 0 {
		panic("no return value specified for SendToSyncadaViaSFTP")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, io.Reader, string) (int64, error)); ok {
		return rf(appCtx, localDataReader, syncadaFileName)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, io.Reader, string) int64); ok {
		r0 = rf(appCtx, localDataReader, syncadaFileName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, io.Reader, string) error); ok {
		r1 = rf(appCtx, localDataReader, syncadaFileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSyncadaSFTPSender creates a new instance of SyncadaSFTPSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyncadaSFTPSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *SyncadaSFTPSender {
	mock := &SyncadaSFTPSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
