// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// EDIErrorFetcher is an autogenerated mock type for the EDIErrorFetcher type
type EDIErrorFetcher struct {
	mock.Mock
}

// FetchEdiErrors provides a mock function with given fields: appCtx
func (_m *EDIErrorFetcher) FetchEdiErrors(appCtx appcontext.AppContext) (models.EdiErrors, error) {
	ret := _m.Called(appCtx)

	if len(ret) == 0 {
		panic("no return value specified for FetchEdiErrors")
	}

	var r0 models.EdiErrors
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext) (models.EdiErrors, error)); ok {
		return rf(appCtx)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext) models.EdiErrors); ok {
		r0 = rf(appCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.EdiErrors)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext) error); ok {
		r1 = rf(appCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEDIErrorFetcher creates a new instance of EDIErrorFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEDIErrorFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *EDIErrorFetcher {
	mock := &EDIErrorFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
