// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	validate "github.com/gobuffalo/validate/v3"
)

// ClientCertCreator is an autogenerated mock type for the ClientCertCreator type
type ClientCertCreator struct {
	mock.Mock
}

// CreateClientCert provides a mock function with given fields: appCtx, email, user
func (_m *ClientCertCreator) CreateClientCert(appCtx appcontext.AppContext, email string, user *models.ClientCert) (*models.ClientCert, *validate.Errors, error) {
	ret := _m.Called(appCtx, email, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateClientCert")
	}

	var r0 *models.ClientCert
	var r1 *validate.Errors
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, *models.ClientCert) (*models.ClientCert, *validate.Errors, error)); ok {
		return rf(appCtx, email, user)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, *models.ClientCert) *models.ClientCert); ok {
		r0 = rf(appCtx, email, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ClientCert)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, string, *models.ClientCert) *validate.Errors); ok {
		r1 = rf(appCtx, email, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*validate.Errors)
		}
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, string, *models.ClientCert) error); ok {
		r2 = rf(appCtx, email, user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewClientCertCreator creates a new instance of ClientCertCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientCertCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientCertCreator {
	mock := &ClientCertCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
