// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// GunSafeWeightTicketUpdater is an autogenerated mock type for the GunSafeWeightTicketUpdater type
type GunSafeWeightTicketUpdater struct {
	mock.Mock
}

// UpdateGunSafeWeightTicket provides a mock function with given fields: appCtx, gunsafeWeightTicket, eTag
func (_m *GunSafeWeightTicketUpdater) UpdateGunSafeWeightTicket(appCtx appcontext.AppContext, gunsafeWeightTicket models.GunSafeWeightTicket, eTag string) (*models.GunSafeWeightTicket, error) {
	ret := _m.Called(appCtx, gunsafeWeightTicket, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGunSafeWeightTicket")
	}

	var r0 *models.GunSafeWeightTicket
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.GunSafeWeightTicket, string) (*models.GunSafeWeightTicket, error)); ok {
		return rf(appCtx, gunsafeWeightTicket, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.GunSafeWeightTicket, string) *models.GunSafeWeightTicket); ok {
		r0 = rf(appCtx, gunsafeWeightTicket, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GunSafeWeightTicket)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.GunSafeWeightTicket, string) error); ok {
		r1 = rf(appCtx, gunsafeWeightTicket, eTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGunSafeWeightTicketUpdater creates a new instance of GunSafeWeightTicketUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGunSafeWeightTicketUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *GunSafeWeightTicketUpdater {
	mock := &GunSafeWeightTicketUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
