// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// VLocation is an autogenerated mock type for the VLocation type
type VLocation struct {
	mock.Mock
}

// GetLocationsByZipCityState provides a mock function with given fields: appCtx, search, exclusionStateFilters, exactMatch
func (_m *VLocation) GetLocationsByZipCityState(appCtx appcontext.AppContext, search string, exclusionStateFilters []string, exactMatch ...bool) (*models.VLocations, error) {
	_va := make([]interface{}, len(exactMatch))
	for _i := range exactMatch {
		_va[_i] = exactMatch[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, appCtx, search, exclusionStateFilters)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLocationsByZipCityState")
	}

	var r0 *models.VLocations
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, []string, ...bool) (*models.VLocations, error)); ok {
		return rf(appCtx, search, exclusionStateFilters, exactMatch...)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, []string, ...bool) *models.VLocations); ok {
		r0 = rf(appCtx, search, exclusionStateFilters, exactMatch...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VLocations)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, string, []string, ...bool) error); ok {
		r1 = rf(appCtx, search, exclusionStateFilters, exactMatch...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVLocation creates a new instance of VLocation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVLocation(t interface {
	mock.TestingT
	Cleanup(func())
}) *VLocation {
	mock := &VLocation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
