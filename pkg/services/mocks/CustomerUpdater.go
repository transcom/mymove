// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	testing "testing"
)

// CustomerUpdater is an autogenerated mock type for the CustomerUpdater type
type CustomerUpdater struct {
	mock.Mock
}

// UpdateCustomer provides a mock function with given fields: appCtx, eTag, customer
func (_m *CustomerUpdater) UpdateCustomer(appCtx appcontext.AppContext, eTag string, customer models.ServiceMember) (*models.ServiceMember, error) {
	ret := _m.Called(appCtx, eTag, customer)

	var r0 *models.ServiceMember
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, models.ServiceMember) *models.ServiceMember); ok {
		r0 = rf(appCtx, eTag, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ServiceMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, string, models.ServiceMember) error); ok {
		r1 = rf(appCtx, eTag, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCustomerUpdater creates a new instance of CustomerUpdater. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerUpdater(t testing.TB) *CustomerUpdater {
	mock := &CustomerUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
