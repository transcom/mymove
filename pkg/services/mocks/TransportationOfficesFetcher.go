// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// TransportationOfficesFetcher is an autogenerated mock type for the TransportationOfficesFetcher type
type TransportationOfficesFetcher struct {
	mock.Mock
}

// GetAllGBLOCs provides a mock function with given fields: appCtx
func (_m *TransportationOfficesFetcher) GetAllGBLOCs(appCtx appcontext.AppContext) (*models.GBLOCs, error) {
	ret := _m.Called(appCtx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllGBLOCs")
	}

	var r0 *models.GBLOCs
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext) (*models.GBLOCs, error)); ok {
		return rf(appCtx)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext) *models.GBLOCs); ok {
		r0 = rf(appCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GBLOCs)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext) error); ok {
		r1 = rf(appCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCounselingOffices provides a mock function with given fields: appCtx, dutyLocationID
func (_m *TransportationOfficesFetcher) GetCounselingOffices(appCtx appcontext.AppContext, dutyLocationID uuid.UUID) (*models.TransportationOffices, error) {
	ret := _m.Called(appCtx, dutyLocationID)

	if len(ret) == 0 {
		panic("no return value specified for GetCounselingOffices")
	}

	var r0 *models.TransportationOffices
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) (*models.TransportationOffices, error)); ok {
		return rf(appCtx, dutyLocationID)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) *models.TransportationOffices); ok {
		r0 = rf(appCtx, dutyLocationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TransportationOffices)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID) error); ok {
		r1 = rf(appCtx, dutyLocationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransportationOffice provides a mock function with given fields: appCtx, transportationOfficeID, includeOnlyPPMCloseoutOffices
func (_m *TransportationOfficesFetcher) GetTransportationOffice(appCtx appcontext.AppContext, transportationOfficeID uuid.UUID, includeOnlyPPMCloseoutOffices bool) (*models.TransportationOffice, error) {
	ret := _m.Called(appCtx, transportationOfficeID, includeOnlyPPMCloseoutOffices)

	if len(ret) == 0 {
		panic("no return value specified for GetTransportationOffice")
	}

	var r0 *models.TransportationOffice
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, bool) (*models.TransportationOffice, error)); ok {
		return rf(appCtx, transportationOfficeID, includeOnlyPPMCloseoutOffices)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, bool) *models.TransportationOffice); ok {
		r0 = rf(appCtx, transportationOfficeID, includeOnlyPPMCloseoutOffices)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TransportationOffice)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, bool) error); ok {
		r1 = rf(appCtx, transportationOfficeID, includeOnlyPPMCloseoutOffices)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransportationOffices provides a mock function with given fields: appCtx, search, forPpm
func (_m *TransportationOfficesFetcher) GetTransportationOffices(appCtx appcontext.AppContext, search string, forPpm bool) (*models.TransportationOffices, error) {
	ret := _m.Called(appCtx, search, forPpm)

	if len(ret) == 0 {
		panic("no return value specified for GetTransportationOffices")
	}

	var r0 *models.TransportationOffices
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, bool) (*models.TransportationOffices, error)); ok {
		return rf(appCtx, search, forPpm)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, bool) *models.TransportationOffices); ok {
		r0 = rf(appCtx, search, forPpm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TransportationOffices)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, string, bool) error); ok {
		r1 = rf(appCtx, search, forPpm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransportationOfficesFetcher creates a new instance of TransportationOfficesFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransportationOfficesFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransportationOfficesFetcher {
	mock := &TransportationOfficesFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
