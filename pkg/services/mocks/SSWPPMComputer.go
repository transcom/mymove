// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	appcontext "github.com/transcom/mymove/pkg/appcontext"
	auth "github.com/transcom/mymove/pkg/auth"

	mock "github.com/stretchr/testify/mock"

	route "github.com/transcom/mymove/pkg/route"

	services "github.com/transcom/mymove/pkg/services"

	uuid "github.com/gofrs/uuid"
)

// SSWPPMComputer is an autogenerated mock type for the SSWPPMComputer type
type SSWPPMComputer struct {
	mock.Mock
}

// ComputeObligations provides a mock function with given fields: _a0, _a1, _a2
func (_m *SSWPPMComputer) ComputeObligations(_a0 appcontext.AppContext, _a1 services.ShipmentSummaryFormData, _a2 route.Planner) (services.Obligations, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 services.Obligations
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, services.ShipmentSummaryFormData, route.Planner) (services.Obligations, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, services.ShipmentSummaryFormData, route.Planner) services.Obligations); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(services.Obligations)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, services.ShipmentSummaryFormData, route.Planner) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchDataShipmentSummaryWorksheetFormData provides a mock function with given fields: appCtx, _a1, ppmShipmentID
func (_m *SSWPPMComputer) FetchDataShipmentSummaryWorksheetFormData(appCtx appcontext.AppContext, _a1 *auth.Session, ppmShipmentID uuid.UUID) (*services.ShipmentSummaryFormData, error) {
	ret := _m.Called(appCtx, _a1, ppmShipmentID)

	var r0 *services.ShipmentSummaryFormData
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *auth.Session, uuid.UUID) (*services.ShipmentSummaryFormData, error)); ok {
		return rf(appCtx, _a1, ppmShipmentID)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *auth.Session, uuid.UUID) *services.ShipmentSummaryFormData); ok {
		r0 = rf(appCtx, _a1, ppmShipmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.ShipmentSummaryFormData)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *auth.Session, uuid.UUID) error); ok {
		r1 = rf(appCtx, _a1, ppmShipmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FormatValuesShipmentSummaryWorksheet provides a mock function with given fields: shipmentSummaryFormData, isPaymentPacket
func (_m *SSWPPMComputer) FormatValuesShipmentSummaryWorksheet(shipmentSummaryFormData services.ShipmentSummaryFormData, isPaymentPacket bool) (services.Page1Values, services.Page2Values) {
	ret := _m.Called(shipmentSummaryFormData, isPaymentPacket)

	var r0 services.Page1Values
	var r1 services.Page2Values
	if rf, ok := ret.Get(0).(func(services.ShipmentSummaryFormData, bool) (services.Page1Values, services.Page2Values)); ok {
		return rf(shipmentSummaryFormData, isPaymentPacket)
	}
	if rf, ok := ret.Get(0).(func(services.ShipmentSummaryFormData, bool) services.Page1Values); ok {
		r0 = rf(shipmentSummaryFormData, isPaymentPacket)
	} else {
		r0 = ret.Get(0).(services.Page1Values)
	}

	if rf, ok := ret.Get(1).(func(services.ShipmentSummaryFormData, bool) services.Page2Values); ok {
		r1 = rf(shipmentSummaryFormData, isPaymentPacket)
	} else {
		r1 = ret.Get(1).(services.Page2Values)
	}

	return r0, r1
}

// NewSSWPPMComputer creates a new instance of SSWPPMComputer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSSWPPMComputer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SSWPPMComputer {
	mock := &SSWPPMComputer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
