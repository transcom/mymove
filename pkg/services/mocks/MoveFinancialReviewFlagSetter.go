// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	testing "testing"

	uuid "github.com/gofrs/uuid"
)

// MoveFinancialReviewFlagSetter is an autogenerated mock type for the MoveFinancialReviewFlagSetter type
type MoveFinancialReviewFlagSetter struct {
	mock.Mock
}

// SetFinancialReviewFlag provides a mock function with given fields: appCtx, moveID, eTag, flagForReview, remarks
func (_m *MoveFinancialReviewFlagSetter) SetFinancialReviewFlag(appCtx appcontext.AppContext, moveID uuid.UUID, eTag string, flagForReview bool, remarks *string) (*models.Move, error) {
	ret := _m.Called(appCtx, moveID, eTag, flagForReview, remarks)

	var r0 *models.Move
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, string, bool, *string) *models.Move); ok {
		r0 = rf(appCtx, moveID, eTag, flagForReview, remarks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, string, bool, *string) error); ok {
		r1 = rf(appCtx, moveID, eTag, flagForReview, remarks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMoveFinancialReviewFlagSetter creates a new instance of MoveFinancialReviewFlagSetter. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMoveFinancialReviewFlagSetter(t testing.TB) *MoveFinancialReviewFlagSetter {
	mock := &MoveFinancialReviewFlagSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
