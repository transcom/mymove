// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// ShipmentUpdater is an autogenerated mock type for the ShipmentUpdater type
type ShipmentUpdater struct {
	mock.Mock
}

// UpdateShipment provides a mock function with given fields: appCtx, shipment, eTag, api
func (_m *ShipmentUpdater) UpdateShipment(appCtx appcontext.AppContext, shipment *models.MTOShipment, eTag string, api string) (*models.MTOShipment, error) {
	ret := _m.Called(appCtx, shipment, eTag, api)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShipment")
	}

	var r0 *models.MTOShipment
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOShipment, string, string) (*models.MTOShipment, error)); ok {
		return rf(appCtx, shipment, eTag, api)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOShipment, string, string) *models.MTOShipment); ok {
		r0 = rf(appCtx, shipment, eTag, api)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MTOShipment)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *models.MTOShipment, string, string) error); ok {
		r1 = rf(appCtx, shipment, eTag, api)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewShipmentUpdater creates a new instance of ShipmentUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShipmentUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShipmentUpdater {
	mock := &ShipmentUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
