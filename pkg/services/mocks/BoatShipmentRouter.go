// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// BoatShipmentRouter is an autogenerated mock type for the BoatShipmentRouter type
type BoatShipmentRouter struct {
	mock.Mock
}

// SendToCustomer provides a mock function with given fields: appCtx, boatShipment
func (_m *BoatShipmentRouter) SendToCustomer(appCtx appcontext.AppContext, boatShipment *models.BoatShipment) error {
	ret := _m.Called(appCtx, boatShipment)

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.BoatShipment) error); ok {
		r0 = rf(appCtx, boatShipment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetToDraft provides a mock function with given fields: appCtx, boatShipment
func (_m *BoatShipmentRouter) SetToDraft(appCtx appcontext.AppContext, boatShipment *models.BoatShipment) error {
	ret := _m.Called(appCtx, boatShipment)

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.BoatShipment) error); ok {
		r0 = rf(appCtx, boatShipment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Submit provides a mock function with given fields: appCtx, boatShipment
func (_m *BoatShipmentRouter) Submit(appCtx appcontext.AppContext, boatShipment *models.BoatShipment) error {
	ret := _m.Called(appCtx, boatShipment)

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.BoatShipment) error); ok {
		r0 = rf(appCtx, boatShipment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitCloseOutDocumentation provides a mock function with given fields: appCtx, boatShipment
func (_m *BoatShipmentRouter) SubmitCloseOutDocumentation(appCtx appcontext.AppContext, boatShipment *models.BoatShipment) error {
	ret := _m.Called(appCtx, boatShipment)

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.BoatShipment) error); ok {
		r0 = rf(appCtx, boatShipment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitReviewedDocuments provides a mock function with given fields: appCtx, boatShipment
func (_m *BoatShipmentRouter) SubmitReviewedDocuments(appCtx appcontext.AppContext, boatShipment *models.BoatShipment) error {
	ret := _m.Called(appCtx, boatShipment)

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.BoatShipment) error); ok {
		r0 = rf(appCtx, boatShipment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBoatShipmentRouter creates a new instance of BoatShipmentRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBoatShipmentRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *BoatShipmentRouter {
	mock := &BoatShipmentRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
