// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// SyncadaFileProcessor is an autogenerated mock type for the SyncadaFileProcessor type
type SyncadaFileProcessor struct {
	mock.Mock
}

// EDIType provides a mock function with given fields:
func (_m *SyncadaFileProcessor) EDIType() models.EDIType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EDIType")
	}

	var r0 models.EDIType
	if rf, ok := ret.Get(0).(func() models.EDIType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.EDIType)
	}

	return r0
}

// ProcessFile provides a mock function with given fields: appCtx, syncadaPath, text
func (_m *SyncadaFileProcessor) ProcessFile(appCtx appcontext.AppContext, syncadaPath string, text string) error {
	ret := _m.Called(appCtx, syncadaPath, text)

	if len(ret) == 0 {
		panic("no return value specified for ProcessFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, string) error); ok {
		r0 = rf(appCtx, syncadaPath, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSyncadaFileProcessor creates a new instance of SyncadaFileProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyncadaFileProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *SyncadaFileProcessor {
	mock := &SyncadaFileProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
