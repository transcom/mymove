// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"
)

// MoveTaskOrderFetcher is an autogenerated mock type for the MoveTaskOrderFetcher type
type MoveTaskOrderFetcher struct {
	mock.Mock
}

// FetchMoveTaskOrder provides a mock function with given fields: appCtx, searchParams
func (_m *MoveTaskOrderFetcher) FetchMoveTaskOrder(appCtx appcontext.AppContext, searchParams *services.MoveTaskOrderFetcherParams) (*models.Move, error) {
	ret := _m.Called(appCtx, searchParams)

	if len(ret) == 0 {
		panic("no return value specified for FetchMoveTaskOrder")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) (*models.Move, error)); ok {
		return rf(appCtx, searchParams)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) *models.Move); ok {
		r0 = rf(appCtx, searchParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) error); ok {
		r1 = rf(appCtx, searchParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMove provides a mock function with given fields: appCtx, searchParams, eagerAssociations
func (_m *MoveTaskOrderFetcher) GetMove(appCtx appcontext.AppContext, searchParams *services.MoveTaskOrderFetcherParams, eagerAssociations ...string) (*models.Move, error) {
	_va := make([]interface{}, len(eagerAssociations))
	for _i := range eagerAssociations {
		_va[_i] = eagerAssociations[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, appCtx, searchParams)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMove")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams, ...string) (*models.Move, error)); ok {
		return rf(appCtx, searchParams, eagerAssociations...)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams, ...string) *models.Move); ok {
		r0 = rf(appCtx, searchParams, eagerAssociations...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams, ...string) error); ok {
		r1 = rf(appCtx, searchParams, eagerAssociations...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllMoveTaskOrders provides a mock function with given fields: appCtx, searchParams
func (_m *MoveTaskOrderFetcher) ListAllMoveTaskOrders(appCtx appcontext.AppContext, searchParams *services.MoveTaskOrderFetcherParams) (models.Moves, error) {
	ret := _m.Called(appCtx, searchParams)

	if len(ret) == 0 {
		panic("no return value specified for ListAllMoveTaskOrders")
	}

	var r0 models.Moves
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) (models.Moves, error)); ok {
		return rf(appCtx, searchParams)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) models.Moves); ok {
		r0 = rf(appCtx, searchParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Moves)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) error); ok {
		r1 = rf(appCtx, searchParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNewPrimeMoveTaskOrders provides a mock function with given fields: appCtx, searchParams
func (_m *MoveTaskOrderFetcher) ListNewPrimeMoveTaskOrders(appCtx appcontext.AppContext, searchParams *services.MoveTaskOrderFetcherParams) (models.Moves, int, error) {
	ret := _m.Called(appCtx, searchParams)

	if len(ret) == 0 {
		panic("no return value specified for ListNewPrimeMoveTaskOrders")
	}

	var r0 models.Moves
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) (models.Moves, int, error)); ok {
		return rf(appCtx, searchParams)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) models.Moves); ok {
		r0 = rf(appCtx, searchParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Moves)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) int); ok {
		r1 = rf(appCtx, searchParams)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) error); ok {
		r2 = rf(appCtx, searchParams)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListPrimeMoveTaskOrders provides a mock function with given fields: appCtx, searchParams
func (_m *MoveTaskOrderFetcher) ListPrimeMoveTaskOrders(appCtx appcontext.AppContext, searchParams *services.MoveTaskOrderFetcherParams) (models.Moves, error) {
	ret := _m.Called(appCtx, searchParams)

	if len(ret) == 0 {
		panic("no return value specified for ListPrimeMoveTaskOrders")
	}

	var r0 models.Moves
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) (models.Moves, error)); ok {
		return rf(appCtx, searchParams)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) models.Moves); ok {
		r0 = rf(appCtx, searchParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Moves)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) error); ok {
		r1 = rf(appCtx, searchParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrimeMoveTaskOrdersAmendments provides a mock function with given fields: appCtx, searchParams
func (_m *MoveTaskOrderFetcher) ListPrimeMoveTaskOrdersAmendments(appCtx appcontext.AppContext, searchParams *services.MoveTaskOrderFetcherParams) (models.Moves, services.MoveOrderAmendmentAvailableSinceCounts, error) {
	ret := _m.Called(appCtx, searchParams)

	if len(ret) == 0 {
		panic("no return value specified for ListPrimeMoveTaskOrdersAmendments")
	}

	var r0 models.Moves
	var r1 services.MoveOrderAmendmentAvailableSinceCounts
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) (models.Moves, services.MoveOrderAmendmentAvailableSinceCounts, error)); ok {
		return rf(appCtx, searchParams)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) models.Moves); ok {
		r0 = rf(appCtx, searchParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Moves)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) services.MoveOrderAmendmentAvailableSinceCounts); ok {
		r1 = rf(appCtx, searchParams)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(services.MoveOrderAmendmentAvailableSinceCounts)
		}
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, *services.MoveTaskOrderFetcherParams) error); ok {
		r2 = rf(appCtx, searchParams)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMoveTaskOrderFetcher creates a new instance of MoveTaskOrderFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMoveTaskOrderFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MoveTaskOrderFetcher {
	mock := &MoveTaskOrderFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
