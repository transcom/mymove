// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// MoveTaskOrderFetcher is an autogenerated mock type for the MoveTaskOrderFetcher type
type MoveTaskOrderFetcher struct {
	mock.Mock
}

// FetchMoveTaskOrder provides a mock function with given fields: moveTaskOrderID
func (_m *MoveTaskOrderFetcher) FetchMoveTaskOrder(moveTaskOrderID uuid.UUID) (*models.MoveTaskOrder, error) {
	ret := _m.Called(moveTaskOrderID)

	var r0 *models.MoveTaskOrder
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.MoveTaskOrder); ok {
		r0 = rf(moveTaskOrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MoveTaskOrder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(moveTaskOrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllMoveTaskOrders provides a mock function with given fields: isAvailableToPrime, since
func (_m *MoveTaskOrderFetcher) ListAllMoveTaskOrders(isAvailableToPrime bool, since *int64) (models.MoveTaskOrders, error) {
	ret := _m.Called(isAvailableToPrime, since)

	var r0 models.MoveTaskOrders
	if rf, ok := ret.Get(0).(func(bool, *int64) models.MoveTaskOrders); ok {
		r0 = rf(isAvailableToPrime, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.MoveTaskOrders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, *int64) error); ok {
		r1 = rf(isAvailableToPrime, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMoveTaskOrders provides a mock function with given fields: moveOrderID
func (_m *MoveTaskOrderFetcher) ListMoveTaskOrders(moveOrderID uuid.UUID) ([]models.MoveTaskOrder, error) {
	ret := _m.Called(moveOrderID)

	var r0 []models.MoveTaskOrder
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.MoveTaskOrder); ok {
		r0 = rf(moveOrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MoveTaskOrder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(moveOrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
