// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	route "github.com/transcom/mymove/pkg/route"

	uuid "github.com/gofrs/uuid"
)

// MTOServiceItemUpdater is an autogenerated mock type for the MTOServiceItemUpdater type
type MTOServiceItemUpdater struct {
	mock.Mock
}

// ApproveOrRejectServiceItem provides a mock function with given fields: appCtx, mtoServiceItemID, status, rejectionReason, eTag
func (_m *MTOServiceItemUpdater) ApproveOrRejectServiceItem(appCtx appcontext.AppContext, mtoServiceItemID uuid.UUID, status models.MTOServiceItemStatus, rejectionReason *string, eTag string) (*models.MTOServiceItem, error) {
	ret := _m.Called(appCtx, mtoServiceItemID, status, rejectionReason, eTag)

	if len(ret) == 0 {
		panic("no return value specified for ApproveOrRejectServiceItem")
	}

	var r0 *models.MTOServiceItem
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, models.MTOServiceItemStatus, *string, string) (*models.MTOServiceItem, error)); ok {
		return rf(appCtx, mtoServiceItemID, status, rejectionReason, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, models.MTOServiceItemStatus, *string, string) *models.MTOServiceItem); ok {
		r0 = rf(appCtx, mtoServiceItemID, status, rejectionReason, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MTOServiceItem)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, models.MTOServiceItemStatus, *string, string) error); ok {
		r1 = rf(appCtx, mtoServiceItemID, status, rejectionReason, eTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConvertItemToCustomerExpense provides a mock function with given fields: appCtx, shipment, customerExpenseReason, convertToCustomerExpense
func (_m *MTOServiceItemUpdater) ConvertItemToCustomerExpense(appCtx appcontext.AppContext, shipment *models.MTOShipment, customerExpenseReason *string, convertToCustomerExpense bool) (*models.MTOServiceItem, error) {
	ret := _m.Called(appCtx, shipment, customerExpenseReason, convertToCustomerExpense)

	if len(ret) == 0 {
		panic("no return value specified for ConvertItemToCustomerExpense")
	}

	var r0 *models.MTOServiceItem
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOShipment, *string, bool) (*models.MTOServiceItem, error)); ok {
		return rf(appCtx, shipment, customerExpenseReason, convertToCustomerExpense)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOShipment, *string, bool) *models.MTOServiceItem); ok {
		r0 = rf(appCtx, shipment, customerExpenseReason, convertToCustomerExpense)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MTOServiceItem)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *models.MTOShipment, *string, bool) error); ok {
		r1 = rf(appCtx, shipment, customerExpenseReason, convertToCustomerExpense)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMTOServiceItem provides a mock function with given fields: appCtx, serviceItem, eTag, validator
func (_m *MTOServiceItemUpdater) UpdateMTOServiceItem(appCtx appcontext.AppContext, serviceItem *models.MTOServiceItem, eTag string, validator string) (*models.MTOServiceItem, error) {
	ret := _m.Called(appCtx, serviceItem, eTag, validator)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMTOServiceItem")
	}

	var r0 *models.MTOServiceItem
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOServiceItem, string, string) (*models.MTOServiceItem, error)); ok {
		return rf(appCtx, serviceItem, eTag, validator)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOServiceItem, string, string) *models.MTOServiceItem); ok {
		r0 = rf(appCtx, serviceItem, eTag, validator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MTOServiceItem)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *models.MTOServiceItem, string, string) error); ok {
		r1 = rf(appCtx, serviceItem, eTag, validator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMTOServiceItemBasic provides a mock function with given fields: appCtx, serviceItem, eTag
func (_m *MTOServiceItemUpdater) UpdateMTOServiceItemBasic(appCtx appcontext.AppContext, serviceItem *models.MTOServiceItem, eTag string) (*models.MTOServiceItem, error) {
	ret := _m.Called(appCtx, serviceItem, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMTOServiceItemBasic")
	}

	var r0 *models.MTOServiceItem
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOServiceItem, string) (*models.MTOServiceItem, error)); ok {
		return rf(appCtx, serviceItem, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOServiceItem, string) *models.MTOServiceItem); ok {
		r0 = rf(appCtx, serviceItem, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MTOServiceItem)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *models.MTOServiceItem, string) error); ok {
		r1 = rf(appCtx, serviceItem, eTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMTOServiceItemPrime provides a mock function with given fields: appCtx, serviceItem, planner, shipment, eTag
func (_m *MTOServiceItemUpdater) UpdateMTOServiceItemPrime(appCtx appcontext.AppContext, serviceItem *models.MTOServiceItem, planner route.Planner, shipment models.MTOShipment, eTag string) (*models.MTOServiceItem, error) {
	ret := _m.Called(appCtx, serviceItem, planner, shipment, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMTOServiceItemPrime")
	}

	var r0 *models.MTOServiceItem
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOServiceItem, route.Planner, models.MTOShipment, string) (*models.MTOServiceItem, error)); ok {
		return rf(appCtx, serviceItem, planner, shipment, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.MTOServiceItem, route.Planner, models.MTOShipment, string) *models.MTOServiceItem); ok {
		r0 = rf(appCtx, serviceItem, planner, shipment, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MTOServiceItem)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *models.MTOServiceItem, route.Planner, models.MTOShipment, string) error); ok {
		r1 = rf(appCtx, serviceItem, planner, shipment, eTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMTOServiceItemUpdater creates a new instance of MTOServiceItemUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMTOServiceItemUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MTOServiceItemUpdater {
	mock := &MTOServiceItemUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
