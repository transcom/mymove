// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// SITAddressUpdateRequestRejector is an autogenerated mock type for the SITAddressUpdateRequestRejector type
type SITAddressUpdateRequestRejector struct {
	mock.Mock
}

// RejectSITAddressUpdateRequest provides a mock function with given fields: appCtx, sitAddressUpdateRequestID, officeRemarks, eTag
func (_m *SITAddressUpdateRequestRejector) RejectSITAddressUpdateRequest(appCtx appcontext.AppContext, sitAddressUpdateRequestID uuid.UUID, officeRemarks *string, eTag string) (*models.SITAddressUpdate, error) {
	ret := _m.Called(appCtx, sitAddressUpdateRequestID, officeRemarks, eTag)

	var r0 *models.SITAddressUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, *string, string) (*models.SITAddressUpdate, error)); ok {
		return rf(appCtx, sitAddressUpdateRequestID, officeRemarks, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, *string, string) *models.SITAddressUpdate); ok {
		r0 = rf(appCtx, sitAddressUpdateRequestID, officeRemarks, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SITAddressUpdate)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, *string, string) error); ok {
		r1 = rf(appCtx, sitAddressUpdateRequestID, officeRemarks, eTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSITAddressUpdateRequestRejector creates a new instance of SITAddressUpdateRequestRejector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSITAddressUpdateRequestRejector(t interface {
	mock.TestingT
	Cleanup(func())
}) *SITAddressUpdateRequestRejector {
	mock := &SITAddressUpdateRequestRejector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
