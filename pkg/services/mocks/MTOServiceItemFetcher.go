// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// MTOServiceItemFetcher is an autogenerated mock type for the MTOServiceItemFetcher type
type MTOServiceItemFetcher struct {
	mock.Mock
}

// GetServiceItem provides a mock function with given fields: appCtx, serviceItemID
func (_m *MTOServiceItemFetcher) GetServiceItem(appCtx appcontext.AppContext, serviceItemID uuid.UUID) (*models.MTOServiceItem, error) {
	ret := _m.Called(appCtx, serviceItemID)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceItem")
	}

	var r0 *models.MTOServiceItem
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) (*models.MTOServiceItem, error)); ok {
		return rf(appCtx, serviceItemID)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) *models.MTOServiceItem); ok {
		r0 = rf(appCtx, serviceItemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MTOServiceItem)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID) error); ok {
		r1 = rf(appCtx, serviceItemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMTOServiceItemFetcher creates a new instance of MTOServiceItemFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMTOServiceItemFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MTOServiceItemFetcher {
	mock := &MTOServiceItemFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
