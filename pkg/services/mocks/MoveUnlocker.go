// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// MoveUnlocker is an autogenerated mock type for the MoveUnlocker type
type MoveUnlocker struct {
	mock.Mock
}

// CheckForLockedMovesAndUnlock provides a mock function with given fields: appCtx, officeUserID
func (_m *MoveUnlocker) CheckForLockedMovesAndUnlock(appCtx appcontext.AppContext, officeUserID uuid.UUID) error {
	ret := _m.Called(appCtx, officeUserID)

	if len(ret) == 0 {
		panic("no return value specified for CheckForLockedMovesAndUnlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) error); ok {
		r0 = rf(appCtx, officeUserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlockMove provides a mock function with given fields: appCtx, move, officeUserID
func (_m *MoveUnlocker) UnlockMove(appCtx appcontext.AppContext, move *models.Move, officeUserID uuid.UUID) (*models.Move, error) {
	ret := _m.Called(appCtx, move, officeUserID)

	if len(ret) == 0 {
		panic("no return value specified for UnlockMove")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.Move, uuid.UUID) (*models.Move, error)); ok {
		return rf(appCtx, move, officeUserID)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.Move, uuid.UUID) *models.Move); ok {
		r0 = rf(appCtx, move, officeUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *models.Move, uuid.UUID) error); ok {
		r1 = rf(appCtx, move, officeUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMoveUnlocker creates a new instance of MoveUnlocker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMoveUnlocker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MoveUnlocker {
	mock := &MoveUnlocker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
