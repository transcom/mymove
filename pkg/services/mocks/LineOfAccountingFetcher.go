// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	time "time"
)

// LineOfAccountingFetcher is an autogenerated mock type for the LineOfAccountingFetcher type
type LineOfAccountingFetcher struct {
	mock.Mock
}

// BuildFullLineOfAccountingString provides a mock function with given fields: loa
func (_m *LineOfAccountingFetcher) BuildFullLineOfAccountingString(loa *models.LineOfAccounting) string {
	ret := _m.Called(loa)

	var r0 string
	if rf, ok := ret.Get(0).(func(*models.LineOfAccounting) string); ok {
		r0 = rf(loa)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FetchLongLinesOfAccounting provides a mock function with given fields: serviceMemberAffiliation, ordersIssueDate, tacCode, appCtx
func (_m *LineOfAccountingFetcher) FetchLongLinesOfAccounting(serviceMemberAffiliation models.ServiceMemberAffiliation, ordersIssueDate time.Time, tacCode string, appCtx appcontext.AppContext) ([]models.LineOfAccounting, error) {
	ret := _m.Called(serviceMemberAffiliation, ordersIssueDate, tacCode, appCtx)

	var r0 []models.LineOfAccounting
	var r1 error
	if rf, ok := ret.Get(0).(func(models.ServiceMemberAffiliation, time.Time, string, appcontext.AppContext) ([]models.LineOfAccounting, error)); ok {
		return rf(serviceMemberAffiliation, ordersIssueDate, tacCode, appCtx)
	}
	if rf, ok := ret.Get(0).(func(models.ServiceMemberAffiliation, time.Time, string, appcontext.AppContext) []models.LineOfAccounting); ok {
		r0 = rf(serviceMemberAffiliation, ordersIssueDate, tacCode, appCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.LineOfAccounting)
		}
	}

	if rf, ok := ret.Get(1).(func(models.ServiceMemberAffiliation, time.Time, string, appcontext.AppContext) error); ok {
		r1 = rf(serviceMemberAffiliation, ordersIssueDate, tacCode, appCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLineOfAccountingFetcher creates a new instance of LineOfAccountingFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLineOfAccountingFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *LineOfAccountingFetcher {
	mock := &LineOfAccountingFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
