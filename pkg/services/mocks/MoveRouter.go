// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// MoveRouter is an autogenerated mock type for the MoveRouter type
type MoveRouter struct {
	mock.Mock
}

// Approve provides a mock function with given fields: appCtx, move
func (_m *MoveRouter) Approve(appCtx appcontext.AppContext, move *models.Move) error {
	ret := _m.Called(appCtx, move)

	if len(ret) == 0 {
		panic("no return value specified for Approve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.Move) error); ok {
		r0 = rf(appCtx, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApproveOrRequestApproval provides a mock function with given fields: appCtx, move
func (_m *MoveRouter) ApproveOrRequestApproval(appCtx appcontext.AppContext, move models.Move) (*models.Move, error) {
	ret := _m.Called(appCtx, move)

	if len(ret) == 0 {
		panic("no return value specified for ApproveOrRequestApproval")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.Move) (*models.Move, error)); ok {
		return rf(appCtx, move)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.Move) *models.Move); ok {
		r0 = rf(appCtx, move)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.Move) error); ok {
		r1 = rf(appCtx, move)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cancel provides a mock function with given fields: appCtx, reason, move
func (_m *MoveRouter) Cancel(appCtx appcontext.AppContext, reason string, move *models.Move) error {
	ret := _m.Called(appCtx, reason, move)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, *models.Move) error); ok {
		r0 = rf(appCtx, reason, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteServiceCounseling provides a mock function with given fields: appCtx, move
func (_m *MoveRouter) CompleteServiceCounseling(appCtx appcontext.AppContext, move *models.Move) error {
	ret := _m.Called(appCtx, move)

	if len(ret) == 0 {
		panic("no return value specified for CompleteServiceCounseling")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.Move) error); ok {
		r0 = rf(appCtx, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RouteAfterAmendingOrders provides a mock function with given fields: appCtx, move
func (_m *MoveRouter) RouteAfterAmendingOrders(appCtx appcontext.AppContext, move *models.Move) error {
	ret := _m.Called(appCtx, move)

	if len(ret) == 0 {
		panic("no return value specified for RouteAfterAmendingOrders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.Move) error); ok {
		r0 = rf(appCtx, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendToOfficeUser provides a mock function with given fields: appCtx, move
func (_m *MoveRouter) SendToOfficeUser(appCtx appcontext.AppContext, move *models.Move) error {
	ret := _m.Called(appCtx, move)

	if len(ret) == 0 {
		panic("no return value specified for SendToOfficeUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.Move) error); ok {
		r0 = rf(appCtx, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Submit provides a mock function with given fields: appCtx, move, newSignedCertification
func (_m *MoveRouter) Submit(appCtx appcontext.AppContext, move *models.Move, newSignedCertification *models.SignedCertification) error {
	ret := _m.Called(appCtx, move, newSignedCertification)

	if len(ret) == 0 {
		panic("no return value specified for Submit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.Move, *models.SignedCertification) error); ok {
		r0 = rf(appCtx, move, newSignedCertification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMoveRouter creates a new instance of MoveRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMoveRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MoveRouter {
	mock := &MoveRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
