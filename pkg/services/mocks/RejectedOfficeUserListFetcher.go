// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"
)

// RejectedOfficeUserListFetcher is an autogenerated mock type for the RejectedOfficeUserListFetcher type
type RejectedOfficeUserListFetcher struct {
	mock.Mock
}

// FetchRejectedOfficeUsersCount provides a mock function with given fields: appCtx, filters
func (_m *RejectedOfficeUserListFetcher) FetchRejectedOfficeUsersCount(appCtx appcontext.AppContext, filters []services.QueryFilter) (int, error) {
	ret := _m.Called(appCtx, filters)

	if len(ret) == 0 {
		panic("no return value specified for FetchRejectedOfficeUsersCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []services.QueryFilter) (int, error)); ok {
		return rf(appCtx, filters)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []services.QueryFilter) int); ok {
		r0 = rf(appCtx, filters)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, []services.QueryFilter) error); ok {
		r1 = rf(appCtx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchRejectedOfficeUsersList provides a mock function with given fields: appCtx, filters, associations, pagination, ordering
func (_m *RejectedOfficeUserListFetcher) FetchRejectedOfficeUsersList(appCtx appcontext.AppContext, filters []services.QueryFilter, associations services.QueryAssociations, pagination services.Pagination, ordering services.QueryOrder) (models.OfficeUsers, error) {
	ret := _m.Called(appCtx, filters, associations, pagination, ordering)

	if len(ret) == 0 {
		panic("no return value specified for FetchRejectedOfficeUsersList")
	}

	var r0 models.OfficeUsers
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []services.QueryFilter, services.QueryAssociations, services.Pagination, services.QueryOrder) (models.OfficeUsers, error)); ok {
		return rf(appCtx, filters, associations, pagination, ordering)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []services.QueryFilter, services.QueryAssociations, services.Pagination, services.QueryOrder) models.OfficeUsers); ok {
		r0 = rf(appCtx, filters, associations, pagination, ordering)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.OfficeUsers)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, []services.QueryFilter, services.QueryAssociations, services.Pagination, services.QueryOrder) error); ok {
		r1 = rf(appCtx, filters, associations, pagination, ordering)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRejectedOfficeUserListFetcher creates a new instance of RejectedOfficeUserListFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRejectedOfficeUserListFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *RejectedOfficeUserListFetcher {
	mock := &RejectedOfficeUserListFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
