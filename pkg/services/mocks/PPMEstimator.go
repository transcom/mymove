// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	testing "testing"

	unit "github.com/transcom/mymove/pkg/unit"
)

// PPMEstimator is an autogenerated mock type for the PPMEstimator type
type PPMEstimator struct {
	mock.Mock
}

// EstimateIncentiveWithDefaultChecks provides a mock function with given fields: appCtx, oldPPMShipment, newPPMShipment
func (_m *PPMEstimator) EstimateIncentiveWithDefaultChecks(appCtx appcontext.AppContext, oldPPMShipment models.PPMShipment, newPPMShipment *models.PPMShipment) (*unit.Cents, error) {
	ret := _m.Called(appCtx, oldPPMShipment, newPPMShipment)

	var r0 *unit.Cents
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.PPMShipment, *models.PPMShipment) *unit.Cents); ok {
		r0 = rf(appCtx, oldPPMShipment, newPPMShipment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unit.Cents)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.PPMShipment, *models.PPMShipment) error); ok {
		r1 = rf(appCtx, oldPPMShipment, newPPMShipment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPPMEstimator creates a new instance of PPMEstimator. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPPMEstimator(t testing.TB) *PPMEstimator {
	mock := &PPMEstimator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
