// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	unit "github.com/transcom/mymove/pkg/unit"
)

// PPMEstimator is an autogenerated mock type for the PPMEstimator type
type PPMEstimator struct {
	mock.Mock
}

// CalculatePPMSITEstimatedCost provides a mock function with given fields: appCtx, ppmShipment
func (_m *PPMEstimator) CalculatePPMSITEstimatedCost(appCtx appcontext.AppContext, ppmShipment *models.PPMShipment) (*unit.Cents, error) {
	ret := _m.Called(appCtx, ppmShipment)

	if len(ret) == 0 {
		panic("no return value specified for CalculatePPMSITEstimatedCost")
	}

	var r0 *unit.Cents
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.PPMShipment) (*unit.Cents, error)); ok {
		return rf(appCtx, ppmShipment)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.PPMShipment) *unit.Cents); ok {
		r0 = rf(appCtx, ppmShipment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unit.Cents)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *models.PPMShipment) error); ok {
		r1 = rf(appCtx, ppmShipment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculatePPMSITEstimatedCostBreakdown provides a mock function with given fields: appCtx, ppmShipment
func (_m *PPMEstimator) CalculatePPMSITEstimatedCostBreakdown(appCtx appcontext.AppContext, ppmShipment *models.PPMShipment) (*models.PPMSITEstimatedCostInfo, error) {
	ret := _m.Called(appCtx, ppmShipment)

	if len(ret) == 0 {
		panic("no return value specified for CalculatePPMSITEstimatedCostBreakdown")
	}

	var r0 *models.PPMSITEstimatedCostInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.PPMShipment) (*models.PPMSITEstimatedCostInfo, error)); ok {
		return rf(appCtx, ppmShipment)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.PPMShipment) *models.PPMSITEstimatedCostInfo); ok {
		r0 = rf(appCtx, ppmShipment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PPMSITEstimatedCostInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *models.PPMShipment) error); ok {
		r1 = rf(appCtx, ppmShipment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EstimateIncentiveWithDefaultChecks provides a mock function with given fields: appCtx, oldPPMShipment, newPPMShipment
func (_m *PPMEstimator) EstimateIncentiveWithDefaultChecks(appCtx appcontext.AppContext, oldPPMShipment models.PPMShipment, newPPMShipment *models.PPMShipment) (*unit.Cents, *unit.Cents, error) {
	ret := _m.Called(appCtx, oldPPMShipment, newPPMShipment)

	if len(ret) == 0 {
		panic("no return value specified for EstimateIncentiveWithDefaultChecks")
	}

	var r0 *unit.Cents
	var r1 *unit.Cents
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.PPMShipment, *models.PPMShipment) (*unit.Cents, *unit.Cents, error)); ok {
		return rf(appCtx, oldPPMShipment, newPPMShipment)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.PPMShipment, *models.PPMShipment) *unit.Cents); ok {
		r0 = rf(appCtx, oldPPMShipment, newPPMShipment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unit.Cents)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.PPMShipment, *models.PPMShipment) *unit.Cents); ok {
		r1 = rf(appCtx, oldPPMShipment, newPPMShipment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*unit.Cents)
		}
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, models.PPMShipment, *models.PPMShipment) error); ok {
		r2 = rf(appCtx, oldPPMShipment, newPPMShipment)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FinalIncentiveWithDefaultChecks provides a mock function with given fields: appCtx, oldPPMShipment, newPPMShipment
func (_m *PPMEstimator) FinalIncentiveWithDefaultChecks(appCtx appcontext.AppContext, oldPPMShipment models.PPMShipment, newPPMShipment *models.PPMShipment) (*unit.Cents, error) {
	ret := _m.Called(appCtx, oldPPMShipment, newPPMShipment)

	if len(ret) == 0 {
		panic("no return value specified for FinalIncentiveWithDefaultChecks")
	}

	var r0 *unit.Cents
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.PPMShipment, *models.PPMShipment) (*unit.Cents, error)); ok {
		return rf(appCtx, oldPPMShipment, newPPMShipment)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.PPMShipment, *models.PPMShipment) *unit.Cents); ok {
		r0 = rf(appCtx, oldPPMShipment, newPPMShipment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unit.Cents)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.PPMShipment, *models.PPMShipment) error); ok {
		r1 = rf(appCtx, oldPPMShipment, newPPMShipment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPPMEstimator creates a new instance of PPMEstimator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPPMEstimator(t interface {
	mock.TestingT
	Cleanup(func())
}) *PPMEstimator {
	mock := &PPMEstimator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
