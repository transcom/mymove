// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/transcom/mymove/pkg/models"

	pop "github.com/gobuffalo/pop/v5"

	uuid "github.com/gofrs/uuid"
)

// MoveOrderFetcher is an autogenerated mock type for the MoveOrderFetcher type
type MoveOrderFetcher struct {
	mock.Mock
}

// FetchMoveOrder provides a mock function with given fields: moveTaskOrderID
func (_m *MoveOrderFetcher) FetchMoveOrder(moveTaskOrderID uuid.UUID) (*models.Order, error) {
	ret := _m.Called(moveTaskOrderID)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Order); ok {
		r0 = rf(moveTaskOrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(moveTaskOrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMoveOrders provides a mock function with given fields: officeUserID, options
func (_m *MoveOrderFetcher) ListMoveOrders(officeUserID uuid.UUID, options ...func(*pop.Query)) ([]models.Order, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, officeUserID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func(uuid.UUID, ...func(*pop.Query)) []models.Order); ok {
		r0 = rf(officeUserID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, ...func(*pop.Query)) error); ok {
		r1 = rf(officeUserID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
