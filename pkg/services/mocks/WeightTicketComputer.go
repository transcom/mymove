// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	io "io"

	appcontext "github.com/transcom/mymove/pkg/appcontext"

	mock "github.com/stretchr/testify/mock"

	services "github.com/transcom/mymove/pkg/services"
)

// WeightTicketComputer is an autogenerated mock type for the WeightTicketComputer type
type WeightTicketComputer struct {
	mock.Mock
}

// ParseWeightEstimatorExcelFile provides a mock function with given fields: appCtx, file
func (_m *WeightTicketComputer) ParseWeightEstimatorExcelFile(appCtx appcontext.AppContext, file io.ReadCloser) (*services.WeightEstimatorPages, error) {
	ret := _m.Called(appCtx, file)

	if len(ret) == 0 {
		panic("no return value specified for ParseWeightEstimatorExcelFile")
	}

	var r0 *services.WeightEstimatorPages
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, io.ReadCloser) (*services.WeightEstimatorPages, error)); ok {
		return rf(appCtx, file)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, io.ReadCloser) *services.WeightEstimatorPages); ok {
		r0 = rf(appCtx, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.WeightEstimatorPages)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, io.ReadCloser) error); ok {
		r1 = rf(appCtx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWeightTicketComputer creates a new instance of WeightTicketComputer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeightTicketComputer(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeightTicketComputer {
	mock := &WeightTicketComputer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
