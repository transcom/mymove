// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"

	uuid "github.com/gofrs/uuid"
)

// OrderFetcher is an autogenerated mock type for the OrderFetcher type
type OrderFetcher struct {
	mock.Mock
}

// FetchOrder provides a mock function with given fields: appCtx, moveTaskOrderID
func (_m *OrderFetcher) FetchOrder(appCtx appcontext.AppContext, moveTaskOrderID uuid.UUID) (*models.Order, error) {
	ret := _m.Called(appCtx, moveTaskOrderID)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) *models.Order); ok {
		r0 = rf(appCtx, moveTaskOrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID) error); ok {
		r1 = rf(appCtx, moveTaskOrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrders provides a mock function with given fields: appCtx, officeUserID, params
func (_m *OrderFetcher) ListOrders(appCtx appcontext.AppContext, officeUserID uuid.UUID, params *services.ListOrderParams) ([]models.Move, int, error) {
	ret := _m.Called(appCtx, officeUserID, params)

	var r0 []models.Move
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, *services.ListOrderParams) []models.Move); ok {
		r0 = rf(appCtx, officeUserID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Move)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, *services.ListOrderParams) int); ok {
		r1 = rf(appCtx, officeUserID, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, *services.ListOrderParams) error); ok {
		r2 = rf(appCtx, officeUserID, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewOrderFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderFetcher creates a new instance of OrderFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderFetcher(t mockConstructorTestingTNewOrderFetcher) *OrderFetcher {
	mock := &OrderFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
