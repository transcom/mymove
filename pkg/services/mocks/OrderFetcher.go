// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"

	uuid "github.com/gofrs/uuid"
)

// OrderFetcher is an autogenerated mock type for the OrderFetcher type
type OrderFetcher struct {
	mock.Mock
}

// FetchOrder provides a mock function with given fields: moveTaskOrderID
func (_m *OrderFetcher) FetchOrder(moveTaskOrderID uuid.UUID) (*models.Order, error) {
	ret := _m.Called(moveTaskOrderID)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Order); ok {
		r0 = rf(moveTaskOrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(moveTaskOrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrders provides a mock function with given fields: officeUserID, params
func (_m *OrderFetcher) ListOrders(officeUserID uuid.UUID, params *services.ListOrderParams) ([]models.Move, int, error) {
	ret := _m.Called(officeUserID, params)

	var r0 []models.Move
	if rf, ok := ret.Get(0).(func(uuid.UUID, *services.ListOrderParams) []models.Move); ok {
		r0 = rf(officeUserID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Move)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(uuid.UUID, *services.ListOrderParams) int); ok {
		r1 = rf(officeUserID, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uuid.UUID, *services.ListOrderParams) error); ok {
		r2 = rf(officeUserID, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
