// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	testing "testing"

	uuid "github.com/gofrs/uuid"
)

// SITExtensionCreatorAsTOO is an autogenerated mock type for the SITExtensionCreatorAsTOO type
type SITExtensionCreatorAsTOO struct {
	mock.Mock
}

// CreateSITExtensionAsTOO provides a mock function with given fields: appCtx, sitExtension, shipmentID, eTag
func (_m *SITExtensionCreatorAsTOO) CreateSITExtensionAsTOO(appCtx appcontext.AppContext, sitExtension *models.SITExtension, shipmentID uuid.UUID, eTag string) (*models.MTOShipment, error) {
	ret := _m.Called(appCtx, sitExtension, shipmentID, eTag)

	var r0 *models.MTOShipment
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.SITExtension, uuid.UUID, string) *models.MTOShipment); ok {
		r0 = rf(appCtx, sitExtension, shipmentID, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MTOShipment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *models.SITExtension, uuid.UUID, string) error); ok {
		r1 = rf(appCtx, sitExtension, shipmentID, eTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSITExtensionCreatorAsTOO creates a new instance of SITExtensionCreatorAsTOO. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSITExtensionCreatorAsTOO(t testing.TB) *SITExtensionCreatorAsTOO {
	mock := &SITExtensionCreatorAsTOO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
