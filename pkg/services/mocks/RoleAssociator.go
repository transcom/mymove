// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	roles "github.com/transcom/mymove/pkg/models/roles"

	uuid "github.com/gofrs/uuid"
)

// RoleAssociator is an autogenerated mock type for the RoleAssociator type
type RoleAssociator struct {
	mock.Mock
}

// FetchRoleTypes provides a mock function with given fields: appCtx
func (_m *RoleAssociator) FetchRoleTypes(appCtx appcontext.AppContext) ([]roles.RoleType, error) {
	ret := _m.Called(appCtx)

	if len(ret) == 0 {
		panic("no return value specified for FetchRoleTypes")
	}

	var r0 []roles.RoleType
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext) ([]roles.RoleType, error)); ok {
		return rf(appCtx)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext) []roles.RoleType); ok {
		r0 = rf(appCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.RoleType)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext) error); ok {
		r1 = rf(appCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchRolesForUser provides a mock function with given fields: appCtx, userID
func (_m *RoleAssociator) FetchRolesForUser(appCtx appcontext.AppContext, userID uuid.UUID) (roles.Roles, error) {
	ret := _m.Called(appCtx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FetchRolesForUser")
	}

	var r0 roles.Roles
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) (roles.Roles, error)); ok {
		return rf(appCtx, userID)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) roles.Roles); ok {
		r0 = rf(appCtx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(roles.Roles)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID) error); ok {
		r1 = rf(appCtx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchRolesPrivileges provides a mock function with given fields: appCtx
func (_m *RoleAssociator) FetchRolesPrivileges(appCtx appcontext.AppContext) ([]roles.Role, error) {
	ret := _m.Called(appCtx)

	if len(ret) == 0 {
		panic("no return value specified for FetchRolesPrivileges")
	}

	var r0 []roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext) ([]roles.Role, error)); ok {
		return rf(appCtx)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext) []roles.Role); ok {
		r0 = rf(appCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext) error); ok {
		r1 = rf(appCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRoleAssociator creates a new instance of RoleAssociator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoleAssociator(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoleAssociator {
	mock := &RoleAssociator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
