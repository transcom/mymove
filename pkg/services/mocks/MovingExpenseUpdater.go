// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// MovingExpenseUpdater is an autogenerated mock type for the MovingExpenseUpdater type
type MovingExpenseUpdater struct {
	mock.Mock
}

// UpdateMovingExpense provides a mock function with given fields: appCtx, movingExpense, eTag
func (_m *MovingExpenseUpdater) UpdateMovingExpense(appCtx appcontext.AppContext, movingExpense models.MovingExpense, eTag string) (*models.MovingExpense, error) {
	ret := _m.Called(appCtx, movingExpense, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMovingExpense")
	}

	var r0 *models.MovingExpense
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.MovingExpense, string) (*models.MovingExpense, error)); ok {
		return rf(appCtx, movingExpense, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.MovingExpense, string) *models.MovingExpense); ok {
		r0 = rf(appCtx, movingExpense, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MovingExpense)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.MovingExpense, string) error); ok {
		r1 = rf(appCtx, movingExpense, eTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMovingExpenseUpdater creates a new instance of MovingExpenseUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovingExpenseUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MovingExpenseUpdater {
	mock := &MovingExpenseUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
