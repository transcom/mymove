// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"
)

// UserUploadToPDFConverter is an autogenerated mock type for the UserUploadToPDFConverter type
type UserUploadToPDFConverter struct {
	mock.Mock
}

// ConvertUserUploadsToPDF provides a mock function with given fields: appCtx, userUploads
func (_m *UserUploadToPDFConverter) ConvertUserUploadsToPDF(appCtx appcontext.AppContext, userUploads models.UserUploads) ([]*services.FileInfo, error) {
	ret := _m.Called(appCtx, userUploads)

	var r0 []*services.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.UserUploads) ([]*services.FileInfo, error)); ok {
		return rf(appCtx, userUploads)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.UserUploads) []*services.FileInfo); ok {
		r0 = rf(appCtx, userUploads)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*services.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.UserUploads) error); ok {
		r1 = rf(appCtx, userUploads)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUploadToPDFConverter interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUploadToPDFConverter creates a new instance of UserUploadToPDFConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUploadToPDFConverter(t mockConstructorTestingTNewUserUploadToPDFConverter) *UserUploadToPDFConverter {
	mock := &UserUploadToPDFConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
