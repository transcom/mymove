// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	roles "github.com/transcom/mymove/pkg/models/roles"

	uuid "github.com/gofrs/uuid"
)

// PrivilegeFetcher is an autogenerated mock type for the PrivilegeFetcher type
type PrivilegeFetcher struct {
	mock.Mock
}

// FetchPrivilegeTypes provides a mock function with given fields: appCtx
func (_m *PrivilegeFetcher) FetchPrivilegeTypes(appCtx appcontext.AppContext) ([]roles.PrivilegeType, error) {
	ret := _m.Called(appCtx)

	if len(ret) == 0 {
		panic("no return value specified for FetchPrivilegeTypes")
	}

	var r0 []roles.PrivilegeType
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext) ([]roles.PrivilegeType, error)); ok {
		return rf(appCtx)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext) []roles.PrivilegeType); ok {
		r0 = rf(appCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.PrivilegeType)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext) error); ok {
		r1 = rf(appCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchPrivilegesForUser provides a mock function with given fields: appCtx, userID
func (_m *PrivilegeFetcher) FetchPrivilegesForUser(appCtx appcontext.AppContext, userID uuid.UUID) (roles.Privileges, error) {
	ret := _m.Called(appCtx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FetchPrivilegesForUser")
	}

	var r0 roles.Privileges
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) (roles.Privileges, error)); ok {
		return rf(appCtx, userID)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) roles.Privileges); ok {
		r0 = rf(appCtx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(roles.Privileges)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID) error); ok {
		r1 = rf(appCtx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPrivilegeFetcher creates a new instance of PrivilegeFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrivilegeFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *PrivilegeFetcher {
	mock := &PrivilegeFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
