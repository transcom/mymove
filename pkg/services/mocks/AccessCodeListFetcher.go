// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"
)

// AccessCodeListFetcher is an autogenerated mock type for the AccessCodeListFetcher type
type AccessCodeListFetcher struct {
	mock.Mock
}

// FetchAccessCodeCount provides a mock function with given fields: appCtx, filters
func (_m *AccessCodeListFetcher) FetchAccessCodeCount(appCtx appcontext.AppContext, filters []services.QueryFilter) (int, error) {
	ret := _m.Called(appCtx, filters)

	var r0 int
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []services.QueryFilter) int); ok {
		r0 = rf(appCtx, filters)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, []services.QueryFilter) error); ok {
		r1 = rf(appCtx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAccessCodeList provides a mock function with given fields: appCtx, filters, associations, pagination, ordering
func (_m *AccessCodeListFetcher) FetchAccessCodeList(appCtx appcontext.AppContext, filters []services.QueryFilter, associations services.QueryAssociations, pagination services.Pagination, ordering services.QueryOrder) (models.AccessCodes, error) {
	ret := _m.Called(appCtx, filters, associations, pagination, ordering)

	var r0 models.AccessCodes
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []services.QueryFilter, services.QueryAssociations, services.Pagination, services.QueryOrder) models.AccessCodes); ok {
		r0 = rf(appCtx, filters, associations, pagination, ordering)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.AccessCodes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, []services.QueryFilter, services.QueryAssociations, services.Pagination, services.QueryOrder) error); ok {
		r1 = rf(appCtx, filters, associations, pagination, ordering)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
