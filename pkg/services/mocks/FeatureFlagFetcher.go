// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	appcontext "github.com/transcom/mymove/pkg/appcontext"

	mock "github.com/stretchr/testify/mock"

	services "github.com/transcom/mymove/pkg/services"

	zap "go.uber.org/zap"
)

// FeatureFlagFetcher is an autogenerated mock type for the FeatureFlagFetcher type
type FeatureFlagFetcher struct {
	mock.Mock
}

// GetBooleanFlag provides a mock function with given fields: ctx, logger, entityID, key, flagContext
func (_m *FeatureFlagFetcher) GetBooleanFlag(ctx context.Context, logger *zap.Logger, entityID string, key string, flagContext map[string]string) (services.FeatureFlag, error) {
	ret := _m.Called(ctx, logger, entityID, key, flagContext)

	if len(ret) == 0 {
		panic("no return value specified for GetBooleanFlag")
	}

	var r0 services.FeatureFlag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, string, string, map[string]string) (services.FeatureFlag, error)); ok {
		return rf(ctx, logger, entityID, key, flagContext)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, string, string, map[string]string) services.FeatureFlag); ok {
		r0 = rf(ctx, logger, entityID, key, flagContext)
	} else {
		r0 = ret.Get(0).(services.FeatureFlag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *zap.Logger, string, string, map[string]string) error); ok {
		r1 = rf(ctx, logger, entityID, key, flagContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooleanFlagForUser provides a mock function with given fields: ctx, appCtx, key, flagContext
func (_m *FeatureFlagFetcher) GetBooleanFlagForUser(ctx context.Context, appCtx appcontext.AppContext, key string, flagContext map[string]string) (services.FeatureFlag, error) {
	ret := _m.Called(ctx, appCtx, key, flagContext)

	if len(ret) == 0 {
		panic("no return value specified for GetBooleanFlagForUser")
	}

	var r0 services.FeatureFlag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, appcontext.AppContext, string, map[string]string) (services.FeatureFlag, error)); ok {
		return rf(ctx, appCtx, key, flagContext)
	}
	if rf, ok := ret.Get(0).(func(context.Context, appcontext.AppContext, string, map[string]string) services.FeatureFlag); ok {
		r0 = rf(ctx, appCtx, key, flagContext)
	} else {
		r0 = ret.Get(0).(services.FeatureFlag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, appcontext.AppContext, string, map[string]string) error); ok {
		r1 = rf(ctx, appCtx, key, flagContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariantFlag provides a mock function with given fields: ctx, logger, entityID, key, flagContext
func (_m *FeatureFlagFetcher) GetVariantFlag(ctx context.Context, logger *zap.Logger, entityID string, key string, flagContext map[string]string) (services.FeatureFlag, error) {
	ret := _m.Called(ctx, logger, entityID, key, flagContext)

	if len(ret) == 0 {
		panic("no return value specified for GetVariantFlag")
	}

	var r0 services.FeatureFlag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, string, string, map[string]string) (services.FeatureFlag, error)); ok {
		return rf(ctx, logger, entityID, key, flagContext)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, string, string, map[string]string) services.FeatureFlag); ok {
		r0 = rf(ctx, logger, entityID, key, flagContext)
	} else {
		r0 = ret.Get(0).(services.FeatureFlag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *zap.Logger, string, string, map[string]string) error); ok {
		r1 = rf(ctx, logger, entityID, key, flagContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariantFlagForUser provides a mock function with given fields: ctx, appCtx, key, flagContext
func (_m *FeatureFlagFetcher) GetVariantFlagForUser(ctx context.Context, appCtx appcontext.AppContext, key string, flagContext map[string]string) (services.FeatureFlag, error) {
	ret := _m.Called(ctx, appCtx, key, flagContext)

	if len(ret) == 0 {
		panic("no return value specified for GetVariantFlagForUser")
	}

	var r0 services.FeatureFlag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, appcontext.AppContext, string, map[string]string) (services.FeatureFlag, error)); ok {
		return rf(ctx, appCtx, key, flagContext)
	}
	if rf, ok := ret.Get(0).(func(context.Context, appcontext.AppContext, string, map[string]string) services.FeatureFlag); ok {
		r0 = rf(ctx, appCtx, key, flagContext)
	} else {
		r0 = ret.Get(0).(services.FeatureFlag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, appcontext.AppContext, string, map[string]string) error); ok {
		r1 = rf(ctx, appCtx, key, flagContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFeatureFlagFetcher creates a new instance of FeatureFlagFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeatureFlagFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeatureFlagFetcher {
	mock := &FeatureFlagFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
