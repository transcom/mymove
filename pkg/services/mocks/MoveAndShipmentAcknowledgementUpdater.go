// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// MoveAndShipmentAcknowledgementUpdater is an autogenerated mock type for the MoveAndShipmentAcknowledgementUpdater type
type MoveAndShipmentAcknowledgementUpdater struct {
	mock.Mock
}

// AcknowledgeMovesAndShipments provides a mock function with given fields: appCtx, moves
func (_m *MoveAndShipmentAcknowledgementUpdater) AcknowledgeMovesAndShipments(appCtx appcontext.AppContext, moves *models.Moves) error {
	ret := _m.Called(appCtx, moves)

	if len(ret) == 0 {
		panic("no return value specified for AcknowledgeMovesAndShipments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.Moves) error); ok {
		r0 = rf(appCtx, moves)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMoveAndShipmentAcknowledgementUpdater creates a new instance of MoveAndShipmentAcknowledgementUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMoveAndShipmentAcknowledgementUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MoveAndShipmentAcknowledgementUpdater {
	mock := &MoveAndShipmentAcknowledgementUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
