// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	io "io"

	ghcmessages "github.com/transcom/mymove/pkg/gen/ghcmessages"

	mock "github.com/stretchr/testify/mock"

	models "github.com/transcom/mymove/pkg/models"

	services "github.com/transcom/mymove/pkg/services"

	storage "github.com/transcom/mymove/pkg/storage"

	uuid "github.com/gofrs/uuid"
)

// OrderUpdater is an autogenerated mock type for the OrderUpdater type
type OrderUpdater struct {
	mock.Mock
}

// UpdateAllowanceAsCounselor provides a mock function with given fields: orderID, payload, eTag
func (_m *OrderUpdater) UpdateAllowanceAsCounselor(orderID uuid.UUID, payload ghcmessages.CounselingUpdateAllowancePayload, eTag string) (*models.Order, uuid.UUID, error) {
	ret := _m.Called(orderID, payload, eTag)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(uuid.UUID, ghcmessages.CounselingUpdateAllowancePayload, string) *models.Order); ok {
		r0 = rf(orderID, payload, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 uuid.UUID
	if rf, ok := ret.Get(1).(func(uuid.UUID, ghcmessages.CounselingUpdateAllowancePayload, string) uuid.UUID); ok {
		r1 = rf(orderID, payload, eTag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uuid.UUID, ghcmessages.CounselingUpdateAllowancePayload, string) error); ok {
		r2 = rf(orderID, payload, eTag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateAllowanceAsTOO provides a mock function with given fields: orderID, payload, eTag
func (_m *OrderUpdater) UpdateAllowanceAsTOO(orderID uuid.UUID, payload ghcmessages.UpdateAllowancePayload, eTag string) (*models.Order, uuid.UUID, error) {
	ret := _m.Called(orderID, payload, eTag)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(uuid.UUID, ghcmessages.UpdateAllowancePayload, string) *models.Order); ok {
		r0 = rf(orderID, payload, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 uuid.UUID
	if rf, ok := ret.Get(1).(func(uuid.UUID, ghcmessages.UpdateAllowancePayload, string) uuid.UUID); ok {
		r1 = rf(orderID, payload, eTag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uuid.UUID, ghcmessages.UpdateAllowancePayload, string) error); ok {
		r2 = rf(orderID, payload, eTag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateOrderAsCounselor provides a mock function with given fields: orderID, payload, eTag
func (_m *OrderUpdater) UpdateOrderAsCounselor(orderID uuid.UUID, payload ghcmessages.CounselingUpdateOrderPayload, eTag string) (*models.Order, uuid.UUID, error) {
	ret := _m.Called(orderID, payload, eTag)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(uuid.UUID, ghcmessages.CounselingUpdateOrderPayload, string) *models.Order); ok {
		r0 = rf(orderID, payload, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 uuid.UUID
	if rf, ok := ret.Get(1).(func(uuid.UUID, ghcmessages.CounselingUpdateOrderPayload, string) uuid.UUID); ok {
		r1 = rf(orderID, payload, eTag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uuid.UUID, ghcmessages.CounselingUpdateOrderPayload, string) error); ok {
		r2 = rf(orderID, payload, eTag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateOrderAsTOO provides a mock function with given fields: orderID, payload, eTag
func (_m *OrderUpdater) UpdateOrderAsTOO(orderID uuid.UUID, payload ghcmessages.UpdateOrderPayload, eTag string) (*models.Order, uuid.UUID, error) {
	ret := _m.Called(orderID, payload, eTag)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(uuid.UUID, ghcmessages.UpdateOrderPayload, string) *models.Order); ok {
		r0 = rf(orderID, payload, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 uuid.UUID
	if rf, ok := ret.Get(1).(func(uuid.UUID, ghcmessages.UpdateOrderPayload, string) uuid.UUID); ok {
		r1 = rf(orderID, payload, eTag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uuid.UUID, ghcmessages.UpdateOrderPayload, string) error); ok {
		r2 = rf(orderID, payload, eTag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UploadAmendedOrdersAsCustomer provides a mock function with given fields: logger, userID, orderID, file, filename, storer, eTag
func (_m *OrderUpdater) UploadAmendedOrdersAsCustomer(logger services.Logger, userID uuid.UUID, orderID uuid.UUID, file io.ReadCloser, filename string, storer storage.FileStorer, eTag string) (models.Upload, string, error) {
	ret := _m.Called(logger, userID, orderID, file, filename, storer, eTag)

	var r0 models.Upload
	if rf, ok := ret.Get(0).(func(services.Logger, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer, string) models.Upload); ok {
		r0 = rf(logger, userID, orderID, file, filename, storer, eTag)
	} else {
		r0 = ret.Get(0).(models.Upload)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(services.Logger, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer, string) string); ok {
		r1 = rf(logger, userID, orderID, file, filename, storer, eTag)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(services.Logger, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer, string) error); ok {
		r2 = rf(logger, userID, orderID, file, filename, storer, eTag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
