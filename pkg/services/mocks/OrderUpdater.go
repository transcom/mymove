// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	appcontext "github.com/transcom/mymove/pkg/appcontext"
	ghcmessages "github.com/transcom/mymove/pkg/gen/ghcmessages"

	io "io"

	mock "github.com/stretchr/testify/mock"

	models "github.com/transcom/mymove/pkg/models"

	storage "github.com/transcom/mymove/pkg/storage"

	uuid "github.com/gofrs/uuid"

	validate "github.com/gobuffalo/validate/v3"
)

// OrderUpdater is an autogenerated mock type for the OrderUpdater type
type OrderUpdater struct {
	mock.Mock
}

// UpdateAllowanceAsCounselor provides a mock function with given fields: appCtx, orderID, payload, eTag
func (_m *OrderUpdater) UpdateAllowanceAsCounselor(appCtx appcontext.AppContext, orderID uuid.UUID, payload ghcmessages.CounselingUpdateAllowancePayload, eTag string) (*models.Order, uuid.UUID, error) {
	ret := _m.Called(appCtx, orderID, payload, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAllowanceAsCounselor")
	}

	var r0 *models.Order
	var r1 uuid.UUID
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, ghcmessages.CounselingUpdateAllowancePayload, string) (*models.Order, uuid.UUID, error)); ok {
		return rf(appCtx, orderID, payload, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, ghcmessages.CounselingUpdateAllowancePayload, string) *models.Order); ok {
		r0 = rf(appCtx, orderID, payload, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, ghcmessages.CounselingUpdateAllowancePayload, string) uuid.UUID); ok {
		r1 = rf(appCtx, orderID, payload, eTag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, ghcmessages.CounselingUpdateAllowancePayload, string) error); ok {
		r2 = rf(appCtx, orderID, payload, eTag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateAllowanceAsTOO provides a mock function with given fields: appCtx, orderID, payload, eTag
func (_m *OrderUpdater) UpdateAllowanceAsTOO(appCtx appcontext.AppContext, orderID uuid.UUID, payload ghcmessages.UpdateAllowancePayload, eTag string) (*models.Order, uuid.UUID, error) {
	ret := _m.Called(appCtx, orderID, payload, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAllowanceAsTOO")
	}

	var r0 *models.Order
	var r1 uuid.UUID
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, ghcmessages.UpdateAllowancePayload, string) (*models.Order, uuid.UUID, error)); ok {
		return rf(appCtx, orderID, payload, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, ghcmessages.UpdateAllowancePayload, string) *models.Order); ok {
		r0 = rf(appCtx, orderID, payload, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, ghcmessages.UpdateAllowancePayload, string) uuid.UUID); ok {
		r1 = rf(appCtx, orderID, payload, eTag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, ghcmessages.UpdateAllowancePayload, string) error); ok {
		r2 = rf(appCtx, orderID, payload, eTag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateOrderAsCounselor provides a mock function with given fields: appCtx, orderID, payload, eTag
func (_m *OrderUpdater) UpdateOrderAsCounselor(appCtx appcontext.AppContext, orderID uuid.UUID, payload ghcmessages.CounselingUpdateOrderPayload, eTag string) (*models.Order, uuid.UUID, error) {
	ret := _m.Called(appCtx, orderID, payload, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderAsCounselor")
	}

	var r0 *models.Order
	var r1 uuid.UUID
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, ghcmessages.CounselingUpdateOrderPayload, string) (*models.Order, uuid.UUID, error)); ok {
		return rf(appCtx, orderID, payload, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, ghcmessages.CounselingUpdateOrderPayload, string) *models.Order); ok {
		r0 = rf(appCtx, orderID, payload, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, ghcmessages.CounselingUpdateOrderPayload, string) uuid.UUID); ok {
		r1 = rf(appCtx, orderID, payload, eTag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, ghcmessages.CounselingUpdateOrderPayload, string) error); ok {
		r2 = rf(appCtx, orderID, payload, eTag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateOrderAsTOO provides a mock function with given fields: appCtx, orderID, payload, eTag
func (_m *OrderUpdater) UpdateOrderAsTOO(appCtx appcontext.AppContext, orderID uuid.UUID, payload ghcmessages.UpdateOrderPayload, eTag string) (*models.Order, uuid.UUID, error) {
	ret := _m.Called(appCtx, orderID, payload, eTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderAsTOO")
	}

	var r0 *models.Order
	var r1 uuid.UUID
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, ghcmessages.UpdateOrderPayload, string) (*models.Order, uuid.UUID, error)); ok {
		return rf(appCtx, orderID, payload, eTag)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, ghcmessages.UpdateOrderPayload, string) *models.Order); ok {
		r0 = rf(appCtx, orderID, payload, eTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, ghcmessages.UpdateOrderPayload, string) uuid.UUID); ok {
		r1 = rf(appCtx, orderID, payload, eTag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, ghcmessages.UpdateOrderPayload, string) error); ok {
		r2 = rf(appCtx, orderID, payload, eTag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UploadAmendedOrdersAsCustomer provides a mock function with given fields: appCtx, userID, orderID, file, filename, storer
func (_m *OrderUpdater) UploadAmendedOrdersAsCustomer(appCtx appcontext.AppContext, userID uuid.UUID, orderID uuid.UUID, file io.ReadCloser, filename string, storer storage.FileStorer) (models.Upload, string, *validate.Errors, error) {
	ret := _m.Called(appCtx, userID, orderID, file, filename, storer)

	if len(ret) == 0 {
		panic("no return value specified for UploadAmendedOrdersAsCustomer")
	}

	var r0 models.Upload
	var r1 string
	var r2 *validate.Errors
	var r3 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer) (models.Upload, string, *validate.Errors, error)); ok {
		return rf(appCtx, userID, orderID, file, filename, storer)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer) models.Upload); ok {
		r0 = rf(appCtx, userID, orderID, file, filename, storer)
	} else {
		r0 = ret.Get(0).(models.Upload)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer) string); ok {
		r1 = rf(appCtx, userID, orderID, file, filename, storer)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer) *validate.Errors); ok {
		r2 = rf(appCtx, userID, orderID, file, filename, storer)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*validate.Errors)
		}
	}

	if rf, ok := ret.Get(3).(func(appcontext.AppContext, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer) error); ok {
		r3 = rf(appCtx, userID, orderID, file, filename, storer)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UploadAmendedOrdersAsOffice provides a mock function with given fields: appCtx, userID, orderID, file, filename, storer
func (_m *OrderUpdater) UploadAmendedOrdersAsOffice(appCtx appcontext.AppContext, userID uuid.UUID, orderID uuid.UUID, file io.ReadCloser, filename string, storer storage.FileStorer) (models.Upload, string, *validate.Errors, error) {
	ret := _m.Called(appCtx, userID, orderID, file, filename, storer)

	if len(ret) == 0 {
		panic("no return value specified for UploadAmendedOrdersAsOffice")
	}

	var r0 models.Upload
	var r1 string
	var r2 *validate.Errors
	var r3 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer) (models.Upload, string, *validate.Errors, error)); ok {
		return rf(appCtx, userID, orderID, file, filename, storer)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer) models.Upload); ok {
		r0 = rf(appCtx, userID, orderID, file, filename, storer)
	} else {
		r0 = ret.Get(0).(models.Upload)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer) string); ok {
		r1 = rf(appCtx, userID, orderID, file, filename, storer)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer) *validate.Errors); ok {
		r2 = rf(appCtx, userID, orderID, file, filename, storer)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*validate.Errors)
		}
	}

	if rf, ok := ret.Get(3).(func(appcontext.AppContext, uuid.UUID, uuid.UUID, io.ReadCloser, string, storage.FileStorer) error); ok {
		r3 = rf(appCtx, userID, orderID, file, filename, storer)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewOrderUpdater creates a new instance of OrderUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderUpdater {
	mock := &OrderUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
