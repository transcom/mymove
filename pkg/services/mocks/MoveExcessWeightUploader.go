// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	io "io"

	appcontext "github.com/transcom/mymove/pkg/appcontext"

	mock "github.com/stretchr/testify/mock"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// MoveExcessWeightUploader is an autogenerated mock type for the MoveExcessWeightUploader type
type MoveExcessWeightUploader struct {
	mock.Mock
}

// CreateExcessWeightUpload provides a mock function with given fields: appCtx, moveID, file, uploadFilename, uploadType
func (_m *MoveExcessWeightUploader) CreateExcessWeightUpload(appCtx appcontext.AppContext, moveID uuid.UUID, file io.ReadCloser, uploadFilename string, uploadType models.UploadType) (*models.Move, error) {
	ret := _m.Called(appCtx, moveID, file, uploadFilename, uploadType)

	if len(ret) == 0 {
		panic("no return value specified for CreateExcessWeightUpload")
	}

	var r0 *models.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, io.ReadCloser, string, models.UploadType) (*models.Move, error)); ok {
		return rf(appCtx, moveID, file, uploadFilename, uploadType)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, io.ReadCloser, string, models.UploadType) *models.Move); ok {
		r0 = rf(appCtx, moveID, file, uploadFilename, uploadType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, io.ReadCloser, string, models.UploadType) error); ok {
		r1 = rf(appCtx, moveID, file, uploadFilename, uploadType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMoveExcessWeightUploader creates a new instance of MoveExcessWeightUploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMoveExcessWeightUploader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MoveExcessWeightUploader {
	mock := &MoveExcessWeightUploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
