// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	io "io"

	appcontext "github.com/transcom/mymove/pkg/appcontext"

	mock "github.com/stretchr/testify/mock"
)

// PDFMerger is an autogenerated mock type for the PDFMerger type
type PDFMerger struct {
	mock.Mock
}

// MergePDFs provides a mock function with given fields: appCtx, pdfsToMerge
func (_m *PDFMerger) MergePDFs(appCtx appcontext.AppContext, pdfsToMerge []io.ReadCloser) (io.ReadCloser, error) {
	ret := _m.Called(appCtx, pdfsToMerge)

	if len(ret) == 0 {
		panic("no return value specified for MergePDFs")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []io.ReadCloser) (io.ReadCloser, error)); ok {
		return rf(appCtx, pdfsToMerge)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []io.ReadCloser) io.ReadCloser); ok {
		r0 = rf(appCtx, pdfsToMerge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, []io.ReadCloser) error); ok {
		r1 = rf(appCtx, pdfsToMerge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPDFMerger creates a new instance of PDFMerger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPDFMerger(t interface {
	mock.TestingT
	Cleanup(func())
}) *PDFMerger {
	mock := &PDFMerger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
