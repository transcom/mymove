// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"
	customer_support_remarks "github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/customer_support_remarks"

	models "github.com/transcom/mymove/pkg/models"
)

// CustomerSupportRemarkUpdater is an autogenerated mock type for the CustomerSupportRemarkUpdater type
type CustomerSupportRemarkUpdater struct {
	mock.Mock
}

// UpdateCustomerSupportRemark provides a mock function with given fields: appCtx, params
func (_m *CustomerSupportRemarkUpdater) UpdateCustomerSupportRemark(appCtx appcontext.AppContext, params customer_support_remarks.UpdateCustomerSupportRemarkForMoveParams) (*models.CustomerSupportRemark, error) {
	ret := _m.Called(appCtx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomerSupportRemark")
	}

	var r0 *models.CustomerSupportRemark
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, customer_support_remarks.UpdateCustomerSupportRemarkForMoveParams) (*models.CustomerSupportRemark, error)); ok {
		return rf(appCtx, params)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, customer_support_remarks.UpdateCustomerSupportRemarkForMoveParams) *models.CustomerSupportRemark); ok {
		r0 = rf(appCtx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CustomerSupportRemark)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, customer_support_remarks.UpdateCustomerSupportRemarkForMoveParams) error); ok {
		r1 = rf(appCtx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCustomerSupportRemarkUpdater creates a new instance of CustomerSupportRemarkUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerSupportRemarkUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerSupportRemarkUpdater {
	mock := &CustomerSupportRemarkUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
