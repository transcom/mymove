// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	uuid "github.com/gofrs/uuid"
)

// EvaluationReportFetcher is an autogenerated mock type for the EvaluationReportFetcher type
type EvaluationReportFetcher struct {
	mock.Mock
}

// FetchEvaluationReportByID provides a mock function with given fields: appCtx, reportID, officeUserID
func (_m *EvaluationReportFetcher) FetchEvaluationReportByID(appCtx appcontext.AppContext, reportID uuid.UUID, officeUserID uuid.UUID) (*models.EvaluationReport, error) {
	ret := _m.Called(appCtx, reportID, officeUserID)

	if len(ret) == 0 {
		panic("no return value specified for FetchEvaluationReportByID")
	}

	var r0 *models.EvaluationReport
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, uuid.UUID) (*models.EvaluationReport, error)); ok {
		return rf(appCtx, reportID, officeUserID)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, uuid.UUID) *models.EvaluationReport); ok {
		r0 = rf(appCtx, reportID, officeUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EvaluationReport)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(appCtx, reportID, officeUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchEvaluationReports provides a mock function with given fields: appCtx, reportType, moveID, officeUserID
func (_m *EvaluationReportFetcher) FetchEvaluationReports(appCtx appcontext.AppContext, reportType models.EvaluationReportType, moveID uuid.UUID, officeUserID uuid.UUID) (models.EvaluationReports, error) {
	ret := _m.Called(appCtx, reportType, moveID, officeUserID)

	if len(ret) == 0 {
		panic("no return value specified for FetchEvaluationReports")
	}

	var r0 models.EvaluationReports
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.EvaluationReportType, uuid.UUID, uuid.UUID) (models.EvaluationReports, error)); ok {
		return rf(appCtx, reportType, moveID, officeUserID)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.EvaluationReportType, uuid.UUID, uuid.UUID) models.EvaluationReports); ok {
		r0 = rf(appCtx, reportType, moveID, officeUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.EvaluationReports)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.EvaluationReportType, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(appCtx, reportType, moveID, officeUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEvaluationReportFetcher creates a new instance of EvaluationReportFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvaluationReportFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *EvaluationReportFetcher {
	mock := &EvaluationReportFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
