// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	afero "github.com/spf13/afero"
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	uuid "github.com/gofrs/uuid"
)

// AOAPacketCreator is an autogenerated mock type for the AOAPacketCreator type
type AOAPacketCreator struct {
	mock.Mock
}

// CleanupAOAPacketDir provides a mock function with given fields: dirName
func (_m *AOAPacketCreator) CleanupAOAPacketDir(dirName string) error {
	ret := _m.Called(dirName)

	if len(ret) == 0 {
		panic("no return value specified for CleanupAOAPacketDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dirName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CleanupAOAPacketFile provides a mock function with given fields: packetFile, closeFile
func (_m *AOAPacketCreator) CleanupAOAPacketFile(packetFile afero.File, closeFile bool) error {
	ret := _m.Called(packetFile, closeFile)

	if len(ret) == 0 {
		panic("no return value specified for CleanupAOAPacketFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(afero.File, bool) error); ok {
		r0 = rf(packetFile, closeFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAOAPacket provides a mock function with given fields: appCtx, ppmShipmentID, isPaymentPacket
func (_m *AOAPacketCreator) CreateAOAPacket(appCtx appcontext.AppContext, ppmShipmentID uuid.UUID, isPaymentPacket bool) (afero.File, string, error) {
	ret := _m.Called(appCtx, ppmShipmentID, isPaymentPacket)

	if len(ret) == 0 {
		panic("no return value specified for CreateAOAPacket")
	}

	var r0 afero.File
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, bool) (afero.File, string, error)); ok {
		return rf(appCtx, ppmShipmentID, isPaymentPacket)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID, bool) afero.File); ok {
		r0 = rf(appCtx, ppmShipmentID, isPaymentPacket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.File)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, uuid.UUID, bool) string); ok {
		r1 = rf(appCtx, ppmShipmentID, isPaymentPacket)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(appcontext.AppContext, uuid.UUID, bool) error); ok {
		r2 = rf(appCtx, ppmShipmentID, isPaymentPacket)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VerifyAOAPacketInternal provides a mock function with given fields: appCtx, ppmShipmentID
func (_m *AOAPacketCreator) VerifyAOAPacketInternal(appCtx appcontext.AppContext, ppmShipmentID uuid.UUID) error {
	ret := _m.Called(appCtx, ppmShipmentID)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAOAPacketInternal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, uuid.UUID) error); ok {
		r0 = rf(appCtx, ppmShipmentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAOAPacketCreator creates a new instance of AOAPacketCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAOAPacketCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *AOAPacketCreator {
	mock := &AOAPacketCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
