// Package oapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapi

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"net/http"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets all move orders// (GET /move-orders)
	GetMoveOrderIndex(ctx echo.Context) error
	// Creates a move order// (POST /move-orders)
	CreateMoveOrder(ctx echo.Context) error
	// Deletes a move order by ID// (DELETE /move-orders/{id})
	DeleteMoveOrder(ctx echo.Context, id string) error
	// Gets a move order by ID// (GET /move-orders/{id})
	GetMoveOrder(ctx echo.Context, id string) error
	// Updates a move order by ID// (PATCH /move-orders/{id})
	UpdateMoveOrder(ctx echo.Context, id string) error
	// Change the status of a move order// (PATCH /move-orders/{id}/status)
	UpdateMoveOrderStatus(ctx echo.Context, id string) error
	// Create a line item on a move order// (POST /move-orders/{moveOrderId}/line-items)
	CreateLineItem(ctx echo.Context, moveOrderId string) error
	// Deletes a line item by ID for a move order by ID// (DELETE /move-orders/{moveOrderId}/line-items/{lineItemId})
	DeleteLineItem(ctx echo.Context, moveOrderId string, lineItemId string) error
	// Gets a line item by ID for a move order by ID// (GET /move-orders/{moveOrderId}/line-items/{lineItemId})
	GetLineItemIndex(ctx echo.Context, moveOrderId string, lineItemId string) error
	// Updates a line item by ID for a move order by ID// (PATCH /move-orders/{moveOrderId}/line-items/{lineItemId})
	UpdateLineItem(ctx echo.Context, moveOrderId string, lineItemId string) error
	// Change the status of a line item for a move order by ID// (PATCH /move-orders/{moveOrderId}/line-items/{lineItemId}/status)
	UpdateLineItemStatus(ctx echo.Context, moveOrderId string, lineItemId string) error
	// Gets payment requests// (GET /payment-requests)
	GetPaymentRequests(ctx echo.Context) error
	// Creates a payment request// (POST /payment-requests)
	CreatePaymentRequest(ctx echo.Context) error
	// Fetches a payment request by id// (GET /payment-requests/{paymentRequestId})
	FetchPaymentRequest(ctx echo.Context, paymentRequestId string) error
	// Updates a payment request by id// (PATCH /payment-requests/{paymentRequestId})
	UpdatePaymentRequest(ctx echo.Context, paymentRequestId string) error
	// Updates status of a payment request by id// (PATCH /payment-requests/{paymentRequestId}/status)
	UpdatePaymentRequestStatus(ctx echo.Context, paymentRequestId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMoveOrderIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetMoveOrderIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMoveOrderIndex(ctx)
	return err
}

// CreateMoveOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMoveOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateMoveOrder(ctx)
	return err
}

// DeleteMoveOrder converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMoveOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMoveOrder(ctx, id)
	return err
}

// GetMoveOrder converts echo context to params.
func (w *ServerInterfaceWrapper) GetMoveOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMoveOrder(ctx, id)
	return err
}

// UpdateMoveOrder converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMoveOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateMoveOrder(ctx, id)
	return err
}

// UpdateMoveOrderStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMoveOrderStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateMoveOrderStatus(ctx, id)
	return err
}

// CreateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "moveOrderId" -------------
	var moveOrderId string

	err = runtime.BindStyledParameter("simple", false, "moveOrderId", ctx.Param("moveOrderId"), &moveOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter moveOrderId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateLineItem(ctx, moveOrderId)
	return err
}

// DeleteLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "moveOrderId" -------------
	var moveOrderId string

	err = runtime.BindStyledParameter("simple", false, "moveOrderId", ctx.Param("moveOrderId"), &moveOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter moveOrderId: %s", err))
	}

	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameter("simple", false, "lineItemId", ctx.Param("lineItemId"), &lineItemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteLineItem(ctx, moveOrderId, lineItemId)
	return err
}

// GetLineItemIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItemIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "moveOrderId" -------------
	var moveOrderId string

	err = runtime.BindStyledParameter("simple", false, "moveOrderId", ctx.Param("moveOrderId"), &moveOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter moveOrderId: %s", err))
	}

	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameter("simple", false, "lineItemId", ctx.Param("lineItemId"), &lineItemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLineItemIndex(ctx, moveOrderId, lineItemId)
	return err
}

// UpdateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "moveOrderId" -------------
	var moveOrderId string

	err = runtime.BindStyledParameter("simple", false, "moveOrderId", ctx.Param("moveOrderId"), &moveOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter moveOrderId: %s", err))
	}

	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameter("simple", false, "lineItemId", ctx.Param("lineItemId"), &lineItemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateLineItem(ctx, moveOrderId, lineItemId)
	return err
}

// UpdateLineItemStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLineItemStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "moveOrderId" -------------
	var moveOrderId string

	err = runtime.BindStyledParameter("simple", false, "moveOrderId", ctx.Param("moveOrderId"), &moveOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter moveOrderId: %s", err))
	}

	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameter("simple", false, "lineItemId", ctx.Param("lineItemId"), &lineItemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateLineItemStatus(ctx, moveOrderId, lineItemId)
	return err
}

// GetPaymentRequests converts echo context to params.
func (w *ServerInterfaceWrapper) GetPaymentRequests(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPaymentRequests(ctx)
	return err
}

// CreatePaymentRequest converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePaymentRequest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePaymentRequest(ctx)
	return err
}

// FetchPaymentRequest converts echo context to params.
func (w *ServerInterfaceWrapper) FetchPaymentRequest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "paymentRequestId" -------------
	var paymentRequestId string

	err = runtime.BindStyledParameter("simple", false, "paymentRequestId", ctx.Param("paymentRequestId"), &paymentRequestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymentRequestId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchPaymentRequest(ctx, paymentRequestId)
	return err
}

// UpdatePaymentRequest converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePaymentRequest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "paymentRequestId" -------------
	var paymentRequestId string

	err = runtime.BindStyledParameter("simple", false, "paymentRequestId", ctx.Param("paymentRequestId"), &paymentRequestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymentRequestId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePaymentRequest(ctx, paymentRequestId)
	return err
}

// UpdatePaymentRequestStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePaymentRequestStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "paymentRequestId" -------------
	var paymentRequestId string

	err = runtime.BindStyledParameter("simple", false, "paymentRequestId", ctx.Param("paymentRequestId"), &paymentRequestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymentRequestId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePaymentRequestStatus(ctx, paymentRequestId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/move-orders", wrapper.GetMoveOrderIndex)
	router.POST("/move-orders", wrapper.CreateMoveOrder)
	router.DELETE("/move-orders/:id", wrapper.DeleteMoveOrder)
	router.GET("/move-orders/:id", wrapper.GetMoveOrder)
	router.PATCH("/move-orders/:id", wrapper.UpdateMoveOrder)
	router.PATCH("/move-orders/:id/status", wrapper.UpdateMoveOrderStatus)
	router.POST("/move-orders/:moveOrderId/line-items", wrapper.CreateLineItem)
	router.DELETE("/move-orders/:moveOrderId/line-items/:lineItemId", wrapper.DeleteLineItem)
	router.GET("/move-orders/:moveOrderId/line-items/:lineItemId", wrapper.GetLineItemIndex)
	router.PATCH("/move-orders/:moveOrderId/line-items/:lineItemId", wrapper.UpdateLineItem)
	router.PATCH("/move-orders/:moveOrderId/line-items/:lineItemId/status", wrapper.UpdateLineItemStatus)
	router.GET("/payment-requests", wrapper.GetPaymentRequests)
	router.POST("/payment-requests", wrapper.CreatePaymentRequest)
	router.GET("/payment-requests/:paymentRequestId", wrapper.FetchPaymentRequest)
	router.PATCH("/payment-requests/:paymentRequestId", wrapper.UpdatePaymentRequest)
	router.PATCH("/payment-requests/:paymentRequestId/status", wrapper.UpdatePaymentRequestStatus)

}
