// Package Oapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// createMoveOrderJSONBody defines parameters for CreateMoveOrder.
type createMoveOrderJSONBody struct {
	CreatedAt                    *time.Time `json:"created_at,omitempty"`
	DeletedAt                    *time.Time `json:"deleted_at,omitempty"`
	DestinationDutyStation       *string    `json:"destination_duty_station,omitempty"`
	DestinationPpso              *string    `json:"destination_ppso,omitempty"`
	ElectronicCopyOfOrders       *string    `json:"electronic_copy_of_orders,omitempty"`
	Id                           *string    `json:"id,omitempty"`
	LineOfAccounting             *string    `json:"line_of_accounting,omitempty"`
	MoveDate                     *time.Time `json:"move_date,omitempty"`
	OrdersType                   *string    `json:"orders_type,omitempty"`
	OriginDutyStation            *string    `json:"origin_duty_station,omitempty"`
	OriginPpso                   *string    `json:"origin_ppso,omitempty"`
	PaymentMethod                *string    `json:"payment_method,omitempty"`
	Status                       *string    `json:"status,omitempty"`
	Tac                          *string    `json:"tac,omitempty"`
	TravelAuthorizationDate      *time.Time `json:"travel_authorization_date,omitempty"`
	TravelAuthorizationIssuingHq *string    `json:"travel_authorization_issuing_hq,omitempty"`
	TravelAuthorizationName      *string    `json:"travel_authorization_name,omitempty"`
	UpdatedAt                    *time.Time `json:"updated_at,omitempty"`
}

// updateMoveOrderJSONBody defines parameters for UpdateMoveOrder.
type updateMoveOrderJSONBody struct {
	CreatedAt                    *time.Time `json:"created_at,omitempty"`
	DeletedAt                    *time.Time `json:"deleted_at,omitempty"`
	DestinationDutyStation       *string    `json:"destination_duty_station,omitempty"`
	DestinationPpso              *string    `json:"destination_ppso,omitempty"`
	ElectronicCopyOfOrders       *string    `json:"electronic_copy_of_orders,omitempty"`
	Id                           *string    `json:"id,omitempty"`
	LineOfAccounting             *string    `json:"line_of_accounting,omitempty"`
	MoveDate                     *time.Time `json:"move_date,omitempty"`
	OrdersType                   *string    `json:"orders_type,omitempty"`
	OriginDutyStation            *string    `json:"origin_duty_station,omitempty"`
	OriginPpso                   *string    `json:"origin_ppso,omitempty"`
	PaymentMethod                *string    `json:"payment_method,omitempty"`
	Status                       *string    `json:"status,omitempty"`
	Tac                          *string    `json:"tac,omitempty"`
	TravelAuthorizationDate      *time.Time `json:"travel_authorization_date,omitempty"`
	TravelAuthorizationIssuingHq *string    `json:"travel_authorization_issuing_hq,omitempty"`
	TravelAuthorizationName      *string    `json:"travel_authorization_name,omitempty"`
	UpdatedAt                    *time.Time `json:"updated_at,omitempty"`
}

// updateMoveOrderStatusJSONBody defines parameters for UpdateMoveOrderStatus.
type updateMoveOrderStatusJSONBody struct {
	Status *string `json:"status,omitempty"`
}

// updateLineItemStatusJSONBody defines parameters for UpdateLineItemStatus.
type updateLineItemStatusJSONBody struct {
	Status *string `json:"status,omitempty"`
}

// createPaymentRequestJSONBody defines parameters for CreatePaymentRequest.
type createPaymentRequestJSONBody struct {
	IsFinal               *bool     `json:"isFinal,omitempty"`
	MoveOrderId           *string   `json:"moveOrderId,omitempty"`
	MoveOrderLineItemIds  *[]string `json:"moveOrderLineItemIds,omitempty"`
	ProofOfServicePackage *struct {
		Id      *string `json:"id,omitempty"`
		Uploads *[]struct {
			Bytes       int        `json:"bytes"`
			ContentType *string    `json:"contentType,omitempty"`
			CreatedAt   *time.Time `json:"createdAt,omitempty"`
			Filename    string     `json:"filename"`
			Id          string     `json:"id"`
			UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
			Url         string     `json:"url"`
		} `json:"uploads,omitempty"`
	} `json:"proofOfServicePackage,omitempty"`
}

// updatePaymentRequestJSONBody defines parameters for UpdatePaymentRequest.
type updatePaymentRequestJSONBody struct {
	MoveOrderLineItemIds  *[]string `json:"moveOrderLineItemIds,omitempty"`
	ProofOfServicePackage *struct {
		Id      *string `json:"id,omitempty"`
		Uploads *[]struct {
			Bytes       int        `json:"bytes"`
			ContentType *string    `json:"contentType,omitempty"`
			CreatedAt   *time.Time `json:"createdAt,omitempty"`
			Filename    string     `json:"filename"`
			Id          string     `json:"id"`
			UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
			Url         string     `json:"url"`
		} `json:"uploads,omitempty"`
	} `json:"proofOfServicePackage,omitempty"`
}

// updatePaymentRequestStatusJSONBody defines parameters for UpdatePaymentRequestStatus.
type updatePaymentRequestStatusJSONBody struct {
	RejectionReason *string `json:"rejectionReason,omitempty"`
	Status          *string `json:"status,omitempty"`
}

// CreateMoveOrderRequestBody defines body for CreateMoveOrder for application/json ContentType.
type CreateMoveOrderJSONRequestBody createMoveOrderJSONBody

// UpdateMoveOrderRequestBody defines body for UpdateMoveOrder for application/json ContentType.
type UpdateMoveOrderJSONRequestBody updateMoveOrderJSONBody

// UpdateMoveOrderStatusRequestBody defines body for UpdateMoveOrderStatus for application/json ContentType.
type UpdateMoveOrderStatusJSONRequestBody updateMoveOrderStatusJSONBody

// UpdateLineItemStatusRequestBody defines body for UpdateLineItemStatus for application/json ContentType.
type UpdateLineItemStatusJSONRequestBody updateLineItemStatusJSONBody

// CreatePaymentRequestRequestBody defines body for CreatePaymentRequest for application/json ContentType.
type CreatePaymentRequestJSONRequestBody createPaymentRequestJSONBody

// UpdatePaymentRequestRequestBody defines body for UpdatePaymentRequest for application/json ContentType.
type UpdatePaymentRequestJSONRequestBody updatePaymentRequestJSONBody

// UpdatePaymentRequestStatusRequestBody defines body for UpdatePaymentRequestStatus for application/json ContentType.
type UpdatePaymentRequestStatusJSONRequestBody updatePaymentRequestStatusJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets all move orders// (GET /move-orders)
	GetMoveOrderIndex(ctx echo.Context) error
	// Creates a move order// (POST /move-orders)
	CreateMoveOrder(ctx echo.Context) error
	// Deletes a move order by ID// (DELETE /move-orders/{id})
	DeleteMoveOrder(ctx echo.Context, id string) error
	// Gets a move order by ID// (GET /move-orders/{id})
	GetMoveOrder(ctx echo.Context, id string) error
	// Updates a move order by ID// (PATCH /move-orders/{id})
	UpdateMoveOrder(ctx echo.Context, id string) error
	// Change the status of a move order// (PATCH /move-orders/{id}/status)
	UpdateMoveOrderStatus(ctx echo.Context, id string) error
	// Deletes a line item by ID for a move order by ID// (DELETE /move-orders/{moveOrderId}/line-items/{lineItemId})
	DeleteLineItem(ctx echo.Context, moveOrderId string, lineItemId string) error
	// Gets a line item by ID for a move order by ID// (GET /move-orders/{moveOrderId}/line-items/{lineItemId})
	GetLineItemIndex(ctx echo.Context, moveOrderId string, lineItemId string) error
	// Updates a line item by ID for a move order by ID// (PATCH /move-orders/{moveOrderId}/line-items/{lineItemId})
	UpdateLineItem(ctx echo.Context, moveOrderId string, lineItemId string) error
	// Change the status of a line item for a move order by ID// (PATCH /move-orders/{moveOrderId}/line-items/{lineItemId}/status)
	UpdateLineItemStatus(ctx echo.Context, moveOrderId string, lineItemId string) error
	// Gets payment requests// (GET /payment-requests)
	GetPaymentRequests(ctx echo.Context) error
	// Creates a payment request// (POST /payment-requests)
	CreatePaymentRequest(ctx echo.Context) error
	// Fetches a payment request by id// (GET /payment-requests/{paymentRequestId})
	FetchPaymentRequest(ctx echo.Context, paymentRequestId string) error
	// Updates a payment request by id// (PATCH /payment-requests/{paymentRequestId})
	UpdatePaymentRequest(ctx echo.Context, paymentRequestId string) error
	// Updates status of a payment request by id// (PATCH /payment-requests/{paymentRequestId}/status)
	UpdatePaymentRequestStatus(ctx echo.Context, paymentRequestId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMoveOrderIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetMoveOrderIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMoveOrderIndex(ctx)
	return err
}

// CreateMoveOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMoveOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateMoveOrder(ctx)
	return err
}

// DeleteMoveOrder converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMoveOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMoveOrder(ctx, id)
	return err
}

// GetMoveOrder converts echo context to params.
func (w *ServerInterfaceWrapper) GetMoveOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMoveOrder(ctx, id)
	return err
}

// UpdateMoveOrder converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMoveOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateMoveOrder(ctx, id)
	return err
}

// UpdateMoveOrderStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMoveOrderStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateMoveOrderStatus(ctx, id)
	return err
}

// DeleteLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "moveOrderId" -------------
	var moveOrderId string

	err = runtime.BindStyledParameter("simple", false, "moveOrderId", ctx.Param("moveOrderId"), &moveOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter moveOrderId: %s", err))
	}

	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameter("simple", false, "lineItemId", ctx.Param("lineItemId"), &lineItemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteLineItem(ctx, moveOrderId, lineItemId)
	return err
}

// GetLineItemIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItemIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "moveOrderId" -------------
	var moveOrderId string

	err = runtime.BindStyledParameter("simple", false, "moveOrderId", ctx.Param("moveOrderId"), &moveOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter moveOrderId: %s", err))
	}

	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameter("simple", false, "lineItemId", ctx.Param("lineItemId"), &lineItemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLineItemIndex(ctx, moveOrderId, lineItemId)
	return err
}

// UpdateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "moveOrderId" -------------
	var moveOrderId string

	err = runtime.BindStyledParameter("simple", false, "moveOrderId", ctx.Param("moveOrderId"), &moveOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter moveOrderId: %s", err))
	}

	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameter("simple", false, "lineItemId", ctx.Param("lineItemId"), &lineItemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateLineItem(ctx, moveOrderId, lineItemId)
	return err
}

// UpdateLineItemStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLineItemStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "moveOrderId" -------------
	var moveOrderId string

	err = runtime.BindStyledParameter("simple", false, "moveOrderId", ctx.Param("moveOrderId"), &moveOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter moveOrderId: %s", err))
	}

	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameter("simple", false, "lineItemId", ctx.Param("lineItemId"), &lineItemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateLineItemStatus(ctx, moveOrderId, lineItemId)
	return err
}

// GetPaymentRequests converts echo context to params.
func (w *ServerInterfaceWrapper) GetPaymentRequests(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPaymentRequests(ctx)
	return err
}

// CreatePaymentRequest converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePaymentRequest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePaymentRequest(ctx)
	return err
}

// FetchPaymentRequest converts echo context to params.
func (w *ServerInterfaceWrapper) FetchPaymentRequest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "paymentRequestId" -------------
	var paymentRequestId string

	err = runtime.BindStyledParameter("simple", false, "paymentRequestId", ctx.Param("paymentRequestId"), &paymentRequestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymentRequestId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchPaymentRequest(ctx, paymentRequestId)
	return err
}

// UpdatePaymentRequest converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePaymentRequest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "paymentRequestId" -------------
	var paymentRequestId string

	err = runtime.BindStyledParameter("simple", false, "paymentRequestId", ctx.Param("paymentRequestId"), &paymentRequestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymentRequestId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePaymentRequest(ctx, paymentRequestId)
	return err
}

// UpdatePaymentRequestStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePaymentRequestStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "paymentRequestId" -------------
	var paymentRequestId string

	err = runtime.BindStyledParameter("simple", false, "paymentRequestId", ctx.Param("paymentRequestId"), &paymentRequestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymentRequestId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePaymentRequestStatus(ctx, paymentRequestId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/move-orders", wrapper.GetMoveOrderIndex)
	router.POST("/move-orders", wrapper.CreateMoveOrder)
	router.DELETE("/move-orders/:id", wrapper.DeleteMoveOrder)
	router.GET("/move-orders/:id", wrapper.GetMoveOrder)
	router.PATCH("/move-orders/:id", wrapper.UpdateMoveOrder)
	router.PATCH("/move-orders/:id/status", wrapper.UpdateMoveOrderStatus)
	router.DELETE("/move-orders/:moveOrderId/line-items/:lineItemId", wrapper.DeleteLineItem)
	router.GET("/move-orders/:moveOrderId/line-items/:lineItemId", wrapper.GetLineItemIndex)
	router.PATCH("/move-orders/:moveOrderId/line-items/:lineItemId", wrapper.UpdateLineItem)
	router.PATCH("/move-orders/:moveOrderId/line-items/:lineItemId/status", wrapper.UpdateLineItemStatus)
	router.GET("/payment-requests", wrapper.GetPaymentRequests)
	router.POST("/payment-requests", wrapper.CreatePaymentRequest)
	router.GET("/payment-requests/:paymentRequestId", wrapper.FetchPaymentRequest)
	router.PATCH("/payment-requests/:paymentRequestId", wrapper.UpdatePaymentRequest)
	router.PATCH("/payment-requests/:paymentRequestId/status", wrapper.UpdatePaymentRequestStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

