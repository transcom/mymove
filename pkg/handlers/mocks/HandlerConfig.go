// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	appcontext "github.com/transcom/mymove/pkg/appcontext"
	auth "github.com/transcom/mymove/pkg/auth"

	dpsauth "github.com/transcom/mymove/pkg/dpsauth"

	handlers "github.com/transcom/mymove/pkg/handlers"

	http "net/http"

	iws "github.com/transcom/mymove/pkg/iws"

	middleware "github.com/go-openapi/runtime/middleware"

	mock "github.com/stretchr/testify/mock"

	notifications "github.com/transcom/mymove/pkg/notifications"

	route "github.com/transcom/mymove/pkg/route"

	scs "github.com/alexedwards/scs/v2"

	sequence "github.com/transcom/mymove/pkg/db/sequence"

	services "github.com/transcom/mymove/pkg/services"

	storage "github.com/transcom/mymove/pkg/storage"

	testing "testing"

	uuid "github.com/gofrs/uuid"
)

// HandlerConfig is an autogenerated mock type for the HandlerConfig type
type HandlerConfig struct {
	mock.Mock
}

// AppContextFromRequest provides a mock function with given fields: r
func (_m *HandlerConfig) AppContextFromRequest(r *http.Request) appcontext.AppContext {
	ret := _m.Called(r)

	var r0 appcontext.AppContext
	if rf, ok := ret.Get(0).(func(*http.Request) appcontext.AppContext); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(appcontext.AppContext)
		}
	}

	return r0
}

// AppNames provides a mock function with given fields:
func (_m *HandlerConfig) AppNames() auth.ApplicationServername {
	ret := _m.Called()

	var r0 auth.ApplicationServername
	if rf, ok := ret.Get(0).(func() auth.ApplicationServername); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(auth.ApplicationServername)
	}

	return r0
}

// AuditableAppContextFromRequestWithErrors provides a mock function with given fields: _a0, _a1
func (_m *HandlerConfig) AuditableAppContextFromRequestWithErrors(_a0 *http.Request, _a1 func(appcontext.AppContext) (middleware.Responder, error)) middleware.Responder {
	ret := _m.Called(_a0, _a1)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(*http.Request, func(appcontext.AppContext) (middleware.Responder, error)) middleware.Responder); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// CookieSecret provides a mock function with given fields:
func (_m *HandlerConfig) CookieSecret() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DPSAuthParams provides a mock function with given fields:
func (_m *HandlerConfig) DPSAuthParams() dpsauth.Params {
	ret := _m.Called()

	var r0 dpsauth.Params
	if rf, ok := ret.Get(0).(func() dpsauth.Params); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dpsauth.Params)
	}

	return r0
}

// DtodPlanner provides a mock function with given fields:
func (_m *HandlerConfig) DtodPlanner() route.Planner {
	ret := _m.Called()

	var r0 route.Planner
	if rf, ok := ret.Get(0).(func() route.Planner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Planner)
		}
	}

	return r0
}

// FileStorer provides a mock function with given fields:
func (_m *HandlerConfig) FileStorer() storage.FileStorer {
	ret := _m.Called()

	var r0 storage.FileStorer
	if rf, ok := ret.Get(0).(func() storage.FileStorer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.FileStorer)
		}
	}

	return r0
}

// GetFeatureFlag provides a mock function with given fields: name
func (_m *HandlerConfig) GetFeatureFlag(name string) bool {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetTraceIDFromRequest provides a mock function with given fields: r
func (_m *HandlerConfig) GetTraceIDFromRequest(r *http.Request) uuid.UUID {
	ret := _m.Called(r)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(*http.Request) uuid.UUID); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// GexSender provides a mock function with given fields:
func (_m *HandlerConfig) GexSender() services.GexSender {
	ret := _m.Called()

	var r0 services.GexSender
	if rf, ok := ret.Get(0).(func() services.GexSender); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.GexSender)
		}
	}

	return r0
}

// HHGPlanner provides a mock function with given fields:
func (_m *HandlerConfig) HHGPlanner() route.Planner {
	ret := _m.Called()

	var r0 route.Planner
	if rf, ok := ret.Get(0).(func() route.Planner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Planner)
		}
	}

	return r0
}

// ICNSequencer provides a mock function with given fields:
func (_m *HandlerConfig) ICNSequencer() sequence.Sequencer {
	ret := _m.Called()

	var r0 sequence.Sequencer
	if rf, ok := ret.Get(0).(func() sequence.Sequencer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sequence.Sequencer)
		}
	}

	return r0
}

// IWSPersonLookup provides a mock function with given fields:
func (_m *HandlerConfig) IWSPersonLookup() iws.PersonLookup {
	ret := _m.Called()

	var r0 iws.PersonLookup
	if rf, ok := ret.Get(0).(func() iws.PersonLookup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iws.PersonLookup)
		}
	}

	return r0
}

// NotificationSender provides a mock function with given fields:
func (_m *HandlerConfig) NotificationSender() notifications.NotificationSender {
	ret := _m.Called()

	var r0 notifications.NotificationSender
	if rf, ok := ret.Get(0).(func() notifications.NotificationSender); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(notifications.NotificationSender)
		}
	}

	return r0
}

// Planner provides a mock function with given fields:
func (_m *HandlerConfig) Planner() route.Planner {
	ret := _m.Called()

	var r0 route.Planner
	if rf, ok := ret.Get(0).(func() route.Planner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Planner)
		}
	}

	return r0
}

// SendProductionInvoice provides a mock function with given fields:
func (_m *HandlerConfig) SendProductionInvoice() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SessionManager provides a mock function with given fields: session
func (_m *HandlerConfig) SessionManager(session *auth.Session) *scs.SessionManager {
	ret := _m.Called(session)

	var r0 *scs.SessionManager
	if rf, ok := ret.Get(0).(func(*auth.Session) *scs.SessionManager); ok {
		r0 = rf(session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scs.SessionManager)
		}
	}

	return r0
}

// SetAppNames provides a mock function with given fields: appNames
func (_m *HandlerConfig) SetAppNames(appNames auth.ApplicationServername) {
	_m.Called(appNames)
}

// SetCookieSecret provides a mock function with given fields: secret
func (_m *HandlerConfig) SetCookieSecret(secret string) {
	_m.Called(secret)
}

// SetDPSAuthParams provides a mock function with given fields: params
func (_m *HandlerConfig) SetDPSAuthParams(params dpsauth.Params) {
	_m.Called(params)
}

// SetDtodPlanner provides a mock function with given fields: planner
func (_m *HandlerConfig) SetDtodPlanner(planner route.Planner) {
	_m.Called(planner)
}

// SetFeatureFlag provides a mock function with given fields: flags
func (_m *HandlerConfig) SetFeatureFlag(flags handlers.FeatureFlag) {
	_m.Called(flags)
}

// SetFileStorer provides a mock function with given fields: storer
func (_m *HandlerConfig) SetFileStorer(storer storage.FileStorer) {
	_m.Called(storer)
}

// SetGexSender provides a mock function with given fields: gexSender
func (_m *HandlerConfig) SetGexSender(gexSender services.GexSender) {
	_m.Called(gexSender)
}

// SetHHGPlanner provides a mock function with given fields: planner
func (_m *HandlerConfig) SetHHGPlanner(planner route.Planner) {
	_m.Called(planner)
}

// SetICNSequencer provides a mock function with given fields: sequencer
func (_m *HandlerConfig) SetICNSequencer(sequencer sequence.Sequencer) {
	_m.Called(sequencer)
}

// SetIWSPersonLookup provides a mock function with given fields: rbs
func (_m *HandlerConfig) SetIWSPersonLookup(rbs iws.PersonLookup) {
	_m.Called(rbs)
}

// SetNotificationSender provides a mock function with given fields: sender
func (_m *HandlerConfig) SetNotificationSender(sender notifications.NotificationSender) {
	_m.Called(sender)
}

// SetPlanner provides a mock function with given fields: planner
func (_m *HandlerConfig) SetPlanner(planner route.Planner) {
	_m.Called(planner)
}

// SetSendProductionInvoice provides a mock function with given fields: sendProductionInvoice
func (_m *HandlerConfig) SetSendProductionInvoice(sendProductionInvoice bool) {
	_m.Called(sendProductionInvoice)
}

// SetSessionManagers provides a mock function with given fields: sessionManagers
func (_m *HandlerConfig) SetSessionManagers(sessionManagers [3]*scs.SessionManager) {
	_m.Called(sessionManagers)
}

// SetUseSecureCookie provides a mock function with given fields: useSecureCookie
func (_m *HandlerConfig) SetUseSecureCookie(useSecureCookie bool) {
	_m.Called(useSecureCookie)
}

// UseSecureCookie provides a mock function with given fields:
func (_m *HandlerConfig) UseSecureCookie() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewHandlerConfig creates a new instance of HandlerConfig. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewHandlerConfig(t testing.TB) *HandlerConfig {
	mock := &HandlerConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
