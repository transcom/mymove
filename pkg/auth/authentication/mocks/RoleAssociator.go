// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/transcom/mymove/pkg/models"

	roles "github.com/transcom/mymove/pkg/models/roles"

	uuid "github.com/gofrs/uuid"
)

// RoleAssociator is an autogenerated mock type for the RoleAssociator type
type RoleAssociator struct {
	mock.Mock
}

// AssociateAdminUser provides a mock function with given fields: user
func (_m *RoleAssociator) AssociateAdminUser(user *models.User) (uuid.UUID, error) {
	ret := _m.Called(user)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(*models.User) uuid.UUID); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateOfficeUser provides a mock function with given fields: user
func (_m *RoleAssociator) AssociateOfficeUser(user *models.User) (uuid.UUID, error) {
	ret := _m.Called(user)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(*models.User) uuid.UUID); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAdminUser provides a mock function with given fields: email
func (_m *RoleAssociator) FetchAdminUser(email string) (*models.AdminUser, error) {
	ret := _m.Called(email)

	var r0 *models.AdminUser
	if rf, ok := ret.Get(0).(func(string) *models.AdminUser); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AdminUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOfficeUser provides a mock function with given fields: email
func (_m *RoleAssociator) FetchOfficeUser(email string) (*models.OfficeUser, error) {
	ret := _m.Called(email)

	var r0 *models.OfficeUser
	if rf, ok := ret.Get(0).(func(string) *models.OfficeUser); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OfficeUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUserIdentity provides a mock function with given fields: user
func (_m *RoleAssociator) FetchUserIdentity(user *models.User) (*models.UserIdentity, error) {
	ret := _m.Called(user)

	var r0 *models.UserIdentity
	if rf, ok := ret.Get(0).(func(*models.User) *models.UserIdentity); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserIdentity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyHasTOORole provides a mock function with given fields: identity
func (_m *RoleAssociator) VerifyHasTOORole(identity *models.UserIdentity) (roles.Role, error) {
	ret := _m.Called(identity)

	var r0 roles.Role
	if rf, ok := ret.Get(0).(func(*models.UserIdentity) roles.Role); ok {
		r0 = rf(identity)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.UserIdentity) error); ok {
		r1 = rf(identity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
