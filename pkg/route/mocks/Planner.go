// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/transcom/mymove/pkg/models"

	route "github.com/transcom/mymove/pkg/route"
)

// Planner is an autogenerated mock type for the Planner type
type Planner struct {
	mock.Mock
}

// LatLongTransitDistance provides a mock function with given fields: source, destination
func (_m *Planner) LatLongTransitDistance(source route.LatLong, destination route.LatLong) (int, error) {
	ret := _m.Called(source, destination)

	var r0 int
	if rf, ok := ret.Get(0).(func(route.LatLong, route.LatLong) int); ok {
		r0 = rf(source, destination)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(route.LatLong, route.LatLong) error); ok {
		r1 = rf(source, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransitDistance provides a mock function with given fields: source, destination
func (_m *Planner) TransitDistance(source *models.Address, destination *models.Address) (int, error) {
	ret := _m.Called(source, destination)

	var r0 int
	if rf, ok := ret.Get(0).(func(*models.Address, *models.Address) int); ok {
		r0 = rf(source, destination)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Address, *models.Address) error); ok {
		r1 = rf(source, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Zip3TransitDistance provides a mock function with given fields: source, destination
func (_m *Planner) Zip3TransitDistance(source string, destination string) (int, error) {
	ret := _m.Called(source, destination)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(source, destination)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(source, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Zip5TransitDistance provides a mock function with given fields: source, destination
func (_m *Planner) Zip5TransitDistance(source string, destination string) (int, error) {
	ret := _m.Called(source, destination)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(source, destination)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(source, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Zip5TransitDistanceLineHaul provides a mock function with given fields: source, destination
func (_m *Planner) Zip5TransitDistanceLineHaul(source string, destination string) (int, error) {
	ret := _m.Called(source, destination)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(source, destination)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(source, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
