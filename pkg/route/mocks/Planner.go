// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"

	route "github.com/transcom/mymove/pkg/route"
)

// Planner is an autogenerated mock type for the Planner type
type Planner struct {
	mock.Mock
}

// LatLongTransitDistance provides a mock function with given fields: appCtx, source, destination
func (_m *Planner) LatLongTransitDistance(appCtx appcontext.AppContext, source route.LatLong, destination route.LatLong) (int, error) {
	ret := _m.Called(appCtx, source, destination)

	if len(ret) == 0 {
		panic("no return value specified for LatLongTransitDistance")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, route.LatLong, route.LatLong) (int, error)); ok {
		return rf(appCtx, source, destination)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, route.LatLong, route.LatLong) int); ok {
		r0 = rf(appCtx, source, destination)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, route.LatLong, route.LatLong) error); ok {
		r1 = rf(appCtx, source, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransitDistance provides a mock function with given fields: appCtx, source, destination
func (_m *Planner) TransitDistance(appCtx appcontext.AppContext, source *models.Address, destination *models.Address) (int, error) {
	ret := _m.Called(appCtx, source, destination)

	if len(ret) == 0 {
		panic("no return value specified for TransitDistance")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.Address, *models.Address) (int, error)); ok {
		return rf(appCtx, source, destination)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, *models.Address, *models.Address) int); ok {
		r0 = rf(appCtx, source, destination)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, *models.Address, *models.Address) error); ok {
		r1 = rf(appCtx, source, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Zip3TransitDistance provides a mock function with given fields: appCtx, source, destination
func (_m *Planner) Zip3TransitDistance(appCtx appcontext.AppContext, source string, destination string) (int, error) {
	ret := _m.Called(appCtx, source, destination)

	if len(ret) == 0 {
		panic("no return value specified for Zip3TransitDistance")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, string) (int, error)); ok {
		return rf(appCtx, source, destination)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, string) int); ok {
		r0 = rf(appCtx, source, destination)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, string, string) error); ok {
		r1 = rf(appCtx, source, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Zip5TransitDistance provides a mock function with given fields: appCtx, source, destination
func (_m *Planner) Zip5TransitDistance(appCtx appcontext.AppContext, source string, destination string) (int, error) {
	ret := _m.Called(appCtx, source, destination)

	if len(ret) == 0 {
		panic("no return value specified for Zip5TransitDistance")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, string) (int, error)); ok {
		return rf(appCtx, source, destination)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, string) int); ok {
		r0 = rf(appCtx, source, destination)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, string, string) error); ok {
		r1 = rf(appCtx, source, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Zip5TransitDistanceLineHaul provides a mock function with given fields: appCtx, source, destination
func (_m *Planner) Zip5TransitDistanceLineHaul(appCtx appcontext.AppContext, source string, destination string) (int, error) {
	ret := _m.Called(appCtx, source, destination)

	if len(ret) == 0 {
		panic("no return value specified for Zip5TransitDistanceLineHaul")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, string) (int, error)); ok {
		return rf(appCtx, source, destination)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, string) int); ok {
		r0 = rf(appCtx, source, destination)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, string, string) error); ok {
		r1 = rf(appCtx, source, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ZipTransitDistance provides a mock function with given fields: appCtx, source, destination
func (_m *Planner) ZipTransitDistance(appCtx appcontext.AppContext, source string, destination string) (int, error) {
	ret := _m.Called(appCtx, source, destination)

	if len(ret) == 0 {
		panic("no return value specified for ZipTransitDistance")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, string) (int, error)); ok {
		return rf(appCtx, source, destination)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, string) int); ok {
		r0 = rf(appCtx, source, destination)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, string, string) error); ok {
		r1 = rf(appCtx, source, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPlanner creates a new instance of Planner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Planner {
	mock := &Planner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
