// Code generated by mockery. DO NOT EDIT.

package ghcmocks

import (
	mock "github.com/stretchr/testify/mock"
	gosoap "github.com/tiaguinho/gosoap"
)

// SoapCaller is an autogenerated mock type for the SoapCaller type
type SoapCaller struct {
	mock.Mock
}

// Call provides a mock function with given fields: m, p
func (_m *SoapCaller) Call(m string, p gosoap.SoapParams) (*gosoap.Response, error) {
	ret := _m.Called(m, p)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 *gosoap.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, gosoap.SoapParams) (*gosoap.Response, error)); ok {
		return rf(m, p)
	}
	if rf, ok := ret.Get(0).(func(string, gosoap.SoapParams) *gosoap.Response); ok {
		r0 = rf(m, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gosoap.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, gosoap.SoapParams) error); ok {
		r1 = rf(m, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSoapCaller creates a new instance of SoapCaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSoapCaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *SoapCaller {
	mock := &SoapCaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
