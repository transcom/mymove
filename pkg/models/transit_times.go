package models

import (
	"math"

	"github.com/pkg/errors"

	"github.com/transcom/mymove/pkg/unit"
)

// PoundsPackedPerDay represents the number of pounds that can be packed in a single day.
const PoundsPackedPerDay = 5000

type domesticTransitTime struct {
	Sequence    int
	LowMiles    int
	HighMiles   int
	LowWeight   int
	HighWeight  int
	TransitTime int
}

var domesticTransitTimes = []domesticTransitTime{
	{117, 1, 250, 1, 999, 8},
	{118, 1, 250, 1000, 1999, 7},
	{119, 1, 250, 2000, 3999, 6},
	{120, 1, 250, 4000, 7999, 5},
	{121, 1, 250, 8000, 99999, 4},
	{122, 251, 500, 1, 999, 10},
	{123, 251, 500, 1000, 1999, 9},
	{124, 251, 500, 2000, 3999, 7},
	{125, 251, 500, 4000, 7999, 6},
	{126, 251, 500, 8000, 99999, 5},
	{127, 501, 750, 1, 999, 12},
	{128, 501, 750, 1000, 1999, 11},
	{129, 501, 750, 2000, 3999, 9},
	{130, 501, 750, 4000, 7999, 8},
	{131, 501, 750, 8000, 99999, 7},
	{132, 751, 1000, 1, 999, 14},
	{133, 751, 1000, 1000, 1999, 12},
	{134, 751, 1000, 2000, 3999, 10},
	{135, 751, 1000, 4000, 7999, 9},
	{136, 751, 1000, 8000, 99999, 8},
	{80, 1001, 1250, 1, 999, 15},
	{81, 1001, 1250, 1000, 1999, 13},
	{82, 1001, 1250, 2000, 3999, 11},
	{83, 1001, 1250, 4000, 7999, 10},
	{84, 1001, 1250, 8000, 99999, 9},
	{28, 1251, 1500, 1, 999, 16},
	{29, 1251, 1500, 1000, 1999, 14},
	{30, 1251, 1500, 2000, 3999, 12},
	{31, 1251, 1500, 4000, 7999, 11},
	{32, 1251, 1500, 8000, 99999, 10},
	{33, 1501, 1750, 1, 999, 17},
	{34, 1501, 1750, 1000, 1999, 15},
	{35, 1501, 1750, 2000, 3999, 13},
	{36, 1501, 1750, 4000, 7999, 12},
	{111, 1501, 1750, 8000, 99999, 11},
	{112, 1751, 2000, 1, 999, 18},
	{113, 1751, 2000, 1000, 1999, 16},
	{114, 1751, 2000, 2000, 3999, 14},
	{115, 1751, 2000, 4000, 7999, 13},
	{116, 1751, 2000, 8000, 99999, 12},
	{12, 2001, 2250, 1, 999, 19},
	{13, 2001, 2250, 1000, 1999, 17},
	{14, 2001, 2250, 2000, 3999, 15},
	{15, 2001, 2250, 4000, 7999, 14},
	{16, 2001, 2250, 8000, 99999, 13},
	{17, 2251, 2500, 1, 999, 20},
	{18, 2251, 2500, 1000, 1999, 18},
	{19, 2251, 2500, 2000, 3999, 16},
	{20, 2251, 2500, 4000, 7999, 15},
	{21, 2251, 2500, 8000, 99999, 14},
	{22, 2501, 2750, 1, 999, 21},
	{23, 2501, 2750, 1000, 1999, 19},
	{24, 2501, 2750, 2000, 3999, 17},
	{25, 2501, 2750, 4000, 7999, 16},
	{26, 2501, 2750, 8000, 99999, 15},
	{27, 2751, 3000, 1, 999, 22},
	{37, 2751, 3000, 1000, 1999, 20},
	{77, 2751, 3000, 2000, 3999, 18},
	{78, 2751, 3000, 4000, 7999, 17},
	{79, 2751, 3000, 8000, 99999, 16},
	{58, 3001, 3250, 1, 999, 23},
	{59, 3001, 3250, 1000, 1999, 21},
	{60, 3001, 3250, 2000, 3999, 19},
	{61, 3001, 3250, 4000, 7999, 18},
	{62, 3001, 3250, 8000, 99999, 17},
	{63, 3251, 3500, 1, 999, 24},
	{64, 3251, 3500, 1000, 1999, 22},
	{65, 3251, 3500, 2000, 3999, 20},
	{66, 3251, 3500, 4000, 7999, 19},
	{67, 3251, 3500, 8000, 99999, 18},
	{2, 3501, 3750, 1, 999, 25},
	{3, 3501, 3750, 1000, 1999, 23},
	{4, 3501, 3750, 2000, 3999, 21},
	{5, 3501, 3750, 4000, 7999, 20},
	{6, 3501, 3750, 8000, 99999, 19},
	{7, 3751, 4000, 1, 999, 26},
	{8, 3751, 4000, 1000, 1999, 24},
	{9, 3751, 4000, 2000, 3999, 22},
	{10, 3751, 4000, 4000, 7999, 21},
	{11, 3751, 4000, 8000, 99999, 20},
	{38, 4001, 4250, 1, 999, 27},
	{39, 4001, 4250, 1000, 1999, 25},
	{40, 4001, 4250, 2000, 3999, 23},
	{41, 4001, 4250, 4000, 7999, 22},
	{42, 4001, 4250, 8000, 99999, 21},
	{43, 4251, 4500, 1, 999, 28},
	{44, 4251, 4500, 1000, 1999, 26},
	{45, 4251, 4500, 2000, 3999, 24},
	{46, 4251, 4500, 4000, 7999, 23},
	{47, 4251, 4500, 8000, 99999, 22},
	{48, 4501, 4750, 1, 999, 29},
	{49, 4501, 4750, 1000, 1999, 27},
	{50, 4501, 4750, 2000, 3999, 25},
	{51, 4501, 4750, 4000, 7999, 24},
	{52, 4501, 4750, 8000, 99999, 23},
	{53, 4751, 5000, 1, 999, 30},
	{54, 4751, 5000, 1000, 1999, 28},
	{55, 4751, 5000, 2000, 3999, 26},
	{56, 4751, 5000, 4000, 7999, 25},
	{57, 4751, 5000, 8000, 99999, 24},
	{139, 5001, 5250, 1, 999, 31},
	{140, 5001, 5250, 1000, 1999, 29},
	{141, 5001, 5250, 2000, 3999, 27},
	{85, 5001, 5250, 4000, 7999, 26},
	{68, 5001, 5250, 8000, 99999, 25},
	{69, 5251, 5500, 1, 999, 32},
	{70, 5251, 5500, 1000, 1999, 30},
	{71, 5251, 5500, 2000, 3999, 28},
	{72, 5251, 5500, 4000, 7999, 27},
	{137, 5251, 5500, 8000, 99999, 26},
	{138, 5501, 5750, 1, 999, 33},
	{73, 5501, 5750, 1000, 1999, 31},
	{74, 5501, 5750, 2000, 3999, 29},
	{75, 5501, 5750, 4000, 7999, 28},
	{76, 5501, 5750, 8000, 99999, 27},
	{86, 5751, 6000, 1, 999, 34},
	{87, 5751, 6000, 1000, 1999, 32},
	{88, 5751, 6000, 2000, 3999, 30},
	{89, 5751, 6000, 4000, 7999, 29},
	{90, 5751, 6000, 8000, 99999, 28},
	{95, 6001, 6250, 1, 999, 35},
	{96, 6001, 6250, 1000, 1999, 33},
	{97, 6001, 6250, 2000, 3999, 31},
	{98, 6001, 6250, 4000, 7999, 30},
	{99, 6001, 6250, 8000, 99999, 29},
	{100, 6251, 6500, 1, 999, 36},
	{101, 6251, 6500, 1000, 1999, 34},
	{91, 6251, 6500, 2000, 3999, 32},
	{92, 6251, 6500, 4000, 7999, 31},
	{93, 6251, 6500, 8000, 99999, 30},
	{94, 6501, 6750, 1, 999, 37},
	{102, 6501, 6750, 1000, 1999, 35},
	{103, 6501, 6750, 2000, 3999, 33},
	{104, 6501, 6750, 4000, 7999, 32},
	{105, 6501, 6750, 8000, 99999, 31},
	{106, 6751, 7000, 1, 999, 38},
	{107, 6751, 7000, 1000, 1999, 36},
	{108, 6751, 7000, 2000, 3999, 34},
	{109, 6751, 7000, 4000, 7999, 33},
	{110, 6751, 7000, 8000, 99999, 32},
}

// TransitDays returns the number of days it will take to move the specified weight of goods the specified distance.
func TransitDays(weight unit.Pound, miles int) (int, error) {
	pounds := weight.Int()
	for _, tt := range domesticTransitTimes {
		if tt.LowWeight <= pounds && tt.HighWeight >= pounds && tt.LowMiles <= miles && tt.HighMiles >= miles {
			return tt.TransitTime, nil
		}
	}
	return 0, errors.Errorf("Could not find transit time for %d lbs and %d miles", pounds, miles)
}

// PackDays returns the number of days it will take to pack the given weight.
func PackDays(weight unit.Pound) int {
	return int(math.Ceil(float64(weight) / float64(PoundsPackedPerDay)))
}
