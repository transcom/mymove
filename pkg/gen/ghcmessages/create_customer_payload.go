// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCustomerPayload create customer payload
//
// swagger:model CreateCustomerPayload
type CreateCustomerPayload struct {

	// affiliation
	Affiliation *Affiliation `json:"affiliation,omitempty"`

	// backup contact
	BackupContact *BackupContact `json:"backupContact,omitempty"`

	// backup mailing address
	BackupMailingAddress struct {
		Address
	} `json:"backupMailingAddress,omitempty"`

	// cac user
	CacUser bool `json:"cacUser,omitempty"`

	// create okta account
	CreateOktaAccount bool `json:"createOktaAccount,omitempty"`

	// edipi
	// Example: 1234567890
	// Max Length: 10
	Edipi string `json:"edipi,omitempty"`

	// email is preferred
	EmailIsPreferred bool `json:"emailIsPreferred,omitempty"`

	// emplid
	// Example: 9485155
	// Max Length: 7
	Emplid *string `json:"emplid,omitempty"`

	// first name
	// Example: John
	FirstName string `json:"firstName,omitempty"`

	// last name
	// Example: Doe
	LastName string `json:"lastName,omitempty"`

	// middle name
	// Example: David
	MiddleName *string `json:"middleName,omitempty"`

	// personal email
	// Example: personalEmail@email.com
	// Pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
	PersonalEmail string `json:"personalEmail,omitempty"`

	// phone is preferred
	PhoneIsPreferred bool `json:"phoneIsPreferred,omitempty"`

	// residential address
	ResidentialAddress struct {
		Address
	} `json:"residentialAddress,omitempty"`

	// secondary telephone
	// Pattern: ^[2-9]\d{2}-\d{3}-\d{4}$
	SecondaryTelephone *string `json:"secondaryTelephone,omitempty"`

	// suffix
	// Example: Jr.
	Suffix *string `json:"suffix,omitempty"`

	// telephone
	// Pattern: ^[2-9]\d{2}-\d{3}-\d{4}$
	Telephone *string `json:"telephone,omitempty"`
}

// Validate validates this create customer payload
func (m *CreateCustomerPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupMailingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdipi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmplid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonalEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResidentialAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryTelephone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelephone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCustomerPayload) validateAffiliation(formats strfmt.Registry) error {
	if swag.IsZero(m.Affiliation) { // not required
		return nil
	}

	if m.Affiliation != nil {
		if err := m.Affiliation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCustomerPayload) validateBackupContact(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupContact) { // not required
		return nil
	}

	if m.BackupContact != nil {
		if err := m.BackupContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupContact")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCustomerPayload) validateBackupMailingAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupMailingAddress) { // not required
		return nil
	}

	return nil
}

func (m *CreateCustomerPayload) validateEdipi(formats strfmt.Registry) error {
	if swag.IsZero(m.Edipi) { // not required
		return nil
	}

	if err := validate.MaxLength("edipi", "body", m.Edipi, 10); err != nil {
		return err
	}

	return nil
}

func (m *CreateCustomerPayload) validateEmplid(formats strfmt.Registry) error {
	if swag.IsZero(m.Emplid) { // not required
		return nil
	}

	if err := validate.MaxLength("emplid", "body", *m.Emplid, 7); err != nil {
		return err
	}

	return nil
}

func (m *CreateCustomerPayload) validatePersonalEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.PersonalEmail) { // not required
		return nil
	}

	if err := validate.Pattern("personalEmail", "body", m.PersonalEmail, `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateCustomerPayload) validateResidentialAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.ResidentialAddress) { // not required
		return nil
	}

	return nil
}

func (m *CreateCustomerPayload) validateSecondaryTelephone(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryTelephone) { // not required
		return nil
	}

	if err := validate.Pattern("secondaryTelephone", "body", *m.SecondaryTelephone, `^[2-9]\d{2}-\d{3}-\d{4}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateCustomerPayload) validateTelephone(formats strfmt.Registry) error {
	if swag.IsZero(m.Telephone) { // not required
		return nil
	}

	if err := validate.Pattern("telephone", "body", *m.Telephone, `^[2-9]\d{2}-\d{3}-\d{4}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create customer payload based on the context it is used
func (m *CreateCustomerPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffiliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupMailingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResidentialAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCustomerPayload) contextValidateAffiliation(ctx context.Context, formats strfmt.Registry) error {

	if m.Affiliation != nil {

		if swag.IsZero(m.Affiliation) { // not required
			return nil
		}

		if err := m.Affiliation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCustomerPayload) contextValidateBackupContact(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupContact != nil {

		if swag.IsZero(m.BackupContact) { // not required
			return nil
		}

		if err := m.BackupContact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupContact")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCustomerPayload) contextValidateBackupMailingAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CreateCustomerPayload) contextValidateResidentialAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCustomerPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCustomerPayload) UnmarshalBinary(b []byte) error {
	var res CreateCustomerPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
