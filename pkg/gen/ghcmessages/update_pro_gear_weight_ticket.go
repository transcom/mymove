// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateProGearWeightTicket update pro gear weight ticket
//
// swagger:model UpdateProGearWeightTicket
type UpdateProGearWeightTicket struct {

	// Indicates if this information is for the customer's own pro-gear, otherwise, it's the spouse's.
	BelongsToSelf bool `json:"belongsToSelf,omitempty"`

	// Constructed weight of the pro-gear.
	// Minimum: 0
	ConstructedWeight *int64 `json:"constructedWeight,omitempty"`

	// Weight of the vehicle not including the pro-gear.
	// Minimum: 0
	EmptyWeight *int64 `json:"emptyWeight,omitempty"`

	// Weight of the vehicle including the pro-gear.
	// Minimum: 0
	FullWeight *int64 `json:"fullWeight,omitempty"`

	// Indicates if the user has a weight ticket for their pro-gear, otherwise they have a constructed weight.
	HasWeightTickets bool `json:"hasWeightTickets,omitempty"`

	// The reason the services counselor has excluded or rejected the item.
	Reason string `json:"reason,omitempty"`

	// status
	Status PPMDocumentStatus `json:"status,omitempty"`
}

// Validate validates this update pro gear weight ticket
func (m *UpdateProGearWeightTicket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstructedWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateProGearWeightTicket) validateConstructedWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.ConstructedWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("constructedWeight", "body", *m.ConstructedWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *UpdateProGearWeightTicket) validateEmptyWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.EmptyWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("emptyWeight", "body", *m.EmptyWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *UpdateProGearWeightTicket) validateFullWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.FullWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("fullWeight", "body", *m.FullWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *UpdateProGearWeightTicket) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this update pro gear weight ticket based on the context it is used
func (m *UpdateProGearWeightTicket) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateProGearWeightTicket) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateProGearWeightTicket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateProGearWeightTicket) UnmarshalBinary(b []byte) error {
	var res UpdateProGearWeightTicket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
