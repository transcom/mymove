// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateCustomerPayload update customer payload
//
// swagger:model UpdateCustomerPayload
type UpdateCustomerPayload struct {

	// backup contact
	BackupContact *BackupContact `json:"backup_contact,omitempty"`

	// current address
	CurrentAddress *Address `json:"current_address,omitempty"`

	// email
	// Pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
	Email *string `json:"email,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// phone
	// Pattern: ^[2-9]\d{2}-\d{3}-\d{4}$
	Phone *string `json:"phone,omitempty"`
}

// Validate validates this update customer payload
func (m *UpdateCustomerPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCustomerPayload) validateBackupContact(formats strfmt.Registry) error {

	if swag.IsZero(m.BackupContact) { // not required
		return nil
	}

	if m.BackupContact != nil {
		if err := m.BackupContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_contact")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateCustomerPayload) validateCurrentAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentAddress) { // not required
		return nil
	}

	if m.CurrentAddress != nil {
		if err := m.CurrentAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_address")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateCustomerPayload) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.Pattern("email", "body", string(*m.Email), `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCustomerPayload) validatePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if err := validate.Pattern("phone", "body", string(*m.Phone), `^[2-9]\d{2}-\d{3}-\d{4}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateCustomerPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateCustomerPayload) UnmarshalBinary(b []byte) error {
	var res UpdateCustomerPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
