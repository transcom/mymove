// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EvaluationReportInspectionType evaluation report inspection type
//
// swagger:model EvaluationReportInspectionType
type EvaluationReportInspectionType string

func NewEvaluationReportInspectionType(value EvaluationReportInspectionType) *EvaluationReportInspectionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EvaluationReportInspectionType.
func (m EvaluationReportInspectionType) Pointer() *EvaluationReportInspectionType {
	return &m
}

const (

	// EvaluationReportInspectionTypeDATAREVIEW captures enum value "DATA_REVIEW"
	EvaluationReportInspectionTypeDATAREVIEW EvaluationReportInspectionType = "DATA_REVIEW"

	// EvaluationReportInspectionTypePHYSICAL captures enum value "PHYSICAL"
	EvaluationReportInspectionTypePHYSICAL EvaluationReportInspectionType = "PHYSICAL"

	// EvaluationReportInspectionTypeVIRTUAL captures enum value "VIRTUAL"
	EvaluationReportInspectionTypeVIRTUAL EvaluationReportInspectionType = "VIRTUAL"
)

// for schema
var evaluationReportInspectionTypeEnum []interface{}

func init() {
	var res []EvaluationReportInspectionType
	if err := json.Unmarshal([]byte(`["DATA_REVIEW","PHYSICAL","VIRTUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		evaluationReportInspectionTypeEnum = append(evaluationReportInspectionTypeEnum, v)
	}
}

func (m EvaluationReportInspectionType) validateEvaluationReportInspectionTypeEnum(path, location string, value EvaluationReportInspectionType) error {
	if err := validate.EnumCase(path, location, value, evaluationReportInspectionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this evaluation report inspection type
func (m EvaluationReportInspectionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEvaluationReportInspectionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this evaluation report inspection type based on context it is used
func (m EvaluationReportInspectionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
