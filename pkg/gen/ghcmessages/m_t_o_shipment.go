// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MTOShipment m t o shipment
//
// swagger:model MTOShipment
type MTOShipment struct {

	// The actual date that the shipment was delivered to the destination address by the Prime
	// Format: date
	ActualDeliveryDate *strfmt.Date `json:"actualDeliveryDate,omitempty"`

	// actual pickup date
	// Format: date
	ActualPickupDate *strfmt.Date `json:"actualPickupDate,omitempty"`

	// actual pro gear weight
	ActualProGearWeight *int64 `json:"actualProGearWeight"`

	// actual spouse pro gear weight
	ActualSpouseProGearWeight *int64 `json:"actualSpouseProGearWeight"`

	// approved date
	// Format: date-time
	ApprovedDate *strfmt.DateTime `json:"approvedDate,omitempty"`

	// TIO override billable weight to be used for calculations
	// Example: 2500
	BillableWeightCap *int64 `json:"billableWeightCap,omitempty"`

	// billable weight justification
	// Example: more weight than expected
	BillableWeightJustification *string `json:"billableWeightJustification,omitempty"`

	// calculated billable weight
	// Example: 2000
	// Read Only: true
	CalculatedBillableWeight *int64 `json:"calculatedBillableWeight,omitempty"`

	// The counselor can use the counselor remarks field to inform the movers about any
	// special circumstances for this shipment. Typical examples:
	//   * bulky or fragile items,
	//   * weapons,
	//   * access info for their address.
	// Counselors enters this information when creating or editing an MTO Shipment. Optional field.
	//
	// Example: handle with care
	CounselorRemarks *string `json:"counselorRemarks,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// customer remarks
	// Example: handle with care
	CustomerRemarks *string `json:"customerRemarks,omitempty"`

	// deleted at
	// Format: date-time
	DeletedAt *strfmt.DateTime `json:"deletedAt,omitempty"`

	// delivery address update
	DeliveryAddressUpdate *ShipmentAddressUpdate `json:"deliveryAddressUpdate,omitempty"`

	// destination address
	DestinationAddress *Address `json:"destinationAddress,omitempty"`

	// destination sit auth end date
	// Format: date-time
	DestinationSitAuthEndDate strfmt.DateTime `json:"destinationSitAuthEndDate,omitempty"`

	// destination type
	DestinationType *DestinationType `json:"destinationType,omitempty"`

	// distance
	// Example: 500
	Distance *int64 `json:"distance,omitempty"`

	// diversion
	// Example: true
	Diversion bool `json:"diversion,omitempty"`

	// e tag
	ETag string `json:"eTag,omitempty"`

	// has secondary delivery address
	HasSecondaryDeliveryAddress *bool `json:"hasSecondaryDeliveryAddress"`

	// has secondary pickup address
	HasSecondaryPickupAddress *bool `json:"hasSecondaryPickupAddress"`

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// move task order ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	MoveTaskOrderID strfmt.UUID `json:"moveTaskOrderID,omitempty"`

	// mto agents
	MtoAgents MTOAgents `json:"mtoAgents,omitempty"`

	// mto service items
	MtoServiceItems MTOServiceItems `json:"mtoServiceItems,omitempty"`

	// The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.
	// Example: 2000
	NtsRecordedWeight *int64 `json:"ntsRecordedWeight,omitempty"`

	// origin sit auth end date
	// Format: date-time
	OriginSitAuthEndDate strfmt.DateTime `json:"originSitAuthEndDate,omitempty"`

	// pickup address
	PickupAddress *Address `json:"pickupAddress,omitempty"`

	// ppm shipment
	PpmShipment *PPMShipment `json:"ppmShipment,omitempty"`

	// prime actual weight
	// Example: 2000
	PrimeActualWeight *int64 `json:"primeActualWeight,omitempty"`

	// prime estimated weight
	// Example: 2000
	PrimeEstimatedWeight *int64 `json:"primeEstimatedWeight,omitempty"`

	// rejection reason
	// Example: MTO Shipment not good enough
	RejectionReason *string `json:"rejectionReason,omitempty"`

	// requested delivery date
	// Format: date
	RequestedDeliveryDate *strfmt.Date `json:"requestedDeliveryDate,omitempty"`

	// requested pickup date
	// Format: date
	RequestedPickupDate *strfmt.Date `json:"requestedPickupDate,omitempty"`

	// required delivery date
	// Format: date
	RequiredDeliveryDate *strfmt.Date `json:"requiredDeliveryDate,omitempty"`

	// reweigh
	Reweigh *Reweigh `json:"reweigh,omitempty"`

	// sac type
	SacType *LOAType `json:"sacType,omitempty"`

	// scheduled delivery date
	// Format: date
	ScheduledDeliveryDate *strfmt.Date `json:"scheduledDeliveryDate,omitempty"`

	// scheduled pickup date
	// Format: date
	ScheduledPickupDate *strfmt.Date `json:"scheduledPickupDate,omitempty"`

	// secondary delivery address
	SecondaryDeliveryAddress *Address `json:"secondaryDeliveryAddress,omitempty"`

	// secondary pickup address
	SecondaryPickupAddress *Address `json:"secondaryPickupAddress,omitempty"`

	// service order number
	ServiceOrderNumber *string `json:"serviceOrderNumber,omitempty"`

	// shipment locator
	// Example: 1K43AR-01
	// Read Only: true
	ShipmentLocator *string `json:"shipmentLocator,omitempty"`

	// shipment type
	ShipmentType MTOShipmentType `json:"shipmentType,omitempty"`

	// sit days allowance
	SitDaysAllowance *int64 `json:"sitDaysAllowance,omitempty"`

	// sit extensions
	SitExtensions SITExtensions `json:"sitExtensions,omitempty"`

	// sit status
	SitStatus *SITStatus `json:"sitStatus,omitempty"`

	// status
	Status MTOShipmentStatus `json:"status,omitempty"`

	// storage facility
	StorageFacility *StorageFacility `json:"storageFacility,omitempty"`

	// tac type
	TacType *LOAType `json:"tacType,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// uses external vendor
	// Example: false
	UsesExternalVendor bool `json:"usesExternalVendor,omitempty"`
}

// Validate validates this m t o shipment
func (m *MTOShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActualPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprovedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryAddressUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationSitAuthEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveTaskOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoServiceItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginSitAuthEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpmShipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReweigh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSacType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageFacility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTacType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOShipment) validateActualDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actualDeliveryDate", "body", "date", m.ActualDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateActualPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actualPickupDate", "body", "date", m.ActualPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateApprovedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("approvedDate", "body", "date-time", m.ApprovedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateDeletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("deletedAt", "body", "date-time", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateDeliveryAddressUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryAddressUpdate) { // not required
		return nil
	}

	if m.DeliveryAddressUpdate != nil {
		if err := m.DeliveryAddressUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryAddressUpdate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deliveryAddressUpdate")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	if m.DestinationAddress != nil {
		if err := m.DestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) validateDestinationSitAuthEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationSitAuthEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("destinationSitAuthEndDate", "body", "date-time", m.DestinationSitAuthEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateDestinationType(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationType) { // not required
		return nil
	}

	if m.DestinationType != nil {
		if err := m.DestinationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationType")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateMoveTaskOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.MoveTaskOrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("moveTaskOrderID", "body", "uuid", m.MoveTaskOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateMtoAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoAgents) { // not required
		return nil
	}

	if err := m.MtoAgents.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mtoAgents")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mtoAgents")
		}
		return err
	}

	return nil
}

func (m *MTOShipment) validateMtoServiceItems(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoServiceItems) { // not required
		return nil
	}

	if err := m.MtoServiceItems.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mtoServiceItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mtoServiceItems")
		}
		return err
	}

	return nil
}

func (m *MTOShipment) validateOriginSitAuthEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginSitAuthEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("originSitAuthEndDate", "body", "date-time", m.OriginSitAuthEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validatePickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupAddress) { // not required
		return nil
	}

	if m.PickupAddress != nil {
		if err := m.PickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) validatePpmShipment(formats strfmt.Registry) error {
	if swag.IsZero(m.PpmShipment) { // not required
		return nil
	}

	if m.PpmShipment != nil {
		if err := m.PpmShipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppmShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppmShipment")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) validateRequestedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedDeliveryDate", "body", "date", m.RequestedDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateRequestedPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedPickupDate", "body", "date", m.RequestedPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateRequiredDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequiredDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requiredDeliveryDate", "body", "date", m.RequiredDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateReweigh(formats strfmt.Registry) error {
	if swag.IsZero(m.Reweigh) { // not required
		return nil
	}

	if m.Reweigh != nil {
		if err := m.Reweigh.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reweigh")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reweigh")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) validateSacType(formats strfmt.Registry) error {
	if swag.IsZero(m.SacType) { // not required
		return nil
	}

	if m.SacType != nil {
		if err := m.SacType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sacType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sacType")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) validateScheduledDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduledDeliveryDate", "body", "date", m.ScheduledDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateScheduledPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduledPickupDate", "body", "date", m.ScheduledPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) validateSecondaryDeliveryAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDeliveryAddress) { // not required
		return nil
	}

	if m.SecondaryDeliveryAddress != nil {
		if err := m.SecondaryDeliveryAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryDeliveryAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryDeliveryAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) validateSecondaryPickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryPickupAddress) { // not required
		return nil
	}

	if m.SecondaryPickupAddress != nil {
		if err := m.SecondaryPickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) validateShipmentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentType) { // not required
		return nil
	}

	if err := m.ShipmentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipmentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shipmentType")
		}
		return err
	}

	return nil
}

func (m *MTOShipment) validateSitExtensions(formats strfmt.Registry) error {
	if swag.IsZero(m.SitExtensions) { // not required
		return nil
	}

	if err := m.SitExtensions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sitExtensions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sitExtensions")
		}
		return err
	}

	return nil
}

func (m *MTOShipment) validateSitStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SitStatus) { // not required
		return nil
	}

	if m.SitStatus != nil {
		if err := m.SitStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitStatus")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *MTOShipment) validateStorageFacility(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageFacility) { // not required
		return nil
	}

	if m.StorageFacility != nil {
		if err := m.StorageFacility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageFacility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageFacility")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) validateTacType(formats strfmt.Registry) error {
	if swag.IsZero(m.TacType) { // not required
		return nil
	}

	if m.TacType != nil {
		if err := m.TacType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tacType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tacType")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this m t o shipment based on the context it is used
func (m *MTOShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCalculatedBillableWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeliveryAddressUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtoAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtoServiceItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePpmShipment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReweigh(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSacType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryDeliveryAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryPickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentLocator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitExtensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageFacility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTacType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOShipment) contextValidateCalculatedBillableWeight(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "calculatedBillableWeight", "body", m.CalculatedBillableWeight); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) contextValidateDeliveryAddressUpdate(ctx context.Context, formats strfmt.Registry) error {

	if m.DeliveryAddressUpdate != nil {

		if swag.IsZero(m.DeliveryAddressUpdate) { // not required
			return nil
		}

		if err := m.DeliveryAddressUpdate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryAddressUpdate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deliveryAddressUpdate")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationAddress != nil {

		if swag.IsZero(m.DestinationAddress) { // not required
			return nil
		}

		if err := m.DestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) contextValidateDestinationType(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationType != nil {

		if swag.IsZero(m.DestinationType) { // not required
			return nil
		}

		if err := m.DestinationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationType")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) contextValidateMtoAgents(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MtoAgents.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mtoAgents")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mtoAgents")
		}
		return err
	}

	return nil
}

func (m *MTOShipment) contextValidateMtoServiceItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MtoServiceItems.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mtoServiceItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mtoServiceItems")
		}
		return err
	}

	return nil
}

func (m *MTOShipment) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.PickupAddress != nil {

		if swag.IsZero(m.PickupAddress) { // not required
			return nil
		}

		if err := m.PickupAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) contextValidatePpmShipment(ctx context.Context, formats strfmt.Registry) error {

	if m.PpmShipment != nil {

		if swag.IsZero(m.PpmShipment) { // not required
			return nil
		}

		if err := m.PpmShipment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppmShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppmShipment")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) contextValidateReweigh(ctx context.Context, formats strfmt.Registry) error {

	if m.Reweigh != nil {

		if swag.IsZero(m.Reweigh) { // not required
			return nil
		}

		if err := m.Reweigh.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reweigh")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reweigh")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) contextValidateSacType(ctx context.Context, formats strfmt.Registry) error {

	if m.SacType != nil {

		if swag.IsZero(m.SacType) { // not required
			return nil
		}

		if err := m.SacType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sacType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sacType")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) contextValidateSecondaryDeliveryAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryDeliveryAddress != nil {

		if swag.IsZero(m.SecondaryDeliveryAddress) { // not required
			return nil
		}

		if err := m.SecondaryDeliveryAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryDeliveryAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryDeliveryAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) contextValidateSecondaryPickupAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryPickupAddress != nil {

		if swag.IsZero(m.SecondaryPickupAddress) { // not required
			return nil
		}

		if err := m.SecondaryPickupAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) contextValidateShipmentLocator(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "shipmentLocator", "body", m.ShipmentLocator); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipment) contextValidateShipmentType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ShipmentType) { // not required
		return nil
	}

	if err := m.ShipmentType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipmentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shipmentType")
		}
		return err
	}

	return nil
}

func (m *MTOShipment) contextValidateSitExtensions(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SitExtensions.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sitExtensions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sitExtensions")
		}
		return err
	}

	return nil
}

func (m *MTOShipment) contextValidateSitStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.SitStatus != nil {

		if swag.IsZero(m.SitStatus) { // not required
			return nil
		}

		if err := m.SitStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitStatus")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *MTOShipment) contextValidateStorageFacility(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageFacility != nil {

		if swag.IsZero(m.StorageFacility) { // not required
			return nil
		}

		if err := m.StorageFacility.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageFacility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageFacility")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipment) contextValidateTacType(ctx context.Context, formats strfmt.Registry) error {

	if m.TacType != nil {

		if swag.IsZero(m.TacType) { // not required
			return nil
		}

		if err := m.TacType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tacType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tacType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MTOShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MTOShipment) UnmarshalBinary(b []byte) error {
	var res MTOShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
