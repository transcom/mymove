// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/transcom/mymove/pkg/swagger/nullable"
)

// CounselingUpdateOrderPayload counseling update order payload
//
// swagger:model CounselingUpdateOrderPayload
type CounselingUpdateOrderPayload struct {

	// department indicator
	DepartmentIndicator *DeptIndicator `json:"departmentIndicator,omitempty"`

	// grade
	Grade *Grade `json:"grade,omitempty"`

	// Orders date
	//
	// The date and time that these orders were cut.
	// Example: 2018-04-26
	// Required: true
	// Format: date
	IssueDate *strfmt.Date `json:"issueDate"`

	// new duty location Id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	NewDutyLocationID *strfmt.UUID `json:"newDutyLocationId"`

	// NTS SAC
	// Example: N002214CSW32Y9
	NtsSac nullable.String `json:"ntsSac,omitempty"`

	// NTS TAC
	// Example: F8J1
	NtsTac nullable.String `json:"ntsTac,omitempty"`

	// Orders Number
	// Example: 030-00362
	OrdersNumber *string `json:"ordersNumber,omitempty"`

	// orders type
	// Required: true
	OrdersType *OrdersType `json:"ordersType"`

	// orders type detail
	OrdersTypeDetail *OrdersTypeDetail `json:"ordersTypeDetail,omitempty"`

	// origin duty location Id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	OriginDutyLocationID *strfmt.UUID `json:"originDutyLocationId"`

	// Report-by date
	//
	// Report By Date
	// Example: 2018-04-26
	// Required: true
	// Format: date
	ReportByDate *strfmt.Date `json:"reportByDate"`

	// HHG SAC
	// Example: N002214CSW32Y9
	Sac nullable.String `json:"sac,omitempty"`

	// HHG TAC
	// Example: F8J1
	// Max Length: 4
	// Min Length: 4
	Tac *string `json:"tac,omitempty"`
}

// Validate validates this counseling update order payload
func (m *CounselingUpdateOrderPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartmentIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewDutyLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtsSac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtsTac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersTypeDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginDutyLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportByDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CounselingUpdateOrderPayload) validateDepartmentIndicator(formats strfmt.Registry) error {
	if swag.IsZero(m.DepartmentIndicator) { // not required
		return nil
	}

	if m.DepartmentIndicator != nil {
		if err := m.DepartmentIndicator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("departmentIndicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("departmentIndicator")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) validateGrade(formats strfmt.Registry) error {
	if swag.IsZero(m.Grade) { // not required
		return nil
	}

	if m.Grade != nil {
		if err := m.Grade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grade")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) validateIssueDate(formats strfmt.Registry) error {

	if err := validate.Required("issueDate", "body", m.IssueDate); err != nil {
		return err
	}

	if err := validate.FormatOf("issueDate", "body", "date", m.IssueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) validateNewDutyLocationID(formats strfmt.Registry) error {

	if err := validate.Required("newDutyLocationId", "body", m.NewDutyLocationID); err != nil {
		return err
	}

	if err := validate.FormatOf("newDutyLocationId", "body", "uuid", m.NewDutyLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) validateNtsSac(formats strfmt.Registry) error {
	if swag.IsZero(m.NtsSac) { // not required
		return nil
	}

	if err := m.NtsSac.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ntsSac")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ntsSac")
		}
		return err
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) validateNtsTac(formats strfmt.Registry) error {
	if swag.IsZero(m.NtsTac) { // not required
		return nil
	}

	if err := m.NtsTac.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ntsTac")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ntsTac")
		}
		return err
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) validateOrdersType(formats strfmt.Registry) error {

	if err := validate.Required("ordersType", "body", m.OrdersType); err != nil {
		return err
	}

	if err := validate.Required("ordersType", "body", m.OrdersType); err != nil {
		return err
	}

	if m.OrdersType != nil {
		if err := m.OrdersType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ordersType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ordersType")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) validateOrdersTypeDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdersTypeDetail) { // not required
		return nil
	}

	if m.OrdersTypeDetail != nil {
		if err := m.OrdersTypeDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ordersTypeDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ordersTypeDetail")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) validateOriginDutyLocationID(formats strfmt.Registry) error {

	if err := validate.Required("originDutyLocationId", "body", m.OriginDutyLocationID); err != nil {
		return err
	}

	if err := validate.FormatOf("originDutyLocationId", "body", "uuid", m.OriginDutyLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) validateReportByDate(formats strfmt.Registry) error {

	if err := validate.Required("reportByDate", "body", m.ReportByDate); err != nil {
		return err
	}

	if err := validate.FormatOf("reportByDate", "body", "date", m.ReportByDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) validateSac(formats strfmt.Registry) error {
	if swag.IsZero(m.Sac) { // not required
		return nil
	}

	if err := m.Sac.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sac")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sac")
		}
		return err
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) validateTac(formats strfmt.Registry) error {
	if swag.IsZero(m.Tac) { // not required
		return nil
	}

	if err := validate.MinLength("tac", "body", *m.Tac, 4); err != nil {
		return err
	}

	if err := validate.MaxLength("tac", "body", *m.Tac, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this counseling update order payload based on the context it is used
func (m *CounselingUpdateOrderPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDepartmentIndicator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNtsSac(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNtsTac(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrdersType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrdersTypeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSac(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CounselingUpdateOrderPayload) contextValidateDepartmentIndicator(ctx context.Context, formats strfmt.Registry) error {

	if m.DepartmentIndicator != nil {

		if swag.IsZero(m.DepartmentIndicator) { // not required
			return nil
		}

		if err := m.DepartmentIndicator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("departmentIndicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("departmentIndicator")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) contextValidateGrade(ctx context.Context, formats strfmt.Registry) error {

	if m.Grade != nil {

		if swag.IsZero(m.Grade) { // not required
			return nil
		}

		if err := m.Grade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grade")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) contextValidateNtsSac(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.NtsSac) { // not required
		return nil
	}

	if err := m.NtsSac.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ntsSac")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ntsSac")
		}
		return err
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) contextValidateNtsTac(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.NtsTac) { // not required
		return nil
	}

	if err := m.NtsTac.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ntsTac")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ntsTac")
		}
		return err
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) contextValidateOrdersType(ctx context.Context, formats strfmt.Registry) error {

	if m.OrdersType != nil {

		if err := m.OrdersType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ordersType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ordersType")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) contextValidateOrdersTypeDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.OrdersTypeDetail != nil {

		if swag.IsZero(m.OrdersTypeDetail) { // not required
			return nil
		}

		if err := m.OrdersTypeDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ordersTypeDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ordersTypeDetail")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingUpdateOrderPayload) contextValidateSac(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Sac) { // not required
		return nil
	}

	if err := m.Sac.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sac")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sac")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CounselingUpdateOrderPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CounselingUpdateOrderPayload) UnmarshalBinary(b []byte) error {
	var res CounselingUpdateOrderPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
