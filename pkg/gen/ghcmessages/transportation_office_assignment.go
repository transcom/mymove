// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportationOfficeAssignment transportation office assignment
//
// swagger:model TransportationOfficeAssignment
type TransportationOfficeAssignment struct {

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// office user Id
	// Example: c56a4780-65aa-42ec-a945-5fd87dec0538
	// Required: true
	// Format: uuid
	OfficeUserID *strfmt.UUID `json:"officeUserId"`

	// primary office
	// Required: true
	PrimaryOffice *bool `json:"primaryOffice"`

	// transportation office
	TransportationOffice *TransportationOffice `json:"transportationOffice,omitempty"`

	// transportation office Id
	// Example: d67a4780-65aa-42ec-a945-5fd87dec0549
	// Required: true
	// Format: uuid
	TransportationOfficeID *strfmt.UUID `json:"transportationOfficeId"`

	// updated at
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this transportation office assignment
func (m *TransportationOfficeAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfficeUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryOffice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportationOffice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportationOfficeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportationOfficeAssignment) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOfficeAssignment) validateOfficeUserID(formats strfmt.Registry) error {

	if err := validate.Required("officeUserId", "body", m.OfficeUserID); err != nil {
		return err
	}

	if err := validate.FormatOf("officeUserId", "body", "uuid", m.OfficeUserID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOfficeAssignment) validatePrimaryOffice(formats strfmt.Registry) error {

	if err := validate.Required("primaryOffice", "body", m.PrimaryOffice); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOfficeAssignment) validateTransportationOffice(formats strfmt.Registry) error {
	if swag.IsZero(m.TransportationOffice) { // not required
		return nil
	}

	if m.TransportationOffice != nil {
		if err := m.TransportationOffice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transportationOffice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transportationOffice")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationOfficeAssignment) validateTransportationOfficeID(formats strfmt.Registry) error {

	if err := validate.Required("transportationOfficeId", "body", m.TransportationOfficeID); err != nil {
		return err
	}

	if err := validate.FormatOf("transportationOfficeId", "body", "uuid", m.TransportationOfficeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOfficeAssignment) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transportation office assignment based on the context it is used
func (m *TransportationOfficeAssignment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransportationOffice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportationOfficeAssignment) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOfficeAssignment) contextValidateTransportationOffice(ctx context.Context, formats strfmt.Registry) error {

	if m.TransportationOffice != nil {

		if swag.IsZero(m.TransportationOffice) { // not required
			return nil
		}

		if err := m.TransportationOffice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transportationOffice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transportationOffice")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationOfficeAssignment) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransportationOfficeAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportationOfficeAssignment) UnmarshalBinary(b []byte) error {
	var res TransportationOfficeAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
