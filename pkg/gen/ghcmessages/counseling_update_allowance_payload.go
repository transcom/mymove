// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CounselingUpdateAllowancePayload counseling update allowance payload
//
// swagger:model CounselingUpdateAllowancePayload
type CounselingUpdateAllowancePayload struct {

	// the branch that the service member belongs to
	Agency Branch `json:"agency,omitempty"`

	// dependents authorized
	DependentsAuthorized *bool `json:"dependentsAuthorized,omitempty"`

	// grade
	Grade *Grade `json:"grade,omitempty"`

	// only for Army
	OrganizationalClothingAndIndividualEquipment *bool `json:"organizationalClothingAndIndividualEquipment,omitempty"`

	// unit is in lbs
	// Minimum: 0
	ProGearWeight *int64 `json:"proGearWeight,omitempty"`

	// unit is in lbs
	// Minimum: 0
	ProGearWeightSpouse *int64 `json:"proGearWeightSpouse,omitempty"`

	// unit is in lbs
	// Minimum: 0
	RequiredMedicalEquipmentWeight *int64 `json:"requiredMedicalEquipmentWeight,omitempty"`
}

// Validate validates this counseling update allowance payload
func (m *CounselingUpdateAllowancePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProGearWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProGearWeightSpouse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredMedicalEquipmentWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CounselingUpdateAllowancePayload) validateAgency(formats strfmt.Registry) error {

	if swag.IsZero(m.Agency) { // not required
		return nil
	}

	if err := m.Agency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agency")
		}
		return err
	}

	return nil
}

func (m *CounselingUpdateAllowancePayload) validateGrade(formats strfmt.Registry) error {

	if swag.IsZero(m.Grade) { // not required
		return nil
	}

	if m.Grade != nil {
		if err := m.Grade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grade")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingUpdateAllowancePayload) validateProGearWeight(formats strfmt.Registry) error {

	if swag.IsZero(m.ProGearWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("proGearWeight", "body", int64(*m.ProGearWeight), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *CounselingUpdateAllowancePayload) validateProGearWeightSpouse(formats strfmt.Registry) error {

	if swag.IsZero(m.ProGearWeightSpouse) { // not required
		return nil
	}

	if err := validate.MinimumInt("proGearWeightSpouse", "body", int64(*m.ProGearWeightSpouse), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *CounselingUpdateAllowancePayload) validateRequiredMedicalEquipmentWeight(formats strfmt.Registry) error {

	if swag.IsZero(m.RequiredMedicalEquipmentWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("requiredMedicalEquipmentWeight", "body", int64(*m.RequiredMedicalEquipmentWeight), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CounselingUpdateAllowancePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CounselingUpdateAllowancePayload) UnmarshalBinary(b []byte) error {
	var res CounselingUpdateAllowancePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
