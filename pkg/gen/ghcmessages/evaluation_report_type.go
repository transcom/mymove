// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EvaluationReportType evaluation report type
//
// swagger:model EvaluationReportType
type EvaluationReportType string

func NewEvaluationReportType(value EvaluationReportType) *EvaluationReportType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EvaluationReportType.
func (m EvaluationReportType) Pointer() *EvaluationReportType {
	return &m
}

const (

	// EvaluationReportTypeSHIPMENT captures enum value "SHIPMENT"
	EvaluationReportTypeSHIPMENT EvaluationReportType = "SHIPMENT"

	// EvaluationReportTypeCOUNSELING captures enum value "COUNSELING"
	EvaluationReportTypeCOUNSELING EvaluationReportType = "COUNSELING"
)

// for schema
var evaluationReportTypeEnum []interface{}

func init() {
	var res []EvaluationReportType
	if err := json.Unmarshal([]byte(`["SHIPMENT","COUNSELING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		evaluationReportTypeEnum = append(evaluationReportTypeEnum, v)
	}
}

func (m EvaluationReportType) validateEvaluationReportTypeEnum(path, location string, value EvaluationReportType) error {
	if err := validate.EnumCase(path, location, value, evaluationReportTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this evaluation report type
func (m EvaluationReportType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEvaluationReportTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this evaluation report type based on context it is used
func (m EvaluationReportType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
