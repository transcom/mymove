// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateApprovedSITExtension create approved s i t extension
//
// swagger:model CreateApprovedSITExtension
type CreateApprovedSITExtension struct {

	// Number of days approved for SIT extension. This will match requested days saved to the SIT extension model.
	// Example: 21
	// Required: true
	// Minimum: 1
	ApprovedDays *int64 `json:"approvedDays"`

	// Remarks from TOO about SIT extension creation
	// Example: Customer needs additional storage time as their new place of residence is not yet ready
	OfficeRemarks *string `json:"officeRemarks,omitempty"`

	// Reason from service counselor-provided picklist for SIT extension
	// Example: AWAITING_COMPLETION_OF_RESIDENCE
	// Required: true
	RequestReason *string `json:"requestReason"`

	// shipment ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ShipmentID strfmt.UUID `json:"shipmentID,omitempty"`
}

// Validate validates this create approved s i t extension
func (m *CreateApprovedSITExtension) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovedDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateApprovedSITExtension) validateApprovedDays(formats strfmt.Registry) error {

	if err := validate.Required("approvedDays", "body", m.ApprovedDays); err != nil {
		return err
	}

	if err := validate.MinimumInt("approvedDays", "body", *m.ApprovedDays, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateApprovedSITExtension) validateRequestReason(formats strfmt.Registry) error {

	if err := validate.Required("requestReason", "body", m.RequestReason); err != nil {
		return err
	}

	return nil
}

func (m *CreateApprovedSITExtension) validateShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("shipmentID", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create approved s i t extension based on context it is used
func (m *CreateApprovedSITExtension) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateApprovedSITExtension) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateApprovedSITExtension) UnmarshalBinary(b []byte) error {
	var res CreateApprovedSITExtension
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
