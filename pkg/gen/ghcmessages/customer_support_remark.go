// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerSupportRemark A text remark written by an office user that is associated with a specific move.
//
// swagger:model CustomerSupportRemark
type CustomerSupportRemark struct {

	// content
	// Example: This is a remark about a move.
	// Required: true
	Content *string `json:"content"`

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// move ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	MoveID *strfmt.UUID `json:"moveID"`

	// office user email
	// Read Only: true
	// Pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
	OfficeUserEmail string `json:"officeUserEmail,omitempty"`

	// office user first name
	// Example: Grace
	// Read Only: true
	OfficeUserFirstName string `json:"officeUserFirstName,omitempty"`

	// office user ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	OfficeUserID *strfmt.UUID `json:"officeUserID"`

	// office user last name
	// Example: Griffin
	// Read Only: true
	OfficeUserLastName string `json:"officeUserLastName,omitempty"`

	// updated at
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this customer support remark
func (m *CustomerSupportRemark) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfficeUserEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfficeUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerSupportRemark) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

func (m *CustomerSupportRemark) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerSupportRemark) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerSupportRemark) validateMoveID(formats strfmt.Registry) error {

	if err := validate.Required("moveID", "body", m.MoveID); err != nil {
		return err
	}

	if err := validate.FormatOf("moveID", "body", "uuid", m.MoveID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerSupportRemark) validateOfficeUserEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.OfficeUserEmail) { // not required
		return nil
	}

	if err := validate.Pattern("officeUserEmail", "body", m.OfficeUserEmail, `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerSupportRemark) validateOfficeUserID(formats strfmt.Registry) error {

	if err := validate.Required("officeUserID", "body", m.OfficeUserID); err != nil {
		return err
	}

	if err := validate.FormatOf("officeUserID", "body", "uuid", m.OfficeUserID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerSupportRemark) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this customer support remark based on the context it is used
func (m *CustomerSupportRemark) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfficeUserEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfficeUserFirstName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfficeUserLastName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerSupportRemark) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *CustomerSupportRemark) contextValidateOfficeUserEmail(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "officeUserEmail", "body", string(m.OfficeUserEmail)); err != nil {
		return err
	}

	return nil
}

func (m *CustomerSupportRemark) contextValidateOfficeUserFirstName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "officeUserFirstName", "body", string(m.OfficeUserFirstName)); err != nil {
		return err
	}

	return nil
}

func (m *CustomerSupportRemark) contextValidateOfficeUserLastName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "officeUserLastName", "body", string(m.OfficeUserLastName)); err != nil {
		return err
	}

	return nil
}

func (m *CustomerSupportRemark) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerSupportRemark) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerSupportRemark) UnmarshalBinary(b []byte) error {
	var res CustomerSupportRemark
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
