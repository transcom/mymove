// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Address A postal address
//
// swagger:model Address
type Address struct {

	// City
	// Example: Anytown
	// Required: true
	City *string `json:"city"`

	// Country
	// Example: USA
	Country *string `json:"country,omitempty"`

	// County
	// Example: LOS ANGELES
	County *string `json:"county,omitempty"`

	// e tag
	// Read Only: true
	ETag string `json:"eTag,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// isOconus
	// Example: false
	IsOconus *bool `json:"isOconus,omitempty"`

	// ZIP
	// Example: 90210
	// Required: true
	// Pattern: ^(\d{5}([\-]\d{4})?)$
	PostalCode *string `json:"postalCode"`

	// State
	// Required: true
	// Enum: [AL AK AR AZ CA CO CT DC DE FL GA HI IA ID IL IN KS KY LA MA MD ME MI MN MO MS MT NC ND NE NH NJ NM NV NY OH OK OR PA RI SC SD TN TX UT VA VT WA WI WV WY]
	State *string `json:"state"`

	// Street address 1
	// Example: 123 Main Ave
	// Required: true
	StreetAddress1 *string `json:"streetAddress1"`

	// Street address 2
	// Example: Apartment 9000
	StreetAddress2 *string `json:"streetAddress2,omitempty"`

	// Address Line 3
	// Example: MontmÃ¢rtre
	StreetAddress3 *string `json:"streetAddress3,omitempty"`
}

// Validate validates this address
func (m *Address) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreetAddress1(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Address) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Address) validatePostalCode(formats strfmt.Registry) error {

	if err := validate.Required("postalCode", "body", m.PostalCode); err != nil {
		return err
	}

	if err := validate.Pattern("postalCode", "body", *m.PostalCode, `^(\d{5}([\-]\d{4})?)$`); err != nil {
		return err
	}

	return nil
}

var addressTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AL","AK","AR","AZ","CA","CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addressTypeStatePropEnum = append(addressTypeStatePropEnum, v)
	}
}

const (

	// AddressStateAL captures enum value "AL"
	AddressStateAL string = "AL"

	// AddressStateAK captures enum value "AK"
	AddressStateAK string = "AK"

	// AddressStateAR captures enum value "AR"
	AddressStateAR string = "AR"

	// AddressStateAZ captures enum value "AZ"
	AddressStateAZ string = "AZ"

	// AddressStateCA captures enum value "CA"
	AddressStateCA string = "CA"

	// AddressStateCO captures enum value "CO"
	AddressStateCO string = "CO"

	// AddressStateCT captures enum value "CT"
	AddressStateCT string = "CT"

	// AddressStateDC captures enum value "DC"
	AddressStateDC string = "DC"

	// AddressStateDE captures enum value "DE"
	AddressStateDE string = "DE"

	// AddressStateFL captures enum value "FL"
	AddressStateFL string = "FL"

	// AddressStateGA captures enum value "GA"
	AddressStateGA string = "GA"

	// AddressStateHI captures enum value "HI"
	AddressStateHI string = "HI"

	// AddressStateIA captures enum value "IA"
	AddressStateIA string = "IA"

	// AddressStateID captures enum value "ID"
	AddressStateID string = "ID"

	// AddressStateIL captures enum value "IL"
	AddressStateIL string = "IL"

	// AddressStateIN captures enum value "IN"
	AddressStateIN string = "IN"

	// AddressStateKS captures enum value "KS"
	AddressStateKS string = "KS"

	// AddressStateKY captures enum value "KY"
	AddressStateKY string = "KY"

	// AddressStateLA captures enum value "LA"
	AddressStateLA string = "LA"

	// AddressStateMA captures enum value "MA"
	AddressStateMA string = "MA"

	// AddressStateMD captures enum value "MD"
	AddressStateMD string = "MD"

	// AddressStateME captures enum value "ME"
	AddressStateME string = "ME"

	// AddressStateMI captures enum value "MI"
	AddressStateMI string = "MI"

	// AddressStateMN captures enum value "MN"
	AddressStateMN string = "MN"

	// AddressStateMO captures enum value "MO"
	AddressStateMO string = "MO"

	// AddressStateMS captures enum value "MS"
	AddressStateMS string = "MS"

	// AddressStateMT captures enum value "MT"
	AddressStateMT string = "MT"

	// AddressStateNC captures enum value "NC"
	AddressStateNC string = "NC"

	// AddressStateND captures enum value "ND"
	AddressStateND string = "ND"

	// AddressStateNE captures enum value "NE"
	AddressStateNE string = "NE"

	// AddressStateNH captures enum value "NH"
	AddressStateNH string = "NH"

	// AddressStateNJ captures enum value "NJ"
	AddressStateNJ string = "NJ"

	// AddressStateNM captures enum value "NM"
	AddressStateNM string = "NM"

	// AddressStateNV captures enum value "NV"
	AddressStateNV string = "NV"

	// AddressStateNY captures enum value "NY"
	AddressStateNY string = "NY"

	// AddressStateOH captures enum value "OH"
	AddressStateOH string = "OH"

	// AddressStateOK captures enum value "OK"
	AddressStateOK string = "OK"

	// AddressStateOR captures enum value "OR"
	AddressStateOR string = "OR"

	// AddressStatePA captures enum value "PA"
	AddressStatePA string = "PA"

	// AddressStateRI captures enum value "RI"
	AddressStateRI string = "RI"

	// AddressStateSC captures enum value "SC"
	AddressStateSC string = "SC"

	// AddressStateSD captures enum value "SD"
	AddressStateSD string = "SD"

	// AddressStateTN captures enum value "TN"
	AddressStateTN string = "TN"

	// AddressStateTX captures enum value "TX"
	AddressStateTX string = "TX"

	// AddressStateUT captures enum value "UT"
	AddressStateUT string = "UT"

	// AddressStateVA captures enum value "VA"
	AddressStateVA string = "VA"

	// AddressStateVT captures enum value "VT"
	AddressStateVT string = "VT"

	// AddressStateWA captures enum value "WA"
	AddressStateWA string = "WA"

	// AddressStateWI captures enum value "WI"
	AddressStateWI string = "WI"

	// AddressStateWV captures enum value "WV"
	AddressStateWV string = "WV"

	// AddressStateWY captures enum value "WY"
	AddressStateWY string = "WY"
)

// prop value enum
func (m *Address) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addressTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Address) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateStreetAddress1(formats strfmt.Registry) error {

	if err := validate.Required("streetAddress1", "body", m.StreetAddress1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this address based on the context it is used
func (m *Address) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Address) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Address) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Address) UnmarshalBinary(b []byte) error {
	var res Address
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
