// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// QueuePaymentRequestStatus Queue Payment Request Status
//
// swagger:model QueuePaymentRequestStatus
type QueuePaymentRequestStatus string

func NewQueuePaymentRequestStatus(value QueuePaymentRequestStatus) *QueuePaymentRequestStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated QueuePaymentRequestStatus.
func (m QueuePaymentRequestStatus) Pointer() *QueuePaymentRequestStatus {
	return &m
}

const (

	// QueuePaymentRequestStatusPaymentRequested captures enum value "Payment requested"
	QueuePaymentRequestStatusPaymentRequested QueuePaymentRequestStatus = "Payment requested"

	// QueuePaymentRequestStatusReviewed captures enum value "Reviewed"
	QueuePaymentRequestStatusReviewed QueuePaymentRequestStatus = "Reviewed"

	// QueuePaymentRequestStatusRejected captures enum value "Rejected"
	QueuePaymentRequestStatusRejected QueuePaymentRequestStatus = "Rejected"

	// QueuePaymentRequestStatusPaid captures enum value "Paid"
	QueuePaymentRequestStatusPaid QueuePaymentRequestStatus = "Paid"
)

// for schema
var queuePaymentRequestStatusEnum []interface{}

func init() {
	var res []QueuePaymentRequestStatus
	if err := json.Unmarshal([]byte(`["Payment requested","Reviewed","Rejected","Paid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queuePaymentRequestStatusEnum = append(queuePaymentRequestStatusEnum, v)
	}
}

func (m QueuePaymentRequestStatus) validateQueuePaymentRequestStatusEnum(path, location string, value QueuePaymentRequestStatus) error {
	if err := validate.EnumCase(path, location, value, queuePaymentRequestStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this queue payment request status
func (m QueuePaymentRequestStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateQueuePaymentRequestStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this queue payment request status based on context it is used
func (m QueuePaymentRequestStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
