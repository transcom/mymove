// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Move move
//
// swagger:model Move
type Move struct {

	// The time at which a move is sent back to the TOO becuase the prime added a new service item for approval
	// Format: date-time
	ApprovalsRequestedAt *strfmt.DateTime `json:"approvalsRequestedAt,omitempty"`

	// available to prime at
	// Format: date-time
	AvailableToPrimeAt *strfmt.DateTime `json:"availableToPrimeAt,omitempty"`

	// billable weights reviewed at
	// Format: date-time
	BillableWeightsReviewedAt *strfmt.DateTime `json:"billableWeightsReviewedAt,omitempty"`

	// closeout office
	CloseoutOffice *TransportationOffice `json:"closeoutOffice,omitempty"`

	// The transportation office that will handle reviewing PPM Closeout documentation for Army and Air Force service members
	// Format: uuid
	CloseoutOfficeID *strfmt.UUID `json:"closeoutOfficeId,omitempty"`

	// contractor
	Contractor *Contractor `json:"contractor,omitempty"`

	// contractor Id
	// Format: uuid
	ContractorID *strfmt.UUID `json:"contractorId,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// e tag
	ETag string `json:"eTag,omitempty"`

	// Timestamp of when the TOO acknowledged the excess weight risk by either dismissing the alert or updating the max billable weight
	// Format: date-time
	ExcessWeightAcknowledgedAt *strfmt.DateTime `json:"excess_weight_acknowledged_at,omitempty"`

	// Timestamp of when the estimated shipment weights of the move reached 90% of the weight allowance
	// Format: date-time
	ExcessWeightQualifiedAt *strfmt.DateTime `json:"excess_weight_qualified_at,omitempty"`

	// This flag is set by office users if a move should be reviewed by a Financial Office
	// Example: false
	// Read Only: true
	FinancialReviewFlag bool `json:"financialReviewFlag,omitempty"`

	// financial review remarks
	// Example: Destination address is too far from duty location
	// Read Only: true
	FinancialReviewRemarks *string `json:"financialReviewRemarks,omitempty"`

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// locator
	// Example: 1K43AR
	Locator string `json:"locator,omitempty"`

	// lock expires at
	// Format: date-time
	LockExpiresAt *strfmt.DateTime `json:"lockExpiresAt,omitempty"`

	// locked by office user
	LockedByOfficeUser *LockedOfficeUser `json:"lockedByOfficeUser,omitempty"`

	// locked by office user ID
	// Format: uuid
	LockedByOfficeUserID *strfmt.UUID `json:"lockedByOfficeUserID,omitempty"`

	// orders
	Orders *Order `json:"orders,omitempty"`

	// orders Id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	OrdersID strfmt.UUID `json:"ordersId,omitempty"`

	// reference Id
	// Example: 1001-3456
	ReferenceID *string `json:"referenceId,omitempty"`

	// service counseling completed at
	// Format: date-time
	ServiceCounselingCompletedAt *strfmt.DateTime `json:"serviceCounselingCompletedAt,omitempty"`

	// shipment g b l o c
	ShipmentGBLOC GBLOC `json:"shipmentGBLOC,omitempty"`

	// status
	Status MoveStatus `json:"status,omitempty"`

	// submitted at
	// Format: date-time
	SubmittedAt *strfmt.DateTime `json:"submittedAt,omitempty"`

	// tio remarks
	// Example: approved additional weight
	TioRemarks *string `json:"tioRemarks,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this move
func (m *Move) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovalsRequestedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableToPrimeAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillableWeightsReviewedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloseoutOffice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloseoutOfficeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcessWeightAcknowledgedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcessWeightQualifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedByOfficeUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedByOfficeUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceCounselingCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentGBLOC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Move) validateApprovalsRequestedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovalsRequestedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("approvalsRequestedAt", "body", "date-time", m.ApprovalsRequestedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateAvailableToPrimeAt(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableToPrimeAt) { // not required
		return nil
	}

	if err := validate.FormatOf("availableToPrimeAt", "body", "date-time", m.AvailableToPrimeAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateBillableWeightsReviewedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.BillableWeightsReviewedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("billableWeightsReviewedAt", "body", "date-time", m.BillableWeightsReviewedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateCloseoutOffice(formats strfmt.Registry) error {
	if swag.IsZero(m.CloseoutOffice) { // not required
		return nil
	}

	if m.CloseoutOffice != nil {
		if err := m.CloseoutOffice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeoutOffice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("closeoutOffice")
			}
			return err
		}
	}

	return nil
}

func (m *Move) validateCloseoutOfficeID(formats strfmt.Registry) error {
	if swag.IsZero(m.CloseoutOfficeID) { // not required
		return nil
	}

	if err := validate.FormatOf("closeoutOfficeId", "body", "uuid", m.CloseoutOfficeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateContractor(formats strfmt.Registry) error {
	if swag.IsZero(m.Contractor) { // not required
		return nil
	}

	if m.Contractor != nil {
		if err := m.Contractor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contractor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contractor")
			}
			return err
		}
	}

	return nil
}

func (m *Move) validateContractorID(formats strfmt.Registry) error {
	if swag.IsZero(m.ContractorID) { // not required
		return nil
	}

	if err := validate.FormatOf("contractorId", "body", "uuid", m.ContractorID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateExcessWeightAcknowledgedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcessWeightAcknowledgedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("excess_weight_acknowledged_at", "body", "date-time", m.ExcessWeightAcknowledgedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateExcessWeightQualifiedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcessWeightQualifiedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("excess_weight_qualified_at", "body", "date-time", m.ExcessWeightQualifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateLockExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LockExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("lockExpiresAt", "body", "date-time", m.LockExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateLockedByOfficeUser(formats strfmt.Registry) error {
	if swag.IsZero(m.LockedByOfficeUser) { // not required
		return nil
	}

	if m.LockedByOfficeUser != nil {
		if err := m.LockedByOfficeUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lockedByOfficeUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lockedByOfficeUser")
			}
			return err
		}
	}

	return nil
}

func (m *Move) validateLockedByOfficeUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.LockedByOfficeUserID) { // not required
		return nil
	}

	if err := validate.FormatOf("lockedByOfficeUserID", "body", "uuid", m.LockedByOfficeUserID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateOrders(formats strfmt.Registry) error {
	if swag.IsZero(m.Orders) { // not required
		return nil
	}

	if m.Orders != nil {
		if err := m.Orders.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orders")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orders")
			}
			return err
		}
	}

	return nil
}

func (m *Move) validateOrdersID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdersID) { // not required
		return nil
	}

	if err := validate.FormatOf("ordersId", "body", "uuid", m.OrdersID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateServiceCounselingCompletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceCounselingCompletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("serviceCounselingCompletedAt", "body", "date-time", m.ServiceCounselingCompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateShipmentGBLOC(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentGBLOC) { // not required
		return nil
	}

	if err := m.ShipmentGBLOC.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipmentGBLOC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shipmentGBLOC")
		}
		return err
	}

	return nil
}

func (m *Move) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *Move) validateSubmittedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmittedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submittedAt", "body", "date-time", m.SubmittedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this move based on the context it is used
func (m *Move) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloseoutOffice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContractor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFinancialReviewFlag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFinancialReviewRemarks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLockedByOfficeUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentGBLOC(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Move) contextValidateCloseoutOffice(ctx context.Context, formats strfmt.Registry) error {

	if m.CloseoutOffice != nil {

		if swag.IsZero(m.CloseoutOffice) { // not required
			return nil
		}

		if err := m.CloseoutOffice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeoutOffice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("closeoutOffice")
			}
			return err
		}
	}

	return nil
}

func (m *Move) contextValidateContractor(ctx context.Context, formats strfmt.Registry) error {

	if m.Contractor != nil {

		if swag.IsZero(m.Contractor) { // not required
			return nil
		}

		if err := m.Contractor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contractor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contractor")
			}
			return err
		}
	}

	return nil
}

func (m *Move) contextValidateFinancialReviewFlag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "financialReviewFlag", "body", bool(m.FinancialReviewFlag)); err != nil {
		return err
	}

	return nil
}

func (m *Move) contextValidateFinancialReviewRemarks(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "financialReviewRemarks", "body", m.FinancialReviewRemarks); err != nil {
		return err
	}

	return nil
}

func (m *Move) contextValidateLockedByOfficeUser(ctx context.Context, formats strfmt.Registry) error {

	if m.LockedByOfficeUser != nil {

		if swag.IsZero(m.LockedByOfficeUser) { // not required
			return nil
		}

		if err := m.LockedByOfficeUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lockedByOfficeUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lockedByOfficeUser")
			}
			return err
		}
	}

	return nil
}

func (m *Move) contextValidateOrders(ctx context.Context, formats strfmt.Registry) error {

	if m.Orders != nil {

		if swag.IsZero(m.Orders) { // not required
			return nil
		}

		if err := m.Orders.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orders")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orders")
			}
			return err
		}
	}

	return nil
}

func (m *Move) contextValidateShipmentGBLOC(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ShipmentGBLOC) { // not required
		return nil
	}

	if err := m.ShipmentGBLOC.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipmentGBLOC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shipmentGBLOC")
		}
		return err
	}

	return nil
}

func (m *Move) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Move) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Move) UnmarshalBinary(b []byte) error {
	var res Move
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
