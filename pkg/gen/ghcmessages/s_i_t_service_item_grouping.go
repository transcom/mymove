// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SITServiceItemGrouping s i t service item grouping
//
// swagger:model SITServiceItemGrouping
type SITServiceItemGrouping struct {

	// service items
	ServiceItems MTOServiceItems `json:"serviceItems,omitempty"`

	// Holds the top level summary of a Service Item Grouping, detailing the ServiceItemID of the first day SIT service item (Eg, DOFSIT, DOASIT), the location (ORIGIN/DESTINATION), how many days the provided instance of SIT has been in storage, SIT entry date, departure date, authorized end date, customer contacted date, requested delivery date.
	// This is provided at a top level because due to our service item architecture, SIT information is sometimes split across multiple service items, and this summary is a compilation of said information. This prevents the need to loop over many service items.
	//
	Summary *SITSummary `json:"summary,omitempty"`
}

// Validate validates this s i t service item grouping
func (m *SITServiceItemGrouping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SITServiceItemGrouping) validateServiceItems(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceItems) { // not required
		return nil
	}

	if err := m.ServiceItems.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceItems")
		}
		return err
	}

	return nil
}

func (m *SITServiceItemGrouping) validateSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.Summary) { // not required
		return nil
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summary")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this s i t service item grouping based on the context it is used
func (m *SITServiceItemGrouping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SITServiceItemGrouping) contextValidateServiceItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ServiceItems.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceItems")
		}
		return err
	}

	return nil
}

func (m *SITServiceItemGrouping) contextValidateSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.Summary != nil {

		if swag.IsZero(m.Summary) { // not required
			return nil
		}

		if err := m.Summary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SITServiceItemGrouping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SITServiceItemGrouping) UnmarshalBinary(b []byte) error {
	var res SITServiceItemGrouping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
