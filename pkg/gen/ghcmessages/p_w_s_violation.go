// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PWSViolation A PWS violation for an evaluation report
//
// swagger:model PWSViolation
type PWSViolation struct {

	// additional data elem
	// Example: QAE Observed Delivery Date
	AdditionalDataElem string `json:"additionalDataElem,omitempty"`

	// category
	// Example: Pre-Move Services
	Category string `json:"category,omitempty"`

	// display order
	// Example: 3
	DisplayOrder int64 `json:"displayOrder,omitempty"`

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// is kpi
	// Example: false
	IsKpi bool `json:"isKpi,omitempty"`

	// paragraph number
	// Example: 1.2.3.4.5
	ParagraphNumber string `json:"paragraphNumber,omitempty"`

	// requirement statement
	// Example: The contractor shall prepare and load property going into NTS in containers at residence for shipment to NTS.
	RequirementStatement string `json:"requirementStatement,omitempty"`

	// requirement summary
	// Example: Provide a single point of contact (POC)
	RequirementSummary string `json:"requirementSummary,omitempty"`

	// sub category
	// Example: Weight Estimate
	SubCategory string `json:"subCategory,omitempty"`

	// title
	// Example: Customer Support
	Title string `json:"title,omitempty"`
}

// Validate validates this p w s violation
func (m *PWSViolation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PWSViolation) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p w s violation based on the context it is used
func (m *PWSViolation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PWSViolation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PWSViolation) UnmarshalBinary(b []byte) error {
	var res PWSViolation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
