// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Country Country code and name
//
// swagger:model Country
type Country struct {

	// Country Code
	// Enum: [A2 AD AE AF AG AI AL AM AN AO AQ AR AS AT AU AW AZ BA BB BD BE BF BG BH BI BJ BL BM BN BO BQ BR BS BT BV BW BY BZ CA CC CD CF CG CH CI CK CL CM CN CO CP CR CU CV CW CX CY CZ DE DG DJ DK DM DO DZ EC EE EG ER ES ET FI FJ FK FM FO FR GA GB GD GE GF GG GH GI GL GM GN GP GQ GR GS GT GU GW GY HK HM HN HR HT HU ID IE IL IM IN IO IQ IR IS IT JE JM JO JP KE KG KH KI KM KN KP KR KW KY KZ LA LB LC LI LK LR LS LT LV LY MA MD ME MF MG MH MK ML MM MN MO MP MQ MS MT MU MV MW MY MZ NA NC NE NG NL NO NP NU NZ OM PA PF PG PH PL PM PN PR PW PY QA QM QS QU QW QX QZ RO RS RW SA SB SC SD SE SG SH SI SK SM SN SO SR SS ST SV SX SZ TC TD TF TH TJ TK TN TO TR TT TV TW UA UG US UY VA VC VG VI VN VU WS XA XB XC XD XE XG XH XJ XK XL XM XP XQ XR XS XU XV XW YE YT ZA ZM LU EH MC ZW VE WF XT MR MX NF NI NR PE PK PT RE RU SL SY TG TL TM TZ UZ]
	Code string `json:"code,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Country Name
	// Example: UNITED STATES
	Name string `json:"name,omitempty"`
}

// Validate validates this country
func (m *Country) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var countryTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A2","AD","AE","AF","AG","AI","AL","AM","AN","AO","AQ","AR","AS","AT","AU","AW","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CP","CR","CU","CV","CW","CX","CY","CZ","DE","DG","DJ","DK","DM","DO","DZ","EC","EE","EG","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LV","LY","MA","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MS","MT","MU","MV","MW","MY","MZ","NA","NC","NE","NG","NL","NO","NP","NU","NZ","OM","PA","PF","PG","PH","PL","PM","PN","PR","PW","PY","QA","QM","QS","QU","QW","QX","QZ","RO","RS","RW","SA","SB","SC","SD","SE","SG","SH","SI","SK","SM","SN","SO","SR","SS","ST","SV","SX","SZ","TC","TD","TF","TH","TJ","TK","TN","TO","TR","TT","TV","TW","UA","UG","US","UY","VA","VC","VG","VI","VN","VU","WS","XA","XB","XC","XD","XE","XG","XH","XJ","XK","XL","XM","XP","XQ","XR","XS","XU","XV","XW","YE","YT","ZA","ZM","LU","EH","MC","ZW","VE","WF","XT","MR","MX","NF","NI","NR","PE","PK","PT","RE","RU","SL","SY","TG","TL","TM","TZ","UZ"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		countryTypeCodePropEnum = append(countryTypeCodePropEnum, v)
	}
}

const (

	// CountryCodeA2 captures enum value "A2"
	CountryCodeA2 string = "A2"

	// CountryCodeAD captures enum value "AD"
	CountryCodeAD string = "AD"

	// CountryCodeAE captures enum value "AE"
	CountryCodeAE string = "AE"

	// CountryCodeAF captures enum value "AF"
	CountryCodeAF string = "AF"

	// CountryCodeAG captures enum value "AG"
	CountryCodeAG string = "AG"

	// CountryCodeAI captures enum value "AI"
	CountryCodeAI string = "AI"

	// CountryCodeAL captures enum value "AL"
	CountryCodeAL string = "AL"

	// CountryCodeAM captures enum value "AM"
	CountryCodeAM string = "AM"

	// CountryCodeAN captures enum value "AN"
	CountryCodeAN string = "AN"

	// CountryCodeAO captures enum value "AO"
	CountryCodeAO string = "AO"

	// CountryCodeAQ captures enum value "AQ"
	CountryCodeAQ string = "AQ"

	// CountryCodeAR captures enum value "AR"
	CountryCodeAR string = "AR"

	// CountryCodeAS captures enum value "AS"
	CountryCodeAS string = "AS"

	// CountryCodeAT captures enum value "AT"
	CountryCodeAT string = "AT"

	// CountryCodeAU captures enum value "AU"
	CountryCodeAU string = "AU"

	// CountryCodeAW captures enum value "AW"
	CountryCodeAW string = "AW"

	// CountryCodeAZ captures enum value "AZ"
	CountryCodeAZ string = "AZ"

	// CountryCodeBA captures enum value "BA"
	CountryCodeBA string = "BA"

	// CountryCodeBB captures enum value "BB"
	CountryCodeBB string = "BB"

	// CountryCodeBD captures enum value "BD"
	CountryCodeBD string = "BD"

	// CountryCodeBE captures enum value "BE"
	CountryCodeBE string = "BE"

	// CountryCodeBF captures enum value "BF"
	CountryCodeBF string = "BF"

	// CountryCodeBG captures enum value "BG"
	CountryCodeBG string = "BG"

	// CountryCodeBH captures enum value "BH"
	CountryCodeBH string = "BH"

	// CountryCodeBI captures enum value "BI"
	CountryCodeBI string = "BI"

	// CountryCodeBJ captures enum value "BJ"
	CountryCodeBJ string = "BJ"

	// CountryCodeBL captures enum value "BL"
	CountryCodeBL string = "BL"

	// CountryCodeBM captures enum value "BM"
	CountryCodeBM string = "BM"

	// CountryCodeBN captures enum value "BN"
	CountryCodeBN string = "BN"

	// CountryCodeBO captures enum value "BO"
	CountryCodeBO string = "BO"

	// CountryCodeBQ captures enum value "BQ"
	CountryCodeBQ string = "BQ"

	// CountryCodeBR captures enum value "BR"
	CountryCodeBR string = "BR"

	// CountryCodeBS captures enum value "BS"
	CountryCodeBS string = "BS"

	// CountryCodeBT captures enum value "BT"
	CountryCodeBT string = "BT"

	// CountryCodeBV captures enum value "BV"
	CountryCodeBV string = "BV"

	// CountryCodeBW captures enum value "BW"
	CountryCodeBW string = "BW"

	// CountryCodeBY captures enum value "BY"
	CountryCodeBY string = "BY"

	// CountryCodeBZ captures enum value "BZ"
	CountryCodeBZ string = "BZ"

	// CountryCodeCA captures enum value "CA"
	CountryCodeCA string = "CA"

	// CountryCodeCC captures enum value "CC"
	CountryCodeCC string = "CC"

	// CountryCodeCD captures enum value "CD"
	CountryCodeCD string = "CD"

	// CountryCodeCF captures enum value "CF"
	CountryCodeCF string = "CF"

	// CountryCodeCG captures enum value "CG"
	CountryCodeCG string = "CG"

	// CountryCodeCH captures enum value "CH"
	CountryCodeCH string = "CH"

	// CountryCodeCI captures enum value "CI"
	CountryCodeCI string = "CI"

	// CountryCodeCK captures enum value "CK"
	CountryCodeCK string = "CK"

	// CountryCodeCL captures enum value "CL"
	CountryCodeCL string = "CL"

	// CountryCodeCM captures enum value "CM"
	CountryCodeCM string = "CM"

	// CountryCodeCN captures enum value "CN"
	CountryCodeCN string = "CN"

	// CountryCodeCO captures enum value "CO"
	CountryCodeCO string = "CO"

	// CountryCodeCP captures enum value "CP"
	CountryCodeCP string = "CP"

	// CountryCodeCR captures enum value "CR"
	CountryCodeCR string = "CR"

	// CountryCodeCU captures enum value "CU"
	CountryCodeCU string = "CU"

	// CountryCodeCV captures enum value "CV"
	CountryCodeCV string = "CV"

	// CountryCodeCW captures enum value "CW"
	CountryCodeCW string = "CW"

	// CountryCodeCX captures enum value "CX"
	CountryCodeCX string = "CX"

	// CountryCodeCY captures enum value "CY"
	CountryCodeCY string = "CY"

	// CountryCodeCZ captures enum value "CZ"
	CountryCodeCZ string = "CZ"

	// CountryCodeDE captures enum value "DE"
	CountryCodeDE string = "DE"

	// CountryCodeDG captures enum value "DG"
	CountryCodeDG string = "DG"

	// CountryCodeDJ captures enum value "DJ"
	CountryCodeDJ string = "DJ"

	// CountryCodeDK captures enum value "DK"
	CountryCodeDK string = "DK"

	// CountryCodeDM captures enum value "DM"
	CountryCodeDM string = "DM"

	// CountryCodeDO captures enum value "DO"
	CountryCodeDO string = "DO"

	// CountryCodeDZ captures enum value "DZ"
	CountryCodeDZ string = "DZ"

	// CountryCodeEC captures enum value "EC"
	CountryCodeEC string = "EC"

	// CountryCodeEE captures enum value "EE"
	CountryCodeEE string = "EE"

	// CountryCodeEG captures enum value "EG"
	CountryCodeEG string = "EG"

	// CountryCodeER captures enum value "ER"
	CountryCodeER string = "ER"

	// CountryCodeES captures enum value "ES"
	CountryCodeES string = "ES"

	// CountryCodeET captures enum value "ET"
	CountryCodeET string = "ET"

	// CountryCodeFI captures enum value "FI"
	CountryCodeFI string = "FI"

	// CountryCodeFJ captures enum value "FJ"
	CountryCodeFJ string = "FJ"

	// CountryCodeFK captures enum value "FK"
	CountryCodeFK string = "FK"

	// CountryCodeFM captures enum value "FM"
	CountryCodeFM string = "FM"

	// CountryCodeFO captures enum value "FO"
	CountryCodeFO string = "FO"

	// CountryCodeFR captures enum value "FR"
	CountryCodeFR string = "FR"

	// CountryCodeGA captures enum value "GA"
	CountryCodeGA string = "GA"

	// CountryCodeGB captures enum value "GB"
	CountryCodeGB string = "GB"

	// CountryCodeGD captures enum value "GD"
	CountryCodeGD string = "GD"

	// CountryCodeGE captures enum value "GE"
	CountryCodeGE string = "GE"

	// CountryCodeGF captures enum value "GF"
	CountryCodeGF string = "GF"

	// CountryCodeGG captures enum value "GG"
	CountryCodeGG string = "GG"

	// CountryCodeGH captures enum value "GH"
	CountryCodeGH string = "GH"

	// CountryCodeGI captures enum value "GI"
	CountryCodeGI string = "GI"

	// CountryCodeGL captures enum value "GL"
	CountryCodeGL string = "GL"

	// CountryCodeGM captures enum value "GM"
	CountryCodeGM string = "GM"

	// CountryCodeGN captures enum value "GN"
	CountryCodeGN string = "GN"

	// CountryCodeGP captures enum value "GP"
	CountryCodeGP string = "GP"

	// CountryCodeGQ captures enum value "GQ"
	CountryCodeGQ string = "GQ"

	// CountryCodeGR captures enum value "GR"
	CountryCodeGR string = "GR"

	// CountryCodeGS captures enum value "GS"
	CountryCodeGS string = "GS"

	// CountryCodeGT captures enum value "GT"
	CountryCodeGT string = "GT"

	// CountryCodeGU captures enum value "GU"
	CountryCodeGU string = "GU"

	// CountryCodeGW captures enum value "GW"
	CountryCodeGW string = "GW"

	// CountryCodeGY captures enum value "GY"
	CountryCodeGY string = "GY"

	// CountryCodeHK captures enum value "HK"
	CountryCodeHK string = "HK"

	// CountryCodeHM captures enum value "HM"
	CountryCodeHM string = "HM"

	// CountryCodeHN captures enum value "HN"
	CountryCodeHN string = "HN"

	// CountryCodeHR captures enum value "HR"
	CountryCodeHR string = "HR"

	// CountryCodeHT captures enum value "HT"
	CountryCodeHT string = "HT"

	// CountryCodeHU captures enum value "HU"
	CountryCodeHU string = "HU"

	// CountryCodeID captures enum value "ID"
	CountryCodeID string = "ID"

	// CountryCodeIE captures enum value "IE"
	CountryCodeIE string = "IE"

	// CountryCodeIL captures enum value "IL"
	CountryCodeIL string = "IL"

	// CountryCodeIM captures enum value "IM"
	CountryCodeIM string = "IM"

	// CountryCodeIN captures enum value "IN"
	CountryCodeIN string = "IN"

	// CountryCodeIO captures enum value "IO"
	CountryCodeIO string = "IO"

	// CountryCodeIQ captures enum value "IQ"
	CountryCodeIQ string = "IQ"

	// CountryCodeIR captures enum value "IR"
	CountryCodeIR string = "IR"

	// CountryCodeIS captures enum value "IS"
	CountryCodeIS string = "IS"

	// CountryCodeIT captures enum value "IT"
	CountryCodeIT string = "IT"

	// CountryCodeJE captures enum value "JE"
	CountryCodeJE string = "JE"

	// CountryCodeJM captures enum value "JM"
	CountryCodeJM string = "JM"

	// CountryCodeJO captures enum value "JO"
	CountryCodeJO string = "JO"

	// CountryCodeJP captures enum value "JP"
	CountryCodeJP string = "JP"

	// CountryCodeKE captures enum value "KE"
	CountryCodeKE string = "KE"

	// CountryCodeKG captures enum value "KG"
	CountryCodeKG string = "KG"

	// CountryCodeKH captures enum value "KH"
	CountryCodeKH string = "KH"

	// CountryCodeKI captures enum value "KI"
	CountryCodeKI string = "KI"

	// CountryCodeKM captures enum value "KM"
	CountryCodeKM string = "KM"

	// CountryCodeKN captures enum value "KN"
	CountryCodeKN string = "KN"

	// CountryCodeKP captures enum value "KP"
	CountryCodeKP string = "KP"

	// CountryCodeKR captures enum value "KR"
	CountryCodeKR string = "KR"

	// CountryCodeKW captures enum value "KW"
	CountryCodeKW string = "KW"

	// CountryCodeKY captures enum value "KY"
	CountryCodeKY string = "KY"

	// CountryCodeKZ captures enum value "KZ"
	CountryCodeKZ string = "KZ"

	// CountryCodeLA captures enum value "LA"
	CountryCodeLA string = "LA"

	// CountryCodeLB captures enum value "LB"
	CountryCodeLB string = "LB"

	// CountryCodeLC captures enum value "LC"
	CountryCodeLC string = "LC"

	// CountryCodeLI captures enum value "LI"
	CountryCodeLI string = "LI"

	// CountryCodeLK captures enum value "LK"
	CountryCodeLK string = "LK"

	// CountryCodeLR captures enum value "LR"
	CountryCodeLR string = "LR"

	// CountryCodeLS captures enum value "LS"
	CountryCodeLS string = "LS"

	// CountryCodeLT captures enum value "LT"
	CountryCodeLT string = "LT"

	// CountryCodeLV captures enum value "LV"
	CountryCodeLV string = "LV"

	// CountryCodeLY captures enum value "LY"
	CountryCodeLY string = "LY"

	// CountryCodeMA captures enum value "MA"
	CountryCodeMA string = "MA"

	// CountryCodeMD captures enum value "MD"
	CountryCodeMD string = "MD"

	// CountryCodeME captures enum value "ME"
	CountryCodeME string = "ME"

	// CountryCodeMF captures enum value "MF"
	CountryCodeMF string = "MF"

	// CountryCodeMG captures enum value "MG"
	CountryCodeMG string = "MG"

	// CountryCodeMH captures enum value "MH"
	CountryCodeMH string = "MH"

	// CountryCodeMK captures enum value "MK"
	CountryCodeMK string = "MK"

	// CountryCodeML captures enum value "ML"
	CountryCodeML string = "ML"

	// CountryCodeMM captures enum value "MM"
	CountryCodeMM string = "MM"

	// CountryCodeMN captures enum value "MN"
	CountryCodeMN string = "MN"

	// CountryCodeMO captures enum value "MO"
	CountryCodeMO string = "MO"

	// CountryCodeMP captures enum value "MP"
	CountryCodeMP string = "MP"

	// CountryCodeMQ captures enum value "MQ"
	CountryCodeMQ string = "MQ"

	// CountryCodeMS captures enum value "MS"
	CountryCodeMS string = "MS"

	// CountryCodeMT captures enum value "MT"
	CountryCodeMT string = "MT"

	// CountryCodeMU captures enum value "MU"
	CountryCodeMU string = "MU"

	// CountryCodeMV captures enum value "MV"
	CountryCodeMV string = "MV"

	// CountryCodeMW captures enum value "MW"
	CountryCodeMW string = "MW"

	// CountryCodeMY captures enum value "MY"
	CountryCodeMY string = "MY"

	// CountryCodeMZ captures enum value "MZ"
	CountryCodeMZ string = "MZ"

	// CountryCodeNA captures enum value "NA"
	CountryCodeNA string = "NA"

	// CountryCodeNC captures enum value "NC"
	CountryCodeNC string = "NC"

	// CountryCodeNE captures enum value "NE"
	CountryCodeNE string = "NE"

	// CountryCodeNG captures enum value "NG"
	CountryCodeNG string = "NG"

	// CountryCodeNL captures enum value "NL"
	CountryCodeNL string = "NL"

	// CountryCodeNO captures enum value "NO"
	CountryCodeNO string = "NO"

	// CountryCodeNP captures enum value "NP"
	CountryCodeNP string = "NP"

	// CountryCodeNU captures enum value "NU"
	CountryCodeNU string = "NU"

	// CountryCodeNZ captures enum value "NZ"
	CountryCodeNZ string = "NZ"

	// CountryCodeOM captures enum value "OM"
	CountryCodeOM string = "OM"

	// CountryCodePA captures enum value "PA"
	CountryCodePA string = "PA"

	// CountryCodePF captures enum value "PF"
	CountryCodePF string = "PF"

	// CountryCodePG captures enum value "PG"
	CountryCodePG string = "PG"

	// CountryCodePH captures enum value "PH"
	CountryCodePH string = "PH"

	// CountryCodePL captures enum value "PL"
	CountryCodePL string = "PL"

	// CountryCodePM captures enum value "PM"
	CountryCodePM string = "PM"

	// CountryCodePN captures enum value "PN"
	CountryCodePN string = "PN"

	// CountryCodePR captures enum value "PR"
	CountryCodePR string = "PR"

	// CountryCodePW captures enum value "PW"
	CountryCodePW string = "PW"

	// CountryCodePY captures enum value "PY"
	CountryCodePY string = "PY"

	// CountryCodeQA captures enum value "QA"
	CountryCodeQA string = "QA"

	// CountryCodeQM captures enum value "QM"
	CountryCodeQM string = "QM"

	// CountryCodeQS captures enum value "QS"
	CountryCodeQS string = "QS"

	// CountryCodeQU captures enum value "QU"
	CountryCodeQU string = "QU"

	// CountryCodeQW captures enum value "QW"
	CountryCodeQW string = "QW"

	// CountryCodeQX captures enum value "QX"
	CountryCodeQX string = "QX"

	// CountryCodeQZ captures enum value "QZ"
	CountryCodeQZ string = "QZ"

	// CountryCodeRO captures enum value "RO"
	CountryCodeRO string = "RO"

	// CountryCodeRS captures enum value "RS"
	CountryCodeRS string = "RS"

	// CountryCodeRW captures enum value "RW"
	CountryCodeRW string = "RW"

	// CountryCodeSA captures enum value "SA"
	CountryCodeSA string = "SA"

	// CountryCodeSB captures enum value "SB"
	CountryCodeSB string = "SB"

	// CountryCodeSC captures enum value "SC"
	CountryCodeSC string = "SC"

	// CountryCodeSD captures enum value "SD"
	CountryCodeSD string = "SD"

	// CountryCodeSE captures enum value "SE"
	CountryCodeSE string = "SE"

	// CountryCodeSG captures enum value "SG"
	CountryCodeSG string = "SG"

	// CountryCodeSH captures enum value "SH"
	CountryCodeSH string = "SH"

	// CountryCodeSI captures enum value "SI"
	CountryCodeSI string = "SI"

	// CountryCodeSK captures enum value "SK"
	CountryCodeSK string = "SK"

	// CountryCodeSM captures enum value "SM"
	CountryCodeSM string = "SM"

	// CountryCodeSN captures enum value "SN"
	CountryCodeSN string = "SN"

	// CountryCodeSO captures enum value "SO"
	CountryCodeSO string = "SO"

	// CountryCodeSR captures enum value "SR"
	CountryCodeSR string = "SR"

	// CountryCodeSS captures enum value "SS"
	CountryCodeSS string = "SS"

	// CountryCodeST captures enum value "ST"
	CountryCodeST string = "ST"

	// CountryCodeSV captures enum value "SV"
	CountryCodeSV string = "SV"

	// CountryCodeSX captures enum value "SX"
	CountryCodeSX string = "SX"

	// CountryCodeSZ captures enum value "SZ"
	CountryCodeSZ string = "SZ"

	// CountryCodeTC captures enum value "TC"
	CountryCodeTC string = "TC"

	// CountryCodeTD captures enum value "TD"
	CountryCodeTD string = "TD"

	// CountryCodeTF captures enum value "TF"
	CountryCodeTF string = "TF"

	// CountryCodeTH captures enum value "TH"
	CountryCodeTH string = "TH"

	// CountryCodeTJ captures enum value "TJ"
	CountryCodeTJ string = "TJ"

	// CountryCodeTK captures enum value "TK"
	CountryCodeTK string = "TK"

	// CountryCodeTN captures enum value "TN"
	CountryCodeTN string = "TN"

	// CountryCodeTO captures enum value "TO"
	CountryCodeTO string = "TO"

	// CountryCodeTR captures enum value "TR"
	CountryCodeTR string = "TR"

	// CountryCodeTT captures enum value "TT"
	CountryCodeTT string = "TT"

	// CountryCodeTV captures enum value "TV"
	CountryCodeTV string = "TV"

	// CountryCodeTW captures enum value "TW"
	CountryCodeTW string = "TW"

	// CountryCodeUA captures enum value "UA"
	CountryCodeUA string = "UA"

	// CountryCodeUG captures enum value "UG"
	CountryCodeUG string = "UG"

	// CountryCodeUS captures enum value "US"
	CountryCodeUS string = "US"

	// CountryCodeUY captures enum value "UY"
	CountryCodeUY string = "UY"

	// CountryCodeVA captures enum value "VA"
	CountryCodeVA string = "VA"

	// CountryCodeVC captures enum value "VC"
	CountryCodeVC string = "VC"

	// CountryCodeVG captures enum value "VG"
	CountryCodeVG string = "VG"

	// CountryCodeVI captures enum value "VI"
	CountryCodeVI string = "VI"

	// CountryCodeVN captures enum value "VN"
	CountryCodeVN string = "VN"

	// CountryCodeVU captures enum value "VU"
	CountryCodeVU string = "VU"

	// CountryCodeWS captures enum value "WS"
	CountryCodeWS string = "WS"

	// CountryCodeXA captures enum value "XA"
	CountryCodeXA string = "XA"

	// CountryCodeXB captures enum value "XB"
	CountryCodeXB string = "XB"

	// CountryCodeXC captures enum value "XC"
	CountryCodeXC string = "XC"

	// CountryCodeXD captures enum value "XD"
	CountryCodeXD string = "XD"

	// CountryCodeXE captures enum value "XE"
	CountryCodeXE string = "XE"

	// CountryCodeXG captures enum value "XG"
	CountryCodeXG string = "XG"

	// CountryCodeXH captures enum value "XH"
	CountryCodeXH string = "XH"

	// CountryCodeXJ captures enum value "XJ"
	CountryCodeXJ string = "XJ"

	// CountryCodeXK captures enum value "XK"
	CountryCodeXK string = "XK"

	// CountryCodeXL captures enum value "XL"
	CountryCodeXL string = "XL"

	// CountryCodeXM captures enum value "XM"
	CountryCodeXM string = "XM"

	// CountryCodeXP captures enum value "XP"
	CountryCodeXP string = "XP"

	// CountryCodeXQ captures enum value "XQ"
	CountryCodeXQ string = "XQ"

	// CountryCodeXR captures enum value "XR"
	CountryCodeXR string = "XR"

	// CountryCodeXS captures enum value "XS"
	CountryCodeXS string = "XS"

	// CountryCodeXU captures enum value "XU"
	CountryCodeXU string = "XU"

	// CountryCodeXV captures enum value "XV"
	CountryCodeXV string = "XV"

	// CountryCodeXW captures enum value "XW"
	CountryCodeXW string = "XW"

	// CountryCodeYE captures enum value "YE"
	CountryCodeYE string = "YE"

	// CountryCodeYT captures enum value "YT"
	CountryCodeYT string = "YT"

	// CountryCodeZA captures enum value "ZA"
	CountryCodeZA string = "ZA"

	// CountryCodeZM captures enum value "ZM"
	CountryCodeZM string = "ZM"

	// CountryCodeLU captures enum value "LU"
	CountryCodeLU string = "LU"

	// CountryCodeEH captures enum value "EH"
	CountryCodeEH string = "EH"

	// CountryCodeMC captures enum value "MC"
	CountryCodeMC string = "MC"

	// CountryCodeZW captures enum value "ZW"
	CountryCodeZW string = "ZW"

	// CountryCodeVE captures enum value "VE"
	CountryCodeVE string = "VE"

	// CountryCodeWF captures enum value "WF"
	CountryCodeWF string = "WF"

	// CountryCodeXT captures enum value "XT"
	CountryCodeXT string = "XT"

	// CountryCodeMR captures enum value "MR"
	CountryCodeMR string = "MR"

	// CountryCodeMX captures enum value "MX"
	CountryCodeMX string = "MX"

	// CountryCodeNF captures enum value "NF"
	CountryCodeNF string = "NF"

	// CountryCodeNI captures enum value "NI"
	CountryCodeNI string = "NI"

	// CountryCodeNR captures enum value "NR"
	CountryCodeNR string = "NR"

	// CountryCodePE captures enum value "PE"
	CountryCodePE string = "PE"

	// CountryCodePK captures enum value "PK"
	CountryCodePK string = "PK"

	// CountryCodePT captures enum value "PT"
	CountryCodePT string = "PT"

	// CountryCodeRE captures enum value "RE"
	CountryCodeRE string = "RE"

	// CountryCodeRU captures enum value "RU"
	CountryCodeRU string = "RU"

	// CountryCodeSL captures enum value "SL"
	CountryCodeSL string = "SL"

	// CountryCodeSY captures enum value "SY"
	CountryCodeSY string = "SY"

	// CountryCodeTG captures enum value "TG"
	CountryCodeTG string = "TG"

	// CountryCodeTL captures enum value "TL"
	CountryCodeTL string = "TL"

	// CountryCodeTM captures enum value "TM"
	CountryCodeTM string = "TM"

	// CountryCodeTZ captures enum value "TZ"
	CountryCodeTZ string = "TZ"

	// CountryCodeUZ captures enum value "UZ"
	CountryCodeUZ string = "UZ"
)

// prop value enum
func (m *Country) validateCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, countryTypeCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Country) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *Country) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this country based on context it is used
func (m *Country) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Country) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Country) UnmarshalBinary(b []byte) error {
	var res Country
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
