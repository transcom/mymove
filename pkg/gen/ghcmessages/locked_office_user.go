// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LockedOfficeUser locked office user
//
// swagger:model LockedOfficeUser
type LockedOfficeUser struct {

	// first name
	FirstName string `json:"firstName,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// transportation office
	TransportationOffice *TransportationOffice `json:"transportationOffice,omitempty"`

	// transportation office Id
	// Format: uuid
	TransportationOfficeID strfmt.UUID `json:"transportationOfficeId,omitempty"`
}

// Validate validates this locked office user
func (m *LockedOfficeUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransportationOffice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportationOfficeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LockedOfficeUser) validateTransportationOffice(formats strfmt.Registry) error {
	if swag.IsZero(m.TransportationOffice) { // not required
		return nil
	}

	if m.TransportationOffice != nil {
		if err := m.TransportationOffice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transportationOffice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transportationOffice")
			}
			return err
		}
	}

	return nil
}

func (m *LockedOfficeUser) validateTransportationOfficeID(formats strfmt.Registry) error {
	if swag.IsZero(m.TransportationOfficeID) { // not required
		return nil
	}

	if err := validate.FormatOf("transportationOfficeId", "body", "uuid", m.TransportationOfficeID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this locked office user based on the context it is used
func (m *LockedOfficeUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTransportationOffice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LockedOfficeUser) contextValidateTransportationOffice(ctx context.Context, formats strfmt.Registry) error {

	if m.TransportationOffice != nil {

		if swag.IsZero(m.TransportationOffice) { // not required
			return nil
		}

		if err := m.TransportationOffice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transportationOffice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transportationOffice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LockedOfficeUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LockedOfficeUser) UnmarshalBinary(b []byte) error {
	var res LockedOfficeUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
