// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MoveAuditHistory move audit history
//
// swagger:model MoveAuditHistory
type MoveAuditHistory struct {

	// Action type; I = insert, D = delete, U = update, T = truncate
	Action string `json:"action,omitempty"`

	// Wall clock time at which audited event's trigger call occurred
	// Format: date-time
	ActionTstampClk strfmt.DateTime `json:"actionTstampClk,omitempty"`

	// Statement start timestamp for tx in which audited event occurred
	// Format: date-time
	ActionTstampStm strfmt.DateTime `json:"actionTstampStm,omitempty"`

	// Transaction start timestamp for tx in which audited event occurred
	// Format: date-time
	ActionTstampTx strfmt.DateTime `json:"actionTstampTx,omitempty"`

	// A list of (changed/updated) MoveAuditHistoryItem's for a record after the change.
	ChangedValues interface{} `json:"changedValues,omitempty"`

	// context
	Context []map[string]string `json:"context"`

	// id column for the context table the record belongs to
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	ContextID *string `json:"contextId,omitempty"`

	// API endpoint name that was called to make the change
	EventName *string `json:"eventName,omitempty"`

	// id from audity_history table
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// id column for the tableName where the data was changed
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ObjectID *strfmt.UUID `json:"objectId,omitempty"`

	// A list of (old/previous) MoveAuditHistoryItem's for a record before the change.
	OldValues interface{} `json:"oldValues,omitempty"`

	// relation OID. Table OID (object identifier). Changes with drop/create.
	RelID int64 `json:"relId,omitempty"`

	// Database schema audited table for this event is in
	SchemaName string `json:"schemaName,omitempty"`

	// session user email
	// Example: foobar@example.com
	SessionUserEmail *string `json:"sessionUserEmail,omitempty"`

	// session user first name
	// Example: foo
	SessionUserFirstName *string `json:"sessionUserFirstName,omitempty"`

	// session user Id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	SessionUserID *strfmt.UUID `json:"sessionUserId,omitempty"`

	// session user last name
	// Example: bar
	SessionUserLastName *string `json:"sessionUserLastName,omitempty"`

	// session user telephone
	// Pattern: ^[2-9]\d{2}-\d{3}-\d{4}$
	SessionUserTelephone *string `json:"sessionUserTelephone,omitempty"`

	// true if audit event is from an FOR EACH STATEMENT trigger, false for FOR EACH ROW'
	// Example: false
	StatementOnly bool `json:"statementOnly,omitempty"`

	// name of database table that was changed
	TableName string `json:"tableName,omitempty"`

	// Identifier of transaction that made the change. May wrap, but unique paired with action_tstamp_tx.
	TransactionID *int64 `json:"transactionId,omitempty"`
}

// Validate validates this move audit history
func (m *MoveAuditHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionTstampClk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTstampStm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTstampTx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionUserTelephone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoveAuditHistory) validateActionTstampClk(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionTstampClk) { // not required
		return nil
	}

	if err := validate.FormatOf("actionTstampClk", "body", "date-time", m.ActionTstampClk.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MoveAuditHistory) validateActionTstampStm(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionTstampStm) { // not required
		return nil
	}

	if err := validate.FormatOf("actionTstampStm", "body", "date-time", m.ActionTstampStm.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MoveAuditHistory) validateActionTstampTx(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionTstampTx) { // not required
		return nil
	}

	if err := validate.FormatOf("actionTstampTx", "body", "date-time", m.ActionTstampTx.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MoveAuditHistory) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MoveAuditHistory) validateObjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("objectId", "body", "uuid", m.ObjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MoveAuditHistory) validateSessionUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.SessionUserID) { // not required
		return nil
	}

	if err := validate.FormatOf("sessionUserId", "body", "uuid", m.SessionUserID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MoveAuditHistory) validateSessionUserTelephone(formats strfmt.Registry) error {
	if swag.IsZero(m.SessionUserTelephone) { // not required
		return nil
	}

	if err := validate.Pattern("sessionUserTelephone", "body", *m.SessionUserTelephone, `^[2-9]\d{2}-\d{3}-\d{4}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this move audit history based on context it is used
func (m *MoveAuditHistory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MoveAuditHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MoveAuditHistory) UnmarshalBinary(b []byte) error {
	var res MoveAuditHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
