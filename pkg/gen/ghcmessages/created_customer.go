// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreatedCustomer created customer
//
// swagger:model CreatedCustomer
type CreatedCustomer struct {

	// Branch of service customer is affilated with
	Affiliation string `json:"affiliation,omitempty"`

	// backup address
	BackupAddress *Address `json:"backupAddress,omitempty"`

	// backup contact
	BackupContact *BackupContact `json:"backupContact,omitempty"`

	// cac validated
	CacValidated bool `json:"cacValidated,omitempty"`

	// edipi
	Edipi *string `json:"edipi,omitempty"`

	// email is preferred
	EmailIsPreferred bool `json:"emailIsPreferred,omitempty"`

	// first name
	// Example: John
	FirstName string `json:"firstName,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// last name
	// Example: Doe
	LastName string `json:"lastName,omitempty"`

	// middle name
	// Example: David
	MiddleName *string `json:"middleName,omitempty"`

	// okta email
	OktaEmail string `json:"oktaEmail,omitempty"`

	// okta ID
	OktaID string `json:"oktaID,omitempty"`

	// personal email
	// Pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
	PersonalEmail string `json:"personalEmail,omitempty"`

	// phone is preferred
	PhoneIsPreferred bool `json:"phoneIsPreferred,omitempty"`

	// residential address
	ResidentialAddress *Address `json:"residentialAddress,omitempty"`

	// secondary telephone
	// Pattern: ^[2-9]\d{2}-\d{3}-\d{4}$
	SecondaryTelephone *string `json:"secondaryTelephone,omitempty"`

	// suffix
	// Example: Jr.
	Suffix *string `json:"suffix,omitempty"`

	// telephone
	// Pattern: ^[2-9]\d{2}-\d{3}-\d{4}$
	Telephone *string `json:"telephone,omitempty"`

	// user ID
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	UserID strfmt.UUID `json:"userID,omitempty"`
}

// Validate validates this created customer
func (m *CreatedCustomer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonalEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResidentialAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryTelephone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelephone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatedCustomer) validateBackupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupAddress) { // not required
		return nil
	}

	if m.BackupAddress != nil {
		if err := m.BackupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatedCustomer) validateBackupContact(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupContact) { // not required
		return nil
	}

	if m.BackupContact != nil {
		if err := m.BackupContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupContact")
			}
			return err
		}
	}

	return nil
}

func (m *CreatedCustomer) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreatedCustomer) validatePersonalEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.PersonalEmail) { // not required
		return nil
	}

	if err := validate.Pattern("personalEmail", "body", m.PersonalEmail, `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreatedCustomer) validateResidentialAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.ResidentialAddress) { // not required
		return nil
	}

	if m.ResidentialAddress != nil {
		if err := m.ResidentialAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("residentialAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("residentialAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatedCustomer) validateSecondaryTelephone(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryTelephone) { // not required
		return nil
	}

	if err := validate.Pattern("secondaryTelephone", "body", *m.SecondaryTelephone, `^[2-9]\d{2}-\d{3}-\d{4}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreatedCustomer) validateTelephone(formats strfmt.Registry) error {
	if swag.IsZero(m.Telephone) { // not required
		return nil
	}

	if err := validate.Pattern("telephone", "body", *m.Telephone, `^[2-9]\d{2}-\d{3}-\d{4}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreatedCustomer) validateUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := validate.FormatOf("userID", "body", "uuid", m.UserID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this created customer based on the context it is used
func (m *CreatedCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResidentialAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatedCustomer) contextValidateBackupAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupAddress != nil {

		if swag.IsZero(m.BackupAddress) { // not required
			return nil
		}

		if err := m.BackupAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatedCustomer) contextValidateBackupContact(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupContact != nil {

		if swag.IsZero(m.BackupContact) { // not required
			return nil
		}

		if err := m.BackupContact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupContact")
			}
			return err
		}
	}

	return nil
}

func (m *CreatedCustomer) contextValidateResidentialAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ResidentialAddress != nil {

		if swag.IsZero(m.ResidentialAddress) { // not required
			return nil
		}

		if err := m.ResidentialAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("residentialAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("residentialAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreatedCustomer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreatedCustomer) UnmarshalBinary(b []byte) error {
	var res CreatedCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
