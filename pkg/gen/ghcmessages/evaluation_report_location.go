// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EvaluationReportLocation evaluation report location
//
// swagger:model EvaluationReportLocation
type EvaluationReportLocation string

func NewEvaluationReportLocation(value EvaluationReportLocation) *EvaluationReportLocation {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EvaluationReportLocation.
func (m EvaluationReportLocation) Pointer() *EvaluationReportLocation {
	return &m
}

const (

	// EvaluationReportLocationORIGIN captures enum value "ORIGIN"
	EvaluationReportLocationORIGIN EvaluationReportLocation = "ORIGIN"

	// EvaluationReportLocationDESTINATION captures enum value "DESTINATION"
	EvaluationReportLocationDESTINATION EvaluationReportLocation = "DESTINATION"

	// EvaluationReportLocationOTHER captures enum value "OTHER"
	EvaluationReportLocationOTHER EvaluationReportLocation = "OTHER"
)

// for schema
var evaluationReportLocationEnum []interface{}

func init() {
	var res []EvaluationReportLocation
	if err := json.Unmarshal([]byte(`["ORIGIN","DESTINATION","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		evaluationReportLocationEnum = append(evaluationReportLocationEnum, v)
	}
}

func (m EvaluationReportLocation) validateEvaluationReportLocationEnum(path, location string, value EvaluationReportLocation) error {
	if err := validate.EnumCase(path, location, value, evaluationReportLocationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this evaluation report location
func (m EvaluationReportLocation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEvaluationReportLocationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this evaluation report location based on context it is used
func (m EvaluationReportLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
