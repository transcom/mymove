// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LOAType The Line of accounting (TAC/SAC) type that will be used for the shipment
// Example: HHG
//
// swagger:model LOAType
type LOAType string

func NewLOAType(value LOAType) *LOAType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LOAType.
func (m LOAType) Pointer() *LOAType {
	return &m
}

const (

	// LOATypeHHG captures enum value "HHG"
	LOATypeHHG LOAType = "HHG"

	// LOATypeNTS captures enum value "NTS"
	LOATypeNTS LOAType = "NTS"
)

// for schema
var lOATypeEnum []interface{}

func init() {
	var res []LOAType
	if err := json.Unmarshal([]byte(`["HHG","NTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lOATypeEnum = append(lOATypeEnum, v)
	}
}

func (m LOAType) validateLOATypeEnum(path, location string, value LOAType) error {
	if err := validate.EnumCase(path, location, value, lOATypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this l o a type
func (m LOAType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLOATypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this l o a type based on context it is used
func (m LOAType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
