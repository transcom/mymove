// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PaymentServiceItemStatus Payment Service Item Status
//
// swagger:model PaymentServiceItemStatus
type PaymentServiceItemStatus string

const (

	// PaymentServiceItemStatusREQUESTED captures enum value "REQUESTED"
	PaymentServiceItemStatusREQUESTED PaymentServiceItemStatus = "REQUESTED"

	// PaymentServiceItemStatusAPPROVED captures enum value "APPROVED"
	PaymentServiceItemStatusAPPROVED PaymentServiceItemStatus = "APPROVED"

	// PaymentServiceItemStatusDENIED captures enum value "DENIED"
	PaymentServiceItemStatusDENIED PaymentServiceItemStatus = "DENIED"

	// PaymentServiceItemStatusSENTTOGEX captures enum value "SENT_TO_GEX"
	PaymentServiceItemStatusSENTTOGEX PaymentServiceItemStatus = "SENT_TO_GEX"

	// PaymentServiceItemStatusPAID captures enum value "PAID"
	PaymentServiceItemStatusPAID PaymentServiceItemStatus = "PAID"

	// PaymentServiceItemStatusEDIERROR captures enum value "EDI_ERROR"
	PaymentServiceItemStatusEDIERROR PaymentServiceItemStatus = "EDI_ERROR"
)

// for schema
var paymentServiceItemStatusEnum []interface{}

func init() {
	var res []PaymentServiceItemStatus
	if err := json.Unmarshal([]byte(`["REQUESTED","APPROVED","DENIED","SENT_TO_GEX","PAID","EDI_ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentServiceItemStatusEnum = append(paymentServiceItemStatusEnum, v)
	}
}

func (m PaymentServiceItemStatus) validatePaymentServiceItemStatusEnum(path, location string, value PaymentServiceItemStatus) error {
	if err := validate.EnumCase(path, location, value, paymentServiceItemStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment service item status
func (m PaymentServiceItemStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentServiceItemStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
