// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EvaluationReport An evaluation report
//
// swagger:model EvaluationReport
type EvaluationReport struct {

	// report violations
	ReportViolations ReportViolations `json:"ReportViolations,omitempty"`

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// e tag
	ETag string `json:"eTag,omitempty"`

	// evaluation length minutes
	// Minimum: 0
	EvaluationLengthMinutes *int64 `json:"evaluationLengthMinutes,omitempty"`

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// inspection date
	// Format: date
	InspectionDate *strfmt.Date `json:"inspectionDate,omitempty"`

	// inspection type
	InspectionType *EvaluationReportInspectionType `json:"inspectionType,omitempty"`

	// location
	Location *EvaluationReportLocation `json:"location,omitempty"`

	// location description
	// Example: Route 66 at crash inspection site 3
	LocationDescription *string `json:"locationDescription,omitempty"`

	// move ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Read Only: true
	// Format: uuid
	MoveID strfmt.UUID `json:"moveID,omitempty"`

	// move reference ID
	// Read Only: true
	MoveReferenceID *string `json:"moveReferenceID,omitempty"`

	// observed date
	// Format: date
	ObservedDate *strfmt.Date `json:"observedDate,omitempty"`

	// office user
	OfficeUser *EvaluationReportOfficeUser `json:"officeUser,omitempty"`

	// remarks
	Remarks *string `json:"remarks,omitempty"`

	// shipment ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Read Only: true
	// Format: uuid
	ShipmentID *strfmt.UUID `json:"shipmentID,omitempty"`

	// submitted at
	// Format: date-time
	SubmittedAt *strfmt.DateTime `json:"submittedAt,omitempty"`

	// travel time minutes
	// Minimum: 0
	TravelTimeMinutes *int64 `json:"travelTimeMinutes,omitempty"`

	// type
	Type EvaluationReportType `json:"type,omitempty"`

	// updated at
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// violations observed
	ViolationsObserved *bool `json:"violationsObserved,omitempty"`
}

// Validate validates this evaluation report
func (m *EvaluationReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReportViolations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluationLengthMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInspectionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInspectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObservedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfficeUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTravelTimeMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationReport) validateReportViolations(formats strfmt.Registry) error {
	if swag.IsZero(m.ReportViolations) { // not required
		return nil
	}

	if err := m.ReportViolations.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ReportViolations")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ReportViolations")
		}
		return err
	}

	return nil
}

func (m *EvaluationReport) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateEvaluationLengthMinutes(formats strfmt.Registry) error {
	if swag.IsZero(m.EvaluationLengthMinutes) { // not required
		return nil
	}

	if err := validate.MinimumInt("evaluationLengthMinutes", "body", *m.EvaluationLengthMinutes, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateInspectionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InspectionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("inspectionDate", "body", "date", m.InspectionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateInspectionType(formats strfmt.Registry) error {
	if swag.IsZero(m.InspectionType) { // not required
		return nil
	}

	if m.InspectionType != nil {
		if err := m.InspectionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inspectionType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inspectionType")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationReport) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationReport) validateMoveID(formats strfmt.Registry) error {
	if swag.IsZero(m.MoveID) { // not required
		return nil
	}

	if err := validate.FormatOf("moveID", "body", "uuid", m.MoveID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateObservedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ObservedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("observedDate", "body", "date", m.ObservedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateOfficeUser(formats strfmt.Registry) error {
	if swag.IsZero(m.OfficeUser) { // not required
		return nil
	}

	if m.OfficeUser != nil {
		if err := m.OfficeUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("officeUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("officeUser")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationReport) validateShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("shipmentID", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateSubmittedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmittedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submittedAt", "body", "date-time", m.SubmittedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateTravelTimeMinutes(formats strfmt.Registry) error {
	if swag.IsZero(m.TravelTimeMinutes) { // not required
		return nil
	}

	if err := validate.MinimumInt("travelTimeMinutes", "body", *m.TravelTimeMinutes, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *EvaluationReport) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this evaluation report based on the context it is used
func (m *EvaluationReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReportViolations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInspectionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMoveID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMoveReferenceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfficeUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationReport) contextValidateReportViolations(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ReportViolations.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ReportViolations")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ReportViolations")
		}
		return err
	}

	return nil
}

func (m *EvaluationReport) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) contextValidateInspectionType(ctx context.Context, formats strfmt.Registry) error {

	if m.InspectionType != nil {
		if err := m.InspectionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inspectionType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inspectionType")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationReport) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {
		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationReport) contextValidateMoveID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "moveID", "body", strfmt.UUID(m.MoveID)); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) contextValidateMoveReferenceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "moveReferenceID", "body", m.MoveReferenceID); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) contextValidateOfficeUser(ctx context.Context, formats strfmt.Registry) error {

	if m.OfficeUser != nil {
		if err := m.OfficeUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("officeUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("officeUser")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationReport) contextValidateShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "shipmentID", "body", m.ShipmentID); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationReport) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *EvaluationReport) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvaluationReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluationReport) UnmarshalBinary(b []byte) error {
	var res EvaluationReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
