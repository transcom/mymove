// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PaymentRequestStatus Payment Request Status
// swagger:model paymentRequestStatus
type PaymentRequestStatus string

const (

	// PaymentRequestStatusPAYMENTSUBMITTED captures enum value "PAYMENT_SUBMITTED"
	PaymentRequestStatusPAYMENTSUBMITTED PaymentRequestStatus = "PAYMENT_SUBMITTED"

	// PaymentRequestStatusAPPROVED captures enum value "APPROVED"
	PaymentRequestStatusAPPROVED PaymentRequestStatus = "APPROVED"

	// PaymentRequestStatusREJECTED captures enum value "REJECTED"
	PaymentRequestStatusREJECTED PaymentRequestStatus = "REJECTED"
)

// for schema
var paymentRequestStatusEnum []interface{}

func init() {
	var res []PaymentRequestStatus
	if err := json.Unmarshal([]byte(`["PAYMENT_SUBMITTED","APPROVED","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentRequestStatusEnum = append(paymentRequestStatusEnum, v)
	}
}

func (m PaymentRequestStatus) validatePaymentRequestStatusEnum(path, location string, value PaymentRequestStatus) error {
	if err := validate.Enum(path, location, value, paymentRequestStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment request status
func (m PaymentRequestStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentRequestStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
