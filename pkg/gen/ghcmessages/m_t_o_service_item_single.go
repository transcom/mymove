// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MTOServiceItemSingle m t o service item single
//
// swagger:model MTOServiceItemSingle
type MTOServiceItemSingle struct {

	// approved at
	// Format: date-time
	ApprovedAt *strfmt.DateTime `json:"approvedAt,omitempty"`

	// convert to customer expense
	// Example: false
	ConvertToCustomerExpense bool `json:"convertToCustomerExpense"`

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// customer expense reason
	CustomerExpenseReason *string `json:"customerExpenseReason,omitempty"`

	// deleted at
	// Format: date
	DeletedAt strfmt.Date `json:"deletedAt,omitempty"`

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// move task order ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	MoveTaskOrderID strfmt.UUID `json:"moveTaskOrderID,omitempty"`

	// mto shipment ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	MtoShipmentID *strfmt.UUID `json:"mtoShipmentID,omitempty"`

	// pickup postal code
	PickupPostalCode *string `json:"pickupPostalCode,omitempty"`

	// re service code
	ReServiceCode string `json:"reServiceCode,omitempty"`

	// re service ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ReServiceID strfmt.UUID `json:"reServiceID,omitempty"`

	// re service name
	ReServiceName string `json:"reServiceName,omitempty"`

	// rejected at
	// Format: date-time
	RejectedAt *strfmt.DateTime `json:"rejectedAt,omitempty"`

	// rejection reason
	RejectionReason *string `json:"rejectionReason,omitempty"`

	// sit customer contacted
	// Format: date
	SitCustomerContacted *strfmt.Date `json:"sitCustomerContacted,omitempty"`

	// sit departure date
	// Format: date-time
	SitDepartureDate *strfmt.DateTime `json:"sitDepartureDate,omitempty"`

	// sit entry date
	// Format: date-time
	SitEntryDate *strfmt.DateTime `json:"sitEntryDate,omitempty"`

	// sit postal code
	// Read Only: true
	SitPostalCode *string `json:"sitPostalCode,omitempty"`

	// sit requested delivery
	// Format: date
	SitRequestedDelivery *strfmt.Date `json:"sitRequestedDelivery,omitempty"`

	// status
	Status *string `json:"status,omitempty"`

	// updated at
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this m t o service item single
func (m *MTOServiceItemSingle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveTaskOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitCustomerContacted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEntryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitRequestedDelivery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOServiceItemSingle) validateApprovedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("approvedAt", "body", "date-time", m.ApprovedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) validateDeletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("deletedAt", "body", "date", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) validateMoveTaskOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.MoveTaskOrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("moveTaskOrderID", "body", "uuid", m.MoveTaskOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) validateMtoShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoShipmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("mtoShipmentID", "body", "uuid", m.MtoShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) validateReServiceID(formats strfmt.Registry) error {
	if swag.IsZero(m.ReServiceID) { // not required
		return nil
	}

	if err := validate.FormatOf("reServiceID", "body", "uuid", m.ReServiceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) validateRejectedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.RejectedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("rejectedAt", "body", "date-time", m.RejectedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) validateSitCustomerContacted(formats strfmt.Registry) error {
	if swag.IsZero(m.SitCustomerContacted) { // not required
		return nil
	}

	if err := validate.FormatOf("sitCustomerContacted", "body", "date", m.SitCustomerContacted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) validateSitDepartureDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitDepartureDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitDepartureDate", "body", "date-time", m.SitDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) validateSitEntryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitEntryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitEntryDate", "body", "date-time", m.SitEntryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) validateSitRequestedDelivery(formats strfmt.Registry) error {
	if swag.IsZero(m.SitRequestedDelivery) { // not required
		return nil
	}

	if err := validate.FormatOf("sitRequestedDelivery", "body", "date", m.SitRequestedDelivery.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this m t o service item single based on the context it is used
func (m *MTOServiceItemSingle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitPostalCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOServiceItemSingle) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) contextValidateSitPostalCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sitPostalCode", "body", m.SitPostalCode); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemSingle) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MTOServiceItemSingle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MTOServiceItemSingle) UnmarshalBinary(b []byte) error {
	var res MTOServiceItemSingle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
