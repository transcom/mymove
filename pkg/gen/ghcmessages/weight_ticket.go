// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WeightTicket Vehicle and optional trailer information and weight documents used to move this PPM shipment.
//
// swagger:model WeightTicket
type WeightTicket struct {

	// created at
	// Required: true
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt"`

	// e tag
	// Read Only: true
	ETag string `json:"eTag,omitempty"`

	// Empty Document
	// Required: true
	EmptyDocument *DefinitionsDocumentPayload `json:"emptyDocument"`

	// Empty Document ID
	// Required: true
	// Read Only: true
	// Format: uuid
	EmptyDocumentID strfmt.UUID `json:"emptyDocumentId"`

	// Empty Recorded Weight
	// Minimum: 0
	EmptyWeight *int64 `json:"emptyWeight,omitempty"`

	// Full Document
	// Required: true
	FullDocument *DefinitionsDocumentPayload `json:"fullDocument"`

	// Full Document ID
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Read Only: true
	// Format: uuid
	FullDocumentID strfmt.UUID `json:"fullDocumentId"`

	// full weight ticket recorded weight
	// Minimum: 0
	FullWeight *int64 `json:"fullWeight,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// has empty weight ticket
	MissingEmptyWeightTicket *bool `json:"missingEmptyWeightTicket"`

	// has full weight ticket
	MissingFullWeightTicket *bool `json:"missingFullWeightTicket"`

	// Owns trailer
	OwnsTrailer *bool `json:"ownsTrailer"`

	// ppm shipment Id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Read Only: true
	// Format: uuid
	PpmShipmentID strfmt.UUID `json:"ppmShipmentId"`

	// Proof of Trailer Ownership Document
	// Required: true
	ProofOfTrailerOwnershipDocument *DefinitionsDocumentPayload `json:"proofOfTrailerOwnershipDocument"`

	// Trailer Document ID
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Read Only: true
	// Format: uuid
	ProofOfTrailerOwnershipDocumentID strfmt.UUID `json:"proofOfTrailerOwnershipDocumentId"`

	// reason
	Reason *PPMDocumentStatusReason `json:"reason"`

	// status
	Status *PPMDocumentStatus `json:"status"`

	// Trailer meets criteria
	TrailerMeetsCriteria *bool `json:"trailerMeetsCriteria"`

	// updated at
	// Required: true
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt"`

	// Vehicle description (ex. 'SUV')
	VehicleDescription *string `json:"vehicleDescription,omitempty"`
}

// Validate validates this weight ticket
func (m *WeightTicket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpmShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProofOfTrailerOwnershipDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProofOfTrailerOwnershipDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WeightTicket) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) validateEmptyDocument(formats strfmt.Registry) error {

	if err := validate.Required("emptyDocument", "body", m.EmptyDocument); err != nil {
		return err
	}

	if m.EmptyDocument != nil {
		if err := m.EmptyDocument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emptyDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emptyDocument")
			}
			return err
		}
	}

	return nil
}

func (m *WeightTicket) validateEmptyDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("emptyDocumentId", "body", strfmt.UUID(m.EmptyDocumentID)); err != nil {
		return err
	}

	if err := validate.FormatOf("emptyDocumentId", "body", "uuid", m.EmptyDocumentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) validateEmptyWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.EmptyWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("emptyWeight", "body", *m.EmptyWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) validateFullDocument(formats strfmt.Registry) error {

	if err := validate.Required("fullDocument", "body", m.FullDocument); err != nil {
		return err
	}

	if m.FullDocument != nil {
		if err := m.FullDocument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullDocument")
			}
			return err
		}
	}

	return nil
}

func (m *WeightTicket) validateFullDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("fullDocumentId", "body", strfmt.UUID(m.FullDocumentID)); err != nil {
		return err
	}

	if err := validate.FormatOf("fullDocumentId", "body", "uuid", m.FullDocumentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) validateFullWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.FullWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("fullWeight", "body", *m.FullWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) validatePpmShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("ppmShipmentId", "body", strfmt.UUID(m.PpmShipmentID)); err != nil {
		return err
	}

	if err := validate.FormatOf("ppmShipmentId", "body", "uuid", m.PpmShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) validateProofOfTrailerOwnershipDocument(formats strfmt.Registry) error {

	if err := validate.Required("proofOfTrailerOwnershipDocument", "body", m.ProofOfTrailerOwnershipDocument); err != nil {
		return err
	}

	if m.ProofOfTrailerOwnershipDocument != nil {
		if err := m.ProofOfTrailerOwnershipDocument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proofOfTrailerOwnershipDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proofOfTrailerOwnershipDocument")
			}
			return err
		}
	}

	return nil
}

func (m *WeightTicket) validateProofOfTrailerOwnershipDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("proofOfTrailerOwnershipDocumentId", "body", strfmt.UUID(m.ProofOfTrailerOwnershipDocumentID)); err != nil {
		return err
	}

	if err := validate.FormatOf("proofOfTrailerOwnershipDocumentId", "body", "uuid", m.ProofOfTrailerOwnershipDocumentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *WeightTicket) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *WeightTicket) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this weight ticket based on the context it is used
func (m *WeightTicket) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmptyDocument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmptyDocumentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullDocument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullDocumentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePpmShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProofOfTrailerOwnershipDocument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProofOfTrailerOwnershipDocumentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WeightTicket) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag)); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) contextValidateEmptyDocument(ctx context.Context, formats strfmt.Registry) error {

	if m.EmptyDocument != nil {
		if err := m.EmptyDocument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emptyDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emptyDocument")
			}
			return err
		}
	}

	return nil
}

func (m *WeightTicket) contextValidateEmptyDocumentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "emptyDocumentId", "body", strfmt.UUID(m.EmptyDocumentID)); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) contextValidateFullDocument(ctx context.Context, formats strfmt.Registry) error {

	if m.FullDocument != nil {
		if err := m.FullDocument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullDocument")
			}
			return err
		}
	}

	return nil
}

func (m *WeightTicket) contextValidateFullDocumentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "fullDocumentId", "body", strfmt.UUID(m.FullDocumentID)); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) contextValidatePpmShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ppmShipmentId", "body", strfmt.UUID(m.PpmShipmentID)); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) contextValidateProofOfTrailerOwnershipDocument(ctx context.Context, formats strfmt.Registry) error {

	if m.ProofOfTrailerOwnershipDocument != nil {
		if err := m.ProofOfTrailerOwnershipDocument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proofOfTrailerOwnershipDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proofOfTrailerOwnershipDocument")
			}
			return err
		}
	}

	return nil
}

func (m *WeightTicket) contextValidateProofOfTrailerOwnershipDocumentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "proofOfTrailerOwnershipDocumentId", "body", strfmt.UUID(m.ProofOfTrailerOwnershipDocumentID)); err != nil {
		return err
	}

	return nil
}

func (m *WeightTicket) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if m.Reason != nil {
		if err := m.Reason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *WeightTicket) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *WeightTicket) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WeightTicket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WeightTicket) UnmarshalBinary(b []byte) error {
	var res WeightTicket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
