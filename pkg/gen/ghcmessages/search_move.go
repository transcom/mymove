// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchMove search move
//
// swagger:model SearchMove
type SearchMove struct {

	// branch
	Branch string `json:"branch,omitempty"`

	// ZIP
	// Example: 90210
	// Pattern: ^(\d{5})$
	DestinationDutyLocationPostalCode string `json:"destinationDutyLocationPostalCode,omitempty"`

	// destination g b l o c
	DestinationGBLOC GBLOC `json:"destinationGBLOC,omitempty"`

	// dod ID
	// Example: 1234567890
	DodID *string `json:"dodID,omitempty"`

	// first name
	// Example: John
	FirstName *string `json:"firstName,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// last name
	// Example: Doe
	LastName *string `json:"lastName,omitempty"`

	// locator
	Locator string `json:"locator,omitempty"`

	// order type
	OrderType string `json:"orderType,omitempty"`

	// ZIP
	// Example: 90210
	// Pattern: ^(\d{5})$
	OriginDutyLocationPostalCode string `json:"originDutyLocationPostalCode,omitempty"`

	// origin g b l o c
	OriginGBLOC GBLOC `json:"originGBLOC,omitempty"`

	// requested delivery date
	// Format: date
	RequestedDeliveryDate *strfmt.Date `json:"requestedDeliveryDate,omitempty"`

	// requested pickup date
	// Format: date
	RequestedPickupDate *strfmt.Date `json:"requestedPickupDate,omitempty"`

	// shipments count
	ShipmentsCount int64 `json:"shipmentsCount,omitempty"`

	// status
	Status MoveStatus `json:"status,omitempty"`
}

// Validate validates this search move
func (m *SearchMove) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationDutyLocationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationGBLOC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginDutyLocationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginGBLOC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchMove) validateDestinationDutyLocationPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationDutyLocationPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("destinationDutyLocationPostalCode", "body", m.DestinationDutyLocationPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *SearchMove) validateDestinationGBLOC(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationGBLOC) { // not required
		return nil
	}

	if err := m.DestinationGBLOC.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("destinationGBLOC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("destinationGBLOC")
		}
		return err
	}

	return nil
}

func (m *SearchMove) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SearchMove) validateOriginDutyLocationPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginDutyLocationPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("originDutyLocationPostalCode", "body", m.OriginDutyLocationPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *SearchMove) validateOriginGBLOC(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginGBLOC) { // not required
		return nil
	}

	if err := m.OriginGBLOC.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("originGBLOC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("originGBLOC")
		}
		return err
	}

	return nil
}

func (m *SearchMove) validateRequestedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedDeliveryDate", "body", "date", m.RequestedDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SearchMove) validateRequestedPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedPickupDate", "body", "date", m.RequestedPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SearchMove) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this search move based on the context it is used
func (m *SearchMove) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestinationGBLOC(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginGBLOC(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchMove) contextValidateDestinationGBLOC(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationGBLOC) { // not required
		return nil
	}

	if err := m.DestinationGBLOC.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("destinationGBLOC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("destinationGBLOC")
		}
		return err
	}

	return nil
}

func (m *SearchMove) contextValidateOriginGBLOC(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.OriginGBLOC) { // not required
		return nil
	}

	if err := m.OriginGBLOC.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("originGBLOC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("originGBLOC")
		}
		return err
	}

	return nil
}

func (m *SearchMove) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchMove) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchMove) UnmarshalBinary(b []byte) error {
	var res SearchMove
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
