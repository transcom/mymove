// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MTOServiceItem m t o service item
//
// swagger:model MTOServiceItem
type MTOServiceItem struct {

	// s i t postal code
	// Read Only: true
	SITPostalCode *string `json:"SITPostalCode,omitempty"`

	// approved at
	// Format: date-time
	ApprovedAt *strfmt.DateTime `json:"approvedAt,omitempty"`

	// convert to customer expense
	// Example: false
	ConvertToCustomerExpense bool `json:"convertToCustomerExpense"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// customer contacts
	CustomerContacts MTOServiceItemCustomerContacts `json:"customerContacts,omitempty"`

	// customer expense reason
	CustomerExpenseReason *string `json:"customerExpenseReason,omitempty"`

	// deleted at
	// Format: date
	DeletedAt strfmt.Date `json:"deletedAt,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// dimensions
	Dimensions MTOServiceItemDimensions `json:"dimensions,omitempty"`

	// e tag
	ETag string `json:"eTag,omitempty"`

	// estimated weight of the shuttle service item provided by the prime
	// Example: 2500
	EstimatedWeight *int64 `json:"estimatedWeight,omitempty"`

	// fee type
	// Enum: [COUNSELING CRATING TRUCKING SHUTTLE]
	FeeType string `json:"feeType,omitempty"`

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// move task order ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	MoveTaskOrderID *strfmt.UUID `json:"moveTaskOrderID"`

	// mto shipment ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	MtoShipmentID *strfmt.UUID `json:"mtoShipmentID,omitempty"`

	// pickup postal code
	PickupPostalCode *string `json:"pickupPostalCode,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`

	// rate
	Rate int64 `json:"rate,omitempty"`

	// re service code
	// Required: true
	ReServiceCode *string `json:"reServiceCode"`

	// re service ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	ReServiceID *strfmt.UUID `json:"reServiceID"`

	// re service name
	// Required: true
	ReServiceName *string `json:"reServiceName"`

	// reason
	Reason *string `json:"reason,omitempty"`

	// rejected at
	// Format: date-time
	RejectedAt *strfmt.DateTime `json:"rejectedAt,omitempty"`

	// rejection reason
	RejectionReason *string `json:"rejectionReason,omitempty"`

	// service request documents
	ServiceRequestDocuments ServiceRequestDocuments `json:"serviceRequestDocuments,omitempty"`

	// sit address updates
	SitAddressUpdates SITAddressUpdates `json:"sitAddressUpdates,omitempty"`

	// sit customer contacted
	// Format: date
	SitCustomerContacted *strfmt.Date `json:"sitCustomerContacted,omitempty"`

	// sit delivery miles
	SitDeliveryMiles *int64 `json:"sitDeliveryMiles,omitempty"`

	// sit departure date
	// Format: date-time
	SitDepartureDate *strfmt.DateTime `json:"sitDepartureDate,omitempty"`

	// sit destination final address
	SitDestinationFinalAddress *Address `json:"sitDestinationFinalAddress,omitempty"`

	// sit destination original address
	SitDestinationOriginalAddress *Address `json:"sitDestinationOriginalAddress,omitempty"`

	// sit entry date
	// Format: date-time
	SitEntryDate *strfmt.DateTime `json:"sitEntryDate,omitempty"`

	// sit origin h h g actual address
	SitOriginHHGActualAddress *Address `json:"sitOriginHHGActualAddress,omitempty"`

	// sit origin h h g original address
	SitOriginHHGOriginalAddress *Address `json:"sitOriginHHGOriginalAddress,omitempty"`

	// sit requested delivery
	// Format: date
	SitRequestedDelivery *strfmt.Date `json:"sitRequestedDelivery,omitempty"`

	// status
	Status MTOServiceItemStatus `json:"status,omitempty"`

	// submitted at
	// Format: date
	SubmittedAt strfmt.Date `json:"submittedAt,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`

	// Reason for updating service item.
	UpdateReason *string `json:"updateReason,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this m t o service item
func (m *MTOServiceItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerContacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveTaskOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReServiceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceRequestDocuments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitAddressUpdates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitCustomerContacted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitDestinationFinalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitDestinationOriginalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEntryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitOriginHHGActualAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitOriginHHGOriginalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitRequestedDelivery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOServiceItem) validateApprovedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("approvedAt", "body", "date-time", m.ApprovedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateCustomerContacts(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerContacts) { // not required
		return nil
	}

	if err := m.CustomerContacts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("customerContacts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("customerContacts")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateDeletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("deletedAt", "body", "date", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.Dimensions) { // not required
		return nil
	}

	if err := m.Dimensions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dimensions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dimensions")
		}
		return err
	}

	return nil
}

var mTOServiceItemTypeFeeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COUNSELING","CRATING","TRUCKING","SHUTTLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mTOServiceItemTypeFeeTypePropEnum = append(mTOServiceItemTypeFeeTypePropEnum, v)
	}
}

const (

	// MTOServiceItemFeeTypeCOUNSELING captures enum value "COUNSELING"
	MTOServiceItemFeeTypeCOUNSELING string = "COUNSELING"

	// MTOServiceItemFeeTypeCRATING captures enum value "CRATING"
	MTOServiceItemFeeTypeCRATING string = "CRATING"

	// MTOServiceItemFeeTypeTRUCKING captures enum value "TRUCKING"
	MTOServiceItemFeeTypeTRUCKING string = "TRUCKING"

	// MTOServiceItemFeeTypeSHUTTLE captures enum value "SHUTTLE"
	MTOServiceItemFeeTypeSHUTTLE string = "SHUTTLE"
)

// prop value enum
func (m *MTOServiceItem) validateFeeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mTOServiceItemTypeFeeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MTOServiceItem) validateFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFeeTypeEnum("feeType", "body", m.FeeType); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateMoveTaskOrderID(formats strfmt.Registry) error {

	if err := validate.Required("moveTaskOrderID", "body", m.MoveTaskOrderID); err != nil {
		return err
	}

	if err := validate.FormatOf("moveTaskOrderID", "body", "uuid", m.MoveTaskOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateMtoShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoShipmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("mtoShipmentID", "body", "uuid", m.MtoShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateReServiceCode(formats strfmt.Registry) error {

	if err := validate.Required("reServiceCode", "body", m.ReServiceCode); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateReServiceID(formats strfmt.Registry) error {

	if err := validate.Required("reServiceID", "body", m.ReServiceID); err != nil {
		return err
	}

	if err := validate.FormatOf("reServiceID", "body", "uuid", m.ReServiceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateReServiceName(formats strfmt.Registry) error {

	if err := validate.Required("reServiceName", "body", m.ReServiceName); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateRejectedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.RejectedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("rejectedAt", "body", "date-time", m.RejectedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateServiceRequestDocuments(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceRequestDocuments) { // not required
		return nil
	}

	if err := m.ServiceRequestDocuments.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceRequestDocuments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceRequestDocuments")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateSitAddressUpdates(formats strfmt.Registry) error {
	if swag.IsZero(m.SitAddressUpdates) { // not required
		return nil
	}

	if err := m.SitAddressUpdates.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sitAddressUpdates")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sitAddressUpdates")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateSitCustomerContacted(formats strfmt.Registry) error {
	if swag.IsZero(m.SitCustomerContacted) { // not required
		return nil
	}

	if err := validate.FormatOf("sitCustomerContacted", "body", "date", m.SitCustomerContacted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateSitDepartureDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitDepartureDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitDepartureDate", "body", "date-time", m.SitDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateSitDestinationFinalAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SitDestinationFinalAddress) { // not required
		return nil
	}

	if m.SitDestinationFinalAddress != nil {
		if err := m.SitDestinationFinalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitDestinationFinalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitDestinationFinalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOServiceItem) validateSitDestinationOriginalAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SitDestinationOriginalAddress) { // not required
		return nil
	}

	if m.SitDestinationOriginalAddress != nil {
		if err := m.SitDestinationOriginalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitDestinationOriginalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitDestinationOriginalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOServiceItem) validateSitEntryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitEntryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitEntryDate", "body", "date-time", m.SitEntryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateSitOriginHHGActualAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SitOriginHHGActualAddress) { // not required
		return nil
	}

	if m.SitOriginHHGActualAddress != nil {
		if err := m.SitOriginHHGActualAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitOriginHHGActualAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitOriginHHGActualAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOServiceItem) validateSitOriginHHGOriginalAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SitOriginHHGOriginalAddress) { // not required
		return nil
	}

	if m.SitOriginHHGOriginalAddress != nil {
		if err := m.SitOriginHHGOriginalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitOriginHHGOriginalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitOriginHHGOriginalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOServiceItem) validateSitRequestedDelivery(formats strfmt.Registry) error {
	if swag.IsZero(m.SitRequestedDelivery) { // not required
		return nil
	}

	if err := validate.FormatOf("sitRequestedDelivery", "body", "date", m.SitRequestedDelivery.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateSubmittedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmittedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submittedAt", "body", "date", m.SubmittedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this m t o service item based on the context it is used
func (m *MTOServiceItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSITPostalCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerContacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceRequestDocuments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitAddressUpdates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitDestinationFinalAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitDestinationOriginalAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitOriginHHGActualAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitOriginHHGOriginalAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOServiceItem) contextValidateSITPostalCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "SITPostalCode", "body", m.SITPostalCode); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItem) contextValidateCustomerContacts(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CustomerContacts.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("customerContacts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("customerContacts")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItem) contextValidateDimensions(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Dimensions.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dimensions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dimensions")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItem) contextValidateServiceRequestDocuments(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ServiceRequestDocuments.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceRequestDocuments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceRequestDocuments")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItem) contextValidateSitAddressUpdates(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SitAddressUpdates.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sitAddressUpdates")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sitAddressUpdates")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItem) contextValidateSitDestinationFinalAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SitDestinationFinalAddress != nil {

		if swag.IsZero(m.SitDestinationFinalAddress) { // not required
			return nil
		}

		if err := m.SitDestinationFinalAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitDestinationFinalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitDestinationFinalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOServiceItem) contextValidateSitDestinationOriginalAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SitDestinationOriginalAddress != nil {

		if swag.IsZero(m.SitDestinationOriginalAddress) { // not required
			return nil
		}

		if err := m.SitDestinationOriginalAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitDestinationOriginalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitDestinationOriginalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOServiceItem) contextValidateSitOriginHHGActualAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SitOriginHHGActualAddress != nil {

		if swag.IsZero(m.SitOriginHHGActualAddress) { // not required
			return nil
		}

		if err := m.SitOriginHHGActualAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitOriginHHGActualAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitOriginHHGActualAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOServiceItem) contextValidateSitOriginHHGOriginalAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SitOriginHHGOriginalAddress != nil {

		if swag.IsZero(m.SitOriginHHGOriginalAddress) { // not required
			return nil
		}

		if err := m.SitOriginHHGOriginalAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitOriginHHGOriginalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitOriginHHGOriginalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOServiceItem) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MTOServiceItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MTOServiceItem) UnmarshalBinary(b []byte) error {
	var res MTOServiceItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
