// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentPaymentSITBalance shipment payment s i t balance
//
// swagger:model ShipmentPaymentSITBalance
type ShipmentPaymentSITBalance struct {

	// pending billed end date
	// Format: date
	PendingBilledEndDate *strfmt.Date `json:"pendingBilledEndDate,omitempty"`

	// pending billed start date
	// Format: date
	PendingBilledStartDate *strfmt.Date `json:"pendingBilledStartDate,omitempty"`

	// pending s i t days invoiced
	PendingSITDaysInvoiced int64 `json:"pendingSITDaysInvoiced,omitempty"`

	// previously billed days
	PreviouslyBilledDays *int64 `json:"previouslyBilledDays,omitempty"`

	// previously billed end date
	// Format: date
	PreviouslyBilledEndDate *strfmt.Date `json:"previouslyBilledEndDate,omitempty"`

	// previously billed start date
	// Format: date
	PreviouslyBilledStartDate *strfmt.Date `json:"previouslyBilledStartDate,omitempty"`

	// shipment ID
	// Format: uuid
	ShipmentID strfmt.UUID `json:"shipmentID,omitempty"`

	// total s i t days authorized
	TotalSITDaysAuthorized int64 `json:"totalSITDaysAuthorized,omitempty"`

	// total s i t days remaining
	TotalSITDaysRemaining int64 `json:"totalSITDaysRemaining,omitempty"`

	// total s i t end date
	// Format: date
	TotalSITEndDate *strfmt.Date `json:"totalSITEndDate,omitempty"`
}

// Validate validates this shipment payment s i t balance
func (m *ShipmentPaymentSITBalance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePendingBilledEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingBilledStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviouslyBilledEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviouslyBilledStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSITEndDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentPaymentSITBalance) validatePendingBilledEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PendingBilledEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("pendingBilledEndDate", "body", "date", m.PendingBilledEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentPaymentSITBalance) validatePendingBilledStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PendingBilledStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("pendingBilledStartDate", "body", "date", m.PendingBilledStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentPaymentSITBalance) validatePreviouslyBilledEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviouslyBilledEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("previouslyBilledEndDate", "body", "date", m.PreviouslyBilledEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentPaymentSITBalance) validatePreviouslyBilledStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviouslyBilledStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("previouslyBilledStartDate", "body", "date", m.PreviouslyBilledStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentPaymentSITBalance) validateShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("shipmentID", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentPaymentSITBalance) validateTotalSITEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalSITEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("totalSITEndDate", "body", "date", m.TotalSITEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this shipment payment s i t balance based on context it is used
func (m *ShipmentPaymentSITBalance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentPaymentSITBalance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentPaymentSITBalance) UnmarshalBinary(b []byte) error {
	var res ShipmentPaymentSITBalance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
