// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatePPMShipment update p p m shipment
//
// swagger:model UpdatePPMShipment
type UpdatePPMShipment struct {

	// actual move date
	// Format: date
	ActualMoveDate *strfmt.Date `json:"actualMoveDate,omitempty"`

	// The amount received for an advance, or null if no advance is received
	//
	AdvanceAmountReceived *int64 `json:"advanceAmountReceived,omitempty"`

	// The amount request for an advance, or null if no advance is requested
	//
	AdvanceAmountRequested *int64 `json:"advanceAmountRequested,omitempty"`

	// advance status
	AdvanceStatus *PPMAdvanceStatus `json:"advanceStatus,omitempty"`

	// destination address
	DestinationAddress struct {
		Address
	} `json:"destinationAddress,omitempty"`

	// estimated weight
	// Example: 4200
	EstimatedWeight *int64 `json:"estimatedWeight,omitempty"`

	// Date the customer expects to move.
	//
	// Format: date
	ExpectedDepartureDate *strfmt.Date `json:"expectedDepartureDate,omitempty"`

	// Indicates whether PPM shipment has pro gear.
	//
	HasProGear *bool `json:"hasProGear,omitempty"`

	// Indicates whether an advance has been requested for the PPM shipment.
	//
	HasRequestedAdvance *bool `json:"hasRequestedAdvance,omitempty"`

	// has secondary destination address
	HasSecondaryDestinationAddress *bool `json:"hasSecondaryDestinationAddress"`

	// has secondary pickup address
	HasSecondaryPickupAddress *bool `json:"hasSecondaryPickupAddress"`

	// pickup address
	PickupAddress struct {
		Address
	} `json:"pickupAddress,omitempty"`

	// pro gear weight
	ProGearWeight *int64 `json:"proGearWeight,omitempty"`

	// secondary destination address
	SecondaryDestinationAddress struct {
		Address
	} `json:"secondaryDestinationAddress,omitempty"`

	// secondary pickup address
	SecondaryPickupAddress struct {
		Address
	} `json:"secondaryPickupAddress,omitempty"`

	// sit estimated departure date
	// Format: date
	SitEstimatedDepartureDate *strfmt.Date `json:"sitEstimatedDepartureDate,omitempty"`

	// sit estimated entry date
	// Format: date
	SitEstimatedEntryDate *strfmt.Date `json:"sitEstimatedEntryDate,omitempty"`

	// sit estimated weight
	// Example: 2000
	SitEstimatedWeight *int64 `json:"sitEstimatedWeight,omitempty"`

	// sit expected
	SitExpected *bool `json:"sitExpected,omitempty"`

	// sit location
	SitLocation *SITLocationType `json:"sitLocation,omitempty"`

	// spouse pro gear weight
	SpouseProGearWeight *int64 `json:"spouseProGearWeight,omitempty"`

	// w2 address
	W2Address *Address `json:"w2Address,omitempty"`
}

// Validate validates this update p p m shipment
func (m *UpdatePPMShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdvanceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEstimatedDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEstimatedEntryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateW2Address(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePPMShipment) validateActualMoveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualMoveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actualMoveDate", "body", "date", m.ActualMoveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateAdvanceStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvanceStatus) { // not required
		return nil
	}

	if m.AdvanceStatus != nil {
		if err := m.AdvanceStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advanceStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("advanceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdatePPMShipment) validateExpectedDepartureDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpectedDepartureDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expectedDepartureDate", "body", "date", m.ExpectedDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validatePickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdatePPMShipment) validateSecondaryDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDestinationAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdatePPMShipment) validateSecondaryPickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryPickupAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdatePPMShipment) validateSitEstimatedDepartureDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitEstimatedDepartureDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitEstimatedDepartureDate", "body", "date", m.SitEstimatedDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateSitEstimatedEntryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitEstimatedEntryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitEstimatedEntryDate", "body", "date", m.SitEstimatedEntryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateSitLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.SitLocation) { // not required
		return nil
	}

	if m.SitLocation != nil {
		if err := m.SitLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitLocation")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) validateW2Address(formats strfmt.Registry) error {
	if swag.IsZero(m.W2Address) { // not required
		return nil
	}

	if m.W2Address != nil {
		if err := m.W2Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("w2Address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("w2Address")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update p p m shipment based on the context it is used
func (m *UpdatePPMShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdvanceStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryPickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateW2Address(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePPMShipment) contextValidateAdvanceStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.AdvanceStatus != nil {

		if swag.IsZero(m.AdvanceStatus) { // not required
			return nil
		}

		if err := m.AdvanceStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advanceStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("advanceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdatePPMShipment) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdatePPMShipment) contextValidateSecondaryDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdatePPMShipment) contextValidateSecondaryPickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdatePPMShipment) contextValidateSitLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.SitLocation != nil {

		if swag.IsZero(m.SitLocation) { // not required
			return nil
		}

		if err := m.SitLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitLocation")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) contextValidateW2Address(ctx context.Context, formats strfmt.Registry) error {

	if m.W2Address != nil {

		if swag.IsZero(m.W2Address) { // not required
			return nil
		}

		if err := m.W2Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("w2Address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("w2Address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdatePPMShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatePPMShipment) UnmarshalBinary(b []byte) error {
	var res UpdatePPMShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
