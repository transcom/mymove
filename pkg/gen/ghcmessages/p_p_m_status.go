// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PPMStatus p p m status
//
// swagger:model PPMStatus
type PPMStatus string

func NewPPMStatus(value PPMStatus) *PPMStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PPMStatus.
func (m PPMStatus) Pointer() *PPMStatus {
	return &m
}

const (

	// PPMStatusCANCELLED captures enum value "CANCELLED"
	PPMStatusCANCELLED PPMStatus = "CANCELLED"

	// PPMStatusDRAFT captures enum value "DRAFT"
	PPMStatusDRAFT PPMStatus = "DRAFT"

	// PPMStatusSUBMITTED captures enum value "SUBMITTED"
	PPMStatusSUBMITTED PPMStatus = "SUBMITTED"

	// PPMStatusWAITINGONCUSTOMER captures enum value "WAITING_ON_CUSTOMER"
	PPMStatusWAITINGONCUSTOMER PPMStatus = "WAITING_ON_CUSTOMER"

	// PPMStatusNEEDSADVANCEAPPROVAL captures enum value "NEEDS_ADVANCE_APPROVAL"
	PPMStatusNEEDSADVANCEAPPROVAL PPMStatus = "NEEDS_ADVANCE_APPROVAL"

	// PPMStatusNEEDSCLOSEOUT captures enum value "NEEDS_CLOSEOUT"
	PPMStatusNEEDSCLOSEOUT PPMStatus = "NEEDS_CLOSEOUT"

	// PPMStatusCLOSEOUTCOMPLETE captures enum value "CLOSEOUT_COMPLETE"
	PPMStatusCLOSEOUTCOMPLETE PPMStatus = "CLOSEOUT_COMPLETE"

	// PPMStatusCOMPLETED captures enum value "COMPLETED"
	PPMStatusCOMPLETED PPMStatus = "COMPLETED"
)

// for schema
var pPMStatusEnum []interface{}

func init() {
	var res []PPMStatus
	if err := json.Unmarshal([]byte(`["CANCELLED","DRAFT","SUBMITTED","WAITING_ON_CUSTOMER","NEEDS_ADVANCE_APPROVAL","NEEDS_CLOSEOUT","CLOSEOUT_COMPLETE","COMPLETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pPMStatusEnum = append(pPMStatusEnum, v)
	}
}

func (m PPMStatus) validatePPMStatusEnum(path, location string, value PPMStatus) error {
	if err := validate.EnumCase(path, location, value, pPMStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this p p m status
func (m PPMStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePPMStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this p p m status based on context it is used
func (m PPMStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
