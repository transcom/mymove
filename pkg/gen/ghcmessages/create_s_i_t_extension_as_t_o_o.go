// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSITExtensionAsTOO create s i t extension as t o o
//
// swagger:model CreateSITExtensionAsTOO
type CreateSITExtensionAsTOO struct {

	// Number of days approved for SIT extension. This will match requested days saved to the SIT extension model.
	// Example: 21
	// Required: true
	// Minimum: 1
	ApprovedDays *int64 `json:"approvedDays"`

	// Remarks from TOO about SIT extension creation
	// Example: Customer needs additional storage time as their new place of residence is not yet ready
	OfficeRemarks *string `json:"officeRemarks,omitempty"`

	// Reason from service counselor-provided picklist for SIT extension
	// Example: AWAITING_COMPLETION_OF_RESIDENCE
	// Required: true
	// Enum: [SERIOUS_ILLNESS_MEMBER SERIOUS_ILLNESS_DEPENDENT IMPENDING_ASSIGNEMENT DIRECTED_TEMPORARY_DUTY NONAVAILABILITY_OF_CIVILIAN_HOUSING AWAITING_COMPLETION_OF_RESIDENCE OTHER]
	RequestReason *string `json:"requestReason"`
}

// Validate validates this create s i t extension as t o o
func (m *CreateSITExtensionAsTOO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovedDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSITExtensionAsTOO) validateApprovedDays(formats strfmt.Registry) error {

	if err := validate.Required("approvedDays", "body", m.ApprovedDays); err != nil {
		return err
	}

	if err := validate.MinimumInt("approvedDays", "body", *m.ApprovedDays, 1, false); err != nil {
		return err
	}

	return nil
}

var createSITExtensionAsTOOTypeRequestReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SERIOUS_ILLNESS_MEMBER","SERIOUS_ILLNESS_DEPENDENT","IMPENDING_ASSIGNEMENT","DIRECTED_TEMPORARY_DUTY","NONAVAILABILITY_OF_CIVILIAN_HOUSING","AWAITING_COMPLETION_OF_RESIDENCE","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createSITExtensionAsTOOTypeRequestReasonPropEnum = append(createSITExtensionAsTOOTypeRequestReasonPropEnum, v)
	}
}

const (

	// CreateSITExtensionAsTOORequestReasonSERIOUSILLNESSMEMBER captures enum value "SERIOUS_ILLNESS_MEMBER"
	CreateSITExtensionAsTOORequestReasonSERIOUSILLNESSMEMBER string = "SERIOUS_ILLNESS_MEMBER"

	// CreateSITExtensionAsTOORequestReasonSERIOUSILLNESSDEPENDENT captures enum value "SERIOUS_ILLNESS_DEPENDENT"
	CreateSITExtensionAsTOORequestReasonSERIOUSILLNESSDEPENDENT string = "SERIOUS_ILLNESS_DEPENDENT"

	// CreateSITExtensionAsTOORequestReasonIMPENDINGASSIGNEMENT captures enum value "IMPENDING_ASSIGNEMENT"
	CreateSITExtensionAsTOORequestReasonIMPENDINGASSIGNEMENT string = "IMPENDING_ASSIGNEMENT"

	// CreateSITExtensionAsTOORequestReasonDIRECTEDTEMPORARYDUTY captures enum value "DIRECTED_TEMPORARY_DUTY"
	CreateSITExtensionAsTOORequestReasonDIRECTEDTEMPORARYDUTY string = "DIRECTED_TEMPORARY_DUTY"

	// CreateSITExtensionAsTOORequestReasonNONAVAILABILITYOFCIVILIANHOUSING captures enum value "NONAVAILABILITY_OF_CIVILIAN_HOUSING"
	CreateSITExtensionAsTOORequestReasonNONAVAILABILITYOFCIVILIANHOUSING string = "NONAVAILABILITY_OF_CIVILIAN_HOUSING"

	// CreateSITExtensionAsTOORequestReasonAWAITINGCOMPLETIONOFRESIDENCE captures enum value "AWAITING_COMPLETION_OF_RESIDENCE"
	CreateSITExtensionAsTOORequestReasonAWAITINGCOMPLETIONOFRESIDENCE string = "AWAITING_COMPLETION_OF_RESIDENCE"

	// CreateSITExtensionAsTOORequestReasonOTHER captures enum value "OTHER"
	CreateSITExtensionAsTOORequestReasonOTHER string = "OTHER"
)

// prop value enum
func (m *CreateSITExtensionAsTOO) validateRequestReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createSITExtensionAsTOOTypeRequestReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateSITExtensionAsTOO) validateRequestReason(formats strfmt.Registry) error {

	if err := validate.Required("requestReason", "body", m.RequestReason); err != nil {
		return err
	}

	// value enum
	if err := m.validateRequestReasonEnum("requestReason", "body", *m.RequestReason); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create s i t extension as t o o based on context it is used
func (m *CreateSITExtensionAsTOO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateSITExtensionAsTOO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSITExtensionAsTOO) UnmarshalBinary(b []byte) error {
	var res CreateSITExtensionAsTOO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
