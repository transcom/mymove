// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BulkAssignmentPaymentRequestData bulk assignment payment request data
//
// swagger:model BulkAssignmentPaymentRequestData
type BulkAssignmentPaymentRequestData struct {

	// available office users
	AvailableOfficeUsers AvailableOfficeUsers `json:"availableOfficeUsers,omitempty"`

	// bulk assignment payment request i ds
	BulkAssignmentPaymentRequestIDs BulkAssignmentPaymentRequestIDs `json:"bulkAssignmentPaymentRequestIDs,omitempty"`
}

// Validate validates this bulk assignment payment request data
func (m *BulkAssignmentPaymentRequestData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableOfficeUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBulkAssignmentPaymentRequestIDs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkAssignmentPaymentRequestData) validateAvailableOfficeUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableOfficeUsers) { // not required
		return nil
	}

	if err := m.AvailableOfficeUsers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("availableOfficeUsers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("availableOfficeUsers")
		}
		return err
	}

	return nil
}

func (m *BulkAssignmentPaymentRequestData) validateBulkAssignmentPaymentRequestIDs(formats strfmt.Registry) error {
	if swag.IsZero(m.BulkAssignmentPaymentRequestIDs) { // not required
		return nil
	}

	if err := m.BulkAssignmentPaymentRequestIDs.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bulkAssignmentPaymentRequestIDs")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("bulkAssignmentPaymentRequestIDs")
		}
		return err
	}

	return nil
}

// ContextValidate validate this bulk assignment payment request data based on the context it is used
func (m *BulkAssignmentPaymentRequestData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailableOfficeUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBulkAssignmentPaymentRequestIDs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkAssignmentPaymentRequestData) contextValidateAvailableOfficeUsers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AvailableOfficeUsers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("availableOfficeUsers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("availableOfficeUsers")
		}
		return err
	}

	return nil
}

func (m *BulkAssignmentPaymentRequestData) contextValidateBulkAssignmentPaymentRequestIDs(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BulkAssignmentPaymentRequestIDs.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bulkAssignmentPaymentRequestIDs")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("bulkAssignmentPaymentRequestIDs")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkAssignmentPaymentRequestData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkAssignmentPaymentRequestData) UnmarshalBinary(b []byte) error {
	var res BulkAssignmentPaymentRequestData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
