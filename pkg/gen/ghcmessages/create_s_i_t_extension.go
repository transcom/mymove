// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSITExtension create s i t extension
//
// swagger:model CreateSITExtension
type CreateSITExtension struct {

	// Number of days approved for SIT extension. In TOO creation, this will match requested days.
	// Example: 21
	// Minimum: 1
	ApprovedDays int64 `json:"approvedDays,omitempty"`

	// Remarks from TOO about SIT extension creation
	// Example: Customer needs additional storage time as their new place of residence is not yet ready
	OfficeRemarks *string `json:"officeRemarks,omitempty"`

	// Reason from service counselor-provided picklist for SIT extension
	// Example: AWAITING_COMPLETION_OF_RESIDENCE
	// Enum: [SERIOUS_ILLNESS_MEMBER SERIOUS_ILLNESS_DEPENDENT IMPENDING_ASSIGNEMENT DIRECTED_TEMPORARY_DUTY NONAVAILABILITY_OF_CIVILIAN_HOUSING AWAITING_COMPLETION_OF_RESIDENCE OTHER]
	RequestReason interface{} `json:"requestReason,omitempty"`

	// Number of days requested for SIT extension. In TOO creation, this will match approved days by default.
	// Example: 21
	// Minimum: 1
	RequestedDays int64 `json:"requestedDays,omitempty"`
}

// Validate validates this create s i t extension
func (m *CreateSITExtension) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovedDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedDays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSITExtension) validateApprovedDays(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovedDays) { // not required
		return nil
	}

	if err := validate.MinimumInt("approvedDays", "body", m.ApprovedDays, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateSITExtension) validateRequestedDays(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedDays) { // not required
		return nil
	}

	if err := validate.MinimumInt("requestedDays", "body", m.RequestedDays, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create s i t extension based on context it is used
func (m *CreateSITExtension) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateSITExtension) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSITExtension) UnmarshalBinary(b []byte) error {
	var res CreateSITExtension
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
