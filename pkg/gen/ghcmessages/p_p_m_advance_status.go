// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PPMAdvanceStatus PPM Advance Status
//
// # Indicates whether an advance status has been accepted, rejected, or edited, or a prime counseled PPM has been received or not received
//
// swagger:model PPMAdvanceStatus
type PPMAdvanceStatus string

func NewPPMAdvanceStatus(value PPMAdvanceStatus) *PPMAdvanceStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PPMAdvanceStatus.
func (m PPMAdvanceStatus) Pointer() *PPMAdvanceStatus {
	return &m
}

const (

	// PPMAdvanceStatusAPPROVED captures enum value "APPROVED"
	PPMAdvanceStatusAPPROVED PPMAdvanceStatus = "APPROVED"

	// PPMAdvanceStatusREJECTED captures enum value "REJECTED"
	PPMAdvanceStatusREJECTED PPMAdvanceStatus = "REJECTED"

	// PPMAdvanceStatusEDITED captures enum value "EDITED"
	PPMAdvanceStatusEDITED PPMAdvanceStatus = "EDITED"

	// PPMAdvanceStatusRECEIVED captures enum value "RECEIVED"
	PPMAdvanceStatusRECEIVED PPMAdvanceStatus = "RECEIVED"

	// PPMAdvanceStatusNOTRECEIVED captures enum value "NOT_RECEIVED"
	PPMAdvanceStatusNOTRECEIVED PPMAdvanceStatus = "NOT_RECEIVED"
)

// for schema
var pPMAdvanceStatusEnum []interface{}

func init() {
	var res []PPMAdvanceStatus
	if err := json.Unmarshal([]byte(`["APPROVED","REJECTED","EDITED","RECEIVED","NOT_RECEIVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pPMAdvanceStatusEnum = append(pPMAdvanceStatusEnum, v)
	}
}

func (m PPMAdvanceStatus) validatePPMAdvanceStatusEnum(path, location string, value PPMAdvanceStatus) error {
	if err := validate.EnumCase(path, location, value, pPMAdvanceStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this p p m advance status
func (m PPMAdvanceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePPMAdvanceStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this p p m advance status based on context it is used
func (m PPMAdvanceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
