// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApproveShipments approve shipments
//
// swagger:model ApproveShipments
type ApproveShipments struct {

	// approve shipments
	// Required: true
	ApproveShipments []*ApproveShipmentsApproveShipmentsItems0 `json:"approveShipments"`
}

// Validate validates this approve shipments
func (m *ApproveShipments) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApproveShipments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApproveShipments) validateApproveShipments(formats strfmt.Registry) error {

	if err := validate.Required("approveShipments", "body", m.ApproveShipments); err != nil {
		return err
	}

	for i := 0; i < len(m.ApproveShipments); i++ {
		if swag.IsZero(m.ApproveShipments[i]) { // not required
			continue
		}

		if m.ApproveShipments[i] != nil {
			if err := m.ApproveShipments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("approveShipments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("approveShipments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this approve shipments based on the context it is used
func (m *ApproveShipments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApproveShipments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApproveShipments) contextValidateApproveShipments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApproveShipments); i++ {

		if m.ApproveShipments[i] != nil {

			if swag.IsZero(m.ApproveShipments[i]) { // not required
				return nil
			}

			if err := m.ApproveShipments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("approveShipments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("approveShipments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApproveShipments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApproveShipments) UnmarshalBinary(b []byte) error {
	var res ApproveShipments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApproveShipmentsApproveShipmentsItems0 approve shipments approve shipments items0
//
// swagger:model ApproveShipmentsApproveShipmentsItems0
type ApproveShipmentsApproveShipmentsItems0 struct {

	// e tag
	// Required: true
	ETag *string `json:"eTag"`

	// shipment ID
	// Required: true
	// Format: uuid
	ShipmentID *strfmt.UUID `json:"shipmentID"`
}

// Validate validates this approve shipments approve shipments items0
func (m *ApproveShipmentsApproveShipmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateETag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApproveShipmentsApproveShipmentsItems0) validateETag(formats strfmt.Registry) error {

	if err := validate.Required("eTag", "body", m.ETag); err != nil {
		return err
	}

	return nil
}

func (m *ApproveShipmentsApproveShipmentsItems0) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentID", "body", m.ShipmentID); err != nil {
		return err
	}

	if err := validate.FormatOf("shipmentID", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this approve shipments approve shipments items0 based on context it is used
func (m *ApproveShipmentsApproveShipmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApproveShipmentsApproveShipmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApproveShipmentsApproveShipmentsItems0) UnmarshalBinary(b []byte) error {
	var res ApproveShipmentsApproveShipmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
