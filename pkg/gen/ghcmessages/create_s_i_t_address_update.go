// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSITAddressUpdate create s i t address update
//
// swagger:model CreateSITAddressUpdate
type CreateSITAddressUpdate struct {

	// new address
	// Required: true
	NewAddress *Address `json:"newAddress"`

	// Remarks from TOO about SIT Address Update creation
	// Required: true
	OfficeRemarks *string `json:"officeRemarks"`
}

// Validate validates this create s i t address update
func (m *CreateSITAddressUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfficeRemarks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSITAddressUpdate) validateNewAddress(formats strfmt.Registry) error {

	if err := validate.Required("newAddress", "body", m.NewAddress); err != nil {
		return err
	}

	if m.NewAddress != nil {
		if err := m.NewAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreateSITAddressUpdate) validateOfficeRemarks(formats strfmt.Registry) error {

	if err := validate.Required("officeRemarks", "body", m.OfficeRemarks); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create s i t address update based on the context it is used
func (m *CreateSITAddressUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSITAddressUpdate) contextValidateNewAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.NewAddress != nil {
		if err := m.NewAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateSITAddressUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSITAddressUpdate) UnmarshalBinary(b []byte) error {
	var res CreateSITAddressUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
