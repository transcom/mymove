// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateApprovedSITDurationUpdate create approved s i t duration update
//
// swagger:model CreateApprovedSITDurationUpdate
type CreateApprovedSITDurationUpdate struct {

	// Number of days approved for SIT extension. This will match requested days saved to the SIT extension model.
	// Example: 21
	// Required: true
	ApprovedDays *int64 `json:"approvedDays"`

	// Remarks from TOO about SIT Duration Update creation
	// Example: Customer needs additional storage time as their new place of residence is not yet ready
	OfficeRemarks *string `json:"officeRemarks,omitempty"`

	// Reason from service counselor-provided picklist for SIT Duration Update
	// Example: AWAITING_COMPLETION_OF_RESIDENCE
	// Required: true
	// Enum: [SERIOUS_ILLNESS_MEMBER SERIOUS_ILLNESS_DEPENDENT IMPENDING_ASSIGNEMENT DIRECTED_TEMPORARY_DUTY NONAVAILABILITY_OF_CIVILIAN_HOUSING AWAITING_COMPLETION_OF_RESIDENCE OTHER]
	RequestReason *string `json:"requestReason"`
}

// Validate validates this create approved s i t duration update
func (m *CreateApprovedSITDurationUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovedDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateApprovedSITDurationUpdate) validateApprovedDays(formats strfmt.Registry) error {

	if err := validate.Required("approvedDays", "body", m.ApprovedDays); err != nil {
		return err
	}

	return nil
}

var createApprovedSITDurationUpdateTypeRequestReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SERIOUS_ILLNESS_MEMBER","SERIOUS_ILLNESS_DEPENDENT","IMPENDING_ASSIGNEMENT","DIRECTED_TEMPORARY_DUTY","NONAVAILABILITY_OF_CIVILIAN_HOUSING","AWAITING_COMPLETION_OF_RESIDENCE","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createApprovedSITDurationUpdateTypeRequestReasonPropEnum = append(createApprovedSITDurationUpdateTypeRequestReasonPropEnum, v)
	}
}

const (

	// CreateApprovedSITDurationUpdateRequestReasonSERIOUSILLNESSMEMBER captures enum value "SERIOUS_ILLNESS_MEMBER"
	CreateApprovedSITDurationUpdateRequestReasonSERIOUSILLNESSMEMBER string = "SERIOUS_ILLNESS_MEMBER"

	// CreateApprovedSITDurationUpdateRequestReasonSERIOUSILLNESSDEPENDENT captures enum value "SERIOUS_ILLNESS_DEPENDENT"
	CreateApprovedSITDurationUpdateRequestReasonSERIOUSILLNESSDEPENDENT string = "SERIOUS_ILLNESS_DEPENDENT"

	// CreateApprovedSITDurationUpdateRequestReasonIMPENDINGASSIGNEMENT captures enum value "IMPENDING_ASSIGNEMENT"
	CreateApprovedSITDurationUpdateRequestReasonIMPENDINGASSIGNEMENT string = "IMPENDING_ASSIGNEMENT"

	// CreateApprovedSITDurationUpdateRequestReasonDIRECTEDTEMPORARYDUTY captures enum value "DIRECTED_TEMPORARY_DUTY"
	CreateApprovedSITDurationUpdateRequestReasonDIRECTEDTEMPORARYDUTY string = "DIRECTED_TEMPORARY_DUTY"

	// CreateApprovedSITDurationUpdateRequestReasonNONAVAILABILITYOFCIVILIANHOUSING captures enum value "NONAVAILABILITY_OF_CIVILIAN_HOUSING"
	CreateApprovedSITDurationUpdateRequestReasonNONAVAILABILITYOFCIVILIANHOUSING string = "NONAVAILABILITY_OF_CIVILIAN_HOUSING"

	// CreateApprovedSITDurationUpdateRequestReasonAWAITINGCOMPLETIONOFRESIDENCE captures enum value "AWAITING_COMPLETION_OF_RESIDENCE"
	CreateApprovedSITDurationUpdateRequestReasonAWAITINGCOMPLETIONOFRESIDENCE string = "AWAITING_COMPLETION_OF_RESIDENCE"

	// CreateApprovedSITDurationUpdateRequestReasonOTHER captures enum value "OTHER"
	CreateApprovedSITDurationUpdateRequestReasonOTHER string = "OTHER"
)

// prop value enum
func (m *CreateApprovedSITDurationUpdate) validateRequestReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createApprovedSITDurationUpdateTypeRequestReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateApprovedSITDurationUpdate) validateRequestReason(formats strfmt.Registry) error {

	if err := validate.Required("requestReason", "body", m.RequestReason); err != nil {
		return err
	}

	// value enum
	if err := m.validateRequestReasonEnum("requestReason", "body", *m.RequestReason); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create approved s i t duration update based on context it is used
func (m *CreateApprovedSITDurationUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateApprovedSITDurationUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateApprovedSITDurationUpdate) UnmarshalBinary(b []byte) error {
	var res CreateApprovedSITDurationUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
