// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/transcom/mymove/pkg/swagger/nullable"
)

// UpdateShipment update shipment
//
// swagger:model UpdateShipment
type UpdateShipment struct {

	// actual pro gear weight
	ActualProGearWeight *int64 `json:"actualProGearWeight"`

	// actual spouse pro gear weight
	ActualSpouseProGearWeight *int64 `json:"actualSpouseProGearWeight"`

	// agents
	Agents MTOAgents `json:"agents,omitempty"`

	// estimated weight of the shuttle service item provided by the prime
	// Example: 2500
	BillableWeightCap *int64 `json:"billableWeightCap,omitempty"`

	// billable weight justification
	// Example: more weight than expected
	BillableWeightJustification *string `json:"billableWeightJustification,omitempty"`

	// boat shipment
	BoatShipment *UpdateBoatShipment `json:"boatShipment,omitempty"`

	// counselor remarks
	// Example: counselor approved
	CounselorRemarks *string `json:"counselorRemarks,omitempty"`

	// customer remarks
	// Example: handle with care
	CustomerRemarks *string `json:"customerRemarks,omitempty"`

	// destination address
	DestinationAddress struct {
		Address
	} `json:"destinationAddress,omitempty"`

	// destination type
	DestinationType *DestinationType `json:"destinationType,omitempty"`

	// has secondary delivery address
	HasSecondaryDeliveryAddress *bool `json:"hasSecondaryDeliveryAddress"`

	// has secondary pickup address
	HasSecondaryPickupAddress *bool `json:"hasSecondaryPickupAddress"`

	// has tertiary delivery address
	HasTertiaryDeliveryAddress *bool `json:"hasTertiaryDeliveryAddress"`

	// has tertiary pickup address
	HasTertiaryPickupAddress *bool `json:"hasTertiaryPickupAddress"`

	// mobile home shipment
	MobileHomeShipment *UpdateMobileHomeShipment `json:"mobileHomeShipment,omitempty"`

	// The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.
	// Example: 2000
	NtsRecordedWeight *int64 `json:"ntsRecordedWeight,omitempty"`

	// pickup address
	PickupAddress struct {
		Address
	} `json:"pickupAddress,omitempty"`

	// ppm shipment
	PpmShipment *UpdatePPMShipment `json:"ppmShipment,omitempty"`

	// requested delivery date
	// Format: date
	RequestedDeliveryDate *strfmt.Date `json:"requestedDeliveryDate,omitempty"`

	// requested pickup date
	// Format: date
	RequestedPickupDate *strfmt.Date `json:"requestedPickupDate,omitempty"`

	// sac type
	SacType nullable.String `json:"sacType,omitempty"`

	// secondary delivery address
	SecondaryDeliveryAddress struct {
		Address
	} `json:"secondaryDeliveryAddress,omitempty"`

	// secondary pickup address
	SecondaryPickupAddress struct {
		Address
	} `json:"secondaryPickupAddress,omitempty"`

	// service order number
	ServiceOrderNumber *string `json:"serviceOrderNumber,omitempty"`

	// shipment type
	ShipmentType MTOShipmentType `json:"shipmentType,omitempty"`

	// storage facility
	StorageFacility *StorageFacility `json:"storageFacility,omitempty"`

	// tac type
	TacType nullable.String `json:"tacType,omitempty"`

	// tertiary delivery address
	TertiaryDeliveryAddress struct {
		Address
	} `json:"tertiaryDeliveryAddress,omitempty"`

	// tertiary pickup address
	TertiaryPickupAddress struct {
		Address
	} `json:"tertiaryPickupAddress,omitempty"`

	// uses external vendor
	// Example: false
	UsesExternalVendor *bool `json:"usesExternalVendor,omitempty"`
}

// Validate validates this update shipment
func (m *UpdateShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBoatShipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileHomeShipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpmShipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSacType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageFacility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTacType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTertiaryDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTertiaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShipment) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	if err := m.Agents.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *UpdateShipment) validateBoatShipment(formats strfmt.Registry) error {
	if swag.IsZero(m.BoatShipment) { // not required
		return nil
	}

	if m.BoatShipment != nil {
		if err := m.BoatShipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boatShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("boatShipment")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateShipment) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdateShipment) validateDestinationType(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationType) { // not required
		return nil
	}

	if m.DestinationType != nil {
		if err := m.DestinationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationType")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateShipment) validateMobileHomeShipment(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileHomeShipment) { // not required
		return nil
	}

	if m.MobileHomeShipment != nil {
		if err := m.MobileHomeShipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobileHomeShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobileHomeShipment")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateShipment) validatePickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdateShipment) validatePpmShipment(formats strfmt.Registry) error {
	if swag.IsZero(m.PpmShipment) { // not required
		return nil
	}

	if m.PpmShipment != nil {
		if err := m.PpmShipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppmShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppmShipment")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateShipment) validateRequestedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedDeliveryDate", "body", "date", m.RequestedDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateShipment) validateRequestedPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedPickupDate", "body", "date", m.RequestedPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateShipment) validateSacType(formats strfmt.Registry) error {
	if swag.IsZero(m.SacType) { // not required
		return nil
	}

	if err := m.SacType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sacType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sacType")
		}
		return err
	}

	return nil
}

func (m *UpdateShipment) validateSecondaryDeliveryAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDeliveryAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdateShipment) validateSecondaryPickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryPickupAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdateShipment) validateShipmentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentType) { // not required
		return nil
	}

	if err := m.ShipmentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipmentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shipmentType")
		}
		return err
	}

	return nil
}

func (m *UpdateShipment) validateStorageFacility(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageFacility) { // not required
		return nil
	}

	if m.StorageFacility != nil {
		if err := m.StorageFacility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageFacility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageFacility")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateShipment) validateTacType(formats strfmt.Registry) error {
	if swag.IsZero(m.TacType) { // not required
		return nil
	}

	if err := m.TacType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tacType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tacType")
		}
		return err
	}

	return nil
}

func (m *UpdateShipment) validateTertiaryDeliveryAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.TertiaryDeliveryAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdateShipment) validateTertiaryPickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.TertiaryPickupAddress) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this update shipment based on the context it is used
func (m *UpdateShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBoatShipment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMobileHomeShipment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePpmShipment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSacType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryDeliveryAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryPickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageFacility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTacType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTertiaryDeliveryAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTertiaryPickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShipment) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Agents.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *UpdateShipment) contextValidateBoatShipment(ctx context.Context, formats strfmt.Registry) error {

	if m.BoatShipment != nil {

		if swag.IsZero(m.BoatShipment) { // not required
			return nil
		}

		if err := m.BoatShipment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boatShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("boatShipment")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateShipment) contextValidateDestinationType(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationType != nil {

		if swag.IsZero(m.DestinationType) { // not required
			return nil
		}

		if err := m.DestinationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationType")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateShipment) contextValidateMobileHomeShipment(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileHomeShipment != nil {

		if swag.IsZero(m.MobileHomeShipment) { // not required
			return nil
		}

		if err := m.MobileHomeShipment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobileHomeShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobileHomeShipment")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateShipment) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateShipment) contextValidatePpmShipment(ctx context.Context, formats strfmt.Registry) error {

	if m.PpmShipment != nil {

		if swag.IsZero(m.PpmShipment) { // not required
			return nil
		}

		if err := m.PpmShipment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppmShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppmShipment")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateShipment) contextValidateSacType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SacType) { // not required
		return nil
	}

	if err := m.SacType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sacType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sacType")
		}
		return err
	}

	return nil
}

func (m *UpdateShipment) contextValidateSecondaryDeliveryAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateShipment) contextValidateSecondaryPickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateShipment) contextValidateShipmentType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ShipmentType) { // not required
		return nil
	}

	if err := m.ShipmentType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipmentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shipmentType")
		}
		return err
	}

	return nil
}

func (m *UpdateShipment) contextValidateStorageFacility(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageFacility != nil {

		if swag.IsZero(m.StorageFacility) { // not required
			return nil
		}

		if err := m.StorageFacility.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageFacility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageFacility")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateShipment) contextValidateTacType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TacType) { // not required
		return nil
	}

	if err := m.TacType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tacType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tacType")
		}
		return err
	}

	return nil
}

func (m *UpdateShipment) contextValidateTertiaryDeliveryAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateShipment) contextValidateTertiaryPickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateShipment) UnmarshalBinary(b []byte) error {
	var res UpdateShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
