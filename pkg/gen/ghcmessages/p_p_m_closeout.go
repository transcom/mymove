// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PPMCloseout The calculations needed in the "Review Documents" section of a PPM closeout. LIst of all expenses/reimbursements related toa PPM shipment.
//
// swagger:model PPMCloseout
type PPMCloseout struct {

	// The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.
	// Required: true
	SITReimbursement *int64 `json:"SITReimbursement"`

	// actual move date
	// Required: true
	// Format: date
	ActualMoveDate *ActualMoveDate `json:"actualMoveDate"`

	// actual weight
	// Required: true
	ActualWeight *PrimeActualWeight `json:"actualWeight"`

	// Advance Operating Allowance (AOA).
	// Required: true
	Aoa *int64 `json:"aoa"`

	// The Domestic Destination Price (DDP).
	// Required: true
	Ddp *int64 `json:"ddp"`

	// The Domestic Origin Price (DOP).
	// Required: true
	Dop *int64 `json:"dop"`

	// estimated weight
	// Required: true
	EstimatedWeight *EstimatedWeight `json:"estimatedWeight"`

	// GCC
	//
	// Government Constructive Cost (GCC)
	// Required: true
	Gcc *int64 `json:"gcc"`

	// gross incentive
	// Required: true
	GrossIncentive *FinalIncentive `json:"grossIncentive"`

	// The linehaul/shorthaul Fuel Surcharge (FSC).
	// Required: true
	HaulFSC *int64 `json:"haulFSC"`

	// The price of the linehaul or shorthaul.
	// Required: true
	HaulPrice *int64 `json:"haulPrice"`

	// Primary auto-generated unique identifier of the PPM shipment object
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The distance between the old address and the new address in miles.
	// Example: 54
	// Required: true
	// Minimum: 0
	Miles *int64 `json:"miles"`

	// The full price of all packing/unpacking services.
	// Required: true
	PackUnpackPrice *int64 `json:"packUnpackPrice"`

	// planned move date
	// Required: true
	// Format: date
	PlannedMoveDate *ExpectedDepartureDate `json:"plannedMoveDate"`

	// pro gear weight
	// Required: true
	ProGearWeight *ProGearWeight `json:"proGearWeight"`

	// The remaining reimbursement amount that is still owed to the customer.
	// Required: true
	RemainingReimbursementOwed *int64 `json:"remainingReimbursementOwed"`

	// The id of the parent MTOShipment object
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Read Only: true
	// Format: uuid
	ShipmentID strfmt.UUID `json:"shipmentId,omitempty"`
}

// Validate validates this p p m closeout
func (m *PPMCloseout) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSITReimbursement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActualMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActualWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAoa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrossIncentive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHaulFSC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHaulPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackUnpackPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlannedMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProGearWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemainingReimbursementOwed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPMCloseout) validateSITReimbursement(formats strfmt.Registry) error {

	if err := validate.Required("SITReimbursement", "body", m.SITReimbursement); err != nil {
		return err
	}

	return nil
}

func (m *PPMCloseout) validateActualMoveDate(formats strfmt.Registry) error {

	if err := validate.Required("actualMoveDate", "body", m.ActualMoveDate); err != nil {
		return err
	}

	if err := validate.Required("actualMoveDate", "body", m.ActualMoveDate); err != nil {
		return err
	}

	if m.ActualMoveDate != nil {
		if err := m.ActualMoveDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actualMoveDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actualMoveDate")
			}
			return err
		}
	}

	return nil
}

func (m *PPMCloseout) validateActualWeight(formats strfmt.Registry) error {

	if err := validate.Required("actualWeight", "body", m.ActualWeight); err != nil {
		return err
	}

	if err := validate.Required("actualWeight", "body", m.ActualWeight); err != nil {
		return err
	}

	if m.ActualWeight != nil {
		if err := m.ActualWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actualWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actualWeight")
			}
			return err
		}
	}

	return nil
}

func (m *PPMCloseout) validateAoa(formats strfmt.Registry) error {

	if err := validate.Required("aoa", "body", m.Aoa); err != nil {
		return err
	}

	return nil
}

func (m *PPMCloseout) validateDdp(formats strfmt.Registry) error {

	if err := validate.Required("ddp", "body", m.Ddp); err != nil {
		return err
	}

	return nil
}

func (m *PPMCloseout) validateDop(formats strfmt.Registry) error {

	if err := validate.Required("dop", "body", m.Dop); err != nil {
		return err
	}

	return nil
}

func (m *PPMCloseout) validateEstimatedWeight(formats strfmt.Registry) error {

	if err := validate.Required("estimatedWeight", "body", m.EstimatedWeight); err != nil {
		return err
	}

	if err := validate.Required("estimatedWeight", "body", m.EstimatedWeight); err != nil {
		return err
	}

	if m.EstimatedWeight != nil {
		if err := m.EstimatedWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("estimatedWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("estimatedWeight")
			}
			return err
		}
	}

	return nil
}

func (m *PPMCloseout) validateGcc(formats strfmt.Registry) error {

	if err := validate.Required("gcc", "body", m.Gcc); err != nil {
		return err
	}

	return nil
}

func (m *PPMCloseout) validateGrossIncentive(formats strfmt.Registry) error {

	if err := validate.Required("grossIncentive", "body", m.GrossIncentive); err != nil {
		return err
	}

	if err := validate.Required("grossIncentive", "body", m.GrossIncentive); err != nil {
		return err
	}

	if m.GrossIncentive != nil {
		if err := m.GrossIncentive.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grossIncentive")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grossIncentive")
			}
			return err
		}
	}

	return nil
}

func (m *PPMCloseout) validateHaulFSC(formats strfmt.Registry) error {

	if err := validate.Required("haulFSC", "body", m.HaulFSC); err != nil {
		return err
	}

	return nil
}

func (m *PPMCloseout) validateHaulPrice(formats strfmt.Registry) error {

	if err := validate.Required("haulPrice", "body", m.HaulPrice); err != nil {
		return err
	}

	return nil
}

func (m *PPMCloseout) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMCloseout) validateMiles(formats strfmt.Registry) error {

	if err := validate.Required("miles", "body", m.Miles); err != nil {
		return err
	}

	if err := validate.MinimumInt("miles", "body", *m.Miles, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PPMCloseout) validatePackUnpackPrice(formats strfmt.Registry) error {

	if err := validate.Required("packUnpackPrice", "body", m.PackUnpackPrice); err != nil {
		return err
	}

	return nil
}

func (m *PPMCloseout) validatePlannedMoveDate(formats strfmt.Registry) error {

	if err := validate.Required("plannedMoveDate", "body", m.PlannedMoveDate); err != nil {
		return err
	}

	if err := validate.Required("plannedMoveDate", "body", m.PlannedMoveDate); err != nil {
		return err
	}

	if m.PlannedMoveDate != nil {
		if err := m.PlannedMoveDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plannedMoveDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plannedMoveDate")
			}
			return err
		}
	}

	return nil
}

func (m *PPMCloseout) validateProGearWeight(formats strfmt.Registry) error {

	if err := validate.Required("proGearWeight", "body", m.ProGearWeight); err != nil {
		return err
	}

	if err := validate.Required("proGearWeight", "body", m.ProGearWeight); err != nil {
		return err
	}

	if m.ProGearWeight != nil {
		if err := m.ProGearWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proGearWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proGearWeight")
			}
			return err
		}
	}

	return nil
}

func (m *PPMCloseout) validateRemainingReimbursementOwed(formats strfmt.Registry) error {

	if err := validate.Required("remainingReimbursementOwed", "body", m.RemainingReimbursementOwed); err != nil {
		return err
	}

	return nil
}

func (m *PPMCloseout) validateShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("shipmentId", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p p m closeout based on the context it is used
func (m *PPMCloseout) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActualMoveDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateActualWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEstimatedWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrossIncentive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlannedMoveDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProGearWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPMCloseout) contextValidateActualMoveDate(ctx context.Context, formats strfmt.Registry) error {

	if m.ActualMoveDate != nil {

		if err := m.ActualMoveDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actualMoveDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actualMoveDate")
			}
			return err
		}
	}

	return nil
}

func (m *PPMCloseout) contextValidateActualWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.ActualWeight != nil {

		if err := m.ActualWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actualWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actualWeight")
			}
			return err
		}
	}

	return nil
}

func (m *PPMCloseout) contextValidateEstimatedWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.EstimatedWeight != nil {

		if err := m.EstimatedWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("estimatedWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("estimatedWeight")
			}
			return err
		}
	}

	return nil
}

func (m *PPMCloseout) contextValidateGrossIncentive(ctx context.Context, formats strfmt.Registry) error {

	if m.GrossIncentive != nil {

		if err := m.GrossIncentive.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grossIncentive")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grossIncentive")
			}
			return err
		}
	}

	return nil
}

func (m *PPMCloseout) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *PPMCloseout) contextValidatePlannedMoveDate(ctx context.Context, formats strfmt.Registry) error {

	if m.PlannedMoveDate != nil {

		if err := m.PlannedMoveDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plannedMoveDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plannedMoveDate")
			}
			return err
		}
	}

	return nil
}

func (m *PPMCloseout) contextValidateProGearWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.ProGearWeight != nil {

		if err := m.ProGearWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proGearWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proGearWeight")
			}
			return err
		}
	}

	return nil
}

func (m *PPMCloseout) contextValidateShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "shipmentId", "body", strfmt.UUID(m.ShipmentID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PPMCloseout) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PPMCloseout) UnmarshalBinary(b []byte) error {
	var res PPMCloseout
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
