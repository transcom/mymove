// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PPMDocuments All documents associated with a PPM shipment, including weight tickets, progear weight tickets, and moving expenses.
//
// swagger:model PPMDocuments
type PPMDocuments struct {

	// moving expenses
	MovingExpenses MovingExpenses `json:"MovingExpenses"`

	// pro gear weight tickets
	ProGearWeightTickets ProGearWeightTickets `json:"ProGearWeightTickets"`

	// weight tickets
	WeightTickets WeightTickets `json:"WeightTickets"`
}

// Validate validates this p p m documents
func (m *PPMDocuments) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMovingExpenses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProGearWeightTickets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeightTickets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPMDocuments) validateMovingExpenses(formats strfmt.Registry) error {
	if swag.IsZero(m.MovingExpenses) { // not required
		return nil
	}

	if err := m.MovingExpenses.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MovingExpenses")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("MovingExpenses")
		}
		return err
	}

	return nil
}

func (m *PPMDocuments) validateProGearWeightTickets(formats strfmt.Registry) error {
	if swag.IsZero(m.ProGearWeightTickets) { // not required
		return nil
	}

	if err := m.ProGearWeightTickets.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ProGearWeightTickets")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ProGearWeightTickets")
		}
		return err
	}

	return nil
}

func (m *PPMDocuments) validateWeightTickets(formats strfmt.Registry) error {
	if swag.IsZero(m.WeightTickets) { // not required
		return nil
	}

	if err := m.WeightTickets.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("WeightTickets")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("WeightTickets")
		}
		return err
	}

	return nil
}

// ContextValidate validate this p p m documents based on the context it is used
func (m *PPMDocuments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMovingExpenses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProGearWeightTickets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeightTickets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPMDocuments) contextValidateMovingExpenses(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MovingExpenses.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MovingExpenses")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("MovingExpenses")
		}
		return err
	}

	return nil
}

func (m *PPMDocuments) contextValidateProGearWeightTickets(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ProGearWeightTickets.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ProGearWeightTickets")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ProGearWeightTickets")
		}
		return err
	}

	return nil
}

func (m *PPMDocuments) contextValidateWeightTickets(ctx context.Context, formats strfmt.Registry) error {

	if err := m.WeightTickets.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("WeightTickets")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("WeightTickets")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PPMDocuments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PPMDocuments) UnmarshalBinary(b []byte) error {
	var res PPMDocuments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
