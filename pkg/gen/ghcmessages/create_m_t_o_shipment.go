// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMTOShipment create m t o shipment
//
// swagger:model CreateMTOShipment
type CreateMTOShipment struct {

	// agents
	Agents MTOAgents `json:"agents,omitempty"`

	// The counselor can use the counselor remarks field to inform the movers about any
	// special circumstances for this shipment. Typical examples:
	//   * bulky or fragile items,
	//   * weapons,
	//   * access info for their address.
	// Counselors enters this information when creating or editing an MTO Shipment. Optional field.
	//
	// Example: handle with care
	CounselorRemarks *string `json:"counselorRemarks,omitempty"`

	// The customer can use the customer remarks field to inform the services counselor and the movers about any
	// special circumstances for this shipment. Typical examples:
	//   * bulky or fragile items,
	//   * weapons,
	//   * access info for their address.
	// Customer enters this information during onboarding. Optional field.
	//
	// Example: handle with care
	CustomerRemarks *string `json:"customerRemarks,omitempty"`

	// Where the movers should deliver this shipment.
	DestinationAddress struct {
		Address
	} `json:"destinationAddress,omitempty"`

	// destination type
	DestinationType *DestinationType `json:"destinationType,omitempty"`

	// The ID of the move this new shipment is for.
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	MoveTaskOrderID *strfmt.UUID `json:"moveTaskOrderID"`

	// mto service items
	MtoServiceItems MTOServiceItems `json:"mtoServiceItems,omitempty"`

	// The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.
	// Example: 2000
	NtsRecordedWeight *int64 `json:"ntsRecordedWeight,omitempty"`

	// The address where the movers should pick up this shipment.
	PickupAddress struct {
		Address
	} `json:"pickupAddress,omitempty"`

	// ppm shipment
	PpmShipment *CreatePPMShipment `json:"ppmShipment,omitempty"`

	// The customer's preferred delivery date.
	//
	// Format: date
	RequestedDeliveryDate *strfmt.Date `json:"requestedDeliveryDate,omitempty"`

	// The customer's preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.
	//
	// Format: date
	RequestedPickupDate *strfmt.Date `json:"requestedPickupDate,omitempty"`

	// sac type
	SacType *LOAType `json:"sacType,omitempty"`

	// service order number
	ServiceOrderNumber *string `json:"serviceOrderNumber,omitempty"`

	// shipment type
	// Required: true
	ShipmentType *MTOShipmentType `json:"shipmentType"`

	// storage facility
	StorageFacility *StorageFacility `json:"storageFacility,omitempty"`

	// tac type
	TacType *LOAType `json:"tacType,omitempty"`

	// uses external vendor
	// Example: false
	UsesExternalVendor *bool `json:"usesExternalVendor,omitempty"`
}

// Validate validates this create m t o shipment
func (m *CreateMTOShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveTaskOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoServiceItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpmShipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSacType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageFacility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTacType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMTOShipment) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	if err := m.Agents.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *CreateMTOShipment) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	return nil
}

func (m *CreateMTOShipment) validateDestinationType(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationType) { // not required
		return nil
	}

	if m.DestinationType != nil {
		if err := m.DestinationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationType")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMTOShipment) validateMoveTaskOrderID(formats strfmt.Registry) error {

	if err := validate.Required("moveTaskOrderID", "body", m.MoveTaskOrderID); err != nil {
		return err
	}

	if err := validate.FormatOf("moveTaskOrderID", "body", "uuid", m.MoveTaskOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateMTOShipment) validateMtoServiceItems(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoServiceItems) { // not required
		return nil
	}

	if err := m.MtoServiceItems.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mtoServiceItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mtoServiceItems")
		}
		return err
	}

	return nil
}

func (m *CreateMTOShipment) validatePickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupAddress) { // not required
		return nil
	}

	return nil
}

func (m *CreateMTOShipment) validatePpmShipment(formats strfmt.Registry) error {
	if swag.IsZero(m.PpmShipment) { // not required
		return nil
	}

	if m.PpmShipment != nil {
		if err := m.PpmShipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppmShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppmShipment")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMTOShipment) validateRequestedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedDeliveryDate", "body", "date", m.RequestedDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateMTOShipment) validateRequestedPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedPickupDate", "body", "date", m.RequestedPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateMTOShipment) validateSacType(formats strfmt.Registry) error {
	if swag.IsZero(m.SacType) { // not required
		return nil
	}

	if m.SacType != nil {
		if err := m.SacType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sacType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sacType")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMTOShipment) validateShipmentType(formats strfmt.Registry) error {

	if err := validate.Required("shipmentType", "body", m.ShipmentType); err != nil {
		return err
	}

	if err := validate.Required("shipmentType", "body", m.ShipmentType); err != nil {
		return err
	}

	if m.ShipmentType != nil {
		if err := m.ShipmentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentType")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMTOShipment) validateStorageFacility(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageFacility) { // not required
		return nil
	}

	if m.StorageFacility != nil {
		if err := m.StorageFacility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageFacility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageFacility")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMTOShipment) validateTacType(formats strfmt.Registry) error {
	if swag.IsZero(m.TacType) { // not required
		return nil
	}

	if m.TacType != nil {
		if err := m.TacType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tacType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tacType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create m t o shipment based on the context it is used
func (m *CreateMTOShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtoServiceItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePpmShipment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSacType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageFacility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTacType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMTOShipment) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Agents.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *CreateMTOShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CreateMTOShipment) contextValidateDestinationType(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationType != nil {

		if swag.IsZero(m.DestinationType) { // not required
			return nil
		}

		if err := m.DestinationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationType")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMTOShipment) contextValidateMtoServiceItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MtoServiceItems.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mtoServiceItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mtoServiceItems")
		}
		return err
	}

	return nil
}

func (m *CreateMTOShipment) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CreateMTOShipment) contextValidatePpmShipment(ctx context.Context, formats strfmt.Registry) error {

	if m.PpmShipment != nil {

		if swag.IsZero(m.PpmShipment) { // not required
			return nil
		}

		if err := m.PpmShipment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppmShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppmShipment")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMTOShipment) contextValidateSacType(ctx context.Context, formats strfmt.Registry) error {

	if m.SacType != nil {

		if swag.IsZero(m.SacType) { // not required
			return nil
		}

		if err := m.SacType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sacType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sacType")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMTOShipment) contextValidateShipmentType(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentType != nil {

		if err := m.ShipmentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentType")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMTOShipment) contextValidateStorageFacility(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageFacility != nil {

		if swag.IsZero(m.StorageFacility) { // not required
			return nil
		}

		if err := m.StorageFacility.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageFacility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageFacility")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMTOShipment) contextValidateTacType(ctx context.Context, formats strfmt.Registry) error {

	if m.TacType != nil {

		if swag.IsZero(m.TacType) { // not required
			return nil
		}

		if err := m.TacType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tacType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tacType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMTOShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMTOShipment) UnmarshalBinary(b []byte) error {
	var res CreateMTOShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
