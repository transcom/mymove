// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMTOShipment create m t o shipment
//
// swagger:model CreateMTOShipment
type CreateMTOShipment struct {

	// agents
	Agents MTOAgents `json:"agents,omitempty"`

	// The counselor can use the counselor remarks field to inform the movers about any
	// special circumstances for this shipment. Typical examples:
	//   * bulky or fragile items,
	//   * weapons,
	//   * access info for their address.
	//
	// Counselors enters this information when creating or editing an MTO Shipment. Optional field.
	//
	// Example: handle with care
	CounselorRemarks *string `json:"counselorRemarks,omitempty"`

	// The customer can use the customer remarks field to inform the services counselor and the movers about any
	// special circumstances for this shipment. Typical examples:
	//   * bulky or fragile items,
	//   * weapons,
	//   * access info for their address.
	//
	// Customer enters this information during onboarding. Optional field.
	//
	// Example: handle with care
	CustomerRemarks *string `json:"customerRemarks,omitempty"`

	// Where the movers should deliver this shipment.
	// Required: true
	DestinationAddress struct {
		Address
	} `json:"destinationAddress"`

	// The ID of the move this new shipment is for.
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	MoveTaskOrderID *strfmt.UUID `json:"moveTaskOrderID"`

	// A list of service items connected to this shipment.
	MtoServiceItems []*MTOServiceItem `json:"mtoServiceItems"`

	// The address where the movers should pick up this shipment.
	// Required: true
	PickupAddress struct {
		Address
	} `json:"pickupAddress"`

	// The customer's preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.
	//
	// Required: true
	// Format: date
	RequestedPickupDate *strfmt.Date `json:"requestedPickupDate"`
}

// Validate validates this create m t o shipment
func (m *CreateMTOShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveTaskOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoServiceItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMTOShipment) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	if err := m.Agents.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *CreateMTOShipment) validateDestinationAddress(formats strfmt.Registry) error {

	return nil
}

func (m *CreateMTOShipment) validateMoveTaskOrderID(formats strfmt.Registry) error {

	if err := validate.Required("moveTaskOrderID", "body", m.MoveTaskOrderID); err != nil {
		return err
	}

	if err := validate.FormatOf("moveTaskOrderID", "body", "uuid", m.MoveTaskOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateMTOShipment) validateMtoServiceItems(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoServiceItems) { // not required
		return nil
	}

	for i := 0; i < len(m.MtoServiceItems); i++ {
		if swag.IsZero(m.MtoServiceItems[i]) { // not required
			continue
		}

		if m.MtoServiceItems[i] != nil {
			if err := m.MtoServiceItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mtoServiceItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateMTOShipment) validatePickupAddress(formats strfmt.Registry) error {

	return nil
}

func (m *CreateMTOShipment) validateRequestedPickupDate(formats strfmt.Registry) error {

	if err := validate.Required("requestedPickupDate", "body", m.RequestedPickupDate); err != nil {
		return err
	}

	if err := validate.FormatOf("requestedPickupDate", "body", "date", m.RequestedPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create m t o shipment based on the context it is used
func (m *CreateMTOShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtoServiceItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMTOShipment) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Agents.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *CreateMTOShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CreateMTOShipment) contextValidateMtoServiceItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MtoServiceItems); i++ {

		if m.MtoServiceItems[i] != nil {
			if err := m.MtoServiceItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mtoServiceItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateMTOShipment) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMTOShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMTOShipment) UnmarshalBinary(b []byte) error {
	var res CreateMTOShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
