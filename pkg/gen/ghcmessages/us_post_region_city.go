// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UsPostRegionCity A postal code and city lookup
//
// swagger:model UsPostRegionCity
type UsPostRegionCity struct {

	// City
	// Example: Anytown
	City string `json:"city,omitempty"`

	// County
	// Example: LOS ANGELES
	County *string `json:"county,omitempty"`

	// ZIP
	// Example: 90210
	// Pattern: ^(\d{5}([\-]\d{4})?)$
	PostalCode string `json:"postalCode,omitempty"`

	// State
	// Enum: [AL AK AR AZ CA CO CT DC DE FL GA HI IA ID IL IN KS KY LA MA MD ME MI MN MO MS MT NC ND NE NH NJ NM NV NY OH OK OR PA RI SC SD TN TX UT VA VT WA WI WV WY]
	State string `json:"state,omitempty"`
}

// Validate validates this us post region city
func (m *UsPostRegionCity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UsPostRegionCity) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("postalCode", "body", m.PostalCode, `^(\d{5}([\-]\d{4})?)$`); err != nil {
		return err
	}

	return nil
}

var usPostRegionCityTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AL","AK","AR","AZ","CA","CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		usPostRegionCityTypeStatePropEnum = append(usPostRegionCityTypeStatePropEnum, v)
	}
}

const (

	// UsPostRegionCityStateAL captures enum value "AL"
	UsPostRegionCityStateAL string = "AL"

	// UsPostRegionCityStateAK captures enum value "AK"
	UsPostRegionCityStateAK string = "AK"

	// UsPostRegionCityStateAR captures enum value "AR"
	UsPostRegionCityStateAR string = "AR"

	// UsPostRegionCityStateAZ captures enum value "AZ"
	UsPostRegionCityStateAZ string = "AZ"

	// UsPostRegionCityStateCA captures enum value "CA"
	UsPostRegionCityStateCA string = "CA"

	// UsPostRegionCityStateCO captures enum value "CO"
	UsPostRegionCityStateCO string = "CO"

	// UsPostRegionCityStateCT captures enum value "CT"
	UsPostRegionCityStateCT string = "CT"

	// UsPostRegionCityStateDC captures enum value "DC"
	UsPostRegionCityStateDC string = "DC"

	// UsPostRegionCityStateDE captures enum value "DE"
	UsPostRegionCityStateDE string = "DE"

	// UsPostRegionCityStateFL captures enum value "FL"
	UsPostRegionCityStateFL string = "FL"

	// UsPostRegionCityStateGA captures enum value "GA"
	UsPostRegionCityStateGA string = "GA"

	// UsPostRegionCityStateHI captures enum value "HI"
	UsPostRegionCityStateHI string = "HI"

	// UsPostRegionCityStateIA captures enum value "IA"
	UsPostRegionCityStateIA string = "IA"

	// UsPostRegionCityStateID captures enum value "ID"
	UsPostRegionCityStateID string = "ID"

	// UsPostRegionCityStateIL captures enum value "IL"
	UsPostRegionCityStateIL string = "IL"

	// UsPostRegionCityStateIN captures enum value "IN"
	UsPostRegionCityStateIN string = "IN"

	// UsPostRegionCityStateKS captures enum value "KS"
	UsPostRegionCityStateKS string = "KS"

	// UsPostRegionCityStateKY captures enum value "KY"
	UsPostRegionCityStateKY string = "KY"

	// UsPostRegionCityStateLA captures enum value "LA"
	UsPostRegionCityStateLA string = "LA"

	// UsPostRegionCityStateMA captures enum value "MA"
	UsPostRegionCityStateMA string = "MA"

	// UsPostRegionCityStateMD captures enum value "MD"
	UsPostRegionCityStateMD string = "MD"

	// UsPostRegionCityStateME captures enum value "ME"
	UsPostRegionCityStateME string = "ME"

	// UsPostRegionCityStateMI captures enum value "MI"
	UsPostRegionCityStateMI string = "MI"

	// UsPostRegionCityStateMN captures enum value "MN"
	UsPostRegionCityStateMN string = "MN"

	// UsPostRegionCityStateMO captures enum value "MO"
	UsPostRegionCityStateMO string = "MO"

	// UsPostRegionCityStateMS captures enum value "MS"
	UsPostRegionCityStateMS string = "MS"

	// UsPostRegionCityStateMT captures enum value "MT"
	UsPostRegionCityStateMT string = "MT"

	// UsPostRegionCityStateNC captures enum value "NC"
	UsPostRegionCityStateNC string = "NC"

	// UsPostRegionCityStateND captures enum value "ND"
	UsPostRegionCityStateND string = "ND"

	// UsPostRegionCityStateNE captures enum value "NE"
	UsPostRegionCityStateNE string = "NE"

	// UsPostRegionCityStateNH captures enum value "NH"
	UsPostRegionCityStateNH string = "NH"

	// UsPostRegionCityStateNJ captures enum value "NJ"
	UsPostRegionCityStateNJ string = "NJ"

	// UsPostRegionCityStateNM captures enum value "NM"
	UsPostRegionCityStateNM string = "NM"

	// UsPostRegionCityStateNV captures enum value "NV"
	UsPostRegionCityStateNV string = "NV"

	// UsPostRegionCityStateNY captures enum value "NY"
	UsPostRegionCityStateNY string = "NY"

	// UsPostRegionCityStateOH captures enum value "OH"
	UsPostRegionCityStateOH string = "OH"

	// UsPostRegionCityStateOK captures enum value "OK"
	UsPostRegionCityStateOK string = "OK"

	// UsPostRegionCityStateOR captures enum value "OR"
	UsPostRegionCityStateOR string = "OR"

	// UsPostRegionCityStatePA captures enum value "PA"
	UsPostRegionCityStatePA string = "PA"

	// UsPostRegionCityStateRI captures enum value "RI"
	UsPostRegionCityStateRI string = "RI"

	// UsPostRegionCityStateSC captures enum value "SC"
	UsPostRegionCityStateSC string = "SC"

	// UsPostRegionCityStateSD captures enum value "SD"
	UsPostRegionCityStateSD string = "SD"

	// UsPostRegionCityStateTN captures enum value "TN"
	UsPostRegionCityStateTN string = "TN"

	// UsPostRegionCityStateTX captures enum value "TX"
	UsPostRegionCityStateTX string = "TX"

	// UsPostRegionCityStateUT captures enum value "UT"
	UsPostRegionCityStateUT string = "UT"

	// UsPostRegionCityStateVA captures enum value "VA"
	UsPostRegionCityStateVA string = "VA"

	// UsPostRegionCityStateVT captures enum value "VT"
	UsPostRegionCityStateVT string = "VT"

	// UsPostRegionCityStateWA captures enum value "WA"
	UsPostRegionCityStateWA string = "WA"

	// UsPostRegionCityStateWI captures enum value "WI"
	UsPostRegionCityStateWI string = "WI"

	// UsPostRegionCityStateWV captures enum value "WV"
	UsPostRegionCityStateWV string = "WV"

	// UsPostRegionCityStateWY captures enum value "WY"
	UsPostRegionCityStateWY string = "WY"
)

// prop value enum
func (m *UsPostRegionCity) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, usPostRegionCityTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UsPostRegionCity) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this us post region city based on context it is used
func (m *UsPostRegionCity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UsPostRegionCity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UsPostRegionCity) UnmarshalBinary(b []byte) error {
	var res UsPostRegionCity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
