// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PPMType PPM Type
//
// # Defines a PPM type
//
// swagger:model PPMType
type PPMType string

func NewPPMType(value PPMType) *PPMType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PPMType.
func (m PPMType) Pointer() *PPMType {
	return &m
}

const (

	// PPMTypeINCENTIVEBASED captures enum value "INCENTIVE_BASED"
	PPMTypeINCENTIVEBASED PPMType = "INCENTIVE_BASED"

	// PPMTypeACTUALEXPENSE captures enum value "ACTUAL_EXPENSE"
	PPMTypeACTUALEXPENSE PPMType = "ACTUAL_EXPENSE"

	// PPMTypeSMALLPACKAGE captures enum value "SMALL_PACKAGE"
	PPMTypeSMALLPACKAGE PPMType = "SMALL_PACKAGE"
)

// for schema
var pPMTypeEnum []interface{}

func init() {
	var res []PPMType
	if err := json.Unmarshal([]byte(`["INCENTIVE_BASED","ACTUAL_EXPENSE","SMALL_PACKAGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pPMTypeEnum = append(pPMTypeEnum, v)
	}
}

func (m PPMType) validatePPMTypeEnum(path, location string, value PPMType) error {
	if err := validate.EnumCase(path, location, value, pPMTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this p p m type
func (m PPMType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePPMTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this p p m type based on context it is used
func (m PPMType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
