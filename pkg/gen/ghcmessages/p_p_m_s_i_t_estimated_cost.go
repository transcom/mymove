// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PPMSITEstimatedCost The estimated cost of SIT for a single PPM shipment. Used during document review for PPM.
//
// swagger:model PPMSITEstimatedCost
type PPMSITEstimatedCost struct {

	// params additional day s i t
	ParamsAdditionalDaySIT *PPMSITEstimatedCostParamsAdditionalDaySIT `json:"paramsAdditionalDaySIT,omitempty"`

	// params first day s i t
	ParamsFirstDaySIT *PPMSITEstimatedCostParamsFirstDaySIT `json:"paramsFirstDaySIT,omitempty"`

	// Price of an additional day in SIT
	// Example: 2000
	// Required: true
	PriceAdditionalDaySIT *int64 `json:"priceAdditionalDaySIT"`

	// Price of the first day in SIT
	// Example: 2000
	// Required: true
	PriceFirstDaySIT *int64 `json:"priceFirstDaySIT"`

	// sit cost
	// Example: 2000
	// Required: true
	SitCost *int64 `json:"sitCost"`
}

// Validate validates this p p m s i t estimated cost
func (m *PPMSITEstimatedCost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParamsAdditionalDaySIT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParamsFirstDaySIT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceAdditionalDaySIT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceFirstDaySIT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitCost(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPMSITEstimatedCost) validateParamsAdditionalDaySIT(formats strfmt.Registry) error {
	if swag.IsZero(m.ParamsAdditionalDaySIT) { // not required
		return nil
	}

	if m.ParamsAdditionalDaySIT != nil {
		if err := m.ParamsAdditionalDaySIT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paramsAdditionalDaySIT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paramsAdditionalDaySIT")
			}
			return err
		}
	}

	return nil
}

func (m *PPMSITEstimatedCost) validateParamsFirstDaySIT(formats strfmt.Registry) error {
	if swag.IsZero(m.ParamsFirstDaySIT) { // not required
		return nil
	}

	if m.ParamsFirstDaySIT != nil {
		if err := m.ParamsFirstDaySIT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paramsFirstDaySIT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paramsFirstDaySIT")
			}
			return err
		}
	}

	return nil
}

func (m *PPMSITEstimatedCost) validatePriceAdditionalDaySIT(formats strfmt.Registry) error {

	if err := validate.Required("priceAdditionalDaySIT", "body", m.PriceAdditionalDaySIT); err != nil {
		return err
	}

	return nil
}

func (m *PPMSITEstimatedCost) validatePriceFirstDaySIT(formats strfmt.Registry) error {

	if err := validate.Required("priceFirstDaySIT", "body", m.PriceFirstDaySIT); err != nil {
		return err
	}

	return nil
}

func (m *PPMSITEstimatedCost) validateSitCost(formats strfmt.Registry) error {

	if err := validate.Required("sitCost", "body", m.SitCost); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p p m s i t estimated cost based on the context it is used
func (m *PPMSITEstimatedCost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParamsAdditionalDaySIT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParamsFirstDaySIT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPMSITEstimatedCost) contextValidateParamsAdditionalDaySIT(ctx context.Context, formats strfmt.Registry) error {

	if m.ParamsAdditionalDaySIT != nil {

		if swag.IsZero(m.ParamsAdditionalDaySIT) { // not required
			return nil
		}

		if err := m.ParamsAdditionalDaySIT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paramsAdditionalDaySIT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paramsAdditionalDaySIT")
			}
			return err
		}
	}

	return nil
}

func (m *PPMSITEstimatedCost) contextValidateParamsFirstDaySIT(ctx context.Context, formats strfmt.Registry) error {

	if m.ParamsFirstDaySIT != nil {

		if swag.IsZero(m.ParamsFirstDaySIT) { // not required
			return nil
		}

		if err := m.ParamsFirstDaySIT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paramsFirstDaySIT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paramsFirstDaySIT")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PPMSITEstimatedCost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PPMSITEstimatedCost) UnmarshalBinary(b []byte) error {
	var res PPMSITEstimatedCost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PPMSITEstimatedCostParamsAdditionalDaySIT p p m s i t estimated cost params additional day s i t
//
// swagger:model PPMSITEstimatedCostParamsAdditionalDaySIT
type PPMSITEstimatedCostParamsAdditionalDaySIT struct {

	// contract year name
	// Example: Award Term 1
	ContractYearName string `json:"contractYearName,omitempty"`

	// escalation compounded
	// Example: 1.01
	EscalationCompounded string `json:"escalationCompounded,omitempty"`

	// is peak
	// Example: true
	IsPeak string `json:"isPeak,omitempty"`

	// number days s i t
	// Example: 30
	NumberDaysSIT *string `json:"numberDaysSIT,omitempty"`

	// price rate or factor
	// Example: 0.53
	PriceRateOrFactor string `json:"priceRateOrFactor,omitempty"`

	// service area destination
	// Example: 252
	ServiceAreaDestination *string `json:"serviceAreaDestination,omitempty"`

	// service area origin
	// Example: 252
	ServiceAreaOrigin *string `json:"serviceAreaOrigin,omitempty"`
}

// Validate validates this p p m s i t estimated cost params additional day s i t
func (m *PPMSITEstimatedCostParamsAdditionalDaySIT) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this p p m s i t estimated cost params additional day s i t based on context it is used
func (m *PPMSITEstimatedCostParamsAdditionalDaySIT) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PPMSITEstimatedCostParamsAdditionalDaySIT) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PPMSITEstimatedCostParamsAdditionalDaySIT) UnmarshalBinary(b []byte) error {
	var res PPMSITEstimatedCostParamsAdditionalDaySIT
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PPMSITEstimatedCostParamsFirstDaySIT p p m s i t estimated cost params first day s i t
//
// swagger:model PPMSITEstimatedCostParamsFirstDaySIT
type PPMSITEstimatedCostParamsFirstDaySIT struct {

	// contract year name
	// Example: Award Term 1
	ContractYearName string `json:"contractYearName,omitempty"`

	// escalation compounded
	// Example: 1.01
	EscalationCompounded string `json:"escalationCompounded,omitempty"`

	// is peak
	// Example: true
	IsPeak string `json:"isPeak,omitempty"`

	// price rate or factor
	// Example: 20.53
	PriceRateOrFactor string `json:"priceRateOrFactor,omitempty"`

	// service area destination
	// Example: 252
	ServiceAreaDestination *string `json:"serviceAreaDestination,omitempty"`

	// service area origin
	// Example: 252
	ServiceAreaOrigin *string `json:"serviceAreaOrigin,omitempty"`
}

// Validate validates this p p m s i t estimated cost params first day s i t
func (m *PPMSITEstimatedCostParamsFirstDaySIT) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this p p m s i t estimated cost params first day s i t based on context it is used
func (m *PPMSITEstimatedCostParamsFirstDaySIT) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PPMSITEstimatedCostParamsFirstDaySIT) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PPMSITEstimatedCostParamsFirstDaySIT) UnmarshalBinary(b []byte) error {
	var res PPMSITEstimatedCostParamsFirstDaySIT
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
