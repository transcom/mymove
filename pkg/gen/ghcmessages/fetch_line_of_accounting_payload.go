// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FetchLineOfAccountingPayload fetch line of accounting payload
//
// swagger:model FetchLineOfAccountingPayload
type FetchLineOfAccountingPayload struct {

	// orders issue date
	// Example: 2023-01-01
	// Format: date
	OrdersIssueDate strfmt.Date `json:"ordersIssueDate,omitempty"`

	// service member affiliation
	ServiceMemberAffiliation *Affiliation `json:"serviceMemberAffiliation,omitempty"`

	// tac code
	// Example: F8J1
	// Max Length: 4
	// Min Length: 4
	TacCode string `json:"tacCode,omitempty"`
}

// Validate validates this fetch line of accounting payload
func (m *FetchLineOfAccountingPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrdersIssueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMemberAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTacCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FetchLineOfAccountingPayload) validateOrdersIssueDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdersIssueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ordersIssueDate", "body", "date", m.OrdersIssueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FetchLineOfAccountingPayload) validateServiceMemberAffiliation(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceMemberAffiliation) { // not required
		return nil
	}

	if m.ServiceMemberAffiliation != nil {
		if err := m.ServiceMemberAffiliation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceMemberAffiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceMemberAffiliation")
			}
			return err
		}
	}

	return nil
}

func (m *FetchLineOfAccountingPayload) validateTacCode(formats strfmt.Registry) error {
	if swag.IsZero(m.TacCode) { // not required
		return nil
	}

	if err := validate.MinLength("tacCode", "body", m.TacCode, 4); err != nil {
		return err
	}

	if err := validate.MaxLength("tacCode", "body", m.TacCode, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fetch line of accounting payload based on the context it is used
func (m *FetchLineOfAccountingPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceMemberAffiliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FetchLineOfAccountingPayload) contextValidateServiceMemberAffiliation(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceMemberAffiliation != nil {

		if swag.IsZero(m.ServiceMemberAffiliation) { // not required
			return nil
		}

		if err := m.ServiceMemberAffiliation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceMemberAffiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceMemberAffiliation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FetchLineOfAccountingPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FetchLineOfAccountingPayload) UnmarshalBinary(b []byte) error {
	var res FetchLineOfAccountingPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
