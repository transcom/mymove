// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MoveHistoryResult move history result
//
// swagger:model MoveHistoryResult
type MoveHistoryResult struct {

	// A list of MoveAuditHistory's connected to the move.
	HistoryRecords MoveAuditHistories `json:"historyRecords,omitempty"`

	// move ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// move locator
	// Example: 1K43AR
	Locator string `json:"locator,omitempty"`

	// page
	Page int64 `json:"page,omitempty"`

	// per page
	PerPage int64 `json:"perPage,omitempty"`

	// move referenceID
	// Example: 1001-3456
	ReferenceID *string `json:"referenceId,omitempty"`

	// total count
	TotalCount int64 `json:"totalCount,omitempty"`
}

// Validate validates this move history result
func (m *MoveHistoryResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHistoryRecords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoveHistoryResult) validateHistoryRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.HistoryRecords) { // not required
		return nil
	}

	if err := m.HistoryRecords.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("historyRecords")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("historyRecords")
		}
		return err
	}

	return nil
}

func (m *MoveHistoryResult) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this move history result based on the context it is used
func (m *MoveHistoryResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHistoryRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoveHistoryResult) contextValidateHistoryRecords(ctx context.Context, formats strfmt.Registry) error {

	if err := m.HistoryRecords.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("historyRecords")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("historyRecords")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MoveHistoryResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MoveHistoryResult) UnmarshalBinary(b []byte) error {
	var res MoveHistoryResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
