// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CounselingQueueMovesResult counseling queue moves result
//
// swagger:model CounselingQueueMovesResult
type CounselingQueueMovesResult struct {

	// page
	Page int64 `json:"page,omitempty"`

	// per page
	PerPage int64 `json:"perPage,omitempty"`

	// queue moves
	QueueMoves CounselingQueueMoves `json:"queueMoves,omitempty"`

	// total count
	TotalCount int64 `json:"totalCount,omitempty"`
}

// Validate validates this counseling queue moves result
func (m *CounselingQueueMovesResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQueueMoves(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CounselingQueueMovesResult) validateQueueMoves(formats strfmt.Registry) error {
	if swag.IsZero(m.QueueMoves) { // not required
		return nil
	}

	if err := m.QueueMoves.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("queueMoves")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("queueMoves")
		}
		return err
	}

	return nil
}

// ContextValidate validate this counseling queue moves result based on the context it is used
func (m *CounselingQueueMovesResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQueueMoves(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CounselingQueueMovesResult) contextValidateQueueMoves(ctx context.Context, formats strfmt.Registry) error {

	if err := m.QueueMoves.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("queueMoves")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("queueMoves")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CounselingQueueMovesResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CounselingQueueMovesResult) UnmarshalBinary(b []byte) error {
	var res CounselingQueueMovesResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
