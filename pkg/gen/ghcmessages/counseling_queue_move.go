// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CounselingQueueMove counseling queue move
//
// swagger:model CounselingQueueMove
type CounselingQueueMove struct {

	// appeared in too at
	// Format: date-time
	AppearedInTooAt *strfmt.DateTime `json:"appearedInTooAt,omitempty"`

	// approval request types
	ApprovalRequestTypes []string `json:"approvalRequestTypes"`

	// assignable
	Assignable bool `json:"assignable,omitempty"`

	// assigned to
	AssignedTo *AssignedOfficeUser `json:"assignedTo,omitempty"`

	// available office users
	AvailableOfficeUsers AvailableOfficeUsers `json:"availableOfficeUsers,omitempty"`

	// counseling office
	CounselingOffice *string `json:"counselingOffice,omitempty"`

	// counseling office ID
	// Format: uuid
	CounselingOfficeID *strfmt.UUID `json:"counselingOfficeID,omitempty"`

	// customer
	Customer *Customer `json:"customer,omitempty"`

	// department indicator
	DepartmentIndicator *DeptIndicator `json:"departmentIndicator,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// locator
	Locator string `json:"locator,omitempty"`

	// lock expires at
	// Format: date-time
	LockExpiresAt *strfmt.DateTime `json:"lockExpiresAt,omitempty"`

	// locked by office user
	LockedByOfficeUser *LockedOfficeUser `json:"lockedByOfficeUser,omitempty"`

	// locked by office user ID
	// Format: uuid
	LockedByOfficeUserID *strfmt.UUID `json:"lockedByOfficeUserID,omitempty"`

	// order type
	OrderType *string `json:"orderType,omitempty"`

	// origin duty location
	OriginDutyLocation *DutyLocation `json:"originDutyLocation,omitempty"`

	// origin g b l o c
	OriginGBLOC GBLOC `json:"originGBLOC,omitempty"`

	// requested move date
	// Format: date
	RequestedMoveDate *strfmt.Date `json:"requestedMoveDate,omitempty"`

	// shipments count
	ShipmentsCount int64 `json:"shipmentsCount,omitempty"`

	// status
	Status MoveStatus `json:"status,omitempty"`

	// submitted at
	// Format: date-time
	SubmittedAt *strfmt.DateTime `json:"submittedAt,omitempty"`
}

// Validate validates this counseling queue move
func (m *CounselingQueueMove) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppearedInTooAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignedTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableOfficeUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounselingOfficeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartmentIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedByOfficeUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedByOfficeUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginDutyLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginGBLOC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CounselingQueueMove) validateAppearedInTooAt(formats strfmt.Registry) error {
	if swag.IsZero(m.AppearedInTooAt) { // not required
		return nil
	}

	if err := validate.FormatOf("appearedInTooAt", "body", "date-time", m.AppearedInTooAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CounselingQueueMove) validateAssignedTo(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignedTo) { // not required
		return nil
	}

	if m.AssignedTo != nil {
		if err := m.AssignedTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignedTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assignedTo")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingQueueMove) validateAvailableOfficeUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableOfficeUsers) { // not required
		return nil
	}

	if err := m.AvailableOfficeUsers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("availableOfficeUsers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("availableOfficeUsers")
		}
		return err
	}

	return nil
}

func (m *CounselingQueueMove) validateCounselingOfficeID(formats strfmt.Registry) error {
	if swag.IsZero(m.CounselingOfficeID) { // not required
		return nil
	}

	if err := validate.FormatOf("counselingOfficeID", "body", "uuid", m.CounselingOfficeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CounselingQueueMove) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingQueueMove) validateDepartmentIndicator(formats strfmt.Registry) error {
	if swag.IsZero(m.DepartmentIndicator) { // not required
		return nil
	}

	if m.DepartmentIndicator != nil {
		if err := m.DepartmentIndicator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("departmentIndicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("departmentIndicator")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingQueueMove) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CounselingQueueMove) validateLockExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LockExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("lockExpiresAt", "body", "date-time", m.LockExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CounselingQueueMove) validateLockedByOfficeUser(formats strfmt.Registry) error {
	if swag.IsZero(m.LockedByOfficeUser) { // not required
		return nil
	}

	if m.LockedByOfficeUser != nil {
		if err := m.LockedByOfficeUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lockedByOfficeUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lockedByOfficeUser")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingQueueMove) validateLockedByOfficeUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.LockedByOfficeUserID) { // not required
		return nil
	}

	if err := validate.FormatOf("lockedByOfficeUserID", "body", "uuid", m.LockedByOfficeUserID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CounselingQueueMove) validateOriginDutyLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginDutyLocation) { // not required
		return nil
	}

	if m.OriginDutyLocation != nil {
		if err := m.OriginDutyLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originDutyLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originDutyLocation")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingQueueMove) validateOriginGBLOC(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginGBLOC) { // not required
		return nil
	}

	if err := m.OriginGBLOC.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("originGBLOC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("originGBLOC")
		}
		return err
	}

	return nil
}

func (m *CounselingQueueMove) validateRequestedMoveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedMoveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedMoveDate", "body", "date", m.RequestedMoveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CounselingQueueMove) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *CounselingQueueMove) validateSubmittedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmittedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submittedAt", "body", "date-time", m.SubmittedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this counseling queue move based on the context it is used
func (m *CounselingQueueMove) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssignedTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailableOfficeUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDepartmentIndicator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLockedByOfficeUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginDutyLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginGBLOC(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CounselingQueueMove) contextValidateAssignedTo(ctx context.Context, formats strfmt.Registry) error {

	if m.AssignedTo != nil {

		if swag.IsZero(m.AssignedTo) { // not required
			return nil
		}

		if err := m.AssignedTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignedTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assignedTo")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingQueueMove) contextValidateAvailableOfficeUsers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AvailableOfficeUsers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("availableOfficeUsers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("availableOfficeUsers")
		}
		return err
	}

	return nil
}

func (m *CounselingQueueMove) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if m.Customer != nil {

		if swag.IsZero(m.Customer) { // not required
			return nil
		}

		if err := m.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingQueueMove) contextValidateDepartmentIndicator(ctx context.Context, formats strfmt.Registry) error {

	if m.DepartmentIndicator != nil {

		if swag.IsZero(m.DepartmentIndicator) { // not required
			return nil
		}

		if err := m.DepartmentIndicator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("departmentIndicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("departmentIndicator")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingQueueMove) contextValidateLockedByOfficeUser(ctx context.Context, formats strfmt.Registry) error {

	if m.LockedByOfficeUser != nil {

		if swag.IsZero(m.LockedByOfficeUser) { // not required
			return nil
		}

		if err := m.LockedByOfficeUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lockedByOfficeUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lockedByOfficeUser")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingQueueMove) contextValidateOriginDutyLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginDutyLocation != nil {

		if swag.IsZero(m.OriginDutyLocation) { // not required
			return nil
		}

		if err := m.OriginDutyLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originDutyLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originDutyLocation")
			}
			return err
		}
	}

	return nil
}

func (m *CounselingQueueMove) contextValidateOriginGBLOC(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.OriginGBLOC) { // not required
		return nil
	}

	if err := m.OriginGBLOC.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("originGBLOC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("originGBLOC")
		}
		return err
	}

	return nil
}

func (m *CounselingQueueMove) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CounselingQueueMove) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CounselingQueueMove) UnmarshalBinary(b []byte) error {
	var res CounselingQueueMove
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
