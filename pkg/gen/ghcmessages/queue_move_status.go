// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// QueueMoveStatus queue move status
// swagger:model QueueMoveStatus
type QueueMoveStatus string

const (

	// QueueMoveStatusNEW captures enum value "NEW"
	QueueMoveStatusNEW QueueMoveStatus = "NEW"

	// QueueMoveStatusAPPROVED captures enum value "APPROVED"
	QueueMoveStatusAPPROVED QueueMoveStatus = "APPROVED"

	// QueueMoveStatusAPPROVALSREQUESTED captures enum value "APPROVALS_REQUESTED"
	QueueMoveStatusAPPROVALSREQUESTED QueueMoveStatus = "APPROVALS_REQUESTED"
)

// for schema
var queueMoveStatusEnum []interface{}

func init() {
	var res []QueueMoveStatus
	if err := json.Unmarshal([]byte(`["NEW","APPROVED","APPROVALS_REQUESTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queueMoveStatusEnum = append(queueMoveStatusEnum, v)
	}
}

func (m QueueMoveStatus) validateQueueMoveStatusEnum(path, location string, value QueueMoveStatus) error {
	if err := validate.Enum(path, location, value, queueMoveStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this queue move status
func (m QueueMoveStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateQueueMoveStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
