// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SITLocationType The list of SIT location types.
//
// swagger:model SITLocationType
type SITLocationType string

func NewSITLocationType(value SITLocationType) *SITLocationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SITLocationType.
func (m SITLocationType) Pointer() *SITLocationType {
	return &m
}

const (

	// SITLocationTypeORIGIN captures enum value "ORIGIN"
	SITLocationTypeORIGIN SITLocationType = "ORIGIN"

	// SITLocationTypeDESTINATION captures enum value "DESTINATION"
	SITLocationTypeDESTINATION SITLocationType = "DESTINATION"
)

// for schema
var sITLocationTypeEnum []interface{}

func init() {
	var res []SITLocationType
	if err := json.Unmarshal([]byte(`["ORIGIN","DESTINATION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sITLocationTypeEnum = append(sITLocationTypeEnum, v)
	}
}

func (m SITLocationType) validateSITLocationTypeEnum(path, location string, value SITLocationType) error {
	if err := validate.EnumCase(path, location, value, sITLocationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this s i t location type
func (m SITLocationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSITLocationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this s i t location type based on context it is used
func (m SITLocationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
