// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportViolation An object associating violations to evaluation reports
//
// swagger:model ReportViolation
type ReportViolation struct {

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// report ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ReportID strfmt.UUID `json:"reportID,omitempty"`

	// violation
	Violation *PWSViolation `json:"violation,omitempty"`

	// violation ID
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ViolationID strfmt.UUID `json:"violationID,omitempty"`
}

// Validate validates this report violation
func (m *ReportViolation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViolation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViolationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportViolation) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportViolation) validateReportID(formats strfmt.Registry) error {
	if swag.IsZero(m.ReportID) { // not required
		return nil
	}

	if err := validate.FormatOf("reportID", "body", "uuid", m.ReportID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportViolation) validateViolation(formats strfmt.Registry) error {
	if swag.IsZero(m.Violation) { // not required
		return nil
	}

	if m.Violation != nil {
		if err := m.Violation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("violation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("violation")
			}
			return err
		}
	}

	return nil
}

func (m *ReportViolation) validateViolationID(formats strfmt.Registry) error {
	if swag.IsZero(m.ViolationID) { // not required
		return nil
	}

	if err := validate.FormatOf("violationID", "body", "uuid", m.ViolationID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this report violation based on the context it is used
func (m *ReportViolation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateViolation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportViolation) contextValidateViolation(ctx context.Context, formats strfmt.Registry) error {

	if m.Violation != nil {

		if swag.IsZero(m.Violation) { // not required
			return nil
		}

		if err := m.Violation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("violation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("violation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportViolation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportViolation) UnmarshalBinary(b []byte) error {
	var res ReportViolation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
