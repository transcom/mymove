// Code generated by go-swagger; DO NOT EDIT.

package ghcmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApproveSitExtension approve sit extension
//
// swagger:model ApproveSitExtension
type ApproveSitExtension struct {

	// Number of days approved for SIT extension
	// Example: 21
	// Required: true
	// Minimum: 1
	ApprovedDays *int64 `json:"approvedDays"`

	// Remarks from TOO about SIT approval
	// Example: Approved for three weeks rather than requested 45 days
	OfficeRemarks *string `json:"officeRemarks,omitempty"`
}

// Validate validates this approve sit extension
func (m *ApproveSitExtension) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovedDays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApproveSitExtension) validateApprovedDays(formats strfmt.Registry) error {

	if err := validate.Required("approvedDays", "body", m.ApprovedDays); err != nil {
		return err
	}

	if err := validate.MinimumInt("approvedDays", "body", *m.ApprovedDays, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this approve sit extension based on context it is used
func (m *ApproveSitExtension) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApproveSitExtension) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApproveSitExtension) UnmarshalBinary(b []byte) error {
	var res ApproveSitExtension
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
