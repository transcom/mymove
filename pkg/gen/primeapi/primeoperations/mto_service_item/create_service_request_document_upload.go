// Code generated by go-swagger; DO NOT EDIT.

package mto_service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateServiceRequestDocumentUploadHandlerFunc turns a function with the right signature into a create service request document upload handler
type CreateServiceRequestDocumentUploadHandlerFunc func(CreateServiceRequestDocumentUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateServiceRequestDocumentUploadHandlerFunc) Handle(params CreateServiceRequestDocumentUploadParams) middleware.Responder {
	return fn(params)
}

// CreateServiceRequestDocumentUploadHandler interface for that can handle valid create service request document upload params
type CreateServiceRequestDocumentUploadHandler interface {
	Handle(CreateServiceRequestDocumentUploadParams) middleware.Responder
}

// NewCreateServiceRequestDocumentUpload creates a new http.Handler for the create service request document upload operation
func NewCreateServiceRequestDocumentUpload(ctx *middleware.Context, handler CreateServiceRequestDocumentUploadHandler) *CreateServiceRequestDocumentUpload {
	return &CreateServiceRequestDocumentUpload{Context: ctx, Handler: handler}
}

/*
	CreateServiceRequestDocumentUpload swagger:route POST /mto-service-items/{mtoServiceItemID}/uploads mtoServiceItem createServiceRequestDocumentUpload

createServiceRequestDocumentUpload

### Functionality

This endpoint **uploads** a Service Request document for a
ServiceItem.

The ServiceItem should already exist.

ServiceItems are created with the
[createMTOServiceItem](#operation/createMTOServiceItem)
endpoint.
*/
type CreateServiceRequestDocumentUpload struct {
	Context *middleware.Context
	Handler CreateServiceRequestDocumentUploadHandler
}

func (o *CreateServiceRequestDocumentUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateServiceRequestDocumentUploadParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
