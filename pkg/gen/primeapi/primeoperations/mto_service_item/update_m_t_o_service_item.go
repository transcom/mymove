// Code generated by go-swagger; DO NOT EDIT.

package mto_service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateMTOServiceItemHandlerFunc turns a function with the right signature into a update m t o service item handler
type UpdateMTOServiceItemHandlerFunc func(UpdateMTOServiceItemParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMTOServiceItemHandlerFunc) Handle(params UpdateMTOServiceItemParams) middleware.Responder {
	return fn(params)
}

// UpdateMTOServiceItemHandler interface for that can handle valid update m t o service item params
type UpdateMTOServiceItemHandler interface {
	Handle(UpdateMTOServiceItemParams) middleware.Responder
}

// NewUpdateMTOServiceItem creates a new http.Handler for the update m t o service item operation
func NewUpdateMTOServiceItem(ctx *middleware.Context, handler UpdateMTOServiceItemHandler) *UpdateMTOServiceItem {
	return &UpdateMTOServiceItem{Context: ctx, Handler: handler}
}

/*
	UpdateMTOServiceItem swagger:route PATCH /mto-service-items/{mtoServiceItemID} mtoServiceItem updateMTOServiceItem

updateMTOServiceItem

Updates MTOServiceItems after creation. Not all service items or fields may be updated, please see details below.

This endpoint supports different body definitions. In the modelType field below, select the modelType corresponding

	to the service item you wish to update and the documentation will update with the new definition.

* Addresses: To update a destination service item's SIT destination final address, update the shipment delivery address.
For approved shipments, please use [updateShipmentDestinationAddress](#mtoShipment/updateShipmentDestinationAddress).
For shipments not yet approved, please use [updateMTOShipmentAddress](#mtoShipment/updateMTOShipmentAddress).

* SIT Service Items: Take note that when updating `sitCustomerContacted`, `sitDepartureDate`, or `sitRequestedDelivery`, we want
those to be updated on `DOASIT` (for origin SIT) and `DDASIT` (for destination SIT). If updating those values in other service
items, the office users will not have as much attention to those values.

To create a service item, please use [createMTOServiceItem](#mtoServiceItem/createMTOServiceItem)) endpoint.

* Resubmitting rejected SIT/Accessorial service items: This endpoint will handle the logic of changing the status of rejected SIT/Accessorial service items from
REJECTED to SUBMITTED. Please provide the `requestedApprovalsRequestedStatus: true` when resubmitting as this will give attention to the TOO to
review the resubmitted SIT/Accessorial service item. Another note, `updateReason` must have a different value than the current `reason` value on the service item.
If this value is not updated, then an error will be sent back.

The following SIT service items can be resubmitted following a rejection:
- DDASIT
- DDDSIT
- DDFSIT
- DOASIT
- DOPSIT
- DOFSIT
- DDSFSC
- DOSFSC
- IDASIT
- IDDSIT
- IDFSIT
- IOASIT
- IOPSIT
- IOFSIT
- IDSFSC
- IOSFSC

The following Accessorial service items can be resubmitted following a rejection:
- IOSHUT
- IDSHUT

At a MINIMUM, the payload for resubmitting a rejected SIT/Accessorial service item must look like this:
```json

	{
	  "reServiceCode": "DDFSIT",
	  "updateReason": "A reason that differs from the previous reason",
	  "modelType": "UpdateMTOServiceItemSIT",
	  "requestApprovalsRequestedStatus": true
	}

```

The following service items allow you to update the Port that the shipment will use:
- PODFSC (Port of Debarkation can be updated)
- POEFSC (Port of Embarkation can be updated)

At a MINIMUM, the payload for updating the port should contain the reServiceCode (PODFSC or POEFSC), modelType (UpdateMTOServiceItemInternationalPortFSC), portCode, and id for the service item.
Please see the example payload below:
```json

	{
	  "id": "1ed224b6-c65e-4616-b88e-8304d26c9562",
	  "modelType": "UpdateMTOServiceItemInternationalPortFSC",
	  "portCode": "SEA",
	  "reServiceCode": "POEFSC"
	}

```

The following crating/uncrating service items can be resubmitted following a rejection:
- ICRT
- IUCRT

At a MINIMUM, the payload for resubmitting a rejected crating/uncrating service item must look like this:
```json

	{
	  "item": {
	    "length": 10000,
	    "width": 10000,
	    "height": 10000
	  },
	  "crate": {
	    "length": 20000,
	    "width": 20000,
	    "height": 20000
	  },
	  "updateReason": "A reason that differs from the previous reason",
	  "modelType": "UpdateMTOServiceItemCrating",
	  "requestApprovalsRequestedStatus": true
	}

```
*/
type UpdateMTOServiceItem struct {
	Context *middleware.Context
	Handler UpdateMTOServiceItemHandler
}

func (o *UpdateMTOServiceItem) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateMTOServiceItemParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
