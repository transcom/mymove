// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	primemessages "github.com/transcom/mymove/pkg/gen/primemessages"
)

// UpdateMoveTaskOrderPostCounselingInformationHandlerFunc turns a function with the right signature into a update move task order post counseling information handler
type UpdateMoveTaskOrderPostCounselingInformationHandlerFunc func(UpdateMoveTaskOrderPostCounselingInformationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMoveTaskOrderPostCounselingInformationHandlerFunc) Handle(params UpdateMoveTaskOrderPostCounselingInformationParams) middleware.Responder {
	return fn(params)
}

// UpdateMoveTaskOrderPostCounselingInformationHandler interface for that can handle valid update move task order post counseling information params
type UpdateMoveTaskOrderPostCounselingInformationHandler interface {
	Handle(UpdateMoveTaskOrderPostCounselingInformationParams) middleware.Responder
}

// NewUpdateMoveTaskOrderPostCounselingInformation creates a new http.Handler for the update move task order post counseling information operation
func NewUpdateMoveTaskOrderPostCounselingInformation(ctx *middleware.Context, handler UpdateMoveTaskOrderPostCounselingInformationHandler) *UpdateMoveTaskOrderPostCounselingInformation {
	return &UpdateMoveTaskOrderPostCounselingInformation{Context: ctx, Handler: handler}
}

/*UpdateMoveTaskOrderPostCounselingInformation swagger:route PATCH /move-task-orders/{moveTaskOrderID}/post-counseling-info moveTaskOrder prime updateMoveTaskOrderPostCounselingInformation

Updates move task order's post counseling information

Updates move task order's post counseling information

*/
type UpdateMoveTaskOrderPostCounselingInformation struct {
	Context *middleware.Context
	Handler UpdateMoveTaskOrderPostCounselingInformationHandler
}

func (o *UpdateMoveTaskOrderPostCounselingInformation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateMoveTaskOrderPostCounselingInformationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateMoveTaskOrderPostCounselingInformationBody update move task order post counseling information body
// swagger:model UpdateMoveTaskOrderPostCounselingInformationBody
type UpdateMoveTaskOrderPostCounselingInformationBody struct {

	// ppm is included
	PpmIsIncluded bool `json:"ppm-is-included,omitempty"`

	// scheduled move date
	// Format: date
	ScheduledMoveDate strfmt.Date `json:"scheduled-move-date,omitempty"`

	// secondary delivery address
	SecondaryDeliveryAddress *primemessages.Address `json:"secondary-delivery-address,omitempty"`

	// secondary pickup address
	SecondaryPickupAddress *primemessages.Address `json:"secondary-pickup-address,omitempty"`
}

// Validate validates this update move task order post counseling information body
func (o *UpdateMoveTaskOrderPostCounselingInformationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateScheduledMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecondaryDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecondaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateMoveTaskOrderPostCounselingInformationBody) validateScheduledMoveDate(formats strfmt.Registry) error {

	if swag.IsZero(o.ScheduledMoveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"scheduled-move-date", "body", "date", o.ScheduledMoveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateMoveTaskOrderPostCounselingInformationBody) validateSecondaryDeliveryAddress(formats strfmt.Registry) error {

	if swag.IsZero(o.SecondaryDeliveryAddress) { // not required
		return nil
	}

	if o.SecondaryDeliveryAddress != nil {
		if err := o.SecondaryDeliveryAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "secondary-delivery-address")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateMoveTaskOrderPostCounselingInformationBody) validateSecondaryPickupAddress(formats strfmt.Registry) error {

	if swag.IsZero(o.SecondaryPickupAddress) { // not required
		return nil
	}

	if o.SecondaryPickupAddress != nil {
		if err := o.SecondaryPickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "secondary-pickup-address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateMoveTaskOrderPostCounselingInformationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateMoveTaskOrderPostCounselingInformationBody) UnmarshalBinary(b []byte) error {
	var res UpdateMoveTaskOrderPostCounselingInformationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
