// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	primemessages "github.com/transcom/mymove/pkg/gen/primemessages"
)

// GetPrimeEntitlementsOKCode is the HTTP code returned for type GetPrimeEntitlementsOK
const GetPrimeEntitlementsOKCode int = 200

/*GetPrimeEntitlementsOK Successfully retrieved entitlements

swagger:response getPrimeEntitlementsOK
*/
type GetPrimeEntitlementsOK struct {

	/*
	  In: Body
	*/
	Payload *primemessages.Entitlements `json:"body,omitempty"`
}

// NewGetPrimeEntitlementsOK creates GetPrimeEntitlementsOK with default headers values
func NewGetPrimeEntitlementsOK() *GetPrimeEntitlementsOK {

	return &GetPrimeEntitlementsOK{}
}

// WithPayload adds the payload to the get prime entitlements o k response
func (o *GetPrimeEntitlementsOK) WithPayload(payload *primemessages.Entitlements) *GetPrimeEntitlementsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get prime entitlements o k response
func (o *GetPrimeEntitlementsOK) SetPayload(payload *primemessages.Entitlements) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPrimeEntitlementsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPrimeEntitlementsBadRequestCode is the HTTP code returned for type GetPrimeEntitlementsBadRequest
const GetPrimeEntitlementsBadRequestCode int = 400

/*GetPrimeEntitlementsBadRequest The request payload is invalid

swagger:response getPrimeEntitlementsBadRequest
*/
type GetPrimeEntitlementsBadRequest struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetPrimeEntitlementsBadRequest creates GetPrimeEntitlementsBadRequest with default headers values
func NewGetPrimeEntitlementsBadRequest() *GetPrimeEntitlementsBadRequest {

	return &GetPrimeEntitlementsBadRequest{}
}

// WithPayload adds the payload to the get prime entitlements bad request response
func (o *GetPrimeEntitlementsBadRequest) WithPayload(payload interface{}) *GetPrimeEntitlementsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get prime entitlements bad request response
func (o *GetPrimeEntitlementsBadRequest) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPrimeEntitlementsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetPrimeEntitlementsUnauthorizedCode is the HTTP code returned for type GetPrimeEntitlementsUnauthorized
const GetPrimeEntitlementsUnauthorizedCode int = 401

/*GetPrimeEntitlementsUnauthorized The request was denied

swagger:response getPrimeEntitlementsUnauthorized
*/
type GetPrimeEntitlementsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetPrimeEntitlementsUnauthorized creates GetPrimeEntitlementsUnauthorized with default headers values
func NewGetPrimeEntitlementsUnauthorized() *GetPrimeEntitlementsUnauthorized {

	return &GetPrimeEntitlementsUnauthorized{}
}

// WithPayload adds the payload to the get prime entitlements unauthorized response
func (o *GetPrimeEntitlementsUnauthorized) WithPayload(payload interface{}) *GetPrimeEntitlementsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get prime entitlements unauthorized response
func (o *GetPrimeEntitlementsUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPrimeEntitlementsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetPrimeEntitlementsForbiddenCode is the HTTP code returned for type GetPrimeEntitlementsForbidden
const GetPrimeEntitlementsForbiddenCode int = 403

/*GetPrimeEntitlementsForbidden The request was denied

swagger:response getPrimeEntitlementsForbidden
*/
type GetPrimeEntitlementsForbidden struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetPrimeEntitlementsForbidden creates GetPrimeEntitlementsForbidden with default headers values
func NewGetPrimeEntitlementsForbidden() *GetPrimeEntitlementsForbidden {

	return &GetPrimeEntitlementsForbidden{}
}

// WithPayload adds the payload to the get prime entitlements forbidden response
func (o *GetPrimeEntitlementsForbidden) WithPayload(payload interface{}) *GetPrimeEntitlementsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get prime entitlements forbidden response
func (o *GetPrimeEntitlementsForbidden) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPrimeEntitlementsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetPrimeEntitlementsNotFoundCode is the HTTP code returned for type GetPrimeEntitlementsNotFound
const GetPrimeEntitlementsNotFoundCode int = 404

/*GetPrimeEntitlementsNotFound The requested resource wasn't found

swagger:response getPrimeEntitlementsNotFound
*/
type GetPrimeEntitlementsNotFound struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetPrimeEntitlementsNotFound creates GetPrimeEntitlementsNotFound with default headers values
func NewGetPrimeEntitlementsNotFound() *GetPrimeEntitlementsNotFound {

	return &GetPrimeEntitlementsNotFound{}
}

// WithPayload adds the payload to the get prime entitlements not found response
func (o *GetPrimeEntitlementsNotFound) WithPayload(payload interface{}) *GetPrimeEntitlementsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get prime entitlements not found response
func (o *GetPrimeEntitlementsNotFound) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPrimeEntitlementsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetPrimeEntitlementsInternalServerErrorCode is the HTTP code returned for type GetPrimeEntitlementsInternalServerError
const GetPrimeEntitlementsInternalServerErrorCode int = 500

/*GetPrimeEntitlementsInternalServerError A server error occurred

swagger:response getPrimeEntitlementsInternalServerError
*/
type GetPrimeEntitlementsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetPrimeEntitlementsInternalServerError creates GetPrimeEntitlementsInternalServerError with default headers values
func NewGetPrimeEntitlementsInternalServerError() *GetPrimeEntitlementsInternalServerError {

	return &GetPrimeEntitlementsInternalServerError{}
}

// WithPayload adds the payload to the get prime entitlements internal server error response
func (o *GetPrimeEntitlementsInternalServerError) WithPayload(payload interface{}) *GetPrimeEntitlementsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get prime entitlements internal server error response
func (o *GetPrimeEntitlementsInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPrimeEntitlementsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
