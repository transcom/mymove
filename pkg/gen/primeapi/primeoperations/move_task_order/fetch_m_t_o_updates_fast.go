// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FetchMTOUpdatesFastHandlerFunc turns a function with the right signature into a fetch m t o updates fast handler
type FetchMTOUpdatesFastHandlerFunc func(FetchMTOUpdatesFastParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FetchMTOUpdatesFastHandlerFunc) Handle(params FetchMTOUpdatesFastParams) middleware.Responder {
	return fn(params)
}

// FetchMTOUpdatesFastHandler interface for that can handle valid fetch m t o updates fast params
type FetchMTOUpdatesFastHandler interface {
	Handle(FetchMTOUpdatesFastParams) middleware.Responder
}

// NewFetchMTOUpdatesFast creates a new http.Handler for the fetch m t o updates fast operation
func NewFetchMTOUpdatesFast(ctx *middleware.Context, handler FetchMTOUpdatesFastHandler) *FetchMTOUpdatesFast {
	return &FetchMTOUpdatesFast{Context: ctx, Handler: handler}
}

/*FetchMTOUpdatesFast swagger:route GET /move-task-orders/fast moveTaskOrder fetchMTOUpdatesFast

fetchMTOUpdatesFast

Gets all moves that have been reviewed and approved by the TOO. The `since` parameter can be used to filter this
list down to only the moves that have been updated since the provided timestamp. A move will be considered
updated if the `updatedAt` timestamp on the move or on its orders, shipments, service items, or payment requests,
is later than the provided date and time.

**WIP**: Include what causes moves to leave this list. Currently, once the `availableToPrimeAt` timestamp has
been set, that move will always appear in this list.


*/
type FetchMTOUpdatesFast struct {
	Context *middleware.Context
	Handler FetchMTOUpdatesFastHandler
}

func (o *FetchMTOUpdatesFast) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFetchMTOUpdatesFastParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
