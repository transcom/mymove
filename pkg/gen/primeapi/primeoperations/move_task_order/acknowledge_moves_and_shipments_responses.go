// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/primemessages"
)

// AcknowledgeMovesAndShipmentsOKCode is the HTTP code returned for type AcknowledgeMovesAndShipmentsOK
const AcknowledgeMovesAndShipmentsOKCode int = 200

/*
AcknowledgeMovesAndShipmentsOK Successfully updated Move and Shipment Acknowledgements.

swagger:response acknowledgeMovesAndShipmentsOK
*/
type AcknowledgeMovesAndShipmentsOK struct {

	/*
	  In: Body
	*/
	Payload *primemessages.AcknowledgeMovesShipmentsSuccessResponse `json:"body,omitempty"`
}

// NewAcknowledgeMovesAndShipmentsOK creates AcknowledgeMovesAndShipmentsOK with default headers values
func NewAcknowledgeMovesAndShipmentsOK() *AcknowledgeMovesAndShipmentsOK {

	return &AcknowledgeMovesAndShipmentsOK{}
}

// WithPayload adds the payload to the acknowledge moves and shipments o k response
func (o *AcknowledgeMovesAndShipmentsOK) WithPayload(payload *primemessages.AcknowledgeMovesShipmentsSuccessResponse) *AcknowledgeMovesAndShipmentsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the acknowledge moves and shipments o k response
func (o *AcknowledgeMovesAndShipmentsOK) SetPayload(payload *primemessages.AcknowledgeMovesShipmentsSuccessResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcknowledgeMovesAndShipmentsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AcknowledgeMovesAndShipmentsUnauthorizedCode is the HTTP code returned for type AcknowledgeMovesAndShipmentsUnauthorized
const AcknowledgeMovesAndShipmentsUnauthorizedCode int = 401

/*
AcknowledgeMovesAndShipmentsUnauthorized The request was denied.

swagger:response acknowledgeMovesAndShipmentsUnauthorized
*/
type AcknowledgeMovesAndShipmentsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *primemessages.ClientError `json:"body,omitempty"`
}

// NewAcknowledgeMovesAndShipmentsUnauthorized creates AcknowledgeMovesAndShipmentsUnauthorized with default headers values
func NewAcknowledgeMovesAndShipmentsUnauthorized() *AcknowledgeMovesAndShipmentsUnauthorized {

	return &AcknowledgeMovesAndShipmentsUnauthorized{}
}

// WithPayload adds the payload to the acknowledge moves and shipments unauthorized response
func (o *AcknowledgeMovesAndShipmentsUnauthorized) WithPayload(payload *primemessages.ClientError) *AcknowledgeMovesAndShipmentsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the acknowledge moves and shipments unauthorized response
func (o *AcknowledgeMovesAndShipmentsUnauthorized) SetPayload(payload *primemessages.ClientError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcknowledgeMovesAndShipmentsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AcknowledgeMovesAndShipmentsForbiddenCode is the HTTP code returned for type AcknowledgeMovesAndShipmentsForbidden
const AcknowledgeMovesAndShipmentsForbiddenCode int = 403

/*
AcknowledgeMovesAndShipmentsForbidden The request was denied.

swagger:response acknowledgeMovesAndShipmentsForbidden
*/
type AcknowledgeMovesAndShipmentsForbidden struct {

	/*
	  In: Body
	*/
	Payload *primemessages.ClientError `json:"body,omitempty"`
}

// NewAcknowledgeMovesAndShipmentsForbidden creates AcknowledgeMovesAndShipmentsForbidden with default headers values
func NewAcknowledgeMovesAndShipmentsForbidden() *AcknowledgeMovesAndShipmentsForbidden {

	return &AcknowledgeMovesAndShipmentsForbidden{}
}

// WithPayload adds the payload to the acknowledge moves and shipments forbidden response
func (o *AcknowledgeMovesAndShipmentsForbidden) WithPayload(payload *primemessages.ClientError) *AcknowledgeMovesAndShipmentsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the acknowledge moves and shipments forbidden response
func (o *AcknowledgeMovesAndShipmentsForbidden) SetPayload(payload *primemessages.ClientError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcknowledgeMovesAndShipmentsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AcknowledgeMovesAndShipmentsNotFoundCode is the HTTP code returned for type AcknowledgeMovesAndShipmentsNotFound
const AcknowledgeMovesAndShipmentsNotFoundCode int = 404

/*
AcknowledgeMovesAndShipmentsNotFound The requested resource wasn't found.

swagger:response acknowledgeMovesAndShipmentsNotFound
*/
type AcknowledgeMovesAndShipmentsNotFound struct {

	/*
	  In: Body
	*/
	Payload *primemessages.ClientError `json:"body,omitempty"`
}

// NewAcknowledgeMovesAndShipmentsNotFound creates AcknowledgeMovesAndShipmentsNotFound with default headers values
func NewAcknowledgeMovesAndShipmentsNotFound() *AcknowledgeMovesAndShipmentsNotFound {

	return &AcknowledgeMovesAndShipmentsNotFound{}
}

// WithPayload adds the payload to the acknowledge moves and shipments not found response
func (o *AcknowledgeMovesAndShipmentsNotFound) WithPayload(payload *primemessages.ClientError) *AcknowledgeMovesAndShipmentsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the acknowledge moves and shipments not found response
func (o *AcknowledgeMovesAndShipmentsNotFound) SetPayload(payload *primemessages.ClientError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcknowledgeMovesAndShipmentsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AcknowledgeMovesAndShipmentsConflictCode is the HTTP code returned for type AcknowledgeMovesAndShipmentsConflict
const AcknowledgeMovesAndShipmentsConflictCode int = 409

/*
AcknowledgeMovesAndShipmentsConflict The request could not be processed because of conflict in the current state of the resource.

swagger:response acknowledgeMovesAndShipmentsConflict
*/
type AcknowledgeMovesAndShipmentsConflict struct {

	/*
	  In: Body
	*/
	Payload *primemessages.ClientError `json:"body,omitempty"`
}

// NewAcknowledgeMovesAndShipmentsConflict creates AcknowledgeMovesAndShipmentsConflict with default headers values
func NewAcknowledgeMovesAndShipmentsConflict() *AcknowledgeMovesAndShipmentsConflict {

	return &AcknowledgeMovesAndShipmentsConflict{}
}

// WithPayload adds the payload to the acknowledge moves and shipments conflict response
func (o *AcknowledgeMovesAndShipmentsConflict) WithPayload(payload *primemessages.ClientError) *AcknowledgeMovesAndShipmentsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the acknowledge moves and shipments conflict response
func (o *AcknowledgeMovesAndShipmentsConflict) SetPayload(payload *primemessages.ClientError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcknowledgeMovesAndShipmentsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AcknowledgeMovesAndShipmentsPreconditionFailedCode is the HTTP code returned for type AcknowledgeMovesAndShipmentsPreconditionFailed
const AcknowledgeMovesAndShipmentsPreconditionFailedCode int = 412

/*
AcknowledgeMovesAndShipmentsPreconditionFailed Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.

swagger:response acknowledgeMovesAndShipmentsPreconditionFailed
*/
type AcknowledgeMovesAndShipmentsPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *primemessages.ClientError `json:"body,omitempty"`
}

// NewAcknowledgeMovesAndShipmentsPreconditionFailed creates AcknowledgeMovesAndShipmentsPreconditionFailed with default headers values
func NewAcknowledgeMovesAndShipmentsPreconditionFailed() *AcknowledgeMovesAndShipmentsPreconditionFailed {

	return &AcknowledgeMovesAndShipmentsPreconditionFailed{}
}

// WithPayload adds the payload to the acknowledge moves and shipments precondition failed response
func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) WithPayload(payload *primemessages.ClientError) *AcknowledgeMovesAndShipmentsPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the acknowledge moves and shipments precondition failed response
func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) SetPayload(payload *primemessages.ClientError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AcknowledgeMovesAndShipmentsUnprocessableEntityCode is the HTTP code returned for type AcknowledgeMovesAndShipmentsUnprocessableEntity
const AcknowledgeMovesAndShipmentsUnprocessableEntityCode int = 422

/*
AcknowledgeMovesAndShipmentsUnprocessableEntity The request was unprocessable, likely due to bad input from the requester.

swagger:response acknowledgeMovesAndShipmentsUnprocessableEntity
*/
type AcknowledgeMovesAndShipmentsUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *primemessages.ValidationError `json:"body,omitempty"`
}

// NewAcknowledgeMovesAndShipmentsUnprocessableEntity creates AcknowledgeMovesAndShipmentsUnprocessableEntity with default headers values
func NewAcknowledgeMovesAndShipmentsUnprocessableEntity() *AcknowledgeMovesAndShipmentsUnprocessableEntity {

	return &AcknowledgeMovesAndShipmentsUnprocessableEntity{}
}

// WithPayload adds the payload to the acknowledge moves and shipments unprocessable entity response
func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) WithPayload(payload *primemessages.ValidationError) *AcknowledgeMovesAndShipmentsUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the acknowledge moves and shipments unprocessable entity response
func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) SetPayload(payload *primemessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AcknowledgeMovesAndShipmentsInternalServerErrorCode is the HTTP code returned for type AcknowledgeMovesAndShipmentsInternalServerError
const AcknowledgeMovesAndShipmentsInternalServerErrorCode int = 500

/*
AcknowledgeMovesAndShipmentsInternalServerError A server error occurred.

swagger:response acknowledgeMovesAndShipmentsInternalServerError
*/
type AcknowledgeMovesAndShipmentsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *primemessages.Error `json:"body,omitempty"`
}

// NewAcknowledgeMovesAndShipmentsInternalServerError creates AcknowledgeMovesAndShipmentsInternalServerError with default headers values
func NewAcknowledgeMovesAndShipmentsInternalServerError() *AcknowledgeMovesAndShipmentsInternalServerError {

	return &AcknowledgeMovesAndShipmentsInternalServerError{}
}

// WithPayload adds the payload to the acknowledge moves and shipments internal server error response
func (o *AcknowledgeMovesAndShipmentsInternalServerError) WithPayload(payload *primemessages.Error) *AcknowledgeMovesAndShipmentsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the acknowledge moves and shipments internal server error response
func (o *AcknowledgeMovesAndShipmentsInternalServerError) SetPayload(payload *primemessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcknowledgeMovesAndShipmentsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
