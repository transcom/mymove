// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DownloadMoveOrderHandlerFunc turns a function with the right signature into a download move order handler
type DownloadMoveOrderHandlerFunc func(DownloadMoveOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DownloadMoveOrderHandlerFunc) Handle(params DownloadMoveOrderParams) middleware.Responder {
	return fn(params)
}

// DownloadMoveOrderHandler interface for that can handle valid download move order params
type DownloadMoveOrderHandler interface {
	Handle(DownloadMoveOrderParams) middleware.Responder
}

// NewDownloadMoveOrder creates a new http.Handler for the download move order operation
func NewDownloadMoveOrder(ctx *middleware.Context, handler DownloadMoveOrderHandler) *DownloadMoveOrder {
	return &DownloadMoveOrder{Context: ctx, Handler: handler}
}

/*
	DownloadMoveOrder swagger:route GET /moves/{locator}/documents moveTaskOrder downloadMoveOrder

# Downloads move order as a PDF

### Functionality
This endpoint downloads all uploaded move order documentations into one download file by locator.

### Errors
* The move must be in need counseling state.
* The move client's origin duty location must not currently have gov counseling.
*/
type DownloadMoveOrder struct {
	Context *middleware.Context
	Handler DownloadMoveOrderHandler
}

func (o *DownloadMoveOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDownloadMoveOrderParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
