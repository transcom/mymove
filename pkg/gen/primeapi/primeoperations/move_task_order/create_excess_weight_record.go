// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateExcessWeightRecordHandlerFunc turns a function with the right signature into a create excess weight record handler
type CreateExcessWeightRecordHandlerFunc func(CreateExcessWeightRecordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateExcessWeightRecordHandlerFunc) Handle(params CreateExcessWeightRecordParams) middleware.Responder {
	return fn(params)
}

// CreateExcessWeightRecordHandler interface for that can handle valid create excess weight record params
type CreateExcessWeightRecordHandler interface {
	Handle(CreateExcessWeightRecordParams) middleware.Responder
}

// NewCreateExcessWeightRecord creates a new http.Handler for the create excess weight record operation
func NewCreateExcessWeightRecord(ctx *middleware.Context, handler CreateExcessWeightRecordHandler) *CreateExcessWeightRecord {
	return &CreateExcessWeightRecord{Context: ctx, Handler: handler}
}

/*
	CreateExcessWeightRecord swagger:route POST /move-task-orders/{moveTaskOrderID}/excess-weight-record moveTaskOrder createExcessWeightRecord

createExcessWeightRecord

Uploads an excess weight record, which is a document that proves that the movers or contractors have counseled the customer about their excess weight. Excess weight counseling should occur after the sum of the shipments for the customer's move crosses the excess weight alert threshold.
*/
type CreateExcessWeightRecord struct {
	Context *middleware.Context
	Handler CreateExcessWeightRecordHandler
}

func (o *CreateExcessWeightRecord) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateExcessWeightRecordParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
