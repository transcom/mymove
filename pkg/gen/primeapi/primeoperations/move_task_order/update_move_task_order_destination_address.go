// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateMoveTaskOrderDestinationAddressHandlerFunc turns a function with the right signature into a update move task order destination address handler
type UpdateMoveTaskOrderDestinationAddressHandlerFunc func(UpdateMoveTaskOrderDestinationAddressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMoveTaskOrderDestinationAddressHandlerFunc) Handle(params UpdateMoveTaskOrderDestinationAddressParams) middleware.Responder {
	return fn(params)
}

// UpdateMoveTaskOrderDestinationAddressHandler interface for that can handle valid update move task order destination address params
type UpdateMoveTaskOrderDestinationAddressHandler interface {
	Handle(UpdateMoveTaskOrderDestinationAddressParams) middleware.Responder
}

// NewUpdateMoveTaskOrderDestinationAddress creates a new http.Handler for the update move task order destination address operation
func NewUpdateMoveTaskOrderDestinationAddress(ctx *middleware.Context, handler UpdateMoveTaskOrderDestinationAddressHandler) *UpdateMoveTaskOrderDestinationAddress {
	return &UpdateMoveTaskOrderDestinationAddress{Context: ctx, Handler: handler}
}

/*UpdateMoveTaskOrderDestinationAddress swagger:route PATCH /move-task-orders/{moveTaskOrderID}/destination-address moveTaskOrder prime updateMoveTaskOrderDestinationAddress

Updates move task order's destination address

Updates move task order's destination address

*/
type UpdateMoveTaskOrderDestinationAddress struct {
	Context *middleware.Context
	Handler UpdateMoveTaskOrderDestinationAddressHandler
}

func (o *UpdateMoveTaskOrderDestinationAddress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateMoveTaskOrderDestinationAddressParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
