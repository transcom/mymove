// Code generated by go-swagger; DO NOT EDIT.

package payment_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateUploadHandlerFunc turns a function with the right signature into a create upload handler
type CreateUploadHandlerFunc func(CreateUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateUploadHandlerFunc) Handle(params CreateUploadParams) middleware.Responder {
	return fn(params)
}

// CreateUploadHandler interface for that can handle valid create upload params
type CreateUploadHandler interface {
	Handle(CreateUploadParams) middleware.Responder
}

// NewCreateUpload creates a new http.Handler for the create upload operation
func NewCreateUpload(ctx *middleware.Context, handler CreateUploadHandler) *CreateUpload {
	return &CreateUpload{Context: ctx, Handler: handler}
}

/*
	CreateUpload swagger:route POST /payment-requests/{paymentRequestID}/uploads paymentRequest createUpload

createUpload

### Functionality
This endpoint **uploads** a Proof of Service document for a PaymentRequest.

The PaymentRequest should already exist.

Optional key of **isWeightTicket** indicates if the document is a weight ticket or not.
This will be used for partial and full deliveries and makes it easier for the Task Invoicing Officers to locate and review service item documents.
If left empty, it will assume it is NOT a weight ticket.

The formdata in the body of the POST request that is sent should look like this if it IS a weight ticket being attached to an existing payment request:

	```json
	{
	  "file": "filePath",
	  "isWeightTicket": true
	}
	```
	If the proof of service doc is NOT a weight ticket, it will look like this - or you can leave it empty:
	```json
	{
	  "file": "filePath",
	  "isWeightTicket": false
	}
	```
	```json
	{
	  "file": "filePath",
	}
	```

PaymentRequests are created with the [createPaymentRequest](#operation/createPaymentRequest) endpoint.
*/
type CreateUpload struct {
	Context *middleware.Context
	Handler CreateUploadHandler
}

func (o *CreateUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateUploadParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
