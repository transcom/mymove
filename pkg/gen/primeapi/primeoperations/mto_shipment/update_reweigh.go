// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateReweighHandlerFunc turns a function with the right signature into a update reweigh handler
type UpdateReweighHandlerFunc func(UpdateReweighParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateReweighHandlerFunc) Handle(params UpdateReweighParams) middleware.Responder {
	return fn(params)
}

// UpdateReweighHandler interface for that can handle valid update reweigh params
type UpdateReweighHandler interface {
	Handle(UpdateReweighParams) middleware.Responder
}

// NewUpdateReweigh creates a new http.Handler for the update reweigh operation
func NewUpdateReweigh(ctx *middleware.Context, handler UpdateReweighHandler) *UpdateReweigh {
	return &UpdateReweigh{Context: ctx, Handler: handler}
}

/* UpdateReweigh swagger:route PATCH /mto-shipments/{mtoShipmentID}/reweighs/{reweighID} mtoShipment updateReweigh

updateReweigh

### Functionality
This endpoint is used to **update** the reweigh for an MTO Shipment. This endpoint enables the reweigh weight,
and response to be updated. This endpoint **cannot create** a reweigh.


*/
type UpdateReweigh struct {
	Context *middleware.Context
	Handler UpdateReweighHandler
}

func (o *UpdateReweigh) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateReweighParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
