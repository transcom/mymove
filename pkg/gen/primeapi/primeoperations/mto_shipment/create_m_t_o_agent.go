// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateMTOAgentHandlerFunc turns a function with the right signature into a create m t o agent handler
type CreateMTOAgentHandlerFunc func(CreateMTOAgentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateMTOAgentHandlerFunc) Handle(params CreateMTOAgentParams) middleware.Responder {
	return fn(params)
}

// CreateMTOAgentHandler interface for that can handle valid create m t o agent params
type CreateMTOAgentHandler interface {
	Handle(CreateMTOAgentParams) middleware.Responder
}

// NewCreateMTOAgent creates a new http.Handler for the create m t o agent operation
func NewCreateMTOAgent(ctx *middleware.Context, handler CreateMTOAgentHandler) *CreateMTOAgent {
	return &CreateMTOAgent{Context: ctx, Handler: handler}
}

/*CreateMTOAgent swagger:route POST /mto-shipments/{mtoShipmentID}/agents mtoShipment createMTOAgent

createMTOAgent

### Functionality
This endpoint is used to **create** and add agents for an existing MTO Shipment. Only the fields being modified need to be sent in the request body.

### Errors
The agent must always have a name and at least one method of contact (either `email` or `phone`).

The agent must be associated with the MTO shipment passed in the url.

The shipment should be associated with an MTO that is available to the Pime.
If the caller requests a new agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.


*/
type CreateMTOAgent struct {
	Context *middleware.Context
	Handler CreateMTOAgentHandler
}

func (o *CreateMTOAgent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateMTOAgentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
