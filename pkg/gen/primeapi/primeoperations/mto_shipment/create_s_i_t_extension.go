// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateSITExtensionHandlerFunc turns a function with the right signature into a create s i t extension handler
type CreateSITExtensionHandlerFunc func(CreateSITExtensionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateSITExtensionHandlerFunc) Handle(params CreateSITExtensionParams) middleware.Responder {
	return fn(params)
}

// CreateSITExtensionHandler interface for that can handle valid create s i t extension params
type CreateSITExtensionHandler interface {
	Handle(CreateSITExtensionParams) middleware.Responder
}

// NewCreateSITExtension creates a new http.Handler for the create s i t extension operation
func NewCreateSITExtension(ctx *middleware.Context, handler CreateSITExtensionHandler) *CreateSITExtension {
	return &CreateSITExtension{Context: ctx, Handler: handler}
}

/*
	CreateSITExtension swagger:route POST /mto-shipments/{mtoShipmentID}/sit-extensions mtoShipment createSITExtension

createSITExtension

### Functionality
This endpoint creates a storage in transit (SIT) extension request for a shipment. A SIT extension request is a request an
increase in the shipment day allowance for the number of days a shipment is allowed to be in SIT. The total SIT day allowance
includes time spent in both origin and destination SIT.
*/
type CreateSITExtension struct {
	Context *middleware.Context
	Handler CreateSITExtensionHandler
}

func (o *CreateSITExtension) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateSITExtensionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
