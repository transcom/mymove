// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateSITDeliveryRequestHandlerFunc turns a function with the right signature into a update s i t delivery request handler
type UpdateSITDeliveryRequestHandlerFunc func(UpdateSITDeliveryRequestParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateSITDeliveryRequestHandlerFunc) Handle(params UpdateSITDeliveryRequestParams) middleware.Responder {
	return fn(params)
}

// UpdateSITDeliveryRequestHandler interface for that can handle valid update s i t delivery request params
type UpdateSITDeliveryRequestHandler interface {
	Handle(UpdateSITDeliveryRequestParams) middleware.Responder
}

// NewUpdateSITDeliveryRequest creates a new http.Handler for the update s i t delivery request operation
func NewUpdateSITDeliveryRequest(ctx *middleware.Context, handler UpdateSITDeliveryRequestHandler) *UpdateSITDeliveryRequest {
	return &UpdateSITDeliveryRequest{Context: ctx, Handler: handler}
}

/*
	UpdateSITDeliveryRequest swagger:route PATCH /mto-shipments/{mtoShipmentID}/sit-delivery mtoShipment updateSITDeliveryRequest

# Update the SIT Customer Contact and SIT Requested Delivery Dates for a service item currently in SIT

### Functionality
This endpoint can be used to update the Authorized End Date for shipments in Origin or Destination SIT and the Required
Delivery Date for shipments in Origin SIT. The provided Customer Contact Date and the Customer Requested Delivery Date are
used to calculate the new Authorized End Date and Required Delivery Date.
*/
type UpdateSITDeliveryRequest struct {
	Context *middleware.Context
	Handler UpdateSITDeliveryRequestHandler
}

func (o *UpdateSITDeliveryRequest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateSITDeliveryRequestParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
