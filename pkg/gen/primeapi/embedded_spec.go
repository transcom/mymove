// Code generated by go-swagger; DO NOT EDIT.

package primeapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Prime API is a RESTful API that enables the Prime contractor to request\ninformation about upcoming moves, update the details and status of those moves,\nand make payment requests. It uses Mutual TLS for authentication procedures.\n\nAll endpoints are located at ` + "`" + `/prime/v1/` + "`" + `.\n",
    "title": "MilMove Prime API",
    "contact": {
      "email": "milmove-developers@caci.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/prime/v1",
  "paths": {
    "/move-task-orders/{moveID}": {
      "get": {
        "description": "### Functionality\nThis endpoint gets an individual MoveTaskOrder by ID.\n\nIt will provide information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "getMoveTaskOrder",
        "operationId": "getMoveTaskOrder",
        "parameters": [
          {
            "type": "string",
            "description": "UUID or MoveCode of move task order to use.",
            "name": "moveID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve an individual move task order.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}/excess-weight-record": {
      "post": {
        "description": "Uploads an excess weight record, which is a document that proves that the movers or contractors have counseled the customer about their excess weight. Excess weight counseling should occur after the sum of the shipments for the customer's move crosses the excess weight alert threshold.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "createExcessWeightRecord",
        "operationId": "createExcessWeightRecord",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move being updated.",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully uploaded the excess weight record file.",
            "schema": {
              "$ref": "#/definitions/ExcessWeightRecord"
            }
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}/post-counseling-info": {
      "patch": {
        "description": "### Functionality\nThis endpoint **updates** the MoveTaskOrder to indicate that the Prime has completed Counseling.\nThis update uses the moveTaskOrderID provided in the path, updates the move status and marks child elements of the move to indicate the update.\nNo body object is expected for this request.\n\n**For Full/Partial PPMs**: This action is required so that the customer can start uploading their proof of service docs.\n\n**For other move types**: This action is required for auditing reasons so that we have a record of when the Prime counseled the customer.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "updateMTOPostCounselingInformation",
        "operationId": "updateMTOPostCounselingInformation",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatch"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order with post counseling information.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move task order to use.",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves": {
      "get": {
        "description": "Gets all moves that have been reviewed and approved by the TOO. The ` + "`" + `since` + "`" + ` parameter can be used to filter this\nlist down to only the moves that have been updated since the provided timestamp. A move will be considered\nupdated if the ` + "`" + `updatedAt` + "`" + ` timestamp on the move or on its orders, shipments, service items, or payment\nrequests, is later than the provided date and time.\n\n**WIP**: Include what causes moves to leave this list. Currently, once the ` + "`" + `availableToPrimeAt` + "`" + ` timestamp has\nbeen set, that move will always appear in this list.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "listMoves",
        "operationId": "listMoves",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Only return moves updated since this time. Formatted like \"2021-07-23T18:30:47.116Z\"",
            "name": "since",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moves. A successful fetch might still return zero moves.",
            "schema": {
              "$ref": "#/definitions/ListMoves"
            }
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/moves/{locator}/documents": {
      "get": {
        "description": "### Functionality\nThis endpoint downloads all uploaded move order documentations into one download file by locator.\n\n### Errors\n* The move must be in need counseling state.\n* The move client's origin duty location must not currently have gov counseling.\n",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Downloads move order as a PDF",
        "operationId": "downloadMoveOrder",
        "parameters": [
          {
            "type": "string",
            "description": "the locator code for move order to be downloaded",
            "name": "locator",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "ALL",
              "ORDERS",
              "AMENDMENTS"
            ],
            "type": "string",
            "default": "ALL",
            "description": "upload type",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Move Order PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-service-items": {
      "post": {
        "description": "Creates one or more MTOServiceItems. Not all service items may be created, please see details below.\n\nThis endpoint supports different body definitions. In the modelType field below, select the modelType corresponding\n to the service item you wish to create and the documentation will update with the new definition.\n\nUpon creation these items are associated with a Move Task Order and an MTO Shipment.\nThe request must include UUIDs for the MTO and MTO Shipment connected to this service item. Some service item types require\nadditional service items to be autogenerated when added - all created service items, autogenerated included,\nwill be returned in the response.\n\nTo update a service item, please use [updateMTOServiceItem](#operation/updateMTOServiceItem) endpoint.\n\n---\n\n**` + "`" + `MTOServiceItemOriginSIT` + "`" + `**\n\nMTOServiceItemOriginSIT is a subtype of MTOServiceItem.\n\nThis model type describes a domestic origin SIT service item. Items can be created using this\nmodel type with the following codes:\n\n**DOFSIT**\n\n**1st day origin SIT service item**. When a DOFSIT is requested, the API will auto-create the following group of service items:\n  * DOFSIT - Domestic origin 1st day SIT\n  * DOASIT - Domestic origin Additional day SIT\n  * DOPSIT - Domestic origin SIT pickup\n  * DOSFSC - Domestic origin SIT fuel surcharge\n\n**DOASIT**\n\n**Addt'l days origin SIT service item**. This represents an additional day of storage for the same item.\nAdditional DOASIT service items can be created and added to an existing shipment that **includes a DOFSIT service item**.\n\n---\n\n**` + "`" + `MTOServiceItemDestSIT` + "`" + `**\n\nMTOServiceItemDestSIT is a subtype of MTOServiceItem.\n\nThis model type describes a domestic destination SIT service item. Items can be created using this\nmodel type with the following codes:\n\n**DDFSIT**\n\n**1st day destination SIT service item**.\n\nThese additional fields are optional for creating a DDFSIT:\n  * ` + "`" + `firstAvailableDeliveryDate1` + "`" + `\n    * string \u003cdate\u003e\n    * First available date that Prime can deliver SIT service item.\n    * firstAvailableDeliveryDate1, dateOfContact1, and timeMilitary1 are required together\n  * ` + "`" + `dateOfContact1` + "`" + `\n    * string \u003cdate\u003e\n    * Date of attempted contact by the prime corresponding to ` + "`" + `timeMilitary1` + "`" + `\n    * dateOfContact1, timeMilitary1, and firstAvailableDeliveryDate1 are required together\n  * ` + "`" + `timeMilitary1` + "`" + `\n    * string\\d{4}Z\n    * Time of attempted contact corresponding to ` + "`" + `dateOfContact1` + "`" + `, in military format.\n    * timeMilitary1, dateOfContact1, and firstAvailableDeliveryDate1 are required together\n  * ` + "`" + `firstAvailableDeliveryDate2` + "`" + `\n    * string \u003cdate\u003e\n    * Second available date that Prime can deliver SIT service item.\n    * firstAvailableDeliveryDate2, dateOfContact2, and timeMilitary2 are required together\n  * ` + "`" + `dateOfContact2` + "`" + `\n    * string \u003cdate\u003e\n    * Date of attempted contact delivery by the prime corresponding to ` + "`" + `timeMilitary2` + "`" + `\n    * dateOfContact2, timeMilitary2, and firstAvailableDeliveryDate2 are required together\n  * ` + "`" + `timeMilitary2` + "`" + `\n    * string\\d{4}Z\n    * Time of attempted contact corresponding to ` + "`" + `dateOfContact2` + "`" + `, in military format.\n    * timeMilitary2, dateOfContact2, and firstAvailableDeliveryDate2 are required together\n\nWhen a DDFSIT is requested, the API will auto-create the following group of service items:\n  * DDFSIT - Domestic destination 1st day SIT\n  * DDASIT - Domestic destination Additional day SIT\n  * DDDSIT - Domestic destination SIT delivery\n  * DDSFSC - Domestic destination SIT fuel surcharge\n\n**NOTE** When providing the ` + "`" + `sitEntryDate` + "`" + ` value in the payload, please ensure that the date is not BEFORE\n` + "`" + `firstAvailableDeliveryDate1` + "`" + ` or ` + "`" + `firstAvailableDeliveryDate2` + "`" + `. If it is, you will receive an error response.\n\n**DDASIT**\n\n**Addt'l days destination SIT service item**. This represents an additional day of storage for the same item.\nAdditional DDASIT service items can be created and added to an existing shipment that **includes a DDFSIT service item**.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "createMTOServiceItem",
        "operationId": "createMTOServiceItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created an MTO service item.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MTOServiceItem"
              }
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-service-items/{mtoServiceItemID}": {
      "patch": {
        "description": "Updates MTOServiceItems after creation. Not all service items or fields may be updated, please see details below.\n\nThis endpoint supports different body definitions. In the modelType field below, select the modelType corresponding\n to the service item you wish to update and the documentation will update with the new definition.\n\n* Addresses: To update a destination service item's SIT destination final address, update the shipment destination address.\nFor approved shipments, please use [updateShipmentDestinationAddress](#mtoShipment/updateShipmentDestinationAddress).\nFor shipments not yet approved, please use [updateMTOShipmentAddress](#mtoShipment/updateMTOShipmentAddress).\n\n* SIT Service Items: Take note that when updating ` + "`" + `sitCustomerContacted` + "`" + `, ` + "`" + `sitDepartureDate` + "`" + `, or ` + "`" + `sitRequestedDelivery` + "`" + `, we want\nthose to be updated on ` + "`" + `DOASIT` + "`" + ` (for origin SIT) and ` + "`" + `DDASIT` + "`" + ` (for destination SIT). If updating those values in other service\nitems, the office users will not have as much attention to those values.\n\nTo create a service item, please use [createMTOServiceItem](#mtoServiceItem/createMTOServiceItem)) endpoint.\n\n* Resubmitting rejected SIT service items: This endpoint will handle the logic of changing the status of rejected SIT service items from\nREJECTED to SUBMITTED. Please provide the ` + "`" + `requestedApprovalsRequestedStatus: true` + "`" + ` when resubmitting as this will give attention to the TOO to\nreview the resubmitted SIT service item. Another note, ` + "`" + `updateReason` + "`" + ` must have a different value than the current ` + "`" + `reason` + "`" + ` value on the service item.\nIf this value is not updated, then an error will be sent back.\n\nThe following SIT service items can be resubmitted following a rejection:\n- DDASIT\n- DDDSIT\n- DDFSIT\n- DOASIT\n- DOPSIT\n- DOFSIT\n- DDSFSC\n- DOSFSC\n\nAt a MINIMUM, the payload for resubmitting a rejected SIT service item must look like this:\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"reServiceCode\": \"DDFSIT\",\n  \"updateReason\": \"A reason that differs from the previous reason\",\n  \"modelType\": \"UpdateMTOServiceItemSIT\",\n  \"requestApprovalsRequestedStatus\": true\n}\n` + "`" + `` + "`" + `` + "`" + `\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "updateMTOServiceItem",
        "operationId": "updateMTOServiceItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOServiceItem"
            }
          },
          {
            "type": "string",
            "description": "UUID of service item to update.",
            "name": "mtoServiceItemID",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/ifMatch"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the MTO service item.",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-service-items/{mtoServiceItemID}/uploads": {
      "post": {
        "description": "### Functionality\n\nThis endpoint **uploads** a Service Request document for a\nServiceItem.\n\nThe ServiceItem should already exist.\n\nServiceItems are created with the\n[createMTOServiceItem](#operation/createMTOServiceItem)\nendpoint.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "createServiceRequestDocumentUpload",
        "operationId": "createServiceRequestDocumentUpload",
        "parameters": [
          {
            "type": "string",
            "description": "UUID of the service item to use.",
            "name": "mtoServiceItemID",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created upload of digital file.",
            "schema": {
              "$ref": "#/definitions/UploadWithOmissions"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments": {
      "post": {
        "description": "_[Deprecated: sunset on 2024-04-08]_ This endpoint is deprecated and will be removed in a future version.\nPlease use the new endpoint at ` + "`" + `/prime/v2/createMTOShipment` + "`" + ` instead.\n\nCreates a new shipment within the specified move. This endpoint should be used whenever the movers identify a\nneed for an additional shipment. The new shipment will be submitted to the TOO for review, and the TOO must\napprove it before the contractor can proceed with billing.\n\n**WIP**: The Prime should be notified by a push notification whenever the TOO approves a shipment connected to\none of their moves. Otherwise, the Prime can fetch the related move using the\n[getMoveTaskOrder](#operation/getMoveTaskOrder) endpoint and see if this shipment has the status ` + "`" + `\"APPROVED\"` + "`" + `.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOShipment",
        "operationId": "createMTOShipment",
        "parameters": [
          {
            "x-examples": {
              "application/json": {
                "hhg": {
                  "summary": "HHG",
                  "value": {
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "pickupAddress": {
                      "city": "Muldraugh",
                      "postalCode": "40155",
                      "state": "KY",
                      "streetAddress1": "204 South Prospect Lane"
                    },
                    "requestedPickupDate": "2022-12-31",
                    "shipmentType": "HHG"
                  }
                },
                "nts": {
                  "summary": "NTS",
                  "value": {
                    "agents": [
                      {
                        "agentType": "RELEASING_AGENT",
                        "email": "edgar.taylor@example.com",
                        "firstName": "Edgar",
                        "lastName": "Taylor",
                        "phone": "555-555-5555"
                      }
                    ],
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "pickupAddress": {
                      "city": "Muldraugh",
                      "postalCode": "40155",
                      "state": "KY",
                      "streetAddress1": "204 South Prospect Lane"
                    },
                    "requestedPickupDate": "2022-12-31",
                    "shipmentType": "HHG_INTO_NTS_DOMESTIC"
                  }
                },
                "nts-r": {
                  "summary": "NTS Release",
                  "value": {
                    "agents": [
                      {
                        "agentType": "RECEIVING_AGENT",
                        "email": "edgar.taylor@example.com",
                        "firstName": "Edgar",
                        "lastName": "Taylor",
                        "phone": "555-555-5555"
                      }
                    ],
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "shipmentType": "HHG_OUTOF_NTS_DOMESTIC"
                  }
                },
                "ppm": {
                  "summary": "PPM",
                  "value": {
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "ppmShipment": {
                      "estimatedWeight": 4999,
                      "expectedDepartureDate": "2022-10-01",
                      "hasProGear": false,
                      "sitExpected": false
                    },
                    "shipmentType": "PPM"
                  }
                }
              }
            },
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateMTOShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}": {
      "delete": {
        "description": "### Functionality\nThis endpoint deletes an individual shipment by ID.\n\n### Errors\n* The mtoShipment should be associated with an MTO that is available to prime.\n* The mtoShipment must be a PPM shipment.\n* Counseling should not have already been completed for the associated MTO.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "deleteMTOShipment",
        "operationId": "deleteMTOShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment to be deleted",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the MTO shipment."
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "patch": {
        "description": "_[Deprecated: sunset on August 5th, 2024]_ This endpoint is deprecated and will be removed in a future version.\nPlease use the new endpoint at ` + "`" + `/prime/v2/updateMTOShipment` + "`" + ` instead.\n\n**DEPRECATION ON AUGUST 5TH, 2024**\nFollowing deprecation, there is an edge case scenario where a PPM shipment with no addresses could be updated and it would also update the final destination SIT address\nfor SIT service items. This edge case has been removed as you should not be able to update items using this endpoint. Third-party APIs have confirmed they will require\ndeprecation for this change.\n\nUpdates an existing shipment for a move.\n\nNote that there are some restrictions on nested objects:\n\n* Service items: You cannot add or update service items using this endpoint. Please use [createMTOServiceItem](#operation/createMTOServiceItem) and [updateMTOServiceItem](#operation/updateMTOServiceItem) instead.\n* Agents: You cannot add or update agents using this endpoint. Please use [createMTOAgent](#operation/createMTOAgent) and [updateMTOAgent](#operation/updateMTOAgent) instead.\n* Addresses: You can add new addresses using this endpoint (and must use this endpoint to do so), but you cannot update existing ones. Please use [updateMTOShipmentAddress](#operation/updateMTOShipmentAddress) instead.\n\nThese restrictions are due to our [optimistic locking/concurrency control](https://transcom.github.io/mymove-docs/docs/dev/contributing/backend/use-optimistic-locking) mechanism.\n\nNote that some fields cannot be manually changed but will still be updated automatically, such as ` + "`" + `primeEstimatedWeightRecordedDate` + "`" + ` and ` + "`" + `requiredDeliveryDate` + "`" + `.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipment",
        "operationId": "updateMTOShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment being updated.",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "x-examples": {
              "application/json": {
                "hhg": {
                  "summary": "HHG",
                  "value": {
                    "actualPickupDate": "2022-12-29",
                    "destinationAddress": {
                      "city": "Great Bend",
                      "postalCode": "13643",
                      "state": "NY",
                      "streetAddress1": "6622 Airport Way S",
                      "streetAddress2": "#1430"
                    },
                    "firstAvailableDeliveryDate": "2023-01-04",
                    "pointOfContact": "peyton.wing@example.com",
                    "primeActualWeight": 4500,
                    "primeEstimatedWeight": 4250,
                    "scheduledPickupDate": "2022-12-30"
                  }
                },
                "nts": {
                  "summary": "NTS",
                  "value": {
                    "actualPickupDate": "2022-12-29",
                    "actualWeight": 4500,
                    "counselorRemarks": "Beware of dogs on property",
                    "estimatedWeight": 4250,
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "scheduledPickupDate": "2022-12-30"
                  }
                },
                "nts-r": {
                  "summary": "NTS Release",
                  "value": {
                    "destinationAddress": {
                      "city": "San Antonio",
                      "postalCode": "78245",
                      "state": "TX",
                      "streetAddress1": "812 S 129th Street"
                    },
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "ntsRecordedWeight": 4500
                  }
                },
                "ppm": {
                  "summary": "PPM",
                  "value": {
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "ppmShipment": {
                      "hasProGear": true,
                      "proGearWeight": 830,
                      "sitEstimatedDepartureDate": "2022-10-13",
                      "sitEstimatedEntryDate": "2022-10-06",
                      "sitEstimatedWeight": 1760,
                      "sitExpected": true,
                      "sitLocation": "DESTINATION",
                      "spouseProGearWeight": 366
                    }
                  }
                }
              }
            },
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOShipment"
            }
          },
          {
            "$ref": "#/parameters/ifMatch"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/addresses/{addressID}": {
      "put": {
        "description": "### Functionality\nThis endpoint is used to **update** the pickup, secondary, and destination addresses on an MTO Shipment. mto-shipments/{mtoShipmentID}/shipment-address-updates is for updating a delivery address. The address details completely replace the original, except for the UUID.\nTherefore a complete address should be sent in the request.\nWhen a destination address on a shipment is updated, the destination SIT service items address ID will also be updated so that shipment and service item final destinations match.\n\nThis endpoint **cannot create** an address.\nTo create an address on an MTO shipment, the caller must use [updateMTOShipment](#operation/updateMTOShipment) as the parent shipment has to be updated with the appropriate link to the address.\n\n### Errors\nThe address must be associated with the mtoShipment passed in the url.\nIn other words, it should be listed as pickupAddress, destinationAddress, secondaryPickupAddress or secondaryDeliveryAddress on the mtoShipment provided.\nIf it is not, caller will receive a **Conflict** Error.\n\nThe mtoShipment should be associated with an MTO that is available to prime.\nIf the caller requests an update to an address, and the shipment is not on an available MTO, the caller will receive a **NotFound** Error.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipmentAddress",
        "operationId": "updateMTOShipmentAddress",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the address",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the address being updated",
            "name": "addressID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          {
            "$ref": "#/parameters/ifMatch"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the address.",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/agents": {
      "post": {
        "description": "### Functionality\nThis endpoint is used to **create** and add agents for an existing MTO Shipment. Only the fields being modified need to be sent in the request body.\n\n### Errors\nThe agent must always have a name and at least one method of contact (either ` + "`" + `email` + "`" + ` or ` + "`" + `phone` + "`" + `).\n\nThe agent must be associated with the MTO shipment passed in the url.\n\nThe shipment should be associated with an MTO that is available to the Pime.\nIf the caller requests a new agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOAgent",
        "operationId": "createMTOAgent",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the agent.",
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/agents/{agentID}": {
      "put": {
        "description": "### Functionality\nThis endpoint is used to **update** the agents for an MTO Shipment. Only the fields being modified need to be sent in the request body.\n\n### Errors:\nThe agent must always have a name and at least one method of contact (either ` + "`" + `email` + "`" + ` or ` + "`" + `phone` + "`" + `).\n\nThe agent must be associated with the MTO shipment passed in the url.\n\nThe shipment should be associated with an MTO that is available to the Prime.\nIf the caller requests an update to an agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOAgent",
        "operationId": "updateMTOAgent",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the agent being updated",
            "name": "agentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          },
          {
            "$ref": "#/parameters/ifMatch"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the agent.",
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/reweighs/{reweighID}": {
      "patch": {
        "description": "### Functionality\nThis endpoint can be used to update a reweigh with a new weight or to provide the reason why a reweigh did not occur.\nOnly one of weight or verificationReason should be sent in the request body.\n\nA reweigh is the second recorded weight for a shipment, as validated by certified weight tickets. Applies to one shipment.\nA reweigh can be triggered automatically, or requested by the customer or transportation office. Not all shipments are reweighed,\nso not all shipments will have a reweigh weight.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateReweigh",
        "operationId": "updateReweigh",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the reweigh",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the reweigh being updated",
            "name": "reweighID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateReweigh"
            }
          },
          {
            "$ref": "#/parameters/ifMatch"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the reweigh.",
            "schema": {
              "$ref": "#/definitions/Reweigh"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/shipment-address-updates": {
      "post": {
        "description": "### Functionality\nThis endpoint is used so the Prime can request an **update** for the destination address on an MTO Shipment,\nafter the destination address has already been approved.\n\nThis endpoint and operation only supports the following shipment types:\n- HHG\n- NTSR\n\nFor HHG shipments, if automatically approved or TOO approves, this will update the final destination address values for destination SIT service items to be the same as the changed destination address that was approved.\n\nAddress updates will be automatically approved unless they change:\n  - The service area\n  - Mileage bracket for direct delivery\n  - the address and the distance between the old and new address is \u003e 50\n  - Domestic Short Haul to Domestic Line Haul or vice versa\n      - Shipments that start and end in one ZIP3 use Short Haul pricing\n      - Shipments that start and end in different ZIP3s use Line Haul pricing\n\nFor those, changes will require TOO approval.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateShipmentDestinationAddress",
        "operationId": "updateShipmentDestinationAddress",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the address",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateShipmentDestinationAddress"
            }
          },
          {
            "type": "string",
            "description": "Needs to be the eTag of the mtoShipment. Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the address update request.",
            "schema": {
              "$ref": "#/definitions/ShipmentAddressUpdate"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/sit-extensions": {
      "post": {
        "description": "### Functionality\nThis endpoint creates a storage in transit (SIT) extension request for a shipment. A SIT extension request is a request an\nincrease in the shipment day allowance for the number of days a shipment is allowed to be in SIT. The total SIT day allowance\nincludes time spent in both origin and destination SIT.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createSITExtension",
        "operationId": "createSITExtension",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSITExtension"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the sit extension request.",
            "schema": {
              "$ref": "#/definitions/SITExtension"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/status": {
      "patch": {
        "description": "### Functionality\nThis endpoint should be used by the Prime to confirm the cancellation of a shipment. It allows the shipment\nstatus to be changed to \"CANCELED.\" Currently, the Prime cannot update the shipment to any other status.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipmentStatus",
        "operationId": "updateMTOShipmentStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/ifMatch"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOShipmentStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the shipment's status.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/payment-requests": {
      "post": {
        "description": "Creates a new instance of a paymentRequest and is assigned the status ` + "`" + `PENDING` + "`" + `.\nA move task order can have multiple payment requests, and\na final payment request can be marked using boolean ` + "`" + `isFinal` + "`" + `.\n\nIf a ` + "`" + `PENDING` + "`" + ` payment request is recalculated,\na new payment request is created and the original request is\nmarked with the status ` + "`" + `DEPRECATED` + "`" + `.\n\n**NOTE**: In order to create a payment request for most service items, the shipment *must*\nbe updated with the ` + "`" + `PrimeActualWeight` + "`" + ` value via [updateMTOShipment](#operation/updateMTOShipment).\n\n**FSC - Fuel Surcharge** service items require ` + "`" + `ActualPickupDate` + "`" + ` to be updated on the shipment.\n\nA service item can be on several payment requests in the case of partial payment requests and payments.\n\nIn the request, if no params are necessary, then just the ` + "`" + `serviceItem` + "`" + ` ` + "`" + `id` + "`" + ` is required. For example:\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"isFinal\": false,\n  \"moveTaskOrderID\": \"uuid\",\n  \"serviceItems\": [\n    {\n      \"id\": \"uuid\",\n    },\n    {\n      \"id\": \"uuid\",\n      \"params\": [\n        {\n          \"key\": \"Service Item Parameter Name\",\n          \"value\": \"Service Item Parameter Value\"\n        }\n      ]\n    }\n  ],\n  \"pointOfContact\": \"string\"\n}\n` + "`" + `` + "`" + `` + "`" + `\n\nSIT Service Items \u0026 Accepted Payment Request Parameters:\n---\nIf ` + "`" + `WeightBilled` + "`" + ` is not provided then the full shipment weight (` + "`" + `PrimeActualWeight` + "`" + `) will be considered in the calculation.\n\n**NOTE**: Diversions have a unique calcuation for payment requests without a ` + "`" + `WeightBilled` + "`" + ` parameter.\n\nIf you created a payment request for a diversion and ` + "`" + `WeightBilled` + "`" + ` is not provided, then the following will be used in the calculation:\n- The lowest shipment weight (` + "`" + `PrimeActualWeight` + "`" + `) found in the diverted shipment chain.\n- The lowest reweigh weight found in the diverted shipment chain.\n\nThe diverted shipment chain is created by referencing the ` + "`" + `diversion` + "`" + ` boolean, ` + "`" + `divertedFromShipmentId` + "`" + ` UUID, and matching destination to pickup addresses.\nIf the chain cannot be established it will fall back to the ` + "`" + `PrimeActualWeight` + "`" + ` of the current shipment. This is utilized because diverted shipments are all one single shipment, but going to different locations.\nThe lowest weight found is the true shipment weight, and thus we search the chain of shipments for the lowest weight found.\n\n**DOFSIT - Domestic origin 1st day SIT**\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DOASIT - Domestic origin add'l SIT** *(SITPaymentRequestStart \u0026 SITPaymentRequestEnd are **REQUIRED**)*\n*To create a paymentRequest for this service item, the ` + "`" + `SITPaymentRequestStart` + "`" + ` and ` + "`" + `SITPaymentRequestEnd` + "`" + ` dates must not overlap previously requested SIT dates.*\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    },\n    {\n      \"key\": \"SITPaymentRequestStart\",\n      \"value\": \"date\"\n    },\n    {\n      \"key\": \"SITPaymentRequestEnd\",\n      \"value\": \"date\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DOPSIT - Domestic origin SIT pickup**\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DOSHUT - Domestic origin shuttle service**\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DDFSIT - Domestic destination 1st day SIT**\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DDASIT - Domestic destination add'l SIT** *(SITPaymentRequestStart \u0026 SITPaymentRequestEnd are **REQUIRED**)*\n*To create a paymentRequest for this service item, the ` + "`" + `SITPaymentRequestStart` + "`" + ` and ` + "`" + `SITPaymentRequestEnd` + "`" + ` dates must not overlap previously requested SIT dates.*\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    },\n    {\n      \"key\": \"SITPaymentRequestStart\",\n      \"value\": \"date\"\n    },\n    {\n      \"key\": \"SITPaymentRequestEnd\",\n      \"value\": \"date\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DDDSIT - Domestic destination SIT delivery**\n*To create a paymentRequest for this service item, it must first have a final address set via [updateMTOServiceItem](#operation/updateMTOServiceItem).*\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DDSHUT - Domestic destination shuttle service**\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n---\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "createPaymentRequest",
        "operationId": "createPaymentRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreatePaymentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a paymentRequest object.",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "Request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/payment-requests/{paymentRequestID}/uploads": {
      "post": {
        "description": "### Functionality\nThis endpoint **uploads** a Proof of Service document for a PaymentRequest.\n\nThe PaymentRequest should already exist.\n\nOptional key of **isWeightTicket** indicates if the document is a weight ticket or not.\nThis will be used for partial and full deliveries and makes it easier for the Task Invoicing Officers to locate and review service item documents.\nIf left empty, it will assume it is NOT a weight ticket.\n\nThe formdata in the body of the POST request that is sent should look like this if it IS a weight ticket being attached to an existing payment request:\n  ` + "`" + `` + "`" + `` + "`" + `json\n  {\n    \"file\": \"filePath\",\n    \"isWeightTicket\": true\n  }\n  ` + "`" + `` + "`" + `` + "`" + `\n  If the proof of service doc is NOT a weight ticket, it will look like this - or you can leave it empty:\n  ` + "`" + `` + "`" + `` + "`" + `json\n  {\n    \"file\": \"filePath\",\n    \"isWeightTicket\": false\n  }\n  ` + "`" + `` + "`" + `` + "`" + `\n  ` + "`" + `` + "`" + `` + "`" + `json\n  {\n    \"file\": \"filePath\",\n  }\n  ` + "`" + `` + "`" + `` + "`" + `\n\nPaymentRequests are created with the [createPaymentRequest](#operation/createPaymentRequest) endpoint.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "createUpload",
        "operationId": "createUpload",
        "parameters": [
          {
            "type": "string",
            "description": "UUID of payment request to use.",
            "name": "paymentRequestID",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Indicates whether the file is a weight ticket.",
            "name": "isWeightTicket",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created upload of digital file.",
            "schema": {
              "$ref": "#/definitions/UploadWithOmissions"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/sit-address-updates": {
      "post": {
        "description": "**Functionality:**\nCreates an update request for a SIT service item's final delivery address.\nA newly created update request is assigned the status 'REQUESTED'  if the change in address\nis \u003e 50 miles and automatically approved otherwise.\n\n**Limitations:**\nThe update can be requested for APPROVED SIT service items only.\nOnly ONE request is allowed per approved SIT service item.\n\n**DEPRECATION ON AUGUST 5TH, 2024**\nFollowing deprecation, when updating a service item's final delivery address, you will need to update the shipment's destination address. This will update the destination SIT service items' final delivery address upon approval.\nFor ` + "`" + `APPROVED` + "`" + ` shipments, you can use [updateShipmentDestinationAddress](#mtoShipment/updateShipmentDestinationAddress)\nFor shipments in any other status, you can use [updateMTOShipmentAddress](#mtoShipment/updateMTOShipmentAddress)\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sitAddressUpdate"
        ],
        "summary": "createSITAddressUpdateRequest",
        "operationId": "createSITAddressUpdateRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateSITAddressUpdateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Succesfully created a SIT address update request.",
            "schema": {
              "$ref": "#/definitions/SitAddressUpdate"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "A postal address",
      "type": "object",
      "required": [
        "streetAddress1",
        "city",
        "state",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "county": {
          "type": "string",
          "title": "County",
          "x-nullable": true,
          "example": "LOS ANGELES"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "Amendments": {
      "description": "Metadata outlining number of amendments for given order.\n",
      "type": "object",
      "required": [
        "total",
        "availableSince"
      ],
      "properties": {
        "availableSince": {
          "description": "The total count of amendments available since specified time.",
          "type": "integer"
        },
        "total": {
          "description": "The total count of amendments.",
          "type": "integer"
        }
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateMTOShipment": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "shipmentType"
      ],
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "counselorRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "counselor approved"
        },
        "customerRemarks": {
          "description": "The customer can use the customer remarks field to inform the services counselor and the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\n\nCustomer enters this information during onboarding. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "description": "Where the movers should deliver this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "diversion": {
          "description": "This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion.\n",
          "type": "boolean"
        },
        "moveTaskOrderID": {
          "description": "The ID of the move this new shipment is for.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoServiceItems": {
          "description": "A list of service items connected to this shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "pickupAddress": {
          "description": "The address where the movers should pick up this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "pointOfContact": {
          "description": "Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.\n",
          "type": "string"
        },
        "ppmShipment": {
          "$ref": "#/definitions/CreatePPMShipment"
        },
        "primeEstimatedWeight": {
          "description": "The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contractor will need to contact the TOO to change it.\n",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "requestedPickupDate": {
          "description": "The customer's preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        }
      }
    },
    "CreatePPMShipment": {
      "description": "Creation object containing the ` + "`" + `PPM` + "`" + ` shipmentType specific data, not used for other shipment types.",
      "type": "object",
      "required": [
        "expectedDepartureDate",
        "sitExpected",
        "estimatedWeight",
        "hasProGear"
      ],
      "properties": {
        "destinationAddress": {
          "description": "The address of the destination location where goods are being delivered to.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "estimatedWeight": {
          "description": "The estimated weight of the PPM shipment goods being moved in pounds.",
          "type": "integer",
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to begin moving from their origin.\n",
          "type": "string",
          "format": "date"
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear for themselves or their spouse.\n",
          "type": "boolean"
        },
        "pickupAddress": {
          "description": "The address of the origin location where goods are being moved from.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "proGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to the service member in pounds.",
          "type": "integer",
          "x-nullable": true
        },
        "sitEstimatedDepartureDate": {
          "description": "The date that goods will exit the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedEntryDate": {
          "description": "The date that goods will first enter the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedWeight": {
          "description": "The estimated weight of the goods being put into storage in pounds.",
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "sitExpected": {
          "description": "Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.\n\nMust be set to ` + "`" + `true` + "`" + ` when providing ` + "`" + `sitLocation` + "`" + `, ` + "`" + `sitEstimatedWeight` + "`" + `, ` + "`" + `sitEstimatedEntryDate` + "`" + `, and ` + "`" + `sitEstimatedDepartureDate` + "`" + ` values to calculate the ` + "`" + `sitEstimatedCost` + "`" + `.\n",
          "type": "boolean"
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "spouseProGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to a spouse in pounds.",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "CreatePaymentRequest": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "serviceItems"
      ],
      "properties": {
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "pointOfContact": {
          "description": "Email or id of a contact person for this update.",
          "type": "string"
        },
        "serviceItems": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/ServiceItem"
          }
        }
      }
    },
    "CreateSITAddressUpdateRequest": {
      "description": "CreateSITAddressUpdateRequest contains the fields required for the prime to create a SIT address update request.",
      "type": "object",
      "required": [
        "contractorRemarks"
      ],
      "properties": {
        "contractorRemarks": {
          "type": "string",
          "example": "Customer reached out to me this week \u0026 let me know they want to move closer to family."
        },
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "newAddress": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "CreateSITExtension": {
      "description": "CreateSITExtension contains the fields required for the prime to create a SIT Extension request.",
      "type": "object",
      "required": [
        "requestReason",
        "contractorRemarks",
        "requestedDays"
      ],
      "properties": {
        "contractorRemarks": {
          "type": "string",
          "example": "We need SIT additional days. The customer has not found a house yet."
        },
        "requestReason": {
          "type": "string",
          "enum": [
            "SERIOUS_ILLNESS_MEMBER",
            "SERIOUS_ILLNESS_DEPENDENT",
            "IMPENDING_ASSIGNEMENT",
            "DIRECTED_TEMPORARY_DUTY",
            "NONAVAILABILITY_OF_CIVILIAN_HOUSING",
            "AWAITING_COMPLETION_OF_RESIDENCE",
            "OTHER"
          ]
        },
        "requestedDays": {
          "type": "integer",
          "minimum": 1,
          "example": 30
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "example": "COAST_GUARD"
        },
        "currentAddress": {
          "$ref": "#/definitions/Address"
        },
        "dodID": {
          "type": "string"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "example": "fake@example.com"
        },
        "emplid": {
          "type": "string"
        },
        "firstName": {
          "type": "string",
          "example": "Vanya"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string",
          "example": "Petrovna"
        },
        "phone": {
          "type": "string",
          "format": "telephone"
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "DestinationType": {
      "type": "string",
      "title": "Destination Type",
      "enum": [
        "HOME_OF_RECORD",
        "HOME_OF_SELECTION",
        "PLACE_ENTERED_ACTIVE_DUTY",
        "OTHER_THAN_AUTHORIZED"
      ],
      "x-nullable": true,
      "example": "OTHER_THAN_AUTHORIZED"
    },
    "DutyLocation": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "addressID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        }
      }
    },
    "Entitlements": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "gunSafe": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "571008b1-b0de-454d-b843-d71be9f02c04"
        },
        "nonTemporaryStorage": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "organizationalClothingAndIndividualEquipment": {
          "type": "boolean",
          "example": false
        },
        "privatelyOwnedVehicle": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "proGearWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 2000
        },
        "proGearWeightSpouse": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "requiredMedicalEquipmentWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "storageInTransit": {
          "type": "integer",
          "example": 90
        },
        "totalDependents": {
          "type": "integer",
          "example": 2
        },
        "totalWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "title",
        "detail"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "ExcessWeightRecord": {
      "description": "A document uploaded by the movers proving that the customer has been counseled about excess weight.",
      "allOf": [
        {
          "$ref": "#/definitions/UploadWithOmissions"
        },
        {
          "type": "object",
          "required": [
            "moveId"
          ],
          "properties": {
            "moveExcessWeightAcknowledgedAt": {
              "description": "The date and time when the TOO acknowledged the excess weight alert, either by dismissing the risk or updating the max billable weight. This will occur after the excess weight record has been uploaded.\n",
              "type": "string",
              "format": "date-time",
              "x-nullable": true,
              "x-omitempty": false,
              "readOnly": true
            },
            "moveExcessWeightQualifiedAt": {
              "description": "The date and time when the sum of all the move's shipments met the excess weight qualification threshold. The system monitors these weights and will update this field automatically.\n",
              "type": "string",
              "format": "date-time",
              "x-nullable": true,
              "x-omitempty": false,
              "readOnly": true
            },
            "moveId": {
              "description": "The UUID of the move this excess weight record belongs to.",
              "type": "string",
              "format": "uuid",
              "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
            }
          }
        }
      ]
    },
    "ListMove": {
      "description": "An abbreviated definition for a move, without all the nested information (shipments, service items, etc). Used to fetch a list of moves more efficiently.\n",
      "type": "object",
      "properties": {
        "amendments": {
          "$ref": "#/definitions/Amendments"
        },
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveCode": {
          "type": "string",
          "readOnly": true,
          "example": "HYXFJF"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ppmType": {
          "type": "string",
          "enum": [
            "FULL",
            "PARTIAL"
          ]
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ListMoves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ListMove"
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "$ref": "#/definitions/MTOAgentType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})?$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "The ID of the agent.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "description": "The ID of the shipment this agent is permitted to release/receive.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^([2-9]\\d{2}-\\d{3}-\\d{4})?$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOAgentType": {
      "description": "The type for this agent. ` + "`" + `RELEASING` + "`" + ` means they have authority on pickup, ` + "`" + `RECEIVING` + "`" + ` means they can receive the shipment on delivery.\n",
      "type": "string",
      "title": "Agent Type",
      "enum": [
        "RELEASING_AGENT",
        "RECEIVING_AGENT"
      ],
      "example": "RELEASING_AGENT"
    },
    "MTOAgents": {
      "description": "A list of the agents for a shipment. Agents are the people who the Prime contractor recognize as permitted to release (in the case of pickup) or receive (on delivery) a shipment.\n",
      "type": "array",
      "maxItems": 2,
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOServiceItem": {
      "description": "MTOServiceItem describes a base type of a service item. Polymorphic type.",
      "type": "object",
      "required": [
        "modelType",
        "moveTaskOrderID"
      ],
      "properties": {
        "eTag": {
          "description": "A hash unique to this service item that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "The ID of the service item.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "modelType": {
          "$ref": "#/definitions/MTOServiceItemModelType"
        },
        "moveTaskOrderID": {
          "description": "The ID of the move for this service item.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "description": "The ID of the shipment this service is for, if any. Optional.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "description": "The full descriptive name of the service.",
          "type": "string",
          "readOnly": true
        },
        "rejectionReason": {
          "description": "The reason why this service item was rejected by the TOO.",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "item was too heavy"
        },
        "serviceRequestDocuments": {
          "$ref": "#/definitions/ServiceRequestDocuments"
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        }
      },
      "discriminator": "modelType"
    },
    "MTOServiceItemBasic": {
      "description": "Describes a basic service item subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode"
          ],
          "properties": {
            "reServiceCode": {
              "$ref": "#/definitions/ReServiceCode"
            }
          }
        }
      ]
    },
    "MTOServiceItemDestSIT": {
      "description": "Describes a domestic destination SIT service item. Subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "sitEntryDate",
            "reason"
          ],
          "properties": {
            "dateOfContact1": {
              "description": "Date of attempted contact by the prime corresponding to ` + "`" + `timeMilitary1` + "`" + `.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "dateOfContact2": {
              "description": "Date of attempted contact by the prime corresponding to ` + "`" + `timeMilitary2` + "`" + `.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "firstAvailableDeliveryDate1": {
              "description": "First available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "firstAvailableDeliveryDate2": {
              "description": "Second available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDFSIT",
                "DDASIT"
              ]
            },
            "reason": {
              "description": "The reason item has been placed in SIT.\n",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": false
            },
            "sitAddressUpdates": {
              "$ref": "#/definitions/SitAddressUpdates"
            },
            "sitCustomerContacted": {
              "description": "Date when the customer contacted the prime for a delivery out of SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitDestinationFinalAddress": {
              "$ref": "#/definitions/Address"
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT",
              "type": "string",
              "format": "date"
            },
            "sitRequestedDelivery": {
              "description": "Date when the customer has requested delivery out of SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "timeMilitary1": {
              "description": "Time of attempted contact corresponding to ` + "`" + `dateOfContact1` + "`" + `, in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "x-nullable": true,
              "example": "1400Z"
            },
            "timeMilitary2": {
              "description": "Time of attempted contact corresponding to ` + "`" + `dateOfContact2` + "`" + `, in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "x-nullable": true,
              "example": "1400Z"
            }
          }
        }
      ]
    },
    "MTOServiceItemDimension": {
      "description": "The dimensions for either the item or the crate associated with a crating service item.",
      "type": "object",
      "required": [
        "length",
        "width",
        "height"
      ],
      "properties": {
        "height": {
          "description": "Height in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "length": {
          "description": "Length in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "width": {
          "description": "Width in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        }
      }
    },
    "MTOServiceItemDomesticCrating": {
      "description": "Describes a domestic crating/uncrating service item subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "item",
            "crate",
            "description"
          ],
          "properties": {
            "crate": {
              "description": "The dimensions for the crate the item will be shipped in.",
              "allOf": [
                {
                  "$ref": "#/definitions/MTOServiceItemDimension"
                }
              ]
            },
            "description": {
              "description": "A description of the item being crated.",
              "type": "string",
              "example": "Decorated horse head to be crated."
            },
            "item": {
              "description": "The dimensions of the item being crated.",
              "allOf": [
                {
                  "$ref": "#/definitions/MTOServiceItemDimension"
                }
              ]
            },
            "reServiceCode": {
              "description": "A unique code for the service item. Indicates if the service is for crating (DCRT) or uncrating (DUCRT).",
              "type": "string",
              "enum": [
                "DCRT",
                "DUCRT"
              ]
            },
            "reason": {
              "description": "The contractor's explanation for why an item needed to be crated or uncrated. Used by the TOO while deciding to approve or reject the service item.\n",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": false,
              "example": "Storage items need to be picked up"
            },
            "standaloneCrate": {
              "type": "boolean",
              "x-nullable": true
            }
          }
        }
      ]
    },
    "MTOServiceItemModelType": {
      "description": "Describes all model sub-types for a MTOServiceItem model.\n\nUsing this list, choose the correct modelType in the dropdown, corresponding to the service item type.\n  * DOFSIT, DOASIT - MTOServiceItemOriginSIT\n  * DDFSIT, DDASIT - MTOServiceItemDestSIT\n  * DOSHUT, DDSHUT - MTOServiceItemShuttle\n  * DCRT, DUCRT - MTOServiceItemDomesticCrating\n\nThe documentation will then update with the supported fields.\n",
      "type": "string",
      "enum": [
        "MTOServiceItemBasic",
        "MTOServiceItemOriginSIT",
        "MTOServiceItemDestSIT",
        "MTOServiceItemShuttle",
        "MTOServiceItemDomesticCrating"
      ]
    },
    "MTOServiceItemOriginSIT": {
      "description": "Describes a domestic origin SIT service item. Subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "reason",
            "sitPostalCode",
            "sitEntryDate"
          ],
          "properties": {
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DOFSIT",
                "DOASIT"
              ]
            },
            "reason": {
              "description": "Explanation of why Prime is picking up SIT item.",
              "type": "string",
              "example": "Storage items need to be picked up"
            },
            "requestApprovalsRequestedStatus": {
              "type": "boolean"
            },
            "sitCustomerContacted": {
              "description": "Date when the customer contacted the prime for a delivery out of SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT",
              "type": "string",
              "format": "date"
            },
            "sitHHGActualOrigin": {
              "$ref": "#/definitions/Address"
            },
            "sitHHGOriginalOrigin": {
              "$ref": "#/definitions/Address"
            },
            "sitPostalCode": {
              "type": "string",
              "format": "zip",
              "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
              "example": "90210"
            },
            "sitRequestedDelivery": {
              "description": "Date when the customer has requested delivery out of SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            }
          }
        }
      ]
    },
    "MTOServiceItemShuttle": {
      "description": "Describes a shuttle service item.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reason",
            "reServiceCode"
          ],
          "properties": {
            "actualWeight": {
              "description": "A record of the actual weight that was shuttled. Provided by the movers, based on weight tickets.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4000
            },
            "estimatedWeight": {
              "description": "An estimate of how much weight from a shipment will be included in the shuttling service.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4200
            },
            "reServiceCode": {
              "description": "A unique code for the service item. Indicates if shuttling is requested for the shipment origin (` + "`" + `DOSHUT` + "`" + `) or destination (` + "`" + `DDSHUT` + "`" + `).\n",
              "type": "string",
              "enum": [
                "DOSHUT",
                "DDSHUT"
              ]
            },
            "reason": {
              "description": "The contractor's explanation for why a shuttle service is requested. Used by the TOO while deciding to approve or reject the service item.\n",
              "type": "string",
              "example": "Storage items need to be picked up."
            }
          }
        }
      ]
    },
    "MTOServiceItemStatus": {
      "description": "The status of a service item, indicating where it is in the TOO's approval process.",
      "type": "string",
      "enum": [
        "SUBMITTED",
        "APPROVED",
        "REJECTED"
      ],
      "readOnly": true
    },
    "MTOShipment": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/MTOShipmentWithoutServiceItems"
        }
      ],
      "properties": {
        "mtoServiceItems": {
          "description": "A list of service items connected to this shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          },
          "readOnly": true
        }
      }
    },
    "MTOShipmentType": {
      "description": "The type of shipment.\n  * ` + "`" + `HHG` + "`" + ` = Household goods move\n  * ` + "`" + `HHG_INTO_NTS_DOMESTIC` + "`" + ` = HHG into Non-temporary storage (NTS)\n  * ` + "`" + `HHG_OUTOF_NTS_DOMESTIC` + "`" + ` = HHG out of Non-temporary storage (NTS Release)\n  * ` + "`" + `PPM` + "`" + ` = Personally Procured Move also known as Do It Yourself (DITY)\n  * ` + "`" + `BOAT_HAUL_AWAY` + "`" + ` = Boat shipment that requires additional equipment to haul it to it's destination\n  * ` + "`" + `BOAT_TOW_AWAY` + "`" + ` = Boat shipment that has a road-worthy trailer\n  * ` + "`" + `MOBILE_HOME` + "`" + ` = Mobile Home shipment that a customer may move.\n",
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "BOAT_HAUL_AWAY",
        "BOAT_TOW_AWAY",
        "HHG",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "INTERNATIONAL_HHG",
        "INTERNATIONAL_UB",
        "MOBILE_HOME",
        "PPM"
      ],
      "x-display-value": {
        "BOAT_HAUL_AWAY": "Boat shipment that requires additional equipment to haul it to it's destination",
        "BOAT_TOW_AWAY": "Boat shipment that has a road-worthy trailer",
        "HHG": "Household goods move (HHG)",
        "HHG_INTO_NTS_DOMESTIC": "HHG into Non-temporary storage (NTS)",
        "HHG_OUTOF_NTS_DOMESTIC": "HHG out of Non-temporary storage (NTS Release)",
        "PPM": "Personally Procured Move also known as Do It Yourself (DITY)"
      },
      "example": "HHG"
    },
    "MTOShipmentWithoutServiceItems": {
      "type": "object",
      "properties": {
        "actualDeliveryDate": {
          "description": "The date when the Prime contractor actually delivered the shipment. Updated after-the-fact.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualPickupDate": {
          "description": "The date when the Prime contractor actually picked up the shipment. Updated after-the-fact.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualProGearWeight": {
          "description": "The actual weight of any pro gear being shipped.\n",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualSpouseProGearWeight": {
          "description": "The actual weight of any spouse pro gear being shipped.\n",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "approvedDate": {
          "description": "The date when the Task Ordering Officer first approved this shipment for the move.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "counselorRemarks": {
          "description": "The counselor can use the counselor remarks field to inform the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\n\nCounselors enters this information when creating or editing an MTO Shipment. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "customerRemarks": {
          "description": "The customer can use the customer remarks field to inform the services counselor and the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\n\nCustomer enters this information during onboarding. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "deliveryAddressUpdate": {
          "$ref": "#/definitions/ShipmentAddressUpdate"
        },
        "destinationAddress": {
          "description": "Where the movers should deliver this shipment. Often provided by the customer when they enter shipment details\nduring onboarding, if they know their new address already.\n\nMay be blank when entered by the customer, required when entered by the Prime. May not represent the true\nfinal destination due to the shipment being diverted or placed in SIT.\n",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "destinationSitAuthEndDate": {
          "description": "The SIT authorized end date for destination SIT.",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "destinationType": {
          "$ref": "#/definitions/DestinationType"
        },
        "diversion": {
          "description": "This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion.\n",
          "type": "boolean"
        },
        "diversionReason": {
          "description": "The reason the TOO provided when requesting a diversion for this shipment.\n",
          "type": "string",
          "x-nullable": true,
          "readOnly": true
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "firstAvailableDeliveryDate": {
          "description": "The date the Prime provides to the customer as the first possible delivery date so that they can plan their travel accordingly.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "The ID of the shipment.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "description": "The ID of the move for this shipment.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "ntsRecordedWeight": {
          "description": "The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 4500
        },
        "originSitAuthEndDate": {
          "description": "The SIT authorized end date for origin SIT.",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "pickupAddress": {
          "description": "The address where the movers should pick up this shipment, entered by the customer during onboarding when they enter shipment details.\n",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "pointOfContact": {
          "description": "Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.\n",
          "type": "string"
        },
        "ppmShipment": {
          "$ref": "#/definitions/PPMShipment"
        },
        "primeActualWeight": {
          "description": "The actual weight of the shipment, provided after the Prime packs, picks up, and weighs a customer's shipment.",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "primeEstimatedWeight": {
          "description": "The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contracter will need to contact the TOO to change it.\n",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "primeEstimatedWeightRecordedDate": {
          "description": "The date when the Prime contractor recorded the shipment's estimated weight.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "requestedDeliveryDate": {
          "description": "The customer's preferred delivery date.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "requestedPickupDate": {
          "description": "The date the customer selects during onboarding as their preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "requiredDeliveryDate": {
          "description": "The latest date by which the Prime can deliver a customer's shipment without violating the contract. This is calculated based on weight, distance, and the scheduled pickup date. It cannot be modified.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "reweigh": {
          "$ref": "#/definitions/Reweigh"
        },
        "scheduledDeliveryDate": {
          "description": "The date the Prime contractor scheduled to deliver this shipment after consultation with the customer.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "scheduledPickupDate": {
          "description": "The date the Prime contractor scheduled to pick up this shipment after consultation with the customer.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "secondaryDeliveryAddress": {
          "description": "A second delivery address for this shipment, if the customer entered one. An optional field.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "description": "A second pickup address for this shipment, if the customer entered one. An optional field.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "sitExtensions": {
          "$ref": "#/definitions/SITExtensions"
        },
        "status": {
          "description": "The status of a shipment, indicating where it is in the TOO's approval process. Can only be updated by the contractor in special circumstances.\n",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "APPROVED",
            "REJECTED",
            "CANCELLATION_REQUESTED",
            "CANCELED",
            "DIVERSION_REQUESTED"
          ],
          "readOnly": true
        },
        "storageFacility": {
          "allOf": [
            {
              "x-nullable": true
            },
            {
              "$ref": "#/definitions/StorageFacility"
            }
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOShipmentsWithoutServiceObjects": {
      "description": "A list of shipments without their associated service items.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipmentWithoutServiceItems"
      }
    },
    "MoveTaskOrder": {
      "type": "object",
      "required": [
        "mtoShipments",
        "mtoServiceItems",
        "paymentRequests"
      ],
      "properties": {
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "excessWeightAcknowledgedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "excessWeightQualifiedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "excessWeightUploadId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "a502b4f1-b9c4-4faf-8bdd-68292501bf26"
        },
        "moveCode": {
          "type": "string",
          "readOnly": true,
          "example": "HYXFJF"
        },
        "mtoServiceItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "mtoShipments": {
          "$ref": "#/definitions/MTOShipmentsWithoutServiceObjects"
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequests": {
          "$ref": "#/definitions/PaymentRequests"
        },
        "ppmEstimatedWeight": {
          "type": "integer"
        },
        "ppmType": {
          "type": "string",
          "enum": [
            "PARTIAL",
            "FULL"
          ]
        },
        "primeCounselingCompletedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "orderNumber",
        "rank",
        "linesOfAccounting"
      ],
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "customerID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "destinationDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "destinationDutyLocationGBLOC": {
          "type": "string",
          "example": "KKFA"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlements"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "linesOfAccounting": {
          "type": "string"
        },
        "orderNumber": {
          "type": "string"
        },
        "ordersType": {
          "$ref": "#/definitions/OrdersType"
        },
        "originDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "originDutyLocationGBLOC": {
          "type": "string",
          "example": "KKFA"
        },
        "rank": {
          "type": "string",
          "example": "E_5"
        },
        "reportByDate": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "LOCAL_MOVE",
        "RETIREMENT",
        "SEPARATION",
        "WOUNDED_WARRIOR",
        "BLUEBARK",
        "SAFETY"
      ],
      "x-display-value": {
        "BLUEBARK": "BLUEBARK",
        "LOCAL_MOVE": "Local Move",
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station",
        "RETIREMENT": "Retirement",
        "SAFETY": "Safety",
        "SEPARATION": "Separation",
        "WOUNDED_WARRIOR": "Wounded Warrior"
      }
    },
    "PPMShipment": {
      "description": "A personally procured move is a type of shipment that a service member moves themselves.",
      "required": [
        "id",
        "shipmentId",
        "createdAt",
        "status",
        "expectedDepartureDate",
        "sitExpected",
        "eTag"
      ],
      "properties": {
        "actualDestinationPostalCode": {
          "description": "The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "actualMoveDate": {
          "description": "The actual start date of when the PPM shipment left the origin.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualPickupPostalCode": {
          "description": "The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "advanceAmountReceived": {
          "description": "The amount received for an advance, or null if no advance is received.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "advanceAmountRequested": {
          "description": "The amount requested as an advance by the service member, up to a maximum percentage of the estimated incentive.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "approvedAt": {
          "description": "The timestamp of when the shipment was approved and the service member can begin their move.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "description": "The timestamp of when the PPM shipment was created (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "estimatedIncentive": {
          "description": "The estimated amount the government will pay the service member to move their belongings based on the moving date, locations, and shipment weight.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "estimatedWeight": {
          "description": "The estimated weight of the PPM shipment goods being moved in pounds.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to begin moving from their origin.\n",
          "type": "string",
          "format": "date"
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear for themselves or their spouse.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasReceivedAdvance": {
          "description": "Indicates whether an advance was received for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasRequestedAdvance": {
          "description": "Indicates whether an advance has been requested for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "The primary unique identifier of this PPM shipment",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "proGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to the service member in pounds.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "reviewedAt": {
          "description": "The timestamp of when the Service Counselor has reviewed all of the closeout documents.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "shipmentId": {
          "description": "The id of the parent MTOShipment record",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "sitEstimatedCost": {
          "description": "The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedDepartureDate": {
          "description": "The date that goods will exit the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedEntryDate": {
          "description": "The date that goods will first enter the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedWeight": {
          "description": "The estimated weight of the goods being put into storage in pounds.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        },
        "sitExpected": {
          "description": "Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.\n\nMust be set to ` + "`" + `true` + "`" + ` when providing ` + "`" + `sitLocation` + "`" + `, ` + "`" + `sitEstimatedWeight` + "`" + `, ` + "`" + `sitEstimatedEntryDate` + "`" + `, and ` + "`" + `sitEstimatedDepartureDate` + "`" + ` values to calculate the ` + "`" + `sitEstimatedCost` + "`" + `.\n",
          "type": "boolean"
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "spouseProGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to a spouse in pounds.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "status": {
          "$ref": "#/definitions/PPMShipmentStatus"
        },
        "submittedAt": {
          "description": "The timestamp of when the customer submitted their PPM documentation to the counselor for review.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "updatedAt": {
          "description": "The timestamp of when a property of this object was last updated (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "x-nullable": true
    },
    "PPMShipmentStatus": {
      "description": "Status of the PPM Shipment:\n  * **DRAFT**: The customer has created the PPM shipment but has not yet submitted their move for counseling.\n  * **SUBMITTED**: The shipment belongs to a move that has been submitted by the customer or has been created by a Service Counselor or Prime Contractor for a submitted move.\n  * **WAITING_ON_CUSTOMER**: The PPM shipment has been approved and the customer may now provide their actual move closeout information and documentation required to get paid.\n  * **NEEDS_ADVANCE_APPROVAL**: The shipment was counseled by the Prime Contractor and approved but an advance was requested so will need further financial approval from the government.\n  * **NEEDS_CLOSEOUT**: The customer has provided their closeout weight tickets, receipts, and expenses and certified it for the Service Counselor to approve, exclude or reject.\n  * **CLOSEOUT_COMPLETE**: The Service Counselor has reviewed all of the customer's PPM closeout documentation and authorizes the customer can download and submit their finalized SSW packet.\n",
      "type": "string",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "WAITING_ON_CUSTOMER",
        "NEEDS_ADVANCE_APPROVAL",
        "NEEDS_CLOSEOUT",
        "CLOSEOUT_COMPLETE"
      ],
      "readOnly": true
    },
    "PaymentRequest": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestNumber": {
          "type": "string",
          "readOnly": true,
          "example": "1234-5678-1"
        },
        "paymentServiceItems": {
          "$ref": "#/definitions/PaymentServiceItems"
        },
        "proofOfServiceDocs": {
          "$ref": "#/definitions/ProofOfServiceDocs"
        },
        "recalculationOfPaymentRequestID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "PaymentRequestStatus": {
      "type": "string",
      "title": "Payment Request Status",
      "enum": [
        "PENDING",
        "REVIEWED",
        "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
        "SENT_TO_GEX",
        "TPPS_RECEIVED",
        "PAID",
        "EDI_ERROR",
        "DEPRECATED"
      ]
    },
    "PaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentRequest"
      }
    },
    "PaymentServiceItem": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentServiceItemParams": {
          "$ref": "#/definitions/PaymentServiceItemParams"
        },
        "priceCents": {
          "type": "integer",
          "format": "cents",
          "title": "Price of the service item in cents",
          "x-nullable": true
        },
        "referenceID": {
          "format": "string",
          "readOnly": true,
          "example": "1234-5678-c56a4180"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentServiceItemStatus"
        }
      }
    },
    "PaymentServiceItemParam": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "key": {
          "$ref": "#/definitions/ServiceItemParamName"
        },
        "origin": {
          "$ref": "#/definitions/ServiceItemParamOrigin"
        },
        "paymentServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "type": {
          "$ref": "#/definitions/ServiceItemParamType"
        },
        "value": {
          "type": "string",
          "example": "3025"
        }
      }
    },
    "PaymentServiceItemParams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItemParam"
      }
    },
    "PaymentServiceItemStatus": {
      "type": "string",
      "title": "Payment Service Item Status",
      "enum": [
        "REQUESTED",
        "APPROVED",
        "DENIED",
        "SENT_TO_GEX",
        "PAID",
        "EDI_ERROR"
      ]
    },
    "PaymentServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItem"
      }
    },
    "ProofOfServiceDoc": {
      "type": "object",
      "properties": {
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadWithOmissions"
          }
        }
      }
    },
    "ProofOfServiceDocs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProofOfServiceDoc"
      }
    },
    "ReServiceCode": {
      "description": "This is the full list of service items that can be found on a shipment. Not all service items\nmay be requested by the Prime, but may be returned in a response.\n\nDocumentation of all the service items will be provided.\n",
      "type": "string",
      "enum": [
        "CS",
        "DBHF",
        "DBTF",
        "DCRT",
        "DDASIT",
        "DDDSIT",
        "DDFSIT",
        "DDP",
        "DDSHUT",
        "DLH",
        "DMHF",
        "DNPK",
        "DOASIT",
        "DOFSIT",
        "DOP",
        "DOPSIT",
        "DOSHUT",
        "DPK",
        "DSH",
        "DUCRT",
        "DUPK",
        "FSC",
        "IBHF",
        "IBTF",
        "ICOLH",
        "ICOUB",
        "ICRT",
        "ICRTSA",
        "IDASIT",
        "IDDSIT",
        "IDFSIT",
        "IDSHUT",
        "IHPK",
        "IHUPK",
        "INPK",
        "IOASIT",
        "IOCLH",
        "IOCUB",
        "IOFSIT",
        "IOOLH",
        "IOOUB",
        "IOPSIT",
        "IOSHUT",
        "IUBPK",
        "IUBUPK",
        "IUCRT",
        "MS",
        "NSTH",
        "NSTUB"
      ]
    },
    "Reweigh": {
      "description": "A reweigh  is when a shipment is weighed for a second time due to the request of a customer, the contractor, system or TOO.",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "requestedAt": {
          "type": "string",
          "format": "date-time"
        },
        "requestedBy": {
          "$ref": "#/definitions/ReweighRequester"
        },
        "shipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "verificationProvidedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "verificationReason": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "The reweigh was not performed due to some justification provided by the Prime"
        },
        "weight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        }
      }
    },
    "ReweighRequester": {
      "type": "string",
      "enum": [
        "CUSTOMER",
        "PRIME",
        "SYSTEM",
        "TOO"
      ]
    },
    "SITExtension": {
      "description": "A storage in transit (SIT) Extension is a request for an increase in the billable number of days a shipment is allowed to be in SIT.",
      "type": "object",
      "properties": {
        "approvedDays": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 30
        },
        "contractorRemarks": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "We need SIT additional days. The customer has not found a house yet."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "decisionDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "officeRemarks": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "requestReason": {
          "type": "string",
          "enum": [
            "SERIOUS_ILLNESS_MEMBER",
            "SERIOUS_ILLNESS_DEPENDENT",
            "IMPENDING_ASSIGNEMENT",
            "DIRECTED_TEMPORARY_DUTY",
            "NONAVAILABILITY_OF_CIVILIAN_HOUSING",
            "AWAITING_COMPLETION_OF_RESIDENCE",
            "OTHER"
          ]
        },
        "requestedDays": {
          "type": "integer",
          "example": 30
        },
        "status": {
          "enum": [
            "PENDING",
            "APPROVED",
            "DENIED"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SITExtensions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SITExtension"
      }
    },
    "SITLocationType": {
      "description": "The list of SIT location types.",
      "type": "string",
      "enum": [
        "ORIGIN",
        "DESTINATION"
      ]
    },
    "ServiceItem": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "params": {
          "description": "This should be populated for the following service items:\n  * DOASIT(Domestic origin Additional day SIT)\n  * DDASIT(Domestic destination Additional day SIT)\n\nBoth take in the following param keys:\n  * ` + "`" + `SITPaymentRequestStart` + "`" + `\n  * ` + "`" + `SITPaymentRequestEnd` + "`" + `\n\nThe value of each is a date string in the format \"YYYY-MM-DD\" (e.g. \"2023-01-15\")\n",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "example": "Service Item Parameter Name"
              },
              "value": {
                "type": "string",
                "example": "Service Item Parameter Value"
              }
            }
          }
        }
      }
    },
    "ServiceItemParamName": {
      "type": "string",
      "enum": [
        "ActualPickupDate",
        "ContractCode",
        "ContractYearName",
        "CubicFeetBilled",
        "CubicFeetCrating",
        "DimensionHeight",
        "DimensionLength",
        "DimensionWidth",
        "DistanceZip",
        "DistanceZipSITDest",
        "DistanceZipSITOrigin",
        "EIAFuelPrice",
        "EscalationCompounded",
        "FSCMultiplier",
        "FSCPriceDifferenceInCents",
        "FSCWeightBasedDistanceMultiplier",
        "IsPeak",
        "MarketDest",
        "MarketOrigin",
        "MTOAvailableToPrimeAt",
        "NTSPackingFactor",
        "NumberDaysSIT",
        "PriceAreaDest",
        "PriceAreaIntlDest",
        "PriceAreaIntlOrigin",
        "PriceAreaOrigin",
        "PriceRateOrFactor",
        "PSI_LinehaulDom",
        "PSI_LinehaulDomPrice",
        "PSI_LinehaulShort",
        "PSI_LinehaulShortPrice",
        "PSI_PriceDomDest",
        "PSI_PriceDomDestPrice",
        "PSI_PriceDomOrigin",
        "PSI_PriceDomOriginPrice",
        "PSI_ShippingLinehaulIntlCO",
        "PSI_ShippingLinehaulIntlCOPrice",
        "PSI_ShippingLinehaulIntlOC",
        "PSI_ShippingLinehaulIntlOCPrice",
        "PSI_ShippingLinehaulIntlOO",
        "PSI_ShippingLinehaulIntlOOPrice",
        "RateAreaNonStdDest",
        "RateAreaNonStdOrigin",
        "ReferenceDate",
        "RequestedPickupDate",
        "ServiceAreaDest",
        "ServiceAreaOrigin",
        "ServicesScheduleDest",
        "ServicesScheduleOrigin",
        "SITPaymentRequestEnd",
        "SITPaymentRequestStart",
        "SITScheduleDest",
        "SITScheduleOrigin",
        "SITServiceAreaDest",
        "SITServiceAreaOrigin",
        "WeightAdjusted",
        "WeightBilled",
        "WeightEstimated",
        "WeightOriginal",
        "WeightReweigh",
        "ZipDestAddress",
        "ZipPickupAddress",
        "ZipSITDestHHGFinalAddress",
        "ZipSITDestHHGOriginalAddress",
        "ZipSITOriginHHGActualAddress",
        "ZipSITOriginHHGOriginalAddress",
        "StandaloneCrate",
        "StandaloneCrateCap",
        "UncappedRequestTotal"
      ]
    },
    "ServiceItemParamOrigin": {
      "type": "string",
      "enum": [
        "PRIME",
        "SYSTEM",
        "PRICER",
        "PAYMENT_REQUEST"
      ]
    },
    "ServiceItemParamType": {
      "type": "string",
      "enum": [
        "STRING",
        "DATE",
        "INTEGER",
        "DECIMAL",
        "TIMESTAMP",
        "PaymentServiceItemUUID",
        "BOOLEAN"
      ]
    },
    "ServiceRequestDocument": {
      "type": "object",
      "properties": {
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadWithOmissions"
          }
        }
      }
    },
    "ServiceRequestDocuments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceRequestDocument"
      }
    },
    "ShipmentAddressUpdate": {
      "description": "This represents a destination address change request made by the Prime that is either auto-approved or requires review if the pricing criteria has changed. If criteria has changed, then it must be approved or rejected by a TOO.\n",
      "type": "object",
      "required": [
        "id",
        "status",
        "shipmentID",
        "originalAddress",
        "newAddress",
        "contractorRemarks"
      ],
      "properties": {
        "contractorRemarks": {
          "description": "The reason there is an address change.",
          "type": "string",
          "title": "Contractor Remarks",
          "readOnly": true,
          "example": "This is a contractor remark"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "newAddress": {
          "$ref": "#/definitions/Address"
        },
        "newSitDistanceBetween": {
          "description": "The distance between the original SIT address and requested new destination address of shipment",
          "type": "integer",
          "example": 88
        },
        "officeRemarks": {
          "description": "The TOO comment on approval or rejection.",
          "type": "string",
          "title": "Office Remarks",
          "x-nullable": true,
          "example": "This is an office remark"
        },
        "oldSitDistanceBetween": {
          "description": "The distance between the original SIT address and the previous/old destination address of shipment",
          "type": "integer",
          "example": 50
        },
        "originalAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "sitOriginalAddress": {
          "$ref": "#/definitions/Address"
        },
        "status": {
          "$ref": "#/definitions/ShipmentAddressUpdateStatus"
        }
      }
    },
    "ShipmentAddressUpdateStatus": {
      "type": "string",
      "title": "Status",
      "enum": [
        "REQUESTED",
        "REJECTED",
        "APPROVED"
      ],
      "x-display-value": {
        "APPROVED": "APPROVED",
        "REJECTED": "REJECTED",
        "REQUESTED": "REQUESTED"
      },
      "readOnly": true
    },
    "SitAddressUpdate": {
      "properties": {
        "contractorRemarks": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "Customer reached out to me this week \u0026 let me know they want to move closer to family."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "distance": {
          "type": "integer",
          "maximum": 50,
          "readOnly": true,
          "example": 25
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "ddd7bb48-4730-47c4-9781-6500384f4941"
        },
        "mtoServiceItemId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "12d9e103-5a56-4636-906d-6e993b97ef51"
        },
        "newAddress": {
          "$ref": "#/definitions/Address"
        },
        "newAddressId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "31a2ad3c-1682-4d5b-8423-ff40053a056b"
        },
        "officeRemarks": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "The customer has found a new house closer to base."
        },
        "oldAddress": {
          "$ref": "#/definitions/Address"
        },
        "oldAddressId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "31a2ad3c-1682-4d5b-8423-ff40053a056b"
        },
        "status": {
          "$ref": "#/definitions/SitAddressUpdateStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SitAddressUpdateStatus": {
      "description": "The status of a SIT address update, indicating where it is in the TOO's approval process.",
      "enum": [
        "REQUESTED",
        "APPROVED",
        "REJECTED"
      ]
    },
    "SitAddressUpdates": {
      "description": "A list of updates to a SIT service item address.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SitAddressUpdate"
      }
    },
    "StorageFacility": {
      "description": "The Storage Facility information for the shipment",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "facilityName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lotNumber": {
          "type": "string",
          "x-nullable": true
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        }
      }
    },
    "UpdateMTOServiceItem": {
      "description": "UpdateMTOServiceItem describes a base type of a service item. Polymorphic type. Both Move Task Orders and MTO Shipments will have MTO Service Items.",
      "type": "object",
      "required": [
        "modelType"
      ],
      "properties": {
        "id": {
          "description": "ID of the service item. Must match path.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "modelType": {
          "$ref": "#/definitions/UpdateMTOServiceItemModelType"
        }
      },
      "discriminator": "modelType"
    },
    "UpdateMTOServiceItemModelType": {
      "description": "Using this list, choose the correct modelType in the dropdown, corresponding to the service item type.\n  * DDDSIT - UpdateMTOServiceItemSIT\n  * DDFSIT - UpdateMTOServiceItemSIT\n  * DDASIT - UpdateMTOServiceItemSIT\n  * DOPSIT - UpdateMTOServiceItemSIT\n  * DOASIT - UpdateMTOServiceItemSIT\n  * DOFSIT - UpdateMTOServiceItemSIT\n  * DOSFSC - UpdateMTOServiceItemSIT\n  * DDSFSC - UpdateMTOServiceItemSIT\n  * DDSHUT - UpdateMTOServiceItemShuttle\n  * DOSHUT - UpdateMTOServiceItemShuttle\n\nThe documentation will then update with the supported fields.\n",
      "type": "string",
      "enum": [
        "UpdateMTOServiceItemSIT",
        "UpdateMTOServiceItemShuttle"
      ]
    },
    "UpdateMTOServiceItemSIT": {
      "description": "Subtype used to provide the departure date for origin or destination SIT. This is not creating a new service item but rather updating an existing service item.\n",
      "allOf": [
        {
          "$ref": "#/definitions/UpdateMTOServiceItem"
        },
        {
          "type": "object",
          "properties": {
            "dateOfContact1": {
              "description": "Date of attempted contact by the prime corresponding to 'timeMilitary1'.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "dateOfContact2": {
              "description": "Date of attempted contact by the prime corresponding to 'timeMilitary2'.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "firstAvailableDeliveryDate1": {
              "description": "First available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "firstAvailableDeliveryDate2": {
              "description": "Second available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDDSIT",
                "DDASIT",
                "DDFSIT",
                "DDSFSC",
                "DOPSIT",
                "DOASIT",
                "DOFSIT",
                "DOSFSC"
              ]
            },
            "requestApprovalsRequestedStatus": {
              "description": "Indicates if \"Approvals Requested\" status is being requested.",
              "type": "boolean",
              "x-nullable": true
            },
            "sitCustomerContacted": {
              "description": "Date when the customer contacted the prime for a delivery out of SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination.",
              "type": "string",
              "format": "date"
            },
            "sitDestinationFinalAddress": {
              "$ref": "#/definitions/Address"
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitPostalCode": {
              "type": "string",
              "format": "zip",
              "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
              "x-nullable": true,
              "example": "90210"
            },
            "sitRequestedDelivery": {
              "description": "Date when the customer has requested delivery out of SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "timeMilitary1": {
              "description": "Time of attempted contact by the prime corresponding to 'dateOfContact1', in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "x-nullable": true,
              "example": "1400Z"
            },
            "timeMilitary2": {
              "description": "Time of attempted contact by the prime corresponding to 'dateOfContact2', in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "x-nullable": true,
              "example": "1400Z"
            },
            "updateReason": {
              "description": "Reason for updating service item.",
              "type": "string",
              "x-nullable": true
            }
          }
        }
      ]
    },
    "UpdateMTOServiceItemShuttle": {
      "description": "Subtype used to provide the estimated weight and actual weight for shuttle. This is not creating a new service item but rather updating an existing service item.\n",
      "allOf": [
        {
          "$ref": "#/definitions/UpdateMTOServiceItem"
        },
        {
          "type": "object",
          "properties": {
            "actualWeight": {
              "description": "Provided by the movers, based on weight tickets. Relevant for shuttling (DDSHUT \u0026 DOSHUT) service items.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4000
            },
            "estimatedWeight": {
              "description": "An estimate of how much weight from a shipment will be included in a shuttling (DDSHUT \u0026 DOSHUT) service item.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4200
            },
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDSHUT",
                "DOSHUT"
              ]
            }
          }
        }
      ]
    },
    "UpdateMTOShipment": {
      "properties": {
        "actualDeliveryDate": {
          "description": "The date when the Prime contractor actually delivered the shipment. Updated after-the-fact.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualPickupDate": {
          "description": "The date when the Prime contractor actually picked up the shipment. Updated after-the-fact.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualProGearWeight": {
          "description": "The actual weight of any pro gear shipped during a move.",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "actualSpouseProGearWeight": {
          "description": "The actual weight of any pro gear shipped during a move.",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "counselorRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "counselor approved"
        },
        "destinationAddress": {
          "description": "Where the movers should deliver this shipment. Often provided by the customer when they enter shipment details\nduring onboarding, if they know their new address already.\n\nMay be blank when entered by the customer, required when entered by the Prime. May not represent the true\nfinal destination due to the shipment being diverted or placed in SIT.\n",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "destinationType": {
          "$ref": "#/definitions/DestinationType"
        },
        "diversion": {
          "description": "This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion.\n",
          "type": "boolean"
        },
        "firstAvailableDeliveryDate": {
          "description": "The date the Prime provides to the customer as the first possible delivery date so that they can plan their travel accordingly.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ntsRecordedWeight": {
          "description": "The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 4500
        },
        "pickupAddress": {
          "description": "The address where the movers should pick up this shipment, entered by the customer during onboarding when they enter shipment details.\n",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "pointOfContact": {
          "description": "Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.\n",
          "type": "string"
        },
        "ppmShipment": {
          "$ref": "#/definitions/UpdatePPMShipment"
        },
        "primeActualWeight": {
          "description": "The actual weight of the shipment, provided after the Prime packs, picks up, and weighs a customer's shipment.",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "primeEstimatedWeight": {
          "description": "The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contracter will need to contact the TOO to change it.\n",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "scheduledDeliveryDate": {
          "description": "The date the Prime contractor scheduled to deliver this shipment after consultation with the customer.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "scheduledPickupDate": {
          "description": "The date the Prime contractor scheduled to pick up this shipment after consultation with the customer.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "secondaryDeliveryAddress": {
          "description": "A second delivery address for this shipment, if the customer entered one. An optional field.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "description": "A second pickup address for this shipment, if the customer entered one. An optional field.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "storageFacility": {
          "allOf": [
            {
              "x-nullable": true
            },
            {
              "$ref": "#/definitions/StorageFacility"
            }
          ]
        }
      }
    },
    "UpdateMTOShipmentStatus": {
      "description": "Contains the statuses available to the Prime when updating the state of a shipment.",
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "CANCELED"
          ]
        }
      }
    },
    "UpdatePPMShipment": {
      "description": "The PPM specific fields of the shipment with values being changed",
      "type": "object",
      "properties": {
        "estimatedWeight": {
          "description": "The estimated weight of the PPM shipment goods being moved.",
          "type": "integer",
          "x-nullable": true,
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to begin moving from their origin.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear for themselves or their spouse.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "proGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to the service member.",
          "type": "integer",
          "x-nullable": true
        },
        "sitEstimatedDepartureDate": {
          "description": "The date that goods will exit the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedEntryDate": {
          "description": "The date that goods will first enter the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedWeight": {
          "description": "The estimated weight of the goods being put into storage.",
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "sitExpected": {
          "description": "Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.\n\nMust be set to ` + "`" + `true` + "`" + ` when providing ` + "`" + `sitLocation` + "`" + `, ` + "`" + `sitEstimatedWeight` + "`" + `, ` + "`" + `sitEstimatedEntryDate` + "`" + `, and ` + "`" + `sitEstimatedDepartureDate` + "`" + ` values to calculate the ` + "`" + `sitEstimatedCost` + "`" + `.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "spouseProGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to a spouse.",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "UpdateReweigh": {
      "description": "Contains the fields available to the Prime when updating a reweigh record.",
      "type": "object",
      "properties": {
        "verificationReason": {
          "description": "In lieu of a document being uploaded indicating why a reweigh did not occur.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "The reweigh was not performed because the shipment was already delivered"
        },
        "weight": {
          "description": "The total reweighed weight for the shipment in pounds.",
          "type": "integer",
          "minimum": 1,
          "x-formatting": "weight",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        }
      }
    },
    "UpdateShipmentDestinationAddress": {
      "description": "UpdateShipmentDestinationAddress contains the fields required for the prime to request an update for the destination address on an MTO Shipment.",
      "type": "object",
      "required": [
        "contractorRemarks",
        "newAddress"
      ],
      "properties": {
        "contractorRemarks": {
          "description": "This is the remark the Prime has entered, which would be the reason there is an address change.",
          "type": "string",
          "example": "Customer reached out to me this week and let me know they want to move somewhere else."
        },
        "newAddress": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "UploadWithOmissions": {
      "description": "An uploaded file.",
      "type": "object",
      "required": [
        "filename",
        "contentType",
        "bytes"
      ],
      "properties": {
        "bytes": {
          "type": "integer"
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "type": "string",
          "enum": [
            "INFECTED",
            "CLEAN",
            "PROCESSING"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "format": "uri",
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "type": "object",
          "required": [
            "invalidFields"
          ],
          "properties": {
            "invalidFields": {
              "type": "object",
              "additionalProperties": {
                "description": "List of errors for the field",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      ]
    }
  },
  "parameters": {
    "ifMatch": {
      "type": "string",
      "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
      "name": "If-Match",
      "in": "header",
      "required": true
    }
  },
  "responses": {
    "Conflict": {
      "description": "The request could not be processed because of conflict in the current state of the resource.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotImplemented": {
      "description": "The requested feature is still in development.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "ServerError": {
      "description": "A server error occurred.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "The request was unprocessable, likely due to bad input from the requester.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  },
  "tags": [
    {
      "description": "The **moveTaskOrder** represents a military move that has been sent to a contractor. It contains all the information about shipments, including service items, estimated weights, actual weights, requested and scheduled move dates, etc.\n",
      "name": "moveTaskOrder"
    },
    {
      "description": "A shipment is some (or all) of a customer's belongings picked up in one location and delivered to another location.\nAll of the items in a shipment are weighed and transported as a discrete unit. One move may include multiple shipments.\nAn **mtoShipment**, in particular, is a shipment that belongs to a [moveTaskOrder](#tag/moveTaskOrder).\n\nThe weights for all of the shipments in a move are combined and compared to the customer's weight allowance.\nIf the sum of the shipments is greater, the customer is liable for paying excess weight cost. Both the customer and\nthe contractor should keep this potential cost in mind when planning a move and the shipments within it.\n",
      "name": "mtoShipment"
    },
    {
      "description": "A service item is a service that the contractor can bill for. For example, if the movers pack and/or unpack a\ncustomer's belongings, those are billable services (packing and unpacking). All **mtoServiceItems** must be\napproved by the TOO before payment can be requested.\n\nThere are three types of service items: accessorial, MTO-level, and standard.\n\n**WIP:** Add an external link to an article that explains the different types of service items in more detail.\n",
      "name": "mtoServiceItem"
    },
    {
      "description": "The contractor submits a **paymentRequest** to the TIO for approval in order to be reimbursed for 1 or more\n**mtoServiceItems** on a **moveTaskOrder**. A service item can be on multiple payment requests if necessary.\n\nProof of service documentation may be uploaded for each **mtoServiceItem** in a **paymentRequest** after the payment\nrequest is created via the endpoint [createUpload](#operation/createUpload).\n\nAll weight entered should be in *pounds* and no other unit of measurement.\n",
      "name": "paymentRequest"
    },
    {
      "description": "**THIS ENDPOINT WILL BE DEPRECATED ON AUGUST 5TH, 2024 - REFER TO DESCRIPTION FOR DETAILS**\n\nA **sitAddressUpdate** is submitted when the prime or office user wishes to update the final address for an\napproved service item. sitAddressUpdates with a distance less than or equal to 50 miles will be automatically\napproved while a distance greater than 50 miles will typically require office user approval.\n",
      "name": "sitAddressUpdate"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Endpoints",
      "tags": [
        "moveTaskOrder",
        "mtoShipment",
        "mtoServiceItem",
        "paymentRequest",
        "sitAddressUpdate"
      ]
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Prime API is a RESTful API that enables the Prime contractor to request\ninformation about upcoming moves, update the details and status of those moves,\nand make payment requests. It uses Mutual TLS for authentication procedures.\n\nAll endpoints are located at ` + "`" + `/prime/v1/` + "`" + `.\n",
    "title": "MilMove Prime API",
    "contact": {
      "email": "milmove-developers@caci.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/prime/v1",
  "paths": {
    "/move-task-orders/{moveID}": {
      "get": {
        "description": "### Functionality\nThis endpoint gets an individual MoveTaskOrder by ID.\n\nIt will provide information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "getMoveTaskOrder",
        "operationId": "getMoveTaskOrder",
        "parameters": [
          {
            "type": "string",
            "description": "UUID or MoveCode of move task order to use.",
            "name": "moveID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve an individual move task order.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}/excess-weight-record": {
      "post": {
        "description": "Uploads an excess weight record, which is a document that proves that the movers or contractors have counseled the customer about their excess weight. Excess weight counseling should occur after the sum of the shipments for the customer's move crosses the excess weight alert threshold.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "createExcessWeightRecord",
        "operationId": "createExcessWeightRecord",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move being updated.",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully uploaded the excess weight record file.",
            "schema": {
              "$ref": "#/definitions/ExcessWeightRecord"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}/post-counseling-info": {
      "patch": {
        "description": "### Functionality\nThis endpoint **updates** the MoveTaskOrder to indicate that the Prime has completed Counseling.\nThis update uses the moveTaskOrderID provided in the path, updates the move status and marks child elements of the move to indicate the update.\nNo body object is expected for this request.\n\n**For Full/Partial PPMs**: This action is required so that the customer can start uploading their proof of service docs.\n\n**For other move types**: This action is required for auditing reasons so that we have a record of when the Prime counseled the customer.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "updateMTOPostCounselingInformation",
        "operationId": "updateMTOPostCounselingInformation",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order with post counseling information.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move task order to use.",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves": {
      "get": {
        "description": "Gets all moves that have been reviewed and approved by the TOO. The ` + "`" + `since` + "`" + ` parameter can be used to filter this\nlist down to only the moves that have been updated since the provided timestamp. A move will be considered\nupdated if the ` + "`" + `updatedAt` + "`" + ` timestamp on the move or on its orders, shipments, service items, or payment\nrequests, is later than the provided date and time.\n\n**WIP**: Include what causes moves to leave this list. Currently, once the ` + "`" + `availableToPrimeAt` + "`" + ` timestamp has\nbeen set, that move will always appear in this list.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "listMoves",
        "operationId": "listMoves",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Only return moves updated since this time. Formatted like \"2021-07-23T18:30:47.116Z\"",
            "name": "since",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moves. A successful fetch might still return zero moves.",
            "schema": {
              "$ref": "#/definitions/ListMoves"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/moves/{locator}/documents": {
      "get": {
        "description": "### Functionality\nThis endpoint downloads all uploaded move order documentations into one download file by locator.\n\n### Errors\n* The move must be in need counseling state.\n* The move client's origin duty location must not currently have gov counseling.\n",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Downloads move order as a PDF",
        "operationId": "downloadMoveOrder",
        "parameters": [
          {
            "type": "string",
            "description": "the locator code for move order to be downloaded",
            "name": "locator",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "ALL",
              "ORDERS",
              "AMENDMENTS"
            ],
            "type": "string",
            "default": "ALL",
            "description": "upload type",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Move Order PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-service-items": {
      "post": {
        "description": "Creates one or more MTOServiceItems. Not all service items may be created, please see details below.\n\nThis endpoint supports different body definitions. In the modelType field below, select the modelType corresponding\n to the service item you wish to create and the documentation will update with the new definition.\n\nUpon creation these items are associated with a Move Task Order and an MTO Shipment.\nThe request must include UUIDs for the MTO and MTO Shipment connected to this service item. Some service item types require\nadditional service items to be autogenerated when added - all created service items, autogenerated included,\nwill be returned in the response.\n\nTo update a service item, please use [updateMTOServiceItem](#operation/updateMTOServiceItem) endpoint.\n\n---\n\n**` + "`" + `MTOServiceItemOriginSIT` + "`" + `**\n\nMTOServiceItemOriginSIT is a subtype of MTOServiceItem.\n\nThis model type describes a domestic origin SIT service item. Items can be created using this\nmodel type with the following codes:\n\n**DOFSIT**\n\n**1st day origin SIT service item**. When a DOFSIT is requested, the API will auto-create the following group of service items:\n  * DOFSIT - Domestic origin 1st day SIT\n  * DOASIT - Domestic origin Additional day SIT\n  * DOPSIT - Domestic origin SIT pickup\n  * DOSFSC - Domestic origin SIT fuel surcharge\n\n**DOASIT**\n\n**Addt'l days origin SIT service item**. This represents an additional day of storage for the same item.\nAdditional DOASIT service items can be created and added to an existing shipment that **includes a DOFSIT service item**.\n\n---\n\n**` + "`" + `MTOServiceItemDestSIT` + "`" + `**\n\nMTOServiceItemDestSIT is a subtype of MTOServiceItem.\n\nThis model type describes a domestic destination SIT service item. Items can be created using this\nmodel type with the following codes:\n\n**DDFSIT**\n\n**1st day destination SIT service item**.\n\nThese additional fields are optional for creating a DDFSIT:\n  * ` + "`" + `firstAvailableDeliveryDate1` + "`" + `\n    * string \u003cdate\u003e\n    * First available date that Prime can deliver SIT service item.\n    * firstAvailableDeliveryDate1, dateOfContact1, and timeMilitary1 are required together\n  * ` + "`" + `dateOfContact1` + "`" + `\n    * string \u003cdate\u003e\n    * Date of attempted contact by the prime corresponding to ` + "`" + `timeMilitary1` + "`" + `\n    * dateOfContact1, timeMilitary1, and firstAvailableDeliveryDate1 are required together\n  * ` + "`" + `timeMilitary1` + "`" + `\n    * string\\d{4}Z\n    * Time of attempted contact corresponding to ` + "`" + `dateOfContact1` + "`" + `, in military format.\n    * timeMilitary1, dateOfContact1, and firstAvailableDeliveryDate1 are required together\n  * ` + "`" + `firstAvailableDeliveryDate2` + "`" + `\n    * string \u003cdate\u003e\n    * Second available date that Prime can deliver SIT service item.\n    * firstAvailableDeliveryDate2, dateOfContact2, and timeMilitary2 are required together\n  * ` + "`" + `dateOfContact2` + "`" + `\n    * string \u003cdate\u003e\n    * Date of attempted contact delivery by the prime corresponding to ` + "`" + `timeMilitary2` + "`" + `\n    * dateOfContact2, timeMilitary2, and firstAvailableDeliveryDate2 are required together\n  * ` + "`" + `timeMilitary2` + "`" + `\n    * string\\d{4}Z\n    * Time of attempted contact corresponding to ` + "`" + `dateOfContact2` + "`" + `, in military format.\n    * timeMilitary2, dateOfContact2, and firstAvailableDeliveryDate2 are required together\n\nWhen a DDFSIT is requested, the API will auto-create the following group of service items:\n  * DDFSIT - Domestic destination 1st day SIT\n  * DDASIT - Domestic destination Additional day SIT\n  * DDDSIT - Domestic destination SIT delivery\n  * DDSFSC - Domestic destination SIT fuel surcharge\n\n**NOTE** When providing the ` + "`" + `sitEntryDate` + "`" + ` value in the payload, please ensure that the date is not BEFORE\n` + "`" + `firstAvailableDeliveryDate1` + "`" + ` or ` + "`" + `firstAvailableDeliveryDate2` + "`" + `. If it is, you will receive an error response.\n\n**DDASIT**\n\n**Addt'l days destination SIT service item**. This represents an additional day of storage for the same item.\nAdditional DDASIT service items can be created and added to an existing shipment that **includes a DDFSIT service item**.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "createMTOServiceItem",
        "operationId": "createMTOServiceItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created an MTO service item.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MTOServiceItem"
              }
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-service-items/{mtoServiceItemID}": {
      "patch": {
        "description": "Updates MTOServiceItems after creation. Not all service items or fields may be updated, please see details below.\n\nThis endpoint supports different body definitions. In the modelType field below, select the modelType corresponding\n to the service item you wish to update and the documentation will update with the new definition.\n\n* Addresses: To update a destination service item's SIT destination final address, update the shipment destination address.\nFor approved shipments, please use [updateShipmentDestinationAddress](#mtoShipment/updateShipmentDestinationAddress).\nFor shipments not yet approved, please use [updateMTOShipmentAddress](#mtoShipment/updateMTOShipmentAddress).\n\n* SIT Service Items: Take note that when updating ` + "`" + `sitCustomerContacted` + "`" + `, ` + "`" + `sitDepartureDate` + "`" + `, or ` + "`" + `sitRequestedDelivery` + "`" + `, we want\nthose to be updated on ` + "`" + `DOASIT` + "`" + ` (for origin SIT) and ` + "`" + `DDASIT` + "`" + ` (for destination SIT). If updating those values in other service\nitems, the office users will not have as much attention to those values.\n\nTo create a service item, please use [createMTOServiceItem](#mtoServiceItem/createMTOServiceItem)) endpoint.\n\n* Resubmitting rejected SIT service items: This endpoint will handle the logic of changing the status of rejected SIT service items from\nREJECTED to SUBMITTED. Please provide the ` + "`" + `requestedApprovalsRequestedStatus: true` + "`" + ` when resubmitting as this will give attention to the TOO to\nreview the resubmitted SIT service item. Another note, ` + "`" + `updateReason` + "`" + ` must have a different value than the current ` + "`" + `reason` + "`" + ` value on the service item.\nIf this value is not updated, then an error will be sent back.\n\nThe following SIT service items can be resubmitted following a rejection:\n- DDASIT\n- DDDSIT\n- DDFSIT\n- DOASIT\n- DOPSIT\n- DOFSIT\n- DDSFSC\n- DOSFSC\n\nAt a MINIMUM, the payload for resubmitting a rejected SIT service item must look like this:\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"reServiceCode\": \"DDFSIT\",\n  \"updateReason\": \"A reason that differs from the previous reason\",\n  \"modelType\": \"UpdateMTOServiceItemSIT\",\n  \"requestApprovalsRequestedStatus\": true\n}\n` + "`" + `` + "`" + `` + "`" + `\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "updateMTOServiceItem",
        "operationId": "updateMTOServiceItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOServiceItem"
            }
          },
          {
            "type": "string",
            "description": "UUID of service item to update.",
            "name": "mtoServiceItemID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the MTO service item.",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-service-items/{mtoServiceItemID}/uploads": {
      "post": {
        "description": "### Functionality\n\nThis endpoint **uploads** a Service Request document for a\nServiceItem.\n\nThe ServiceItem should already exist.\n\nServiceItems are created with the\n[createMTOServiceItem](#operation/createMTOServiceItem)\nendpoint.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "createServiceRequestDocumentUpload",
        "operationId": "createServiceRequestDocumentUpload",
        "parameters": [
          {
            "type": "string",
            "description": "UUID of the service item to use.",
            "name": "mtoServiceItemID",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created upload of digital file.",
            "schema": {
              "$ref": "#/definitions/UploadWithOmissions"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments": {
      "post": {
        "description": "_[Deprecated: sunset on 2024-04-08]_ This endpoint is deprecated and will be removed in a future version.\nPlease use the new endpoint at ` + "`" + `/prime/v2/createMTOShipment` + "`" + ` instead.\n\nCreates a new shipment within the specified move. This endpoint should be used whenever the movers identify a\nneed for an additional shipment. The new shipment will be submitted to the TOO for review, and the TOO must\napprove it before the contractor can proceed with billing.\n\n**WIP**: The Prime should be notified by a push notification whenever the TOO approves a shipment connected to\none of their moves. Otherwise, the Prime can fetch the related move using the\n[getMoveTaskOrder](#operation/getMoveTaskOrder) endpoint and see if this shipment has the status ` + "`" + `\"APPROVED\"` + "`" + `.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOShipment",
        "operationId": "createMTOShipment",
        "parameters": [
          {
            "x-examples": {
              "application/json": {
                "hhg": {
                  "summary": "HHG",
                  "value": {
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "pickupAddress": {
                      "city": "Muldraugh",
                      "postalCode": "40155",
                      "state": "KY",
                      "streetAddress1": "204 South Prospect Lane"
                    },
                    "requestedPickupDate": "2022-12-31",
                    "shipmentType": "HHG"
                  }
                },
                "nts": {
                  "summary": "NTS",
                  "value": {
                    "agents": [
                      {
                        "agentType": "RELEASING_AGENT",
                        "email": "edgar.taylor@example.com",
                        "firstName": "Edgar",
                        "lastName": "Taylor",
                        "phone": "555-555-5555"
                      }
                    ],
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "pickupAddress": {
                      "city": "Muldraugh",
                      "postalCode": "40155",
                      "state": "KY",
                      "streetAddress1": "204 South Prospect Lane"
                    },
                    "requestedPickupDate": "2022-12-31",
                    "shipmentType": "HHG_INTO_NTS_DOMESTIC"
                  }
                },
                "nts-r": {
                  "summary": "NTS Release",
                  "value": {
                    "agents": [
                      {
                        "agentType": "RECEIVING_AGENT",
                        "email": "edgar.taylor@example.com",
                        "firstName": "Edgar",
                        "lastName": "Taylor",
                        "phone": "555-555-5555"
                      }
                    ],
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "shipmentType": "HHG_OUTOF_NTS_DOMESTIC"
                  }
                },
                "ppm": {
                  "summary": "PPM",
                  "value": {
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "ppmShipment": {
                      "estimatedWeight": 4999,
                      "expectedDepartureDate": "2022-10-01",
                      "hasProGear": false,
                      "sitExpected": false
                    },
                    "shipmentType": "PPM"
                  }
                }
              }
            },
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateMTOShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}": {
      "delete": {
        "description": "### Functionality\nThis endpoint deletes an individual shipment by ID.\n\n### Errors\n* The mtoShipment should be associated with an MTO that is available to prime.\n* The mtoShipment must be a PPM shipment.\n* Counseling should not have already been completed for the associated MTO.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "deleteMTOShipment",
        "operationId": "deleteMTOShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment to be deleted",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the MTO shipment."
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "_[Deprecated: sunset on August 5th, 2024]_ This endpoint is deprecated and will be removed in a future version.\nPlease use the new endpoint at ` + "`" + `/prime/v2/updateMTOShipment` + "`" + ` instead.\n\n**DEPRECATION ON AUGUST 5TH, 2024**\nFollowing deprecation, there is an edge case scenario where a PPM shipment with no addresses could be updated and it would also update the final destination SIT address\nfor SIT service items. This edge case has been removed as you should not be able to update items using this endpoint. Third-party APIs have confirmed they will require\ndeprecation for this change.\n\nUpdates an existing shipment for a move.\n\nNote that there are some restrictions on nested objects:\n\n* Service items: You cannot add or update service items using this endpoint. Please use [createMTOServiceItem](#operation/createMTOServiceItem) and [updateMTOServiceItem](#operation/updateMTOServiceItem) instead.\n* Agents: You cannot add or update agents using this endpoint. Please use [createMTOAgent](#operation/createMTOAgent) and [updateMTOAgent](#operation/updateMTOAgent) instead.\n* Addresses: You can add new addresses using this endpoint (and must use this endpoint to do so), but you cannot update existing ones. Please use [updateMTOShipmentAddress](#operation/updateMTOShipmentAddress) instead.\n\nThese restrictions are due to our [optimistic locking/concurrency control](https://transcom.github.io/mymove-docs/docs/dev/contributing/backend/use-optimistic-locking) mechanism.\n\nNote that some fields cannot be manually changed but will still be updated automatically, such as ` + "`" + `primeEstimatedWeightRecordedDate` + "`" + ` and ` + "`" + `requiredDeliveryDate` + "`" + `.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipment",
        "operationId": "updateMTOShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment being updated.",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "x-examples": {
              "application/json": {
                "hhg": {
                  "summary": "HHG",
                  "value": {
                    "actualPickupDate": "2022-12-29",
                    "destinationAddress": {
                      "city": "Great Bend",
                      "postalCode": "13643",
                      "state": "NY",
                      "streetAddress1": "6622 Airport Way S",
                      "streetAddress2": "#1430"
                    },
                    "firstAvailableDeliveryDate": "2023-01-04",
                    "pointOfContact": "peyton.wing@example.com",
                    "primeActualWeight": 4500,
                    "primeEstimatedWeight": 4250,
                    "scheduledPickupDate": "2022-12-30"
                  }
                },
                "nts": {
                  "summary": "NTS",
                  "value": {
                    "actualPickupDate": "2022-12-29",
                    "actualWeight": 4500,
                    "counselorRemarks": "Beware of dogs on property",
                    "estimatedWeight": 4250,
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "scheduledPickupDate": "2022-12-30"
                  }
                },
                "nts-r": {
                  "summary": "NTS Release",
                  "value": {
                    "destinationAddress": {
                      "city": "San Antonio",
                      "postalCode": "78245",
                      "state": "TX",
                      "streetAddress1": "812 S 129th Street"
                    },
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "ntsRecordedWeight": 4500
                  }
                },
                "ppm": {
                  "summary": "PPM",
                  "value": {
                    "moveTaskOrderId": "5691c951-c35c-49a8-a1d5-a4b7ea7b7ad8",
                    "ppmShipment": {
                      "hasProGear": true,
                      "proGearWeight": 830,
                      "sitEstimatedDepartureDate": "2022-10-13",
                      "sitEstimatedEntryDate": "2022-10-06",
                      "sitEstimatedWeight": 1760,
                      "sitExpected": true,
                      "sitLocation": "DESTINATION",
                      "spouseProGearWeight": 366
                    }
                  }
                }
              }
            },
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOShipment"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/addresses/{addressID}": {
      "put": {
        "description": "### Functionality\nThis endpoint is used to **update** the pickup, secondary, and destination addresses on an MTO Shipment. mto-shipments/{mtoShipmentID}/shipment-address-updates is for updating a delivery address. The address details completely replace the original, except for the UUID.\nTherefore a complete address should be sent in the request.\nWhen a destination address on a shipment is updated, the destination SIT service items address ID will also be updated so that shipment and service item final destinations match.\n\nThis endpoint **cannot create** an address.\nTo create an address on an MTO shipment, the caller must use [updateMTOShipment](#operation/updateMTOShipment) as the parent shipment has to be updated with the appropriate link to the address.\n\n### Errors\nThe address must be associated with the mtoShipment passed in the url.\nIn other words, it should be listed as pickupAddress, destinationAddress, secondaryPickupAddress or secondaryDeliveryAddress on the mtoShipment provided.\nIf it is not, caller will receive a **Conflict** Error.\n\nThe mtoShipment should be associated with an MTO that is available to prime.\nIf the caller requests an update to an address, and the shipment is not on an available MTO, the caller will receive a **NotFound** Error.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipmentAddress",
        "operationId": "updateMTOShipmentAddress",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the address",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the address being updated",
            "name": "addressID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the address.",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/agents": {
      "post": {
        "description": "### Functionality\nThis endpoint is used to **create** and add agents for an existing MTO Shipment. Only the fields being modified need to be sent in the request body.\n\n### Errors\nThe agent must always have a name and at least one method of contact (either ` + "`" + `email` + "`" + ` or ` + "`" + `phone` + "`" + `).\n\nThe agent must be associated with the MTO shipment passed in the url.\n\nThe shipment should be associated with an MTO that is available to the Pime.\nIf the caller requests a new agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOAgent",
        "operationId": "createMTOAgent",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the agent.",
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/agents/{agentID}": {
      "put": {
        "description": "### Functionality\nThis endpoint is used to **update** the agents for an MTO Shipment. Only the fields being modified need to be sent in the request body.\n\n### Errors:\nThe agent must always have a name and at least one method of contact (either ` + "`" + `email` + "`" + ` or ` + "`" + `phone` + "`" + `).\n\nThe agent must be associated with the MTO shipment passed in the url.\n\nThe shipment should be associated with an MTO that is available to the Prime.\nIf the caller requests an update to an agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOAgent",
        "operationId": "updateMTOAgent",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the agent being updated",
            "name": "agentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the agent.",
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/reweighs/{reweighID}": {
      "patch": {
        "description": "### Functionality\nThis endpoint can be used to update a reweigh with a new weight or to provide the reason why a reweigh did not occur.\nOnly one of weight or verificationReason should be sent in the request body.\n\nA reweigh is the second recorded weight for a shipment, as validated by certified weight tickets. Applies to one shipment.\nA reweigh can be triggered automatically, or requested by the customer or transportation office. Not all shipments are reweighed,\nso not all shipments will have a reweigh weight.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateReweigh",
        "operationId": "updateReweigh",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the reweigh",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the reweigh being updated",
            "name": "reweighID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateReweigh"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the reweigh.",
            "schema": {
              "$ref": "#/definitions/Reweigh"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/shipment-address-updates": {
      "post": {
        "description": "### Functionality\nThis endpoint is used so the Prime can request an **update** for the destination address on an MTO Shipment,\nafter the destination address has already been approved.\n\nThis endpoint and operation only supports the following shipment types:\n- HHG\n- NTSR\n\nFor HHG shipments, if automatically approved or TOO approves, this will update the final destination address values for destination SIT service items to be the same as the changed destination address that was approved.\n\nAddress updates will be automatically approved unless they change:\n  - The service area\n  - Mileage bracket for direct delivery\n  - the address and the distance between the old and new address is \u003e 50\n  - Domestic Short Haul to Domestic Line Haul or vice versa\n      - Shipments that start and end in one ZIP3 use Short Haul pricing\n      - Shipments that start and end in different ZIP3s use Line Haul pricing\n\nFor those, changes will require TOO approval.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateShipmentDestinationAddress",
        "operationId": "updateShipmentDestinationAddress",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the address",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateShipmentDestinationAddress"
            }
          },
          {
            "type": "string",
            "description": "Needs to be the eTag of the mtoShipment. Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the address update request.",
            "schema": {
              "$ref": "#/definitions/ShipmentAddressUpdate"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/sit-extensions": {
      "post": {
        "description": "### Functionality\nThis endpoint creates a storage in transit (SIT) extension request for a shipment. A SIT extension request is a request an\nincrease in the shipment day allowance for the number of days a shipment is allowed to be in SIT. The total SIT day allowance\nincludes time spent in both origin and destination SIT.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createSITExtension",
        "operationId": "createSITExtension",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSITExtension"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the sit extension request.",
            "schema": {
              "$ref": "#/definitions/SITExtension"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/status": {
      "patch": {
        "description": "### Functionality\nThis endpoint should be used by the Prime to confirm the cancellation of a shipment. It allows the shipment\nstatus to be changed to \"CANCELED.\" Currently, the Prime cannot update the shipment to any other status.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipmentStatus",
        "operationId": "updateMTOShipmentStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOShipmentStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the shipment's status.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/payment-requests": {
      "post": {
        "description": "Creates a new instance of a paymentRequest and is assigned the status ` + "`" + `PENDING` + "`" + `.\nA move task order can have multiple payment requests, and\na final payment request can be marked using boolean ` + "`" + `isFinal` + "`" + `.\n\nIf a ` + "`" + `PENDING` + "`" + ` payment request is recalculated,\na new payment request is created and the original request is\nmarked with the status ` + "`" + `DEPRECATED` + "`" + `.\n\n**NOTE**: In order to create a payment request for most service items, the shipment *must*\nbe updated with the ` + "`" + `PrimeActualWeight` + "`" + ` value via [updateMTOShipment](#operation/updateMTOShipment).\n\n**FSC - Fuel Surcharge** service items require ` + "`" + `ActualPickupDate` + "`" + ` to be updated on the shipment.\n\nA service item can be on several payment requests in the case of partial payment requests and payments.\n\nIn the request, if no params are necessary, then just the ` + "`" + `serviceItem` + "`" + ` ` + "`" + `id` + "`" + ` is required. For example:\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"isFinal\": false,\n  \"moveTaskOrderID\": \"uuid\",\n  \"serviceItems\": [\n    {\n      \"id\": \"uuid\",\n    },\n    {\n      \"id\": \"uuid\",\n      \"params\": [\n        {\n          \"key\": \"Service Item Parameter Name\",\n          \"value\": \"Service Item Parameter Value\"\n        }\n      ]\n    }\n  ],\n  \"pointOfContact\": \"string\"\n}\n` + "`" + `` + "`" + `` + "`" + `\n\nSIT Service Items \u0026 Accepted Payment Request Parameters:\n---\nIf ` + "`" + `WeightBilled` + "`" + ` is not provided then the full shipment weight (` + "`" + `PrimeActualWeight` + "`" + `) will be considered in the calculation.\n\n**NOTE**: Diversions have a unique calcuation for payment requests without a ` + "`" + `WeightBilled` + "`" + ` parameter.\n\nIf you created a payment request for a diversion and ` + "`" + `WeightBilled` + "`" + ` is not provided, then the following will be used in the calculation:\n- The lowest shipment weight (` + "`" + `PrimeActualWeight` + "`" + `) found in the diverted shipment chain.\n- The lowest reweigh weight found in the diverted shipment chain.\n\nThe diverted shipment chain is created by referencing the ` + "`" + `diversion` + "`" + ` boolean, ` + "`" + `divertedFromShipmentId` + "`" + ` UUID, and matching destination to pickup addresses.\nIf the chain cannot be established it will fall back to the ` + "`" + `PrimeActualWeight` + "`" + ` of the current shipment. This is utilized because diverted shipments are all one single shipment, but going to different locations.\nThe lowest weight found is the true shipment weight, and thus we search the chain of shipments for the lowest weight found.\n\n**DOFSIT - Domestic origin 1st day SIT**\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DOASIT - Domestic origin add'l SIT** *(SITPaymentRequestStart \u0026 SITPaymentRequestEnd are **REQUIRED**)*\n*To create a paymentRequest for this service item, the ` + "`" + `SITPaymentRequestStart` + "`" + ` and ` + "`" + `SITPaymentRequestEnd` + "`" + ` dates must not overlap previously requested SIT dates.*\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    },\n    {\n      \"key\": \"SITPaymentRequestStart\",\n      \"value\": \"date\"\n    },\n    {\n      \"key\": \"SITPaymentRequestEnd\",\n      \"value\": \"date\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DOPSIT - Domestic origin SIT pickup**\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DOSHUT - Domestic origin shuttle service**\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DDFSIT - Domestic destination 1st day SIT**\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DDASIT - Domestic destination add'l SIT** *(SITPaymentRequestStart \u0026 SITPaymentRequestEnd are **REQUIRED**)*\n*To create a paymentRequest for this service item, the ` + "`" + `SITPaymentRequestStart` + "`" + ` and ` + "`" + `SITPaymentRequestEnd` + "`" + ` dates must not overlap previously requested SIT dates.*\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    },\n    {\n      \"key\": \"SITPaymentRequestStart\",\n      \"value\": \"date\"\n    },\n    {\n      \"key\": \"SITPaymentRequestEnd\",\n      \"value\": \"date\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DDDSIT - Domestic destination SIT delivery**\n*To create a paymentRequest for this service item, it must first have a final address set via [updateMTOServiceItem](#operation/updateMTOServiceItem).*\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n\n**DDSHUT - Domestic destination shuttle service**\n` + "`" + `` + "`" + `` + "`" + `json\n  \"params\": [\n    {\n      \"key\": \"WeightBilled\",\n      \"value\": \"integer\"\n    }\n  ]\n` + "`" + `` + "`" + `` + "`" + `\n---\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "createPaymentRequest",
        "operationId": "createPaymentRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreatePaymentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a paymentRequest object.",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "Request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/payment-requests/{paymentRequestID}/uploads": {
      "post": {
        "description": "### Functionality\nThis endpoint **uploads** a Proof of Service document for a PaymentRequest.\n\nThe PaymentRequest should already exist.\n\nOptional key of **isWeightTicket** indicates if the document is a weight ticket or not.\nThis will be used for partial and full deliveries and makes it easier for the Task Invoicing Officers to locate and review service item documents.\nIf left empty, it will assume it is NOT a weight ticket.\n\nThe formdata in the body of the POST request that is sent should look like this if it IS a weight ticket being attached to an existing payment request:\n  ` + "`" + `` + "`" + `` + "`" + `json\n  {\n    \"file\": \"filePath\",\n    \"isWeightTicket\": true\n  }\n  ` + "`" + `` + "`" + `` + "`" + `\n  If the proof of service doc is NOT a weight ticket, it will look like this - or you can leave it empty:\n  ` + "`" + `` + "`" + `` + "`" + `json\n  {\n    \"file\": \"filePath\",\n    \"isWeightTicket\": false\n  }\n  ` + "`" + `` + "`" + `` + "`" + `\n  ` + "`" + `` + "`" + `` + "`" + `json\n  {\n    \"file\": \"filePath\",\n  }\n  ` + "`" + `` + "`" + `` + "`" + `\n\nPaymentRequests are created with the [createPaymentRequest](#operation/createPaymentRequest) endpoint.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "createUpload",
        "operationId": "createUpload",
        "parameters": [
          {
            "type": "string",
            "description": "UUID of payment request to use.",
            "name": "paymentRequestID",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Indicates whether the file is a weight ticket.",
            "name": "isWeightTicket",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created upload of digital file.",
            "schema": {
              "$ref": "#/definitions/UploadWithOmissions"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sit-address-updates": {
      "post": {
        "description": "**Functionality:**\nCreates an update request for a SIT service item's final delivery address.\nA newly created update request is assigned the status 'REQUESTED'  if the change in address\nis \u003e 50 miles and automatically approved otherwise.\n\n**Limitations:**\nThe update can be requested for APPROVED SIT service items only.\nOnly ONE request is allowed per approved SIT service item.\n\n**DEPRECATION ON AUGUST 5TH, 2024**\nFollowing deprecation, when updating a service item's final delivery address, you will need to update the shipment's destination address. This will update the destination SIT service items' final delivery address upon approval.\nFor ` + "`" + `APPROVED` + "`" + ` shipments, you can use [updateShipmentDestinationAddress](#mtoShipment/updateShipmentDestinationAddress)\nFor shipments in any other status, you can use [updateMTOShipmentAddress](#mtoShipment/updateMTOShipmentAddress)\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sitAddressUpdate"
        ],
        "summary": "createSITAddressUpdateRequest",
        "operationId": "createSITAddressUpdateRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateSITAddressUpdateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Succesfully created a SIT address update request.",
            "schema": {
              "$ref": "#/definitions/SitAddressUpdate"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The request was unprocessable, likely due to bad input from the requester.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "A postal address",
      "type": "object",
      "required": [
        "streetAddress1",
        "city",
        "state",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "county": {
          "type": "string",
          "title": "County",
          "x-nullable": true,
          "example": "LOS ANGELES"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "Amendments": {
      "description": "Metadata outlining number of amendments for given order.\n",
      "type": "object",
      "required": [
        "total",
        "availableSince"
      ],
      "properties": {
        "availableSince": {
          "description": "The total count of amendments available since specified time.",
          "type": "integer"
        },
        "total": {
          "description": "The total count of amendments.",
          "type": "integer"
        }
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateMTOShipment": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "shipmentType"
      ],
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "counselorRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "counselor approved"
        },
        "customerRemarks": {
          "description": "The customer can use the customer remarks field to inform the services counselor and the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\n\nCustomer enters this information during onboarding. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "description": "Where the movers should deliver this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "diversion": {
          "description": "This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion.\n",
          "type": "boolean"
        },
        "moveTaskOrderID": {
          "description": "The ID of the move this new shipment is for.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoServiceItems": {
          "description": "A list of service items connected to this shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "pickupAddress": {
          "description": "The address where the movers should pick up this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "pointOfContact": {
          "description": "Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.\n",
          "type": "string"
        },
        "ppmShipment": {
          "$ref": "#/definitions/CreatePPMShipment"
        },
        "primeEstimatedWeight": {
          "description": "The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contractor will need to contact the TOO to change it.\n",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "requestedPickupDate": {
          "description": "The customer's preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        }
      }
    },
    "CreatePPMShipment": {
      "description": "Creation object containing the ` + "`" + `PPM` + "`" + ` shipmentType specific data, not used for other shipment types.",
      "type": "object",
      "required": [
        "expectedDepartureDate",
        "sitExpected",
        "estimatedWeight",
        "hasProGear"
      ],
      "properties": {
        "destinationAddress": {
          "description": "The address of the destination location where goods are being delivered to.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "estimatedWeight": {
          "description": "The estimated weight of the PPM shipment goods being moved in pounds.",
          "type": "integer",
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to begin moving from their origin.\n",
          "type": "string",
          "format": "date"
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear for themselves or their spouse.\n",
          "type": "boolean"
        },
        "pickupAddress": {
          "description": "The address of the origin location where goods are being moved from.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "proGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to the service member in pounds.",
          "type": "integer",
          "x-nullable": true
        },
        "sitEstimatedDepartureDate": {
          "description": "The date that goods will exit the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedEntryDate": {
          "description": "The date that goods will first enter the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedWeight": {
          "description": "The estimated weight of the goods being put into storage in pounds.",
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "sitExpected": {
          "description": "Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.\n\nMust be set to ` + "`" + `true` + "`" + ` when providing ` + "`" + `sitLocation` + "`" + `, ` + "`" + `sitEstimatedWeight` + "`" + `, ` + "`" + `sitEstimatedEntryDate` + "`" + `, and ` + "`" + `sitEstimatedDepartureDate` + "`" + ` values to calculate the ` + "`" + `sitEstimatedCost` + "`" + `.\n",
          "type": "boolean"
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "spouseProGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to a spouse in pounds.",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "CreatePaymentRequest": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "serviceItems"
      ],
      "properties": {
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "pointOfContact": {
          "description": "Email or id of a contact person for this update.",
          "type": "string"
        },
        "serviceItems": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/ServiceItem"
          }
        }
      }
    },
    "CreateSITAddressUpdateRequest": {
      "description": "CreateSITAddressUpdateRequest contains the fields required for the prime to create a SIT address update request.",
      "type": "object",
      "required": [
        "contractorRemarks"
      ],
      "properties": {
        "contractorRemarks": {
          "type": "string",
          "example": "Customer reached out to me this week \u0026 let me know they want to move closer to family."
        },
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "newAddress": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "CreateSITExtension": {
      "description": "CreateSITExtension contains the fields required for the prime to create a SIT Extension request.",
      "type": "object",
      "required": [
        "requestReason",
        "contractorRemarks",
        "requestedDays"
      ],
      "properties": {
        "contractorRemarks": {
          "type": "string",
          "example": "We need SIT additional days. The customer has not found a house yet."
        },
        "requestReason": {
          "type": "string",
          "enum": [
            "SERIOUS_ILLNESS_MEMBER",
            "SERIOUS_ILLNESS_DEPENDENT",
            "IMPENDING_ASSIGNEMENT",
            "DIRECTED_TEMPORARY_DUTY",
            "NONAVAILABILITY_OF_CIVILIAN_HOUSING",
            "AWAITING_COMPLETION_OF_RESIDENCE",
            "OTHER"
          ]
        },
        "requestedDays": {
          "type": "integer",
          "minimum": 1,
          "example": 30
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "example": "COAST_GUARD"
        },
        "currentAddress": {
          "$ref": "#/definitions/Address"
        },
        "dodID": {
          "type": "string"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "example": "fake@example.com"
        },
        "emplid": {
          "type": "string"
        },
        "firstName": {
          "type": "string",
          "example": "Vanya"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string",
          "example": "Petrovna"
        },
        "phone": {
          "type": "string",
          "format": "telephone"
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "DestinationType": {
      "type": "string",
      "title": "Destination Type",
      "enum": [
        "HOME_OF_RECORD",
        "HOME_OF_SELECTION",
        "PLACE_ENTERED_ACTIVE_DUTY",
        "OTHER_THAN_AUTHORIZED"
      ],
      "x-nullable": true,
      "example": "OTHER_THAN_AUTHORIZED"
    },
    "DutyLocation": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "addressID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        }
      }
    },
    "Entitlements": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "gunSafe": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "571008b1-b0de-454d-b843-d71be9f02c04"
        },
        "nonTemporaryStorage": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "organizationalClothingAndIndividualEquipment": {
          "type": "boolean",
          "example": false
        },
        "privatelyOwnedVehicle": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "proGearWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 2000
        },
        "proGearWeightSpouse": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "requiredMedicalEquipmentWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "storageInTransit": {
          "type": "integer",
          "example": 90
        },
        "totalDependents": {
          "type": "integer",
          "example": 2
        },
        "totalWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "title",
        "detail"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "ExcessWeightRecord": {
      "description": "A document uploaded by the movers proving that the customer has been counseled about excess weight.",
      "allOf": [
        {
          "$ref": "#/definitions/UploadWithOmissions"
        },
        {
          "type": "object",
          "required": [
            "moveId"
          ],
          "properties": {
            "moveExcessWeightAcknowledgedAt": {
              "description": "The date and time when the TOO acknowledged the excess weight alert, either by dismissing the risk or updating the max billable weight. This will occur after the excess weight record has been uploaded.\n",
              "type": "string",
              "format": "date-time",
              "x-nullable": true,
              "x-omitempty": false,
              "readOnly": true
            },
            "moveExcessWeightQualifiedAt": {
              "description": "The date and time when the sum of all the move's shipments met the excess weight qualification threshold. The system monitors these weights and will update this field automatically.\n",
              "type": "string",
              "format": "date-time",
              "x-nullable": true,
              "x-omitempty": false,
              "readOnly": true
            },
            "moveId": {
              "description": "The UUID of the move this excess weight record belongs to.",
              "type": "string",
              "format": "uuid",
              "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
            }
          }
        }
      ]
    },
    "ListMove": {
      "description": "An abbreviated definition for a move, without all the nested information (shipments, service items, etc). Used to fetch a list of moves more efficiently.\n",
      "type": "object",
      "properties": {
        "amendments": {
          "$ref": "#/definitions/Amendments"
        },
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveCode": {
          "type": "string",
          "readOnly": true,
          "example": "HYXFJF"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ppmType": {
          "type": "string",
          "enum": [
            "FULL",
            "PARTIAL"
          ]
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ListMoves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ListMove"
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "$ref": "#/definitions/MTOAgentType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})?$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "The ID of the agent.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "description": "The ID of the shipment this agent is permitted to release/receive.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^([2-9]\\d{2}-\\d{3}-\\d{4})?$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOAgentType": {
      "description": "The type for this agent. ` + "`" + `RELEASING` + "`" + ` means they have authority on pickup, ` + "`" + `RECEIVING` + "`" + ` means they can receive the shipment on delivery.\n",
      "type": "string",
      "title": "Agent Type",
      "enum": [
        "RELEASING_AGENT",
        "RECEIVING_AGENT"
      ],
      "example": "RELEASING_AGENT"
    },
    "MTOAgents": {
      "description": "A list of the agents for a shipment. Agents are the people who the Prime contractor recognize as permitted to release (in the case of pickup) or receive (on delivery) a shipment.\n",
      "type": "array",
      "maxItems": 2,
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOServiceItem": {
      "description": "MTOServiceItem describes a base type of a service item. Polymorphic type.",
      "type": "object",
      "required": [
        "modelType",
        "moveTaskOrderID"
      ],
      "properties": {
        "eTag": {
          "description": "A hash unique to this service item that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "The ID of the service item.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "modelType": {
          "$ref": "#/definitions/MTOServiceItemModelType"
        },
        "moveTaskOrderID": {
          "description": "The ID of the move for this service item.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "description": "The ID of the shipment this service is for, if any. Optional.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "description": "The full descriptive name of the service.",
          "type": "string",
          "readOnly": true
        },
        "rejectionReason": {
          "description": "The reason why this service item was rejected by the TOO.",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "item was too heavy"
        },
        "serviceRequestDocuments": {
          "$ref": "#/definitions/ServiceRequestDocuments"
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        }
      },
      "discriminator": "modelType"
    },
    "MTOServiceItemBasic": {
      "description": "Describes a basic service item subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode"
          ],
          "properties": {
            "reServiceCode": {
              "$ref": "#/definitions/ReServiceCode"
            }
          }
        }
      ]
    },
    "MTOServiceItemDestSIT": {
      "description": "Describes a domestic destination SIT service item. Subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "sitEntryDate",
            "reason"
          ],
          "properties": {
            "dateOfContact1": {
              "description": "Date of attempted contact by the prime corresponding to ` + "`" + `timeMilitary1` + "`" + `.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "dateOfContact2": {
              "description": "Date of attempted contact by the prime corresponding to ` + "`" + `timeMilitary2` + "`" + `.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "firstAvailableDeliveryDate1": {
              "description": "First available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "firstAvailableDeliveryDate2": {
              "description": "Second available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDFSIT",
                "DDASIT"
              ]
            },
            "reason": {
              "description": "The reason item has been placed in SIT.\n",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": false
            },
            "sitAddressUpdates": {
              "$ref": "#/definitions/SitAddressUpdates"
            },
            "sitCustomerContacted": {
              "description": "Date when the customer contacted the prime for a delivery out of SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitDestinationFinalAddress": {
              "$ref": "#/definitions/Address"
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT",
              "type": "string",
              "format": "date"
            },
            "sitRequestedDelivery": {
              "description": "Date when the customer has requested delivery out of SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "timeMilitary1": {
              "description": "Time of attempted contact corresponding to ` + "`" + `dateOfContact1` + "`" + `, in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "x-nullable": true,
              "example": "1400Z"
            },
            "timeMilitary2": {
              "description": "Time of attempted contact corresponding to ` + "`" + `dateOfContact2` + "`" + `, in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "x-nullable": true,
              "example": "1400Z"
            }
          }
        }
      ]
    },
    "MTOServiceItemDimension": {
      "description": "The dimensions for either the item or the crate associated with a crating service item.",
      "type": "object",
      "required": [
        "length",
        "width",
        "height"
      ],
      "properties": {
        "height": {
          "description": "Height in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "length": {
          "description": "Length in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "width": {
          "description": "Width in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        }
      }
    },
    "MTOServiceItemDomesticCrating": {
      "description": "Describes a domestic crating/uncrating service item subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "item",
            "crate",
            "description"
          ],
          "properties": {
            "crate": {
              "description": "The dimensions for the crate the item will be shipped in.",
              "allOf": [
                {
                  "$ref": "#/definitions/MTOServiceItemDimension"
                }
              ]
            },
            "description": {
              "description": "A description of the item being crated.",
              "type": "string",
              "example": "Decorated horse head to be crated."
            },
            "item": {
              "description": "The dimensions of the item being crated.",
              "allOf": [
                {
                  "$ref": "#/definitions/MTOServiceItemDimension"
                }
              ]
            },
            "reServiceCode": {
              "description": "A unique code for the service item. Indicates if the service is for crating (DCRT) or uncrating (DUCRT).",
              "type": "string",
              "enum": [
                "DCRT",
                "DUCRT"
              ]
            },
            "reason": {
              "description": "The contractor's explanation for why an item needed to be crated or uncrated. Used by the TOO while deciding to approve or reject the service item.\n",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": false,
              "example": "Storage items need to be picked up"
            },
            "standaloneCrate": {
              "type": "boolean",
              "x-nullable": true
            }
          }
        }
      ]
    },
    "MTOServiceItemModelType": {
      "description": "Describes all model sub-types for a MTOServiceItem model.\n\nUsing this list, choose the correct modelType in the dropdown, corresponding to the service item type.\n  * DOFSIT, DOASIT - MTOServiceItemOriginSIT\n  * DDFSIT, DDASIT - MTOServiceItemDestSIT\n  * DOSHUT, DDSHUT - MTOServiceItemShuttle\n  * DCRT, DUCRT - MTOServiceItemDomesticCrating\n\nThe documentation will then update with the supported fields.\n",
      "type": "string",
      "enum": [
        "MTOServiceItemBasic",
        "MTOServiceItemOriginSIT",
        "MTOServiceItemDestSIT",
        "MTOServiceItemShuttle",
        "MTOServiceItemDomesticCrating"
      ]
    },
    "MTOServiceItemOriginSIT": {
      "description": "Describes a domestic origin SIT service item. Subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "reason",
            "sitPostalCode",
            "sitEntryDate"
          ],
          "properties": {
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DOFSIT",
                "DOASIT"
              ]
            },
            "reason": {
              "description": "Explanation of why Prime is picking up SIT item.",
              "type": "string",
              "example": "Storage items need to be picked up"
            },
            "requestApprovalsRequestedStatus": {
              "type": "boolean"
            },
            "sitCustomerContacted": {
              "description": "Date when the customer contacted the prime for a delivery out of SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT",
              "type": "string",
              "format": "date"
            },
            "sitHHGActualOrigin": {
              "$ref": "#/definitions/Address"
            },
            "sitHHGOriginalOrigin": {
              "$ref": "#/definitions/Address"
            },
            "sitPostalCode": {
              "type": "string",
              "format": "zip",
              "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
              "example": "90210"
            },
            "sitRequestedDelivery": {
              "description": "Date when the customer has requested delivery out of SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            }
          }
        }
      ]
    },
    "MTOServiceItemShuttle": {
      "description": "Describes a shuttle service item.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reason",
            "reServiceCode"
          ],
          "properties": {
            "actualWeight": {
              "description": "A record of the actual weight that was shuttled. Provided by the movers, based on weight tickets.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4000
            },
            "estimatedWeight": {
              "description": "An estimate of how much weight from a shipment will be included in the shuttling service.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4200
            },
            "reServiceCode": {
              "description": "A unique code for the service item. Indicates if shuttling is requested for the shipment origin (` + "`" + `DOSHUT` + "`" + `) or destination (` + "`" + `DDSHUT` + "`" + `).\n",
              "type": "string",
              "enum": [
                "DOSHUT",
                "DDSHUT"
              ]
            },
            "reason": {
              "description": "The contractor's explanation for why a shuttle service is requested. Used by the TOO while deciding to approve or reject the service item.\n",
              "type": "string",
              "example": "Storage items need to be picked up."
            }
          }
        }
      ]
    },
    "MTOServiceItemStatus": {
      "description": "The status of a service item, indicating where it is in the TOO's approval process.",
      "type": "string",
      "enum": [
        "SUBMITTED",
        "APPROVED",
        "REJECTED"
      ],
      "readOnly": true
    },
    "MTOShipment": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/MTOShipmentWithoutServiceItems"
        }
      ],
      "properties": {
        "mtoServiceItems": {
          "description": "A list of service items connected to this shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          },
          "readOnly": true
        }
      }
    },
    "MTOShipmentType": {
      "description": "The type of shipment.\n  * ` + "`" + `HHG` + "`" + ` = Household goods move\n  * ` + "`" + `HHG_INTO_NTS_DOMESTIC` + "`" + ` = HHG into Non-temporary storage (NTS)\n  * ` + "`" + `HHG_OUTOF_NTS_DOMESTIC` + "`" + ` = HHG out of Non-temporary storage (NTS Release)\n  * ` + "`" + `PPM` + "`" + ` = Personally Procured Move also known as Do It Yourself (DITY)\n  * ` + "`" + `BOAT_HAUL_AWAY` + "`" + ` = Boat shipment that requires additional equipment to haul it to it's destination\n  * ` + "`" + `BOAT_TOW_AWAY` + "`" + ` = Boat shipment that has a road-worthy trailer\n  * ` + "`" + `MOBILE_HOME` + "`" + ` = Mobile Home shipment that a customer may move.\n",
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "BOAT_HAUL_AWAY",
        "BOAT_TOW_AWAY",
        "HHG",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "INTERNATIONAL_HHG",
        "INTERNATIONAL_UB",
        "MOBILE_HOME",
        "PPM"
      ],
      "x-display-value": {
        "BOAT_HAUL_AWAY": "Boat shipment that requires additional equipment to haul it to it's destination",
        "BOAT_TOW_AWAY": "Boat shipment that has a road-worthy trailer",
        "HHG": "Household goods move (HHG)",
        "HHG_INTO_NTS_DOMESTIC": "HHG into Non-temporary storage (NTS)",
        "HHG_OUTOF_NTS_DOMESTIC": "HHG out of Non-temporary storage (NTS Release)",
        "PPM": "Personally Procured Move also known as Do It Yourself (DITY)"
      },
      "example": "HHG"
    },
    "MTOShipmentWithoutServiceItems": {
      "type": "object",
      "properties": {
        "actualDeliveryDate": {
          "description": "The date when the Prime contractor actually delivered the shipment. Updated after-the-fact.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualPickupDate": {
          "description": "The date when the Prime contractor actually picked up the shipment. Updated after-the-fact.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualProGearWeight": {
          "description": "The actual weight of any pro gear being shipped.\n",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualSpouseProGearWeight": {
          "description": "The actual weight of any spouse pro gear being shipped.\n",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "approvedDate": {
          "description": "The date when the Task Ordering Officer first approved this shipment for the move.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "counselorRemarks": {
          "description": "The counselor can use the counselor remarks field to inform the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\n\nCounselors enters this information when creating or editing an MTO Shipment. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "customerRemarks": {
          "description": "The customer can use the customer remarks field to inform the services counselor and the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\n\nCustomer enters this information during onboarding. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "deliveryAddressUpdate": {
          "$ref": "#/definitions/ShipmentAddressUpdate"
        },
        "destinationAddress": {
          "description": "Where the movers should deliver this shipment. Often provided by the customer when they enter shipment details\nduring onboarding, if they know their new address already.\n\nMay be blank when entered by the customer, required when entered by the Prime. May not represent the true\nfinal destination due to the shipment being diverted or placed in SIT.\n",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "destinationSitAuthEndDate": {
          "description": "The SIT authorized end date for destination SIT.",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "destinationType": {
          "$ref": "#/definitions/DestinationType"
        },
        "diversion": {
          "description": "This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion.\n",
          "type": "boolean"
        },
        "diversionReason": {
          "description": "The reason the TOO provided when requesting a diversion for this shipment.\n",
          "type": "string",
          "x-nullable": true,
          "readOnly": true
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "firstAvailableDeliveryDate": {
          "description": "The date the Prime provides to the customer as the first possible delivery date so that they can plan their travel accordingly.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "The ID of the shipment.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "description": "The ID of the move for this shipment.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "ntsRecordedWeight": {
          "description": "The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 4500
        },
        "originSitAuthEndDate": {
          "description": "The SIT authorized end date for origin SIT.",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "pickupAddress": {
          "description": "The address where the movers should pick up this shipment, entered by the customer during onboarding when they enter shipment details.\n",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "pointOfContact": {
          "description": "Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.\n",
          "type": "string"
        },
        "ppmShipment": {
          "$ref": "#/definitions/PPMShipment"
        },
        "primeActualWeight": {
          "description": "The actual weight of the shipment, provided after the Prime packs, picks up, and weighs a customer's shipment.",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "primeEstimatedWeight": {
          "description": "The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contracter will need to contact the TOO to change it.\n",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "primeEstimatedWeightRecordedDate": {
          "description": "The date when the Prime contractor recorded the shipment's estimated weight.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "requestedDeliveryDate": {
          "description": "The customer's preferred delivery date.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "requestedPickupDate": {
          "description": "The date the customer selects during onboarding as their preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "requiredDeliveryDate": {
          "description": "The latest date by which the Prime can deliver a customer's shipment without violating the contract. This is calculated based on weight, distance, and the scheduled pickup date. It cannot be modified.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "reweigh": {
          "$ref": "#/definitions/Reweigh"
        },
        "scheduledDeliveryDate": {
          "description": "The date the Prime contractor scheduled to deliver this shipment after consultation with the customer.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "scheduledPickupDate": {
          "description": "The date the Prime contractor scheduled to pick up this shipment after consultation with the customer.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "secondaryDeliveryAddress": {
          "description": "A second delivery address for this shipment, if the customer entered one. An optional field.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "description": "A second pickup address for this shipment, if the customer entered one. An optional field.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "sitExtensions": {
          "$ref": "#/definitions/SITExtensions"
        },
        "status": {
          "description": "The status of a shipment, indicating where it is in the TOO's approval process. Can only be updated by the contractor in special circumstances.\n",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "APPROVED",
            "REJECTED",
            "CANCELLATION_REQUESTED",
            "CANCELED",
            "DIVERSION_REQUESTED"
          ],
          "readOnly": true
        },
        "storageFacility": {
          "allOf": [
            {
              "x-nullable": true
            },
            {
              "$ref": "#/definitions/StorageFacility"
            }
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOShipmentsWithoutServiceObjects": {
      "description": "A list of shipments without their associated service items.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipmentWithoutServiceItems"
      }
    },
    "MoveTaskOrder": {
      "type": "object",
      "required": [
        "mtoShipments",
        "mtoServiceItems",
        "paymentRequests"
      ],
      "properties": {
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "excessWeightAcknowledgedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "excessWeightQualifiedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "excessWeightUploadId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "a502b4f1-b9c4-4faf-8bdd-68292501bf26"
        },
        "moveCode": {
          "type": "string",
          "readOnly": true,
          "example": "HYXFJF"
        },
        "mtoServiceItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "mtoShipments": {
          "$ref": "#/definitions/MTOShipmentsWithoutServiceObjects"
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequests": {
          "$ref": "#/definitions/PaymentRequests"
        },
        "ppmEstimatedWeight": {
          "type": "integer"
        },
        "ppmType": {
          "type": "string",
          "enum": [
            "PARTIAL",
            "FULL"
          ]
        },
        "primeCounselingCompletedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "orderNumber",
        "rank",
        "linesOfAccounting"
      ],
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "customerID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "destinationDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "destinationDutyLocationGBLOC": {
          "type": "string",
          "example": "KKFA"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlements"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "linesOfAccounting": {
          "type": "string"
        },
        "orderNumber": {
          "type": "string"
        },
        "ordersType": {
          "$ref": "#/definitions/OrdersType"
        },
        "originDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "originDutyLocationGBLOC": {
          "type": "string",
          "example": "KKFA"
        },
        "rank": {
          "type": "string",
          "example": "E_5"
        },
        "reportByDate": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "LOCAL_MOVE",
        "RETIREMENT",
        "SEPARATION",
        "WOUNDED_WARRIOR",
        "BLUEBARK",
        "SAFETY"
      ],
      "x-display-value": {
        "BLUEBARK": "BLUEBARK",
        "LOCAL_MOVE": "Local Move",
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station",
        "RETIREMENT": "Retirement",
        "SAFETY": "Safety",
        "SEPARATION": "Separation",
        "WOUNDED_WARRIOR": "Wounded Warrior"
      }
    },
    "PPMShipment": {
      "description": "A personally procured move is a type of shipment that a service member moves themselves.",
      "required": [
        "id",
        "shipmentId",
        "createdAt",
        "status",
        "expectedDepartureDate",
        "sitExpected",
        "eTag"
      ],
      "properties": {
        "actualDestinationPostalCode": {
          "description": "The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "actualMoveDate": {
          "description": "The actual start date of when the PPM shipment left the origin.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualPickupPostalCode": {
          "description": "The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "advanceAmountReceived": {
          "description": "The amount received for an advance, or null if no advance is received.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "advanceAmountRequested": {
          "description": "The amount requested as an advance by the service member, up to a maximum percentage of the estimated incentive.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "approvedAt": {
          "description": "The timestamp of when the shipment was approved and the service member can begin their move.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "description": "The timestamp of when the PPM shipment was created (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "estimatedIncentive": {
          "description": "The estimated amount the government will pay the service member to move their belongings based on the moving date, locations, and shipment weight.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "estimatedWeight": {
          "description": "The estimated weight of the PPM shipment goods being moved in pounds.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to begin moving from their origin.\n",
          "type": "string",
          "format": "date"
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear for themselves or their spouse.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasReceivedAdvance": {
          "description": "Indicates whether an advance was received for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasRequestedAdvance": {
          "description": "Indicates whether an advance has been requested for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "The primary unique identifier of this PPM shipment",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "proGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to the service member in pounds.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "reviewedAt": {
          "description": "The timestamp of when the Service Counselor has reviewed all of the closeout documents.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "shipmentId": {
          "description": "The id of the parent MTOShipment record",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "sitEstimatedCost": {
          "description": "The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedDepartureDate": {
          "description": "The date that goods will exit the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedEntryDate": {
          "description": "The date that goods will first enter the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedWeight": {
          "description": "The estimated weight of the goods being put into storage in pounds.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        },
        "sitExpected": {
          "description": "Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.\n\nMust be set to ` + "`" + `true` + "`" + ` when providing ` + "`" + `sitLocation` + "`" + `, ` + "`" + `sitEstimatedWeight` + "`" + `, ` + "`" + `sitEstimatedEntryDate` + "`" + `, and ` + "`" + `sitEstimatedDepartureDate` + "`" + ` values to calculate the ` + "`" + `sitEstimatedCost` + "`" + `.\n",
          "type": "boolean"
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "spouseProGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to a spouse in pounds.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "status": {
          "$ref": "#/definitions/PPMShipmentStatus"
        },
        "submittedAt": {
          "description": "The timestamp of when the customer submitted their PPM documentation to the counselor for review.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "updatedAt": {
          "description": "The timestamp of when a property of this object was last updated (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "x-nullable": true
    },
    "PPMShipmentStatus": {
      "description": "Status of the PPM Shipment:\n  * **DRAFT**: The customer has created the PPM shipment but has not yet submitted their move for counseling.\n  * **SUBMITTED**: The shipment belongs to a move that has been submitted by the customer or has been created by a Service Counselor or Prime Contractor for a submitted move.\n  * **WAITING_ON_CUSTOMER**: The PPM shipment has been approved and the customer may now provide their actual move closeout information and documentation required to get paid.\n  * **NEEDS_ADVANCE_APPROVAL**: The shipment was counseled by the Prime Contractor and approved but an advance was requested so will need further financial approval from the government.\n  * **NEEDS_CLOSEOUT**: The customer has provided their closeout weight tickets, receipts, and expenses and certified it for the Service Counselor to approve, exclude or reject.\n  * **CLOSEOUT_COMPLETE**: The Service Counselor has reviewed all of the customer's PPM closeout documentation and authorizes the customer can download and submit their finalized SSW packet.\n",
      "type": "string",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "WAITING_ON_CUSTOMER",
        "NEEDS_ADVANCE_APPROVAL",
        "NEEDS_CLOSEOUT",
        "CLOSEOUT_COMPLETE"
      ],
      "readOnly": true
    },
    "PaymentRequest": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestNumber": {
          "type": "string",
          "readOnly": true,
          "example": "1234-5678-1"
        },
        "paymentServiceItems": {
          "$ref": "#/definitions/PaymentServiceItems"
        },
        "proofOfServiceDocs": {
          "$ref": "#/definitions/ProofOfServiceDocs"
        },
        "recalculationOfPaymentRequestID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "PaymentRequestStatus": {
      "type": "string",
      "title": "Payment Request Status",
      "enum": [
        "PENDING",
        "REVIEWED",
        "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
        "SENT_TO_GEX",
        "TPPS_RECEIVED",
        "PAID",
        "EDI_ERROR",
        "DEPRECATED"
      ]
    },
    "PaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentRequest"
      }
    },
    "PaymentServiceItem": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentServiceItemParams": {
          "$ref": "#/definitions/PaymentServiceItemParams"
        },
        "priceCents": {
          "type": "integer",
          "format": "cents",
          "title": "Price of the service item in cents",
          "x-nullable": true
        },
        "referenceID": {
          "format": "string",
          "readOnly": true,
          "example": "1234-5678-c56a4180"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentServiceItemStatus"
        }
      }
    },
    "PaymentServiceItemParam": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "key": {
          "$ref": "#/definitions/ServiceItemParamName"
        },
        "origin": {
          "$ref": "#/definitions/ServiceItemParamOrigin"
        },
        "paymentServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "type": {
          "$ref": "#/definitions/ServiceItemParamType"
        },
        "value": {
          "type": "string",
          "example": "3025"
        }
      }
    },
    "PaymentServiceItemParams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItemParam"
      }
    },
    "PaymentServiceItemStatus": {
      "type": "string",
      "title": "Payment Service Item Status",
      "enum": [
        "REQUESTED",
        "APPROVED",
        "DENIED",
        "SENT_TO_GEX",
        "PAID",
        "EDI_ERROR"
      ]
    },
    "PaymentServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItem"
      }
    },
    "ProofOfServiceDoc": {
      "type": "object",
      "properties": {
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadWithOmissions"
          }
        }
      }
    },
    "ProofOfServiceDocs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProofOfServiceDoc"
      }
    },
    "ReServiceCode": {
      "description": "This is the full list of service items that can be found on a shipment. Not all service items\nmay be requested by the Prime, but may be returned in a response.\n\nDocumentation of all the service items will be provided.\n",
      "type": "string",
      "enum": [
        "CS",
        "DBHF",
        "DBTF",
        "DCRT",
        "DDASIT",
        "DDDSIT",
        "DDFSIT",
        "DDP",
        "DDSHUT",
        "DLH",
        "DMHF",
        "DNPK",
        "DOASIT",
        "DOFSIT",
        "DOP",
        "DOPSIT",
        "DOSHUT",
        "DPK",
        "DSH",
        "DUCRT",
        "DUPK",
        "FSC",
        "IBHF",
        "IBTF",
        "ICOLH",
        "ICOUB",
        "ICRT",
        "ICRTSA",
        "IDASIT",
        "IDDSIT",
        "IDFSIT",
        "IDSHUT",
        "IHPK",
        "IHUPK",
        "INPK",
        "IOASIT",
        "IOCLH",
        "IOCUB",
        "IOFSIT",
        "IOOLH",
        "IOOUB",
        "IOPSIT",
        "IOSHUT",
        "IUBPK",
        "IUBUPK",
        "IUCRT",
        "MS",
        "NSTH",
        "NSTUB"
      ]
    },
    "Reweigh": {
      "description": "A reweigh  is when a shipment is weighed for a second time due to the request of a customer, the contractor, system or TOO.",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "requestedAt": {
          "type": "string",
          "format": "date-time"
        },
        "requestedBy": {
          "$ref": "#/definitions/ReweighRequester"
        },
        "shipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "verificationProvidedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "verificationReason": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "The reweigh was not performed due to some justification provided by the Prime"
        },
        "weight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        }
      }
    },
    "ReweighRequester": {
      "type": "string",
      "enum": [
        "CUSTOMER",
        "PRIME",
        "SYSTEM",
        "TOO"
      ]
    },
    "SITExtension": {
      "description": "A storage in transit (SIT) Extension is a request for an increase in the billable number of days a shipment is allowed to be in SIT.",
      "type": "object",
      "properties": {
        "approvedDays": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 30
        },
        "contractorRemarks": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "We need SIT additional days. The customer has not found a house yet."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "decisionDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "officeRemarks": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "requestReason": {
          "type": "string",
          "enum": [
            "SERIOUS_ILLNESS_MEMBER",
            "SERIOUS_ILLNESS_DEPENDENT",
            "IMPENDING_ASSIGNEMENT",
            "DIRECTED_TEMPORARY_DUTY",
            "NONAVAILABILITY_OF_CIVILIAN_HOUSING",
            "AWAITING_COMPLETION_OF_RESIDENCE",
            "OTHER"
          ]
        },
        "requestedDays": {
          "type": "integer",
          "example": 30
        },
        "status": {
          "enum": [
            "PENDING",
            "APPROVED",
            "DENIED"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SITExtensions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SITExtension"
      }
    },
    "SITLocationType": {
      "description": "The list of SIT location types.",
      "type": "string",
      "enum": [
        "ORIGIN",
        "DESTINATION"
      ]
    },
    "ServiceItem": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "params": {
          "description": "This should be populated for the following service items:\n  * DOASIT(Domestic origin Additional day SIT)\n  * DDASIT(Domestic destination Additional day SIT)\n\nBoth take in the following param keys:\n  * ` + "`" + `SITPaymentRequestStart` + "`" + `\n  * ` + "`" + `SITPaymentRequestEnd` + "`" + `\n\nThe value of each is a date string in the format \"YYYY-MM-DD\" (e.g. \"2023-01-15\")\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceItemParamsItems0"
          }
        }
      }
    },
    "ServiceItemParamName": {
      "type": "string",
      "enum": [
        "ActualPickupDate",
        "ContractCode",
        "ContractYearName",
        "CubicFeetBilled",
        "CubicFeetCrating",
        "DimensionHeight",
        "DimensionLength",
        "DimensionWidth",
        "DistanceZip",
        "DistanceZipSITDest",
        "DistanceZipSITOrigin",
        "EIAFuelPrice",
        "EscalationCompounded",
        "FSCMultiplier",
        "FSCPriceDifferenceInCents",
        "FSCWeightBasedDistanceMultiplier",
        "IsPeak",
        "MarketDest",
        "MarketOrigin",
        "MTOAvailableToPrimeAt",
        "NTSPackingFactor",
        "NumberDaysSIT",
        "PriceAreaDest",
        "PriceAreaIntlDest",
        "PriceAreaIntlOrigin",
        "PriceAreaOrigin",
        "PriceRateOrFactor",
        "PSI_LinehaulDom",
        "PSI_LinehaulDomPrice",
        "PSI_LinehaulShort",
        "PSI_LinehaulShortPrice",
        "PSI_PriceDomDest",
        "PSI_PriceDomDestPrice",
        "PSI_PriceDomOrigin",
        "PSI_PriceDomOriginPrice",
        "PSI_ShippingLinehaulIntlCO",
        "PSI_ShippingLinehaulIntlCOPrice",
        "PSI_ShippingLinehaulIntlOC",
        "PSI_ShippingLinehaulIntlOCPrice",
        "PSI_ShippingLinehaulIntlOO",
        "PSI_ShippingLinehaulIntlOOPrice",
        "RateAreaNonStdDest",
        "RateAreaNonStdOrigin",
        "ReferenceDate",
        "RequestedPickupDate",
        "ServiceAreaDest",
        "ServiceAreaOrigin",
        "ServicesScheduleDest",
        "ServicesScheduleOrigin",
        "SITPaymentRequestEnd",
        "SITPaymentRequestStart",
        "SITScheduleDest",
        "SITScheduleOrigin",
        "SITServiceAreaDest",
        "SITServiceAreaOrigin",
        "WeightAdjusted",
        "WeightBilled",
        "WeightEstimated",
        "WeightOriginal",
        "WeightReweigh",
        "ZipDestAddress",
        "ZipPickupAddress",
        "ZipSITDestHHGFinalAddress",
        "ZipSITDestHHGOriginalAddress",
        "ZipSITOriginHHGActualAddress",
        "ZipSITOriginHHGOriginalAddress",
        "StandaloneCrate",
        "StandaloneCrateCap",
        "UncappedRequestTotal"
      ]
    },
    "ServiceItemParamOrigin": {
      "type": "string",
      "enum": [
        "PRIME",
        "SYSTEM",
        "PRICER",
        "PAYMENT_REQUEST"
      ]
    },
    "ServiceItemParamType": {
      "type": "string",
      "enum": [
        "STRING",
        "DATE",
        "INTEGER",
        "DECIMAL",
        "TIMESTAMP",
        "PaymentServiceItemUUID",
        "BOOLEAN"
      ]
    },
    "ServiceItemParamsItems0": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "Service Item Parameter Name"
        },
        "value": {
          "type": "string",
          "example": "Service Item Parameter Value"
        }
      }
    },
    "ServiceRequestDocument": {
      "type": "object",
      "properties": {
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadWithOmissions"
          }
        }
      }
    },
    "ServiceRequestDocuments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceRequestDocument"
      }
    },
    "ShipmentAddressUpdate": {
      "description": "This represents a destination address change request made by the Prime that is either auto-approved or requires review if the pricing criteria has changed. If criteria has changed, then it must be approved or rejected by a TOO.\n",
      "type": "object",
      "required": [
        "id",
        "status",
        "shipmentID",
        "originalAddress",
        "newAddress",
        "contractorRemarks"
      ],
      "properties": {
        "contractorRemarks": {
          "description": "The reason there is an address change.",
          "type": "string",
          "title": "Contractor Remarks",
          "readOnly": true,
          "example": "This is a contractor remark"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "newAddress": {
          "$ref": "#/definitions/Address"
        },
        "newSitDistanceBetween": {
          "description": "The distance between the original SIT address and requested new destination address of shipment",
          "type": "integer",
          "minimum": 0,
          "example": 88
        },
        "officeRemarks": {
          "description": "The TOO comment on approval or rejection.",
          "type": "string",
          "title": "Office Remarks",
          "x-nullable": true,
          "example": "This is an office remark"
        },
        "oldSitDistanceBetween": {
          "description": "The distance between the original SIT address and the previous/old destination address of shipment",
          "type": "integer",
          "minimum": 0,
          "example": 50
        },
        "originalAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "sitOriginalAddress": {
          "$ref": "#/definitions/Address"
        },
        "status": {
          "$ref": "#/definitions/ShipmentAddressUpdateStatus"
        }
      }
    },
    "ShipmentAddressUpdateStatus": {
      "type": "string",
      "title": "Status",
      "enum": [
        "REQUESTED",
        "REJECTED",
        "APPROVED"
      ],
      "x-display-value": {
        "APPROVED": "APPROVED",
        "REJECTED": "REJECTED",
        "REQUESTED": "REQUESTED"
      },
      "readOnly": true
    },
    "SitAddressUpdate": {
      "properties": {
        "contractorRemarks": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "Customer reached out to me this week \u0026 let me know they want to move closer to family."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "distance": {
          "type": "integer",
          "maximum": 50,
          "readOnly": true,
          "example": 25
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "ddd7bb48-4730-47c4-9781-6500384f4941"
        },
        "mtoServiceItemId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "12d9e103-5a56-4636-906d-6e993b97ef51"
        },
        "newAddress": {
          "$ref": "#/definitions/Address"
        },
        "newAddressId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "31a2ad3c-1682-4d5b-8423-ff40053a056b"
        },
        "officeRemarks": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "The customer has found a new house closer to base."
        },
        "oldAddress": {
          "$ref": "#/definitions/Address"
        },
        "oldAddressId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "31a2ad3c-1682-4d5b-8423-ff40053a056b"
        },
        "status": {
          "$ref": "#/definitions/SitAddressUpdateStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SitAddressUpdateStatus": {
      "description": "The status of a SIT address update, indicating where it is in the TOO's approval process.",
      "enum": [
        "REQUESTED",
        "APPROVED",
        "REJECTED"
      ]
    },
    "SitAddressUpdates": {
      "description": "A list of updates to a SIT service item address.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SitAddressUpdate"
      }
    },
    "StorageFacility": {
      "description": "The Storage Facility information for the shipment",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "facilityName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lotNumber": {
          "type": "string",
          "x-nullable": true
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        }
      }
    },
    "UpdateMTOServiceItem": {
      "description": "UpdateMTOServiceItem describes a base type of a service item. Polymorphic type. Both Move Task Orders and MTO Shipments will have MTO Service Items.",
      "type": "object",
      "required": [
        "modelType"
      ],
      "properties": {
        "id": {
          "description": "ID of the service item. Must match path.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "modelType": {
          "$ref": "#/definitions/UpdateMTOServiceItemModelType"
        }
      },
      "discriminator": "modelType"
    },
    "UpdateMTOServiceItemModelType": {
      "description": "Using this list, choose the correct modelType in the dropdown, corresponding to the service item type.\n  * DDDSIT - UpdateMTOServiceItemSIT\n  * DDFSIT - UpdateMTOServiceItemSIT\n  * DDASIT - UpdateMTOServiceItemSIT\n  * DOPSIT - UpdateMTOServiceItemSIT\n  * DOASIT - UpdateMTOServiceItemSIT\n  * DOFSIT - UpdateMTOServiceItemSIT\n  * DOSFSC - UpdateMTOServiceItemSIT\n  * DDSFSC - UpdateMTOServiceItemSIT\n  * DDSHUT - UpdateMTOServiceItemShuttle\n  * DOSHUT - UpdateMTOServiceItemShuttle\n\nThe documentation will then update with the supported fields.\n",
      "type": "string",
      "enum": [
        "UpdateMTOServiceItemSIT",
        "UpdateMTOServiceItemShuttle"
      ]
    },
    "UpdateMTOServiceItemSIT": {
      "description": "Subtype used to provide the departure date for origin or destination SIT. This is not creating a new service item but rather updating an existing service item.\n",
      "allOf": [
        {
          "$ref": "#/definitions/UpdateMTOServiceItem"
        },
        {
          "type": "object",
          "properties": {
            "dateOfContact1": {
              "description": "Date of attempted contact by the prime corresponding to 'timeMilitary1'.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "dateOfContact2": {
              "description": "Date of attempted contact by the prime corresponding to 'timeMilitary2'.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "firstAvailableDeliveryDate1": {
              "description": "First available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "firstAvailableDeliveryDate2": {
              "description": "Second available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDDSIT",
                "DDASIT",
                "DDFSIT",
                "DDSFSC",
                "DOPSIT",
                "DOASIT",
                "DOFSIT",
                "DOSFSC"
              ]
            },
            "requestApprovalsRequestedStatus": {
              "description": "Indicates if \"Approvals Requested\" status is being requested.",
              "type": "boolean",
              "x-nullable": true
            },
            "sitCustomerContacted": {
              "description": "Date when the customer contacted the prime for a delivery out of SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination.",
              "type": "string",
              "format": "date"
            },
            "sitDestinationFinalAddress": {
              "$ref": "#/definitions/Address"
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitPostalCode": {
              "type": "string",
              "format": "zip",
              "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
              "x-nullable": true,
              "example": "90210"
            },
            "sitRequestedDelivery": {
              "description": "Date when the customer has requested delivery out of SIT.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "timeMilitary1": {
              "description": "Time of attempted contact by the prime corresponding to 'dateOfContact1', in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "x-nullable": true,
              "example": "1400Z"
            },
            "timeMilitary2": {
              "description": "Time of attempted contact by the prime corresponding to 'dateOfContact2', in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "x-nullable": true,
              "example": "1400Z"
            },
            "updateReason": {
              "description": "Reason for updating service item.",
              "type": "string",
              "x-nullable": true
            }
          }
        }
      ]
    },
    "UpdateMTOServiceItemShuttle": {
      "description": "Subtype used to provide the estimated weight and actual weight for shuttle. This is not creating a new service item but rather updating an existing service item.\n",
      "allOf": [
        {
          "$ref": "#/definitions/UpdateMTOServiceItem"
        },
        {
          "type": "object",
          "properties": {
            "actualWeight": {
              "description": "Provided by the movers, based on weight tickets. Relevant for shuttling (DDSHUT \u0026 DOSHUT) service items.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4000
            },
            "estimatedWeight": {
              "description": "An estimate of how much weight from a shipment will be included in a shuttling (DDSHUT \u0026 DOSHUT) service item.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4200
            },
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDSHUT",
                "DOSHUT"
              ]
            }
          }
        }
      ]
    },
    "UpdateMTOShipment": {
      "properties": {
        "actualDeliveryDate": {
          "description": "The date when the Prime contractor actually delivered the shipment. Updated after-the-fact.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualPickupDate": {
          "description": "The date when the Prime contractor actually picked up the shipment. Updated after-the-fact.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualProGearWeight": {
          "description": "The actual weight of any pro gear shipped during a move.",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "actualSpouseProGearWeight": {
          "description": "The actual weight of any pro gear shipped during a move.",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "counselorRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "counselor approved"
        },
        "destinationAddress": {
          "description": "Where the movers should deliver this shipment. Often provided by the customer when they enter shipment details\nduring onboarding, if they know their new address already.\n\nMay be blank when entered by the customer, required when entered by the Prime. May not represent the true\nfinal destination due to the shipment being diverted or placed in SIT.\n",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "destinationType": {
          "$ref": "#/definitions/DestinationType"
        },
        "diversion": {
          "description": "This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion.\n",
          "type": "boolean"
        },
        "firstAvailableDeliveryDate": {
          "description": "The date the Prime provides to the customer as the first possible delivery date so that they can plan their travel accordingly.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ntsRecordedWeight": {
          "description": "The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 4500
        },
        "pickupAddress": {
          "description": "The address where the movers should pick up this shipment, entered by the customer during onboarding when they enter shipment details.\n",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "pointOfContact": {
          "description": "Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.\n",
          "type": "string"
        },
        "ppmShipment": {
          "$ref": "#/definitions/UpdatePPMShipment"
        },
        "primeActualWeight": {
          "description": "The actual weight of the shipment, provided after the Prime packs, picks up, and weighs a customer's shipment.",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "primeEstimatedWeight": {
          "description": "The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contracter will need to contact the TOO to change it.\n",
          "type": "integer",
          "minimum": 1,
          "x-nullable": true,
          "example": 4500
        },
        "scheduledDeliveryDate": {
          "description": "The date the Prime contractor scheduled to deliver this shipment after consultation with the customer.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "scheduledPickupDate": {
          "description": "The date the Prime contractor scheduled to pick up this shipment after consultation with the customer.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "secondaryDeliveryAddress": {
          "description": "A second delivery address for this shipment, if the customer entered one. An optional field.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "description": "A second pickup address for this shipment, if the customer entered one. An optional field.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "storageFacility": {
          "allOf": [
            {
              "x-nullable": true
            },
            {
              "$ref": "#/definitions/StorageFacility"
            }
          ]
        }
      }
    },
    "UpdateMTOShipmentStatus": {
      "description": "Contains the statuses available to the Prime when updating the state of a shipment.",
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "CANCELED"
          ]
        }
      }
    },
    "UpdatePPMShipment": {
      "description": "The PPM specific fields of the shipment with values being changed",
      "type": "object",
      "properties": {
        "estimatedWeight": {
          "description": "The estimated weight of the PPM shipment goods being moved.",
          "type": "integer",
          "x-nullable": true,
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to begin moving from their origin.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear for themselves or their spouse.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "proGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to the service member.",
          "type": "integer",
          "x-nullable": true
        },
        "sitEstimatedDepartureDate": {
          "description": "The date that goods will exit the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedEntryDate": {
          "description": "The date that goods will first enter the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedWeight": {
          "description": "The estimated weight of the goods being put into storage.",
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "sitExpected": {
          "description": "Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.\n\nMust be set to ` + "`" + `true` + "`" + ` when providing ` + "`" + `sitLocation` + "`" + `, ` + "`" + `sitEstimatedWeight` + "`" + `, ` + "`" + `sitEstimatedEntryDate` + "`" + `, and ` + "`" + `sitEstimatedDepartureDate` + "`" + ` values to calculate the ` + "`" + `sitEstimatedCost` + "`" + `.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "spouseProGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to a spouse.",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "UpdateReweigh": {
      "description": "Contains the fields available to the Prime when updating a reweigh record.",
      "type": "object",
      "properties": {
        "verificationReason": {
          "description": "In lieu of a document being uploaded indicating why a reweigh did not occur.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "The reweigh was not performed because the shipment was already delivered"
        },
        "weight": {
          "description": "The total reweighed weight for the shipment in pounds.",
          "type": "integer",
          "minimum": 1,
          "x-formatting": "weight",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        }
      }
    },
    "UpdateShipmentDestinationAddress": {
      "description": "UpdateShipmentDestinationAddress contains the fields required for the prime to request an update for the destination address on an MTO Shipment.",
      "type": "object",
      "required": [
        "contractorRemarks",
        "newAddress"
      ],
      "properties": {
        "contractorRemarks": {
          "description": "This is the remark the Prime has entered, which would be the reason there is an address change.",
          "type": "string",
          "example": "Customer reached out to me this week and let me know they want to move somewhere else."
        },
        "newAddress": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "UploadWithOmissions": {
      "description": "An uploaded file.",
      "type": "object",
      "required": [
        "filename",
        "contentType",
        "bytes"
      ],
      "properties": {
        "bytes": {
          "type": "integer"
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "type": "string",
          "enum": [
            "INFECTED",
            "CLEAN",
            "PROCESSING"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "format": "uri",
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "type": "object",
          "required": [
            "invalidFields"
          ],
          "properties": {
            "invalidFields": {
              "type": "object",
              "additionalProperties": {
                "description": "List of errors for the field",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      ]
    }
  },
  "parameters": {
    "ifMatch": {
      "type": "string",
      "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
      "name": "If-Match",
      "in": "header",
      "required": true
    }
  },
  "responses": {
    "Conflict": {
      "description": "The request could not be processed because of conflict in the current state of the resource.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotImplemented": {
      "description": "The requested feature is still in development.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "ServerError": {
      "description": "A server error occurred.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "The request was unprocessable, likely due to bad input from the requester.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  },
  "tags": [
    {
      "description": "The **moveTaskOrder** represents a military move that has been sent to a contractor. It contains all the information about shipments, including service items, estimated weights, actual weights, requested and scheduled move dates, etc.\n",
      "name": "moveTaskOrder"
    },
    {
      "description": "A shipment is some (or all) of a customer's belongings picked up in one location and delivered to another location.\nAll of the items in a shipment are weighed and transported as a discrete unit. One move may include multiple shipments.\nAn **mtoShipment**, in particular, is a shipment that belongs to a [moveTaskOrder](#tag/moveTaskOrder).\n\nThe weights for all of the shipments in a move are combined and compared to the customer's weight allowance.\nIf the sum of the shipments is greater, the customer is liable for paying excess weight cost. Both the customer and\nthe contractor should keep this potential cost in mind when planning a move and the shipments within it.\n",
      "name": "mtoShipment"
    },
    {
      "description": "A service item is a service that the contractor can bill for. For example, if the movers pack and/or unpack a\ncustomer's belongings, those are billable services (packing and unpacking). All **mtoServiceItems** must be\napproved by the TOO before payment can be requested.\n\nThere are three types of service items: accessorial, MTO-level, and standard.\n\n**WIP:** Add an external link to an article that explains the different types of service items in more detail.\n",
      "name": "mtoServiceItem"
    },
    {
      "description": "The contractor submits a **paymentRequest** to the TIO for approval in order to be reimbursed for 1 or more\n**mtoServiceItems** on a **moveTaskOrder**. A service item can be on multiple payment requests if necessary.\n\nProof of service documentation may be uploaded for each **mtoServiceItem** in a **paymentRequest** after the payment\nrequest is created via the endpoint [createUpload](#operation/createUpload).\n\nAll weight entered should be in *pounds* and no other unit of measurement.\n",
      "name": "paymentRequest"
    },
    {
      "description": "**THIS ENDPOINT WILL BE DEPRECATED ON AUGUST 5TH, 2024 - REFER TO DESCRIPTION FOR DETAILS**\n\nA **sitAddressUpdate** is submitted when the prime or office user wishes to update the final address for an\napproved service item. sitAddressUpdates with a distance less than or equal to 50 miles will be automatically\napproved while a distance greater than 50 miles will typically require office user approval.\n",
      "name": "sitAddressUpdate"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Endpoints",
      "tags": [
        "moveTaskOrder",
        "mtoShipment",
        "mtoServiceItem",
        "paymentRequest",
        "sitAddressUpdate"
      ]
    }
  ]
}`))
}
