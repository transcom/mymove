// Code generated by go-swagger; DO NOT EDIT.

package primeapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.\n\nAll endpoints are located at ` + "`" + `primelocal/prime/v1/` + "`" + `.\n",
    "title": "Milmove Prime API",
    "contact": {
      "email": "dp3@truss.works"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/prime/v1",
  "paths": {
    "/move-task-orders": {
      "get": {
        "description": "Gets all moves that have been reviewed and approved by the TOO. The ` + "`" + `since` + "`" + ` parameter can be used to filter this\nlist down to only the moves that have been updated since the provided timestamp. A move will be considered\nupdated if the ` + "`" + `updatedAt` + "`" + ` timestamp on the move is later than the provided date and time.\n\n**WIP**: The original goal was to also look at the ` + "`" + `updateAt` + "`" + ` timestamps of the nested objects - such as the\nshipments, service items, etc. This has not been implemented.\n\n**WIP**: Include what causes moves to leave this list. Currently, once the ` + "`" + `availableToPrimeAt` + "`" + ` timestamp has\nbeen set, that move will always appear in this list.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "fetchMTOUpdates",
        "operationId": "fetchMTOUpdates",
        "parameters": [
          {
            "type": "integer",
            "format": "timestamp",
            "description": "Only return move task orders updated since this time.",
            "name": "since",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved move task orders where ` + "`" + `availableToPrimeAt` + "`" + ` has been set.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrders"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}": {
      "get": {
        "description": "### Functionality\nThis endpoint gets an individual MoveTaskOrder by ID.\n\nIt will provide information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "getMoveTaskOrder",
        "operationId": "getMoveTaskOrder",
        "parameters": [
          {
            "type": "string",
            "description": "UUID of move task order to use.",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve an individual move task order.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}/post-counseling-info": {
      "patch": {
        "description": "### Functionality\nThis endpoint **updates** the MoveTaskOrder after the Prime has completed Counseling.\n\nPPM related information is updated here. Most other fields will be found on the specific MTOShipment and updated using [updateMTOShipment](#operation/updateMTOShipment).\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "updateMTOPostCounselingInformation",
        "operationId": "updateMTOPostCounselingInformation",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "moveTaskOrderID": {
                  "description": "UUID for the move task order to use.",
                  "type": "string"
                },
                "pointOfContact": {
                  "description": "Email or id of a contact person for this update.",
                  "type": "string"
                },
                "ppmEstimatedWeight": {
                  "description": "The estimated weight determined post counseling.",
                  "type": "integer"
                },
                "ppmType": {
                  "description": "Sets a ppmType to an allowed value.",
                  "type": "string",
                  "enum": [
                    "FULL",
                    "PARTIAL"
                  ]
                }
              }
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order with post counseling information.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move task order to use.",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/mto-service-items": {
      "post": {
        "description": "Creates one or more MTOServiceItems. Not all service items may be created, please see details below.\n\nThis endpoint supports different body definitions. In the modelType field below, select the modelType corresponding\n to the service item you wish to create and the documentation will update with the new definition.\n\nUpon creation these items are associated with a Move Task Order and an MTO Shipment.\nThe request must include UUIDs for the MTO and MTO Shipment connected to this service item. Some service item types require\nadditional service items to be autogenerated when added - all created service items, autogenerated included,\nwill be returned in the response.\n\nTo update a service item, please use [updateMTOServiceItem](#operation/updateMTOServiceItem) endpoint.\n\n---\n\n**` + "`" + `MTOServiceItemOriginSIT` + "`" + `**\n\nMTOServiceItemOriginSIT is a subtype of MTOServiceItem.\n\nThis model type describes a domestic origin SIT service item. Items can be created using this\nmodel type with the following codes:\n\n**DOFSIT**\n\n**1st day origin SIT service item**. When a DOFSIT is requested, the API will auto-create the following group of service items:\n  * DOFSIT - Domestic origin 1st day SIT\n  * DOASIT - Domestic origin Additional day SIT\n  * DOPSIT - Domestic origin SIT pickup\n\n**DOASIT**\n\n**Addt'l days origin SIT service item**. This represents an additional day of storage for the same item.\nAdditional DOASIT service items can be created and added to an existing shipment that **includes a DOFSIT service item**.\n\n---\n\n**` + "`" + `MTOServiceItemDestSIT` + "`" + `**\n\nMTOServiceItemDestSIT is a subtype of MTOServiceItem.\n\nThis model type describes a domestic destination SIT service item. Items can be created using this\nmodel type with the following codes:\n\n**DDFSIT**\n\n**1st day origin SIT service item**. The additional fields are required for creating a DDFSIT:\n  * ` + "`" + `firstAvailableDeliveryDate1` + "`" + `\n    * string \u003cdate\u003e\n    * First available date that Prime can deliver SIT service item.\n  * ` + "`" + `firstAvailableDeliveryDate2` + "`" + `\n    * string \u003cdate\u003e\n    * Second available date that Prime can deliver SIT service item.\n  * ` + "`" + `timeMilitary1` + "`" + `\n    * string\\d{4}Z\n    * Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate1` + "`" + `, in military format.\n  * ` + "`" + `timeMilitary2` + "`" + `\n    * string\\d{4}Z\n    * Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate2` + "`" + `, in military format.\n\nWhen a DDFSIT is requested, the API will auto-create the following group of service items:\n  * DDFSIT - Domestic destination 1st day SIT\n  * DDASIT - Domestic destination Additional day SIT\n  * DDDSIT - Domestic destination SIT delivery\n\n**DDASIT**\n\n**Addt'l days destination SIT service item**. This represents an additional day of storage for the same item.\nAdditional DDASIT service items can be created and added to an existing shipment that **includes a DDFSIT service item**.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "createMTOServiceItem",
        "operationId": "createMTOServiceItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created an MTO service item.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MTOServiceItem"
              }
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-service-items/{mtoServiceItemID}": {
      "patch": {
        "description": "Updates MTOServiceItems after creation. Not all service items or fields may be updated, please see details below.\n\nThis endpoint supports different body definitions. In the modelType field below, select the modelType corresponding\n to the service item you wish to update and the documentation will update with the new definition.\n\nTo create a service item, please use [createMTOServiceItem](#operation/createMTOServiceItem)) endpoint.\n\n### Errors\n\nCurrently this is not implemented and will generated the NotImplemented error.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "updateMTOServiceItem",
        "operationId": "updateMTOServiceItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOServiceItem"
            }
          },
          {
            "type": "string",
            "description": "UUID of service item to update.",
            "name": "mtoServiceItemID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the MTO service item.",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments": {
      "post": {
        "description": "Creates a new shipment within the specified move. This endpoint should be used whenever the movers identify a\nneed for an additional shipment. The new shipment will be submitted to the TOO for review, and the TOO must\napprove it before the contractor can proceed with billing.\n\n**WIP**: The Prime should be notified by a push notification whenever the TOO approves a shipment connected to\none of their moves. Otherwise, the Prime can fetch the related move using the\n[getMoveTaskOrder](#operation/getMoveTaskOrder) endpoint and see if this shipment has the status ` + "`" + `\"APPROVED\"` + "`" + `.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOShipment",
        "operationId": "createMTOShipment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateMTOShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}": {
      "patch": {
        "description": "Updates an existing shipment for a move.\n\nNote that there are some restrictions on nested objects:\n\n* Service items: You cannot add or update service items using this endpoint. Please use [createMTOServiceItem](#operation/createMTOServiceItem) and [updateMTOServiceItem](#operation/updateMTOServiceItem) instead.\n* Agents: You cannot add or update agents using this endpoint. Please use [createMTOAgent](#operation/createMTOAgent) and [updateMTOAgent](#operation/updateMTOAgent) instead.\n* Addresses: You can add new addresses using this endpoint (and must use this endpoint to do so), but you cannot update existing ones. Please use [updateMTOShipmentAddress](#operation/updateMTOShipmentAddress) instead.\n\nThese restrictions are due to our [optimistic locking/concurrency control](https://github.com/transcom/mymove/wiki/use-optimistic-locking) mechanism.\n\nNote that some fields cannot be manually changed but will still be updated automatically, such as ` + "`" + `primeEstimatedWeightRecordedDate` + "`" + ` and ` + "`" + `requiredDeliveryDate` + "`" + `.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipment",
        "operationId": "updateMTOShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment being updated.",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/addresses/{addressID}": {
      "put": {
        "description": "### Functionality\nThis endpoint is used to **update** the addresses on an MTO Shipment. The address details completely replace the original, except for the UUID.\nTherefore a complete address should be sent in the request.\n\nThis endpoint **cannot create** an address.\nTo create an address on an MTO shipment, the caller must use [updateMTOShipment](#operation/updateMTOShipment) as the parent shipment has to be updated with the appropriate link to the address.\n\n### Errors\nThe address must be associated with the mtoShipment passed in the url.\nIn other words, it should be listed as pickupAddress, destinationAddress, secondaryPickupAddress or secondaryDeliveryAddress on the mtoShipment provided.\nIf it is not, caller will receive a **Conflict** Error.\n\nThe mtoShipment should be associated with an MTO that is available to prime.\nIf the caller requests an update to an address, and the shipment is not on an available MTO, the caller will receive a **NotFound** Error.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipmentAddress",
        "operationId": "updateMTOShipmentAddress",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the address",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the address being updated",
            "name": "addressID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the address.",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/agents": {
      "post": {
        "description": "### Functionality\nThis endpoint is used to **create** and add agents for an existing MTO Shipment. Only the fields being modified need to be sent in the request body.\n\n### Errors\nThe agent must always have a name and at least one method of contact (either ` + "`" + `email` + "`" + ` or ` + "`" + `phone` + "`" + `).\n\nThe agent must be associated with the MTO shipment passed in the url.\n\nThe shipment should be associated with an MTO that is available to the Pime.\nIf the caller requests a new agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOAgent",
        "operationId": "createMTOAgent",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the agent.",
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/agents/{agentID}": {
      "put": {
        "description": "### Functionality\nThis endpoint is used to **update** the agents for an MTO Shipment. Only the fields being modified need to be sent in the request body.\n\n### Errors:\nThe agent must always have a name and at least one method of contact (either ` + "`" + `email` + "`" + ` or ` + "`" + `phone` + "`" + `).\n\nThe agent must be associated with the MTO shipment passed in the url.\n\nThe shipment should be associated with an MTO that is available to the Prime.\nIf the caller requests an update to an agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOAgent",
        "operationId": "updateMTOAgent",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the agent being updated",
            "name": "agentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the agent.",
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/status": {
      "patch": {
        "description": "### Functionality\nThis endpoint should be used by the Prime to confirm the cancellation of a shipment. It allows the shipment\nstatus to be changed to \"CANCELED.\" Currently, the Prime cannot update the shipment to any other status.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipmentStatus",
        "operationId": "updateMTOShipmentStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOShipmentStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the shipment's status.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/payment-requests": {
      "post": {
        "description": "Creates a new instance of a paymentRequest.\nA newly created payment request is assigned the status ` + "`" + `PENDING` + "`" + `.\nA move task order can have multiple payment requests, and\na final payment request can be marked using boolean ` + "`" + `isFinal` + "`" + `.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "createPaymentRequest",
        "operationId": "createPaymentRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreatePaymentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a paymentRequest object.",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "Request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/payment-requests/{paymentRequestID}/uploads": {
      "post": {
        "description": "### Functionality\nThis endpoint **uploads** a Proof of Service document for a PaymentRequest.\n\nThe PaymentRequest should already exist.\n\nPaymentRequests are created with the [createPaymentRequest](#operation/createPaymentRequest) endpoint.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "createUpload",
        "operationId": "createUpload",
        "parameters": [
          {
            "type": "string",
            "description": "UUID of payment request to use.",
            "name": "paymentRequestID",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created upload of digital file.",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "A postal address.",
      "type": "object",
      "required": [
        "streetAddress1",
        "city",
        "state",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateMTOShipment": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "requestedPickupDate",
        "pickupAddress",
        "destinationAddress",
        "shipmentType"
      ],
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "customerRemarks": {
          "description": "The customer can use the customer remarks field to inform the services counselor and the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\n\nCustomer enters this information during onboarding. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "description": "Where the movers should deliver this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "diversion": {
          "description": "This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion.\n",
          "type": "boolean"
        },
        "moveTaskOrderID": {
          "description": "The ID of the move this new shipment is for.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoServiceItems": {
          "description": "A list of service items connected to this shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "pickupAddress": {
          "description": "The address where the movers should pick up this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "pointOfContact": {
          "description": "Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.\n",
          "type": "string"
        },
        "primeEstimatedWeight": {
          "description": "The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contracter will need to contact the TOO to change it.\n",
          "type": "integer",
          "example": 4500
        },
        "requestedPickupDate": {
          "description": "The customer's preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.\n",
          "type": "string",
          "format": "date"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        }
      }
    },
    "CreatePaymentRequest": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "serviceItems"
      ],
      "properties": {
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "pointOfContact": {
          "description": "Email or id of a contact person for this update.",
          "type": "string"
        },
        "serviceItems": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/ServiceItem"
          }
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "example": "COAST_GUARD"
        },
        "currentAddress": {
          "$ref": "#/definitions/Address"
        },
        "dodID": {
          "type": "string"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "example": "fake@example.com"
        },
        "firstName": {
          "type": "string",
          "example": "Vanya"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string",
          "example": "Petrovna"
        },
        "phone": {
          "type": "string",
          "format": "telephone"
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "DimensionType": {
      "description": "Describes a dimension type for a MTOServiceItemDimension.",
      "type": "string",
      "enum": [
        "ITEM",
        "CRATE"
      ]
    },
    "DutyStation": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "addressID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        }
      }
    },
    "Entitlements": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "571008b1-b0de-454d-b843-d71be9f02c04"
        },
        "nonTemporaryStorage": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "organizationalClothingAndIndividualEquipment": {
          "type": "boolean",
          "example": false
        },
        "privatelyOwnedVehicle": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "proGearWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 2000
        },
        "proGearWeightSpouse": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "requiredMedicalEquipmentWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "storageInTransit": {
          "type": "integer",
          "example": 90
        },
        "totalDependents": {
          "type": "integer",
          "example": 2
        },
        "totalWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "title",
        "detail"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "$ref": "#/definitions/MTOAgentType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})?$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "The ID of the agent.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "description": "The ID of the shipment this agent is permitted to release/receive.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^([2-9]\\d{2}-\\d{3}-\\d{4})?$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOAgentType": {
      "description": "The type for this agent. ` + "`" + `RELEASING` + "`" + ` means they have authority on pickup, ` + "`" + `RECEIVING` + "`" + ` means they can receive the shipment on delivery.\n",
      "type": "string",
      "title": "Agent Type",
      "enum": [
        "RELEASING_AGENT",
        "RECEIVING_AGENT"
      ],
      "example": "RELEASING_AGENT"
    },
    "MTOAgents": {
      "description": "A list of the agents for a shipment. Agents are the people who the Prime contractor recognize as permitted to release (in the case of pickup) or receive (on delivery) a shipment.\n",
      "type": "array",
      "maxItems": 2,
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOServiceItem": {
      "description": "MTOServiceItem describes a base type of a service item. Polymorphic type. Both Move Task Orders and MTO Shipments will have MTO Service Items.",
      "type": "object",
      "required": [
        "modelType",
        "moveTaskOrderID"
      ],
      "properties": {
        "eTag": {
          "description": "ETag identifier required to update this object",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "ID of the service item",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "modelType": {
          "$ref": "#/definitions/MTOServiceItemModelType"
        },
        "moveTaskOrderID": {
          "description": "ID of the associated moveTaskOrder",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "description": "ID of the associated mtoShipment",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "description": "Full descriptive name of the service",
          "type": "string",
          "readOnly": true
        },
        "rejectionReason": {
          "description": "Reason the service item was rejected by the TOO",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "item was too heavy"
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        }
      },
      "discriminator": "modelType"
    },
    "MTOServiceItemBasic": {
      "description": "Describes a basic service item subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode"
          ],
          "properties": {
            "reServiceCode": {
              "$ref": "#/definitions/ReServiceCode"
            }
          }
        }
      ]
    },
    "MTOServiceItemDestSIT": {
      "description": "Describes a domestic destination SIT service item. Subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "sitEntryDate"
          ],
          "properties": {
            "firstAvailableDeliveryDate1": {
              "description": "First available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "firstAvailableDeliveryDate2": {
              "description": "Second available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDFSIT",
                "DDASIT"
              ]
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitDestinationFinalAddress": {
              "$ref": "#/definitions/Address"
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT",
              "type": "string",
              "format": "date"
            },
            "timeMilitary1": {
              "description": "Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate1` + "`" + `, in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "x-nullable": true,
              "example": "1400Z"
            },
            "timeMilitary2": {
              "description": "Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate2` + "`" + `, in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "x-nullable": true,
              "example": "1400Z"
            }
          }
        }
      ]
    },
    "MTOServiceItemDimension": {
      "description": "Describes a dimension object for the MTOServiceItem.",
      "type": "object",
      "required": [
        "length",
        "width",
        "height"
      ],
      "properties": {
        "height": {
          "description": "Height in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "length": {
          "description": "Length in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "type": {
          "$ref": "#/definitions/DimensionType"
        },
        "width": {
          "description": "Width in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        }
      }
    },
    "MTOServiceItemDomesticCrating": {
      "description": "Describes a domestic crating/uncrating service item subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "item",
            "crate",
            "description"
          ],
          "properties": {
            "crate": {
              "$ref": "#/definitions/MTOServiceItemDimension"
            },
            "description": {
              "type": "string",
              "example": "Decorated horse head to be crated."
            },
            "item": {
              "$ref": "#/definitions/MTOServiceItemDimension"
            },
            "reServiceCode": {
              "description": "Service codes allowed for this model type.",
              "type": "string",
              "enum": [
                "DCRT",
                "DCRTSA",
                "DUCRT"
              ]
            },
            "reason": {
              "description": "Explanation of why Prime is picking up crating item.",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": false,
              "example": "Storage items need to be picked up"
            }
          }
        }
      ]
    },
    "MTOServiceItemModelType": {
      "description": "Describes all model sub-types for a MTOServiceItem model.\n\nUsing this list, choose the correct modelType in the dropdown, corresponding to the service item type.\n  * DOFSIT, DOASIT - MTOServiceItemOriginSIT\n  * DDFSIT, DDASIT - MTOServiceItemDestSIT\n  * DOSHUT, DDSHUT - MTOServiceItemShuttle\n  * DCRT, DCRTSA, DUCRT - MTOServiceItemDomesticCrating\n\nThe documentation will then update with the supported fields.\n",
      "type": "string",
      "enum": [
        "MTOServiceItemBasic",
        "MTOServiceItemOriginSIT",
        "MTOServiceItemDestSIT",
        "MTOServiceItemShuttle",
        "MTOServiceItemDomesticCrating"
      ]
    },
    "MTOServiceItemOriginSIT": {
      "description": "Describes a domestic origin SIT service item. Subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "reason",
            "sitPostalCode",
            "sitEntryDate"
          ],
          "properties": {
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DOFSIT",
                "DOASIT"
              ]
            },
            "reason": {
              "description": "Explanation of why Prime is picking up SIT item.",
              "type": "string",
              "example": "Storage items need to be picked up"
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT",
              "type": "string",
              "format": "date"
            },
            "sitHHGActualOrigin": {
              "$ref": "#/definitions/Address"
            },
            "sitPostalCode": {
              "type": "string",
              "format": "zip",
              "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
              "example": "90210"
            }
          }
        }
      ]
    },
    "MTOServiceItemShuttle": {
      "description": "Describes a shuttle service item.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reason",
            "reServiceCode",
            "description",
            "estimatedWeight",
            "actualWeight"
          ],
          "properties": {
            "actualWeight": {
              "description": "Provided by the movers, based on weight tickets. Relevant for shuttling (DDSHUT \u0026 DOSHUT) service items.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4000
            },
            "description": {
              "description": "Further details about the shuttle service.",
              "type": "string",
              "example": "Things to be moved to the place by shuttle."
            },
            "estimatedWeight": {
              "description": "An estimate of how much weight from a shipment will be included in a shuttling (DDSHUT \u0026 DOSHUT) service item.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4200
            },
            "reServiceCode": {
              "description": "Service codes allowed for this model type.",
              "type": "string",
              "enum": [
                "DOSHUT",
                "DDSHUT"
              ]
            },
            "reason": {
              "description": "Explanation of why a shuttle service is required.",
              "type": "string",
              "example": "Storage items need to be picked up."
            }
          }
        }
      ]
    },
    "MTOServiceItemStatus": {
      "description": "Describes all statuses for a MTOServiceItem.",
      "type": "string",
      "enum": [
        "SUBMITTED",
        "APPROVED",
        "REJECTED"
      ],
      "readOnly": true
    },
    "MTOShipment": {
      "properties": {
        "actualPickupDate": {
          "description": "The date when the Prime contractor actually picked up the shipment. Updated after-the-fact.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "approvedDate": {
          "description": "The date when the Transportation Ordering Officer first approved this shipment for the move.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "counselorRemarks": {
          "description": "The counselor can use the counselor remarks field to inform the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\n\nCounselors enters this information when creating or editing an MTO Shipment. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "customerRemarks": {
          "description": "The customer can use the customer remarks field to inform the services counselor and the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\n\nCustomer enters this information during onboarding. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "description": "Where the movers should deliver this shipment. Often provided by the customer when they enter shipment details\nduring onboarding, if they know their new address already.\n\nMay be blank when entered by the customer, required when entered by the Prime. May not represent the true\nfinal destination due to the shipment being diverted or placed in SIT.\n",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "diversion": {
          "description": "This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion.\n",
          "type": "boolean"
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "firstAvailableDeliveryDate": {
          "description": "The date the Prime provides to the customer as the first possible delivery date so that they can plan their travel accordingly.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "The ID of the shipment.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "description": "The ID of the move for this shipment.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoServiceItems": {
          "description": "A list of service items connected to this shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "pickupAddress": {
          "description": "The address where the movers should pick up this shipment, entered by the customer during onboarding when they enter shipment details.\n",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "pointOfContact": {
          "description": "Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.\n",
          "type": "string"
        },
        "primeActualWeight": {
          "description": "The actual weight of the shipment, provided after the Prime packs, picks up, and weighs a customer's shipment.",
          "type": "integer",
          "example": 4500
        },
        "primeEstimatedWeight": {
          "description": "The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contracter will need to contact the TOO to change it.\n",
          "type": "integer",
          "example": 4500
        },
        "primeEstimatedWeightRecordedDate": {
          "description": "The date when the Prime contractor recorded the shipment's estimated weight.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "rejectionReason": {
          "description": "The reason why this shipment was rejected by the TOO.",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "MTO Shipment not good enough"
        },
        "requestedPickupDate": {
          "description": "The date the customer selects during onboarding as their preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "requiredDeliveryDate": {
          "description": "The latest date by which the Prime can deliver a customer's shipment without violating the contract. This is calculated based on weight, distance, and the scheduled pickup date. It cannot be modified.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "scheduledPickupDate": {
          "description": "The date the Prime contractor scheduled to pick up this shipment after consultation with the customer.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "secondaryDeliveryAddress": {
          "description": "A second delivery address for this shipment, if the customer entered one. An optional field.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "description": "A second pickup address for this shipment, if the customer entered one. An optional field.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "status": {
          "description": "The status of a shipment, indicating where it is in the TOO's approval process. Can only be updated by the Prime in special circumstances.\n",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "APPROVED",
            "REJECTED",
            "CANCELLATION_REQUESTED",
            "CANCELED",
            "DIVERSION_REQUESTED"
          ],
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOShipmentType": {
      "description": "The type of shipment.\n  * ` + "`" + `HHG` + "`" + ` = Household goods move\n  * ` + "`" + `NTS` + "`" + ` = Non-temporary storage\n  * ` + "`" + `UB` + "`" + ` = Unaccompanied baggage\n",
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "HHG",
        "HHG_LONGHAUL_DOMESTIC",
        "HHG_SHORTHAUL_DOMESTIC",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "INTERNATIONAL_HHG",
        "INTERNATIONAL_UB",
        "MOTORHOME",
        "BOAT_HAUL_AWAY",
        "BOAT_TOW_AWAY"
      ],
      "x-display-value": {
        "HHG": "Household goods move (HHG)",
        "HHG_INTO_NTS_DOMESTIC": "HHG into Non-temporary storage (NTS)",
        "HHG_LONGHAUL_DOMESTIC": "Domestic Longhaul HHG",
        "HHG_OUTOF_NTS_DOMESTIC": "HHG out of Non-temporary storage (NTS)",
        "HHG_SHORTHAUL_DOMESTIC": "Domestic Shorthaul HHG"
      },
      "example": "HHG"
    },
    "MTOShipments": {
      "description": "A list of shipments.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "MoveTaskOrder": {
      "type": "object",
      "required": [
        "mtoShipments",
        "mtoServiceItems",
        "paymentRequests"
      ],
      "properties": {
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveCode": {
          "type": "string",
          "readOnly": true,
          "example": "HYXFJF"
        },
        "mtoServiceItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "mtoShipments": {
          "$ref": "#/definitions/MTOShipments"
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequests": {
          "$ref": "#/definitions/PaymentRequests"
        },
        "ppmEstimatedWeight": {
          "type": "integer"
        },
        "ppmType": {
          "type": "string",
          "enum": [
            "FULL",
            "PARTIAL"
          ]
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MoveTaskOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveTaskOrder"
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "orderNumber",
        "rank",
        "linesOfAccounting"
      ],
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "customerID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "destinationDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlements"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "linesOfAccounting": {
          "type": "string"
        },
        "orderNumber": {
          "type": "string"
        },
        "originDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "rank": {
          "type": "string",
          "example": "E_5"
        },
        "reportByDate": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "PaymentRequest": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestNumber": {
          "type": "string",
          "readOnly": true,
          "example": "1234-5678-1"
        },
        "paymentServiceItems": {
          "$ref": "#/definitions/PaymentServiceItems"
        },
        "proofOfServiceDocs": {
          "$ref": "#/definitions/ProofOfServiceDocs"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "PaymentRequestStatus": {
      "type": "string",
      "title": "Payment Request Status",
      "enum": [
        "PENDING",
        "REVIEWED",
        "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
        "SENT_TO_GEX",
        "RECEIVED_BY_GEX",
        "PAID",
        "EDI_ERROR"
      ]
    },
    "PaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentRequest"
      }
    },
    "PaymentServiceItem": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentServiceItemParams": {
          "$ref": "#/definitions/PaymentServiceItemParams"
        },
        "priceCents": {
          "type": "integer",
          "format": "cents",
          "title": "Price of the service item in cents",
          "x-nullable": true
        },
        "referenceID": {
          "format": "string",
          "readOnly": true,
          "example": "1234-5678-c56a4180"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentServiceItemStatus"
        }
      }
    },
    "PaymentServiceItemParam": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "key": {
          "$ref": "#/definitions/ServiceItemParamName"
        },
        "origin": {
          "$ref": "#/definitions/ServiceItemParamOrigin"
        },
        "paymentServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "type": {
          "$ref": "#/definitions/ServiceItemParamType"
        },
        "value": {
          "type": "string",
          "example": "3025"
        }
      }
    },
    "PaymentServiceItemParams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItemParam"
      }
    },
    "PaymentServiceItemStatus": {
      "type": "string",
      "title": "Payment Service Item Status",
      "enum": [
        "REQUESTED",
        "APPROVED",
        "DENIED",
        "SENT_TO_GEX",
        "PAID",
        "EDI_ERROR"
      ]
    },
    "PaymentServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItem"
      }
    },
    "ProofOfServiceDocs": {
      "type": "object",
      "properties": {
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "ReServiceCode": {
      "description": "This is the full list of service items that can be found on a shipment. Not all service items\nmay be requested by the Prime, but may be returned in a response.\n\nDocumentation of all the service items will be provided.\n",
      "type": "string",
      "enum": [
        "CS",
        "DBHF",
        "DBTF",
        "DCRT",
        "DCRTSA",
        "DDASIT",
        "DDDSIT",
        "DDFSIT",
        "DDP",
        "DDSHUT",
        "DLH",
        "DMHF",
        "DNPKF",
        "DOASIT",
        "DOFSIT",
        "DOP",
        "DOPSIT",
        "DOSHUT",
        "DPK",
        "DSH",
        "DUCRT",
        "DUPK",
        "FSC",
        "IBHF",
        "IBTF",
        "ICOLH",
        "ICOUB",
        "ICRT",
        "ICRTSA",
        "IDASIT",
        "IDDSIT",
        "IDFSIT",
        "IDSHUT",
        "IHPK",
        "IHUPK",
        "INPKF",
        "IOASIT",
        "IOCLH",
        "IOCUB",
        "IOFSIT",
        "IOOLH",
        "IOOUB",
        "IOPSIT",
        "IOSHUT",
        "IUBPK",
        "IUBUPK",
        "IUCRT",
        "MS",
        "NSTH",
        "NSTUB"
      ]
    },
    "ServiceItem": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "params": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "example": "Service Item Parameter Name"
              },
              "value": {
                "type": "string",
                "example": "Service Item Parameter Value"
              }
            }
          },
          "readOnly": true
        }
      }
    },
    "ServiceItemParamName": {
      "type": "string",
      "enum": [
        "ActualPickupDate",
        "ContractCode",
        "ContractYearName",
        "CubicFeetBilled",
        "CubicFeetCrating",
        "DistanceZip3",
        "DistanceZip5",
        "DistanceZipSITDest",
        "DistanceZipSITOrigin",
        "EIAFuelPrice",
        "EscalationCompounded",
        "FSCMultiplier",
        "FSCPriceDifferenceInCents",
        "FSCWeightBasedDistanceMultiplier",
        "IsPeak",
        "MarketDest",
        "MarketOrigin",
        "MTOAvailableToPrimeAt",
        "NumberDaysSIT",
        "PriceAreaDest",
        "PriceAreaIntlDest",
        "PriceAreaIntlOrigin",
        "PriceAreaOrigin",
        "PriceRateOrFactor",
        "PSI_LinehaulDom",
        "PSI_LinehaulDomPrice",
        "PSI_LinehaulShort",
        "PSI_LinehaulShortPrice",
        "PSI_PackingDom",
        "PSI_PackingDomPrice",
        "PSI_PackingHHGIntl",
        "PSI_PackingHHGIntlPrice",
        "PSI_PriceDomDest",
        "PSI_PriceDomDestPrice",
        "PSI_PriceDomOrigin",
        "PSI_PriceDomOriginPrice",
        "PSI_ShippingLinehaulIntlCO",
        "PSI_ShippingLinehaulIntlCOPrice",
        "PSI_ShippingLinehaulIntlOC",
        "PSI_ShippingLinehaulIntlOCPrice",
        "PSI_ShippingLinehaulIntlOO",
        "PSI_ShippingLinehaulIntlOOPrice",
        "RateAreaNonStdDest",
        "RateAreaNonStdOrigin",
        "RequestedPickupDate",
        "ServiceAreaDest",
        "ServiceAreaOrigin",
        "ServicesScheduleDest",
        "ServicesScheduleOrigin",
        "SITScheduleDest",
        "SITScheduleOrigin",
        "WeightActual",
        "WeightBilledActual",
        "WeightEstimated",
        "ZipDestAddress",
        "ZipPickupAddress",
        "ZipSITDestHHGFinalAddress",
        "ZipSITOriginHHGActualAddress",
        "ZipSITOriginHHGOriginalAddress"
      ]
    },
    "ServiceItemParamOrigin": {
      "type": "string",
      "enum": [
        "PRIME",
        "SYSTEM",
        "PRICER"
      ]
    },
    "ServiceItemParamType": {
      "type": "string",
      "enum": [
        "STRING",
        "DATE",
        "INTEGER",
        "DECIMAL",
        "TIMESTAMP",
        "PaymentServiceItemUUID"
      ]
    },
    "UpdateMTOServiceItem": {
      "description": "UpdateMTOServiceItem describes a base type of a service item. Polymorphic type. Both Move Task Orders and MTO Shipments will have MTO Service Items.",
      "type": "object",
      "required": [
        "modelType"
      ],
      "properties": {
        "id": {
          "description": "ID of the service item. Must match path.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "modelType": {
          "$ref": "#/definitions/UpdateMTOServiceItemModelType"
        }
      },
      "discriminator": "modelType"
    },
    "UpdateMTOServiceItemModelType": {
      "description": "Using this list, choose the correct modelType in the dropdown, corresponding to the service item type.\n  * DDDSIT - UpdateMTOServiceItemSIT\n  * DOPSIT - UpdateMTOServiceItemSIT\n  * DDSHUT - UpdateMTOServiceItemShuttle\n  * DOSHUT - UpdateMTOServiceItemShuttle\n\nThe documentation will then update with the supported fields.\n",
      "type": "string",
      "enum": [
        "UpdateMTOServiceItemSIT",
        "UpdateMTOServiceItemShuttle"
      ]
    },
    "UpdateMTOServiceItemSIT": {
      "description": "Subtype used to provide the departure date for origin or destination SIT. This is not creating a new service item but rather updating an existing service item.\n",
      "allOf": [
        {
          "$ref": "#/definitions/UpdateMTOServiceItem"
        },
        {
          "type": "object",
          "properties": {
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDDSIT",
                "DOPSIT"
              ]
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination.",
              "type": "string",
              "format": "date"
            },
            "sitDestinationFinalAddress": {
              "$ref": "#/definitions/Address"
            }
          }
        }
      ]
    },
    "UpdateMTOServiceItemShuttle": {
      "description": "Subtype used to provide the estimated weight and actual weight for shuttle. This is not creating a new service item but rather updating an existing service item.\n",
      "allOf": [
        {
          "$ref": "#/definitions/UpdateMTOServiceItem"
        },
        {
          "type": "object",
          "properties": {
            "actualWeight": {
              "description": "Provided by the movers, based on weight tickets. Relevant for shuttling (DDSHUT \u0026 DOSHUT) service items.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4000
            },
            "estimatedWeight": {
              "description": "An estimate of how much weight from a shipment will be included in a shuttling (DDSHUT \u0026 DOSHUT) service item.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4200
            },
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDSHUT",
                "DOSHUT"
              ]
            }
          }
        }
      ]
    },
    "UpdateMTOShipmentStatus": {
      "description": "Contains the statuses available to the Prime when updating the state of a shipment.",
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "CANCELED"
          ]
        }
      }
    },
    "Upload": {
      "type": "object",
      "required": [
        "filename",
        "contentType",
        "bytes"
      ],
      "properties": {
        "bytes": {
          "type": "integer"
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "example": "filename.pdf"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalidFields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "type": "object"
        }
      ],
      "properties": {
        "invalidFields": {
          "type": "object",
          "additionalProperties": {
            "description": "List of errors for the field",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "responses": {
    "Conflict": {
      "description": "The request could not be processed because of conflict in the current state of the resource.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotImplemented": {
      "description": "The requested feature is still in development.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "ServerError": {
      "description": "A server error occurred.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "The payload was unprocessable.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  },
  "tags": [
    {
      "description": "The **moveTaskOrder** represents a military move that has been sent to a contractor. It contains all the information about shipments, including service items, estimated weights, actual weights, requested and scheduled move dates, etc.\n",
      "name": "moveTaskOrder"
    },
    {
      "description": "A shipment is some (or all) of a customer's belongings picked up in one location and delivered to another\nlocation. All of the items in a shipment are weighed and transported as a discrete unit. One move may include\nmultiple shipments. An **mtoShipment**, in particular, is a shipment that belongs to a\n[moveTaskOrder](#tag/moveTaskOrder).\n\nThe weights for all of the shipments in a move are combined and compared to the customer's weight allowance. If\nthe sum of the shipments is greater, the customer is liable for paying excess weight cost. Both the customer and\nthe contractor should keep this potential cost in mind when planning a move and the shipments within it.\n",
      "name": "mtoShipment"
    },
    {
      "name": "paymentRequest"
    },
    {
      "name": "mtoServiceItem"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Endpoints",
      "tags": [
        "moveTaskOrder",
        "mtoShipment",
        "paymentRequest",
        "mtoServiceItem"
      ]
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.\n\nAll endpoints are located at ` + "`" + `primelocal/prime/v1/` + "`" + `.\n",
    "title": "Milmove Prime API",
    "contact": {
      "email": "dp3@truss.works"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/prime/v1",
  "paths": {
    "/move-task-orders": {
      "get": {
        "description": "Gets all moves that have been reviewed and approved by the TOO. The ` + "`" + `since` + "`" + ` parameter can be used to filter this\nlist down to only the moves that have been updated since the provided timestamp. A move will be considered\nupdated if the ` + "`" + `updatedAt` + "`" + ` timestamp on the move is later than the provided date and time.\n\n**WIP**: The original goal was to also look at the ` + "`" + `updateAt` + "`" + ` timestamps of the nested objects - such as the\nshipments, service items, etc. This has not been implemented.\n\n**WIP**: Include what causes moves to leave this list. Currently, once the ` + "`" + `availableToPrimeAt` + "`" + ` timestamp has\nbeen set, that move will always appear in this list.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "fetchMTOUpdates",
        "operationId": "fetchMTOUpdates",
        "parameters": [
          {
            "type": "integer",
            "format": "timestamp",
            "description": "Only return move task orders updated since this time.",
            "name": "since",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved move task orders where ` + "`" + `availableToPrimeAt` + "`" + ` has been set.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrders"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}": {
      "get": {
        "description": "### Functionality\nThis endpoint gets an individual MoveTaskOrder by ID.\n\nIt will provide information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "getMoveTaskOrder",
        "operationId": "getMoveTaskOrder",
        "parameters": [
          {
            "type": "string",
            "description": "UUID of move task order to use.",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve an individual move task order.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}/post-counseling-info": {
      "patch": {
        "description": "### Functionality\nThis endpoint **updates** the MoveTaskOrder after the Prime has completed Counseling.\n\nPPM related information is updated here. Most other fields will be found on the specific MTOShipment and updated using [updateMTOShipment](#operation/updateMTOShipment).\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "updateMTOPostCounselingInformation",
        "operationId": "updateMTOPostCounselingInformation",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "moveTaskOrderID": {
                  "description": "UUID for the move task order to use.",
                  "type": "string"
                },
                "pointOfContact": {
                  "description": "Email or id of a contact person for this update.",
                  "type": "string"
                },
                "ppmEstimatedWeight": {
                  "description": "The estimated weight determined post counseling.",
                  "type": "integer"
                },
                "ppmType": {
                  "description": "Sets a ppmType to an allowed value.",
                  "type": "string",
                  "enum": [
                    "FULL",
                    "PARTIAL"
                  ]
                }
              }
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order with post counseling information.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move task order to use.",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/mto-service-items": {
      "post": {
        "description": "Creates one or more MTOServiceItems. Not all service items may be created, please see details below.\n\nThis endpoint supports different body definitions. In the modelType field below, select the modelType corresponding\n to the service item you wish to create and the documentation will update with the new definition.\n\nUpon creation these items are associated with a Move Task Order and an MTO Shipment.\nThe request must include UUIDs for the MTO and MTO Shipment connected to this service item. Some service item types require\nadditional service items to be autogenerated when added - all created service items, autogenerated included,\nwill be returned in the response.\n\nTo update a service item, please use [updateMTOServiceItem](#operation/updateMTOServiceItem) endpoint.\n\n---\n\n**` + "`" + `MTOServiceItemOriginSIT` + "`" + `**\n\nMTOServiceItemOriginSIT is a subtype of MTOServiceItem.\n\nThis model type describes a domestic origin SIT service item. Items can be created using this\nmodel type with the following codes:\n\n**DOFSIT**\n\n**1st day origin SIT service item**. When a DOFSIT is requested, the API will auto-create the following group of service items:\n  * DOFSIT - Domestic origin 1st day SIT\n  * DOASIT - Domestic origin Additional day SIT\n  * DOPSIT - Domestic origin SIT pickup\n\n**DOASIT**\n\n**Addt'l days origin SIT service item**. This represents an additional day of storage for the same item.\nAdditional DOASIT service items can be created and added to an existing shipment that **includes a DOFSIT service item**.\n\n---\n\n**` + "`" + `MTOServiceItemDestSIT` + "`" + `**\n\nMTOServiceItemDestSIT is a subtype of MTOServiceItem.\n\nThis model type describes a domestic destination SIT service item. Items can be created using this\nmodel type with the following codes:\n\n**DDFSIT**\n\n**1st day origin SIT service item**. The additional fields are required for creating a DDFSIT:\n  * ` + "`" + `firstAvailableDeliveryDate1` + "`" + `\n    * string \u003cdate\u003e\n    * First available date that Prime can deliver SIT service item.\n  * ` + "`" + `firstAvailableDeliveryDate2` + "`" + `\n    * string \u003cdate\u003e\n    * Second available date that Prime can deliver SIT service item.\n  * ` + "`" + `timeMilitary1` + "`" + `\n    * string\\d{4}Z\n    * Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate1` + "`" + `, in military format.\n  * ` + "`" + `timeMilitary2` + "`" + `\n    * string\\d{4}Z\n    * Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate2` + "`" + `, in military format.\n\nWhen a DDFSIT is requested, the API will auto-create the following group of service items:\n  * DDFSIT - Domestic destination 1st day SIT\n  * DDASIT - Domestic destination Additional day SIT\n  * DDDSIT - Domestic destination SIT delivery\n\n**DDASIT**\n\n**Addt'l days destination SIT service item**. This represents an additional day of storage for the same item.\nAdditional DDASIT service items can be created and added to an existing shipment that **includes a DDFSIT service item**.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "createMTOServiceItem",
        "operationId": "createMTOServiceItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created an MTO service item.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MTOServiceItem"
              }
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-service-items/{mtoServiceItemID}": {
      "patch": {
        "description": "Updates MTOServiceItems after creation. Not all service items or fields may be updated, please see details below.\n\nThis endpoint supports different body definitions. In the modelType field below, select the modelType corresponding\n to the service item you wish to update and the documentation will update with the new definition.\n\nTo create a service item, please use [createMTOServiceItem](#operation/createMTOServiceItem)) endpoint.\n\n### Errors\n\nCurrently this is not implemented and will generated the NotImplemented error.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "updateMTOServiceItem",
        "operationId": "updateMTOServiceItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOServiceItem"
            }
          },
          {
            "type": "string",
            "description": "UUID of service item to update.",
            "name": "mtoServiceItemID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the MTO service item.",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments": {
      "post": {
        "description": "Creates a new shipment within the specified move. This endpoint should be used whenever the movers identify a\nneed for an additional shipment. The new shipment will be submitted to the TOO for review, and the TOO must\napprove it before the contractor can proceed with billing.\n\n**WIP**: The Prime should be notified by a push notification whenever the TOO approves a shipment connected to\none of their moves. Otherwise, the Prime can fetch the related move using the\n[getMoveTaskOrder](#operation/getMoveTaskOrder) endpoint and see if this shipment has the status ` + "`" + `\"APPROVED\"` + "`" + `.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOShipment",
        "operationId": "createMTOShipment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateMTOShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}": {
      "patch": {
        "description": "Updates an existing shipment for a move.\n\nNote that there are some restrictions on nested objects:\n\n* Service items: You cannot add or update service items using this endpoint. Please use [createMTOServiceItem](#operation/createMTOServiceItem) and [updateMTOServiceItem](#operation/updateMTOServiceItem) instead.\n* Agents: You cannot add or update agents using this endpoint. Please use [createMTOAgent](#operation/createMTOAgent) and [updateMTOAgent](#operation/updateMTOAgent) instead.\n* Addresses: You can add new addresses using this endpoint (and must use this endpoint to do so), but you cannot update existing ones. Please use [updateMTOShipmentAddress](#operation/updateMTOShipmentAddress) instead.\n\nThese restrictions are due to our [optimistic locking/concurrency control](https://github.com/transcom/mymove/wiki/use-optimistic-locking) mechanism.\n\nNote that some fields cannot be manually changed but will still be updated automatically, such as ` + "`" + `primeEstimatedWeightRecordedDate` + "`" + ` and ` + "`" + `requiredDeliveryDate` + "`" + `.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipment",
        "operationId": "updateMTOShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment being updated.",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/addresses/{addressID}": {
      "put": {
        "description": "### Functionality\nThis endpoint is used to **update** the addresses on an MTO Shipment. The address details completely replace the original, except for the UUID.\nTherefore a complete address should be sent in the request.\n\nThis endpoint **cannot create** an address.\nTo create an address on an MTO shipment, the caller must use [updateMTOShipment](#operation/updateMTOShipment) as the parent shipment has to be updated with the appropriate link to the address.\n\n### Errors\nThe address must be associated with the mtoShipment passed in the url.\nIn other words, it should be listed as pickupAddress, destinationAddress, secondaryPickupAddress or secondaryDeliveryAddress on the mtoShipment provided.\nIf it is not, caller will receive a **Conflict** Error.\n\nThe mtoShipment should be associated with an MTO that is available to prime.\nIf the caller requests an update to an address, and the shipment is not on an available MTO, the caller will receive a **NotFound** Error.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipmentAddress",
        "operationId": "updateMTOShipmentAddress",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the address",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the address being updated",
            "name": "addressID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the address.",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/agents": {
      "post": {
        "description": "### Functionality\nThis endpoint is used to **create** and add agents for an existing MTO Shipment. Only the fields being modified need to be sent in the request body.\n\n### Errors\nThe agent must always have a name and at least one method of contact (either ` + "`" + `email` + "`" + ` or ` + "`" + `phone` + "`" + `).\n\nThe agent must be associated with the MTO shipment passed in the url.\n\nThe shipment should be associated with an MTO that is available to the Pime.\nIf the caller requests a new agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOAgent",
        "operationId": "createMTOAgent",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the agent.",
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/agents/{agentID}": {
      "put": {
        "description": "### Functionality\nThis endpoint is used to **update** the agents for an MTO Shipment. Only the fields being modified need to be sent in the request body.\n\n### Errors:\nThe agent must always have a name and at least one method of contact (either ` + "`" + `email` + "`" + ` or ` + "`" + `phone` + "`" + `).\n\nThe agent must be associated with the MTO shipment passed in the url.\n\nThe shipment should be associated with an MTO that is available to the Prime.\nIf the caller requests an update to an agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOAgent",
        "operationId": "updateMTOAgent",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the agent being updated",
            "name": "agentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the agent.",
            "schema": {
              "$ref": "#/definitions/MTOAgent"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentID}/status": {
      "patch": {
        "description": "### Functionality\nThis endpoint should be used by the Prime to confirm the cancellation of a shipment. It allows the shipment\nstatus to be changed to \"CANCELED.\" Currently, the Prime cannot update the shipment to any other status.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipmentStatus",
        "operationId": "updateMTOShipmentStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the shipment associated with the agent",
            "name": "mtoShipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOShipmentStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the shipment's status.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/payment-requests": {
      "post": {
        "description": "Creates a new instance of a paymentRequest.\nA newly created payment request is assigned the status ` + "`" + `PENDING` + "`" + `.\nA move task order can have multiple payment requests, and\na final payment request can be marked using boolean ` + "`" + `isFinal` + "`" + `.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "createPaymentRequest",
        "operationId": "createPaymentRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreatePaymentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a paymentRequest object.",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "Request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/payment-requests/{paymentRequestID}/uploads": {
      "post": {
        "description": "### Functionality\nThis endpoint **uploads** a Proof of Service document for a PaymentRequest.\n\nThe PaymentRequest should already exist.\n\nPaymentRequests are created with the [createPaymentRequest](#operation/createPaymentRequest) endpoint.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "createUpload",
        "operationId": "createUpload",
        "parameters": [
          {
            "type": "string",
            "description": "UUID of payment request to use.",
            "name": "paymentRequestID",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created upload of digital file.",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "A postal address.",
      "type": "object",
      "required": [
        "streetAddress1",
        "city",
        "state",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateMTOShipment": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "requestedPickupDate",
        "pickupAddress",
        "destinationAddress",
        "shipmentType"
      ],
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "customerRemarks": {
          "description": "The customer can use the customer remarks field to inform the services counselor and the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\n\nCustomer enters this information during onboarding. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "description": "Where the movers should deliver this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "diversion": {
          "description": "This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion.\n",
          "type": "boolean"
        },
        "moveTaskOrderID": {
          "description": "The ID of the move this new shipment is for.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoServiceItems": {
          "description": "A list of service items connected to this shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "pickupAddress": {
          "description": "The address where the movers should pick up this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "pointOfContact": {
          "description": "Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.\n",
          "type": "string"
        },
        "primeEstimatedWeight": {
          "description": "The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contracter will need to contact the TOO to change it.\n",
          "type": "integer",
          "example": 4500
        },
        "requestedPickupDate": {
          "description": "The customer's preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.\n",
          "type": "string",
          "format": "date"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        }
      }
    },
    "CreatePaymentRequest": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "serviceItems"
      ],
      "properties": {
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "pointOfContact": {
          "description": "Email or id of a contact person for this update.",
          "type": "string"
        },
        "serviceItems": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/ServiceItem"
          }
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "example": "COAST_GUARD"
        },
        "currentAddress": {
          "$ref": "#/definitions/Address"
        },
        "dodID": {
          "type": "string"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "example": "fake@example.com"
        },
        "firstName": {
          "type": "string",
          "example": "Vanya"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string",
          "example": "Petrovna"
        },
        "phone": {
          "type": "string",
          "format": "telephone"
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "DimensionType": {
      "description": "Describes a dimension type for a MTOServiceItemDimension.",
      "type": "string",
      "enum": [
        "ITEM",
        "CRATE"
      ]
    },
    "DutyStation": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "addressID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        }
      }
    },
    "Entitlements": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "571008b1-b0de-454d-b843-d71be9f02c04"
        },
        "nonTemporaryStorage": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "organizationalClothingAndIndividualEquipment": {
          "type": "boolean",
          "example": false
        },
        "privatelyOwnedVehicle": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "proGearWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 2000
        },
        "proGearWeightSpouse": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "requiredMedicalEquipmentWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "storageInTransit": {
          "type": "integer",
          "example": 90
        },
        "totalDependents": {
          "type": "integer",
          "example": 2
        },
        "totalWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "title",
        "detail"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "$ref": "#/definitions/MTOAgentType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})?$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "The ID of the agent.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "description": "The ID of the shipment this agent is permitted to release/receive.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^([2-9]\\d{2}-\\d{3}-\\d{4})?$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOAgentType": {
      "description": "The type for this agent. ` + "`" + `RELEASING` + "`" + ` means they have authority on pickup, ` + "`" + `RECEIVING` + "`" + ` means they can receive the shipment on delivery.\n",
      "type": "string",
      "title": "Agent Type",
      "enum": [
        "RELEASING_AGENT",
        "RECEIVING_AGENT"
      ],
      "example": "RELEASING_AGENT"
    },
    "MTOAgents": {
      "description": "A list of the agents for a shipment. Agents are the people who the Prime contractor recognize as permitted to release (in the case of pickup) or receive (on delivery) a shipment.\n",
      "type": "array",
      "maxItems": 2,
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOServiceItem": {
      "description": "MTOServiceItem describes a base type of a service item. Polymorphic type. Both Move Task Orders and MTO Shipments will have MTO Service Items.",
      "type": "object",
      "required": [
        "modelType",
        "moveTaskOrderID"
      ],
      "properties": {
        "eTag": {
          "description": "ETag identifier required to update this object",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "ID of the service item",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "modelType": {
          "$ref": "#/definitions/MTOServiceItemModelType"
        },
        "moveTaskOrderID": {
          "description": "ID of the associated moveTaskOrder",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "description": "ID of the associated mtoShipment",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "description": "Full descriptive name of the service",
          "type": "string",
          "readOnly": true
        },
        "rejectionReason": {
          "description": "Reason the service item was rejected by the TOO",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "item was too heavy"
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        }
      },
      "discriminator": "modelType"
    },
    "MTOServiceItemBasic": {
      "description": "Describes a basic service item subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode"
          ],
          "properties": {
            "reServiceCode": {
              "$ref": "#/definitions/ReServiceCode"
            }
          }
        }
      ]
    },
    "MTOServiceItemDestSIT": {
      "description": "Describes a domestic destination SIT service item. Subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "sitEntryDate"
          ],
          "properties": {
            "firstAvailableDeliveryDate1": {
              "description": "First available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "firstAvailableDeliveryDate2": {
              "description": "Second available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDFSIT",
                "DDASIT"
              ]
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitDestinationFinalAddress": {
              "$ref": "#/definitions/Address"
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT",
              "type": "string",
              "format": "date"
            },
            "timeMilitary1": {
              "description": "Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate1` + "`" + `, in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "x-nullable": true,
              "example": "1400Z"
            },
            "timeMilitary2": {
              "description": "Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate2` + "`" + `, in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "x-nullable": true,
              "example": "1400Z"
            }
          }
        }
      ]
    },
    "MTOServiceItemDimension": {
      "description": "Describes a dimension object for the MTOServiceItem.",
      "type": "object",
      "required": [
        "length",
        "width",
        "height"
      ],
      "properties": {
        "height": {
          "description": "Height in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "length": {
          "description": "Length in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "type": {
          "$ref": "#/definitions/DimensionType"
        },
        "width": {
          "description": "Width in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        }
      }
    },
    "MTOServiceItemDomesticCrating": {
      "description": "Describes a domestic crating/uncrating service item subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "item",
            "crate",
            "description"
          ],
          "properties": {
            "crate": {
              "$ref": "#/definitions/MTOServiceItemDimension"
            },
            "description": {
              "type": "string",
              "example": "Decorated horse head to be crated."
            },
            "item": {
              "$ref": "#/definitions/MTOServiceItemDimension"
            },
            "reServiceCode": {
              "description": "Service codes allowed for this model type.",
              "type": "string",
              "enum": [
                "DCRT",
                "DCRTSA",
                "DUCRT"
              ]
            },
            "reason": {
              "description": "Explanation of why Prime is picking up crating item.",
              "type": "string",
              "x-nullable": true,
              "x-omitempty": false,
              "example": "Storage items need to be picked up"
            }
          }
        }
      ]
    },
    "MTOServiceItemModelType": {
      "description": "Describes all model sub-types for a MTOServiceItem model.\n\nUsing this list, choose the correct modelType in the dropdown, corresponding to the service item type.\n  * DOFSIT, DOASIT - MTOServiceItemOriginSIT\n  * DDFSIT, DDASIT - MTOServiceItemDestSIT\n  * DOSHUT, DDSHUT - MTOServiceItemShuttle\n  * DCRT, DCRTSA, DUCRT - MTOServiceItemDomesticCrating\n\nThe documentation will then update with the supported fields.\n",
      "type": "string",
      "enum": [
        "MTOServiceItemBasic",
        "MTOServiceItemOriginSIT",
        "MTOServiceItemDestSIT",
        "MTOServiceItemShuttle",
        "MTOServiceItemDomesticCrating"
      ]
    },
    "MTOServiceItemOriginSIT": {
      "description": "Describes a domestic origin SIT service item. Subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "reason",
            "sitPostalCode",
            "sitEntryDate"
          ],
          "properties": {
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DOFSIT",
                "DOASIT"
              ]
            },
            "reason": {
              "description": "Explanation of why Prime is picking up SIT item.",
              "type": "string",
              "example": "Storage items need to be picked up"
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT",
              "type": "string",
              "format": "date"
            },
            "sitHHGActualOrigin": {
              "$ref": "#/definitions/Address"
            },
            "sitPostalCode": {
              "type": "string",
              "format": "zip",
              "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
              "example": "90210"
            }
          }
        }
      ]
    },
    "MTOServiceItemShuttle": {
      "description": "Describes a shuttle service item.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reason",
            "reServiceCode",
            "description",
            "estimatedWeight",
            "actualWeight"
          ],
          "properties": {
            "actualWeight": {
              "description": "Provided by the movers, based on weight tickets. Relevant for shuttling (DDSHUT \u0026 DOSHUT) service items.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4000
            },
            "description": {
              "description": "Further details about the shuttle service.",
              "type": "string",
              "example": "Things to be moved to the place by shuttle."
            },
            "estimatedWeight": {
              "description": "An estimate of how much weight from a shipment will be included in a shuttling (DDSHUT \u0026 DOSHUT) service item.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4200
            },
            "reServiceCode": {
              "description": "Service codes allowed for this model type.",
              "type": "string",
              "enum": [
                "DOSHUT",
                "DDSHUT"
              ]
            },
            "reason": {
              "description": "Explanation of why a shuttle service is required.",
              "type": "string",
              "example": "Storage items need to be picked up."
            }
          }
        }
      ]
    },
    "MTOServiceItemStatus": {
      "description": "Describes all statuses for a MTOServiceItem.",
      "type": "string",
      "enum": [
        "SUBMITTED",
        "APPROVED",
        "REJECTED"
      ],
      "readOnly": true
    },
    "MTOShipment": {
      "properties": {
        "actualPickupDate": {
          "description": "The date when the Prime contractor actually picked up the shipment. Updated after-the-fact.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "approvedDate": {
          "description": "The date when the Transportation Ordering Officer first approved this shipment for the move.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "counselorRemarks": {
          "description": "The counselor can use the counselor remarks field to inform the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\n\nCounselors enters this information when creating or editing an MTO Shipment. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "customerRemarks": {
          "description": "The customer can use the customer remarks field to inform the services counselor and the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\n\nCustomer enters this information during onboarding. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "description": "Where the movers should deliver this shipment. Often provided by the customer when they enter shipment details\nduring onboarding, if they know their new address already.\n\nMay be blank when entered by the customer, required when entered by the Prime. May not represent the true\nfinal destination due to the shipment being diverted or placed in SIT.\n",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "diversion": {
          "description": "This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion.\n",
          "type": "boolean"
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "firstAvailableDeliveryDate": {
          "description": "The date the Prime provides to the customer as the first possible delivery date so that they can plan their travel accordingly.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "The ID of the shipment.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "description": "The ID of the move for this shipment.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoServiceItems": {
          "description": "A list of service items connected to this shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "pickupAddress": {
          "description": "The address where the movers should pick up this shipment, entered by the customer during onboarding when they enter shipment details.\n",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "pointOfContact": {
          "description": "Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.\n",
          "type": "string"
        },
        "primeActualWeight": {
          "description": "The actual weight of the shipment, provided after the Prime packs, picks up, and weighs a customer's shipment.",
          "type": "integer",
          "example": 4500
        },
        "primeEstimatedWeight": {
          "description": "The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contracter will need to contact the TOO to change it.\n",
          "type": "integer",
          "example": 4500
        },
        "primeEstimatedWeightRecordedDate": {
          "description": "The date when the Prime contractor recorded the shipment's estimated weight.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "rejectionReason": {
          "description": "The reason why this shipment was rejected by the TOO.",
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "MTO Shipment not good enough"
        },
        "requestedPickupDate": {
          "description": "The date the customer selects during onboarding as their preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "requiredDeliveryDate": {
          "description": "The latest date by which the Prime can deliver a customer's shipment without violating the contract. This is calculated based on weight, distance, and the scheduled pickup date. It cannot be modified.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "scheduledPickupDate": {
          "description": "The date the Prime contractor scheduled to pick up this shipment after consultation with the customer.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "secondaryDeliveryAddress": {
          "description": "A second delivery address for this shipment, if the customer entered one. An optional field.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "description": "A second pickup address for this shipment, if the customer entered one. An optional field.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "status": {
          "description": "The status of a shipment, indicating where it is in the TOO's approval process. Can only be updated by the Prime in special circumstances.\n",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "APPROVED",
            "REJECTED",
            "CANCELLATION_REQUESTED",
            "CANCELED",
            "DIVERSION_REQUESTED"
          ],
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOShipmentType": {
      "description": "The type of shipment.\n  * ` + "`" + `HHG` + "`" + ` = Household goods move\n  * ` + "`" + `NTS` + "`" + ` = Non-temporary storage\n  * ` + "`" + `UB` + "`" + ` = Unaccompanied baggage\n",
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "HHG",
        "HHG_LONGHAUL_DOMESTIC",
        "HHG_SHORTHAUL_DOMESTIC",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "INTERNATIONAL_HHG",
        "INTERNATIONAL_UB",
        "MOTORHOME",
        "BOAT_HAUL_AWAY",
        "BOAT_TOW_AWAY"
      ],
      "x-display-value": {
        "HHG": "Household goods move (HHG)",
        "HHG_INTO_NTS_DOMESTIC": "HHG into Non-temporary storage (NTS)",
        "HHG_LONGHAUL_DOMESTIC": "Domestic Longhaul HHG",
        "HHG_OUTOF_NTS_DOMESTIC": "HHG out of Non-temporary storage (NTS)",
        "HHG_SHORTHAUL_DOMESTIC": "Domestic Shorthaul HHG"
      },
      "example": "HHG"
    },
    "MTOShipments": {
      "description": "A list of shipments.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "MoveTaskOrder": {
      "type": "object",
      "required": [
        "mtoShipments",
        "mtoServiceItems",
        "paymentRequests"
      ],
      "properties": {
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveCode": {
          "type": "string",
          "readOnly": true,
          "example": "HYXFJF"
        },
        "mtoServiceItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "mtoShipments": {
          "$ref": "#/definitions/MTOShipments"
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequests": {
          "$ref": "#/definitions/PaymentRequests"
        },
        "ppmEstimatedWeight": {
          "type": "integer"
        },
        "ppmType": {
          "type": "string",
          "enum": [
            "FULL",
            "PARTIAL"
          ]
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MoveTaskOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveTaskOrder"
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "orderNumber",
        "rank",
        "linesOfAccounting"
      ],
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "customerID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "destinationDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlements"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "linesOfAccounting": {
          "type": "string"
        },
        "orderNumber": {
          "type": "string"
        },
        "originDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "rank": {
          "type": "string",
          "example": "E_5"
        },
        "reportByDate": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "PaymentRequest": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestNumber": {
          "type": "string",
          "readOnly": true,
          "example": "1234-5678-1"
        },
        "paymentServiceItems": {
          "$ref": "#/definitions/PaymentServiceItems"
        },
        "proofOfServiceDocs": {
          "$ref": "#/definitions/ProofOfServiceDocs"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "PaymentRequestStatus": {
      "type": "string",
      "title": "Payment Request Status",
      "enum": [
        "PENDING",
        "REVIEWED",
        "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
        "SENT_TO_GEX",
        "RECEIVED_BY_GEX",
        "PAID",
        "EDI_ERROR"
      ]
    },
    "PaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentRequest"
      }
    },
    "PaymentServiceItem": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentServiceItemParams": {
          "$ref": "#/definitions/PaymentServiceItemParams"
        },
        "priceCents": {
          "type": "integer",
          "format": "cents",
          "title": "Price of the service item in cents",
          "x-nullable": true
        },
        "referenceID": {
          "format": "string",
          "readOnly": true,
          "example": "1234-5678-c56a4180"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentServiceItemStatus"
        }
      }
    },
    "PaymentServiceItemParam": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "key": {
          "$ref": "#/definitions/ServiceItemParamName"
        },
        "origin": {
          "$ref": "#/definitions/ServiceItemParamOrigin"
        },
        "paymentServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "type": {
          "$ref": "#/definitions/ServiceItemParamType"
        },
        "value": {
          "type": "string",
          "example": "3025"
        }
      }
    },
    "PaymentServiceItemParams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItemParam"
      }
    },
    "PaymentServiceItemStatus": {
      "type": "string",
      "title": "Payment Service Item Status",
      "enum": [
        "REQUESTED",
        "APPROVED",
        "DENIED",
        "SENT_TO_GEX",
        "PAID",
        "EDI_ERROR"
      ]
    },
    "PaymentServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItem"
      }
    },
    "ProofOfServiceDocs": {
      "type": "object",
      "properties": {
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "ReServiceCode": {
      "description": "This is the full list of service items that can be found on a shipment. Not all service items\nmay be requested by the Prime, but may be returned in a response.\n\nDocumentation of all the service items will be provided.\n",
      "type": "string",
      "enum": [
        "CS",
        "DBHF",
        "DBTF",
        "DCRT",
        "DCRTSA",
        "DDASIT",
        "DDDSIT",
        "DDFSIT",
        "DDP",
        "DDSHUT",
        "DLH",
        "DMHF",
        "DNPKF",
        "DOASIT",
        "DOFSIT",
        "DOP",
        "DOPSIT",
        "DOSHUT",
        "DPK",
        "DSH",
        "DUCRT",
        "DUPK",
        "FSC",
        "IBHF",
        "IBTF",
        "ICOLH",
        "ICOUB",
        "ICRT",
        "ICRTSA",
        "IDASIT",
        "IDDSIT",
        "IDFSIT",
        "IDSHUT",
        "IHPK",
        "IHUPK",
        "INPKF",
        "IOASIT",
        "IOCLH",
        "IOCUB",
        "IOFSIT",
        "IOOLH",
        "IOOUB",
        "IOPSIT",
        "IOSHUT",
        "IUBPK",
        "IUBUPK",
        "IUCRT",
        "MS",
        "NSTH",
        "NSTUB"
      ]
    },
    "ServiceItem": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceItemParamsItems0"
          },
          "readOnly": true
        }
      }
    },
    "ServiceItemParamName": {
      "type": "string",
      "enum": [
        "ActualPickupDate",
        "ContractCode",
        "ContractYearName",
        "CubicFeetBilled",
        "CubicFeetCrating",
        "DistanceZip3",
        "DistanceZip5",
        "DistanceZipSITDest",
        "DistanceZipSITOrigin",
        "EIAFuelPrice",
        "EscalationCompounded",
        "FSCMultiplier",
        "FSCPriceDifferenceInCents",
        "FSCWeightBasedDistanceMultiplier",
        "IsPeak",
        "MarketDest",
        "MarketOrigin",
        "MTOAvailableToPrimeAt",
        "NumberDaysSIT",
        "PriceAreaDest",
        "PriceAreaIntlDest",
        "PriceAreaIntlOrigin",
        "PriceAreaOrigin",
        "PriceRateOrFactor",
        "PSI_LinehaulDom",
        "PSI_LinehaulDomPrice",
        "PSI_LinehaulShort",
        "PSI_LinehaulShortPrice",
        "PSI_PackingDom",
        "PSI_PackingDomPrice",
        "PSI_PackingHHGIntl",
        "PSI_PackingHHGIntlPrice",
        "PSI_PriceDomDest",
        "PSI_PriceDomDestPrice",
        "PSI_PriceDomOrigin",
        "PSI_PriceDomOriginPrice",
        "PSI_ShippingLinehaulIntlCO",
        "PSI_ShippingLinehaulIntlCOPrice",
        "PSI_ShippingLinehaulIntlOC",
        "PSI_ShippingLinehaulIntlOCPrice",
        "PSI_ShippingLinehaulIntlOO",
        "PSI_ShippingLinehaulIntlOOPrice",
        "RateAreaNonStdDest",
        "RateAreaNonStdOrigin",
        "RequestedPickupDate",
        "ServiceAreaDest",
        "ServiceAreaOrigin",
        "ServicesScheduleDest",
        "ServicesScheduleOrigin",
        "SITScheduleDest",
        "SITScheduleOrigin",
        "WeightActual",
        "WeightBilledActual",
        "WeightEstimated",
        "ZipDestAddress",
        "ZipPickupAddress",
        "ZipSITDestHHGFinalAddress",
        "ZipSITOriginHHGActualAddress",
        "ZipSITOriginHHGOriginalAddress"
      ]
    },
    "ServiceItemParamOrigin": {
      "type": "string",
      "enum": [
        "PRIME",
        "SYSTEM",
        "PRICER"
      ]
    },
    "ServiceItemParamType": {
      "type": "string",
      "enum": [
        "STRING",
        "DATE",
        "INTEGER",
        "DECIMAL",
        "TIMESTAMP",
        "PaymentServiceItemUUID"
      ]
    },
    "ServiceItemParamsItems0": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "Service Item Parameter Name"
        },
        "value": {
          "type": "string",
          "example": "Service Item Parameter Value"
        }
      }
    },
    "UpdateMTOServiceItem": {
      "description": "UpdateMTOServiceItem describes a base type of a service item. Polymorphic type. Both Move Task Orders and MTO Shipments will have MTO Service Items.",
      "type": "object",
      "required": [
        "modelType"
      ],
      "properties": {
        "id": {
          "description": "ID of the service item. Must match path.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "modelType": {
          "$ref": "#/definitions/UpdateMTOServiceItemModelType"
        }
      },
      "discriminator": "modelType"
    },
    "UpdateMTOServiceItemModelType": {
      "description": "Using this list, choose the correct modelType in the dropdown, corresponding to the service item type.\n  * DDDSIT - UpdateMTOServiceItemSIT\n  * DOPSIT - UpdateMTOServiceItemSIT\n  * DDSHUT - UpdateMTOServiceItemShuttle\n  * DOSHUT - UpdateMTOServiceItemShuttle\n\nThe documentation will then update with the supported fields.\n",
      "type": "string",
      "enum": [
        "UpdateMTOServiceItemSIT",
        "UpdateMTOServiceItemShuttle"
      ]
    },
    "UpdateMTOServiceItemSIT": {
      "description": "Subtype used to provide the departure date for origin or destination SIT. This is not creating a new service item but rather updating an existing service item.\n",
      "allOf": [
        {
          "$ref": "#/definitions/UpdateMTOServiceItem"
        },
        {
          "type": "object",
          "properties": {
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDDSIT",
                "DOPSIT"
              ]
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination.",
              "type": "string",
              "format": "date"
            },
            "sitDestinationFinalAddress": {
              "$ref": "#/definitions/Address"
            }
          }
        }
      ]
    },
    "UpdateMTOServiceItemShuttle": {
      "description": "Subtype used to provide the estimated weight and actual weight for shuttle. This is not creating a new service item but rather updating an existing service item.\n",
      "allOf": [
        {
          "$ref": "#/definitions/UpdateMTOServiceItem"
        },
        {
          "type": "object",
          "properties": {
            "actualWeight": {
              "description": "Provided by the movers, based on weight tickets. Relevant for shuttling (DDSHUT \u0026 DOSHUT) service items.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4000
            },
            "estimatedWeight": {
              "description": "An estimate of how much weight from a shipment will be included in a shuttling (DDSHUT \u0026 DOSHUT) service item.",
              "type": "integer",
              "x-nullable": true,
              "x-omitempty": false,
              "example": 4200
            },
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDSHUT",
                "DOSHUT"
              ]
            }
          }
        }
      ]
    },
    "UpdateMTOShipmentStatus": {
      "description": "Contains the statuses available to the Prime when updating the state of a shipment.",
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "CANCELED"
          ]
        }
      }
    },
    "Upload": {
      "type": "object",
      "required": [
        "filename",
        "contentType",
        "bytes"
      ],
      "properties": {
        "bytes": {
          "type": "integer"
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "example": "filename.pdf"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalidFields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "$ref": "#/definitions/ValidationErrorAllOf1"
        }
      ],
      "properties": {
        "invalidFields": {
          "type": "object",
          "additionalProperties": {
            "description": "List of errors for the field",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "ValidationErrorAllOf1": {
      "type": "object"
    }
  },
  "responses": {
    "Conflict": {
      "description": "The request could not be processed because of conflict in the current state of the resource.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotImplemented": {
      "description": "The requested feature is still in development.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "ServerError": {
      "description": "A server error occurred.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "The payload was unprocessable.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  },
  "tags": [
    {
      "description": "The **moveTaskOrder** represents a military move that has been sent to a contractor. It contains all the information about shipments, including service items, estimated weights, actual weights, requested and scheduled move dates, etc.\n",
      "name": "moveTaskOrder"
    },
    {
      "description": "A shipment is some (or all) of a customer's belongings picked up in one location and delivered to another\nlocation. All of the items in a shipment are weighed and transported as a discrete unit. One move may include\nmultiple shipments. An **mtoShipment**, in particular, is a shipment that belongs to a\n[moveTaskOrder](#tag/moveTaskOrder).\n\nThe weights for all of the shipments in a move are combined and compared to the customer's weight allowance. If\nthe sum of the shipments is greater, the customer is liable for paying excess weight cost. Both the customer and\nthe contractor should keep this potential cost in mind when planning a move and the shipments within it.\n",
      "name": "mtoShipment"
    },
    {
      "name": "paymentRequest"
    },
    {
      "name": "mtoServiceItem"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Endpoints",
      "tags": [
        "moveTaskOrder",
        "mtoShipment",
        "paymentRequest",
        "mtoServiceItem"
      ]
    }
  ]
}`))
}
