// Code generated by go-swagger; DO NOT EDIT.

package moves

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListMovesHandlerFunc turns a function with the right signature into a list moves handler
type ListMovesHandlerFunc func(ListMovesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListMovesHandlerFunc) Handle(params ListMovesParams) middleware.Responder {
	return fn(params)
}

// ListMovesHandler interface for that can handle valid list moves params
type ListMovesHandler interface {
	Handle(ListMovesParams) middleware.Responder
}

// NewListMoves creates a new http.Handler for the list moves operation
func NewListMoves(ctx *middleware.Context, handler ListMovesHandler) *ListMoves {
	return &ListMoves{Context: ctx, Handler: handler}
}

/*
	ListMoves swagger:route GET /moves moves listMoves

listMoves

Gets all moves that have been reviewed and approved by the TOO. The `since` parameter can be used to filter this
list down to only the moves that have been updated since the provided timestamp. A move will be considered
updated if the `updatedAt` timestamp on the move or on its orders, shipments, service items, or payment
requests, is later than the provided date and time.

**WIP**: Include what causes moves to leave this list. Currently, once the `availableToPrimeAt` timestamp has
been set, that move will always appear in this list.
*/
type ListMoves struct {
	Context *middleware.Context
	Handler ListMovesHandler
}

func (o *ListMoves) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListMovesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
