// Code generated by go-swagger; DO NOT EDIT.

package moves

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PptasReportsHandlerFunc turns a function with the right signature into a pptas reports handler
type PptasReportsHandlerFunc func(PptasReportsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PptasReportsHandlerFunc) Handle(params PptasReportsParams) middleware.Responder {
	return fn(params)
}

// PptasReportsHandler interface for that can handle valid pptas reports params
type PptasReportsHandler interface {
	Handle(PptasReportsParams) middleware.Responder
}

// NewPptasReports creates a new http.Handler for the pptas reports operation
func NewPptasReports(ctx *middleware.Context, handler PptasReportsHandler) *PptasReports {
	return &PptasReports{Context: ctx, Handler: handler}
}

/*
	PptasReports swagger:route GET /moves moves pptasReports

# PPTASReports

Gets all reports that have been approved. Based on payment requests, includes data from Move, Shipments, Orders, and Transportation Accounting Codes and Lines of Accounting.
*/
type PptasReports struct {
	Context *middleware.Context
	Handler PptasReportsHandler
}

func (o *PptasReports) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPptasReportsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
