// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/supportmessages"
)

// ReceiveWebhookNotificationReader is a Reader for the ReceiveWebhookNotification structure.
type ReceiveWebhookNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReceiveWebhookNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReceiveWebhookNotificationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReceiveWebhookNotificationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReceiveWebhookNotificationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReceiveWebhookNotificationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReceiveWebhookNotificationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /webhook-notify] receiveWebhookNotification", response, response.Code())
	}
}

// NewReceiveWebhookNotificationOK creates a ReceiveWebhookNotificationOK with default headers values
func NewReceiveWebhookNotificationOK() *ReceiveWebhookNotificationOK {
	return &ReceiveWebhookNotificationOK{}
}

/*
ReceiveWebhookNotificationOK describes a response with status code 200, with default header values.

Received notification
*/
type ReceiveWebhookNotificationOK struct {
	Payload *supportmessages.WebhookNotification
}

// IsSuccess returns true when this receive webhook notification o k response has a 2xx status code
func (o *ReceiveWebhookNotificationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this receive webhook notification o k response has a 3xx status code
func (o *ReceiveWebhookNotificationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive webhook notification o k response has a 4xx status code
func (o *ReceiveWebhookNotificationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this receive webhook notification o k response has a 5xx status code
func (o *ReceiveWebhookNotificationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this receive webhook notification o k response a status code equal to that given
func (o *ReceiveWebhookNotificationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the receive webhook notification o k response
func (o *ReceiveWebhookNotificationOK) Code() int {
	return 200
}

func (o *ReceiveWebhookNotificationOK) Error() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] receiveWebhookNotificationOK  %+v", 200, o.Payload)
}

func (o *ReceiveWebhookNotificationOK) String() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] receiveWebhookNotificationOK  %+v", 200, o.Payload)
}

func (o *ReceiveWebhookNotificationOK) GetPayload() *supportmessages.WebhookNotification {
	return o.Payload
}

func (o *ReceiveWebhookNotificationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.WebhookNotification)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReceiveWebhookNotificationBadRequest creates a ReceiveWebhookNotificationBadRequest with default headers values
func NewReceiveWebhookNotificationBadRequest() *ReceiveWebhookNotificationBadRequest {
	return &ReceiveWebhookNotificationBadRequest{}
}

/*
ReceiveWebhookNotificationBadRequest describes a response with status code 400, with default header values.

The request payload is invalid.
*/
type ReceiveWebhookNotificationBadRequest struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this receive webhook notification bad request response has a 2xx status code
func (o *ReceiveWebhookNotificationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this receive webhook notification bad request response has a 3xx status code
func (o *ReceiveWebhookNotificationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive webhook notification bad request response has a 4xx status code
func (o *ReceiveWebhookNotificationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this receive webhook notification bad request response has a 5xx status code
func (o *ReceiveWebhookNotificationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this receive webhook notification bad request response a status code equal to that given
func (o *ReceiveWebhookNotificationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the receive webhook notification bad request response
func (o *ReceiveWebhookNotificationBadRequest) Code() int {
	return 400
}

func (o *ReceiveWebhookNotificationBadRequest) Error() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] receiveWebhookNotificationBadRequest  %+v", 400, o.Payload)
}

func (o *ReceiveWebhookNotificationBadRequest) String() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] receiveWebhookNotificationBadRequest  %+v", 400, o.Payload)
}

func (o *ReceiveWebhookNotificationBadRequest) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *ReceiveWebhookNotificationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReceiveWebhookNotificationUnauthorized creates a ReceiveWebhookNotificationUnauthorized with default headers values
func NewReceiveWebhookNotificationUnauthorized() *ReceiveWebhookNotificationUnauthorized {
	return &ReceiveWebhookNotificationUnauthorized{}
}

/*
ReceiveWebhookNotificationUnauthorized describes a response with status code 401, with default header values.

The request was denied.
*/
type ReceiveWebhookNotificationUnauthorized struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this receive webhook notification unauthorized response has a 2xx status code
func (o *ReceiveWebhookNotificationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this receive webhook notification unauthorized response has a 3xx status code
func (o *ReceiveWebhookNotificationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive webhook notification unauthorized response has a 4xx status code
func (o *ReceiveWebhookNotificationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this receive webhook notification unauthorized response has a 5xx status code
func (o *ReceiveWebhookNotificationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this receive webhook notification unauthorized response a status code equal to that given
func (o *ReceiveWebhookNotificationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the receive webhook notification unauthorized response
func (o *ReceiveWebhookNotificationUnauthorized) Code() int {
	return 401
}

func (o *ReceiveWebhookNotificationUnauthorized) Error() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] receiveWebhookNotificationUnauthorized  %+v", 401, o.Payload)
}

func (o *ReceiveWebhookNotificationUnauthorized) String() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] receiveWebhookNotificationUnauthorized  %+v", 401, o.Payload)
}

func (o *ReceiveWebhookNotificationUnauthorized) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *ReceiveWebhookNotificationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReceiveWebhookNotificationForbidden creates a ReceiveWebhookNotificationForbidden with default headers values
func NewReceiveWebhookNotificationForbidden() *ReceiveWebhookNotificationForbidden {
	return &ReceiveWebhookNotificationForbidden{}
}

/*
ReceiveWebhookNotificationForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type ReceiveWebhookNotificationForbidden struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this receive webhook notification forbidden response has a 2xx status code
func (o *ReceiveWebhookNotificationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this receive webhook notification forbidden response has a 3xx status code
func (o *ReceiveWebhookNotificationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive webhook notification forbidden response has a 4xx status code
func (o *ReceiveWebhookNotificationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this receive webhook notification forbidden response has a 5xx status code
func (o *ReceiveWebhookNotificationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this receive webhook notification forbidden response a status code equal to that given
func (o *ReceiveWebhookNotificationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the receive webhook notification forbidden response
func (o *ReceiveWebhookNotificationForbidden) Code() int {
	return 403
}

func (o *ReceiveWebhookNotificationForbidden) Error() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] receiveWebhookNotificationForbidden  %+v", 403, o.Payload)
}

func (o *ReceiveWebhookNotificationForbidden) String() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] receiveWebhookNotificationForbidden  %+v", 403, o.Payload)
}

func (o *ReceiveWebhookNotificationForbidden) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *ReceiveWebhookNotificationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReceiveWebhookNotificationInternalServerError creates a ReceiveWebhookNotificationInternalServerError with default headers values
func NewReceiveWebhookNotificationInternalServerError() *ReceiveWebhookNotificationInternalServerError {
	return &ReceiveWebhookNotificationInternalServerError{}
}

/*
ReceiveWebhookNotificationInternalServerError describes a response with status code 500, with default header values.

A server error occurred.
*/
type ReceiveWebhookNotificationInternalServerError struct {
	Payload *supportmessages.Error
}

// IsSuccess returns true when this receive webhook notification internal server error response has a 2xx status code
func (o *ReceiveWebhookNotificationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this receive webhook notification internal server error response has a 3xx status code
func (o *ReceiveWebhookNotificationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive webhook notification internal server error response has a 4xx status code
func (o *ReceiveWebhookNotificationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this receive webhook notification internal server error response has a 5xx status code
func (o *ReceiveWebhookNotificationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this receive webhook notification internal server error response a status code equal to that given
func (o *ReceiveWebhookNotificationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the receive webhook notification internal server error response
func (o *ReceiveWebhookNotificationInternalServerError) Code() int {
	return 500
}

func (o *ReceiveWebhookNotificationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] receiveWebhookNotificationInternalServerError  %+v", 500, o.Payload)
}

func (o *ReceiveWebhookNotificationInternalServerError) String() string {
	return fmt.Sprintf("[POST /webhook-notify][%d] receiveWebhookNotificationInternalServerError  %+v", 500, o.Payload)
}

func (o *ReceiveWebhookNotificationInternalServerError) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *ReceiveWebhookNotificationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
