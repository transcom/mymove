// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new webhook API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhook API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateWebhookNotification(params *CreateWebhookNotificationParams) (*CreateWebhookNotificationCreated, error)

	ReceiveWebhookNotification(params *ReceiveWebhookNotificationParams) (*ReceiveWebhookNotificationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateWebhookNotification tests endpoint for creating webhook notifications

  This endpoint creates a webhook notification in the database. If the webhook client is running, it may send the notification soon after creation.

*/
func (a *Client) CreateWebhookNotification(params *CreateWebhookNotificationParams) (*CreateWebhookNotificationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWebhookNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWebhookNotification",
		Method:             "POST",
		PathPattern:        "/webhook-notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWebhookNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWebhookNotificationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createWebhookNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReceiveWebhookNotification tests endpoint for receiving messages from our own webhook client

  This endpoint receives a notification that matches the webhook notification model. This is a test endpoint that represents a receiving server. In production, the Prime will set up a receiving endpoint. In testing, this server accepts notifications at this endpoint and simply responds with success and logs them. The `webhook-client` is responsible for retrieving messages from the webhook_notifications table and sending them to the Prime (this endpoint in our testing case) via an mTLS connection.

*/
func (a *Client) ReceiveWebhookNotification(params *ReceiveWebhookNotificationParams) (*ReceiveWebhookNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReceiveWebhookNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "receiveWebhookNotification",
		Method:             "POST",
		PathPattern:        "/webhook-notify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReceiveWebhookNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReceiveWebhookNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for receiveWebhookNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
