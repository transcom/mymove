// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/supportmessages"
)

// GetMoveTaskOrderReader is a Reader for the GetMoveTaskOrder structure.
type GetMoveTaskOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMoveTaskOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMoveTaskOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetMoveTaskOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMoveTaskOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMoveTaskOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetMoveTaskOrderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /move-task-orders/{moveTaskOrderID}] getMoveTaskOrder", response, response.Code())
	}
}

// NewGetMoveTaskOrderOK creates a GetMoveTaskOrderOK with default headers values
func NewGetMoveTaskOrderOK() *GetMoveTaskOrderOK {
	return &GetMoveTaskOrderOK{}
}

/*
GetMoveTaskOrderOK describes a response with status code 200, with default header values.

Successfully retrieve an individual move task order.
*/
type GetMoveTaskOrderOK struct {
	Payload *supportmessages.MoveTaskOrder
}

// IsSuccess returns true when this get move task order o k response has a 2xx status code
func (o *GetMoveTaskOrderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get move task order o k response has a 3xx status code
func (o *GetMoveTaskOrderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get move task order o k response has a 4xx status code
func (o *GetMoveTaskOrderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get move task order o k response has a 5xx status code
func (o *GetMoveTaskOrderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get move task order o k response a status code equal to that given
func (o *GetMoveTaskOrderOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get move task order o k response
func (o *GetMoveTaskOrderOK) Code() int {
	return 200
}

func (o *GetMoveTaskOrderOK) Error() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderOK  %+v", 200, o.Payload)
}

func (o *GetMoveTaskOrderOK) String() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderOK  %+v", 200, o.Payload)
}

func (o *GetMoveTaskOrderOK) GetPayload() *supportmessages.MoveTaskOrder {
	return o.Payload
}

func (o *GetMoveTaskOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.MoveTaskOrder)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMoveTaskOrderUnauthorized creates a GetMoveTaskOrderUnauthorized with default headers values
func NewGetMoveTaskOrderUnauthorized() *GetMoveTaskOrderUnauthorized {
	return &GetMoveTaskOrderUnauthorized{}
}

/*
GetMoveTaskOrderUnauthorized describes a response with status code 401, with default header values.

The request was denied.
*/
type GetMoveTaskOrderUnauthorized struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this get move task order unauthorized response has a 2xx status code
func (o *GetMoveTaskOrderUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get move task order unauthorized response has a 3xx status code
func (o *GetMoveTaskOrderUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get move task order unauthorized response has a 4xx status code
func (o *GetMoveTaskOrderUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get move task order unauthorized response has a 5xx status code
func (o *GetMoveTaskOrderUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get move task order unauthorized response a status code equal to that given
func (o *GetMoveTaskOrderUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get move task order unauthorized response
func (o *GetMoveTaskOrderUnauthorized) Code() int {
	return 401
}

func (o *GetMoveTaskOrderUnauthorized) Error() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderUnauthorized  %+v", 401, o.Payload)
}

func (o *GetMoveTaskOrderUnauthorized) String() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderUnauthorized  %+v", 401, o.Payload)
}

func (o *GetMoveTaskOrderUnauthorized) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *GetMoveTaskOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMoveTaskOrderForbidden creates a GetMoveTaskOrderForbidden with default headers values
func NewGetMoveTaskOrderForbidden() *GetMoveTaskOrderForbidden {
	return &GetMoveTaskOrderForbidden{}
}

/*
GetMoveTaskOrderForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type GetMoveTaskOrderForbidden struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this get move task order forbidden response has a 2xx status code
func (o *GetMoveTaskOrderForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get move task order forbidden response has a 3xx status code
func (o *GetMoveTaskOrderForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get move task order forbidden response has a 4xx status code
func (o *GetMoveTaskOrderForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get move task order forbidden response has a 5xx status code
func (o *GetMoveTaskOrderForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get move task order forbidden response a status code equal to that given
func (o *GetMoveTaskOrderForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get move task order forbidden response
func (o *GetMoveTaskOrderForbidden) Code() int {
	return 403
}

func (o *GetMoveTaskOrderForbidden) Error() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderForbidden  %+v", 403, o.Payload)
}

func (o *GetMoveTaskOrderForbidden) String() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderForbidden  %+v", 403, o.Payload)
}

func (o *GetMoveTaskOrderForbidden) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *GetMoveTaskOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMoveTaskOrderNotFound creates a GetMoveTaskOrderNotFound with default headers values
func NewGetMoveTaskOrderNotFound() *GetMoveTaskOrderNotFound {
	return &GetMoveTaskOrderNotFound{}
}

/*
GetMoveTaskOrderNotFound describes a response with status code 404, with default header values.

The requested resource wasn't found.
*/
type GetMoveTaskOrderNotFound struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this get move task order not found response has a 2xx status code
func (o *GetMoveTaskOrderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get move task order not found response has a 3xx status code
func (o *GetMoveTaskOrderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get move task order not found response has a 4xx status code
func (o *GetMoveTaskOrderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get move task order not found response has a 5xx status code
func (o *GetMoveTaskOrderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get move task order not found response a status code equal to that given
func (o *GetMoveTaskOrderNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get move task order not found response
func (o *GetMoveTaskOrderNotFound) Code() int {
	return 404
}

func (o *GetMoveTaskOrderNotFound) Error() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderNotFound  %+v", 404, o.Payload)
}

func (o *GetMoveTaskOrderNotFound) String() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderNotFound  %+v", 404, o.Payload)
}

func (o *GetMoveTaskOrderNotFound) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *GetMoveTaskOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMoveTaskOrderInternalServerError creates a GetMoveTaskOrderInternalServerError with default headers values
func NewGetMoveTaskOrderInternalServerError() *GetMoveTaskOrderInternalServerError {
	return &GetMoveTaskOrderInternalServerError{}
}

/*
GetMoveTaskOrderInternalServerError describes a response with status code 500, with default header values.

A server error occurred.
*/
type GetMoveTaskOrderInternalServerError struct {
	Payload *supportmessages.Error
}

// IsSuccess returns true when this get move task order internal server error response has a 2xx status code
func (o *GetMoveTaskOrderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get move task order internal server error response has a 3xx status code
func (o *GetMoveTaskOrderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get move task order internal server error response has a 4xx status code
func (o *GetMoveTaskOrderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get move task order internal server error response has a 5xx status code
func (o *GetMoveTaskOrderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get move task order internal server error response a status code equal to that given
func (o *GetMoveTaskOrderInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get move task order internal server error response
func (o *GetMoveTaskOrderInternalServerError) Code() int {
	return 500
}

func (o *GetMoveTaskOrderInternalServerError) Error() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMoveTaskOrderInternalServerError) String() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMoveTaskOrderInternalServerError) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *GetMoveTaskOrderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
