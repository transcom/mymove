// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/supportmessages"
)

// MakeMoveTaskOrderAvailableReader is a Reader for the MakeMoveTaskOrderAvailable structure.
type MakeMoveTaskOrderAvailableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MakeMoveTaskOrderAvailableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMakeMoveTaskOrderAvailableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMakeMoveTaskOrderAvailableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewMakeMoveTaskOrderAvailableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMakeMoveTaskOrderAvailableForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMakeMoveTaskOrderAvailableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewMakeMoveTaskOrderAvailablePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewMakeMoveTaskOrderAvailableUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMakeMoveTaskOrderAvailableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime] makeMoveTaskOrderAvailable", response, response.Code())
	}
}

// NewMakeMoveTaskOrderAvailableOK creates a MakeMoveTaskOrderAvailableOK with default headers values
func NewMakeMoveTaskOrderAvailableOK() *MakeMoveTaskOrderAvailableOK {
	return &MakeMoveTaskOrderAvailableOK{}
}

/*
MakeMoveTaskOrderAvailableOK describes a response with status code 200, with default header values.

Successfully made MTO available to Prime.
*/
type MakeMoveTaskOrderAvailableOK struct {
	Payload *supportmessages.MoveTaskOrder
}

// IsSuccess returns true when this make move task order available o k response has a 2xx status code
func (o *MakeMoveTaskOrderAvailableOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this make move task order available o k response has a 3xx status code
func (o *MakeMoveTaskOrderAvailableOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this make move task order available o k response has a 4xx status code
func (o *MakeMoveTaskOrderAvailableOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this make move task order available o k response has a 5xx status code
func (o *MakeMoveTaskOrderAvailableOK) IsServerError() bool {
	return false
}

// IsCode returns true when this make move task order available o k response a status code equal to that given
func (o *MakeMoveTaskOrderAvailableOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the make move task order available o k response
func (o *MakeMoveTaskOrderAvailableOK) Code() int {
	return 200
}

func (o *MakeMoveTaskOrderAvailableOK) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableOK  %+v", 200, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableOK) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableOK  %+v", 200, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableOK) GetPayload() *supportmessages.MoveTaskOrder {
	return o.Payload
}

func (o *MakeMoveTaskOrderAvailableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.MoveTaskOrder)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMakeMoveTaskOrderAvailableBadRequest creates a MakeMoveTaskOrderAvailableBadRequest with default headers values
func NewMakeMoveTaskOrderAvailableBadRequest() *MakeMoveTaskOrderAvailableBadRequest {
	return &MakeMoveTaskOrderAvailableBadRequest{}
}

/*
MakeMoveTaskOrderAvailableBadRequest describes a response with status code 400, with default header values.

The request payload is invalid.
*/
type MakeMoveTaskOrderAvailableBadRequest struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this make move task order available bad request response has a 2xx status code
func (o *MakeMoveTaskOrderAvailableBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this make move task order available bad request response has a 3xx status code
func (o *MakeMoveTaskOrderAvailableBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this make move task order available bad request response has a 4xx status code
func (o *MakeMoveTaskOrderAvailableBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this make move task order available bad request response has a 5xx status code
func (o *MakeMoveTaskOrderAvailableBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this make move task order available bad request response a status code equal to that given
func (o *MakeMoveTaskOrderAvailableBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the make move task order available bad request response
func (o *MakeMoveTaskOrderAvailableBadRequest) Code() int {
	return 400
}

func (o *MakeMoveTaskOrderAvailableBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableBadRequest  %+v", 400, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableBadRequest) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableBadRequest  %+v", 400, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableBadRequest) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *MakeMoveTaskOrderAvailableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMakeMoveTaskOrderAvailableUnauthorized creates a MakeMoveTaskOrderAvailableUnauthorized with default headers values
func NewMakeMoveTaskOrderAvailableUnauthorized() *MakeMoveTaskOrderAvailableUnauthorized {
	return &MakeMoveTaskOrderAvailableUnauthorized{}
}

/*
MakeMoveTaskOrderAvailableUnauthorized describes a response with status code 401, with default header values.

The request was denied.
*/
type MakeMoveTaskOrderAvailableUnauthorized struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this make move task order available unauthorized response has a 2xx status code
func (o *MakeMoveTaskOrderAvailableUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this make move task order available unauthorized response has a 3xx status code
func (o *MakeMoveTaskOrderAvailableUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this make move task order available unauthorized response has a 4xx status code
func (o *MakeMoveTaskOrderAvailableUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this make move task order available unauthorized response has a 5xx status code
func (o *MakeMoveTaskOrderAvailableUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this make move task order available unauthorized response a status code equal to that given
func (o *MakeMoveTaskOrderAvailableUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the make move task order available unauthorized response
func (o *MakeMoveTaskOrderAvailableUnauthorized) Code() int {
	return 401
}

func (o *MakeMoveTaskOrderAvailableUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableUnauthorized  %+v", 401, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableUnauthorized  %+v", 401, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableUnauthorized) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *MakeMoveTaskOrderAvailableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMakeMoveTaskOrderAvailableForbidden creates a MakeMoveTaskOrderAvailableForbidden with default headers values
func NewMakeMoveTaskOrderAvailableForbidden() *MakeMoveTaskOrderAvailableForbidden {
	return &MakeMoveTaskOrderAvailableForbidden{}
}

/*
MakeMoveTaskOrderAvailableForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type MakeMoveTaskOrderAvailableForbidden struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this make move task order available forbidden response has a 2xx status code
func (o *MakeMoveTaskOrderAvailableForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this make move task order available forbidden response has a 3xx status code
func (o *MakeMoveTaskOrderAvailableForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this make move task order available forbidden response has a 4xx status code
func (o *MakeMoveTaskOrderAvailableForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this make move task order available forbidden response has a 5xx status code
func (o *MakeMoveTaskOrderAvailableForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this make move task order available forbidden response a status code equal to that given
func (o *MakeMoveTaskOrderAvailableForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the make move task order available forbidden response
func (o *MakeMoveTaskOrderAvailableForbidden) Code() int {
	return 403
}

func (o *MakeMoveTaskOrderAvailableForbidden) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableForbidden  %+v", 403, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableForbidden) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableForbidden  %+v", 403, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableForbidden) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *MakeMoveTaskOrderAvailableForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMakeMoveTaskOrderAvailableNotFound creates a MakeMoveTaskOrderAvailableNotFound with default headers values
func NewMakeMoveTaskOrderAvailableNotFound() *MakeMoveTaskOrderAvailableNotFound {
	return &MakeMoveTaskOrderAvailableNotFound{}
}

/*
MakeMoveTaskOrderAvailableNotFound describes a response with status code 404, with default header values.

The requested resource wasn't found.
*/
type MakeMoveTaskOrderAvailableNotFound struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this make move task order available not found response has a 2xx status code
func (o *MakeMoveTaskOrderAvailableNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this make move task order available not found response has a 3xx status code
func (o *MakeMoveTaskOrderAvailableNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this make move task order available not found response has a 4xx status code
func (o *MakeMoveTaskOrderAvailableNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this make move task order available not found response has a 5xx status code
func (o *MakeMoveTaskOrderAvailableNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this make move task order available not found response a status code equal to that given
func (o *MakeMoveTaskOrderAvailableNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the make move task order available not found response
func (o *MakeMoveTaskOrderAvailableNotFound) Code() int {
	return 404
}

func (o *MakeMoveTaskOrderAvailableNotFound) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableNotFound  %+v", 404, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableNotFound) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableNotFound  %+v", 404, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableNotFound) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *MakeMoveTaskOrderAvailableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMakeMoveTaskOrderAvailablePreconditionFailed creates a MakeMoveTaskOrderAvailablePreconditionFailed with default headers values
func NewMakeMoveTaskOrderAvailablePreconditionFailed() *MakeMoveTaskOrderAvailablePreconditionFailed {
	return &MakeMoveTaskOrderAvailablePreconditionFailed{}
}

/*
MakeMoveTaskOrderAvailablePreconditionFailed describes a response with status code 412, with default header values.

Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
*/
type MakeMoveTaskOrderAvailablePreconditionFailed struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this make move task order available precondition failed response has a 2xx status code
func (o *MakeMoveTaskOrderAvailablePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this make move task order available precondition failed response has a 3xx status code
func (o *MakeMoveTaskOrderAvailablePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this make move task order available precondition failed response has a 4xx status code
func (o *MakeMoveTaskOrderAvailablePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this make move task order available precondition failed response has a 5xx status code
func (o *MakeMoveTaskOrderAvailablePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this make move task order available precondition failed response a status code equal to that given
func (o *MakeMoveTaskOrderAvailablePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the make move task order available precondition failed response
func (o *MakeMoveTaskOrderAvailablePreconditionFailed) Code() int {
	return 412
}

func (o *MakeMoveTaskOrderAvailablePreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailablePreconditionFailed  %+v", 412, o.Payload)
}

func (o *MakeMoveTaskOrderAvailablePreconditionFailed) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailablePreconditionFailed  %+v", 412, o.Payload)
}

func (o *MakeMoveTaskOrderAvailablePreconditionFailed) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *MakeMoveTaskOrderAvailablePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMakeMoveTaskOrderAvailableUnprocessableEntity creates a MakeMoveTaskOrderAvailableUnprocessableEntity with default headers values
func NewMakeMoveTaskOrderAvailableUnprocessableEntity() *MakeMoveTaskOrderAvailableUnprocessableEntity {
	return &MakeMoveTaskOrderAvailableUnprocessableEntity{}
}

/*
MakeMoveTaskOrderAvailableUnprocessableEntity describes a response with status code 422, with default header values.

The payload was unprocessable.
*/
type MakeMoveTaskOrderAvailableUnprocessableEntity struct {
	Payload *supportmessages.ValidationError
}

// IsSuccess returns true when this make move task order available unprocessable entity response has a 2xx status code
func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this make move task order available unprocessable entity response has a 3xx status code
func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this make move task order available unprocessable entity response has a 4xx status code
func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this make move task order available unprocessable entity response has a 5xx status code
func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this make move task order available unprocessable entity response a status code equal to that given
func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the make move task order available unprocessable entity response
func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) Code() int {
	return 422
}

func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) GetPayload() *supportmessages.ValidationError {
	return o.Payload
}

func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMakeMoveTaskOrderAvailableInternalServerError creates a MakeMoveTaskOrderAvailableInternalServerError with default headers values
func NewMakeMoveTaskOrderAvailableInternalServerError() *MakeMoveTaskOrderAvailableInternalServerError {
	return &MakeMoveTaskOrderAvailableInternalServerError{}
}

/*
MakeMoveTaskOrderAvailableInternalServerError describes a response with status code 500, with default header values.

A server error occurred.
*/
type MakeMoveTaskOrderAvailableInternalServerError struct {
	Payload *supportmessages.Error
}

// IsSuccess returns true when this make move task order available internal server error response has a 2xx status code
func (o *MakeMoveTaskOrderAvailableInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this make move task order available internal server error response has a 3xx status code
func (o *MakeMoveTaskOrderAvailableInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this make move task order available internal server error response has a 4xx status code
func (o *MakeMoveTaskOrderAvailableInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this make move task order available internal server error response has a 5xx status code
func (o *MakeMoveTaskOrderAvailableInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this make move task order available internal server error response a status code equal to that given
func (o *MakeMoveTaskOrderAvailableInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the make move task order available internal server error response
func (o *MakeMoveTaskOrderAvailableInternalServerError) Code() int {
	return 500
}

func (o *MakeMoveTaskOrderAvailableInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableInternalServerError  %+v", 500, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/available-to-prime][%d] makeMoveTaskOrderAvailableInternalServerError  %+v", 500, o.Payload)
}

func (o *MakeMoveTaskOrderAvailableInternalServerError) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *MakeMoveTaskOrderAvailableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
