// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/supportmessages"
)

// HideNonFakeMoveTaskOrdersReader is a Reader for the HideNonFakeMoveTaskOrders structure.
type HideNonFakeMoveTaskOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HideNonFakeMoveTaskOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHideNonFakeMoveTaskOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewHideNonFakeMoveTaskOrdersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewHideNonFakeMoveTaskOrdersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHideNonFakeMoveTaskOrdersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHideNonFakeMoveTaskOrdersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewHideNonFakeMoveTaskOrdersConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewHideNonFakeMoveTaskOrdersPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewHideNonFakeMoveTaskOrdersUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHideNonFakeMoveTaskOrdersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /move-task-orders/hide] hideNonFakeMoveTaskOrders", response, response.Code())
	}
}

// NewHideNonFakeMoveTaskOrdersOK creates a HideNonFakeMoveTaskOrdersOK with default headers values
func NewHideNonFakeMoveTaskOrdersOK() *HideNonFakeMoveTaskOrdersOK {
	return &HideNonFakeMoveTaskOrdersOK{}
}

/*
HideNonFakeMoveTaskOrdersOK describes a response with status code 200, with default header values.

Successfully hid MTOs.
*/
type HideNonFakeMoveTaskOrdersOK struct {
	Payload *supportmessages.MTOHideMovesResponse
}

// IsSuccess returns true when this hide non fake move task orders o k response has a 2xx status code
func (o *HideNonFakeMoveTaskOrdersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this hide non fake move task orders o k response has a 3xx status code
func (o *HideNonFakeMoveTaskOrdersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hide non fake move task orders o k response has a 4xx status code
func (o *HideNonFakeMoveTaskOrdersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this hide non fake move task orders o k response has a 5xx status code
func (o *HideNonFakeMoveTaskOrdersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this hide non fake move task orders o k response a status code equal to that given
func (o *HideNonFakeMoveTaskOrdersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the hide non fake move task orders o k response
func (o *HideNonFakeMoveTaskOrdersOK) Code() int {
	return 200
}

func (o *HideNonFakeMoveTaskOrdersOK) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersOK  %+v", 200, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersOK) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersOK  %+v", 200, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersOK) GetPayload() *supportmessages.MTOHideMovesResponse {
	return o.Payload
}

func (o *HideNonFakeMoveTaskOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.MTOHideMovesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideNonFakeMoveTaskOrdersBadRequest creates a HideNonFakeMoveTaskOrdersBadRequest with default headers values
func NewHideNonFakeMoveTaskOrdersBadRequest() *HideNonFakeMoveTaskOrdersBadRequest {
	return &HideNonFakeMoveTaskOrdersBadRequest{}
}

/*
HideNonFakeMoveTaskOrdersBadRequest describes a response with status code 400, with default header values.

The request payload is invalid.
*/
type HideNonFakeMoveTaskOrdersBadRequest struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this hide non fake move task orders bad request response has a 2xx status code
func (o *HideNonFakeMoveTaskOrdersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hide non fake move task orders bad request response has a 3xx status code
func (o *HideNonFakeMoveTaskOrdersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hide non fake move task orders bad request response has a 4xx status code
func (o *HideNonFakeMoveTaskOrdersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this hide non fake move task orders bad request response has a 5xx status code
func (o *HideNonFakeMoveTaskOrdersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this hide non fake move task orders bad request response a status code equal to that given
func (o *HideNonFakeMoveTaskOrdersBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the hide non fake move task orders bad request response
func (o *HideNonFakeMoveTaskOrdersBadRequest) Code() int {
	return 400
}

func (o *HideNonFakeMoveTaskOrdersBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersBadRequest  %+v", 400, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersBadRequest) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersBadRequest  %+v", 400, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersBadRequest) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *HideNonFakeMoveTaskOrdersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideNonFakeMoveTaskOrdersUnauthorized creates a HideNonFakeMoveTaskOrdersUnauthorized with default headers values
func NewHideNonFakeMoveTaskOrdersUnauthorized() *HideNonFakeMoveTaskOrdersUnauthorized {
	return &HideNonFakeMoveTaskOrdersUnauthorized{}
}

/*
HideNonFakeMoveTaskOrdersUnauthorized describes a response with status code 401, with default header values.

The request was denied.
*/
type HideNonFakeMoveTaskOrdersUnauthorized struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this hide non fake move task orders unauthorized response has a 2xx status code
func (o *HideNonFakeMoveTaskOrdersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hide non fake move task orders unauthorized response has a 3xx status code
func (o *HideNonFakeMoveTaskOrdersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hide non fake move task orders unauthorized response has a 4xx status code
func (o *HideNonFakeMoveTaskOrdersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this hide non fake move task orders unauthorized response has a 5xx status code
func (o *HideNonFakeMoveTaskOrdersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this hide non fake move task orders unauthorized response a status code equal to that given
func (o *HideNonFakeMoveTaskOrdersUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the hide non fake move task orders unauthorized response
func (o *HideNonFakeMoveTaskOrdersUnauthorized) Code() int {
	return 401
}

func (o *HideNonFakeMoveTaskOrdersUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersUnauthorized  %+v", 401, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersUnauthorized  %+v", 401, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersUnauthorized) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *HideNonFakeMoveTaskOrdersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideNonFakeMoveTaskOrdersForbidden creates a HideNonFakeMoveTaskOrdersForbidden with default headers values
func NewHideNonFakeMoveTaskOrdersForbidden() *HideNonFakeMoveTaskOrdersForbidden {
	return &HideNonFakeMoveTaskOrdersForbidden{}
}

/*
HideNonFakeMoveTaskOrdersForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type HideNonFakeMoveTaskOrdersForbidden struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this hide non fake move task orders forbidden response has a 2xx status code
func (o *HideNonFakeMoveTaskOrdersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hide non fake move task orders forbidden response has a 3xx status code
func (o *HideNonFakeMoveTaskOrdersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hide non fake move task orders forbidden response has a 4xx status code
func (o *HideNonFakeMoveTaskOrdersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this hide non fake move task orders forbidden response has a 5xx status code
func (o *HideNonFakeMoveTaskOrdersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this hide non fake move task orders forbidden response a status code equal to that given
func (o *HideNonFakeMoveTaskOrdersForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the hide non fake move task orders forbidden response
func (o *HideNonFakeMoveTaskOrdersForbidden) Code() int {
	return 403
}

func (o *HideNonFakeMoveTaskOrdersForbidden) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersForbidden  %+v", 403, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersForbidden) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersForbidden  %+v", 403, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersForbidden) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *HideNonFakeMoveTaskOrdersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideNonFakeMoveTaskOrdersNotFound creates a HideNonFakeMoveTaskOrdersNotFound with default headers values
func NewHideNonFakeMoveTaskOrdersNotFound() *HideNonFakeMoveTaskOrdersNotFound {
	return &HideNonFakeMoveTaskOrdersNotFound{}
}

/*
HideNonFakeMoveTaskOrdersNotFound describes a response with status code 404, with default header values.

The requested resource wasn't found.
*/
type HideNonFakeMoveTaskOrdersNotFound struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this hide non fake move task orders not found response has a 2xx status code
func (o *HideNonFakeMoveTaskOrdersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hide non fake move task orders not found response has a 3xx status code
func (o *HideNonFakeMoveTaskOrdersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hide non fake move task orders not found response has a 4xx status code
func (o *HideNonFakeMoveTaskOrdersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this hide non fake move task orders not found response has a 5xx status code
func (o *HideNonFakeMoveTaskOrdersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this hide non fake move task orders not found response a status code equal to that given
func (o *HideNonFakeMoveTaskOrdersNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the hide non fake move task orders not found response
func (o *HideNonFakeMoveTaskOrdersNotFound) Code() int {
	return 404
}

func (o *HideNonFakeMoveTaskOrdersNotFound) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersNotFound  %+v", 404, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersNotFound) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersNotFound  %+v", 404, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersNotFound) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *HideNonFakeMoveTaskOrdersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideNonFakeMoveTaskOrdersConflict creates a HideNonFakeMoveTaskOrdersConflict with default headers values
func NewHideNonFakeMoveTaskOrdersConflict() *HideNonFakeMoveTaskOrdersConflict {
	return &HideNonFakeMoveTaskOrdersConflict{}
}

/*
HideNonFakeMoveTaskOrdersConflict describes a response with status code 409, with default header values.

There was a conflict with the request.
*/
type HideNonFakeMoveTaskOrdersConflict struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this hide non fake move task orders conflict response has a 2xx status code
func (o *HideNonFakeMoveTaskOrdersConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hide non fake move task orders conflict response has a 3xx status code
func (o *HideNonFakeMoveTaskOrdersConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hide non fake move task orders conflict response has a 4xx status code
func (o *HideNonFakeMoveTaskOrdersConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this hide non fake move task orders conflict response has a 5xx status code
func (o *HideNonFakeMoveTaskOrdersConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this hide non fake move task orders conflict response a status code equal to that given
func (o *HideNonFakeMoveTaskOrdersConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the hide non fake move task orders conflict response
func (o *HideNonFakeMoveTaskOrdersConflict) Code() int {
	return 409
}

func (o *HideNonFakeMoveTaskOrdersConflict) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersConflict  %+v", 409, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersConflict) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersConflict  %+v", 409, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersConflict) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *HideNonFakeMoveTaskOrdersConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideNonFakeMoveTaskOrdersPreconditionFailed creates a HideNonFakeMoveTaskOrdersPreconditionFailed with default headers values
func NewHideNonFakeMoveTaskOrdersPreconditionFailed() *HideNonFakeMoveTaskOrdersPreconditionFailed {
	return &HideNonFakeMoveTaskOrdersPreconditionFailed{}
}

/*
HideNonFakeMoveTaskOrdersPreconditionFailed describes a response with status code 412, with default header values.

Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
*/
type HideNonFakeMoveTaskOrdersPreconditionFailed struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this hide non fake move task orders precondition failed response has a 2xx status code
func (o *HideNonFakeMoveTaskOrdersPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hide non fake move task orders precondition failed response has a 3xx status code
func (o *HideNonFakeMoveTaskOrdersPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hide non fake move task orders precondition failed response has a 4xx status code
func (o *HideNonFakeMoveTaskOrdersPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this hide non fake move task orders precondition failed response has a 5xx status code
func (o *HideNonFakeMoveTaskOrdersPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this hide non fake move task orders precondition failed response a status code equal to that given
func (o *HideNonFakeMoveTaskOrdersPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the hide non fake move task orders precondition failed response
func (o *HideNonFakeMoveTaskOrdersPreconditionFailed) Code() int {
	return 412
}

func (o *HideNonFakeMoveTaskOrdersPreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersPreconditionFailed  %+v", 412, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersPreconditionFailed) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersPreconditionFailed  %+v", 412, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersPreconditionFailed) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *HideNonFakeMoveTaskOrdersPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideNonFakeMoveTaskOrdersUnprocessableEntity creates a HideNonFakeMoveTaskOrdersUnprocessableEntity with default headers values
func NewHideNonFakeMoveTaskOrdersUnprocessableEntity() *HideNonFakeMoveTaskOrdersUnprocessableEntity {
	return &HideNonFakeMoveTaskOrdersUnprocessableEntity{}
}

/*
HideNonFakeMoveTaskOrdersUnprocessableEntity describes a response with status code 422, with default header values.

The payload was unprocessable.
*/
type HideNonFakeMoveTaskOrdersUnprocessableEntity struct {
	Payload *supportmessages.ValidationError
}

// IsSuccess returns true when this hide non fake move task orders unprocessable entity response has a 2xx status code
func (o *HideNonFakeMoveTaskOrdersUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hide non fake move task orders unprocessable entity response has a 3xx status code
func (o *HideNonFakeMoveTaskOrdersUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hide non fake move task orders unprocessable entity response has a 4xx status code
func (o *HideNonFakeMoveTaskOrdersUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this hide non fake move task orders unprocessable entity response has a 5xx status code
func (o *HideNonFakeMoveTaskOrdersUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this hide non fake move task orders unprocessable entity response a status code equal to that given
func (o *HideNonFakeMoveTaskOrdersUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the hide non fake move task orders unprocessable entity response
func (o *HideNonFakeMoveTaskOrdersUnprocessableEntity) Code() int {
	return 422
}

func (o *HideNonFakeMoveTaskOrdersUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersUnprocessableEntity) GetPayload() *supportmessages.ValidationError {
	return o.Payload
}

func (o *HideNonFakeMoveTaskOrdersUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHideNonFakeMoveTaskOrdersInternalServerError creates a HideNonFakeMoveTaskOrdersInternalServerError with default headers values
func NewHideNonFakeMoveTaskOrdersInternalServerError() *HideNonFakeMoveTaskOrdersInternalServerError {
	return &HideNonFakeMoveTaskOrdersInternalServerError{}
}

/*
HideNonFakeMoveTaskOrdersInternalServerError describes a response with status code 500, with default header values.

A server error occurred.
*/
type HideNonFakeMoveTaskOrdersInternalServerError struct {
	Payload *supportmessages.Error
}

// IsSuccess returns true when this hide non fake move task orders internal server error response has a 2xx status code
func (o *HideNonFakeMoveTaskOrdersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hide non fake move task orders internal server error response has a 3xx status code
func (o *HideNonFakeMoveTaskOrdersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hide non fake move task orders internal server error response has a 4xx status code
func (o *HideNonFakeMoveTaskOrdersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this hide non fake move task orders internal server error response has a 5xx status code
func (o *HideNonFakeMoveTaskOrdersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this hide non fake move task orders internal server error response a status code equal to that given
func (o *HideNonFakeMoveTaskOrdersInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the hide non fake move task orders internal server error response
func (o *HideNonFakeMoveTaskOrdersInternalServerError) Code() int {
	return 500
}

func (o *HideNonFakeMoveTaskOrdersInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersInternalServerError  %+v", 500, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/hide][%d] hideNonFakeMoveTaskOrdersInternalServerError  %+v", 500, o.Payload)
}

func (o *HideNonFakeMoveTaskOrdersInternalServerError) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *HideNonFakeMoveTaskOrdersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
