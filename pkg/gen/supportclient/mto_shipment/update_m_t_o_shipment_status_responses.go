// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/supportmessages"
)

// UpdateMTOShipmentStatusReader is a Reader for the UpdateMTOShipmentStatus structure.
type UpdateMTOShipmentStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMTOShipmentStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateMTOShipmentStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateMTOShipmentStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateMTOShipmentStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateMTOShipmentStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateMTOShipmentStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateMTOShipmentStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateMTOShipmentStatusPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateMTOShipmentStatusUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateMTOShipmentStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /mto-shipments/{mtoShipmentID}/status] updateMTOShipmentStatus", response, response.Code())
	}
}

// NewUpdateMTOShipmentStatusOK creates a UpdateMTOShipmentStatusOK with default headers values
func NewUpdateMTOShipmentStatusOK() *UpdateMTOShipmentStatusOK {
	return &UpdateMTOShipmentStatusOK{}
}

/*
UpdateMTOShipmentStatusOK describes a response with status code 200, with default header values.

Successfully updated the shipment's status.
*/
type UpdateMTOShipmentStatusOK struct {
	Payload *supportmessages.MTOShipment
}

// IsSuccess returns true when this update m t o shipment status o k response has a 2xx status code
func (o *UpdateMTOShipmentStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update m t o shipment status o k response has a 3xx status code
func (o *UpdateMTOShipmentStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o shipment status o k response has a 4xx status code
func (o *UpdateMTOShipmentStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update m t o shipment status o k response has a 5xx status code
func (o *UpdateMTOShipmentStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o shipment status o k response a status code equal to that given
func (o *UpdateMTOShipmentStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update m t o shipment status o k response
func (o *UpdateMTOShipmentStatusOK) Code() int {
	return 200
}

func (o *UpdateMTOShipmentStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusOK  %+v", 200, o.Payload)
}

func (o *UpdateMTOShipmentStatusOK) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusOK  %+v", 200, o.Payload)
}

func (o *UpdateMTOShipmentStatusOK) GetPayload() *supportmessages.MTOShipment {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.MTOShipment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusBadRequest creates a UpdateMTOShipmentStatusBadRequest with default headers values
func NewUpdateMTOShipmentStatusBadRequest() *UpdateMTOShipmentStatusBadRequest {
	return &UpdateMTOShipmentStatusBadRequest{}
}

/*
UpdateMTOShipmentStatusBadRequest describes a response with status code 400, with default header values.

The request payload is invalid.
*/
type UpdateMTOShipmentStatusBadRequest struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this update m t o shipment status bad request response has a 2xx status code
func (o *UpdateMTOShipmentStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o shipment status bad request response has a 3xx status code
func (o *UpdateMTOShipmentStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o shipment status bad request response has a 4xx status code
func (o *UpdateMTOShipmentStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o shipment status bad request response has a 5xx status code
func (o *UpdateMTOShipmentStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o shipment status bad request response a status code equal to that given
func (o *UpdateMTOShipmentStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update m t o shipment status bad request response
func (o *UpdateMTOShipmentStatusBadRequest) Code() int {
	return 400
}

func (o *UpdateMTOShipmentStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMTOShipmentStatusBadRequest) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMTOShipmentStatusBadRequest) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusUnauthorized creates a UpdateMTOShipmentStatusUnauthorized with default headers values
func NewUpdateMTOShipmentStatusUnauthorized() *UpdateMTOShipmentStatusUnauthorized {
	return &UpdateMTOShipmentStatusUnauthorized{}
}

/*
UpdateMTOShipmentStatusUnauthorized describes a response with status code 401, with default header values.

The request was denied.
*/
type UpdateMTOShipmentStatusUnauthorized struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this update m t o shipment status unauthorized response has a 2xx status code
func (o *UpdateMTOShipmentStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o shipment status unauthorized response has a 3xx status code
func (o *UpdateMTOShipmentStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o shipment status unauthorized response has a 4xx status code
func (o *UpdateMTOShipmentStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o shipment status unauthorized response has a 5xx status code
func (o *UpdateMTOShipmentStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o shipment status unauthorized response a status code equal to that given
func (o *UpdateMTOShipmentStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update m t o shipment status unauthorized response
func (o *UpdateMTOShipmentStatusUnauthorized) Code() int {
	return 401
}

func (o *UpdateMTOShipmentStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateMTOShipmentStatusUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateMTOShipmentStatusUnauthorized) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusForbidden creates a UpdateMTOShipmentStatusForbidden with default headers values
func NewUpdateMTOShipmentStatusForbidden() *UpdateMTOShipmentStatusForbidden {
	return &UpdateMTOShipmentStatusForbidden{}
}

/*
UpdateMTOShipmentStatusForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type UpdateMTOShipmentStatusForbidden struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this update m t o shipment status forbidden response has a 2xx status code
func (o *UpdateMTOShipmentStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o shipment status forbidden response has a 3xx status code
func (o *UpdateMTOShipmentStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o shipment status forbidden response has a 4xx status code
func (o *UpdateMTOShipmentStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o shipment status forbidden response has a 5xx status code
func (o *UpdateMTOShipmentStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o shipment status forbidden response a status code equal to that given
func (o *UpdateMTOShipmentStatusForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update m t o shipment status forbidden response
func (o *UpdateMTOShipmentStatusForbidden) Code() int {
	return 403
}

func (o *UpdateMTOShipmentStatusForbidden) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusForbidden  %+v", 403, o.Payload)
}

func (o *UpdateMTOShipmentStatusForbidden) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusForbidden  %+v", 403, o.Payload)
}

func (o *UpdateMTOShipmentStatusForbidden) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusNotFound creates a UpdateMTOShipmentStatusNotFound with default headers values
func NewUpdateMTOShipmentStatusNotFound() *UpdateMTOShipmentStatusNotFound {
	return &UpdateMTOShipmentStatusNotFound{}
}

/*
UpdateMTOShipmentStatusNotFound describes a response with status code 404, with default header values.

The requested resource wasn't found.
*/
type UpdateMTOShipmentStatusNotFound struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this update m t o shipment status not found response has a 2xx status code
func (o *UpdateMTOShipmentStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o shipment status not found response has a 3xx status code
func (o *UpdateMTOShipmentStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o shipment status not found response has a 4xx status code
func (o *UpdateMTOShipmentStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o shipment status not found response has a 5xx status code
func (o *UpdateMTOShipmentStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o shipment status not found response a status code equal to that given
func (o *UpdateMTOShipmentStatusNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update m t o shipment status not found response
func (o *UpdateMTOShipmentStatusNotFound) Code() int {
	return 404
}

func (o *UpdateMTOShipmentStatusNotFound) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMTOShipmentStatusNotFound) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMTOShipmentStatusNotFound) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusConflict creates a UpdateMTOShipmentStatusConflict with default headers values
func NewUpdateMTOShipmentStatusConflict() *UpdateMTOShipmentStatusConflict {
	return &UpdateMTOShipmentStatusConflict{}
}

/*
UpdateMTOShipmentStatusConflict describes a response with status code 409, with default header values.

There was a conflict with the request.
*/
type UpdateMTOShipmentStatusConflict struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this update m t o shipment status conflict response has a 2xx status code
func (o *UpdateMTOShipmentStatusConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o shipment status conflict response has a 3xx status code
func (o *UpdateMTOShipmentStatusConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o shipment status conflict response has a 4xx status code
func (o *UpdateMTOShipmentStatusConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o shipment status conflict response has a 5xx status code
func (o *UpdateMTOShipmentStatusConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o shipment status conflict response a status code equal to that given
func (o *UpdateMTOShipmentStatusConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update m t o shipment status conflict response
func (o *UpdateMTOShipmentStatusConflict) Code() int {
	return 409
}

func (o *UpdateMTOShipmentStatusConflict) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusConflict  %+v", 409, o.Payload)
}

func (o *UpdateMTOShipmentStatusConflict) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusConflict  %+v", 409, o.Payload)
}

func (o *UpdateMTOShipmentStatusConflict) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusPreconditionFailed creates a UpdateMTOShipmentStatusPreconditionFailed with default headers values
func NewUpdateMTOShipmentStatusPreconditionFailed() *UpdateMTOShipmentStatusPreconditionFailed {
	return &UpdateMTOShipmentStatusPreconditionFailed{}
}

/*
UpdateMTOShipmentStatusPreconditionFailed describes a response with status code 412, with default header values.

Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
*/
type UpdateMTOShipmentStatusPreconditionFailed struct {
	Payload *supportmessages.ClientError
}

// IsSuccess returns true when this update m t o shipment status precondition failed response has a 2xx status code
func (o *UpdateMTOShipmentStatusPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o shipment status precondition failed response has a 3xx status code
func (o *UpdateMTOShipmentStatusPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o shipment status precondition failed response has a 4xx status code
func (o *UpdateMTOShipmentStatusPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o shipment status precondition failed response has a 5xx status code
func (o *UpdateMTOShipmentStatusPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o shipment status precondition failed response a status code equal to that given
func (o *UpdateMTOShipmentStatusPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the update m t o shipment status precondition failed response
func (o *UpdateMTOShipmentStatusPreconditionFailed) Code() int {
	return 412
}

func (o *UpdateMTOShipmentStatusPreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateMTOShipmentStatusPreconditionFailed) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateMTOShipmentStatusPreconditionFailed) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusUnprocessableEntity creates a UpdateMTOShipmentStatusUnprocessableEntity with default headers values
func NewUpdateMTOShipmentStatusUnprocessableEntity() *UpdateMTOShipmentStatusUnprocessableEntity {
	return &UpdateMTOShipmentStatusUnprocessableEntity{}
}

/*
UpdateMTOShipmentStatusUnprocessableEntity describes a response with status code 422, with default header values.

The payload was unprocessable.
*/
type UpdateMTOShipmentStatusUnprocessableEntity struct {
	Payload *supportmessages.ValidationError
}

// IsSuccess returns true when this update m t o shipment status unprocessable entity response has a 2xx status code
func (o *UpdateMTOShipmentStatusUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o shipment status unprocessable entity response has a 3xx status code
func (o *UpdateMTOShipmentStatusUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o shipment status unprocessable entity response has a 4xx status code
func (o *UpdateMTOShipmentStatusUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o shipment status unprocessable entity response has a 5xx status code
func (o *UpdateMTOShipmentStatusUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o shipment status unprocessable entity response a status code equal to that given
func (o *UpdateMTOShipmentStatusUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update m t o shipment status unprocessable entity response
func (o *UpdateMTOShipmentStatusUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateMTOShipmentStatusUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateMTOShipmentStatusUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateMTOShipmentStatusUnprocessableEntity) GetPayload() *supportmessages.ValidationError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusInternalServerError creates a UpdateMTOShipmentStatusInternalServerError with default headers values
func NewUpdateMTOShipmentStatusInternalServerError() *UpdateMTOShipmentStatusInternalServerError {
	return &UpdateMTOShipmentStatusInternalServerError{}
}

/*
UpdateMTOShipmentStatusInternalServerError describes a response with status code 500, with default header values.

A server error occurred.
*/
type UpdateMTOShipmentStatusInternalServerError struct {
	Payload *supportmessages.Error
}

// IsSuccess returns true when this update m t o shipment status internal server error response has a 2xx status code
func (o *UpdateMTOShipmentStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o shipment status internal server error response has a 3xx status code
func (o *UpdateMTOShipmentStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o shipment status internal server error response has a 4xx status code
func (o *UpdateMTOShipmentStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update m t o shipment status internal server error response has a 5xx status code
func (o *UpdateMTOShipmentStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update m t o shipment status internal server error response a status code equal to that given
func (o *UpdateMTOShipmentStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update m t o shipment status internal server error response
func (o *UpdateMTOShipmentStatusInternalServerError) Code() int {
	return 500
}

func (o *UpdateMTOShipmentStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateMTOShipmentStatusInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateMTOShipmentStatusInternalServerError) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
