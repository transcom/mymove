// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/supportmessages"
)

// UpdateMTOShipmentStatusReader is a Reader for the UpdateMTOShipmentStatus structure.
type UpdateMTOShipmentStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMTOShipmentStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateMTOShipmentStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateMTOShipmentStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateMTOShipmentStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateMTOShipmentStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateMTOShipmentStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateMTOShipmentStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateMTOShipmentStatusPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateMTOShipmentStatusUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateMTOShipmentStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateMTOShipmentStatusOK creates a UpdateMTOShipmentStatusOK with default headers values
func NewUpdateMTOShipmentStatusOK() *UpdateMTOShipmentStatusOK {
	return &UpdateMTOShipmentStatusOK{}
}

/*UpdateMTOShipmentStatusOK handles this case with default header values.

Successfully updated the shipment's status.
*/
type UpdateMTOShipmentStatusOK struct {
	Payload *supportmessages.MTOShipment
}

func (o *UpdateMTOShipmentStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusOK  %+v", 200, o.Payload)
}

func (o *UpdateMTOShipmentStatusOK) GetPayload() *supportmessages.MTOShipment {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.MTOShipment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusBadRequest creates a UpdateMTOShipmentStatusBadRequest with default headers values
func NewUpdateMTOShipmentStatusBadRequest() *UpdateMTOShipmentStatusBadRequest {
	return &UpdateMTOShipmentStatusBadRequest{}
}

/*UpdateMTOShipmentStatusBadRequest handles this case with default header values.

The request payload is invalid.
*/
type UpdateMTOShipmentStatusBadRequest struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateMTOShipmentStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMTOShipmentStatusBadRequest) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusUnauthorized creates a UpdateMTOShipmentStatusUnauthorized with default headers values
func NewUpdateMTOShipmentStatusUnauthorized() *UpdateMTOShipmentStatusUnauthorized {
	return &UpdateMTOShipmentStatusUnauthorized{}
}

/*UpdateMTOShipmentStatusUnauthorized handles this case with default header values.

The request was denied.
*/
type UpdateMTOShipmentStatusUnauthorized struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateMTOShipmentStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateMTOShipmentStatusUnauthorized) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusForbidden creates a UpdateMTOShipmentStatusForbidden with default headers values
func NewUpdateMTOShipmentStatusForbidden() *UpdateMTOShipmentStatusForbidden {
	return &UpdateMTOShipmentStatusForbidden{}
}

/*UpdateMTOShipmentStatusForbidden handles this case with default header values.

The request was denied.
*/
type UpdateMTOShipmentStatusForbidden struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateMTOShipmentStatusForbidden) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusForbidden  %+v", 403, o.Payload)
}

func (o *UpdateMTOShipmentStatusForbidden) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusNotFound creates a UpdateMTOShipmentStatusNotFound with default headers values
func NewUpdateMTOShipmentStatusNotFound() *UpdateMTOShipmentStatusNotFound {
	return &UpdateMTOShipmentStatusNotFound{}
}

/*UpdateMTOShipmentStatusNotFound handles this case with default header values.

The requested resource wasn't found.
*/
type UpdateMTOShipmentStatusNotFound struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateMTOShipmentStatusNotFound) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMTOShipmentStatusNotFound) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusConflict creates a UpdateMTOShipmentStatusConflict with default headers values
func NewUpdateMTOShipmentStatusConflict() *UpdateMTOShipmentStatusConflict {
	return &UpdateMTOShipmentStatusConflict{}
}

/*UpdateMTOShipmentStatusConflict handles this case with default header values.

There was a conflict with the request.
*/
type UpdateMTOShipmentStatusConflict struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateMTOShipmentStatusConflict) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusConflict  %+v", 409, o.Payload)
}

func (o *UpdateMTOShipmentStatusConflict) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusPreconditionFailed creates a UpdateMTOShipmentStatusPreconditionFailed with default headers values
func NewUpdateMTOShipmentStatusPreconditionFailed() *UpdateMTOShipmentStatusPreconditionFailed {
	return &UpdateMTOShipmentStatusPreconditionFailed{}
}

/*UpdateMTOShipmentStatusPreconditionFailed handles this case with default header values.

Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
*/
type UpdateMTOShipmentStatusPreconditionFailed struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateMTOShipmentStatusPreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateMTOShipmentStatusPreconditionFailed) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusUnprocessableEntity creates a UpdateMTOShipmentStatusUnprocessableEntity with default headers values
func NewUpdateMTOShipmentStatusUnprocessableEntity() *UpdateMTOShipmentStatusUnprocessableEntity {
	return &UpdateMTOShipmentStatusUnprocessableEntity{}
}

/*UpdateMTOShipmentStatusUnprocessableEntity handles this case with default header values.

The payload was unprocessable.
*/
type UpdateMTOShipmentStatusUnprocessableEntity struct {
	Payload *supportmessages.ValidationError
}

func (o *UpdateMTOShipmentStatusUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateMTOShipmentStatusUnprocessableEntity) GetPayload() *supportmessages.ValidationError {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOShipmentStatusInternalServerError creates a UpdateMTOShipmentStatusInternalServerError with default headers values
func NewUpdateMTOShipmentStatusInternalServerError() *UpdateMTOShipmentStatusInternalServerError {
	return &UpdateMTOShipmentStatusInternalServerError{}
}

/*UpdateMTOShipmentStatusInternalServerError handles this case with default header values.

A server error occurred.
*/
type UpdateMTOShipmentStatusInternalServerError struct {
	Payload *supportmessages.Error
}

func (o *UpdateMTOShipmentStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/status][%d] updateMTOShipmentStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateMTOShipmentStatusInternalServerError) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *UpdateMTOShipmentStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
