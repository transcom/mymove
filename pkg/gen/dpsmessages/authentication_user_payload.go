// Code generated by go-swagger; DO NOT EDIT.

package dpsmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthenticationUserPayload authentication user payload
//
// swagger:model AuthenticationUserPayload
type AuthenticationUserPayload struct {

	// affiliation
	Affiliation *Affiliation `json:"affiliation,omitempty"`

	// email
	// Example: john_bob@example.com
	// Pattern: ^[a-zA-Z0-9.!#$%&'*+/=?^_{|}~-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
	Email string `json:"email,omitempty"`

	// first name
	// Example: John
	FirstName string `json:"first_name,omitempty"`

	// last name
	// Example: Donut
	LastName string `json:"last_name,omitempty"`

	// login gov id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	LoginGovID strfmt.UUID `json:"login_gov_id,omitempty"`

	// middle name
	// Example: L.
	MiddleName *string `json:"middle_name,omitempty"`

	// social security number
	// Example: 666555555
	// Pattern: ^\d{9}$
	// Format: ssn
	SocialSecurityNumber strfmt.SSN `json:"social_security_number,omitempty"`

	// suffix
	// Example: Jr.
	Suffix *string `json:"suffix,omitempty"`

	// telephone
	// Example: 212-555-5555
	Telephone *string `json:"telephone,omitempty"`
}

// Validate validates this authentication user payload
func (m *AuthenticationUserPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginGovID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSocialSecurityNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthenticationUserPayload) validateAffiliation(formats strfmt.Registry) error {
	if swag.IsZero(m.Affiliation) { // not required
		return nil
	}

	if m.Affiliation != nil {
		if err := m.Affiliation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *AuthenticationUserPayload) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.Pattern("email", "body", m.Email, `^[a-zA-Z0-9.!#$%&'*+/=?^_{|}~-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticationUserPayload) validateLoginGovID(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginGovID) { // not required
		return nil
	}

	if err := validate.FormatOf("login_gov_id", "body", "uuid", m.LoginGovID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticationUserPayload) validateSocialSecurityNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.SocialSecurityNumber) { // not required
		return nil
	}

	if err := validate.Pattern("social_security_number", "body", m.SocialSecurityNumber.String(), `^\d{9}$`); err != nil {
		return err
	}

	if err := validate.FormatOf("social_security_number", "body", "ssn", m.SocialSecurityNumber.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this authentication user payload based on the context it is used
func (m *AuthenticationUserPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffiliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthenticationUserPayload) contextValidateAffiliation(ctx context.Context, formats strfmt.Registry) error {

	if m.Affiliation != nil {
		if err := m.Affiliation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthenticationUserPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthenticationUserPayload) UnmarshalBinary(b []byte) error {
	var res AuthenticationUserPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
