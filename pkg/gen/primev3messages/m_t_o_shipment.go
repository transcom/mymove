// Code generated by go-swagger; DO NOT EDIT.

package primev3messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MTOShipment m t o shipment
//
// swagger:model MTOShipment
type MTOShipment struct {
	MTOShipmentWithoutServiceItems

	mtoServiceItemsField []MTOServiceItem
}

// MtoServiceItems gets the mto service items of this base type
func (m *MTOShipment) MtoServiceItems() []MTOServiceItem {
	return m.mtoServiceItemsField
}

// SetMtoServiceItems sets the mto service items of this base type
func (m *MTOShipment) SetMtoServiceItems(val []MTOServiceItem) {
	m.mtoServiceItemsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *MTOShipment) UnmarshalJSON(raw []byte) error {
	var data struct {
		MTOShipmentWithoutServiceItems

		MtoServiceItems json.RawMessage `json:"mtoServiceItems"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propMtoServiceItems []MTOServiceItem
	if string(data.MtoServiceItems) != "null" {
		mtoServiceItems, err := UnmarshalMTOServiceItemSlice(bytes.NewBuffer(data.MtoServiceItems), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propMtoServiceItems = mtoServiceItems
	}

	var result MTOShipment

	result.MTOShipmentWithoutServiceItems = data.MTOShipmentWithoutServiceItems

	// mtoServiceItems
	result.mtoServiceItemsField = propMtoServiceItems

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m MTOShipment) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		MTOShipmentWithoutServiceItems
	}{

		MTOShipmentWithoutServiceItems: m.MTOShipmentWithoutServiceItems,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		MtoServiceItems []MTOServiceItem `json:"mtoServiceItems"`
	}{

		MtoServiceItems: m.mtoServiceItemsField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this m t o shipment
func (m *MTOShipment) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MTOShipmentWithoutServiceItems
	if err := m.MTOShipmentWithoutServiceItems.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoServiceItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOShipment) validateMtoServiceItems(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoServiceItems()) { // not required
		return nil
	}

	for i := 0; i < len(m.MtoServiceItems()); i++ {

		if err := m.mtoServiceItemsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mtoServiceItems" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mtoServiceItems" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this m t o shipment based on the context it is used
func (m *MTOShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MTOShipmentWithoutServiceItems
	if err := m.MTOShipmentWithoutServiceItems.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtoServiceItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOShipment) contextValidateMtoServiceItems(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "mtoServiceItems", "body", []MTOServiceItem(m.MtoServiceItems())); err != nil {
		return err
	}

	for i := 0; i < len(m.MtoServiceItems()); i++ {

		if swag.IsZero(m.mtoServiceItemsField[i]) { // not required
			return nil
		}

		if err := m.mtoServiceItemsField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mtoServiceItems" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mtoServiceItems" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MTOShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MTOShipment) UnmarshalBinary(b []byte) error {
	var res MTOShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
