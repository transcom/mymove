// Code generated by go-swagger; DO NOT EDIT.

package primev3messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ShipmentAddressUpdateStatus Status
//
// swagger:model ShipmentAddressUpdateStatus
type ShipmentAddressUpdateStatus string

func NewShipmentAddressUpdateStatus(value ShipmentAddressUpdateStatus) *ShipmentAddressUpdateStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ShipmentAddressUpdateStatus.
func (m ShipmentAddressUpdateStatus) Pointer() *ShipmentAddressUpdateStatus {
	return &m
}

const (

	// ShipmentAddressUpdateStatusREQUESTED captures enum value "REQUESTED"
	ShipmentAddressUpdateStatusREQUESTED ShipmentAddressUpdateStatus = "REQUESTED"

	// ShipmentAddressUpdateStatusREJECTED captures enum value "REJECTED"
	ShipmentAddressUpdateStatusREJECTED ShipmentAddressUpdateStatus = "REJECTED"

	// ShipmentAddressUpdateStatusAPPROVED captures enum value "APPROVED"
	ShipmentAddressUpdateStatusAPPROVED ShipmentAddressUpdateStatus = "APPROVED"
)

// for schema
var shipmentAddressUpdateStatusEnum []interface{}

func init() {
	var res []ShipmentAddressUpdateStatus
	if err := json.Unmarshal([]byte(`["REQUESTED","REJECTED","APPROVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shipmentAddressUpdateStatusEnum = append(shipmentAddressUpdateStatusEnum, v)
	}
}

func (m ShipmentAddressUpdateStatus) validateShipmentAddressUpdateStatusEnum(path, location string, value ShipmentAddressUpdateStatus) error {
	if err := validate.EnumCase(path, location, value, shipmentAddressUpdateStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this shipment address update status
func (m ShipmentAddressUpdateStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateShipmentAddressUpdateStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this shipment address update status based on the context it is used
func (m ShipmentAddressUpdateStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := validate.ReadOnly(ctx, "", "body", ShipmentAddressUpdateStatus(m)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
