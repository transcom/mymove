// Code generated by go-swagger; DO NOT EDIT.

package primev3messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PPMShipmentStatus Status of the PPM Shipment:
//   - **DRAFT**: The customer has created the PPM shipment but has not yet submitted their move for counseling.
//   - **SUBMITTED**: The shipment belongs to a move that has been submitted by the customer or has been created by a Service Counselor or Prime Contractor for a submitted move.
//   - **WAITING_ON_CUSTOMER**: The PPM shipment has been approved and the customer may now provide their actual move closeout information and documentation required to get paid.
//   - **NEEDS_ADVANCE_APPROVAL**: The shipment was counseled by the Prime Contractor and approved but an advance was requested so will need further financial approval from the government.
//   - **NEEDS_CLOSEOUT**: The customer has provided their closeout weight tickets, receipts, and expenses and certified it for the Service Counselor to approve, exclude or reject.
//   - **CLOSEOUT_COMPLETE**: The Service Counselor has reviewed all of the customer's PPM closeout documentation and authorizes the customer can download and submit their finalized SSW packet.
//
// swagger:model PPMShipmentStatus
type PPMShipmentStatus string

func NewPPMShipmentStatus(value PPMShipmentStatus) *PPMShipmentStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PPMShipmentStatus.
func (m PPMShipmentStatus) Pointer() *PPMShipmentStatus {
	return &m
}

const (

	// PPMShipmentStatusDRAFT captures enum value "DRAFT"
	PPMShipmentStatusDRAFT PPMShipmentStatus = "DRAFT"

	// PPMShipmentStatusSUBMITTED captures enum value "SUBMITTED"
	PPMShipmentStatusSUBMITTED PPMShipmentStatus = "SUBMITTED"

	// PPMShipmentStatusWAITINGONCUSTOMER captures enum value "WAITING_ON_CUSTOMER"
	PPMShipmentStatusWAITINGONCUSTOMER PPMShipmentStatus = "WAITING_ON_CUSTOMER"

	// PPMShipmentStatusNEEDSADVANCEAPPROVAL captures enum value "NEEDS_ADVANCE_APPROVAL"
	PPMShipmentStatusNEEDSADVANCEAPPROVAL PPMShipmentStatus = "NEEDS_ADVANCE_APPROVAL"

	// PPMShipmentStatusNEEDSCLOSEOUT captures enum value "NEEDS_CLOSEOUT"
	PPMShipmentStatusNEEDSCLOSEOUT PPMShipmentStatus = "NEEDS_CLOSEOUT"

	// PPMShipmentStatusCLOSEOUTCOMPLETE captures enum value "CLOSEOUT_COMPLETE"
	PPMShipmentStatusCLOSEOUTCOMPLETE PPMShipmentStatus = "CLOSEOUT_COMPLETE"

	// PPMShipmentStatusCANCELLED captures enum value "CANCELLED"
	PPMShipmentStatusCANCELLED PPMShipmentStatus = "CANCELLED"
)

// for schema
var pPMShipmentStatusEnum []interface{}

func init() {
	var res []PPMShipmentStatus
	if err := json.Unmarshal([]byte(`["DRAFT","SUBMITTED","WAITING_ON_CUSTOMER","NEEDS_ADVANCE_APPROVAL","NEEDS_CLOSEOUT","CLOSEOUT_COMPLETE","CANCELLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pPMShipmentStatusEnum = append(pPMShipmentStatusEnum, v)
	}
}

func (m PPMShipmentStatus) validatePPMShipmentStatusEnum(path, location string, value PPMShipmentStatus) error {
	if err := validate.EnumCase(path, location, value, pPMShipmentStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this p p m shipment status
func (m PPMShipmentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePPMShipmentStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this p p m shipment status based on the context it is used
func (m PPMShipmentStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := validate.ReadOnly(ctx, "", "body", PPMShipmentStatus(m)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
