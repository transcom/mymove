// Code generated by go-swagger; DO NOT EDIT.

package primev3messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PPMDestinationAddress A postal address
//
// swagger:model PPMDestinationAddress
type PPMDestinationAddress struct {

	// City
	// Example: Anytown
	// Required: true
	City *string `json:"city"`

	// Country
	// Example: USA
	Country *string `json:"country,omitempty"`

	// County
	// Example: LOS ANGELES
	County *string `json:"county,omitempty"`

	// e tag
	// Read Only: true
	ETag string `json:"eTag,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// ZIP
	// Example: 90210
	// Required: true
	// Pattern: ^(\d{5}([\-]\d{4})?)$
	PostalCode *string `json:"postalCode"`

	// State
	// Required: true
	// Enum: [AL AK AR AZ CA CO CT DC DE FL GA HI IA ID IL IN KS KY LA MA MD ME MI MN MO MS MT NC ND NE NH NJ NM NV NY OH OK OR PA RI SC SD TN TX UT VA VT WA WI WV WY]
	State *string `json:"state"`

	// Street address 1
	// Example: 123 Main Ave
	StreetAddress1 *string `json:"streetAddress1,omitempty"`

	// Street address 2
	// Example: Apartment 9000
	StreetAddress2 *string `json:"streetAddress2,omitempty"`

	// Address Line 3
	// Example: MontmÃ¢rtre
	StreetAddress3 *string `json:"streetAddress3,omitempty"`

	// us post region cities ID
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	UsPostRegionCitiesID strfmt.UUID `json:"usPostRegionCitiesID,omitempty"`
}

// Validate validates this p p m destination address
func (m *PPMDestinationAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsPostRegionCitiesID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPMDestinationAddress) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *PPMDestinationAddress) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMDestinationAddress) validatePostalCode(formats strfmt.Registry) error {

	if err := validate.Required("postalCode", "body", m.PostalCode); err != nil {
		return err
	}

	if err := validate.Pattern("postalCode", "body", *m.PostalCode, `^(\d{5}([\-]\d{4})?)$`); err != nil {
		return err
	}

	return nil
}

var pPMDestinationAddressTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AL","AK","AR","AZ","CA","CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pPMDestinationAddressTypeStatePropEnum = append(pPMDestinationAddressTypeStatePropEnum, v)
	}
}

const (

	// PPMDestinationAddressStateAL captures enum value "AL"
	PPMDestinationAddressStateAL string = "AL"

	// PPMDestinationAddressStateAK captures enum value "AK"
	PPMDestinationAddressStateAK string = "AK"

	// PPMDestinationAddressStateAR captures enum value "AR"
	PPMDestinationAddressStateAR string = "AR"

	// PPMDestinationAddressStateAZ captures enum value "AZ"
	PPMDestinationAddressStateAZ string = "AZ"

	// PPMDestinationAddressStateCA captures enum value "CA"
	PPMDestinationAddressStateCA string = "CA"

	// PPMDestinationAddressStateCO captures enum value "CO"
	PPMDestinationAddressStateCO string = "CO"

	// PPMDestinationAddressStateCT captures enum value "CT"
	PPMDestinationAddressStateCT string = "CT"

	// PPMDestinationAddressStateDC captures enum value "DC"
	PPMDestinationAddressStateDC string = "DC"

	// PPMDestinationAddressStateDE captures enum value "DE"
	PPMDestinationAddressStateDE string = "DE"

	// PPMDestinationAddressStateFL captures enum value "FL"
	PPMDestinationAddressStateFL string = "FL"

	// PPMDestinationAddressStateGA captures enum value "GA"
	PPMDestinationAddressStateGA string = "GA"

	// PPMDestinationAddressStateHI captures enum value "HI"
	PPMDestinationAddressStateHI string = "HI"

	// PPMDestinationAddressStateIA captures enum value "IA"
	PPMDestinationAddressStateIA string = "IA"

	// PPMDestinationAddressStateID captures enum value "ID"
	PPMDestinationAddressStateID string = "ID"

	// PPMDestinationAddressStateIL captures enum value "IL"
	PPMDestinationAddressStateIL string = "IL"

	// PPMDestinationAddressStateIN captures enum value "IN"
	PPMDestinationAddressStateIN string = "IN"

	// PPMDestinationAddressStateKS captures enum value "KS"
	PPMDestinationAddressStateKS string = "KS"

	// PPMDestinationAddressStateKY captures enum value "KY"
	PPMDestinationAddressStateKY string = "KY"

	// PPMDestinationAddressStateLA captures enum value "LA"
	PPMDestinationAddressStateLA string = "LA"

	// PPMDestinationAddressStateMA captures enum value "MA"
	PPMDestinationAddressStateMA string = "MA"

	// PPMDestinationAddressStateMD captures enum value "MD"
	PPMDestinationAddressStateMD string = "MD"

	// PPMDestinationAddressStateME captures enum value "ME"
	PPMDestinationAddressStateME string = "ME"

	// PPMDestinationAddressStateMI captures enum value "MI"
	PPMDestinationAddressStateMI string = "MI"

	// PPMDestinationAddressStateMN captures enum value "MN"
	PPMDestinationAddressStateMN string = "MN"

	// PPMDestinationAddressStateMO captures enum value "MO"
	PPMDestinationAddressStateMO string = "MO"

	// PPMDestinationAddressStateMS captures enum value "MS"
	PPMDestinationAddressStateMS string = "MS"

	// PPMDestinationAddressStateMT captures enum value "MT"
	PPMDestinationAddressStateMT string = "MT"

	// PPMDestinationAddressStateNC captures enum value "NC"
	PPMDestinationAddressStateNC string = "NC"

	// PPMDestinationAddressStateND captures enum value "ND"
	PPMDestinationAddressStateND string = "ND"

	// PPMDestinationAddressStateNE captures enum value "NE"
	PPMDestinationAddressStateNE string = "NE"

	// PPMDestinationAddressStateNH captures enum value "NH"
	PPMDestinationAddressStateNH string = "NH"

	// PPMDestinationAddressStateNJ captures enum value "NJ"
	PPMDestinationAddressStateNJ string = "NJ"

	// PPMDestinationAddressStateNM captures enum value "NM"
	PPMDestinationAddressStateNM string = "NM"

	// PPMDestinationAddressStateNV captures enum value "NV"
	PPMDestinationAddressStateNV string = "NV"

	// PPMDestinationAddressStateNY captures enum value "NY"
	PPMDestinationAddressStateNY string = "NY"

	// PPMDestinationAddressStateOH captures enum value "OH"
	PPMDestinationAddressStateOH string = "OH"

	// PPMDestinationAddressStateOK captures enum value "OK"
	PPMDestinationAddressStateOK string = "OK"

	// PPMDestinationAddressStateOR captures enum value "OR"
	PPMDestinationAddressStateOR string = "OR"

	// PPMDestinationAddressStatePA captures enum value "PA"
	PPMDestinationAddressStatePA string = "PA"

	// PPMDestinationAddressStateRI captures enum value "RI"
	PPMDestinationAddressStateRI string = "RI"

	// PPMDestinationAddressStateSC captures enum value "SC"
	PPMDestinationAddressStateSC string = "SC"

	// PPMDestinationAddressStateSD captures enum value "SD"
	PPMDestinationAddressStateSD string = "SD"

	// PPMDestinationAddressStateTN captures enum value "TN"
	PPMDestinationAddressStateTN string = "TN"

	// PPMDestinationAddressStateTX captures enum value "TX"
	PPMDestinationAddressStateTX string = "TX"

	// PPMDestinationAddressStateUT captures enum value "UT"
	PPMDestinationAddressStateUT string = "UT"

	// PPMDestinationAddressStateVA captures enum value "VA"
	PPMDestinationAddressStateVA string = "VA"

	// PPMDestinationAddressStateVT captures enum value "VT"
	PPMDestinationAddressStateVT string = "VT"

	// PPMDestinationAddressStateWA captures enum value "WA"
	PPMDestinationAddressStateWA string = "WA"

	// PPMDestinationAddressStateWI captures enum value "WI"
	PPMDestinationAddressStateWI string = "WI"

	// PPMDestinationAddressStateWV captures enum value "WV"
	PPMDestinationAddressStateWV string = "WV"

	// PPMDestinationAddressStateWY captures enum value "WY"
	PPMDestinationAddressStateWY string = "WY"
)

// prop value enum
func (m *PPMDestinationAddress) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pPMDestinationAddressTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PPMDestinationAddress) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *PPMDestinationAddress) validateUsPostRegionCitiesID(formats strfmt.Registry) error {
	if swag.IsZero(m.UsPostRegionCitiesID) { // not required
		return nil
	}

	if err := validate.FormatOf("usPostRegionCitiesID", "body", "uuid", m.UsPostRegionCitiesID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p p m destination address based on the context it is used
func (m *PPMDestinationAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPMDestinationAddress) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PPMDestinationAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PPMDestinationAddress) UnmarshalBinary(b []byte) error {
	var res PPMDestinationAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
