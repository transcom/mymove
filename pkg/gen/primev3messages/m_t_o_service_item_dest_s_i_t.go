// Code generated by go-swagger; DO NOT EDIT.

package primev3messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MTOServiceItemDestSIT Describes a domestic destination SIT service item. Subtype of a MTOServiceItem.
//
// swagger:model MTOServiceItemDestSIT
type MTOServiceItemDestSIT struct {
	eTagField string

	idField strfmt.UUID

	lockedPriceCentsField *int64

	moveTaskOrderIdField *strfmt.UUID

	mtoShipmentIdField strfmt.UUID

	reServiceNameField string

	rejectionReasonField *string

	serviceRequestDocumentsField ServiceRequestDocuments

	statusField MTOServiceItemStatus

	// Date of attempted contact by the prime corresponding to `timeMilitary1`.
	// Format: date
	DateOfContact1 *strfmt.Date `json:"dateOfContact1,omitempty"`

	// Date of attempted contact by the prime corresponding to `timeMilitary2`.
	// Format: date
	DateOfContact2 *strfmt.Date `json:"dateOfContact2,omitempty"`

	// First available date that Prime can deliver SIT service item.
	// Format: date
	FirstAvailableDeliveryDate1 *strfmt.Date `json:"firstAvailableDeliveryDate1,omitempty"`

	// Second available date that Prime can deliver SIT service item.
	// Format: date
	FirstAvailableDeliveryDate2 *strfmt.Date `json:"firstAvailableDeliveryDate2,omitempty"`

	// Service code allowed for this model type.
	// Required: true
	// Enum: [DDFSIT DDASIT]
	ReServiceCode *string `json:"reServiceCode"`

	// The reason item has been placed in SIT.
	//
	// Required: true
	Reason *string `json:"reason"`

	// sit address updates
	SitAddressUpdates SitAddressUpdates `json:"sitAddressUpdates,omitempty"`

	// Date when the customer contacted the prime for a delivery out of SIT.
	// Format: date
	SitCustomerContacted *strfmt.Date `json:"sitCustomerContacted,omitempty"`

	// Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.
	// Format: date
	SitDepartureDate *strfmt.Date `json:"sitDepartureDate,omitempty"`

	// sit destination final address
	SitDestinationFinalAddress *Address `json:"sitDestinationFinalAddress,omitempty"`

	// Entry date for the SIT
	// Required: true
	// Format: date
	SitEntryDate *strfmt.Date `json:"sitEntryDate"`

	// Date when the customer has requested delivery out of SIT.
	// Format: date
	SitRequestedDelivery *strfmt.Date `json:"sitRequestedDelivery,omitempty"`

	// Time of attempted contact corresponding to `dateOfContact1`, in military format.
	// Example: 1400Z
	// Pattern: \d{4}Z
	TimeMilitary1 *string `json:"timeMilitary1,omitempty"`

	// Time of attempted contact corresponding to `dateOfContact2`, in military format.
	// Example: 1400Z
	// Pattern: \d{4}Z
	TimeMilitary2 *string `json:"timeMilitary2,omitempty"`
}

// ETag gets the e tag of this subtype
func (m *MTOServiceItemDestSIT) ETag() string {
	return m.eTagField
}

// SetETag sets the e tag of this subtype
func (m *MTOServiceItemDestSIT) SetETag(val string) {
	m.eTagField = val
}

// ID gets the id of this subtype
func (m *MTOServiceItemDestSIT) ID() strfmt.UUID {
	return m.idField
}

// SetID sets the id of this subtype
func (m *MTOServiceItemDestSIT) SetID(val strfmt.UUID) {
	m.idField = val
}

// LockedPriceCents gets the locked price cents of this subtype
func (m *MTOServiceItemDestSIT) LockedPriceCents() *int64 {
	return m.lockedPriceCentsField
}

// SetLockedPriceCents sets the locked price cents of this subtype
func (m *MTOServiceItemDestSIT) SetLockedPriceCents(val *int64) {
	m.lockedPriceCentsField = val
}

// ModelType gets the model type of this subtype
func (m *MTOServiceItemDestSIT) ModelType() MTOServiceItemModelType {
	return "MTOServiceItemDestSIT"
}

// SetModelType sets the model type of this subtype
func (m *MTOServiceItemDestSIT) SetModelType(val MTOServiceItemModelType) {
}

// MoveTaskOrderID gets the move task order ID of this subtype
func (m *MTOServiceItemDestSIT) MoveTaskOrderID() *strfmt.UUID {
	return m.moveTaskOrderIdField
}

// SetMoveTaskOrderID sets the move task order ID of this subtype
func (m *MTOServiceItemDestSIT) SetMoveTaskOrderID(val *strfmt.UUID) {
	m.moveTaskOrderIdField = val
}

// MtoShipmentID gets the mto shipment ID of this subtype
func (m *MTOServiceItemDestSIT) MtoShipmentID() strfmt.UUID {
	return m.mtoShipmentIdField
}

// SetMtoShipmentID sets the mto shipment ID of this subtype
func (m *MTOServiceItemDestSIT) SetMtoShipmentID(val strfmt.UUID) {
	m.mtoShipmentIdField = val
}

// ReServiceName gets the re service name of this subtype
func (m *MTOServiceItemDestSIT) ReServiceName() string {
	return m.reServiceNameField
}

// SetReServiceName sets the re service name of this subtype
func (m *MTOServiceItemDestSIT) SetReServiceName(val string) {
	m.reServiceNameField = val
}

// RejectionReason gets the rejection reason of this subtype
func (m *MTOServiceItemDestSIT) RejectionReason() *string {
	return m.rejectionReasonField
}

// SetRejectionReason sets the rejection reason of this subtype
func (m *MTOServiceItemDestSIT) SetRejectionReason(val *string) {
	m.rejectionReasonField = val
}

// ServiceRequestDocuments gets the service request documents of this subtype
func (m *MTOServiceItemDestSIT) ServiceRequestDocuments() ServiceRequestDocuments {
	return m.serviceRequestDocumentsField
}

// SetServiceRequestDocuments sets the service request documents of this subtype
func (m *MTOServiceItemDestSIT) SetServiceRequestDocuments(val ServiceRequestDocuments) {
	m.serviceRequestDocumentsField = val
}

// Status gets the status of this subtype
func (m *MTOServiceItemDestSIT) Status() MTOServiceItemStatus {
	return m.statusField
}

// SetStatus sets the status of this subtype
func (m *MTOServiceItemDestSIT) SetStatus(val MTOServiceItemStatus) {
	m.statusField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *MTOServiceItemDestSIT) UnmarshalJSON(raw []byte) error {
	var data struct {

		// Date of attempted contact by the prime corresponding to `timeMilitary1`.
		// Format: date
		DateOfContact1 *strfmt.Date `json:"dateOfContact1,omitempty"`

		// Date of attempted contact by the prime corresponding to `timeMilitary2`.
		// Format: date
		DateOfContact2 *strfmt.Date `json:"dateOfContact2,omitempty"`

		// First available date that Prime can deliver SIT service item.
		// Format: date
		FirstAvailableDeliveryDate1 *strfmt.Date `json:"firstAvailableDeliveryDate1,omitempty"`

		// Second available date that Prime can deliver SIT service item.
		// Format: date
		FirstAvailableDeliveryDate2 *strfmt.Date `json:"firstAvailableDeliveryDate2,omitempty"`

		// Service code allowed for this model type.
		// Required: true
		// Enum: [DDFSIT DDASIT]
		ReServiceCode *string `json:"reServiceCode"`

		// The reason item has been placed in SIT.
		//
		// Required: true
		Reason *string `json:"reason"`

		// sit address updates
		SitAddressUpdates SitAddressUpdates `json:"sitAddressUpdates,omitempty"`

		// Date when the customer contacted the prime for a delivery out of SIT.
		// Format: date
		SitCustomerContacted *strfmt.Date `json:"sitCustomerContacted,omitempty"`

		// Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.
		// Format: date
		SitDepartureDate *strfmt.Date `json:"sitDepartureDate,omitempty"`

		// sit destination final address
		SitDestinationFinalAddress *Address `json:"sitDestinationFinalAddress,omitempty"`

		// Entry date for the SIT
		// Required: true
		// Format: date
		SitEntryDate *strfmt.Date `json:"sitEntryDate"`

		// Date when the customer has requested delivery out of SIT.
		// Format: date
		SitRequestedDelivery *strfmt.Date `json:"sitRequestedDelivery,omitempty"`

		// Time of attempted contact corresponding to `dateOfContact1`, in military format.
		// Example: 1400Z
		// Pattern: \d{4}Z
		TimeMilitary1 *string `json:"timeMilitary1,omitempty"`

		// Time of attempted contact corresponding to `dateOfContact2`, in military format.
		// Example: 1400Z
		// Pattern: \d{4}Z
		TimeMilitary2 *string `json:"timeMilitary2,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ETag string `json:"eTag,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		LockedPriceCents *int64 `json:"lockedPriceCents,omitempty"`

		ModelType MTOServiceItemModelType `json:"modelType"`

		MoveTaskOrderID *strfmt.UUID `json:"moveTaskOrderID"`

		MtoShipmentID strfmt.UUID `json:"mtoShipmentID,omitempty"`

		ReServiceName string `json:"reServiceName,omitempty"`

		RejectionReason *string `json:"rejectionReason,omitempty"`

		ServiceRequestDocuments ServiceRequestDocuments `json:"serviceRequestDocuments,omitempty"`

		Status MTOServiceItemStatus `json:"status,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result MTOServiceItemDestSIT

	result.eTagField = base.ETag

	result.idField = base.ID

	result.lockedPriceCentsField = base.LockedPriceCents

	if base.ModelType != result.ModelType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid modelType value: %q", base.ModelType)
	}
	result.moveTaskOrderIdField = base.MoveTaskOrderID

	result.mtoShipmentIdField = base.MtoShipmentID

	result.reServiceNameField = base.ReServiceName

	result.rejectionReasonField = base.RejectionReason

	result.serviceRequestDocumentsField = base.ServiceRequestDocuments

	result.statusField = base.Status

	result.DateOfContact1 = data.DateOfContact1
	result.DateOfContact2 = data.DateOfContact2
	result.FirstAvailableDeliveryDate1 = data.FirstAvailableDeliveryDate1
	result.FirstAvailableDeliveryDate2 = data.FirstAvailableDeliveryDate2
	result.ReServiceCode = data.ReServiceCode
	result.Reason = data.Reason
	result.SitAddressUpdates = data.SitAddressUpdates
	result.SitCustomerContacted = data.SitCustomerContacted
	result.SitDepartureDate = data.SitDepartureDate
	result.SitDestinationFinalAddress = data.SitDestinationFinalAddress
	result.SitEntryDate = data.SitEntryDate
	result.SitRequestedDelivery = data.SitRequestedDelivery
	result.TimeMilitary1 = data.TimeMilitary1
	result.TimeMilitary2 = data.TimeMilitary2

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m MTOServiceItemDestSIT) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// Date of attempted contact by the prime corresponding to `timeMilitary1`.
		// Format: date
		DateOfContact1 *strfmt.Date `json:"dateOfContact1,omitempty"`

		// Date of attempted contact by the prime corresponding to `timeMilitary2`.
		// Format: date
		DateOfContact2 *strfmt.Date `json:"dateOfContact2,omitempty"`

		// First available date that Prime can deliver SIT service item.
		// Format: date
		FirstAvailableDeliveryDate1 *strfmt.Date `json:"firstAvailableDeliveryDate1,omitempty"`

		// Second available date that Prime can deliver SIT service item.
		// Format: date
		FirstAvailableDeliveryDate2 *strfmt.Date `json:"firstAvailableDeliveryDate2,omitempty"`

		// Service code allowed for this model type.
		// Required: true
		// Enum: [DDFSIT DDASIT]
		ReServiceCode *string `json:"reServiceCode"`

		// The reason item has been placed in SIT.
		//
		// Required: true
		Reason *string `json:"reason"`

		// sit address updates
		SitAddressUpdates SitAddressUpdates `json:"sitAddressUpdates,omitempty"`

		// Date when the customer contacted the prime for a delivery out of SIT.
		// Format: date
		SitCustomerContacted *strfmt.Date `json:"sitCustomerContacted,omitempty"`

		// Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.
		// Format: date
		SitDepartureDate *strfmt.Date `json:"sitDepartureDate,omitempty"`

		// sit destination final address
		SitDestinationFinalAddress *Address `json:"sitDestinationFinalAddress,omitempty"`

		// Entry date for the SIT
		// Required: true
		// Format: date
		SitEntryDate *strfmt.Date `json:"sitEntryDate"`

		// Date when the customer has requested delivery out of SIT.
		// Format: date
		SitRequestedDelivery *strfmt.Date `json:"sitRequestedDelivery,omitempty"`

		// Time of attempted contact corresponding to `dateOfContact1`, in military format.
		// Example: 1400Z
		// Pattern: \d{4}Z
		TimeMilitary1 *string `json:"timeMilitary1,omitempty"`

		// Time of attempted contact corresponding to `dateOfContact2`, in military format.
		// Example: 1400Z
		// Pattern: \d{4}Z
		TimeMilitary2 *string `json:"timeMilitary2,omitempty"`
	}{

		DateOfContact1: m.DateOfContact1,

		DateOfContact2: m.DateOfContact2,

		FirstAvailableDeliveryDate1: m.FirstAvailableDeliveryDate1,

		FirstAvailableDeliveryDate2: m.FirstAvailableDeliveryDate2,

		ReServiceCode: m.ReServiceCode,

		Reason: m.Reason,

		SitAddressUpdates: m.SitAddressUpdates,

		SitCustomerContacted: m.SitCustomerContacted,

		SitDepartureDate: m.SitDepartureDate,

		SitDestinationFinalAddress: m.SitDestinationFinalAddress,

		SitEntryDate: m.SitEntryDate,

		SitRequestedDelivery: m.SitRequestedDelivery,

		TimeMilitary1: m.TimeMilitary1,

		TimeMilitary2: m.TimeMilitary2,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ETag string `json:"eTag,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		LockedPriceCents *int64 `json:"lockedPriceCents,omitempty"`

		ModelType MTOServiceItemModelType `json:"modelType"`

		MoveTaskOrderID *strfmt.UUID `json:"moveTaskOrderID"`

		MtoShipmentID strfmt.UUID `json:"mtoShipmentID,omitempty"`

		ReServiceName string `json:"reServiceName,omitempty"`

		RejectionReason *string `json:"rejectionReason,omitempty"`

		ServiceRequestDocuments ServiceRequestDocuments `json:"serviceRequestDocuments,omitempty"`

		Status MTOServiceItemStatus `json:"status,omitempty"`
	}{

		ETag: m.ETag(),

		ID: m.ID(),

		LockedPriceCents: m.LockedPriceCents(),

		ModelType: m.ModelType(),

		MoveTaskOrderID: m.MoveTaskOrderID(),

		MtoShipmentID: m.MtoShipmentID(),

		ReServiceName: m.ReServiceName(),

		RejectionReason: m.RejectionReason(),

		ServiceRequestDocuments: m.ServiceRequestDocuments(),

		Status: m.Status(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this m t o service item dest s i t
func (m *MTOServiceItemDestSIT) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveTaskOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceRequestDocuments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateOfContact1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateOfContact2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstAvailableDeliveryDate1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstAvailableDeliveryDate2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReServiceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitAddressUpdates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitCustomerContacted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitDestinationFinalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEntryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitRequestedDelivery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeMilitary1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeMilitary2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOServiceItemDestSIT) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateMoveTaskOrderID(formats strfmt.Registry) error {

	if err := validate.Required("moveTaskOrderID", "body", m.MoveTaskOrderID()); err != nil {
		return err
	}

	if err := validate.FormatOf("moveTaskOrderID", "body", "uuid", m.MoveTaskOrderID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateMtoShipmentID(formats strfmt.Registry) error {

	if swag.IsZero(m.MtoShipmentID()) { // not required
		return nil
	}

	if err := validate.FormatOf("mtoShipmentID", "body", "uuid", m.MtoShipmentID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateServiceRequestDocuments(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceRequestDocuments()) { // not required
		return nil
	}

	if err := m.ServiceRequestDocuments().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceRequestDocuments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceRequestDocuments")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status()) { // not required
		return nil
	}

	if err := m.Status().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateDateOfContact1(formats strfmt.Registry) error {

	if swag.IsZero(m.DateOfContact1) { // not required
		return nil
	}

	if err := validate.FormatOf("dateOfContact1", "body", "date", m.DateOfContact1.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateDateOfContact2(formats strfmt.Registry) error {

	if swag.IsZero(m.DateOfContact2) { // not required
		return nil
	}

	if err := validate.FormatOf("dateOfContact2", "body", "date", m.DateOfContact2.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateFirstAvailableDeliveryDate1(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstAvailableDeliveryDate1) { // not required
		return nil
	}

	if err := validate.FormatOf("firstAvailableDeliveryDate1", "body", "date", m.FirstAvailableDeliveryDate1.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateFirstAvailableDeliveryDate2(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstAvailableDeliveryDate2) { // not required
		return nil
	}

	if err := validate.FormatOf("firstAvailableDeliveryDate2", "body", "date", m.FirstAvailableDeliveryDate2.String(), formats); err != nil {
		return err
	}

	return nil
}

var mTOServiceItemDestSITTypeReServiceCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DDFSIT","DDASIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mTOServiceItemDestSITTypeReServiceCodePropEnum = append(mTOServiceItemDestSITTypeReServiceCodePropEnum, v)
	}
}

// property enum
func (m *MTOServiceItemDestSIT) validateReServiceCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mTOServiceItemDestSITTypeReServiceCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MTOServiceItemDestSIT) validateReServiceCode(formats strfmt.Registry) error {

	if err := validate.Required("reServiceCode", "body", m.ReServiceCode); err != nil {
		return err
	}

	// value enum
	if err := m.validateReServiceCodeEnum("reServiceCode", "body", *m.ReServiceCode); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateSitAddressUpdates(formats strfmt.Registry) error {

	if swag.IsZero(m.SitAddressUpdates) { // not required
		return nil
	}

	if err := m.SitAddressUpdates.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sitAddressUpdates")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sitAddressUpdates")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateSitCustomerContacted(formats strfmt.Registry) error {

	if swag.IsZero(m.SitCustomerContacted) { // not required
		return nil
	}

	if err := validate.FormatOf("sitCustomerContacted", "body", "date", m.SitCustomerContacted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateSitDepartureDate(formats strfmt.Registry) error {

	if swag.IsZero(m.SitDepartureDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitDepartureDate", "body", "date", m.SitDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateSitDestinationFinalAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.SitDestinationFinalAddress) { // not required
		return nil
	}

	if m.SitDestinationFinalAddress != nil {
		if err := m.SitDestinationFinalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitDestinationFinalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitDestinationFinalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateSitEntryDate(formats strfmt.Registry) error {

	if err := validate.Required("sitEntryDate", "body", m.SitEntryDate); err != nil {
		return err
	}

	if err := validate.FormatOf("sitEntryDate", "body", "date", m.SitEntryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateSitRequestedDelivery(formats strfmt.Registry) error {

	if swag.IsZero(m.SitRequestedDelivery) { // not required
		return nil
	}

	if err := validate.FormatOf("sitRequestedDelivery", "body", "date", m.SitRequestedDelivery.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateTimeMilitary1(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeMilitary1) { // not required
		return nil
	}

	if err := validate.Pattern("timeMilitary1", "body", *m.TimeMilitary1, `\d{4}Z`); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) validateTimeMilitary2(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeMilitary2) { // not required
		return nil
	}

	if err := validate.Pattern("timeMilitary2", "body", *m.TimeMilitary2, `\d{4}Z`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this m t o service item dest s i t based on the context it is used
func (m *MTOServiceItemDestSIT) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReServiceName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRejectionReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceRequestDocuments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitAddressUpdates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitDestinationFinalAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOServiceItemDestSIT) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag())); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID())); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) contextValidateModelType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ModelType().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("modelType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("modelType")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) contextValidateReServiceName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "reServiceName", "body", string(m.ReServiceName())); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) contextValidateRejectionReason(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "rejectionReason", "body", m.RejectionReason()); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) contextValidateServiceRequestDocuments(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ServiceRequestDocuments().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceRequestDocuments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceRequestDocuments")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status()) { // not required
		return nil
	}

	if err := m.Status().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) contextValidateSitAddressUpdates(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SitAddressUpdates.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sitAddressUpdates")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sitAddressUpdates")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItemDestSIT) contextValidateSitDestinationFinalAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SitDestinationFinalAddress != nil {

		if swag.IsZero(m.SitDestinationFinalAddress) { // not required
			return nil
		}

		if err := m.SitDestinationFinalAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitDestinationFinalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitDestinationFinalAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MTOServiceItemDestSIT) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MTOServiceItemDestSIT) UnmarshalBinary(b []byte) error {
	var res MTOServiceItemDestSIT
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
