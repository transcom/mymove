// Code generated by go-swagger; DO NOT EDIT.

package primev3messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order order
//
// swagger:model Order
type Order struct {

	// customer
	Customer *Customer `json:"customer,omitempty"`

	// customer ID
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	CustomerID strfmt.UUID `json:"customerID,omitempty"`

	// destination duty location
	DestinationDutyLocation *DutyLocation `json:"destinationDutyLocation,omitempty"`

	// e tag
	// Read Only: true
	ETag string `json:"eTag,omitempty"`

	// entitlement
	Entitlement *Entitlements `json:"entitlement,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// lines of accounting
	// Required: true
	LinesOfAccounting *string `json:"linesOfAccounting"`

	// method of payment
	// Read Only: true
	MethodOfPayment string `json:"methodOfPayment,omitempty"`

	// naics
	// Read Only: true
	Naics string `json:"naics,omitempty"`

	// order number
	// Required: true
	OrderNumber *string `json:"orderNumber"`

	// orders type
	OrdersType OrdersType `json:"ordersType,omitempty"`

	// origin duty location
	OriginDutyLocation *DutyLocation `json:"originDutyLocation,omitempty"`

	// origin duty location g b l o c
	// Example: KKFA
	OriginDutyLocationGBLOC string `json:"originDutyLocationGBLOC,omitempty"`

	// packing and shipping instructions
	// Read Only: true
	PackingAndShippingInstructions string `json:"packingAndShippingInstructions,omitempty"`

	// rank
	// Example: E_5
	// Required: true
	Rank *string `json:"rank"`

	// report by date
	// Format: date
	ReportByDate strfmt.Date `json:"reportByDate,omitempty"`

	// supply and services cost estimate
	// Read Only: true
	SupplyAndServicesCostEstimate string `json:"supplyAndServicesCostEstimate,omitempty"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationDutyLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntitlement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinesOfAccounting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginDutyLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportByDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerID) { // not required
		return nil
	}

	if err := validate.FormatOf("customerID", "body", "uuid", m.CustomerID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateDestinationDutyLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationDutyLocation) { // not required
		return nil
	}

	if m.DestinationDutyLocation != nil {
		if err := m.DestinationDutyLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationDutyLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationDutyLocation")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateEntitlement(formats strfmt.Registry) error {
	if swag.IsZero(m.Entitlement) { // not required
		return nil
	}

	if m.Entitlement != nil {
		if err := m.Entitlement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entitlement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entitlement")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateLinesOfAccounting(formats strfmt.Registry) error {

	if err := validate.Required("linesOfAccounting", "body", m.LinesOfAccounting); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateOrderNumber(formats strfmt.Registry) error {

	if err := validate.Required("orderNumber", "body", m.OrderNumber); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateOrdersType(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdersType) { // not required
		return nil
	}

	if err := m.OrdersType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ordersType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ordersType")
		}
		return err
	}

	return nil
}

func (m *Order) validateOriginDutyLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginDutyLocation) { // not required
		return nil
	}

	if m.OriginDutyLocation != nil {
		if err := m.OriginDutyLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originDutyLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originDutyLocation")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateRank(formats strfmt.Registry) error {

	if err := validate.Required("rank", "body", m.Rank); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateReportByDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ReportByDate) { // not required
		return nil
	}

	if err := validate.FormatOf("reportByDate", "body", "date", m.ReportByDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order based on the context it is used
func (m *Order) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationDutyLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntitlement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMethodOfPayment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNaics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrdersType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginDutyLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackingAndShippingInstructions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupplyAndServicesCostEstimate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if m.Customer != nil {

		if swag.IsZero(m.Customer) { // not required
			return nil
		}

		if err := m.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *Order) contextValidateDestinationDutyLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationDutyLocation != nil {

		if swag.IsZero(m.DestinationDutyLocation) { // not required
			return nil
		}

		if err := m.DestinationDutyLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationDutyLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationDutyLocation")
			}
			return err
		}
	}

	return nil
}

func (m *Order) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag)); err != nil {
		return err
	}

	return nil
}

func (m *Order) contextValidateEntitlement(ctx context.Context, formats strfmt.Registry) error {

	if m.Entitlement != nil {

		if swag.IsZero(m.Entitlement) { // not required
			return nil
		}

		if err := m.Entitlement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entitlement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entitlement")
			}
			return err
		}
	}

	return nil
}

func (m *Order) contextValidateMethodOfPayment(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "methodOfPayment", "body", string(m.MethodOfPayment)); err != nil {
		return err
	}

	return nil
}

func (m *Order) contextValidateNaics(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "naics", "body", string(m.Naics)); err != nil {
		return err
	}

	return nil
}

func (m *Order) contextValidateOrdersType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.OrdersType) { // not required
		return nil
	}

	if err := m.OrdersType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ordersType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ordersType")
		}
		return err
	}

	return nil
}

func (m *Order) contextValidateOriginDutyLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginDutyLocation != nil {

		if swag.IsZero(m.OriginDutyLocation) { // not required
			return nil
		}

		if err := m.OriginDutyLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originDutyLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originDutyLocation")
			}
			return err
		}
	}

	return nil
}

func (m *Order) contextValidatePackingAndShippingInstructions(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "packingAndShippingInstructions", "body", string(m.PackingAndShippingInstructions)); err != nil {
		return err
	}

	return nil
}

func (m *Order) contextValidateSupplyAndServicesCostEstimate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "supplyAndServicesCostEstimate", "body", string(m.SupplyAndServicesCostEstimate)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
