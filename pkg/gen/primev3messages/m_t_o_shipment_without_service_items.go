// Code generated by go-swagger; DO NOT EDIT.

package primev3messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MTOShipmentWithoutServiceItems m t o shipment without service items
//
// swagger:model MTOShipmentWithoutServiceItems
type MTOShipmentWithoutServiceItems struct {

	// The date when the Prime contractor actually delivered the shipment. Updated after-the-fact.
	// Format: date
	ActualDeliveryDate *strfmt.Date `json:"actualDeliveryDate"`

	// The date when the Prime contractor actually picked up the shipment. Updated after-the-fact.
	// Format: date
	ActualPickupDate *strfmt.Date `json:"actualPickupDate"`

	// agents
	Agents MTOAgents `json:"agents,omitempty"`

	// The date when the Transportation Ordering Officer first approved this shipment for the move.
	// Read Only: true
	// Format: date
	ApprovedDate *strfmt.Date `json:"approvedDate"`

	// The counselor can use the counselor remarks field to inform the movers about any
	// special circumstances for this shipment. Typical examples:
	//   * bulky or fragile items,
	//   * weapons,
	//   * access info for their address.
	//
	// Counselors enters this information when creating or editing an MTO Shipment. Optional field.
	//
	// Example: handle with care
	// Read Only: true
	CounselorRemarks *string `json:"counselorRemarks,omitempty"`

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// The customer can use the customer remarks field to inform the services counselor and the movers about any
	// special circumstances for this shipment. Typical examples:
	//   * bulky or fragile items,
	//   * weapons,
	//   * access info for their address.
	//
	// Customer enters this information during onboarding. Optional field.
	//
	// Example: handle with care
	// Read Only: true
	CustomerRemarks *string `json:"customerRemarks,omitempty"`

	// delivery address update
	DeliveryAddressUpdate *ShipmentAddressUpdate `json:"deliveryAddressUpdate,omitempty"`

	// Where the movers should deliver this shipment. Often provided by the customer when they enter shipment details
	// during onboarding, if they know their new address already.
	//
	// May be blank when entered by the customer, required when entered by the Prime. May not represent the true
	// final destination due to the shipment being diverted or placed in SIT.
	//
	DestinationAddress struct {
		Address
	} `json:"destinationAddress,omitempty"`

	// The SIT authorized end date for destination SIT.
	// Format: date
	DestinationSitAuthEndDate *strfmt.Date `json:"destinationSitAuthEndDate,omitempty"`

	// destination type
	DestinationType *DestinationType `json:"destinationType,omitempty"`

	// This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion.
	//
	Diversion bool `json:"diversion,omitempty"`

	// The reason the TOO provided when requesting a diversion for this shipment.
	//
	// Read Only: true
	DiversionReason *string `json:"diversionReason,omitempty"`

	// A hash unique to this shipment that should be used as the "If-Match" header for any updates.
	// Read Only: true
	ETag string `json:"eTag,omitempty"`

	// The date the Prime provides to the customer as the first possible delivery date so that they can plan their travel accordingly.
	//
	// Format: date
	FirstAvailableDeliveryDate *strfmt.Date `json:"firstAvailableDeliveryDate"`

	// The ID of the shipment.
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The ID of the move for this shipment.
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Read Only: true
	// Format: uuid
	MoveTaskOrderID strfmt.UUID `json:"moveTaskOrderID,omitempty"`

	// The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.
	// Example: 4500
	NtsRecordedWeight *int64 `json:"ntsRecordedWeight,omitempty"`

	// The SIT authorized end date for origin SIT.
	// Format: date
	OriginSitAuthEndDate *strfmt.Date `json:"originSitAuthEndDate,omitempty"`

	// The address where the movers should pick up this shipment, entered by the customer during onboarding when they enter shipment details.
	//
	PickupAddress struct {
		Address
	} `json:"pickupAddress,omitempty"`

	// Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.
	//
	PointOfContact string `json:"pointOfContact,omitempty"`

	// ppm shipment
	PpmShipment *PPMShipment `json:"ppmShipment,omitempty"`

	// The actual weight of the shipment, provided after the Prime packs, picks up, and weighs a customer's shipment.
	// Example: 4500
	// Minimum: 1
	PrimeActualWeight *int64 `json:"primeActualWeight,omitempty"`

	// The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contracter will need to contact the TOO to change it.
	//
	// Example: 4500
	// Minimum: 1
	PrimeEstimatedWeight *int64 `json:"primeEstimatedWeight,omitempty"`

	// The date when the Prime contractor recorded the shipment's estimated weight.
	// Read Only: true
	// Format: date
	PrimeEstimatedWeightRecordedDate *strfmt.Date `json:"primeEstimatedWeightRecordedDate"`

	// The customer's preferred delivery date.
	// Read Only: true
	// Format: date
	RequestedDeliveryDate *strfmt.Date `json:"requestedDeliveryDate"`

	// The date the customer selects during onboarding as their preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.
	//
	// Read Only: true
	// Format: date
	RequestedPickupDate *strfmt.Date `json:"requestedPickupDate"`

	// The latest date by which the Prime can deliver a customer's shipment without violating the contract. This is calculated based on weight, distance, and the scheduled pickup date. It cannot be modified.
	//
	// Read Only: true
	// Format: date
	RequiredDeliveryDate *strfmt.Date `json:"requiredDeliveryDate"`

	// reweigh
	Reweigh *Reweigh `json:"reweigh,omitempty"`

	// The date the Prime contractor scheduled to deliver this shipment after consultation with the customer.
	// Format: date
	ScheduledDeliveryDate *strfmt.Date `json:"scheduledDeliveryDate"`

	// The date the Prime contractor scheduled to pick up this shipment after consultation with the customer.
	// Format: date
	ScheduledPickupDate *strfmt.Date `json:"scheduledPickupDate"`

	// A second delivery address for this shipment, if the customer entered one. An optional field.
	SecondaryDeliveryAddress struct {
		Address
	} `json:"secondaryDeliveryAddress,omitempty"`

	// A second pickup address for this shipment, if the customer entered one. An optional field.
	SecondaryPickupAddress struct {
		Address
	} `json:"secondaryPickupAddress,omitempty"`

	// shipment type
	ShipmentType MTOShipmentType `json:"shipmentType,omitempty"`

	// sit extensions
	SitExtensions SITExtensions `json:"sitExtensions,omitempty"`

	// The status of a shipment, indicating where it is in the TOO's approval process. Can only be updated by the contractor in special circumstances.
	//
	// Read Only: true
	// Enum: [SUBMITTED APPROVED REJECTED CANCELLATION_REQUESTED CANCELED DIVERSION_REQUESTED]
	Status string `json:"status,omitempty"`

	// storage facility
	StorageFacility *StorageFacility `json:"storageFacility,omitempty"`

	// updated at
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this m t o shipment without service items
func (m *MTOShipmentWithoutServiceItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActualPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprovedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryAddressUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationSitAuthEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstAvailableDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveTaskOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginSitAuthEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpmShipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimeActualWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimeEstimatedWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimeEstimatedWeightRecordedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReweigh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageFacility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateActualDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actualDeliveryDate", "body", "date", m.ActualDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateActualPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actualPickupDate", "body", "date", m.ActualPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	if err := m.Agents.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateApprovedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("approvedDate", "body", "date", m.ApprovedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateDeliveryAddressUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryAddressUpdate) { // not required
		return nil
	}

	if m.DeliveryAddressUpdate != nil {
		if err := m.DeliveryAddressUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryAddressUpdate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deliveryAddressUpdate")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateDestinationSitAuthEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationSitAuthEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("destinationSitAuthEndDate", "body", "date", m.DestinationSitAuthEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateDestinationType(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationType) { // not required
		return nil
	}

	if m.DestinationType != nil {
		if err := m.DestinationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationType")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateFirstAvailableDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstAvailableDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("firstAvailableDeliveryDate", "body", "date", m.FirstAvailableDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateMoveTaskOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.MoveTaskOrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("moveTaskOrderID", "body", "uuid", m.MoveTaskOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateOriginSitAuthEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginSitAuthEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("originSitAuthEndDate", "body", "date", m.OriginSitAuthEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validatePickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupAddress) { // not required
		return nil
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validatePpmShipment(formats strfmt.Registry) error {
	if swag.IsZero(m.PpmShipment) { // not required
		return nil
	}

	if m.PpmShipment != nil {
		if err := m.PpmShipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppmShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppmShipment")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validatePrimeActualWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimeActualWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("primeActualWeight", "body", *m.PrimeActualWeight, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validatePrimeEstimatedWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimeEstimatedWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("primeEstimatedWeight", "body", *m.PrimeEstimatedWeight, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validatePrimeEstimatedWeightRecordedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimeEstimatedWeightRecordedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("primeEstimatedWeightRecordedDate", "body", "date", m.PrimeEstimatedWeightRecordedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateRequestedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedDeliveryDate", "body", "date", m.RequestedDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateRequestedPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedPickupDate", "body", "date", m.RequestedPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateRequiredDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequiredDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requiredDeliveryDate", "body", "date", m.RequiredDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateReweigh(formats strfmt.Registry) error {
	if swag.IsZero(m.Reweigh) { // not required
		return nil
	}

	if m.Reweigh != nil {
		if err := m.Reweigh.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reweigh")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reweigh")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateScheduledDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduledDeliveryDate", "body", "date", m.ScheduledDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateScheduledPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduledPickupDate", "body", "date", m.ScheduledPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateSecondaryDeliveryAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDeliveryAddress) { // not required
		return nil
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateSecondaryPickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryPickupAddress) { // not required
		return nil
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateShipmentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentType) { // not required
		return nil
	}

	if err := m.ShipmentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipmentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shipmentType")
		}
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateSitExtensions(formats strfmt.Registry) error {
	if swag.IsZero(m.SitExtensions) { // not required
		return nil
	}

	if err := m.SitExtensions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sitExtensions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sitExtensions")
		}
		return err
	}

	return nil
}

var mTOShipmentWithoutServiceItemsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUBMITTED","APPROVED","REJECTED","CANCELLATION_REQUESTED","CANCELED","DIVERSION_REQUESTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mTOShipmentWithoutServiceItemsTypeStatusPropEnum = append(mTOShipmentWithoutServiceItemsTypeStatusPropEnum, v)
	}
}

const (

	// MTOShipmentWithoutServiceItemsStatusSUBMITTED captures enum value "SUBMITTED"
	MTOShipmentWithoutServiceItemsStatusSUBMITTED string = "SUBMITTED"

	// MTOShipmentWithoutServiceItemsStatusAPPROVED captures enum value "APPROVED"
	MTOShipmentWithoutServiceItemsStatusAPPROVED string = "APPROVED"

	// MTOShipmentWithoutServiceItemsStatusREJECTED captures enum value "REJECTED"
	MTOShipmentWithoutServiceItemsStatusREJECTED string = "REJECTED"

	// MTOShipmentWithoutServiceItemsStatusCANCELLATIONREQUESTED captures enum value "CANCELLATION_REQUESTED"
	MTOShipmentWithoutServiceItemsStatusCANCELLATIONREQUESTED string = "CANCELLATION_REQUESTED"

	// MTOShipmentWithoutServiceItemsStatusCANCELED captures enum value "CANCELED"
	MTOShipmentWithoutServiceItemsStatusCANCELED string = "CANCELED"

	// MTOShipmentWithoutServiceItemsStatusDIVERSIONREQUESTED captures enum value "DIVERSION_REQUESTED"
	MTOShipmentWithoutServiceItemsStatusDIVERSIONREQUESTED string = "DIVERSION_REQUESTED"
)

// prop value enum
func (m *MTOShipmentWithoutServiceItems) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mTOShipmentWithoutServiceItemsTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateStorageFacility(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageFacility) { // not required
		return nil
	}

	if m.StorageFacility != nil {
		if err := m.StorageFacility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageFacility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageFacility")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this m t o shipment without service items based on the context it is used
func (m *MTOShipmentWithoutServiceItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApprovedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCounselorRemarks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerRemarks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeliveryAddressUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiversionReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMoveTaskOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePpmShipment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrimeEstimatedWeightRecordedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestedDeliveryDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestedPickupDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequiredDeliveryDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReweigh(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryDeliveryAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryPickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitExtensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageFacility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Agents.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateApprovedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "approvedDate", "body", m.ApprovedDate); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateCounselorRemarks(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "counselorRemarks", "body", m.CounselorRemarks); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateCustomerRemarks(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "customerRemarks", "body", m.CustomerRemarks); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateDeliveryAddressUpdate(ctx context.Context, formats strfmt.Registry) error {

	if m.DeliveryAddressUpdate != nil {

		if swag.IsZero(m.DeliveryAddressUpdate) { // not required
			return nil
		}

		if err := m.DeliveryAddressUpdate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryAddressUpdate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deliveryAddressUpdate")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateDestinationType(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationType != nil {

		if swag.IsZero(m.DestinationType) { // not required
			return nil
		}

		if err := m.DestinationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationType")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateDiversionReason(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "diversionReason", "body", m.DiversionReason); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag)); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateMoveTaskOrderID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "moveTaskOrderID", "body", strfmt.UUID(m.MoveTaskOrderID)); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidatePpmShipment(ctx context.Context, formats strfmt.Registry) error {

	if m.PpmShipment != nil {

		if swag.IsZero(m.PpmShipment) { // not required
			return nil
		}

		if err := m.PpmShipment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppmShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppmShipment")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidatePrimeEstimatedWeightRecordedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "primeEstimatedWeightRecordedDate", "body", m.PrimeEstimatedWeightRecordedDate); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateRequestedDeliveryDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "requestedDeliveryDate", "body", m.RequestedDeliveryDate); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateRequestedPickupDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "requestedPickupDate", "body", m.RequestedPickupDate); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateRequiredDeliveryDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "requiredDeliveryDate", "body", m.RequiredDeliveryDate); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateReweigh(ctx context.Context, formats strfmt.Registry) error {

	if m.Reweigh != nil {

		if swag.IsZero(m.Reweigh) { // not required
			return nil
		}

		if err := m.Reweigh.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reweigh")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reweigh")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateSecondaryDeliveryAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateSecondaryPickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateShipmentType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ShipmentType) { // not required
		return nil
	}

	if err := m.ShipmentType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipmentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shipmentType")
		}
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateSitExtensions(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SitExtensions.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sitExtensions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sitExtensions")
		}
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateStorageFacility(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageFacility != nil {

		if swag.IsZero(m.StorageFacility) { // not required
			return nil
		}

		if err := m.StorageFacility.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageFacility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageFacility")
			}
			return err
		}
	}

	return nil
}

func (m *MTOShipmentWithoutServiceItems) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MTOShipmentWithoutServiceItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MTOShipmentWithoutServiceItems) UnmarshalBinary(b []byte) error {
	var res MTOShipmentWithoutServiceItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
