// Code generated by go-swagger; DO NOT EDIT.

package primev3messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Port A port that is used to move an international shipment.
//
// swagger:model Port
type Port struct {

	// city
	// Example: PORTLAND
	City string `json:"city,omitempty"`

	// Two-letter country code
	// Example: US
	// Pattern: ^[A-Z]{2}$
	Country string `json:"country,omitempty"`

	// county
	// Example: MULTNOMAH
	County string `json:"county,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// 3 or 4 digit port code
	// Example: 0431
	PortCode string `json:"portCode,omitempty"`

	// Name of the port
	// Example: PORTLAND INTL
	PortName string `json:"portName,omitempty"`

	// Port type A (Air), B(Border Crossing), S (Sea)
	// Enum: [A P S]
	PortType string `json:"portType,omitempty"`

	// US state
	// Example: OR
	// Enum: [AL AK AR AZ CA CO CT DC DE FL GA HI IA ID IL IN KS KY LA MA MD ME MI MN MO MS MT NC ND NE NH NJ NM NV NY OH OK OR PA RI SC SD TN TX UT VA VT WA WI WV WY]
	State string `json:"state,omitempty"`

	// ZIP
	// Example: 99501
	// Pattern: ^(\d{5}([\-]\d{4})?)$
	Zip string `json:"zip,omitempty"`
}

// Validate validates this port
func (m *Port) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZip(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Port) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.Pattern("country", "body", m.Country, `^[A-Z]{2}$`); err != nil {
		return err
	}

	return nil
}

func (m *Port) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var portTypePortTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A","P","S"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		portTypePortTypePropEnum = append(portTypePortTypePropEnum, v)
	}
}

const (

	// PortPortTypeA captures enum value "A"
	PortPortTypeA string = "A"

	// PortPortTypeP captures enum value "P"
	PortPortTypeP string = "P"

	// PortPortTypeS captures enum value "S"
	PortPortTypeS string = "S"
)

// prop value enum
func (m *Port) validatePortTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, portTypePortTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Port) validatePortType(formats strfmt.Registry) error {
	if swag.IsZero(m.PortType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePortTypeEnum("portType", "body", m.PortType); err != nil {
		return err
	}

	return nil
}

var portTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AL","AK","AR","AZ","CA","CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		portTypeStatePropEnum = append(portTypeStatePropEnum, v)
	}
}

const (

	// PortStateAL captures enum value "AL"
	PortStateAL string = "AL"

	// PortStateAK captures enum value "AK"
	PortStateAK string = "AK"

	// PortStateAR captures enum value "AR"
	PortStateAR string = "AR"

	// PortStateAZ captures enum value "AZ"
	PortStateAZ string = "AZ"

	// PortStateCA captures enum value "CA"
	PortStateCA string = "CA"

	// PortStateCO captures enum value "CO"
	PortStateCO string = "CO"

	// PortStateCT captures enum value "CT"
	PortStateCT string = "CT"

	// PortStateDC captures enum value "DC"
	PortStateDC string = "DC"

	// PortStateDE captures enum value "DE"
	PortStateDE string = "DE"

	// PortStateFL captures enum value "FL"
	PortStateFL string = "FL"

	// PortStateGA captures enum value "GA"
	PortStateGA string = "GA"

	// PortStateHI captures enum value "HI"
	PortStateHI string = "HI"

	// PortStateIA captures enum value "IA"
	PortStateIA string = "IA"

	// PortStateID captures enum value "ID"
	PortStateID string = "ID"

	// PortStateIL captures enum value "IL"
	PortStateIL string = "IL"

	// PortStateIN captures enum value "IN"
	PortStateIN string = "IN"

	// PortStateKS captures enum value "KS"
	PortStateKS string = "KS"

	// PortStateKY captures enum value "KY"
	PortStateKY string = "KY"

	// PortStateLA captures enum value "LA"
	PortStateLA string = "LA"

	// PortStateMA captures enum value "MA"
	PortStateMA string = "MA"

	// PortStateMD captures enum value "MD"
	PortStateMD string = "MD"

	// PortStateME captures enum value "ME"
	PortStateME string = "ME"

	// PortStateMI captures enum value "MI"
	PortStateMI string = "MI"

	// PortStateMN captures enum value "MN"
	PortStateMN string = "MN"

	// PortStateMO captures enum value "MO"
	PortStateMO string = "MO"

	// PortStateMS captures enum value "MS"
	PortStateMS string = "MS"

	// PortStateMT captures enum value "MT"
	PortStateMT string = "MT"

	// PortStateNC captures enum value "NC"
	PortStateNC string = "NC"

	// PortStateND captures enum value "ND"
	PortStateND string = "ND"

	// PortStateNE captures enum value "NE"
	PortStateNE string = "NE"

	// PortStateNH captures enum value "NH"
	PortStateNH string = "NH"

	// PortStateNJ captures enum value "NJ"
	PortStateNJ string = "NJ"

	// PortStateNM captures enum value "NM"
	PortStateNM string = "NM"

	// PortStateNV captures enum value "NV"
	PortStateNV string = "NV"

	// PortStateNY captures enum value "NY"
	PortStateNY string = "NY"

	// PortStateOH captures enum value "OH"
	PortStateOH string = "OH"

	// PortStateOK captures enum value "OK"
	PortStateOK string = "OK"

	// PortStateOR captures enum value "OR"
	PortStateOR string = "OR"

	// PortStatePA captures enum value "PA"
	PortStatePA string = "PA"

	// PortStateRI captures enum value "RI"
	PortStateRI string = "RI"

	// PortStateSC captures enum value "SC"
	PortStateSC string = "SC"

	// PortStateSD captures enum value "SD"
	PortStateSD string = "SD"

	// PortStateTN captures enum value "TN"
	PortStateTN string = "TN"

	// PortStateTX captures enum value "TX"
	PortStateTX string = "TX"

	// PortStateUT captures enum value "UT"
	PortStateUT string = "UT"

	// PortStateVA captures enum value "VA"
	PortStateVA string = "VA"

	// PortStateVT captures enum value "VT"
	PortStateVT string = "VT"

	// PortStateWA captures enum value "WA"
	PortStateWA string = "WA"

	// PortStateWI captures enum value "WI"
	PortStateWI string = "WI"

	// PortStateWV captures enum value "WV"
	PortStateWV string = "WV"

	// PortStateWY captures enum value "WY"
	PortStateWY string = "WY"
)

// prop value enum
func (m *Port) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, portTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Port) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *Port) validateZip(formats strfmt.Registry) error {
	if swag.IsZero(m.Zip) { // not required
		return nil
	}

	if err := validate.Pattern("zip", "body", m.Zip, `^(\d{5}([\-]\d{4})?)$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this port based on context it is used
func (m *Port) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Port) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Port) UnmarshalBinary(b []byte) error {
	var res Port
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
