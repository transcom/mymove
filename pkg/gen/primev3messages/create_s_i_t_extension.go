// Code generated by go-swagger; DO NOT EDIT.

package primev3messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSITExtension CreateSITExtension contains the fields required for the prime to create a SIT Extension request.
//
// swagger:model CreateSITExtension
type CreateSITExtension struct {

	// contractor remarks
	// Example: We need SIT additional days. The customer has not found a house yet.
	// Required: true
	ContractorRemarks *string `json:"contractorRemarks"`

	// request reason
	// Required: true
	// Enum: [SERIOUS_ILLNESS_MEMBER SERIOUS_ILLNESS_DEPENDENT IMPENDING_ASSIGNEMENT DIRECTED_TEMPORARY_DUTY NONAVAILABILITY_OF_CIVILIAN_HOUSING AWAITING_COMPLETION_OF_RESIDENCE OTHER]
	RequestReason *string `json:"requestReason"`

	// requested days
	// Example: 30
	// Required: true
	// Minimum: 1
	RequestedDays *int64 `json:"requestedDays"`
}

// Validate validates this create s i t extension
func (m *CreateSITExtension) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContractorRemarks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedDays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSITExtension) validateContractorRemarks(formats strfmt.Registry) error {

	if err := validate.Required("contractorRemarks", "body", m.ContractorRemarks); err != nil {
		return err
	}

	return nil
}

var createSITExtensionTypeRequestReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SERIOUS_ILLNESS_MEMBER","SERIOUS_ILLNESS_DEPENDENT","IMPENDING_ASSIGNEMENT","DIRECTED_TEMPORARY_DUTY","NONAVAILABILITY_OF_CIVILIAN_HOUSING","AWAITING_COMPLETION_OF_RESIDENCE","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createSITExtensionTypeRequestReasonPropEnum = append(createSITExtensionTypeRequestReasonPropEnum, v)
	}
}

const (

	// CreateSITExtensionRequestReasonSERIOUSILLNESSMEMBER captures enum value "SERIOUS_ILLNESS_MEMBER"
	CreateSITExtensionRequestReasonSERIOUSILLNESSMEMBER string = "SERIOUS_ILLNESS_MEMBER"

	// CreateSITExtensionRequestReasonSERIOUSILLNESSDEPENDENT captures enum value "SERIOUS_ILLNESS_DEPENDENT"
	CreateSITExtensionRequestReasonSERIOUSILLNESSDEPENDENT string = "SERIOUS_ILLNESS_DEPENDENT"

	// CreateSITExtensionRequestReasonIMPENDINGASSIGNEMENT captures enum value "IMPENDING_ASSIGNEMENT"
	CreateSITExtensionRequestReasonIMPENDINGASSIGNEMENT string = "IMPENDING_ASSIGNEMENT"

	// CreateSITExtensionRequestReasonDIRECTEDTEMPORARYDUTY captures enum value "DIRECTED_TEMPORARY_DUTY"
	CreateSITExtensionRequestReasonDIRECTEDTEMPORARYDUTY string = "DIRECTED_TEMPORARY_DUTY"

	// CreateSITExtensionRequestReasonNONAVAILABILITYOFCIVILIANHOUSING captures enum value "NONAVAILABILITY_OF_CIVILIAN_HOUSING"
	CreateSITExtensionRequestReasonNONAVAILABILITYOFCIVILIANHOUSING string = "NONAVAILABILITY_OF_CIVILIAN_HOUSING"

	// CreateSITExtensionRequestReasonAWAITINGCOMPLETIONOFRESIDENCE captures enum value "AWAITING_COMPLETION_OF_RESIDENCE"
	CreateSITExtensionRequestReasonAWAITINGCOMPLETIONOFRESIDENCE string = "AWAITING_COMPLETION_OF_RESIDENCE"

	// CreateSITExtensionRequestReasonOTHER captures enum value "OTHER"
	CreateSITExtensionRequestReasonOTHER string = "OTHER"
)

// prop value enum
func (m *CreateSITExtension) validateRequestReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createSITExtensionTypeRequestReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateSITExtension) validateRequestReason(formats strfmt.Registry) error {

	if err := validate.Required("requestReason", "body", m.RequestReason); err != nil {
		return err
	}

	// value enum
	if err := m.validateRequestReasonEnum("requestReason", "body", *m.RequestReason); err != nil {
		return err
	}

	return nil
}

func (m *CreateSITExtension) validateRequestedDays(formats strfmt.Registry) error {

	if err := validate.Required("requestedDays", "body", m.RequestedDays); err != nil {
		return err
	}

	if err := validate.MinimumInt("requestedDays", "body", *m.RequestedDays, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create s i t extension based on context it is used
func (m *CreateSITExtension) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateSITExtension) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSITExtension) UnmarshalBinary(b []byte) error {
	var res CreateSITExtension
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
