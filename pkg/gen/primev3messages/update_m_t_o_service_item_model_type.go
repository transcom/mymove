// Code generated by go-swagger; DO NOT EDIT.

package primev3messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UpdateMTOServiceItemModelType Using this list, choose the correct modelType in the dropdown, corresponding to the service item type.
//   - DDDSIT - UpdateMTOServiceItemSIT
//   - DOPSIT - UpdateMTOServiceItemSIT
//   - DOASIT - UpdateMTOServiceItemSIT
//   - DOFSIT - UpdateMTOServiceItemSIT
//   - DDSHUT - UpdateMTOServiceItemShuttle
//   - DOSHUT - UpdateMTOServiceItemShuttle
//
// The documentation will then update with the supported fields.
//
// swagger:model UpdateMTOServiceItemModelType
type UpdateMTOServiceItemModelType string

func NewUpdateMTOServiceItemModelType(value UpdateMTOServiceItemModelType) *UpdateMTOServiceItemModelType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated UpdateMTOServiceItemModelType.
func (m UpdateMTOServiceItemModelType) Pointer() *UpdateMTOServiceItemModelType {
	return &m
}

const (

	// UpdateMTOServiceItemModelTypeUpdateMTOServiceItemSIT captures enum value "UpdateMTOServiceItemSIT"
	UpdateMTOServiceItemModelTypeUpdateMTOServiceItemSIT UpdateMTOServiceItemModelType = "UpdateMTOServiceItemSIT"

	// UpdateMTOServiceItemModelTypeUpdateMTOServiceItemShuttle captures enum value "UpdateMTOServiceItemShuttle"
	UpdateMTOServiceItemModelTypeUpdateMTOServiceItemShuttle UpdateMTOServiceItemModelType = "UpdateMTOServiceItemShuttle"
)

// for schema
var updateMTOServiceItemModelTypeEnum []interface{}

func init() {
	var res []UpdateMTOServiceItemModelType
	if err := json.Unmarshal([]byte(`["UpdateMTOServiceItemSIT","UpdateMTOServiceItemShuttle"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateMTOServiceItemModelTypeEnum = append(updateMTOServiceItemModelTypeEnum, v)
	}
}

func (m UpdateMTOServiceItemModelType) validateUpdateMTOServiceItemModelTypeEnum(path, location string, value UpdateMTOServiceItemModelType) error {
	if err := validate.EnumCase(path, location, value, updateMTOServiceItemModelTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this update m t o service item model type
func (m UpdateMTOServiceItemModelType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUpdateMTOServiceItemModelTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this update m t o service item model type based on context it is used
func (m UpdateMTOServiceItemModelType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
