// Code generated by go-swagger; DO NOT EDIT.

package adminapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The API for move.mil admin actions.",
    "title": "move.mil Admin API",
    "license": {
      "name": "MIT",
      "url": "https://github.com/transcom/mymove/blob/master/LICENSE.md"
    },
    "version": "1.0.0"
  },
  "basePath": "/admin/v1",
  "paths": {
    "/access_codes": {
      "get": {
        "description": "Returns a list of access codes",
        "tags": [
          "access_codes"
        ],
        "summary": "List access codes",
        "operationId": "indexAccessCodes",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AccessCodes"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "access codes not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/admin_users": {
      "get": {
        "description": "Returns a list of admin users",
        "tags": [
          "admin_users"
        ],
        "summary": "List admin users",
        "operationId": "indexAdminUsers",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AdminUsers"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "admin users not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "post": {
        "description": "creates and returns an admin user record",
        "tags": [
          "admin_users"
        ],
        "summary": "create an admin user",
        "operationId": "createAdminUser",
        "parameters": [
          {
            "description": "Admin user information",
            "name": "adminUser",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AdminUserCreatePayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created Admin User",
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to create an admin user"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/admin_users/{adminUserId}": {
      "get": {
        "description": "Returns a single admin user",
        "tags": [
          "admin_users"
        ],
        "summary": "Fetch a specific admin user",
        "operationId": "getAdminUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "adminUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "admin user not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "tags": [
          "admin_users"
        ],
        "summary": "Updates an admin user",
        "operationId": "updateAdminUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "adminUserId",
            "in": "path",
            "required": true
          },
          {
            "description": "Admin user information",
            "name": "adminUser",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminUserUpdatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Admin User",
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update an admin user"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/electronic_orders": {
      "get": {
        "description": "Returns a list of electronic orders",
        "tags": [
          "electronic_order"
        ],
        "summary": "List electronic orders",
        "operationId": "indexElectronicOrders",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ElectronicOrders"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/electronic_orders/totals": {
      "get": {
        "description": "Returns a list of record counts for orders",
        "tags": [
          "electronic_order"
        ],
        "summary": "Get total counts for the orders stored in MilMove",
        "operationId": "getElectronicOrdersTotals",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "andFilter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ElectronicOrdersTotals"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves": {
      "get": {
        "description": "Returns a list of moves",
        "tags": [
          "move"
        ],
        "summary": "List moves",
        "operationId": "indexMoves",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Moves"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveID}": {
      "get": {
        "description": "Returns the given move and its relevant info",
        "tags": [
          "move"
        ],
        "summary": "Get information about a move",
        "operationId": "getMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "moveID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Must be authenticated to use this endpoint"
          },
          "404": {
            "description": "Move not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "patch": {
        "description": "Allows the user to change the ` + "`" + `show` + "`" + ` field on the selected field to either ` + "`" + `True` + "`" + ` or ` + "`" + `False` + "`" + `. A \"shown\" move will appear to all users as normal, a \"hidden\" move will not be returned or editable using any other endpoint (besides those in the Support API), and thus effectively deactivated.\n",
        "tags": [
          "move"
        ],
        "summary": "Disables or re-enables a move",
        "operationId": "updateMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "moveID",
            "in": "path",
            "required": true
          },
          {
            "description": "Move information",
            "name": "Move",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveUpdatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the Mov",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Must be authenticated to use this endpoint"
          },
          "403": {
            "description": "Not authorized to update this move"
          },
          "404": {
            "description": "Move not found"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "description": "Returns a list of notifications that have been sent to service members",
        "tags": [
          "notification"
        ],
        "summary": "List notifications",
        "operationId": "indexNotifications",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Notifications"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/office_users": {
      "get": {
        "description": "Returns a list of office users",
        "tags": [
          "office_users"
        ],
        "summary": "List office users",
        "operationId": "indexOfficeUsers",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUsers"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "office not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "post": {
        "description": "creates and returns an office user record",
        "tags": [
          "office_users"
        ],
        "summary": "create an office user",
        "operationId": "createOfficeUser",
        "parameters": [
          {
            "description": "Office user information",
            "name": "officeUser",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OfficeUserCreatePayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created Office User",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "422": {
            "description": "validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/office_users/{officeUserId}": {
      "get": {
        "description": "Returns the given office user",
        "tags": [
          "office_users"
        ],
        "summary": "Get an office user",
        "operationId": "getOfficeUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "officeUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "office not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "tags": [
          "office_users"
        ],
        "summary": "Updates an office user",
        "operationId": "updateOfficeUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "officeUserId",
            "in": "path",
            "required": true
          },
          {
            "description": "Office user information",
            "name": "officeUser",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OfficeUserUpdatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Office User",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update an office user"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/offices": {
      "get": {
        "description": "Returns a list of transportation offices",
        "tags": [
          "office"
        ],
        "summary": "List transportation offices",
        "operationId": "indexOffices",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/TransportationOffices"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "office not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "description": "Returns a list of organizations",
        "tags": [
          "organization"
        ],
        "summary": "List organizations",
        "operationId": "indexOrganizations",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Organizations"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/transportation_service_provider_performances": {
      "get": {
        "description": "Returns a list of transportation service provider performances (TSPPs)",
        "tags": [
          "transportation_service_provider_performances"
        ],
        "summary": "List transportation service provider performances (TSPPs)",
        "operationId": "indexTSPPs",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/TransportationServiceProviderPerformances"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "office not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/transportation_service_provider_performances/{tsppId}": {
      "get": {
        "description": "Returns a single tspp",
        "tags": [
          "transportation_service_provider_performances"
        ],
        "summary": "Fetch a specific tspp",
        "operationId": "getTSPP",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "tsppId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/TransportationServiceProviderPerformance"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "tspp not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/uploads/{uploadId}": {
      "get": {
        "description": "Returns the given upload and information about the uploader and move",
        "tags": [
          "upload"
        ],
        "summary": "Get information about an upload",
        "operationId": "getUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "uploadId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/UploadInformation"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "upload not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Returns a list of users",
        "tags": [
          "users"
        ],
        "summary": "List users",
        "operationId": "indexUsers",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Users"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "users not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "description": "Returns the given user and their sessions",
        "tags": [
          "users"
        ],
        "summary": "Get information about a user",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "user not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update a user's session or active status",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "User information",
            "name": "User",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update this user"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/webhook_subscriptions": {
      "get": {
        "description": "Returns a list of webhook subscriptions",
        "tags": [
          "webhook_subscriptions"
        ],
        "summary": "Lists webhook subscriptions",
        "operationId": "indexWebhookSubscriptions",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/WebhookSubscriptions"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not authenticated for this endpoint"
          },
          "404": {
            "description": "Webhook subscriptions not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "description": "creates and returns a webhook subscription",
        "tags": [
          "webhook_subscriptions"
        ],
        "summary": "create a webhook subscription",
        "operationId": "createWebhookSubscription",
        "parameters": [
          {
            "description": "Webhook subscription information",
            "name": "webhookSubscription",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateWebhookSubscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created webhook subscription",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to create a webhook subscription"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/webhook_subscriptions/{webhookSubscriptionId}": {
      "get": {
        "description": "Returns the given webhook subscription and its details",
        "tags": [
          "webhook_subscriptions"
        ],
        "summary": "Get information about a webhook subscription",
        "operationId": "getWebhookSubscription",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "webhookSubscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "subscription not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "tags": [
          "webhook_subscriptions"
        ],
        "summary": "Update a webhook subscription",
        "operationId": "updateWebhookSubscription",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "webhookSubscriptionId",
            "in": "path",
            "required": true
          },
          {
            "description": "Webhook subscription information",
            "name": "WebhookSubscription",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated webhook subscription",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update this webhook subscription"
          },
          "404": {
            "description": "subscription not found"
          },
          "412": {
            "description": "Precondition failed"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessCode": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "CODE456"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "locator": {
          "type": "string",
          "example": "11232"
        },
        "moveType": {
          "type": "string",
          "title": "Selected Move Type",
          "enum": [
            "PPM"
          ]
        }
      }
    },
    "AccessCodes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AccessCode"
      }
    },
    "Address": {
      "type": "object",
      "required": [
        "streetAddress1",
        "state",
        "city",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "postalCode": {
          "description": "zip code, international allowed",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "example": "'90210' or 'N15 3NL'"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Address line 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Address line 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "AdminUser": {
      "type": "object",
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "userId",
        "organizationId",
        "active",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string",
          "format": "uuid"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "AdminUserCreatePayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Email",
          "example": "user@userdomain.com"
        },
        "firstName": {
          "type": "string",
          "title": "First Name"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name"
        },
        "organizationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "AdminUserUpdatePayload": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        }
      }
    },
    "AdminUsers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AdminUser"
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateWebhookSubscription": {
      "type": "object",
      "required": [
        "subscriberId",
        "status",
        "eventKey",
        "callbackUrl"
      ],
      "properties": {
        "callbackUrl": {
          "description": "The URL to which the notifications for this subscription will be pushed to.",
          "type": "string"
        },
        "eventKey": {
          "description": "A string used to represent which events this subscriber expects to be notified about. Corresponds to the possible event_key values in webhook_notifications.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/WebhookSubscriptionStatus"
        },
        "subscriberId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ElectronicOrder": {
      "type": "object",
      "required": [
        "id",
        "issuer",
        "ordersNumber",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Created at"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "issuer": {
          "$ref": "#/definitions/Issuer"
        },
        "ordersNumber": {
          "type": "string",
          "title": "Orders Number"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Updated at"
        }
      }
    },
    "ElectronicOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ElectronicOrder"
      }
    },
    "ElectronicOrdersTotal": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "title": "Total Orders Count"
        }
      }
    },
    "ElectronicOrdersTotals": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ElectronicOrdersTotal"
      }
    },
    "Issuer": {
      "description": "Organization that issues orders. If more organizations, especially civilian ones, become clients of this API in the future, this enumeration may need to be expanded.",
      "type": "string",
      "enum": [
        "army",
        "navy",
        "air-force",
        "marine-corps",
        "coast-guard"
      ]
    },
    "Move": {
      "type": "object",
      "required": [
        "id",
        "ordersId",
        "locator",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "ordersId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "serviceMember": {
          "$ref": "#/definitions/ServiceMember"
        },
        "show": {
          "type": "boolean",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "MoveUpdatePayload": {
      "type": "object",
      "required": [
        "show"
      ],
      "properties": {
        "show": {
          "type": "boolean"
        }
      }
    },
    "Moves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Move"
      }
    },
    "Notification": {
      "type": "object",
      "required": [
        "id",
        "email",
        "serviceMemberId",
        "sesMessageId",
        "notificationType",
        "createdAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "notificationType": {
          "type": "string",
          "enum": [
            "MOVE_REVIEWED_EMAIL",
            "MOVE_PAYMENT_REMINDER_EMAIL"
          ]
        },
        "serviceMemberId": {
          "type": "string",
          "format": "uuid"
        },
        "sesMessageId": {
          "type": "string"
        }
      }
    },
    "Notifications": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Notification"
      }
    },
    "OfficeUser": {
      "type": "object",
      "required": [
        "id",
        "firstName",
        "middleInitials",
        "lastName",
        "email",
        "telephone",
        "transportationOfficeId",
        "active",
        "roles",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string"
        },
        "middleInitials": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "OfficeUserCreatePayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Email",
          "example": "user@userdomain.com"
        },
        "firstName": {
          "type": "string",
          "title": "First Name"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name"
        },
        "middleInitials": {
          "type": "string",
          "title": "Middle Initials",
          "x-nullable": true,
          "example": "L."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserRole"
          }
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "example": "212-555-5555"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OfficeUserRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "x-nullable": true,
          "example": "Transportation Ordering Officer"
        },
        "roleType": {
          "type": "string",
          "title": "roleType",
          "x-nullable": true,
          "example": "transportation_ordering_officer"
        }
      }
    },
    "OfficeUserUpdatePayload": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        },
        "middleInitials": {
          "type": "string",
          "title": "Middle Initials",
          "x-nullable": true,
          "example": "Q."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserRole"
          }
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        }
      }
    },
    "OfficeUsers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/OfficeUser"
      }
    },
    "Organization": {
      "type": "object",
      "required": [
        "id",
        "name",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Created at"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "title": "Name"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Updated at"
        }
      }
    },
    "Organizations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Organization"
      }
    },
    "Role": {
      "type": "object",
      "required": [
        "id",
        "roleType",
        "roleName",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "roleName": {
          "type": "string",
          "example": "Transportation Ordering Officer"
        },
        "roleType": {
          "type": "string",
          "example": "customer"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ServiceMember": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        },
        "middleName": {
          "type": "string",
          "title": "Middle Name",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "TransportationOffice": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "gbloc": {
          "type": "string",
          "pattern": "^[A-Z]{4}$",
          "example": "JENQ"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "example": 29.382973
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "example": -98.62759
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "phoneLines": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "telephone",
            "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
            "example": "212-555-5555"
          }
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TransportationOffices": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransportationOffice"
      }
    },
    "TransportationServiceProviderPerformance": {
      "type": "object",
      "required": [
        "id",
        "trafficDistributionListId",
        "transportationServiceProviderId",
        "performancePeriodStart",
        "performancePeriodEnd",
        "rateCycleStart",
        "rateCycleEnd",
        "bestValueScore",
        "linehaulRate",
        "sitRate",
        "offerCount",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "bestValueScore": {
          "type": "number",
          "example": 98.01
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "linehaulRate": {
          "type": "number",
          "example": 0.26085695149376986
        },
        "offerCount": {
          "type": "integer",
          "example": 1
        },
        "performancePeriodEnd": {
          "type": "string",
          "format": "date-time"
        },
        "performancePeriodStart": {
          "type": "string",
          "format": "date-time"
        },
        "qualityBand": {
          "type": "integer",
          "x-nullable": true,
          "example": 29
        },
        "rateCycleEnd": {
          "type": "string",
          "format": "date-time"
        },
        "rateCycleStart": {
          "type": "string",
          "format": "date-time"
        },
        "sitRate": {
          "type": "number",
          "example": 0.26085695149376986
        },
        "trafficDistributionListId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "transportationServiceProviderId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TransportationServiceProviderPerformances": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransportationServiceProviderPerformance"
      }
    },
    "Upload": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "enum": [
            "application/pdf",
            "image/jpeg",
            "image/png"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Created at"
        },
        "filename": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "title": "Size in Bytes"
        }
      }
    },
    "UploadInformation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moveLocator": {
          "type": "string",
          "x-nullable": true,
          "example": "12432"
        },
        "officeUserEmail": {
          "type": "string",
          "x-nullable": true
        },
        "officeUserFirstName": {
          "type": "string",
          "x-nullable": true
        },
        "officeUserId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "officeUserLastName": {
          "type": "string",
          "x-nullable": true
        },
        "officeUserPhone": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberEmail": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberFirstName": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "serviceMemberLastName": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberPhone": {
          "type": "string",
          "x-nullable": true
        },
        "upload": {
          "$ref": "#/definitions/Upload"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "loginGovEmail",
        "active",
        "createdAt",
        "updatedAt",
        "currentAdminSessionId",
        "currentMilSessionId",
        "currentOfficeSessionId"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "currentAdminSessionId": {
          "type": "string",
          "example": "WiPgsPj-jPySR1d0dpmvIZ-HvZqemjmaQWxGQ6B8K_w"
        },
        "currentMilSessionId": {
          "type": "string",
          "example": "WiPgsPj-jPySR1d0dpmvIZ-HvZqemjmaQWxGQ6B8K_w"
        },
        "currentOfficeSessionId": {
          "type": "string",
          "example": "WiPgsPj-jPySR1d0dpmvIZ-HvZqemjmaQWxGQ6B8K_w"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "loginGovEmail": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "UserUpdatePayload": {
      "type": "object",
      "required": [
        "active"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "revokeAdminSession": {
          "type": "boolean",
          "x-nullable": true
        },
        "revokeMilSession": {
          "type": "boolean",
          "x-nullable": true
        },
        "revokeOfficeSession": {
          "type": "boolean",
          "x-nullable": true
        }
      }
    },
    "Users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "ValidationError": {
      "required": [
        "invalidFields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "type": "object"
        }
      ],
      "properties": {
        "invalidFields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "WebhookSubscription": {
      "description": "Represents subscribers who expect certain notifications to be pushed to their servers. Used for the Prime and Prime-related events specifically.",
      "type": "object",
      "properties": {
        "callbackUrl": {
          "description": "The URL to which the notifications for this subscription will be pushed to.",
          "type": "string",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "eventKey": {
          "description": "A string used to represent which events this subscriber expects to be notified about. Corresponds to the possible event_key values in webhook_notifications.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "severity": {
          "type": "integer",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/WebhookSubscriptionStatus"
        },
        "subscriberId": {
          "description": "Unique identifier for the subscriber",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "d494f114-05a2-4b39-840c-3d33243b7e29"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "WebhookSubscriptionStatus": {
      "type": "string",
      "title": "Webhook subscription status",
      "enum": [
        "ACTIVE",
        "FAILING",
        "DISABLED"
      ],
      "x-display-value": {
        "ACTIVE": "Active",
        "DISABLED": "Disabled",
        "FAILING": "Failing"
      },
      "x-nullable": true
    },
    "WebhookSubscriptions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/WebhookSubscription"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The API for move.mil admin actions.",
    "title": "move.mil Admin API",
    "license": {
      "name": "MIT",
      "url": "https://github.com/transcom/mymove/blob/master/LICENSE.md"
    },
    "version": "1.0.0"
  },
  "basePath": "/admin/v1",
  "paths": {
    "/access_codes": {
      "get": {
        "description": "Returns a list of access codes",
        "tags": [
          "access_codes"
        ],
        "summary": "List access codes",
        "operationId": "indexAccessCodes",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AccessCodes"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "access codes not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/admin_users": {
      "get": {
        "description": "Returns a list of admin users",
        "tags": [
          "admin_users"
        ],
        "summary": "List admin users",
        "operationId": "indexAdminUsers",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AdminUsers"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "admin users not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "post": {
        "description": "creates and returns an admin user record",
        "tags": [
          "admin_users"
        ],
        "summary": "create an admin user",
        "operationId": "createAdminUser",
        "parameters": [
          {
            "description": "Admin user information",
            "name": "adminUser",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AdminUserCreatePayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created Admin User",
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to create an admin user"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/admin_users/{adminUserId}": {
      "get": {
        "description": "Returns a single admin user",
        "tags": [
          "admin_users"
        ],
        "summary": "Fetch a specific admin user",
        "operationId": "getAdminUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "adminUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "admin user not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "tags": [
          "admin_users"
        ],
        "summary": "Updates an admin user",
        "operationId": "updateAdminUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "adminUserId",
            "in": "path",
            "required": true
          },
          {
            "description": "Admin user information",
            "name": "adminUser",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminUserUpdatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Admin User",
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update an admin user"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/electronic_orders": {
      "get": {
        "description": "Returns a list of electronic orders",
        "tags": [
          "electronic_order"
        ],
        "summary": "List electronic orders",
        "operationId": "indexElectronicOrders",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ElectronicOrders"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/electronic_orders/totals": {
      "get": {
        "description": "Returns a list of record counts for orders",
        "tags": [
          "electronic_order"
        ],
        "summary": "Get total counts for the orders stored in MilMove",
        "operationId": "getElectronicOrdersTotals",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "andFilter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ElectronicOrdersTotals"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves": {
      "get": {
        "description": "Returns a list of moves",
        "tags": [
          "move"
        ],
        "summary": "List moves",
        "operationId": "indexMoves",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Moves"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveID}": {
      "get": {
        "description": "Returns the given move and its relevant info",
        "tags": [
          "move"
        ],
        "summary": "Get information about a move",
        "operationId": "getMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "moveID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Must be authenticated to use this endpoint"
          },
          "404": {
            "description": "Move not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "patch": {
        "description": "Allows the user to change the ` + "`" + `show` + "`" + ` field on the selected field to either ` + "`" + `True` + "`" + ` or ` + "`" + `False` + "`" + `. A \"shown\" move will appear to all users as normal, a \"hidden\" move will not be returned or editable using any other endpoint (besides those in the Support API), and thus effectively deactivated.\n",
        "tags": [
          "move"
        ],
        "summary": "Disables or re-enables a move",
        "operationId": "updateMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "moveID",
            "in": "path",
            "required": true
          },
          {
            "description": "Move information",
            "name": "Move",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveUpdatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the Mov",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Must be authenticated to use this endpoint"
          },
          "403": {
            "description": "Not authorized to update this move"
          },
          "404": {
            "description": "Move not found"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "description": "Returns a list of notifications that have been sent to service members",
        "tags": [
          "notification"
        ],
        "summary": "List notifications",
        "operationId": "indexNotifications",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Notifications"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/office_users": {
      "get": {
        "description": "Returns a list of office users",
        "tags": [
          "office_users"
        ],
        "summary": "List office users",
        "operationId": "indexOfficeUsers",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUsers"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "office not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "post": {
        "description": "creates and returns an office user record",
        "tags": [
          "office_users"
        ],
        "summary": "create an office user",
        "operationId": "createOfficeUser",
        "parameters": [
          {
            "description": "Office user information",
            "name": "officeUser",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OfficeUserCreatePayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created Office User",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "422": {
            "description": "validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/office_users/{officeUserId}": {
      "get": {
        "description": "Returns the given office user",
        "tags": [
          "office_users"
        ],
        "summary": "Get an office user",
        "operationId": "getOfficeUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "officeUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "office not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "tags": [
          "office_users"
        ],
        "summary": "Updates an office user",
        "operationId": "updateOfficeUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "officeUserId",
            "in": "path",
            "required": true
          },
          {
            "description": "Office user information",
            "name": "officeUser",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OfficeUserUpdatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Office User",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update an office user"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/offices": {
      "get": {
        "description": "Returns a list of transportation offices",
        "tags": [
          "office"
        ],
        "summary": "List transportation offices",
        "operationId": "indexOffices",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/TransportationOffices"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "office not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "description": "Returns a list of organizations",
        "tags": [
          "organization"
        ],
        "summary": "List organizations",
        "operationId": "indexOrganizations",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Organizations"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/transportation_service_provider_performances": {
      "get": {
        "description": "Returns a list of transportation service provider performances (TSPPs)",
        "tags": [
          "transportation_service_provider_performances"
        ],
        "summary": "List transportation service provider performances (TSPPs)",
        "operationId": "indexTSPPs",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/TransportationServiceProviderPerformances"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "office not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/transportation_service_provider_performances/{tsppId}": {
      "get": {
        "description": "Returns a single tspp",
        "tags": [
          "transportation_service_provider_performances"
        ],
        "summary": "Fetch a specific tspp",
        "operationId": "getTSPP",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "tsppId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/TransportationServiceProviderPerformance"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "tspp not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/uploads/{uploadId}": {
      "get": {
        "description": "Returns the given upload and information about the uploader and move",
        "tags": [
          "upload"
        ],
        "summary": "Get information about an upload",
        "operationId": "getUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "uploadId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/UploadInformation"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "upload not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Returns a list of users",
        "tags": [
          "users"
        ],
        "summary": "List users",
        "operationId": "indexUsers",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Users"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "users not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "description": "Returns the given user and their sessions",
        "tags": [
          "users"
        ],
        "summary": "Get information about a user",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "user not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update a user's session or active status",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "User information",
            "name": "User",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update this user"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/webhook_subscriptions": {
      "get": {
        "description": "Returns a list of webhook subscriptions",
        "tags": [
          "webhook_subscriptions"
        ],
        "summary": "Lists webhook subscriptions",
        "operationId": "indexWebhookSubscriptions",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/WebhookSubscriptions"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not authenticated for this endpoint"
          },
          "404": {
            "description": "Webhook subscriptions not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "description": "creates and returns a webhook subscription",
        "tags": [
          "webhook_subscriptions"
        ],
        "summary": "create a webhook subscription",
        "operationId": "createWebhookSubscription",
        "parameters": [
          {
            "description": "Webhook subscription information",
            "name": "webhookSubscription",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateWebhookSubscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created webhook subscription",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to create a webhook subscription"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/webhook_subscriptions/{webhookSubscriptionId}": {
      "get": {
        "description": "Returns the given webhook subscription and its details",
        "tags": [
          "webhook_subscriptions"
        ],
        "summary": "Get information about a webhook subscription",
        "operationId": "getWebhookSubscription",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "webhookSubscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "subscription not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "tags": [
          "webhook_subscriptions"
        ],
        "summary": "Update a webhook subscription",
        "operationId": "updateWebhookSubscription",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "webhookSubscriptionId",
            "in": "path",
            "required": true
          },
          {
            "description": "Webhook subscription information",
            "name": "WebhookSubscription",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated webhook subscription",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update this webhook subscription"
          },
          "404": {
            "description": "subscription not found"
          },
          "412": {
            "description": "Precondition failed"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessCode": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "CODE456"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "locator": {
          "type": "string",
          "example": "11232"
        },
        "moveType": {
          "type": "string",
          "title": "Selected Move Type",
          "enum": [
            "PPM"
          ]
        }
      }
    },
    "AccessCodes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AccessCode"
      }
    },
    "Address": {
      "type": "object",
      "required": [
        "streetAddress1",
        "state",
        "city",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "postalCode": {
          "description": "zip code, international allowed",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "example": "'90210' or 'N15 3NL'"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Address line 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Address line 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "AdminUser": {
      "type": "object",
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "userId",
        "organizationId",
        "active",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string",
          "format": "uuid"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "AdminUserCreatePayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Email",
          "example": "user@userdomain.com"
        },
        "firstName": {
          "type": "string",
          "title": "First Name"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name"
        },
        "organizationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "AdminUserUpdatePayload": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        }
      }
    },
    "AdminUsers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AdminUser"
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateWebhookSubscription": {
      "type": "object",
      "required": [
        "subscriberId",
        "status",
        "eventKey",
        "callbackUrl"
      ],
      "properties": {
        "callbackUrl": {
          "description": "The URL to which the notifications for this subscription will be pushed to.",
          "type": "string"
        },
        "eventKey": {
          "description": "A string used to represent which events this subscriber expects to be notified about. Corresponds to the possible event_key values in webhook_notifications.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/WebhookSubscriptionStatus"
        },
        "subscriberId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ElectronicOrder": {
      "type": "object",
      "required": [
        "id",
        "issuer",
        "ordersNumber",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Created at"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "issuer": {
          "$ref": "#/definitions/Issuer"
        },
        "ordersNumber": {
          "type": "string",
          "title": "Orders Number"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Updated at"
        }
      }
    },
    "ElectronicOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ElectronicOrder"
      }
    },
    "ElectronicOrdersTotal": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "title": "Total Orders Count",
          "minimum": 0
        }
      }
    },
    "ElectronicOrdersTotals": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ElectronicOrdersTotal"
      }
    },
    "Issuer": {
      "description": "Organization that issues orders. If more organizations, especially civilian ones, become clients of this API in the future, this enumeration may need to be expanded.",
      "type": "string",
      "enum": [
        "army",
        "navy",
        "air-force",
        "marine-corps",
        "coast-guard"
      ]
    },
    "Move": {
      "type": "object",
      "required": [
        "id",
        "ordersId",
        "locator",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "ordersId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "serviceMember": {
          "$ref": "#/definitions/ServiceMember"
        },
        "show": {
          "type": "boolean",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "MoveUpdatePayload": {
      "type": "object",
      "required": [
        "show"
      ],
      "properties": {
        "show": {
          "type": "boolean"
        }
      }
    },
    "Moves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Move"
      }
    },
    "Notification": {
      "type": "object",
      "required": [
        "id",
        "email",
        "serviceMemberId",
        "sesMessageId",
        "notificationType",
        "createdAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "notificationType": {
          "type": "string",
          "enum": [
            "MOVE_REVIEWED_EMAIL",
            "MOVE_PAYMENT_REMINDER_EMAIL"
          ]
        },
        "serviceMemberId": {
          "type": "string",
          "format": "uuid"
        },
        "sesMessageId": {
          "type": "string"
        }
      }
    },
    "Notifications": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Notification"
      }
    },
    "OfficeUser": {
      "type": "object",
      "required": [
        "id",
        "firstName",
        "middleInitials",
        "lastName",
        "email",
        "telephone",
        "transportationOfficeId",
        "active",
        "roles",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string"
        },
        "middleInitials": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "OfficeUserCreatePayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Email",
          "example": "user@userdomain.com"
        },
        "firstName": {
          "type": "string",
          "title": "First Name"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name"
        },
        "middleInitials": {
          "type": "string",
          "title": "Middle Initials",
          "x-nullable": true,
          "example": "L."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserRole"
          }
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "example": "212-555-5555"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OfficeUserRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "x-nullable": true,
          "example": "Transportation Ordering Officer"
        },
        "roleType": {
          "type": "string",
          "title": "roleType",
          "x-nullable": true,
          "example": "transportation_ordering_officer"
        }
      }
    },
    "OfficeUserUpdatePayload": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        },
        "middleInitials": {
          "type": "string",
          "title": "Middle Initials",
          "x-nullable": true,
          "example": "Q."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserRole"
          }
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        }
      }
    },
    "OfficeUsers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/OfficeUser"
      }
    },
    "Organization": {
      "type": "object",
      "required": [
        "id",
        "name",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Created at"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "title": "Name"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Updated at"
        }
      }
    },
    "Organizations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Organization"
      }
    },
    "Role": {
      "type": "object",
      "required": [
        "id",
        "roleType",
        "roleName",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "roleName": {
          "type": "string",
          "example": "Transportation Ordering Officer"
        },
        "roleType": {
          "type": "string",
          "example": "customer"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ServiceMember": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        },
        "middleName": {
          "type": "string",
          "title": "Middle Name",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "TransportationOffice": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "gbloc": {
          "type": "string",
          "pattern": "^[A-Z]{4}$",
          "example": "JENQ"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "example": 29.382973
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "example": -98.62759
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "phoneLines": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "telephone",
            "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
            "example": "212-555-5555"
          }
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TransportationOffices": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransportationOffice"
      }
    },
    "TransportationServiceProviderPerformance": {
      "type": "object",
      "required": [
        "id",
        "trafficDistributionListId",
        "transportationServiceProviderId",
        "performancePeriodStart",
        "performancePeriodEnd",
        "rateCycleStart",
        "rateCycleEnd",
        "bestValueScore",
        "linehaulRate",
        "sitRate",
        "offerCount",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "bestValueScore": {
          "type": "number",
          "example": 98.01
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "linehaulRate": {
          "type": "number",
          "example": 0.26085695149376986
        },
        "offerCount": {
          "type": "integer",
          "example": 1
        },
        "performancePeriodEnd": {
          "type": "string",
          "format": "date-time"
        },
        "performancePeriodStart": {
          "type": "string",
          "format": "date-time"
        },
        "qualityBand": {
          "type": "integer",
          "x-nullable": true,
          "example": 29
        },
        "rateCycleEnd": {
          "type": "string",
          "format": "date-time"
        },
        "rateCycleStart": {
          "type": "string",
          "format": "date-time"
        },
        "sitRate": {
          "type": "number",
          "example": 0.26085695149376986
        },
        "trafficDistributionListId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "transportationServiceProviderId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TransportationServiceProviderPerformances": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransportationServiceProviderPerformance"
      }
    },
    "Upload": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "enum": [
            "application/pdf",
            "image/jpeg",
            "image/png"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Created at"
        },
        "filename": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "title": "Size in Bytes"
        }
      }
    },
    "UploadInformation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moveLocator": {
          "type": "string",
          "x-nullable": true,
          "example": "12432"
        },
        "officeUserEmail": {
          "type": "string",
          "x-nullable": true
        },
        "officeUserFirstName": {
          "type": "string",
          "x-nullable": true
        },
        "officeUserId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "officeUserLastName": {
          "type": "string",
          "x-nullable": true
        },
        "officeUserPhone": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberEmail": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberFirstName": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "serviceMemberLastName": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberPhone": {
          "type": "string",
          "x-nullable": true
        },
        "upload": {
          "$ref": "#/definitions/Upload"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "loginGovEmail",
        "active",
        "createdAt",
        "updatedAt",
        "currentAdminSessionId",
        "currentMilSessionId",
        "currentOfficeSessionId"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "currentAdminSessionId": {
          "type": "string",
          "example": "WiPgsPj-jPySR1d0dpmvIZ-HvZqemjmaQWxGQ6B8K_w"
        },
        "currentMilSessionId": {
          "type": "string",
          "example": "WiPgsPj-jPySR1d0dpmvIZ-HvZqemjmaQWxGQ6B8K_w"
        },
        "currentOfficeSessionId": {
          "type": "string",
          "example": "WiPgsPj-jPySR1d0dpmvIZ-HvZqemjmaQWxGQ6B8K_w"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "loginGovEmail": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "UserUpdatePayload": {
      "type": "object",
      "required": [
        "active"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "revokeAdminSession": {
          "type": "boolean",
          "x-nullable": true
        },
        "revokeMilSession": {
          "type": "boolean",
          "x-nullable": true
        },
        "revokeOfficeSession": {
          "type": "boolean",
          "x-nullable": true
        }
      }
    },
    "Users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "ValidationError": {
      "required": [
        "invalidFields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "$ref": "#/definitions/ValidationErrorAllOf1"
        }
      ],
      "properties": {
        "invalidFields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ValidationErrorAllOf1": {
      "type": "object"
    },
    "WebhookSubscription": {
      "description": "Represents subscribers who expect certain notifications to be pushed to their servers. Used for the Prime and Prime-related events specifically.",
      "type": "object",
      "properties": {
        "callbackUrl": {
          "description": "The URL to which the notifications for this subscription will be pushed to.",
          "type": "string",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "eventKey": {
          "description": "A string used to represent which events this subscriber expects to be notified about. Corresponds to the possible event_key values in webhook_notifications.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "severity": {
          "type": "integer",
          "minimum": 0,
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/WebhookSubscriptionStatus"
        },
        "subscriberId": {
          "description": "Unique identifier for the subscriber",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "d494f114-05a2-4b39-840c-3d33243b7e29"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "WebhookSubscriptionStatus": {
      "type": "string",
      "title": "Webhook subscription status",
      "enum": [
        "ACTIVE",
        "FAILING",
        "DISABLED"
      ],
      "x-display-value": {
        "ACTIVE": "Active",
        "DISABLED": "Disabled",
        "FAILING": "Failing"
      },
      "x-nullable": true
    },
    "WebhookSubscriptions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/WebhookSubscription"
      }
    }
  }
}`))
}
