// Code generated by go-swagger; DO NOT EDIT.

package adminapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Admin API is a RESTful API that enables the Admin application for MilMove.\n\nAll endpoints are located under ` + "`" + `/admin/v1` + "`" + `.\n",
    "title": "MilMove Admin API",
    "contact": {
      "email": "milmove-developers@caci.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "basePath": "/admin/v1",
  "paths": {
    "/admin-users": {
      "get": {
        "description": "This endpoint returns a list of Admin Users. Do not use this endpoint directly\nas it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin users"
        ],
        "summary": "List Admin Users",
        "operationId": "indexAdminUsers",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AdminUsers"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Admin Users not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "post": {
        "description": "This endpoint creates an Admin User record and returns the created record in the\n` + "`" + `201` + "`" + ` response. Do not use this endpoint directly as it is meant to be used with\nthe Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin users"
        ],
        "summary": "Create an Admin User",
        "operationId": "createAdminUser",
        "parameters": [
          {
            "description": "Admin User information",
            "name": "adminUser",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AdminUserCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created Admin User",
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to create an Admin User"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/admin-users/{adminUserId}": {
      "get": {
        "description": "This endpoint returns a single Admin User by ID. Do not use this\nendpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin users"
        ],
        "summary": "Fetch a specific Admin User",
        "operationId": "getAdminUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "adminUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Admin User not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a single Admin User by ID. Do not use this\nendpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin users"
        ],
        "summary": "Updates an Admin User",
        "operationId": "updateAdminUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "adminUserId",
            "in": "path",
            "required": true
          },
          {
            "description": "Admin User information",
            "name": "adminUser",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminUserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Admin User",
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update an Admin User"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/client-certificates": {
      "get": {
        "description": "This endpoint returns a list of Client Certificates. Do not use this\nendpoint directly as it is meant to be used with the Admin UI\nexclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client certificates"
        ],
        "summary": "List client certificates",
        "operationId": "indexClientCertificates",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ClientCertificates"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "office not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "post": {
        "description": "This endpoint creates a Client Certificate record and returns the\ncreated record in the ` + "`" + `201` + "`" + ` response. Do not use this endpoint\ndirectly as it is meant to be used with the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client certificates"
        ],
        "summary": "create a client cert",
        "operationId": "createClientCertificate",
        "parameters": [
          {
            "description": "client cert information",
            "name": "clientCertificate",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ClientCertificateCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created client certificate",
            "schema": {
              "$ref": "#/definitions/ClientCertificate"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to create a client certificate"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/client-certificates/{clientCertificateId}": {
      "get": {
        "description": "This endpoint returns a single Client Certificate by ID. Do not use\nthis endpoint directly as it is meant to be used with the Admin UI\nexclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client certificates"
        ],
        "summary": "Get a client certificate",
        "operationId": "getClientCertificate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "clientCertificateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ClientCertificate"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "id not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "delete": {
        "description": "This endpoint removes a single Client Certificate by ID. Do not use\nthis endpoint directly as it is meant to be used with the Admin UI\nexclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client certificates"
        ],
        "summary": "removes a client certificate",
        "operationId": "removeClientCertificate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "clientCertificateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed Client Certificate",
            "schema": {
              "$ref": "#/definitions/ClientCertificate"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to remove a client certificate"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a single Client Certificate by ID. Do not use\nthis endpoint directly as it is meant to be used with the Admin UI\nexclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client certificates"
        ],
        "summary": "Updates a client certificate",
        "operationId": "updateClientCertificate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "clientCertificateId",
            "in": "path",
            "required": true
          },
          {
            "description": "client cert information",
            "name": "clientCertificate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientCertificateUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Client Certificate",
            "schema": {
              "$ref": "#/definitions/ClientCertificate"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update a client certificate"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/electronic-orders": {
      "get": {
        "description": "This endpoint returns a list of Electronic Orders. Do not use this endpoint\ndirectly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Electronic orders"
        ],
        "summary": "List Electronic Orders",
        "operationId": "indexElectronicOrders",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ElectronicOrders"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Electronic Order not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/electronic-orders/totals": {
      "get": {
        "description": "This endpoint returns a list of record counts for Electronic Orders. Do not use\nthis endpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Electronic orders"
        ],
        "summary": "Get total counts for the orders stored in MilMove",
        "operationId": "getElectronicOrdersTotals",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "andFilter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ElectronicOrdersTotals"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Total count for Electronic Orders not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves": {
      "get": {
        "description": "This endpoint returns a list of Moves. Do not use this endpoint directly\nas it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Moves"
        ],
        "summary": "List Moves",
        "operationId": "indexMoves",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Moves"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Moves not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveID}": {
      "get": {
        "description": "This endpoint returns a single Move by ID. Do not use this endpoint directly as\nit is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Moves"
        ],
        "summary": "Get information about a Move",
        "operationId": "getMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "moveID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Must be authenticated to use this endpoint"
          },
          "404": {
            "description": "Move not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a single Move by ID. This allows the Admin User to change\nthe ` + "`" + `show` + "`" + ` field on the selected field to either ` + "`" + `True` + "`" + ` or ` + "`" + `False` + "`" + `. A \"shown\"\nMove will appear to all users as normal, a \"hidden\" Move will not be returned or\neditable using any other endpoint (besides those in the Support API), and thus\neffectively deactivated. Do not use this endpoint directly as it is meant to be\nused with the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Moves"
        ],
        "summary": "Toggle Move visibility",
        "operationId": "updateMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "moveID",
            "in": "path",
            "required": true
          },
          {
            "description": "Move information",
            "name": "Move",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the Move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Must be authenticated to use this endpoint"
          },
          "403": {
            "description": "Not authorized to update this Move"
          },
          "404": {
            "description": "Move not found"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "description": "This endpoint returns a list of Notifications that have been sent to Service\nMembers. Do not use this endpoint directly as it is meant to be used with the\nAdmin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Notifications"
        ],
        "summary": "List Notifications",
        "operationId": "indexNotifications",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Notifications"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Notifications not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/office-users": {
      "get": {
        "description": "This endpoint returns a list of Office Users. Do not use this endpoint directly\nas it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Office users"
        ],
        "summary": "List of Office Users",
        "operationId": "indexOfficeUsers",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUsers"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Office User not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "post": {
        "description": "This endpoint creates an Office User record and returns the created record in\nthe ` + "`" + `201` + "`" + ` response. If there are issues with the Office User information\nprovided a ` + "`" + `422` + "`" + ` response will occur with information about invalid fields and\nadditional details. Do not use this endpoint directly as it is meant to be used\nwith the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Office users"
        ],
        "summary": "Create an Office User",
        "operationId": "createOfficeUser",
        "parameters": [
          {
            "description": "Office User information",
            "name": "officeUser",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OfficeUserCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created Office User",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "422": {
            "description": "validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/office-users/{officeUserId}": {
      "get": {
        "description": "This endpoint returns a single Office User by ID. Do not use this\nendpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Office users"
        ],
        "summary": "Get an Office User",
        "operationId": "getOfficeUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "officeUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Office User not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a single Office User by ID. Do not use this\nendpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Office users"
        ],
        "summary": "Updates an Office User",
        "operationId": "updateOfficeUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "officeUserId",
            "in": "path",
            "required": true
          },
          {
            "description": "Office User information",
            "name": "officeUser",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OfficeUserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Office User",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update an Office User"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/offices": {
      "get": {
        "description": "This endpoint returns a list of Transportation Offices. Do not use this endpoint\ndirectly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Transportation offices"
        ],
        "summary": "List Transportation Offices",
        "operationId": "indexOffices",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/TransportationOffices"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Transportation Office not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "description": "This endpoint returns a list of Organizations. Do not use this endpoint directly\nas it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organizations"
        ],
        "summary": "List Organizations",
        "operationId": "indexOrganizations",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Organizations"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Organizations not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/requested-office-users": {
      "get": {
        "description": "This endpoint returns a list of Office Users. Do not use this endpoint directly\nas it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Requested office users"
        ],
        "summary": "List of Office Users Requesting Accounts",
        "operationId": "indexRequestedOfficeUsers",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUsers"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Office User not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/requested-office-users/{officeUserId}": {
      "get": {
        "description": "Retrieving a single office user in any status. This endpoint is used in the Admin UI that will allow the admin user to view the user's relevant data.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Requested office users"
        ],
        "summary": "Get a Requested Office User",
        "operationId": "getRequestedOfficeUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "officeUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Office User not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "description": "Updates a requested office user to include profile data and status. This will be used in the Admin UI for approving/rejecting/updating a user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Requested office users"
        ],
        "summary": "Update a Requested Office User",
        "operationId": "updateRequestedOfficeUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "officeUserId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestedOfficeUserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Office User not found"
          },
          "422": {
            "description": "validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/uploads/{uploadId}": {
      "get": {
        "description": "This endpoint returns a single Upload by ID containing the given Upload and\ninformation about the Uploader and Move. Do not use this endpoint directly as it\nis meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Uploads"
        ],
        "summary": "Get information about an Upload",
        "operationId": "getUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "uploadId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/UploadInformation"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Upload not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "This endpoint returns a list of Users. Do not use this endpoint directly as it\nis meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "List Users",
        "operationId": "indexUsers",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Users"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Users not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "description": "This endpoint returns a single User by ID. This also returns the User's sessions\nas well. Do not use this endpoint directly as it is meant to be used with the\nAdmin UI exclusively.\n\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get information about a User",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a single User by ID. This can be used by the Admin User to\nupdate the User's session or the User's active status. Do not use this endpoint\ndirectly as it is meant to be used with the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update a User's session or active status",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "User information",
            "name": "User",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update this User"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/webhook-subscriptions": {
      "get": {
        "description": "This endpoint returns a list of Webhook Subscriptions. Do not use this endpoint\ndirectly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Webhook subscriptions"
        ],
        "summary": "Lists Webhook Subscriptions",
        "operationId": "indexWebhookSubscriptions",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/WebhookSubscriptions"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not authenticated for this endpoint"
          },
          "404": {
            "description": "Webhook Subscriptions not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "description": "This endpoint creates a Webhook Subscription and returns the created record in\nthe ` + "`" + `201` + "`" + ` response. Do not use this endpoint directly as it is meant to be used\nwith the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Webhook subscriptions"
        ],
        "summary": "Create a Webhook Subscription",
        "operationId": "createWebhookSubscription",
        "parameters": [
          {
            "description": "Webhook subscription information",
            "name": "webhookSubscription",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateWebhookSubscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created Webhook Subscription",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to create a Webhook Subscription"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/webhook-subscriptions/{webhookSubscriptionId}": {
      "get": {
        "description": "This endpoint returns a single Webhook Subscription by ID. Do not use this\nendpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Webhook subscriptions"
        ],
        "summary": "Get information about a Webhook Subscription",
        "operationId": "getWebhookSubscription",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "webhookSubscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Webhook Subscription not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a single Webhook Subscription by ID. Do not use this\nendpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Webhook subscriptions"
        ],
        "summary": "Update a Webhook Subscription",
        "operationId": "updateWebhookSubscription",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "webhookSubscriptionId",
            "in": "path",
            "required": true
          },
          {
            "description": "Webhook Subscription information",
            "name": "WebhookSubscription",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Webhook Subscription",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update this Webhook Subscription"
          },
          "404": {
            "description": "Webhook Subscription not found"
          },
          "412": {
            "description": "Precondition failed"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "required": [
        "streetAddress1",
        "state",
        "city",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "county": {
          "type": "string",
          "title": "County",
          "x-nullable": true,
          "example": "LOS ANGELES"
        },
        "postalCode": {
          "description": "zip code, international allowed",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "example": "'90210' or 'N15 3NL'"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Address line 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Address line 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "AdminUser": {
      "type": "object",
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "userId",
        "organizationId",
        "active",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string",
          "format": "uuid"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "AdminUserCreate": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Email",
          "example": "user@userdomain.com"
        },
        "firstName": {
          "type": "string",
          "title": "First Name"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name"
        },
        "organizationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "AdminUserUpdate": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        }
      }
    },
    "AdminUsers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AdminUser"
      }
    },
    "ClientCertificate": {
      "type": "object",
      "properties": {
        "allowAirForceOrdersRead": {
          "type": "boolean"
        },
        "allowAirForceOrdersWrite": {
          "type": "boolean"
        },
        "allowArmyOrdersRead": {
          "type": "boolean"
        },
        "allowArmyOrdersWrite": {
          "type": "boolean"
        },
        "allowCoastGuardOrdersRead": {
          "type": "boolean"
        },
        "allowCoastGuardOrdersWrite": {
          "type": "boolean"
        },
        "allowDpsAuthAPI": {
          "type": "boolean"
        },
        "allowMarineCorpsOrdersRead": {
          "type": "boolean"
        },
        "allowMarineCorpsOrdersWrite": {
          "type": "boolean"
        },
        "allowNavyOrdersRead": {
          "type": "boolean"
        },
        "allowNavyOrdersWrite": {
          "type": "boolean"
        },
        "allowOrdersAPI": {
          "type": "boolean"
        },
        "allowPrime": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "sha256Digest": {
          "type": "string",
          "example": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
        },
        "subject": {
          "type": "string",
          "example": "CN=example-user,OU=DoD+OU=PKI+OU=CONTRACTOR,O=U.S. Government,C=US"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ClientCertificateCreate": {
      "type": "object",
      "required": [
        "sha256Digest",
        "subject",
        "email"
      ],
      "properties": {
        "allowAirForceOrdersRead": {
          "type": "boolean"
        },
        "allowAirForceOrdersWrite": {
          "type": "boolean"
        },
        "allowArmyOrdersRead": {
          "type": "boolean"
        },
        "allowArmyOrdersWrite": {
          "type": "boolean"
        },
        "allowCoastGuardOrdersRead": {
          "type": "boolean"
        },
        "allowCoastGuardOrdersWrite": {
          "type": "boolean"
        },
        "allowMarineCorpsOrdersRead": {
          "type": "boolean"
        },
        "allowMarineCorpsOrdersWrite": {
          "type": "boolean"
        },
        "allowNavyOrdersRead": {
          "type": "boolean"
        },
        "allowNavyOrdersWrite": {
          "type": "boolean"
        },
        "allowOrdersAPI": {
          "type": "boolean"
        },
        "allowPrime": {
          "type": "boolean"
        },
        "email": {
          "type": "string",
          "example": "user@example.com"
        },
        "sha256Digest": {
          "type": "string",
          "example": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
        },
        "subject": {
          "type": "string",
          "example": "CN=example-user,OU=DoD+OU=PKI+OU=CONTRACTOR,O=U.S. Government,C=US"
        }
      }
    },
    "ClientCertificateUpdate": {
      "type": "object",
      "properties": {
        "allowAirForceOrdersRead": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowAirForceOrdersWrite": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowArmyOrdersRead": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowArmyOrdersWrite": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowCoastGuardOrdersRead": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowCoastGuardOrdersWrite": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowDpsAuthAPI": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowMarineCorpsOrdersRead": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowMarineCorpsOrdersWrite": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowNavyOrdersRead": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowNavyOrdersWrite": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowOrdersAPI": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowPrime": {
          "type": "boolean",
          "x-nullable": true
        },
        "sha256Digest": {
          "type": "string",
          "example": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
        },
        "subject": {
          "type": "string",
          "example": "CN=example-user,OU=DoD+OU=PKI+OU=CONTRACTOR,O=U.S. Government,C=US"
        }
      }
    },
    "ClientCertificates": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ClientCertificate"
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateWebhookSubscription": {
      "type": "object",
      "required": [
        "subscriberId",
        "status",
        "eventKey",
        "callbackUrl"
      ],
      "properties": {
        "callbackUrl": {
          "description": "The URL to which the notifications for this subscription will be pushed to.",
          "type": "string"
        },
        "eventKey": {
          "description": "A string used to represent which events this subscriber expects to be notified about. Corresponds to the possible event_key values in webhook_notifications.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/WebhookSubscriptionStatus"
        },
        "subscriberId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ElectronicOrder": {
      "type": "object",
      "required": [
        "id",
        "issuer",
        "ordersNumber",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Created at",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "issuer": {
          "$ref": "#/definitions/Issuer"
        },
        "ordersNumber": {
          "type": "string",
          "title": "Orders Number"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Updated at",
          "readOnly": true
        }
      }
    },
    "ElectronicOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ElectronicOrder"
      }
    },
    "ElectronicOrdersTotal": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "title": "Total Orders Count"
        }
      }
    },
    "ElectronicOrdersTotals": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ElectronicOrdersTotal"
      }
    },
    "Issuer": {
      "description": "Organization that issues orders. If more organizations, especially civilian ones, become clients of this API in the future, this enumeration may need to be expanded.",
      "type": "string",
      "enum": [
        "army",
        "navy",
        "air-force",
        "marine-corps",
        "coast-guard"
      ]
    },
    "Move": {
      "type": "object",
      "required": [
        "id",
        "ordersId",
        "locator",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "ordersId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "serviceMember": {
          "$ref": "#/definitions/ServiceMember"
        },
        "show": {
          "type": "boolean",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MoveStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "MoveUpdate": {
      "type": "object",
      "required": [
        "show"
      ],
      "properties": {
        "show": {
          "type": "boolean"
        }
      }
    },
    "Moves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Move"
      }
    },
    "Notification": {
      "type": "object",
      "required": [
        "id",
        "email",
        "serviceMemberId",
        "sesMessageId",
        "notificationType",
        "createdAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "notificationType": {
          "type": "string",
          "enum": [
            "MOVE_PAYMENT_REMINDER_EMAIL"
          ]
        },
        "serviceMemberId": {
          "type": "string",
          "format": "uuid"
        },
        "sesMessageId": {
          "type": "string"
        }
      }
    },
    "Notifications": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Notification"
      }
    },
    "OfficeUser": {
      "type": "object",
      "required": [
        "id",
        "firstName",
        "middleInitials",
        "lastName",
        "email",
        "telephone",
        "transportationOfficeId",
        "active",
        "roles",
        "edipi",
        "otherUniqueId",
        "rejectionReason",
        "status",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "edipi": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string"
        },
        "middleInitials": {
          "type": "string"
        },
        "otherUniqueId": {
          "type": "string"
        },
        "privileges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Privilege"
          }
        },
        "rejectionReason": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "REQUESTED",
            "REJECTED"
          ]
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "OfficeUserCreate": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Email",
          "example": "user@userdomain.com"
        },
        "firstName": {
          "type": "string",
          "title": "First Name"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name"
        },
        "middleInitials": {
          "type": "string",
          "title": "Middle Initials",
          "x-nullable": true,
          "example": "L."
        },
        "privileges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserPrivilege"
          },
          "x-nullable": true
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserRole"
          }
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "example": "212-555-5555"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OfficeUserPrivilege": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "x-nullable": true,
          "example": "Supervisor"
        },
        "privilegeType": {
          "type": "string",
          "title": "privilegeType",
          "x-nullable": true,
          "example": "supervisor"
        }
      }
    },
    "OfficeUserRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "x-nullable": true,
          "example": "Transportation Ordering Officer"
        },
        "roleType": {
          "type": "string",
          "title": "roleType",
          "x-nullable": true,
          "example": "transportation_ordering_officer"
        }
      }
    },
    "OfficeUserUpdate": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        },
        "middleInitials": {
          "type": "string",
          "title": "Middle Initials",
          "x-nullable": true,
          "example": "Q."
        },
        "privileges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserPrivilege"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserRole"
          }
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OfficeUsers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/OfficeUser"
      }
    },
    "OktaAccountInfoResponse": {
      "type": "object",
      "properties": {
        "activated": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "credentials": {
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "profile": {
          "type": "object"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "Organization": {
      "type": "object",
      "required": [
        "id",
        "name",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Created at",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "title": "Name"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Updated at",
          "readOnly": true
        }
      }
    },
    "Organizations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Organization"
      }
    },
    "Privilege": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4780-65aa-42ec-a945-5fd87dec0538"
        },
        "privilegeName": {
          "type": "string",
          "example": "Supervisor"
        },
        "privilegeType": {
          "type": "string",
          "example": "supervisor"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "RequestedOfficeUserUpdate": {
      "type": "object",
      "properties": {
        "edipi": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "example": "user@userdomain.com"
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        },
        "middleInitials": {
          "type": "string",
          "title": "Middle Initials",
          "x-nullable": true,
          "example": "Q."
        },
        "otherUniqueId": {
          "type": "string"
        },
        "rejectionReason": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserRole"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "REJECTED"
          ]
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "Role": {
      "type": "object",
      "required": [
        "id",
        "roleType",
        "roleName",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "roleName": {
          "type": "string",
          "example": "Transportation Ordering Officer"
        },
        "roleType": {
          "type": "string",
          "example": "customer"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ServiceMember": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        },
        "middleName": {
          "type": "string",
          "title": "Middle Name",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "TransportationOffice": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "gbloc": {
          "type": "string",
          "pattern": "^[A-Z]{4}$",
          "example": "JENQ"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "example": 29.382973
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "example": -98.62759
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "phoneLines": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "telephone",
            "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
            "example": "212-555-5555"
          }
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "TransportationOffices": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransportationOffice"
      }
    },
    "Upload": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "enum": [
            "application/pdf",
            "image/jpeg",
            "image/png"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Created at",
          "readOnly": true
        },
        "filename": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "title": "Size in Bytes"
        }
      }
    },
    "UploadInformation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moveLocator": {
          "type": "string",
          "x-nullable": true,
          "example": "12432"
        },
        "officeUserEmail": {
          "type": "string",
          "x-nullable": true
        },
        "officeUserFirstName": {
          "type": "string",
          "x-nullable": true
        },
        "officeUserId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "officeUserLastName": {
          "type": "string",
          "x-nullable": true
        },
        "officeUserPhone": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberEmail": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberFirstName": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "serviceMemberLastName": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberPhone": {
          "type": "string",
          "x-nullable": true
        },
        "upload": {
          "$ref": "#/definitions/Upload"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "oktaEmail",
        "active",
        "createdAt",
        "updatedAt",
        "currentAdminSessionId",
        "currentMilSessionId",
        "currentOfficeSessionId"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "currentAdminSessionId": {
          "type": "string",
          "example": "WiPgsPj-jPySR1d0dpmvIZ-HvZqemjmaQWxGQ6B8K_w"
        },
        "currentMilSessionId": {
          "type": "string",
          "example": "WiPgsPj-jPySR1d0dpmvIZ-HvZqemjmaQWxGQ6B8K_w"
        },
        "currentOfficeSessionId": {
          "type": "string",
          "example": "WiPgsPj-jPySR1d0dpmvIZ-HvZqemjmaQWxGQ6B8K_w"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "oktaEmail": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "UserUpdate": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-nullable": true
        },
        "revokeAdminSession": {
          "type": "boolean",
          "x-nullable": true
        },
        "revokeMilSession": {
          "type": "boolean",
          "x-nullable": true
        },
        "revokeOfficeSession": {
          "type": "boolean",
          "x-nullable": true
        }
      }
    },
    "Users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "ValidationError": {
      "required": [
        "invalidFields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "type": "object"
        }
      ],
      "properties": {
        "invalidFields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "WebhookSubscription": {
      "description": "Represents subscribers who expect certain notifications to be pushed to their servers. Used for the Prime and Prime-related events specifically.",
      "type": "object",
      "properties": {
        "callbackUrl": {
          "description": "The URL to which the notifications for this subscription will be pushed to.",
          "type": "string",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "eventKey": {
          "description": "A string used to represent which events this subscriber expects to be notified about. Corresponds to the possible event_key values in webhook_notifications.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "severity": {
          "type": "integer",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/WebhookSubscriptionStatus"
        },
        "subscriberId": {
          "description": "Unique identifier for the subscriber",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "d494f114-05a2-4b39-840c-3d33243b7e29"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "WebhookSubscriptionStatus": {
      "type": "string",
      "title": "Webhook subscription status",
      "enum": [
        "ACTIVE",
        "FAILING",
        "DISABLED"
      ],
      "x-display-value": {
        "ACTIVE": "Active",
        "DISABLED": "Disabled",
        "FAILING": "Failing"
      },
      "x-nullable": true
    },
    "WebhookSubscriptions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/WebhookSubscription"
      }
    }
  },
  "tags": [
    {
      "description": "Information about Admin UI users",
      "name": "Admin users",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about Client Certificates",
      "name": "Client certificates",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about electronic orders",
      "name": "Electronic orders",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about moves",
      "name": "Moves",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about notifications",
      "name": "Notifications",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about transportation offices",
      "name": "Transportation offices",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about office users",
      "name": "Office users",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about organizations",
      "name": "Organizations",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about uploads",
      "name": "Uploads",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about requested office users",
      "name": "Requested Office Users",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about users",
      "name": "Users",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about Webhook subscriptions",
      "name": "Webhook subscriptions",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Admin API is a RESTful API that enables the Admin application for MilMove.\n\nAll endpoints are located under ` + "`" + `/admin/v1` + "`" + `.\n",
    "title": "MilMove Admin API",
    "contact": {
      "email": "milmove-developers@caci.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "basePath": "/admin/v1",
  "paths": {
    "/admin-users": {
      "get": {
        "description": "This endpoint returns a list of Admin Users. Do not use this endpoint directly\nas it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin users"
        ],
        "summary": "List Admin Users",
        "operationId": "indexAdminUsers",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AdminUsers"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Admin Users not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "post": {
        "description": "This endpoint creates an Admin User record and returns the created record in the\n` + "`" + `201` + "`" + ` response. Do not use this endpoint directly as it is meant to be used with\nthe Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin users"
        ],
        "summary": "Create an Admin User",
        "operationId": "createAdminUser",
        "parameters": [
          {
            "description": "Admin User information",
            "name": "adminUser",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AdminUserCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created Admin User",
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to create an Admin User"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/admin-users/{adminUserId}": {
      "get": {
        "description": "This endpoint returns a single Admin User by ID. Do not use this\nendpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin users"
        ],
        "summary": "Fetch a specific Admin User",
        "operationId": "getAdminUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "adminUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Admin User not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a single Admin User by ID. Do not use this\nendpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin users"
        ],
        "summary": "Updates an Admin User",
        "operationId": "updateAdminUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "adminUserId",
            "in": "path",
            "required": true
          },
          {
            "description": "Admin User information",
            "name": "adminUser",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminUserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Admin User",
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update an Admin User"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/client-certificates": {
      "get": {
        "description": "This endpoint returns a list of Client Certificates. Do not use this\nendpoint directly as it is meant to be used with the Admin UI\nexclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client certificates"
        ],
        "summary": "List client certificates",
        "operationId": "indexClientCertificates",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ClientCertificates"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "office not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "post": {
        "description": "This endpoint creates a Client Certificate record and returns the\ncreated record in the ` + "`" + `201` + "`" + ` response. Do not use this endpoint\ndirectly as it is meant to be used with the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client certificates"
        ],
        "summary": "create a client cert",
        "operationId": "createClientCertificate",
        "parameters": [
          {
            "description": "client cert information",
            "name": "clientCertificate",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ClientCertificateCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created client certificate",
            "schema": {
              "$ref": "#/definitions/ClientCertificate"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to create a client certificate"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/client-certificates/{clientCertificateId}": {
      "get": {
        "description": "This endpoint returns a single Client Certificate by ID. Do not use\nthis endpoint directly as it is meant to be used with the Admin UI\nexclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client certificates"
        ],
        "summary": "Get a client certificate",
        "operationId": "getClientCertificate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "clientCertificateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ClientCertificate"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "id not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "delete": {
        "description": "This endpoint removes a single Client Certificate by ID. Do not use\nthis endpoint directly as it is meant to be used with the Admin UI\nexclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client certificates"
        ],
        "summary": "removes a client certificate",
        "operationId": "removeClientCertificate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "clientCertificateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed Client Certificate",
            "schema": {
              "$ref": "#/definitions/ClientCertificate"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to remove a client certificate"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a single Client Certificate by ID. Do not use\nthis endpoint directly as it is meant to be used with the Admin UI\nexclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client certificates"
        ],
        "summary": "Updates a client certificate",
        "operationId": "updateClientCertificate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "clientCertificateId",
            "in": "path",
            "required": true
          },
          {
            "description": "client cert information",
            "name": "clientCertificate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientCertificateUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Client Certificate",
            "schema": {
              "$ref": "#/definitions/ClientCertificate"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update a client certificate"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/electronic-orders": {
      "get": {
        "description": "This endpoint returns a list of Electronic Orders. Do not use this endpoint\ndirectly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Electronic orders"
        ],
        "summary": "List Electronic Orders",
        "operationId": "indexElectronicOrders",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ElectronicOrders"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Electronic Order not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/electronic-orders/totals": {
      "get": {
        "description": "This endpoint returns a list of record counts for Electronic Orders. Do not use\nthis endpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Electronic orders"
        ],
        "summary": "Get total counts for the orders stored in MilMove",
        "operationId": "getElectronicOrdersTotals",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "andFilter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ElectronicOrdersTotals"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Total count for Electronic Orders not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves": {
      "get": {
        "description": "This endpoint returns a list of Moves. Do not use this endpoint directly\nas it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Moves"
        ],
        "summary": "List Moves",
        "operationId": "indexMoves",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Moves"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Moves not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveID}": {
      "get": {
        "description": "This endpoint returns a single Move by ID. Do not use this endpoint directly as\nit is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Moves"
        ],
        "summary": "Get information about a Move",
        "operationId": "getMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "moveID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Must be authenticated to use this endpoint"
          },
          "404": {
            "description": "Move not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a single Move by ID. This allows the Admin User to change\nthe ` + "`" + `show` + "`" + ` field on the selected field to either ` + "`" + `True` + "`" + ` or ` + "`" + `False` + "`" + `. A \"shown\"\nMove will appear to all users as normal, a \"hidden\" Move will not be returned or\neditable using any other endpoint (besides those in the Support API), and thus\neffectively deactivated. Do not use this endpoint directly as it is meant to be\nused with the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Moves"
        ],
        "summary": "Toggle Move visibility",
        "operationId": "updateMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "moveID",
            "in": "path",
            "required": true
          },
          {
            "description": "Move information",
            "name": "Move",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the Move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Must be authenticated to use this endpoint"
          },
          "403": {
            "description": "Not authorized to update this Move"
          },
          "404": {
            "description": "Move not found"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "description": "This endpoint returns a list of Notifications that have been sent to Service\nMembers. Do not use this endpoint directly as it is meant to be used with the\nAdmin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Notifications"
        ],
        "summary": "List Notifications",
        "operationId": "indexNotifications",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Notifications"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Notifications not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/office-users": {
      "get": {
        "description": "This endpoint returns a list of Office Users. Do not use this endpoint directly\nas it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Office users"
        ],
        "summary": "List of Office Users",
        "operationId": "indexOfficeUsers",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUsers"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Office User not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "post": {
        "description": "This endpoint creates an Office User record and returns the created record in\nthe ` + "`" + `201` + "`" + ` response. If there are issues with the Office User information\nprovided a ` + "`" + `422` + "`" + ` response will occur with information about invalid fields and\nadditional details. Do not use this endpoint directly as it is meant to be used\nwith the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Office users"
        ],
        "summary": "Create an Office User",
        "operationId": "createOfficeUser",
        "parameters": [
          {
            "description": "Office User information",
            "name": "officeUser",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OfficeUserCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created Office User",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "422": {
            "description": "validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/office-users/{officeUserId}": {
      "get": {
        "description": "This endpoint returns a single Office User by ID. Do not use this\nendpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Office users"
        ],
        "summary": "Get an Office User",
        "operationId": "getOfficeUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "officeUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Office User not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a single Office User by ID. Do not use this\nendpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Office users"
        ],
        "summary": "Updates an Office User",
        "operationId": "updateOfficeUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "officeUserId",
            "in": "path",
            "required": true
          },
          {
            "description": "Office User information",
            "name": "officeUser",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OfficeUserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Office User",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update an Office User"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/offices": {
      "get": {
        "description": "This endpoint returns a list of Transportation Offices. Do not use this endpoint\ndirectly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Transportation offices"
        ],
        "summary": "List Transportation Offices",
        "operationId": "indexOffices",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/TransportationOffices"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Transportation Office not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "description": "This endpoint returns a list of Organizations. Do not use this endpoint directly\nas it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organizations"
        ],
        "summary": "List Organizations",
        "operationId": "indexOrganizations",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Organizations"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Organizations not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/requested-office-users": {
      "get": {
        "description": "This endpoint returns a list of Office Users. Do not use this endpoint directly\nas it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Requested office users"
        ],
        "summary": "List of Office Users Requesting Accounts",
        "operationId": "indexRequestedOfficeUsers",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUsers"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Office User not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/requested-office-users/{officeUserId}": {
      "get": {
        "description": "Retrieving a single office user in any status. This endpoint is used in the Admin UI that will allow the admin user to view the user's relevant data.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Requested office users"
        ],
        "summary": "Get a Requested Office User",
        "operationId": "getRequestedOfficeUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "officeUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Office User not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "description": "Updates a requested office user to include profile data and status. This will be used in the Admin UI for approving/rejecting/updating a user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Requested office users"
        ],
        "summary": "Update a Requested Office User",
        "operationId": "updateRequestedOfficeUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "officeUserId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestedOfficeUserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Office User not found"
          },
          "422": {
            "description": "validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/uploads/{uploadId}": {
      "get": {
        "description": "This endpoint returns a single Upload by ID containing the given Upload and\ninformation about the Uploader and Move. Do not use this endpoint directly as it\nis meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Uploads"
        ],
        "summary": "Get information about an Upload",
        "operationId": "getUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "uploadId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/UploadInformation"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Upload not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "This endpoint returns a list of Users. Do not use this endpoint directly as it\nis meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "List Users",
        "operationId": "indexUsers",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Users"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Users not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "description": "This endpoint returns a single User by ID. This also returns the User's sessions\nas well. Do not use this endpoint directly as it is meant to be used with the\nAdmin UI exclusively.\n\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get information about a User",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a single User by ID. This can be used by the Admin User to\nupdate the User's session or the User's active status. Do not use this endpoint\ndirectly as it is meant to be used with the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update a User's session or active status",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "User information",
            "name": "User",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update this User"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/webhook-subscriptions": {
      "get": {
        "description": "This endpoint returns a list of Webhook Subscriptions. Do not use this endpoint\ndirectly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Webhook subscriptions"
        ],
        "summary": "Lists Webhook Subscriptions",
        "operationId": "indexWebhookSubscriptions",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/WebhookSubscriptions"
            },
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Used for pagination"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not authenticated for this endpoint"
          },
          "404": {
            "description": "Webhook Subscriptions not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "description": "This endpoint creates a Webhook Subscription and returns the created record in\nthe ` + "`" + `201` + "`" + ` response. Do not use this endpoint directly as it is meant to be used\nwith the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Webhook subscriptions"
        ],
        "summary": "Create a Webhook Subscription",
        "operationId": "createWebhookSubscription",
        "parameters": [
          {
            "description": "Webhook subscription information",
            "name": "webhookSubscription",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateWebhookSubscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created Webhook Subscription",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to create a Webhook Subscription"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/webhook-subscriptions/{webhookSubscriptionId}": {
      "get": {
        "description": "This endpoint returns a single Webhook Subscription by ID. Do not use this\nendpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Webhook subscriptions"
        ],
        "summary": "Get information about a Webhook Subscription",
        "operationId": "getWebhookSubscription",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "webhookSubscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "404": {
            "description": "Webhook Subscription not found"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a single Webhook Subscription by ID. Do not use this\nendpoint directly as it is meant to be used with the Admin UI exclusively.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Webhook subscriptions"
        ],
        "summary": "Update a Webhook Subscription",
        "operationId": "updateWebhookSubscription",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "webhookSubscriptionId",
            "in": "path",
            "required": true
          },
          {
            "description": "Webhook Subscription information",
            "name": "WebhookSubscription",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Webhook Subscription",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Must be authenticated to use this end point"
          },
          "403": {
            "description": "Not authorized to update this Webhook Subscription"
          },
          "404": {
            "description": "Webhook Subscription not found"
          },
          "412": {
            "description": "Precondition failed"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "required": [
        "streetAddress1",
        "state",
        "city",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "county": {
          "type": "string",
          "title": "County",
          "x-nullable": true,
          "example": "LOS ANGELES"
        },
        "postalCode": {
          "description": "zip code, international allowed",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "example": "'90210' or 'N15 3NL'"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Address line 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Address line 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "AdminUser": {
      "type": "object",
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "userId",
        "organizationId",
        "active",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string",
          "format": "uuid"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "AdminUserCreate": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Email",
          "example": "user@userdomain.com"
        },
        "firstName": {
          "type": "string",
          "title": "First Name"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name"
        },
        "organizationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "AdminUserUpdate": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        }
      }
    },
    "AdminUsers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AdminUser"
      }
    },
    "ClientCertificate": {
      "type": "object",
      "properties": {
        "allowAirForceOrdersRead": {
          "type": "boolean"
        },
        "allowAirForceOrdersWrite": {
          "type": "boolean"
        },
        "allowArmyOrdersRead": {
          "type": "boolean"
        },
        "allowArmyOrdersWrite": {
          "type": "boolean"
        },
        "allowCoastGuardOrdersRead": {
          "type": "boolean"
        },
        "allowCoastGuardOrdersWrite": {
          "type": "boolean"
        },
        "allowDpsAuthAPI": {
          "type": "boolean"
        },
        "allowMarineCorpsOrdersRead": {
          "type": "boolean"
        },
        "allowMarineCorpsOrdersWrite": {
          "type": "boolean"
        },
        "allowNavyOrdersRead": {
          "type": "boolean"
        },
        "allowNavyOrdersWrite": {
          "type": "boolean"
        },
        "allowOrdersAPI": {
          "type": "boolean"
        },
        "allowPrime": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "sha256Digest": {
          "type": "string",
          "example": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
        },
        "subject": {
          "type": "string",
          "example": "CN=example-user,OU=DoD+OU=PKI+OU=CONTRACTOR,O=U.S. Government,C=US"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ClientCertificateCreate": {
      "type": "object",
      "required": [
        "sha256Digest",
        "subject",
        "email"
      ],
      "properties": {
        "allowAirForceOrdersRead": {
          "type": "boolean"
        },
        "allowAirForceOrdersWrite": {
          "type": "boolean"
        },
        "allowArmyOrdersRead": {
          "type": "boolean"
        },
        "allowArmyOrdersWrite": {
          "type": "boolean"
        },
        "allowCoastGuardOrdersRead": {
          "type": "boolean"
        },
        "allowCoastGuardOrdersWrite": {
          "type": "boolean"
        },
        "allowMarineCorpsOrdersRead": {
          "type": "boolean"
        },
        "allowMarineCorpsOrdersWrite": {
          "type": "boolean"
        },
        "allowNavyOrdersRead": {
          "type": "boolean"
        },
        "allowNavyOrdersWrite": {
          "type": "boolean"
        },
        "allowOrdersAPI": {
          "type": "boolean"
        },
        "allowPrime": {
          "type": "boolean"
        },
        "email": {
          "type": "string",
          "example": "user@example.com"
        },
        "sha256Digest": {
          "type": "string",
          "example": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
        },
        "subject": {
          "type": "string",
          "example": "CN=example-user,OU=DoD+OU=PKI+OU=CONTRACTOR,O=U.S. Government,C=US"
        }
      }
    },
    "ClientCertificateUpdate": {
      "type": "object",
      "properties": {
        "allowAirForceOrdersRead": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowAirForceOrdersWrite": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowArmyOrdersRead": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowArmyOrdersWrite": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowCoastGuardOrdersRead": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowCoastGuardOrdersWrite": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowDpsAuthAPI": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowMarineCorpsOrdersRead": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowMarineCorpsOrdersWrite": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowNavyOrdersRead": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowNavyOrdersWrite": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowOrdersAPI": {
          "type": "boolean",
          "x-nullable": true
        },
        "allowPrime": {
          "type": "boolean",
          "x-nullable": true
        },
        "sha256Digest": {
          "type": "string",
          "example": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
        },
        "subject": {
          "type": "string",
          "example": "CN=example-user,OU=DoD+OU=PKI+OU=CONTRACTOR,O=U.S. Government,C=US"
        }
      }
    },
    "ClientCertificates": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ClientCertificate"
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateWebhookSubscription": {
      "type": "object",
      "required": [
        "subscriberId",
        "status",
        "eventKey",
        "callbackUrl"
      ],
      "properties": {
        "callbackUrl": {
          "description": "The URL to which the notifications for this subscription will be pushed to.",
          "type": "string"
        },
        "eventKey": {
          "description": "A string used to represent which events this subscriber expects to be notified about. Corresponds to the possible event_key values in webhook_notifications.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/WebhookSubscriptionStatus"
        },
        "subscriberId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ElectronicOrder": {
      "type": "object",
      "required": [
        "id",
        "issuer",
        "ordersNumber",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Created at",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "issuer": {
          "$ref": "#/definitions/Issuer"
        },
        "ordersNumber": {
          "type": "string",
          "title": "Orders Number"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Updated at",
          "readOnly": true
        }
      }
    },
    "ElectronicOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ElectronicOrder"
      }
    },
    "ElectronicOrdersTotal": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "title": "Total Orders Count",
          "minimum": 0
        }
      }
    },
    "ElectronicOrdersTotals": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ElectronicOrdersTotal"
      }
    },
    "Issuer": {
      "description": "Organization that issues orders. If more organizations, especially civilian ones, become clients of this API in the future, this enumeration may need to be expanded.",
      "type": "string",
      "enum": [
        "army",
        "navy",
        "air-force",
        "marine-corps",
        "coast-guard"
      ]
    },
    "Move": {
      "type": "object",
      "required": [
        "id",
        "ordersId",
        "locator",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "ordersId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "serviceMember": {
          "$ref": "#/definitions/ServiceMember"
        },
        "show": {
          "type": "boolean",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MoveStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "MoveUpdate": {
      "type": "object",
      "required": [
        "show"
      ],
      "properties": {
        "show": {
          "type": "boolean"
        }
      }
    },
    "Moves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Move"
      }
    },
    "Notification": {
      "type": "object",
      "required": [
        "id",
        "email",
        "serviceMemberId",
        "sesMessageId",
        "notificationType",
        "createdAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "notificationType": {
          "type": "string",
          "enum": [
            "MOVE_PAYMENT_REMINDER_EMAIL"
          ]
        },
        "serviceMemberId": {
          "type": "string",
          "format": "uuid"
        },
        "sesMessageId": {
          "type": "string"
        }
      }
    },
    "Notifications": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Notification"
      }
    },
    "OfficeUser": {
      "type": "object",
      "required": [
        "id",
        "firstName",
        "middleInitials",
        "lastName",
        "email",
        "telephone",
        "transportationOfficeId",
        "active",
        "roles",
        "edipi",
        "otherUniqueId",
        "rejectionReason",
        "status",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "edipi": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string"
        },
        "middleInitials": {
          "type": "string"
        },
        "otherUniqueId": {
          "type": "string"
        },
        "privileges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Privilege"
          }
        },
        "rejectionReason": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "REQUESTED",
            "REJECTED"
          ]
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "OfficeUserCreate": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Email",
          "example": "user@userdomain.com"
        },
        "firstName": {
          "type": "string",
          "title": "First Name"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name"
        },
        "middleInitials": {
          "type": "string",
          "title": "Middle Initials",
          "x-nullable": true,
          "example": "L."
        },
        "privileges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserPrivilege"
          },
          "x-nullable": true
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserRole"
          }
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "example": "212-555-5555"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OfficeUserPrivilege": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "x-nullable": true,
          "example": "Supervisor"
        },
        "privilegeType": {
          "type": "string",
          "title": "privilegeType",
          "x-nullable": true,
          "example": "supervisor"
        }
      }
    },
    "OfficeUserRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "x-nullable": true,
          "example": "Transportation Ordering Officer"
        },
        "roleType": {
          "type": "string",
          "title": "roleType",
          "x-nullable": true,
          "example": "transportation_ordering_officer"
        }
      }
    },
    "OfficeUserUpdate": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        },
        "middleInitials": {
          "type": "string",
          "title": "Middle Initials",
          "x-nullable": true,
          "example": "Q."
        },
        "privileges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserPrivilege"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserRole"
          }
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OfficeUsers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/OfficeUser"
      }
    },
    "OktaAccountInfoResponse": {
      "type": "object",
      "properties": {
        "activated": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "credentials": {
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "profile": {
          "type": "object"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "Organization": {
      "type": "object",
      "required": [
        "id",
        "name",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Created at",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "title": "Name"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Updated at",
          "readOnly": true
        }
      }
    },
    "Organizations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Organization"
      }
    },
    "Privilege": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4780-65aa-42ec-a945-5fd87dec0538"
        },
        "privilegeName": {
          "type": "string",
          "example": "Supervisor"
        },
        "privilegeType": {
          "type": "string",
          "example": "supervisor"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "RequestedOfficeUserUpdate": {
      "type": "object",
      "properties": {
        "edipi": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "example": "user@userdomain.com"
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        },
        "middleInitials": {
          "type": "string",
          "title": "Middle Initials",
          "x-nullable": true,
          "example": "Q."
        },
        "otherUniqueId": {
          "type": "string"
        },
        "rejectionReason": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserRole"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "REJECTED"
          ]
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "Role": {
      "type": "object",
      "required": [
        "id",
        "roleType",
        "roleName",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "roleName": {
          "type": "string",
          "example": "Transportation Ordering Officer"
        },
        "roleType": {
          "type": "string",
          "example": "customer"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ServiceMember": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": true
        },
        "middleName": {
          "type": "string",
          "title": "Middle Name",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "TransportationOffice": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "gbloc": {
          "type": "string",
          "pattern": "^[A-Z]{4}$",
          "example": "JENQ"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "example": 29.382973
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "example": -98.62759
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "phoneLines": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "telephone",
            "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
            "example": "212-555-5555"
          }
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "TransportationOffices": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransportationOffice"
      }
    },
    "Upload": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "enum": [
            "application/pdf",
            "image/jpeg",
            "image/png"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Created at",
          "readOnly": true
        },
        "filename": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "title": "Size in Bytes"
        }
      }
    },
    "UploadInformation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moveLocator": {
          "type": "string",
          "x-nullable": true,
          "example": "12432"
        },
        "officeUserEmail": {
          "type": "string",
          "x-nullable": true
        },
        "officeUserFirstName": {
          "type": "string",
          "x-nullable": true
        },
        "officeUserId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "officeUserLastName": {
          "type": "string",
          "x-nullable": true
        },
        "officeUserPhone": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberEmail": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberFirstName": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "serviceMemberLastName": {
          "type": "string",
          "x-nullable": true
        },
        "serviceMemberPhone": {
          "type": "string",
          "x-nullable": true
        },
        "upload": {
          "$ref": "#/definitions/Upload"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "oktaEmail",
        "active",
        "createdAt",
        "updatedAt",
        "currentAdminSessionId",
        "currentMilSessionId",
        "currentOfficeSessionId"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "currentAdminSessionId": {
          "type": "string",
          "example": "WiPgsPj-jPySR1d0dpmvIZ-HvZqemjmaQWxGQ6B8K_w"
        },
        "currentMilSessionId": {
          "type": "string",
          "example": "WiPgsPj-jPySR1d0dpmvIZ-HvZqemjmaQWxGQ6B8K_w"
        },
        "currentOfficeSessionId": {
          "type": "string",
          "example": "WiPgsPj-jPySR1d0dpmvIZ-HvZqemjmaQWxGQ6B8K_w"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "oktaEmail": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "UserUpdate": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-nullable": true
        },
        "revokeAdminSession": {
          "type": "boolean",
          "x-nullable": true
        },
        "revokeMilSession": {
          "type": "boolean",
          "x-nullable": true
        },
        "revokeOfficeSession": {
          "type": "boolean",
          "x-nullable": true
        }
      }
    },
    "Users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "ValidationError": {
      "required": [
        "invalidFields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "$ref": "#/definitions/ValidationErrorAllOf1"
        }
      ],
      "properties": {
        "invalidFields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ValidationErrorAllOf1": {
      "type": "object"
    },
    "WebhookSubscription": {
      "description": "Represents subscribers who expect certain notifications to be pushed to their servers. Used for the Prime and Prime-related events specifically.",
      "type": "object",
      "properties": {
        "callbackUrl": {
          "description": "The URL to which the notifications for this subscription will be pushed to.",
          "type": "string",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "eventKey": {
          "description": "A string used to represent which events this subscriber expects to be notified about. Corresponds to the possible event_key values in webhook_notifications.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "severity": {
          "type": "integer",
          "minimum": 0,
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/WebhookSubscriptionStatus"
        },
        "subscriberId": {
          "description": "Unique identifier for the subscriber",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "d494f114-05a2-4b39-840c-3d33243b7e29"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "WebhookSubscriptionStatus": {
      "type": "string",
      "title": "Webhook subscription status",
      "enum": [
        "ACTIVE",
        "FAILING",
        "DISABLED"
      ],
      "x-display-value": {
        "ACTIVE": "Active",
        "DISABLED": "Disabled",
        "FAILING": "Failing"
      },
      "x-nullable": true
    },
    "WebhookSubscriptions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/WebhookSubscription"
      }
    }
  },
  "tags": [
    {
      "description": "Information about Admin UI users",
      "name": "Admin users",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about Client Certificates",
      "name": "Client certificates",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about electronic orders",
      "name": "Electronic orders",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about moves",
      "name": "Moves",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about notifications",
      "name": "Notifications",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about transportation offices",
      "name": "Transportation offices",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about office users",
      "name": "Office users",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about organizations",
      "name": "Organizations",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about uploads",
      "name": "Uploads",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about requested office users",
      "name": "Requested Office Users",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about users",
      "name": "Users",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    },
    {
      "description": "Information about Webhook subscriptions",
      "name": "Webhook subscriptions",
      "externalDocs": {
        "url": "https://transcom.github.io/mymove-docs/docs/api"
      }
    }
  ]
}`))
}
