// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetLoggedInAdminUserHandlerFunc turns a function with the right signature into a get logged in admin user handler
type GetLoggedInAdminUserHandlerFunc func(GetLoggedInAdminUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLoggedInAdminUserHandlerFunc) Handle(params GetLoggedInAdminUserParams) middleware.Responder {
	return fn(params)
}

// GetLoggedInAdminUserHandler interface for that can handle valid get logged in admin user params
type GetLoggedInAdminUserHandler interface {
	Handle(GetLoggedInAdminUserParams) middleware.Responder
}

// NewGetLoggedInAdminUser creates a new http.Handler for the get logged in admin user operation
func NewGetLoggedInAdminUser(ctx *middleware.Context, handler GetLoggedInAdminUserHandler) *GetLoggedInAdminUser {
	return &GetLoggedInAdminUser{Context: ctx, Handler: handler}
}

/*
	GetLoggedInAdminUser swagger:route GET /user User getLoggedInAdminUser

# Gets the data about the currently signed in admin user

Returns the admin user info for the currently logged in user
*/
type GetLoggedInAdminUser struct {
	Context *middleware.Context
	Handler GetLoggedInAdminUserHandler
}

func (o *GetLoggedInAdminUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetLoggedInAdminUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
