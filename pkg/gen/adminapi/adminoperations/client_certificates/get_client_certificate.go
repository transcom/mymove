// Code generated by go-swagger; DO NOT EDIT.

package client_certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetClientCertificateHandlerFunc turns a function with the right signature into a get client certificate handler
type GetClientCertificateHandlerFunc func(GetClientCertificateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetClientCertificateHandlerFunc) Handle(params GetClientCertificateParams) middleware.Responder {
	return fn(params)
}

// GetClientCertificateHandler interface for that can handle valid get client certificate params
type GetClientCertificateHandler interface {
	Handle(GetClientCertificateParams) middleware.Responder
}

// NewGetClientCertificate creates a new http.Handler for the get client certificate operation
func NewGetClientCertificate(ctx *middleware.Context, handler GetClientCertificateHandler) *GetClientCertificate {
	return &GetClientCertificate{Context: ctx, Handler: handler}
}

/*
	GetClientCertificate swagger:route GET /client-certificates/{clientCertificateId} Client certificates getClientCertificate

# Get a client certificate

This endpoint returns a single Client Certificate by ID. Do not use
this endpoint directly as it is meant to be used with the Admin UI
exclusively.
*/
type GetClientCertificate struct {
	Context *middleware.Context
	Handler GetClientCertificateHandler
}

func (o *GetClientCertificate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetClientCertificateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
