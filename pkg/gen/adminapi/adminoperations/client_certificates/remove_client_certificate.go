// Code generated by go-swagger; DO NOT EDIT.

package client_certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RemoveClientCertificateHandlerFunc turns a function with the right signature into a remove client certificate handler
type RemoveClientCertificateHandlerFunc func(RemoveClientCertificateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveClientCertificateHandlerFunc) Handle(params RemoveClientCertificateParams) middleware.Responder {
	return fn(params)
}

// RemoveClientCertificateHandler interface for that can handle valid remove client certificate params
type RemoveClientCertificateHandler interface {
	Handle(RemoveClientCertificateParams) middleware.Responder
}

// NewRemoveClientCertificate creates a new http.Handler for the remove client certificate operation
func NewRemoveClientCertificate(ctx *middleware.Context, handler RemoveClientCertificateHandler) *RemoveClientCertificate {
	return &RemoveClientCertificate{Context: ctx, Handler: handler}
}

/*
	RemoveClientCertificate swagger:route DELETE /client-certificates/{clientCertificateId} Client certificates removeClientCertificate

removes a client certificate

This endpoint removes a single Client Certificate by ID. Do not use
this endpoint directly as it is meant to be used with the Admin UI
exclusively.
*/
type RemoveClientCertificate struct {
	Context *middleware.Context
	Handler RemoveClientCertificateHandler
}

func (o *RemoveClientCertificate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRemoveClientCertificateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
