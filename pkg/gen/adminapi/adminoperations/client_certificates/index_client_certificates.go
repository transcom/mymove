// Code generated by go-swagger; DO NOT EDIT.

package client_certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IndexClientCertificatesHandlerFunc turns a function with the right signature into a index client certificates handler
type IndexClientCertificatesHandlerFunc func(IndexClientCertificatesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IndexClientCertificatesHandlerFunc) Handle(params IndexClientCertificatesParams) middleware.Responder {
	return fn(params)
}

// IndexClientCertificatesHandler interface for that can handle valid index client certificates params
type IndexClientCertificatesHandler interface {
	Handle(IndexClientCertificatesParams) middleware.Responder
}

// NewIndexClientCertificates creates a new http.Handler for the index client certificates operation
func NewIndexClientCertificates(ctx *middleware.Context, handler IndexClientCertificatesHandler) *IndexClientCertificates {
	return &IndexClientCertificates{Context: ctx, Handler: handler}
}

/*
	IndexClientCertificates swagger:route GET /client-certificates Client certificates indexClientCertificates

# List client certificates

This endpoint returns a list of Client Certificates. Do not use this
endpoint directly as it is meant to be used with the Admin UI
exclusively.
*/
type IndexClientCertificates struct {
	Context *middleware.Context
	Handler IndexClientCertificatesHandler
}

func (o *IndexClientCertificates) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIndexClientCertificatesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
