// Code generated by go-swagger; DO NOT EDIT.

package transportation_offices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetOfficeByIDHandlerFunc turns a function with the right signature into a get office by Id handler
type GetOfficeByIDHandlerFunc func(GetOfficeByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOfficeByIDHandlerFunc) Handle(params GetOfficeByIDParams) middleware.Responder {
	return fn(params)
}

// GetOfficeByIDHandler interface for that can handle valid get office by Id params
type GetOfficeByIDHandler interface {
	Handle(GetOfficeByIDParams) middleware.Responder
}

// NewGetOfficeByID creates a new http.Handler for the get office by Id operation
func NewGetOfficeByID(ctx *middleware.Context, handler GetOfficeByIDHandler) *GetOfficeByID {
	return &GetOfficeByID{Context: ctx, Handler: handler}
}

/*
	GetOfficeByID swagger:route GET /offices/{officeId} Transportation offices getOfficeById

# Get Transportation Office by ID

This endpoint returns a list of Transportation Offices. Do not use this endpoint
directly as it is meant to be used with the Admin UI exclusively.
*/
type GetOfficeByID struct {
	Context *middleware.Context
	Handler GetOfficeByIDHandler
}

func (o *GetOfficeByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetOfficeByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
