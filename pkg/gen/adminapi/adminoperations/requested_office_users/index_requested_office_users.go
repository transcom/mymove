// Code generated by go-swagger; DO NOT EDIT.

package requested_office_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IndexRequestedOfficeUsersHandlerFunc turns a function with the right signature into a index requested office users handler
type IndexRequestedOfficeUsersHandlerFunc func(IndexRequestedOfficeUsersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IndexRequestedOfficeUsersHandlerFunc) Handle(params IndexRequestedOfficeUsersParams) middleware.Responder {
	return fn(params)
}

// IndexRequestedOfficeUsersHandler interface for that can handle valid index requested office users params
type IndexRequestedOfficeUsersHandler interface {
	Handle(IndexRequestedOfficeUsersParams) middleware.Responder
}

// NewIndexRequestedOfficeUsers creates a new http.Handler for the index requested office users operation
func NewIndexRequestedOfficeUsers(ctx *middleware.Context, handler IndexRequestedOfficeUsersHandler) *IndexRequestedOfficeUsers {
	return &IndexRequestedOfficeUsers{Context: ctx, Handler: handler}
}

/*
	IndexRequestedOfficeUsers swagger:route GET /requested-office-users Requested Office users indexRequestedOfficeUsers

# List of Office Users Requesting Accounts

This endpoint returns a list of Office Users. Do not use this endpoint directly
as it is meant to be used with the Admin UI exclusively.
*/
type IndexRequestedOfficeUsers struct {
	Context *middleware.Context
	Handler IndexRequestedOfficeUsersHandler
}

func (o *IndexRequestedOfficeUsers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIndexRequestedOfficeUsersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
