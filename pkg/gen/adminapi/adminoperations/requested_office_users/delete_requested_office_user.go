// Code generated by go-swagger; DO NOT EDIT.

package requested_office_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteRequestedOfficeUserHandlerFunc turns a function with the right signature into a delete requested office user handler
type DeleteRequestedOfficeUserHandlerFunc func(DeleteRequestedOfficeUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteRequestedOfficeUserHandlerFunc) Handle(params DeleteRequestedOfficeUserParams) middleware.Responder {
	return fn(params)
}

// DeleteRequestedOfficeUserHandler interface for that can handle valid delete requested office user params
type DeleteRequestedOfficeUserHandler interface {
	Handle(DeleteRequestedOfficeUserParams) middleware.Responder
}

// NewDeleteRequestedOfficeUser creates a new http.Handler for the delete requested office user operation
func NewDeleteRequestedOfficeUser(ctx *middleware.Context, handler DeleteRequestedOfficeUserHandler) *DeleteRequestedOfficeUser {
	return &DeleteRequestedOfficeUser{Context: ctx, Handler: handler}
}

/*
	DeleteRequestedOfficeUser swagger:route DELETE /requested-office-users/{officeUserId} Requested office users deleteRequestedOfficeUser

# Deletes a Requested Office User

Deletes a single office user in a REQUESTED. This endpoint is used in the Admin UI that will allow the admin user to delete a requested office user.
*/
type DeleteRequestedOfficeUser struct {
	Context *middleware.Context
	Handler DeleteRequestedOfficeUserHandler
}

func (o *DeleteRequestedOfficeUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteRequestedOfficeUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
