// Code generated by go-swagger; DO NOT EDIT.

package requested_office_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetRequestedOfficeUserHandlerFunc turns a function with the right signature into a get requested office user handler
type GetRequestedOfficeUserHandlerFunc func(GetRequestedOfficeUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRequestedOfficeUserHandlerFunc) Handle(params GetRequestedOfficeUserParams) middleware.Responder {
	return fn(params)
}

// GetRequestedOfficeUserHandler interface for that can handle valid get requested office user params
type GetRequestedOfficeUserHandler interface {
	Handle(GetRequestedOfficeUserParams) middleware.Responder
}

// NewGetRequestedOfficeUser creates a new http.Handler for the get requested office user operation
func NewGetRequestedOfficeUser(ctx *middleware.Context, handler GetRequestedOfficeUserHandler) *GetRequestedOfficeUser {
	return &GetRequestedOfficeUser{Context: ctx, Handler: handler}
}

/*
	GetRequestedOfficeUser swagger:route GET /requested-office-users/{officeUserId} Requested office users getRequestedOfficeUser

# Get a Requested Office User

Retrieving a single office user that is in a REQUESTED status
*/
type GetRequestedOfficeUser struct {
	Context *middleware.Context
	Handler GetRequestedOfficeUserHandler
}

func (o *GetRequestedOfficeUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetRequestedOfficeUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
