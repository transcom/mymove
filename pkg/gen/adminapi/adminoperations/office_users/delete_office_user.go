// Code generated by go-swagger; DO NOT EDIT.

package office_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteOfficeUserHandlerFunc turns a function with the right signature into a delete office user handler
type DeleteOfficeUserHandlerFunc func(DeleteOfficeUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteOfficeUserHandlerFunc) Handle(params DeleteOfficeUserParams) middleware.Responder {
	return fn(params)
}

// DeleteOfficeUserHandler interface for that can handle valid delete office user params
type DeleteOfficeUserHandler interface {
	Handle(DeleteOfficeUserParams) middleware.Responder
}

// NewDeleteOfficeUser creates a new http.Handler for the delete office user operation
func NewDeleteOfficeUser(ctx *middleware.Context, handler DeleteOfficeUserHandler) *DeleteOfficeUser {
	return &DeleteOfficeUser{Context: ctx, Handler: handler}
}

/*
	DeleteOfficeUser swagger:route DELETE /office-users/{officeUserId} Office users deleteOfficeUser

# Deletes an Office User

Deletes a single office user in any status. This endpoint is used in the Admin UI that will allow the admin user to delete an office user.
*/
type DeleteOfficeUser struct {
	Context *middleware.Context
	Handler DeleteOfficeUserHandler
}

func (o *DeleteOfficeUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteOfficeUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
