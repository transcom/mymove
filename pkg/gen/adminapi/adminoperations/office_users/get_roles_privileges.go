// Code generated by go-swagger; DO NOT EDIT.

package office_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetRolesPrivilegesHandlerFunc turns a function with the right signature into a get roles privileges handler
type GetRolesPrivilegesHandlerFunc func(GetRolesPrivilegesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRolesPrivilegesHandlerFunc) Handle(params GetRolesPrivilegesParams) middleware.Responder {
	return fn(params)
}

// GetRolesPrivilegesHandler interface for that can handle valid get roles privileges params
type GetRolesPrivilegesHandler interface {
	Handle(GetRolesPrivilegesParams) middleware.Responder
}

// NewGetRolesPrivileges creates a new http.Handler for the get roles privileges operation
func NewGetRolesPrivileges(ctx *middleware.Context, handler GetRolesPrivilegesHandler) *GetRolesPrivileges {
	return &GetRolesPrivileges{Context: ctx, Handler: handler}
}

/*
	GetRolesPrivileges swagger:route GET /office-users/roles-privileges Office users getRolesPrivileges

Retrieve a list of unique role to privilege mappings.

This endpoint returns a list of unique role to privilege mappings. Do not use this
endpoint directly as it is meant to be used with the Admin UI exclusively.
*/
type GetRolesPrivileges struct {
	Context *middleware.Context
	Handler GetRolesPrivilegesHandler
}

func (o *GetRolesPrivileges) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetRolesPrivilegesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
