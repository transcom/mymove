// Code generated by go-swagger; DO NOT EDIT.

package office_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateOfficeUserHandlerFunc turns a function with the right signature into a update office user handler
type UpdateOfficeUserHandlerFunc func(UpdateOfficeUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateOfficeUserHandlerFunc) Handle(params UpdateOfficeUserParams) middleware.Responder {
	return fn(params)
}

// UpdateOfficeUserHandler interface for that can handle valid update office user params
type UpdateOfficeUserHandler interface {
	Handle(UpdateOfficeUserParams) middleware.Responder
}

// NewUpdateOfficeUser creates a new http.Handler for the update office user operation
func NewUpdateOfficeUser(ctx *middleware.Context, handler UpdateOfficeUserHandler) *UpdateOfficeUser {
	return &UpdateOfficeUser{Context: ctx, Handler: handler}
}

/*
	UpdateOfficeUser swagger:route PATCH /office-users/{officeUserId} Office users updateOfficeUser

# Updates an Office User

This endpoint updates a single Office User by ID. Do not use this
endpoint directly as it is meant to be used with the Admin UI exclusively.
*/
type UpdateOfficeUser struct {
	Context *middleware.Context
	Handler UpdateOfficeUserHandler
}

func (o *UpdateOfficeUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateOfficeUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
