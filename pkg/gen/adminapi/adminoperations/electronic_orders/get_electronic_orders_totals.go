// Code generated by go-swagger; DO NOT EDIT.

package electronic_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetElectronicOrdersTotalsHandlerFunc turns a function with the right signature into a get electronic orders totals handler
type GetElectronicOrdersTotalsHandlerFunc func(GetElectronicOrdersTotalsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetElectronicOrdersTotalsHandlerFunc) Handle(params GetElectronicOrdersTotalsParams) middleware.Responder {
	return fn(params)
}

// GetElectronicOrdersTotalsHandler interface for that can handle valid get electronic orders totals params
type GetElectronicOrdersTotalsHandler interface {
	Handle(GetElectronicOrdersTotalsParams) middleware.Responder
}

// NewGetElectronicOrdersTotals creates a new http.Handler for the get electronic orders totals operation
func NewGetElectronicOrdersTotals(ctx *middleware.Context, handler GetElectronicOrdersTotalsHandler) *GetElectronicOrdersTotals {
	return &GetElectronicOrdersTotals{Context: ctx, Handler: handler}
}

/*
	GetElectronicOrdersTotals swagger:route GET /electronic-orders/totals Electronic orders getElectronicOrdersTotals

# Get total counts for the orders stored in MilMove

This endpoint returns a list of record counts for Electronic Orders. Do not use
this endpoint directly as it is meant to be used with the Admin UI exclusively.
*/
type GetElectronicOrdersTotals struct {
	Context *middleware.Context
	Handler GetElectronicOrdersTotalsHandler
}

func (o *GetElectronicOrdersTotals) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetElectronicOrdersTotalsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
