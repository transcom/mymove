// Code generated by go-swagger; DO NOT EDIT.

package uploads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUploadHandlerFunc turns a function with the right signature into a get upload handler
type GetUploadHandlerFunc func(GetUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUploadHandlerFunc) Handle(params GetUploadParams) middleware.Responder {
	return fn(params)
}

// GetUploadHandler interface for that can handle valid get upload params
type GetUploadHandler interface {
	Handle(GetUploadParams) middleware.Responder
}

// NewGetUpload creates a new http.Handler for the get upload operation
func NewGetUpload(ctx *middleware.Context, handler GetUploadHandler) *GetUpload {
	return &GetUpload{Context: ctx, Handler: handler}
}

/*
	GetUpload swagger:route GET /uploads/{uploadId} Uploads getUpload

# Get information about an Upload

This endpoint returns a single Upload by ID containing the given Upload and
information about the Uploader and Move. Do not use this endpoint directly as it
is meant to be used with the Admin UI exclusively.
*/
type GetUpload struct {
	Context *middleware.Context
	Handler GetUploadHandler
}

func (o *GetUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUploadParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
