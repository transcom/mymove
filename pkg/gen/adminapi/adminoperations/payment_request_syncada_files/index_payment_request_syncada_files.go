// Code generated by go-swagger; DO NOT EDIT.

package payment_request_syncada_files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IndexPaymentRequestSyncadaFilesHandlerFunc turns a function with the right signature into a index payment request syncada files handler
type IndexPaymentRequestSyncadaFilesHandlerFunc func(IndexPaymentRequestSyncadaFilesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IndexPaymentRequestSyncadaFilesHandlerFunc) Handle(params IndexPaymentRequestSyncadaFilesParams) middleware.Responder {
	return fn(params)
}

// IndexPaymentRequestSyncadaFilesHandler interface for that can handle valid index payment request syncada files params
type IndexPaymentRequestSyncadaFilesHandler interface {
	Handle(IndexPaymentRequestSyncadaFilesParams) middleware.Responder
}

// NewIndexPaymentRequestSyncadaFiles creates a new http.Handler for the index payment request syncada files operation
func NewIndexPaymentRequestSyncadaFiles(ctx *middleware.Context, handler IndexPaymentRequestSyncadaFilesHandler) *IndexPaymentRequestSyncadaFiles {
	return &IndexPaymentRequestSyncadaFiles{Context: ctx, Handler: handler}
}

/*
	IndexPaymentRequestSyncadaFiles swagger:route GET /payment-request-syncada-files Payment Request Syncada Files indexPaymentRequestSyncadaFiles

# List Payment Request EDI Files

Returns a list of Payment Request EDI files
*/
type IndexPaymentRequestSyncadaFiles struct {
	Context *middleware.Context
	Handler IndexPaymentRequestSyncadaFilesHandler
}

func (o *IndexPaymentRequestSyncadaFiles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIndexPaymentRequestSyncadaFilesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
