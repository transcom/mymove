// Code generated by go-swagger; DO NOT EDIT.

package webhook_subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetWebhookSubscriptionHandlerFunc turns a function with the right signature into a get webhook subscription handler
type GetWebhookSubscriptionHandlerFunc func(GetWebhookSubscriptionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWebhookSubscriptionHandlerFunc) Handle(params GetWebhookSubscriptionParams) middleware.Responder {
	return fn(params)
}

// GetWebhookSubscriptionHandler interface for that can handle valid get webhook subscription params
type GetWebhookSubscriptionHandler interface {
	Handle(GetWebhookSubscriptionParams) middleware.Responder
}

// NewGetWebhookSubscription creates a new http.Handler for the get webhook subscription operation
func NewGetWebhookSubscription(ctx *middleware.Context, handler GetWebhookSubscriptionHandler) *GetWebhookSubscription {
	return &GetWebhookSubscription{Context: ctx, Handler: handler}
}

/*
	GetWebhookSubscription swagger:route GET /webhook-subscriptions/{webhookSubscriptionId} Webhook subscriptions getWebhookSubscription

# Get information about a Webhook Subscription

This endpoint returns a single Webhook Subscription by ID. Do not use this
endpoint directly as it is meant to be used with the Admin UI exclusively.
*/
type GetWebhookSubscription struct {
	Context *middleware.Context
	Handler GetWebhookSubscriptionHandler
}

func (o *GetWebhookSubscription) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetWebhookSubscriptionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
