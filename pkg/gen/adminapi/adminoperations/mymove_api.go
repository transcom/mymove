// Code generated by go-swagger; DO NOT EDIT.

package adminoperations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/transcom/mymove/pkg/gen/adminapi/adminoperations/admin_users"
	"github.com/transcom/mymove/pkg/gen/adminapi/adminoperations/client_certificates"
	"github.com/transcom/mymove/pkg/gen/adminapi/adminoperations/electronic_orders"
	"github.com/transcom/mymove/pkg/gen/adminapi/adminoperations/moves"
	"github.com/transcom/mymove/pkg/gen/adminapi/adminoperations/notifications"
	"github.com/transcom/mymove/pkg/gen/adminapi/adminoperations/office_users"
	"github.com/transcom/mymove/pkg/gen/adminapi/adminoperations/organizations"
	"github.com/transcom/mymove/pkg/gen/adminapi/adminoperations/requested_office_users"
	"github.com/transcom/mymove/pkg/gen/adminapi/adminoperations/transportation_offices"
	"github.com/transcom/mymove/pkg/gen/adminapi/adminoperations/uploads"
	"github.com/transcom/mymove/pkg/gen/adminapi/adminoperations/users"
	"github.com/transcom/mymove/pkg/gen/adminapi/adminoperations/webhook_subscriptions"
)

// NewMymoveAPI creates a new Mymove instance
func NewMymoveAPI(spec *loads.Document) *MymoveAPI {
	return &MymoveAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		AdminUsersCreateAdminUserHandler: admin_users.CreateAdminUserHandlerFunc(func(params admin_users.CreateAdminUserParams) middleware.Responder {
			return middleware.NotImplemented("operation admin_users.CreateAdminUser has not yet been implemented")
		}),
		ClientCertificatesCreateClientCertificateHandler: client_certificates.CreateClientCertificateHandlerFunc(func(params client_certificates.CreateClientCertificateParams) middleware.Responder {
			return middleware.NotImplemented("operation client_certificates.CreateClientCertificate has not yet been implemented")
		}),
		OfficeUsersCreateOfficeUserHandler: office_users.CreateOfficeUserHandlerFunc(func(params office_users.CreateOfficeUserParams) middleware.Responder {
			return middleware.NotImplemented("operation office_users.CreateOfficeUser has not yet been implemented")
		}),
		WebhookSubscriptionsCreateWebhookSubscriptionHandler: webhook_subscriptions.CreateWebhookSubscriptionHandlerFunc(func(params webhook_subscriptions.CreateWebhookSubscriptionParams) middleware.Responder {
			return middleware.NotImplemented("operation webhook_subscriptions.CreateWebhookSubscription has not yet been implemented")
		}),
		AdminUsersGetAdminUserHandler: admin_users.GetAdminUserHandlerFunc(func(params admin_users.GetAdminUserParams) middleware.Responder {
			return middleware.NotImplemented("operation admin_users.GetAdminUser has not yet been implemented")
		}),
		ClientCertificatesGetClientCertificateHandler: client_certificates.GetClientCertificateHandlerFunc(func(params client_certificates.GetClientCertificateParams) middleware.Responder {
			return middleware.NotImplemented("operation client_certificates.GetClientCertificate has not yet been implemented")
		}),
		ElectronicOrdersGetElectronicOrdersTotalsHandler: electronic_orders.GetElectronicOrdersTotalsHandlerFunc(func(params electronic_orders.GetElectronicOrdersTotalsParams) middleware.Responder {
			return middleware.NotImplemented("operation electronic_orders.GetElectronicOrdersTotals has not yet been implemented")
		}),
		MovesGetMoveHandler: moves.GetMoveHandlerFunc(func(params moves.GetMoveParams) middleware.Responder {
			return middleware.NotImplemented("operation moves.GetMove has not yet been implemented")
		}),
		OfficeUsersGetOfficeUserHandler: office_users.GetOfficeUserHandlerFunc(func(params office_users.GetOfficeUserParams) middleware.Responder {
			return middleware.NotImplemented("operation office_users.GetOfficeUser has not yet been implemented")
		}),
		RequestedOfficeUsersGetRequestedOfficeUserHandler: requested_office_users.GetRequestedOfficeUserHandlerFunc(func(params requested_office_users.GetRequestedOfficeUserParams) middleware.Responder {
			return middleware.NotImplemented("operation requested_office_users.GetRequestedOfficeUser has not yet been implemented")
		}),
		UploadsGetUploadHandler: uploads.GetUploadHandlerFunc(func(params uploads.GetUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation uploads.GetUpload has not yet been implemented")
		}),
		UsersGetUserHandler: users.GetUserHandlerFunc(func(params users.GetUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.GetUser has not yet been implemented")
		}),
		WebhookSubscriptionsGetWebhookSubscriptionHandler: webhook_subscriptions.GetWebhookSubscriptionHandlerFunc(func(params webhook_subscriptions.GetWebhookSubscriptionParams) middleware.Responder {
			return middleware.NotImplemented("operation webhook_subscriptions.GetWebhookSubscription has not yet been implemented")
		}),
		AdminUsersIndexAdminUsersHandler: admin_users.IndexAdminUsersHandlerFunc(func(params admin_users.IndexAdminUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation admin_users.IndexAdminUsers has not yet been implemented")
		}),
		ClientCertificatesIndexClientCertificatesHandler: client_certificates.IndexClientCertificatesHandlerFunc(func(params client_certificates.IndexClientCertificatesParams) middleware.Responder {
			return middleware.NotImplemented("operation client_certificates.IndexClientCertificates has not yet been implemented")
		}),
		ElectronicOrdersIndexElectronicOrdersHandler: electronic_orders.IndexElectronicOrdersHandlerFunc(func(params electronic_orders.IndexElectronicOrdersParams) middleware.Responder {
			return middleware.NotImplemented("operation electronic_orders.IndexElectronicOrders has not yet been implemented")
		}),
		MovesIndexMovesHandler: moves.IndexMovesHandlerFunc(func(params moves.IndexMovesParams) middleware.Responder {
			return middleware.NotImplemented("operation moves.IndexMoves has not yet been implemented")
		}),
		NotificationsIndexNotificationsHandler: notifications.IndexNotificationsHandlerFunc(func(params notifications.IndexNotificationsParams) middleware.Responder {
			return middleware.NotImplemented("operation notifications.IndexNotifications has not yet been implemented")
		}),
		OfficeUsersIndexOfficeUsersHandler: office_users.IndexOfficeUsersHandlerFunc(func(params office_users.IndexOfficeUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation office_users.IndexOfficeUsers has not yet been implemented")
		}),
		TransportationOfficesIndexOfficesHandler: transportation_offices.IndexOfficesHandlerFunc(func(params transportation_offices.IndexOfficesParams) middleware.Responder {
			return middleware.NotImplemented("operation transportation_offices.IndexOffices has not yet been implemented")
		}),
		OrganizationsIndexOrganizationsHandler: organizations.IndexOrganizationsHandlerFunc(func(params organizations.IndexOrganizationsParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.IndexOrganizations has not yet been implemented")
		}),
		RequestedOfficeUsersIndexRequestedOfficeUsersHandler: requested_office_users.IndexRequestedOfficeUsersHandlerFunc(func(params requested_office_users.IndexRequestedOfficeUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation requested_office_users.IndexRequestedOfficeUsers has not yet been implemented")
		}),
		UsersIndexUsersHandler: users.IndexUsersHandlerFunc(func(params users.IndexUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation users.IndexUsers has not yet been implemented")
		}),
		WebhookSubscriptionsIndexWebhookSubscriptionsHandler: webhook_subscriptions.IndexWebhookSubscriptionsHandlerFunc(func(params webhook_subscriptions.IndexWebhookSubscriptionsParams) middleware.Responder {
			return middleware.NotImplemented("operation webhook_subscriptions.IndexWebhookSubscriptions has not yet been implemented")
		}),
		ClientCertificatesRemoveClientCertificateHandler: client_certificates.RemoveClientCertificateHandlerFunc(func(params client_certificates.RemoveClientCertificateParams) middleware.Responder {
			return middleware.NotImplemented("operation client_certificates.RemoveClientCertificate has not yet been implemented")
		}),
		AdminUsersUpdateAdminUserHandler: admin_users.UpdateAdminUserHandlerFunc(func(params admin_users.UpdateAdminUserParams) middleware.Responder {
			return middleware.NotImplemented("operation admin_users.UpdateAdminUser has not yet been implemented")
		}),
		ClientCertificatesUpdateClientCertificateHandler: client_certificates.UpdateClientCertificateHandlerFunc(func(params client_certificates.UpdateClientCertificateParams) middleware.Responder {
			return middleware.NotImplemented("operation client_certificates.UpdateClientCertificate has not yet been implemented")
		}),
		MovesUpdateMoveHandler: moves.UpdateMoveHandlerFunc(func(params moves.UpdateMoveParams) middleware.Responder {
			return middleware.NotImplemented("operation moves.UpdateMove has not yet been implemented")
		}),
		OfficeUsersUpdateOfficeUserHandler: office_users.UpdateOfficeUserHandlerFunc(func(params office_users.UpdateOfficeUserParams) middleware.Responder {
			return middleware.NotImplemented("operation office_users.UpdateOfficeUser has not yet been implemented")
		}),
		RequestedOfficeUsersUpdateRequestedOfficeUserHandler: requested_office_users.UpdateRequestedOfficeUserHandlerFunc(func(params requested_office_users.UpdateRequestedOfficeUserParams) middleware.Responder {
			return middleware.NotImplemented("operation requested_office_users.UpdateRequestedOfficeUser has not yet been implemented")
		}),
		UsersUpdateUserHandler: users.UpdateUserHandlerFunc(func(params users.UpdateUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.UpdateUser has not yet been implemented")
		}),
		WebhookSubscriptionsUpdateWebhookSubscriptionHandler: webhook_subscriptions.UpdateWebhookSubscriptionHandlerFunc(func(params webhook_subscriptions.UpdateWebhookSubscriptionParams) middleware.Responder {
			return middleware.NotImplemented("operation webhook_subscriptions.UpdateWebhookSubscription has not yet been implemented")
		}),
	}
}

/*
MymoveAPI The Admin API is a RESTful API that enables the Admin application for MilMove.

All endpoints are located under `/admin/v1`.
*/
type MymoveAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// AdminUsersCreateAdminUserHandler sets the operation handler for the create admin user operation
	AdminUsersCreateAdminUserHandler admin_users.CreateAdminUserHandler
	// ClientCertificatesCreateClientCertificateHandler sets the operation handler for the create client certificate operation
	ClientCertificatesCreateClientCertificateHandler client_certificates.CreateClientCertificateHandler
	// OfficeUsersCreateOfficeUserHandler sets the operation handler for the create office user operation
	OfficeUsersCreateOfficeUserHandler office_users.CreateOfficeUserHandler
	// WebhookSubscriptionsCreateWebhookSubscriptionHandler sets the operation handler for the create webhook subscription operation
	WebhookSubscriptionsCreateWebhookSubscriptionHandler webhook_subscriptions.CreateWebhookSubscriptionHandler
	// AdminUsersGetAdminUserHandler sets the operation handler for the get admin user operation
	AdminUsersGetAdminUserHandler admin_users.GetAdminUserHandler
	// ClientCertificatesGetClientCertificateHandler sets the operation handler for the get client certificate operation
	ClientCertificatesGetClientCertificateHandler client_certificates.GetClientCertificateHandler
	// ElectronicOrdersGetElectronicOrdersTotalsHandler sets the operation handler for the get electronic orders totals operation
	ElectronicOrdersGetElectronicOrdersTotalsHandler electronic_orders.GetElectronicOrdersTotalsHandler
	// MovesGetMoveHandler sets the operation handler for the get move operation
	MovesGetMoveHandler moves.GetMoveHandler
	// OfficeUsersGetOfficeUserHandler sets the operation handler for the get office user operation
	OfficeUsersGetOfficeUserHandler office_users.GetOfficeUserHandler
	// RequestedOfficeUsersGetRequestedOfficeUserHandler sets the operation handler for the get requested office user operation
	RequestedOfficeUsersGetRequestedOfficeUserHandler requested_office_users.GetRequestedOfficeUserHandler
	// UploadsGetUploadHandler sets the operation handler for the get upload operation
	UploadsGetUploadHandler uploads.GetUploadHandler
	// UsersGetUserHandler sets the operation handler for the get user operation
	UsersGetUserHandler users.GetUserHandler
	// WebhookSubscriptionsGetWebhookSubscriptionHandler sets the operation handler for the get webhook subscription operation
	WebhookSubscriptionsGetWebhookSubscriptionHandler webhook_subscriptions.GetWebhookSubscriptionHandler
	// AdminUsersIndexAdminUsersHandler sets the operation handler for the index admin users operation
	AdminUsersIndexAdminUsersHandler admin_users.IndexAdminUsersHandler
	// ClientCertificatesIndexClientCertificatesHandler sets the operation handler for the index client certificates operation
	ClientCertificatesIndexClientCertificatesHandler client_certificates.IndexClientCertificatesHandler
	// ElectronicOrdersIndexElectronicOrdersHandler sets the operation handler for the index electronic orders operation
	ElectronicOrdersIndexElectronicOrdersHandler electronic_orders.IndexElectronicOrdersHandler
	// MovesIndexMovesHandler sets the operation handler for the index moves operation
	MovesIndexMovesHandler moves.IndexMovesHandler
	// NotificationsIndexNotificationsHandler sets the operation handler for the index notifications operation
	NotificationsIndexNotificationsHandler notifications.IndexNotificationsHandler
	// OfficeUsersIndexOfficeUsersHandler sets the operation handler for the index office users operation
	OfficeUsersIndexOfficeUsersHandler office_users.IndexOfficeUsersHandler
	// TransportationOfficesIndexOfficesHandler sets the operation handler for the index offices operation
	TransportationOfficesIndexOfficesHandler transportation_offices.IndexOfficesHandler
	// OrganizationsIndexOrganizationsHandler sets the operation handler for the index organizations operation
	OrganizationsIndexOrganizationsHandler organizations.IndexOrganizationsHandler
	// RequestedOfficeUsersIndexRequestedOfficeUsersHandler sets the operation handler for the index requested office users operation
	RequestedOfficeUsersIndexRequestedOfficeUsersHandler requested_office_users.IndexRequestedOfficeUsersHandler
	// UsersIndexUsersHandler sets the operation handler for the index users operation
	UsersIndexUsersHandler users.IndexUsersHandler
	// WebhookSubscriptionsIndexWebhookSubscriptionsHandler sets the operation handler for the index webhook subscriptions operation
	WebhookSubscriptionsIndexWebhookSubscriptionsHandler webhook_subscriptions.IndexWebhookSubscriptionsHandler
	// ClientCertificatesRemoveClientCertificateHandler sets the operation handler for the remove client certificate operation
	ClientCertificatesRemoveClientCertificateHandler client_certificates.RemoveClientCertificateHandler
	// AdminUsersUpdateAdminUserHandler sets the operation handler for the update admin user operation
	AdminUsersUpdateAdminUserHandler admin_users.UpdateAdminUserHandler
	// ClientCertificatesUpdateClientCertificateHandler sets the operation handler for the update client certificate operation
	ClientCertificatesUpdateClientCertificateHandler client_certificates.UpdateClientCertificateHandler
	// MovesUpdateMoveHandler sets the operation handler for the update move operation
	MovesUpdateMoveHandler moves.UpdateMoveHandler
	// OfficeUsersUpdateOfficeUserHandler sets the operation handler for the update office user operation
	OfficeUsersUpdateOfficeUserHandler office_users.UpdateOfficeUserHandler
	// RequestedOfficeUsersUpdateRequestedOfficeUserHandler sets the operation handler for the update requested office user operation
	RequestedOfficeUsersUpdateRequestedOfficeUserHandler requested_office_users.UpdateRequestedOfficeUserHandler
	// UsersUpdateUserHandler sets the operation handler for the update user operation
	UsersUpdateUserHandler users.UpdateUserHandler
	// WebhookSubscriptionsUpdateWebhookSubscriptionHandler sets the operation handler for the update webhook subscription operation
	WebhookSubscriptionsUpdateWebhookSubscriptionHandler webhook_subscriptions.UpdateWebhookSubscriptionHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *MymoveAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *MymoveAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *MymoveAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *MymoveAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *MymoveAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *MymoveAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *MymoveAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *MymoveAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *MymoveAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the MymoveAPI
func (o *MymoveAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.AdminUsersCreateAdminUserHandler == nil {
		unregistered = append(unregistered, "admin_users.CreateAdminUserHandler")
	}
	if o.ClientCertificatesCreateClientCertificateHandler == nil {
		unregistered = append(unregistered, "client_certificates.CreateClientCertificateHandler")
	}
	if o.OfficeUsersCreateOfficeUserHandler == nil {
		unregistered = append(unregistered, "office_users.CreateOfficeUserHandler")
	}
	if o.WebhookSubscriptionsCreateWebhookSubscriptionHandler == nil {
		unregistered = append(unregistered, "webhook_subscriptions.CreateWebhookSubscriptionHandler")
	}
	if o.AdminUsersGetAdminUserHandler == nil {
		unregistered = append(unregistered, "admin_users.GetAdminUserHandler")
	}
	if o.ClientCertificatesGetClientCertificateHandler == nil {
		unregistered = append(unregistered, "client_certificates.GetClientCertificateHandler")
	}
	if o.ElectronicOrdersGetElectronicOrdersTotalsHandler == nil {
		unregistered = append(unregistered, "electronic_orders.GetElectronicOrdersTotalsHandler")
	}
	if o.MovesGetMoveHandler == nil {
		unregistered = append(unregistered, "moves.GetMoveHandler")
	}
	if o.OfficeUsersGetOfficeUserHandler == nil {
		unregistered = append(unregistered, "office_users.GetOfficeUserHandler")
	}
	if o.RequestedOfficeUsersGetRequestedOfficeUserHandler == nil {
		unregistered = append(unregistered, "requested_office_users.GetRequestedOfficeUserHandler")
	}
	if o.UploadsGetUploadHandler == nil {
		unregistered = append(unregistered, "uploads.GetUploadHandler")
	}
	if o.UsersGetUserHandler == nil {
		unregistered = append(unregistered, "users.GetUserHandler")
	}
	if o.WebhookSubscriptionsGetWebhookSubscriptionHandler == nil {
		unregistered = append(unregistered, "webhook_subscriptions.GetWebhookSubscriptionHandler")
	}
	if o.AdminUsersIndexAdminUsersHandler == nil {
		unregistered = append(unregistered, "admin_users.IndexAdminUsersHandler")
	}
	if o.ClientCertificatesIndexClientCertificatesHandler == nil {
		unregistered = append(unregistered, "client_certificates.IndexClientCertificatesHandler")
	}
	if o.ElectronicOrdersIndexElectronicOrdersHandler == nil {
		unregistered = append(unregistered, "electronic_orders.IndexElectronicOrdersHandler")
	}
	if o.MovesIndexMovesHandler == nil {
		unregistered = append(unregistered, "moves.IndexMovesHandler")
	}
	if o.NotificationsIndexNotificationsHandler == nil {
		unregistered = append(unregistered, "notifications.IndexNotificationsHandler")
	}
	if o.OfficeUsersIndexOfficeUsersHandler == nil {
		unregistered = append(unregistered, "office_users.IndexOfficeUsersHandler")
	}
	if o.TransportationOfficesIndexOfficesHandler == nil {
		unregistered = append(unregistered, "transportation_offices.IndexOfficesHandler")
	}
	if o.OrganizationsIndexOrganizationsHandler == nil {
		unregistered = append(unregistered, "organizations.IndexOrganizationsHandler")
	}
	if o.RequestedOfficeUsersIndexRequestedOfficeUsersHandler == nil {
		unregistered = append(unregistered, "requested_office_users.IndexRequestedOfficeUsersHandler")
	}
	if o.UsersIndexUsersHandler == nil {
		unregistered = append(unregistered, "users.IndexUsersHandler")
	}
	if o.WebhookSubscriptionsIndexWebhookSubscriptionsHandler == nil {
		unregistered = append(unregistered, "webhook_subscriptions.IndexWebhookSubscriptionsHandler")
	}
	if o.ClientCertificatesRemoveClientCertificateHandler == nil {
		unregistered = append(unregistered, "client_certificates.RemoveClientCertificateHandler")
	}
	if o.AdminUsersUpdateAdminUserHandler == nil {
		unregistered = append(unregistered, "admin_users.UpdateAdminUserHandler")
	}
	if o.ClientCertificatesUpdateClientCertificateHandler == nil {
		unregistered = append(unregistered, "client_certificates.UpdateClientCertificateHandler")
	}
	if o.MovesUpdateMoveHandler == nil {
		unregistered = append(unregistered, "moves.UpdateMoveHandler")
	}
	if o.OfficeUsersUpdateOfficeUserHandler == nil {
		unregistered = append(unregistered, "office_users.UpdateOfficeUserHandler")
	}
	if o.RequestedOfficeUsersUpdateRequestedOfficeUserHandler == nil {
		unregistered = append(unregistered, "requested_office_users.UpdateRequestedOfficeUserHandler")
	}
	if o.UsersUpdateUserHandler == nil {
		unregistered = append(unregistered, "users.UpdateUserHandler")
	}
	if o.WebhookSubscriptionsUpdateWebhookSubscriptionHandler == nil {
		unregistered = append(unregistered, "webhook_subscriptions.UpdateWebhookSubscriptionHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *MymoveAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *MymoveAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *MymoveAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *MymoveAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *MymoveAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *MymoveAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the mymove API
func (o *MymoveAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *MymoveAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin-users"] = admin_users.NewCreateAdminUser(o.context, o.AdminUsersCreateAdminUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/client-certificates"] = client_certificates.NewCreateClientCertificate(o.context, o.ClientCertificatesCreateClientCertificateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/office-users"] = office_users.NewCreateOfficeUser(o.context, o.OfficeUsersCreateOfficeUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/webhook-subscriptions"] = webhook_subscriptions.NewCreateWebhookSubscription(o.context, o.WebhookSubscriptionsCreateWebhookSubscriptionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin-users/{adminUserId}"] = admin_users.NewGetAdminUser(o.context, o.AdminUsersGetAdminUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/client-certificates/{clientCertificateId}"] = client_certificates.NewGetClientCertificate(o.context, o.ClientCertificatesGetClientCertificateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/electronic-orders/totals"] = electronic_orders.NewGetElectronicOrdersTotals(o.context, o.ElectronicOrdersGetElectronicOrdersTotalsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/moves/{moveID}"] = moves.NewGetMove(o.context, o.MovesGetMoveHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/office-users/{officeUserId}"] = office_users.NewGetOfficeUser(o.context, o.OfficeUsersGetOfficeUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/requested-office-users/{officeUserId}"] = requested_office_users.NewGetRequestedOfficeUser(o.context, o.RequestedOfficeUsersGetRequestedOfficeUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/uploads/{uploadId}"] = uploads.NewGetUpload(o.context, o.UploadsGetUploadHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userId}"] = users.NewGetUser(o.context, o.UsersGetUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/webhook-subscriptions/{webhookSubscriptionId}"] = webhook_subscriptions.NewGetWebhookSubscription(o.context, o.WebhookSubscriptionsGetWebhookSubscriptionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin-users"] = admin_users.NewIndexAdminUsers(o.context, o.AdminUsersIndexAdminUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/client-certificates"] = client_certificates.NewIndexClientCertificates(o.context, o.ClientCertificatesIndexClientCertificatesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/electronic-orders"] = electronic_orders.NewIndexElectronicOrders(o.context, o.ElectronicOrdersIndexElectronicOrdersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/moves"] = moves.NewIndexMoves(o.context, o.MovesIndexMovesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/notifications"] = notifications.NewIndexNotifications(o.context, o.NotificationsIndexNotificationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/office-users"] = office_users.NewIndexOfficeUsers(o.context, o.OfficeUsersIndexOfficeUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/offices"] = transportation_offices.NewIndexOffices(o.context, o.TransportationOfficesIndexOfficesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations"] = organizations.NewIndexOrganizations(o.context, o.OrganizationsIndexOrganizationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/requested-office-users"] = requested_office_users.NewIndexRequestedOfficeUsers(o.context, o.RequestedOfficeUsersIndexRequestedOfficeUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = users.NewIndexUsers(o.context, o.UsersIndexUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/webhook-subscriptions"] = webhook_subscriptions.NewIndexWebhookSubscriptions(o.context, o.WebhookSubscriptionsIndexWebhookSubscriptionsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/client-certificates/{clientCertificateId}"] = client_certificates.NewRemoveClientCertificate(o.context, o.ClientCertificatesRemoveClientCertificateHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/admin-users/{adminUserId}"] = admin_users.NewUpdateAdminUser(o.context, o.AdminUsersUpdateAdminUserHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/client-certificates/{clientCertificateId}"] = client_certificates.NewUpdateClientCertificate(o.context, o.ClientCertificatesUpdateClientCertificateHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/moves/{moveID}"] = moves.NewUpdateMove(o.context, o.MovesUpdateMoveHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/office-users/{officeUserId}"] = office_users.NewUpdateOfficeUser(o.context, o.OfficeUsersUpdateOfficeUserHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/requested-office-users/{officeUserId}"] = requested_office_users.NewUpdateRequestedOfficeUser(o.context, o.RequestedOfficeUsersUpdateRequestedOfficeUserHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/users/{userId}"] = users.NewUpdateUser(o.context, o.UsersUpdateUserHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/webhook-subscriptions/{webhookSubscriptionId}"] = webhook_subscriptions.NewUpdateWebhookSubscription(o.context, o.WebhookSubscriptionsUpdateWebhookSubscriptionHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *MymoveAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *MymoveAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *MymoveAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *MymoveAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *MymoveAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
