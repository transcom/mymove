// Code generated by go-swagger; DO NOT EDIT.

package single_e_d_i_error

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetEdiErrorHandlerFunc turns a function with the right signature into a get edi error handler
type GetEdiErrorHandlerFunc func(GetEdiErrorParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEdiErrorHandlerFunc) Handle(params GetEdiErrorParams) middleware.Responder {
	return fn(params)
}

// GetEdiErrorHandler interface for that can handle valid get edi error params
type GetEdiErrorHandler interface {
	Handle(GetEdiErrorParams) middleware.Responder
}

// NewGetEdiError creates a new http.Handler for the get edi error operation
func NewGetEdiError(ctx *middleware.Context, handler GetEdiErrorHandler) *GetEdiError {
	return &GetEdiError{Context: ctx, Handler: handler}
}

/*
	GetEdiError swagger:route GET /edi-errors/{ediErrorId} Single EDI Error getEdiError

# Get information on a specific EDI Error by the ID of the EDI Error

Retrieving a single EDI error for a payment request that is in EDI_ERROR status. This endpoint is used in the Admin UI that will allow the admin user to view specific EDI Error data.
*/
type GetEdiError struct {
	Context *middleware.Context
	Handler GetEdiErrorHandler
}

func (o *GetEdiError) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetEdiErrorParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
