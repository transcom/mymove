// Code generated by go-swagger; DO NOT EDIT.

package payment_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new payment request API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payment request API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePaymentRequest(params *CreatePaymentRequestParams, opts ...ClientOption) (*CreatePaymentRequestCreated, error)

	CreateUpload(params *CreateUploadParams, opts ...ClientOption) (*CreateUploadCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreatePaymentRequest creates payment request

	Creates a new instance of a paymentRequest.

A newly created payment request is assigned the status `PENDING`.
A move task order can have multiple payment requests, and
a final payment request can be marked using boolean `isFinal`.

If a `PENDING` payment request is recalculated,
a new payment request is created and the original request is
marked with the status `DEPRECATED`.

**NOTE**: In order to create a payment request for most service items,
the shipment *must* be updated with the `PrimeActualWeight` value via [updateMTOShipment](#operation/updateMTOShipment).
**Fuel Surcharge** service items require `ActualPickupDate` to be
updated on the shipment.

To create a paymentRequest for a SIT Destination Additional Days mtoServiceItem, the SITPaymentRequestStart and
SITPaymentRequestEnd dates must not overlap previously requested SIT dates.

To create a paymentRequest for a SIT Delivery mtoServiceItem, the item must
first have a final address set via [updateMTOServiceItem](#operation/updateMTOServiceItem).
*/
func (a *Client) CreatePaymentRequest(params *CreatePaymentRequestParams, opts ...ClientOption) (*CreatePaymentRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePaymentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPaymentRequest",
		Method:             "POST",
		PathPattern:        "/payment-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePaymentRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePaymentRequestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPaymentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateUpload creates upload

	### Functionality

This endpoint **uploads** a Proof of Service document for a PaymentRequest.

The PaymentRequest should already exist.

Required field of **isWeightTicket** indicates if the document is a weight ticket or not.
This will be used for partial and full deliveries and makes it easier for the Transportation Invoicing Officers to locate and review service item documents.

The formdata in the body of the POST request that is sent should look like this if it IS a weight ticket being attached to an existing payment request:

	```json
	{
	  "file": "filePath",
	  "isWeightTicket": true
	}
	```

	If the proof of service doc is NOT a weight ticket, it will look like this:
	```json
	{
	  "file": "filePath",
	  "isWeightTicket": false
	}
	```

PaymentRequests are created with the [createPaymentRequest](#operation/createPaymentRequest) endpoint.
*/
func (a *Client) CreateUpload(params *CreateUploadParams, opts ...ClientOption) (*CreateUploadCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUploadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUpload",
		Method:             "POST",
		PathPattern:        "/payment-requests/{paymentRequestID}/uploads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUploadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUploadCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUpload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
