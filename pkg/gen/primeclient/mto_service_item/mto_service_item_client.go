// Code generated by go-swagger; DO NOT EDIT.

package mto_service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mto service item API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mto service item API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMTOServiceItem(params *CreateMTOServiceItemParams) (*CreateMTOServiceItemOK, error)

	UpdateMTOServiceItem(params *UpdateMTOServiceItemParams) (*UpdateMTOServiceItemOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateMTOServiceItem creates m t o service item

  Creates one or more MTOServiceItems. Not all service items may be created, please see details below.

This endpoint supports different body definitions. In the modelType field below, select the modelType corresponding
 to the service item you wish to create and the documentation will update with the new definition.

Upon creation these items are associated with a Move Task Order and an MTO Shipment.
The request must include UUIDs for the MTO and MTO Shipment connected to this service item. Some service item types require
additional service items to be autogenerated when added - all created service items, autogenerated included,
will be returned in the response.

To update a service item, please use [updateMTOServiceItem](#operation/updateMTOServiceItem) endpoint.

---

**`MTOServiceItemOriginSIT`**

MTOServiceItemOriginSIT is a subtype of MTOServiceItem.

This model type describes a domestic origin SIT service item. Items can be created using this
model type with the following codes:

**DOFSIT**

**1st day origin SIT service item**. When a DOFSIT is requested, the API will auto-create the following group of service items:
  * DOFSIT - Domestic origin 1st day SIT
  * DOASIT - Domestic origin Additional day SIT
  * DOPSIT - Domestic origin SIT pickup

**DOASIT**

**Addt'l days origin SIT service item**. This represents an additional day of storage for the same item.
Additional DOASIT service items can be created and added to an existing shipment that **includes a DOFSIT service item**.

---

**`MTOServiceItemDestSIT`**

MTOServiceItemDestSIT is a subtype of MTOServiceItem.

This model type describes a domestic destination SIT service item. Items can be created using this
model type with the following codes:

**DDFSIT**

**1st day origin SIT service item**. The additional fields are required for creating a DDFSIT:
  * `firstAvailableDeliveryDate1`
    * string <date>
    * First available date that Prime can deliver SIT service item.
  * `firstAvailableDeliveryDate2`
    * string <date>
    * Second available date that Prime can deliver SIT service item.
  * `timeMilitary1`
    * string\d{4}Z
    * Time of delivery corresponding to `firstAvailableDeliveryDate1`, in military format.
  * `timeMilitary2`
    * string\d{4}Z
    * Time of delivery corresponding to `firstAvailableDeliveryDate2`, in military format.

When a DDFSIT is requested, the API will auto-create the following group of service items:
  * DDFSIT - Domestic destination 1st day SIT
  * DDASIT - Domestic destination Additional day SIT
  * DDDSIT - Domestic destination SIT delivery

**DDASIT**

**Addt'l days destination SIT service item**. This represents an additional day of storage for the same item.
Additional DDASIT service items can be created and added to an existing shipment that **includes a DDFSIT service item**.

*/
func (a *Client) CreateMTOServiceItem(params *CreateMTOServiceItemParams) (*CreateMTOServiceItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMTOServiceItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMTOServiceItem",
		Method:             "POST",
		PathPattern:        "/mto-service-items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMTOServiceItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMTOServiceItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMTOServiceItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMTOServiceItem updates m t o service item

  Updates MTOServiceItems after creation. Not all service items or fields may be updated, please see details below.

This endpoint supports different body definitions. In the modelType field below, select the modelType corresponding
 to the service item you wish to update and the documentation will update with the new definition.

To create a service item, please use [createMTOServiceItem](#operation/createMTOServiceItem)) endpoint.

### Errors

Currently this is not implemented and will generated the NotImplemented error.

*/
func (a *Client) UpdateMTOServiceItem(params *UpdateMTOServiceItemParams) (*UpdateMTOServiceItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMTOServiceItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMTOServiceItem",
		Method:             "PATCH",
		PathPattern:        "/mto-service-items/{mtoServiceItemID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMTOServiceItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMTOServiceItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMTOServiceItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
