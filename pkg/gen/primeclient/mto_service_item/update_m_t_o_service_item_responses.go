// Code generated by go-swagger; DO NOT EDIT.

package mto_service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/primemessages"
)

// UpdateMTOServiceItemReader is a Reader for the UpdateMTOServiceItem structure.
type UpdateMTOServiceItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMTOServiceItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateMTOServiceItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateMTOServiceItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateMTOServiceItemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateMTOServiceItemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateMTOServiceItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateMTOServiceItemConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateMTOServiceItemPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateMTOServiceItemUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateMTOServiceItemInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /mto-service-items/{mtoServiceItemID}] updateMTOServiceItem", response, response.Code())
	}
}

// NewUpdateMTOServiceItemOK creates a UpdateMTOServiceItemOK with default headers values
func NewUpdateMTOServiceItemOK() *UpdateMTOServiceItemOK {
	return &UpdateMTOServiceItemOK{}
}

/*
UpdateMTOServiceItemOK describes a response with status code 200, with default header values.

Successfully updated the MTO service item.
*/
type UpdateMTOServiceItemOK struct {
	Payload primemessages.MTOServiceItem
}

// IsSuccess returns true when this update m t o service item o k response has a 2xx status code
func (o *UpdateMTOServiceItemOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update m t o service item o k response has a 3xx status code
func (o *UpdateMTOServiceItemOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o service item o k response has a 4xx status code
func (o *UpdateMTOServiceItemOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update m t o service item o k response has a 5xx status code
func (o *UpdateMTOServiceItemOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o service item o k response a status code equal to that given
func (o *UpdateMTOServiceItemOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update m t o service item o k response
func (o *UpdateMTOServiceItemOK) Code() int {
	return 200
}

func (o *UpdateMTOServiceItemOK) Error() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemOK  %+v", 200, o.Payload)
}

func (o *UpdateMTOServiceItemOK) String() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemOK  %+v", 200, o.Payload)
}

func (o *UpdateMTOServiceItemOK) GetPayload() primemessages.MTOServiceItem {
	return o.Payload
}

func (o *UpdateMTOServiceItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := primemessages.UnmarshalMTOServiceItem(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdateMTOServiceItemBadRequest creates a UpdateMTOServiceItemBadRequest with default headers values
func NewUpdateMTOServiceItemBadRequest() *UpdateMTOServiceItemBadRequest {
	return &UpdateMTOServiceItemBadRequest{}
}

/*
UpdateMTOServiceItemBadRequest describes a response with status code 400, with default header values.

The request payload is invalid.
*/
type UpdateMTOServiceItemBadRequest struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update m t o service item bad request response has a 2xx status code
func (o *UpdateMTOServiceItemBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o service item bad request response has a 3xx status code
func (o *UpdateMTOServiceItemBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o service item bad request response has a 4xx status code
func (o *UpdateMTOServiceItemBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o service item bad request response has a 5xx status code
func (o *UpdateMTOServiceItemBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o service item bad request response a status code equal to that given
func (o *UpdateMTOServiceItemBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update m t o service item bad request response
func (o *UpdateMTOServiceItemBadRequest) Code() int {
	return 400
}

func (o *UpdateMTOServiceItemBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMTOServiceItemBadRequest) String() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMTOServiceItemBadRequest) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOServiceItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOServiceItemUnauthorized creates a UpdateMTOServiceItemUnauthorized with default headers values
func NewUpdateMTOServiceItemUnauthorized() *UpdateMTOServiceItemUnauthorized {
	return &UpdateMTOServiceItemUnauthorized{}
}

/*
UpdateMTOServiceItemUnauthorized describes a response with status code 401, with default header values.

The request was denied.
*/
type UpdateMTOServiceItemUnauthorized struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update m t o service item unauthorized response has a 2xx status code
func (o *UpdateMTOServiceItemUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o service item unauthorized response has a 3xx status code
func (o *UpdateMTOServiceItemUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o service item unauthorized response has a 4xx status code
func (o *UpdateMTOServiceItemUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o service item unauthorized response has a 5xx status code
func (o *UpdateMTOServiceItemUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o service item unauthorized response a status code equal to that given
func (o *UpdateMTOServiceItemUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update m t o service item unauthorized response
func (o *UpdateMTOServiceItemUnauthorized) Code() int {
	return 401
}

func (o *UpdateMTOServiceItemUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateMTOServiceItemUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateMTOServiceItemUnauthorized) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOServiceItemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOServiceItemForbidden creates a UpdateMTOServiceItemForbidden with default headers values
func NewUpdateMTOServiceItemForbidden() *UpdateMTOServiceItemForbidden {
	return &UpdateMTOServiceItemForbidden{}
}

/*
UpdateMTOServiceItemForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type UpdateMTOServiceItemForbidden struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update m t o service item forbidden response has a 2xx status code
func (o *UpdateMTOServiceItemForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o service item forbidden response has a 3xx status code
func (o *UpdateMTOServiceItemForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o service item forbidden response has a 4xx status code
func (o *UpdateMTOServiceItemForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o service item forbidden response has a 5xx status code
func (o *UpdateMTOServiceItemForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o service item forbidden response a status code equal to that given
func (o *UpdateMTOServiceItemForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update m t o service item forbidden response
func (o *UpdateMTOServiceItemForbidden) Code() int {
	return 403
}

func (o *UpdateMTOServiceItemForbidden) Error() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemForbidden  %+v", 403, o.Payload)
}

func (o *UpdateMTOServiceItemForbidden) String() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemForbidden  %+v", 403, o.Payload)
}

func (o *UpdateMTOServiceItemForbidden) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOServiceItemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOServiceItemNotFound creates a UpdateMTOServiceItemNotFound with default headers values
func NewUpdateMTOServiceItemNotFound() *UpdateMTOServiceItemNotFound {
	return &UpdateMTOServiceItemNotFound{}
}

/*
UpdateMTOServiceItemNotFound describes a response with status code 404, with default header values.

The requested resource wasn't found.
*/
type UpdateMTOServiceItemNotFound struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update m t o service item not found response has a 2xx status code
func (o *UpdateMTOServiceItemNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o service item not found response has a 3xx status code
func (o *UpdateMTOServiceItemNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o service item not found response has a 4xx status code
func (o *UpdateMTOServiceItemNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o service item not found response has a 5xx status code
func (o *UpdateMTOServiceItemNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o service item not found response a status code equal to that given
func (o *UpdateMTOServiceItemNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update m t o service item not found response
func (o *UpdateMTOServiceItemNotFound) Code() int {
	return 404
}

func (o *UpdateMTOServiceItemNotFound) Error() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMTOServiceItemNotFound) String() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMTOServiceItemNotFound) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOServiceItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOServiceItemConflict creates a UpdateMTOServiceItemConflict with default headers values
func NewUpdateMTOServiceItemConflict() *UpdateMTOServiceItemConflict {
	return &UpdateMTOServiceItemConflict{}
}

/*
UpdateMTOServiceItemConflict describes a response with status code 409, with default header values.

The request could not be processed because of conflict in the current state of the resource.
*/
type UpdateMTOServiceItemConflict struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update m t o service item conflict response has a 2xx status code
func (o *UpdateMTOServiceItemConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o service item conflict response has a 3xx status code
func (o *UpdateMTOServiceItemConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o service item conflict response has a 4xx status code
func (o *UpdateMTOServiceItemConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o service item conflict response has a 5xx status code
func (o *UpdateMTOServiceItemConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o service item conflict response a status code equal to that given
func (o *UpdateMTOServiceItemConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update m t o service item conflict response
func (o *UpdateMTOServiceItemConflict) Code() int {
	return 409
}

func (o *UpdateMTOServiceItemConflict) Error() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemConflict  %+v", 409, o.Payload)
}

func (o *UpdateMTOServiceItemConflict) String() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemConflict  %+v", 409, o.Payload)
}

func (o *UpdateMTOServiceItemConflict) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOServiceItemConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOServiceItemPreconditionFailed creates a UpdateMTOServiceItemPreconditionFailed with default headers values
func NewUpdateMTOServiceItemPreconditionFailed() *UpdateMTOServiceItemPreconditionFailed {
	return &UpdateMTOServiceItemPreconditionFailed{}
}

/*
UpdateMTOServiceItemPreconditionFailed describes a response with status code 412, with default header values.

Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
*/
type UpdateMTOServiceItemPreconditionFailed struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update m t o service item precondition failed response has a 2xx status code
func (o *UpdateMTOServiceItemPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o service item precondition failed response has a 3xx status code
func (o *UpdateMTOServiceItemPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o service item precondition failed response has a 4xx status code
func (o *UpdateMTOServiceItemPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o service item precondition failed response has a 5xx status code
func (o *UpdateMTOServiceItemPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o service item precondition failed response a status code equal to that given
func (o *UpdateMTOServiceItemPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the update m t o service item precondition failed response
func (o *UpdateMTOServiceItemPreconditionFailed) Code() int {
	return 412
}

func (o *UpdateMTOServiceItemPreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateMTOServiceItemPreconditionFailed) String() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateMTOServiceItemPreconditionFailed) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOServiceItemPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOServiceItemUnprocessableEntity creates a UpdateMTOServiceItemUnprocessableEntity with default headers values
func NewUpdateMTOServiceItemUnprocessableEntity() *UpdateMTOServiceItemUnprocessableEntity {
	return &UpdateMTOServiceItemUnprocessableEntity{}
}

/*
UpdateMTOServiceItemUnprocessableEntity describes a response with status code 422, with default header values.

The request was unprocessable, likely due to bad input from the requester.
*/
type UpdateMTOServiceItemUnprocessableEntity struct {
	Payload *primemessages.ValidationError
}

// IsSuccess returns true when this update m t o service item unprocessable entity response has a 2xx status code
func (o *UpdateMTOServiceItemUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o service item unprocessable entity response has a 3xx status code
func (o *UpdateMTOServiceItemUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o service item unprocessable entity response has a 4xx status code
func (o *UpdateMTOServiceItemUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o service item unprocessable entity response has a 5xx status code
func (o *UpdateMTOServiceItemUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o service item unprocessable entity response a status code equal to that given
func (o *UpdateMTOServiceItemUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update m t o service item unprocessable entity response
func (o *UpdateMTOServiceItemUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateMTOServiceItemUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateMTOServiceItemUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateMTOServiceItemUnprocessableEntity) GetPayload() *primemessages.ValidationError {
	return o.Payload
}

func (o *UpdateMTOServiceItemUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOServiceItemInternalServerError creates a UpdateMTOServiceItemInternalServerError with default headers values
func NewUpdateMTOServiceItemInternalServerError() *UpdateMTOServiceItemInternalServerError {
	return &UpdateMTOServiceItemInternalServerError{}
}

/*
UpdateMTOServiceItemInternalServerError describes a response with status code 500, with default header values.

A server error occurred.
*/
type UpdateMTOServiceItemInternalServerError struct {
	Payload *primemessages.Error
}

// IsSuccess returns true when this update m t o service item internal server error response has a 2xx status code
func (o *UpdateMTOServiceItemInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o service item internal server error response has a 3xx status code
func (o *UpdateMTOServiceItemInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o service item internal server error response has a 4xx status code
func (o *UpdateMTOServiceItemInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update m t o service item internal server error response has a 5xx status code
func (o *UpdateMTOServiceItemInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update m t o service item internal server error response a status code equal to that given
func (o *UpdateMTOServiceItemInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update m t o service item internal server error response
func (o *UpdateMTOServiceItemInternalServerError) Code() int {
	return 500
}

func (o *UpdateMTOServiceItemInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateMTOServiceItemInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /mto-service-items/{mtoServiceItemID}][%d] updateMTOServiceItemInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateMTOServiceItemInternalServerError) GetPayload() *primemessages.Error {
	return o.Payload
}

func (o *UpdateMTOServiceItemInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
