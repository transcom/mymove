// Code generated by go-swagger; DO NOT EDIT.

package addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/primemessages"
)

// GetLocationByZipCityStateReader is a Reader for the GetLocationByZipCityState structure.
type GetLocationByZipCityStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLocationByZipCityStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLocationByZipCityStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLocationByZipCityStateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLocationByZipCityStateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLocationByZipCityStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLocationByZipCityStateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /addresses/zip-city-lookup/{search}] getLocationByZipCityState", response, response.Code())
	}
}

// NewGetLocationByZipCityStateOK creates a GetLocationByZipCityStateOK with default headers values
func NewGetLocationByZipCityStateOK() *GetLocationByZipCityStateOK {
	return &GetLocationByZipCityStateOK{}
}

/*
GetLocationByZipCityStateOK describes a response with status code 200, with default header values.

the requested list of city, state, county, and postal code matches
*/
type GetLocationByZipCityStateOK struct {
	Payload primemessages.VLocations
}

// IsSuccess returns true when this get location by zip city state o k response has a 2xx status code
func (o *GetLocationByZipCityStateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get location by zip city state o k response has a 3xx status code
func (o *GetLocationByZipCityStateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get location by zip city state o k response has a 4xx status code
func (o *GetLocationByZipCityStateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get location by zip city state o k response has a 5xx status code
func (o *GetLocationByZipCityStateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get location by zip city state o k response a status code equal to that given
func (o *GetLocationByZipCityStateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get location by zip city state o k response
func (o *GetLocationByZipCityStateOK) Code() int {
	return 200
}

func (o *GetLocationByZipCityStateOK) Error() string {
	return fmt.Sprintf("[GET /addresses/zip-city-lookup/{search}][%d] getLocationByZipCityStateOK  %+v", 200, o.Payload)
}

func (o *GetLocationByZipCityStateOK) String() string {
	return fmt.Sprintf("[GET /addresses/zip-city-lookup/{search}][%d] getLocationByZipCityStateOK  %+v", 200, o.Payload)
}

func (o *GetLocationByZipCityStateOK) GetPayload() primemessages.VLocations {
	return o.Payload
}

func (o *GetLocationByZipCityStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocationByZipCityStateBadRequest creates a GetLocationByZipCityStateBadRequest with default headers values
func NewGetLocationByZipCityStateBadRequest() *GetLocationByZipCityStateBadRequest {
	return &GetLocationByZipCityStateBadRequest{}
}

/*
GetLocationByZipCityStateBadRequest describes a response with status code 400, with default header values.

The request payload is invalid.
*/
type GetLocationByZipCityStateBadRequest struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this get location by zip city state bad request response has a 2xx status code
func (o *GetLocationByZipCityStateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get location by zip city state bad request response has a 3xx status code
func (o *GetLocationByZipCityStateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get location by zip city state bad request response has a 4xx status code
func (o *GetLocationByZipCityStateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get location by zip city state bad request response has a 5xx status code
func (o *GetLocationByZipCityStateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get location by zip city state bad request response a status code equal to that given
func (o *GetLocationByZipCityStateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get location by zip city state bad request response
func (o *GetLocationByZipCityStateBadRequest) Code() int {
	return 400
}

func (o *GetLocationByZipCityStateBadRequest) Error() string {
	return fmt.Sprintf("[GET /addresses/zip-city-lookup/{search}][%d] getLocationByZipCityStateBadRequest  %+v", 400, o.Payload)
}

func (o *GetLocationByZipCityStateBadRequest) String() string {
	return fmt.Sprintf("[GET /addresses/zip-city-lookup/{search}][%d] getLocationByZipCityStateBadRequest  %+v", 400, o.Payload)
}

func (o *GetLocationByZipCityStateBadRequest) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *GetLocationByZipCityStateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocationByZipCityStateForbidden creates a GetLocationByZipCityStateForbidden with default headers values
func NewGetLocationByZipCityStateForbidden() *GetLocationByZipCityStateForbidden {
	return &GetLocationByZipCityStateForbidden{}
}

/*
GetLocationByZipCityStateForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type GetLocationByZipCityStateForbidden struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this get location by zip city state forbidden response has a 2xx status code
func (o *GetLocationByZipCityStateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get location by zip city state forbidden response has a 3xx status code
func (o *GetLocationByZipCityStateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get location by zip city state forbidden response has a 4xx status code
func (o *GetLocationByZipCityStateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get location by zip city state forbidden response has a 5xx status code
func (o *GetLocationByZipCityStateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get location by zip city state forbidden response a status code equal to that given
func (o *GetLocationByZipCityStateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get location by zip city state forbidden response
func (o *GetLocationByZipCityStateForbidden) Code() int {
	return 403
}

func (o *GetLocationByZipCityStateForbidden) Error() string {
	return fmt.Sprintf("[GET /addresses/zip-city-lookup/{search}][%d] getLocationByZipCityStateForbidden  %+v", 403, o.Payload)
}

func (o *GetLocationByZipCityStateForbidden) String() string {
	return fmt.Sprintf("[GET /addresses/zip-city-lookup/{search}][%d] getLocationByZipCityStateForbidden  %+v", 403, o.Payload)
}

func (o *GetLocationByZipCityStateForbidden) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *GetLocationByZipCityStateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocationByZipCityStateNotFound creates a GetLocationByZipCityStateNotFound with default headers values
func NewGetLocationByZipCityStateNotFound() *GetLocationByZipCityStateNotFound {
	return &GetLocationByZipCityStateNotFound{}
}

/*
GetLocationByZipCityStateNotFound describes a response with status code 404, with default header values.

The requested resource wasn't found.
*/
type GetLocationByZipCityStateNotFound struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this get location by zip city state not found response has a 2xx status code
func (o *GetLocationByZipCityStateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get location by zip city state not found response has a 3xx status code
func (o *GetLocationByZipCityStateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get location by zip city state not found response has a 4xx status code
func (o *GetLocationByZipCityStateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get location by zip city state not found response has a 5xx status code
func (o *GetLocationByZipCityStateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get location by zip city state not found response a status code equal to that given
func (o *GetLocationByZipCityStateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get location by zip city state not found response
func (o *GetLocationByZipCityStateNotFound) Code() int {
	return 404
}

func (o *GetLocationByZipCityStateNotFound) Error() string {
	return fmt.Sprintf("[GET /addresses/zip-city-lookup/{search}][%d] getLocationByZipCityStateNotFound  %+v", 404, o.Payload)
}

func (o *GetLocationByZipCityStateNotFound) String() string {
	return fmt.Sprintf("[GET /addresses/zip-city-lookup/{search}][%d] getLocationByZipCityStateNotFound  %+v", 404, o.Payload)
}

func (o *GetLocationByZipCityStateNotFound) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *GetLocationByZipCityStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocationByZipCityStateInternalServerError creates a GetLocationByZipCityStateInternalServerError with default headers values
func NewGetLocationByZipCityStateInternalServerError() *GetLocationByZipCityStateInternalServerError {
	return &GetLocationByZipCityStateInternalServerError{}
}

/*
GetLocationByZipCityStateInternalServerError describes a response with status code 500, with default header values.

A server error occurred.
*/
type GetLocationByZipCityStateInternalServerError struct {
	Payload *primemessages.Error
}

// IsSuccess returns true when this get location by zip city state internal server error response has a 2xx status code
func (o *GetLocationByZipCityStateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get location by zip city state internal server error response has a 3xx status code
func (o *GetLocationByZipCityStateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get location by zip city state internal server error response has a 4xx status code
func (o *GetLocationByZipCityStateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get location by zip city state internal server error response has a 5xx status code
func (o *GetLocationByZipCityStateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get location by zip city state internal server error response a status code equal to that given
func (o *GetLocationByZipCityStateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get location by zip city state internal server error response
func (o *GetLocationByZipCityStateInternalServerError) Code() int {
	return 500
}

func (o *GetLocationByZipCityStateInternalServerError) Error() string {
	return fmt.Sprintf("[GET /addresses/zip-city-lookup/{search}][%d] getLocationByZipCityStateInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLocationByZipCityStateInternalServerError) String() string {
	return fmt.Sprintf("[GET /addresses/zip-city-lookup/{search}][%d] getLocationByZipCityStateInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLocationByZipCityStateInternalServerError) GetPayload() *primemessages.Error {
	return o.Payload
}

func (o *GetLocationByZipCityStateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
