// Code generated by go-swagger; DO NOT EDIT.

package addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/primemessages"
)

// SearchCountriesReader is a Reader for the SearchCountries structure.
type SearchCountriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchCountriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchCountriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchCountriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchCountriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchCountriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchCountriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /addresses/countries] searchCountries", response, response.Code())
	}
}

// NewSearchCountriesOK creates a SearchCountriesOK with default headers values
func NewSearchCountriesOK() *SearchCountriesOK {
	return &SearchCountriesOK{}
}

/*
SearchCountriesOK describes a response with status code 200, with default header values.

countries matching the search query
*/
type SearchCountriesOK struct {
	Payload primemessages.Countries
}

// IsSuccess returns true when this search countries o k response has a 2xx status code
func (o *SearchCountriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search countries o k response has a 3xx status code
func (o *SearchCountriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search countries o k response has a 4xx status code
func (o *SearchCountriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search countries o k response has a 5xx status code
func (o *SearchCountriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search countries o k response a status code equal to that given
func (o *SearchCountriesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search countries o k response
func (o *SearchCountriesOK) Code() int {
	return 200
}

func (o *SearchCountriesOK) Error() string {
	return fmt.Sprintf("[GET /addresses/countries][%d] searchCountriesOK  %+v", 200, o.Payload)
}

func (o *SearchCountriesOK) String() string {
	return fmt.Sprintf("[GET /addresses/countries][%d] searchCountriesOK  %+v", 200, o.Payload)
}

func (o *SearchCountriesOK) GetPayload() primemessages.Countries {
	return o.Payload
}

func (o *SearchCountriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchCountriesBadRequest creates a SearchCountriesBadRequest with default headers values
func NewSearchCountriesBadRequest() *SearchCountriesBadRequest {
	return &SearchCountriesBadRequest{}
}

/*
SearchCountriesBadRequest describes a response with status code 400, with default header values.

The request payload is invalid.
*/
type SearchCountriesBadRequest struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this search countries bad request response has a 2xx status code
func (o *SearchCountriesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search countries bad request response has a 3xx status code
func (o *SearchCountriesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search countries bad request response has a 4xx status code
func (o *SearchCountriesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search countries bad request response has a 5xx status code
func (o *SearchCountriesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search countries bad request response a status code equal to that given
func (o *SearchCountriesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the search countries bad request response
func (o *SearchCountriesBadRequest) Code() int {
	return 400
}

func (o *SearchCountriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /addresses/countries][%d] searchCountriesBadRequest  %+v", 400, o.Payload)
}

func (o *SearchCountriesBadRequest) String() string {
	return fmt.Sprintf("[GET /addresses/countries][%d] searchCountriesBadRequest  %+v", 400, o.Payload)
}

func (o *SearchCountriesBadRequest) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *SearchCountriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchCountriesForbidden creates a SearchCountriesForbidden with default headers values
func NewSearchCountriesForbidden() *SearchCountriesForbidden {
	return &SearchCountriesForbidden{}
}

/*
SearchCountriesForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type SearchCountriesForbidden struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this search countries forbidden response has a 2xx status code
func (o *SearchCountriesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search countries forbidden response has a 3xx status code
func (o *SearchCountriesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search countries forbidden response has a 4xx status code
func (o *SearchCountriesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search countries forbidden response has a 5xx status code
func (o *SearchCountriesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search countries forbidden response a status code equal to that given
func (o *SearchCountriesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the search countries forbidden response
func (o *SearchCountriesForbidden) Code() int {
	return 403
}

func (o *SearchCountriesForbidden) Error() string {
	return fmt.Sprintf("[GET /addresses/countries][%d] searchCountriesForbidden  %+v", 403, o.Payload)
}

func (o *SearchCountriesForbidden) String() string {
	return fmt.Sprintf("[GET /addresses/countries][%d] searchCountriesForbidden  %+v", 403, o.Payload)
}

func (o *SearchCountriesForbidden) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *SearchCountriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchCountriesNotFound creates a SearchCountriesNotFound with default headers values
func NewSearchCountriesNotFound() *SearchCountriesNotFound {
	return &SearchCountriesNotFound{}
}

/*
SearchCountriesNotFound describes a response with status code 404, with default header values.

The requested resource wasn't found.
*/
type SearchCountriesNotFound struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this search countries not found response has a 2xx status code
func (o *SearchCountriesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search countries not found response has a 3xx status code
func (o *SearchCountriesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search countries not found response has a 4xx status code
func (o *SearchCountriesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search countries not found response has a 5xx status code
func (o *SearchCountriesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search countries not found response a status code equal to that given
func (o *SearchCountriesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the search countries not found response
func (o *SearchCountriesNotFound) Code() int {
	return 404
}

func (o *SearchCountriesNotFound) Error() string {
	return fmt.Sprintf("[GET /addresses/countries][%d] searchCountriesNotFound  %+v", 404, o.Payload)
}

func (o *SearchCountriesNotFound) String() string {
	return fmt.Sprintf("[GET /addresses/countries][%d] searchCountriesNotFound  %+v", 404, o.Payload)
}

func (o *SearchCountriesNotFound) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *SearchCountriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchCountriesInternalServerError creates a SearchCountriesInternalServerError with default headers values
func NewSearchCountriesInternalServerError() *SearchCountriesInternalServerError {
	return &SearchCountriesInternalServerError{}
}

/*
SearchCountriesInternalServerError describes a response with status code 500, with default header values.

A server error occurred.
*/
type SearchCountriesInternalServerError struct {
	Payload *primemessages.Error
}

// IsSuccess returns true when this search countries internal server error response has a 2xx status code
func (o *SearchCountriesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search countries internal server error response has a 3xx status code
func (o *SearchCountriesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search countries internal server error response has a 4xx status code
func (o *SearchCountriesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search countries internal server error response has a 5xx status code
func (o *SearchCountriesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search countries internal server error response a status code equal to that given
func (o *SearchCountriesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search countries internal server error response
func (o *SearchCountriesInternalServerError) Code() int {
	return 500
}

func (o *SearchCountriesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /addresses/countries][%d] searchCountriesInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchCountriesInternalServerError) String() string {
	return fmt.Sprintf("[GET /addresses/countries][%d] searchCountriesInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchCountriesInternalServerError) GetPayload() *primemessages.Error {
	return o.Payload
}

func (o *SearchCountriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
