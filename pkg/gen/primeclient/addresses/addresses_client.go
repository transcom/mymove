// Code generated by go-swagger; DO NOT EDIT.

package addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new addresses API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for addresses API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetLocationByZipCityState(params *GetLocationByZipCityStateParams, opts ...ClientOption) (*GetLocationByZipCityStateOK, error)

	GetOconusLocation(params *GetOconusLocationParams, opts ...ClientOption) (*GetOconusLocationOK, error)

	SearchCountries(params *SearchCountriesParams, opts ...ClientOption) (*SearchCountriesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetLocationByZipCityState returns city state postal code and county associated with the specified full partial postal code or city state string

Find by API using full/partial postal code or city name that returns an us_post_region_cities json object containing city, state, county and postal code.
*/
func (a *Client) GetLocationByZipCityState(params *GetLocationByZipCityStateParams, opts ...ClientOption) (*GetLocationByZipCityStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLocationByZipCityStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLocationByZipCityState",
		Method:             "GET",
		PathPattern:        "/addresses/zip-city-lookup/{search}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLocationByZipCityStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLocationByZipCityStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLocationByZipCityState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOconusLocation returns oconus cities and principal divisions associated with the specified full partial city and principal division search string

Find by API using full/partial city name, principal division that returns an VIntlLocations object containing city name and principal division.
*/
func (a *Client) GetOconusLocation(params *GetOconusLocationParams, opts ...ClientOption) (*GetOconusLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOconusLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOconusLocation",
		Method:             "GET",
		PathPattern:        "/addresses/oconus-lookup/{country}/{search}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOconusLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOconusLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOconusLocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchCountries returns the countries matching the search query

Search API using search string that returns list of countries containing its code and name. Will return all if 'search' query string parameter is not available/empty. If 2 chars are provided search will do an exact match on country code and also do a starts with match on country name. If not 2 characters search will do a starts with match on country name.
*/
func (a *Client) SearchCountries(params *SearchCountriesParams, opts ...ClientOption) (*SearchCountriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchCountriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchCountries",
		Method:             "GET",
		PathPattern:        "/addresses/countries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchCountriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchCountriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchCountries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
