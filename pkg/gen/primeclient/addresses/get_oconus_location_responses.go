// Code generated by go-swagger; DO NOT EDIT.

package addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/primemessages"
)

// GetOconusLocationReader is a Reader for the GetOconusLocation structure.
type GetOconusLocationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOconusLocationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOconusLocationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOconusLocationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOconusLocationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOconusLocationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOconusLocationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /addresses/oconus-lookup/{country}/{search}] getOconusLocation", response, response.Code())
	}
}

// NewGetOconusLocationOK creates a GetOconusLocationOK with default headers values
func NewGetOconusLocationOK() *GetOconusLocationOK {
	return &GetOconusLocationOK{}
}

/*
GetOconusLocationOK describes a response with status code 200, with default header values.

the requested list of Oconus city and principal division match
*/
type GetOconusLocationOK struct {
	Payload primemessages.VIntlLocations
}

// IsSuccess returns true when this get oconus location o k response has a 2xx status code
func (o *GetOconusLocationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get oconus location o k response has a 3xx status code
func (o *GetOconusLocationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oconus location o k response has a 4xx status code
func (o *GetOconusLocationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get oconus location o k response has a 5xx status code
func (o *GetOconusLocationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get oconus location o k response a status code equal to that given
func (o *GetOconusLocationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get oconus location o k response
func (o *GetOconusLocationOK) Code() int {
	return 200
}

func (o *GetOconusLocationOK) Error() string {
	return fmt.Sprintf("[GET /addresses/oconus-lookup/{country}/{search}][%d] getOconusLocationOK  %+v", 200, o.Payload)
}

func (o *GetOconusLocationOK) String() string {
	return fmt.Sprintf("[GET /addresses/oconus-lookup/{country}/{search}][%d] getOconusLocationOK  %+v", 200, o.Payload)
}

func (o *GetOconusLocationOK) GetPayload() primemessages.VIntlLocations {
	return o.Payload
}

func (o *GetOconusLocationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOconusLocationBadRequest creates a GetOconusLocationBadRequest with default headers values
func NewGetOconusLocationBadRequest() *GetOconusLocationBadRequest {
	return &GetOconusLocationBadRequest{}
}

/*
GetOconusLocationBadRequest describes a response with status code 400, with default header values.

The request payload is invalid.
*/
type GetOconusLocationBadRequest struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this get oconus location bad request response has a 2xx status code
func (o *GetOconusLocationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oconus location bad request response has a 3xx status code
func (o *GetOconusLocationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oconus location bad request response has a 4xx status code
func (o *GetOconusLocationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oconus location bad request response has a 5xx status code
func (o *GetOconusLocationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get oconus location bad request response a status code equal to that given
func (o *GetOconusLocationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get oconus location bad request response
func (o *GetOconusLocationBadRequest) Code() int {
	return 400
}

func (o *GetOconusLocationBadRequest) Error() string {
	return fmt.Sprintf("[GET /addresses/oconus-lookup/{country}/{search}][%d] getOconusLocationBadRequest  %+v", 400, o.Payload)
}

func (o *GetOconusLocationBadRequest) String() string {
	return fmt.Sprintf("[GET /addresses/oconus-lookup/{country}/{search}][%d] getOconusLocationBadRequest  %+v", 400, o.Payload)
}

func (o *GetOconusLocationBadRequest) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *GetOconusLocationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOconusLocationForbidden creates a GetOconusLocationForbidden with default headers values
func NewGetOconusLocationForbidden() *GetOconusLocationForbidden {
	return &GetOconusLocationForbidden{}
}

/*
GetOconusLocationForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type GetOconusLocationForbidden struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this get oconus location forbidden response has a 2xx status code
func (o *GetOconusLocationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oconus location forbidden response has a 3xx status code
func (o *GetOconusLocationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oconus location forbidden response has a 4xx status code
func (o *GetOconusLocationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oconus location forbidden response has a 5xx status code
func (o *GetOconusLocationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get oconus location forbidden response a status code equal to that given
func (o *GetOconusLocationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get oconus location forbidden response
func (o *GetOconusLocationForbidden) Code() int {
	return 403
}

func (o *GetOconusLocationForbidden) Error() string {
	return fmt.Sprintf("[GET /addresses/oconus-lookup/{country}/{search}][%d] getOconusLocationForbidden  %+v", 403, o.Payload)
}

func (o *GetOconusLocationForbidden) String() string {
	return fmt.Sprintf("[GET /addresses/oconus-lookup/{country}/{search}][%d] getOconusLocationForbidden  %+v", 403, o.Payload)
}

func (o *GetOconusLocationForbidden) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *GetOconusLocationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOconusLocationNotFound creates a GetOconusLocationNotFound with default headers values
func NewGetOconusLocationNotFound() *GetOconusLocationNotFound {
	return &GetOconusLocationNotFound{}
}

/*
GetOconusLocationNotFound describes a response with status code 404, with default header values.

The requested resource wasn't found.
*/
type GetOconusLocationNotFound struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this get oconus location not found response has a 2xx status code
func (o *GetOconusLocationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oconus location not found response has a 3xx status code
func (o *GetOconusLocationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oconus location not found response has a 4xx status code
func (o *GetOconusLocationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get oconus location not found response has a 5xx status code
func (o *GetOconusLocationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get oconus location not found response a status code equal to that given
func (o *GetOconusLocationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get oconus location not found response
func (o *GetOconusLocationNotFound) Code() int {
	return 404
}

func (o *GetOconusLocationNotFound) Error() string {
	return fmt.Sprintf("[GET /addresses/oconus-lookup/{country}/{search}][%d] getOconusLocationNotFound  %+v", 404, o.Payload)
}

func (o *GetOconusLocationNotFound) String() string {
	return fmt.Sprintf("[GET /addresses/oconus-lookup/{country}/{search}][%d] getOconusLocationNotFound  %+v", 404, o.Payload)
}

func (o *GetOconusLocationNotFound) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *GetOconusLocationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOconusLocationInternalServerError creates a GetOconusLocationInternalServerError with default headers values
func NewGetOconusLocationInternalServerError() *GetOconusLocationInternalServerError {
	return &GetOconusLocationInternalServerError{}
}

/*
GetOconusLocationInternalServerError describes a response with status code 500, with default header values.

A server error occurred.
*/
type GetOconusLocationInternalServerError struct {
	Payload *primemessages.Error
}

// IsSuccess returns true when this get oconus location internal server error response has a 2xx status code
func (o *GetOconusLocationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get oconus location internal server error response has a 3xx status code
func (o *GetOconusLocationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get oconus location internal server error response has a 4xx status code
func (o *GetOconusLocationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get oconus location internal server error response has a 5xx status code
func (o *GetOconusLocationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get oconus location internal server error response a status code equal to that given
func (o *GetOconusLocationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get oconus location internal server error response
func (o *GetOconusLocationInternalServerError) Code() int {
	return 500
}

func (o *GetOconusLocationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /addresses/oconus-lookup/{country}/{search}][%d] getOconusLocationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOconusLocationInternalServerError) String() string {
	return fmt.Sprintf("[GET /addresses/oconus-lookup/{country}/{search}][%d] getOconusLocationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOconusLocationInternalServerError) GetPayload() *primemessages.Error {
	return o.Payload
}

func (o *GetOconusLocationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
