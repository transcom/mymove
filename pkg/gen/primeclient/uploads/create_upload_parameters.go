// Code generated by go-swagger; DO NOT EDIT.

package uploads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateUploadParams creates a new CreateUploadParams object
// with the default values initialized.
func NewCreateUploadParams() *CreateUploadParams {
	var ()
	return &CreateUploadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateUploadParamsWithTimeout creates a new CreateUploadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateUploadParamsWithTimeout(timeout time.Duration) *CreateUploadParams {
	var ()
	return &CreateUploadParams{

		timeout: timeout,
	}
}

// NewCreateUploadParamsWithContext creates a new CreateUploadParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateUploadParamsWithContext(ctx context.Context) *CreateUploadParams {
	var ()
	return &CreateUploadParams{

		Context: ctx,
	}
}

// NewCreateUploadParamsWithHTTPClient creates a new CreateUploadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateUploadParamsWithHTTPClient(client *http.Client) *CreateUploadParams {
	var ()
	return &CreateUploadParams{
		HTTPClient: client,
	}
}

/*CreateUploadParams contains all the parameters to send to the API endpoint
for the create upload operation typically these are written to a http.Request
*/
type CreateUploadParams struct {

	/*File
	  The file to upload

	*/
	File runtime.NamedReadCloser
	/*PaymentRequestID
	  ID of payment request to use

	*/
	PaymentRequestID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create upload params
func (o *CreateUploadParams) WithTimeout(timeout time.Duration) *CreateUploadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create upload params
func (o *CreateUploadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create upload params
func (o *CreateUploadParams) WithContext(ctx context.Context) *CreateUploadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create upload params
func (o *CreateUploadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create upload params
func (o *CreateUploadParams) WithHTTPClient(client *http.Client) *CreateUploadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create upload params
func (o *CreateUploadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFile adds the file to the create upload params
func (o *CreateUploadParams) WithFile(file runtime.NamedReadCloser) *CreateUploadParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the create upload params
func (o *CreateUploadParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithPaymentRequestID adds the paymentRequestID to the create upload params
func (o *CreateUploadParams) WithPaymentRequestID(paymentRequestID string) *CreateUploadParams {
	o.SetPaymentRequestID(paymentRequestID)
	return o
}

// SetPaymentRequestID adds the paymentRequestId to the create upload params
func (o *CreateUploadParams) SetPaymentRequestID(paymentRequestID string) {
	o.PaymentRequestID = paymentRequestID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateUploadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	// path param paymentRequestID
	if err := r.SetPathParam("paymentRequestID", o.PaymentRequestID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
