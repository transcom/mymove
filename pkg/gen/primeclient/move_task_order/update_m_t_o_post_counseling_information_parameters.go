// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateMTOPostCounselingInformationParams creates a new UpdateMTOPostCounselingInformationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateMTOPostCounselingInformationParams() *UpdateMTOPostCounselingInformationParams {
	return &UpdateMTOPostCounselingInformationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateMTOPostCounselingInformationParamsWithTimeout creates a new UpdateMTOPostCounselingInformationParams object
// with the ability to set a timeout on a request.
func NewUpdateMTOPostCounselingInformationParamsWithTimeout(timeout time.Duration) *UpdateMTOPostCounselingInformationParams {
	return &UpdateMTOPostCounselingInformationParams{
		timeout: timeout,
	}
}

// NewUpdateMTOPostCounselingInformationParamsWithContext creates a new UpdateMTOPostCounselingInformationParams object
// with the ability to set a context for a request.
func NewUpdateMTOPostCounselingInformationParamsWithContext(ctx context.Context) *UpdateMTOPostCounselingInformationParams {
	return &UpdateMTOPostCounselingInformationParams{
		Context: ctx,
	}
}

// NewUpdateMTOPostCounselingInformationParamsWithHTTPClient creates a new UpdateMTOPostCounselingInformationParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateMTOPostCounselingInformationParamsWithHTTPClient(client *http.Client) *UpdateMTOPostCounselingInformationParams {
	return &UpdateMTOPostCounselingInformationParams{
		HTTPClient: client,
	}
}

/*
UpdateMTOPostCounselingInformationParams contains all the parameters to send to the API endpoint

	for the update m t o post counseling information operation.

	Typically these are written to a http.Request.
*/
type UpdateMTOPostCounselingInformationParams struct {

	/* IfMatch.

	   Optimistic locking is implemented via the `If-Match` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a `412 Precondition Failed` error.

	*/
	IfMatch string

	/* MoveTaskOrderID.

	   ID of move task order to use.
	*/
	MoveTaskOrderID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update m t o post counseling information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateMTOPostCounselingInformationParams) WithDefaults() *UpdateMTOPostCounselingInformationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update m t o post counseling information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateMTOPostCounselingInformationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update m t o post counseling information params
func (o *UpdateMTOPostCounselingInformationParams) WithTimeout(timeout time.Duration) *UpdateMTOPostCounselingInformationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update m t o post counseling information params
func (o *UpdateMTOPostCounselingInformationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update m t o post counseling information params
func (o *UpdateMTOPostCounselingInformationParams) WithContext(ctx context.Context) *UpdateMTOPostCounselingInformationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update m t o post counseling information params
func (o *UpdateMTOPostCounselingInformationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update m t o post counseling information params
func (o *UpdateMTOPostCounselingInformationParams) WithHTTPClient(client *http.Client) *UpdateMTOPostCounselingInformationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update m t o post counseling information params
func (o *UpdateMTOPostCounselingInformationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the update m t o post counseling information params
func (o *UpdateMTOPostCounselingInformationParams) WithIfMatch(ifMatch string) *UpdateMTOPostCounselingInformationParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the update m t o post counseling information params
func (o *UpdateMTOPostCounselingInformationParams) SetIfMatch(ifMatch string) {
	o.IfMatch = ifMatch
}

// WithMoveTaskOrderID adds the moveTaskOrderID to the update m t o post counseling information params
func (o *UpdateMTOPostCounselingInformationParams) WithMoveTaskOrderID(moveTaskOrderID string) *UpdateMTOPostCounselingInformationParams {
	o.SetMoveTaskOrderID(moveTaskOrderID)
	return o
}

// SetMoveTaskOrderID adds the moveTaskOrderId to the update m t o post counseling information params
func (o *UpdateMTOPostCounselingInformationParams) SetMoveTaskOrderID(moveTaskOrderID string) {
	o.MoveTaskOrderID = moveTaskOrderID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateMTOPostCounselingInformationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param If-Match
	if err := r.SetHeaderParam("If-Match", o.IfMatch); err != nil {
		return err
	}

	// path param moveTaskOrderID
	if err := r.SetPathParam("moveTaskOrderID", o.MoveTaskOrderID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
