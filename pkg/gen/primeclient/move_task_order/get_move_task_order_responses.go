// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/primemessages"
)

// GetMoveTaskOrderReader is a Reader for the GetMoveTaskOrder structure.
type GetMoveTaskOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMoveTaskOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMoveTaskOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetMoveTaskOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMoveTaskOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMoveTaskOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetMoveTaskOrderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetMoveTaskOrderOK creates a GetMoveTaskOrderOK with default headers values
func NewGetMoveTaskOrderOK() *GetMoveTaskOrderOK {
	return &GetMoveTaskOrderOK{}
}

/*GetMoveTaskOrderOK handles this case with default header values.

Successfully retrieve an individual move task order.
*/
type GetMoveTaskOrderOK struct {
	Payload *primemessages.MoveTaskOrder
}

func (o *GetMoveTaskOrderOK) Error() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderOK  %+v", 200, o.Payload)
}

func (o *GetMoveTaskOrderOK) GetPayload() *primemessages.MoveTaskOrder {
	return o.Payload
}

func (o *GetMoveTaskOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.MoveTaskOrder)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMoveTaskOrderUnauthorized creates a GetMoveTaskOrderUnauthorized with default headers values
func NewGetMoveTaskOrderUnauthorized() *GetMoveTaskOrderUnauthorized {
	return &GetMoveTaskOrderUnauthorized{}
}

/*GetMoveTaskOrderUnauthorized handles this case with default header values.

The request was denied.
*/
type GetMoveTaskOrderUnauthorized struct {
	Payload *primemessages.ClientError
}

func (o *GetMoveTaskOrderUnauthorized) Error() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderUnauthorized  %+v", 401, o.Payload)
}

func (o *GetMoveTaskOrderUnauthorized) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *GetMoveTaskOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMoveTaskOrderForbidden creates a GetMoveTaskOrderForbidden with default headers values
func NewGetMoveTaskOrderForbidden() *GetMoveTaskOrderForbidden {
	return &GetMoveTaskOrderForbidden{}
}

/*GetMoveTaskOrderForbidden handles this case with default header values.

The request was denied.
*/
type GetMoveTaskOrderForbidden struct {
	Payload *primemessages.ClientError
}

func (o *GetMoveTaskOrderForbidden) Error() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderForbidden  %+v", 403, o.Payload)
}

func (o *GetMoveTaskOrderForbidden) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *GetMoveTaskOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMoveTaskOrderNotFound creates a GetMoveTaskOrderNotFound with default headers values
func NewGetMoveTaskOrderNotFound() *GetMoveTaskOrderNotFound {
	return &GetMoveTaskOrderNotFound{}
}

/*GetMoveTaskOrderNotFound handles this case with default header values.

The requested resource wasn't found.
*/
type GetMoveTaskOrderNotFound struct {
	Payload *primemessages.ClientError
}

func (o *GetMoveTaskOrderNotFound) Error() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderNotFound  %+v", 404, o.Payload)
}

func (o *GetMoveTaskOrderNotFound) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *GetMoveTaskOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMoveTaskOrderInternalServerError creates a GetMoveTaskOrderInternalServerError with default headers values
func NewGetMoveTaskOrderInternalServerError() *GetMoveTaskOrderInternalServerError {
	return &GetMoveTaskOrderInternalServerError{}
}

/*GetMoveTaskOrderInternalServerError handles this case with default header values.

A server error occurred.
*/
type GetMoveTaskOrderInternalServerError struct {
	Payload *primemessages.Error
}

func (o *GetMoveTaskOrderInternalServerError) Error() string {
	return fmt.Sprintf("[GET /move-task-orders/{moveTaskOrderID}][%d] getMoveTaskOrderInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMoveTaskOrderInternalServerError) GetPayload() *primemessages.Error {
	return o.Payload
}

func (o *GetMoveTaskOrderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
