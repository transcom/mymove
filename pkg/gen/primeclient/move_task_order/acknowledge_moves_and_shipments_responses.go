// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/primemessages"
)

// AcknowledgeMovesAndShipmentsReader is a Reader for the AcknowledgeMovesAndShipments structure.
type AcknowledgeMovesAndShipmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcknowledgeMovesAndShipmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAcknowledgeMovesAndShipmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAcknowledgeMovesAndShipmentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAcknowledgeMovesAndShipmentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAcknowledgeMovesAndShipmentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAcknowledgeMovesAndShipmentsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewAcknowledgeMovesAndShipmentsPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAcknowledgeMovesAndShipmentsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAcknowledgeMovesAndShipmentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /move-task-orders/acknowledge] acknowledgeMovesAndShipments", response, response.Code())
	}
}

// NewAcknowledgeMovesAndShipmentsOK creates a AcknowledgeMovesAndShipmentsOK with default headers values
func NewAcknowledgeMovesAndShipmentsOK() *AcknowledgeMovesAndShipmentsOK {
	return &AcknowledgeMovesAndShipmentsOK{}
}

/*
AcknowledgeMovesAndShipmentsOK describes a response with status code 200, with default header values.

Successfully updated Move and Shipment Acknowledgements.
*/
type AcknowledgeMovesAndShipmentsOK struct {
	Payload *primemessages.AcknowledgeMovesShipmentsSuccessResponse
}

// IsSuccess returns true when this acknowledge moves and shipments o k response has a 2xx status code
func (o *AcknowledgeMovesAndShipmentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this acknowledge moves and shipments o k response has a 3xx status code
func (o *AcknowledgeMovesAndShipmentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this acknowledge moves and shipments o k response has a 4xx status code
func (o *AcknowledgeMovesAndShipmentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this acknowledge moves and shipments o k response has a 5xx status code
func (o *AcknowledgeMovesAndShipmentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this acknowledge moves and shipments o k response a status code equal to that given
func (o *AcknowledgeMovesAndShipmentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the acknowledge moves and shipments o k response
func (o *AcknowledgeMovesAndShipmentsOK) Code() int {
	return 200
}

func (o *AcknowledgeMovesAndShipmentsOK) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsOK  %+v", 200, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsOK) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsOK  %+v", 200, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsOK) GetPayload() *primemessages.AcknowledgeMovesShipmentsSuccessResponse {
	return o.Payload
}

func (o *AcknowledgeMovesAndShipmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.AcknowledgeMovesShipmentsSuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcknowledgeMovesAndShipmentsUnauthorized creates a AcknowledgeMovesAndShipmentsUnauthorized with default headers values
func NewAcknowledgeMovesAndShipmentsUnauthorized() *AcknowledgeMovesAndShipmentsUnauthorized {
	return &AcknowledgeMovesAndShipmentsUnauthorized{}
}

/*
AcknowledgeMovesAndShipmentsUnauthorized describes a response with status code 401, with default header values.

The request was denied.
*/
type AcknowledgeMovesAndShipmentsUnauthorized struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this acknowledge moves and shipments unauthorized response has a 2xx status code
func (o *AcknowledgeMovesAndShipmentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this acknowledge moves and shipments unauthorized response has a 3xx status code
func (o *AcknowledgeMovesAndShipmentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this acknowledge moves and shipments unauthorized response has a 4xx status code
func (o *AcknowledgeMovesAndShipmentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this acknowledge moves and shipments unauthorized response has a 5xx status code
func (o *AcknowledgeMovesAndShipmentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this acknowledge moves and shipments unauthorized response a status code equal to that given
func (o *AcknowledgeMovesAndShipmentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the acknowledge moves and shipments unauthorized response
func (o *AcknowledgeMovesAndShipmentsUnauthorized) Code() int {
	return 401
}

func (o *AcknowledgeMovesAndShipmentsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsUnauthorized  %+v", 401, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsUnauthorized  %+v", 401, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsUnauthorized) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *AcknowledgeMovesAndShipmentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcknowledgeMovesAndShipmentsForbidden creates a AcknowledgeMovesAndShipmentsForbidden with default headers values
func NewAcknowledgeMovesAndShipmentsForbidden() *AcknowledgeMovesAndShipmentsForbidden {
	return &AcknowledgeMovesAndShipmentsForbidden{}
}

/*
AcknowledgeMovesAndShipmentsForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type AcknowledgeMovesAndShipmentsForbidden struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this acknowledge moves and shipments forbidden response has a 2xx status code
func (o *AcknowledgeMovesAndShipmentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this acknowledge moves and shipments forbidden response has a 3xx status code
func (o *AcknowledgeMovesAndShipmentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this acknowledge moves and shipments forbidden response has a 4xx status code
func (o *AcknowledgeMovesAndShipmentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this acknowledge moves and shipments forbidden response has a 5xx status code
func (o *AcknowledgeMovesAndShipmentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this acknowledge moves and shipments forbidden response a status code equal to that given
func (o *AcknowledgeMovesAndShipmentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the acknowledge moves and shipments forbidden response
func (o *AcknowledgeMovesAndShipmentsForbidden) Code() int {
	return 403
}

func (o *AcknowledgeMovesAndShipmentsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsForbidden  %+v", 403, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsForbidden) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsForbidden  %+v", 403, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsForbidden) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *AcknowledgeMovesAndShipmentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcknowledgeMovesAndShipmentsNotFound creates a AcknowledgeMovesAndShipmentsNotFound with default headers values
func NewAcknowledgeMovesAndShipmentsNotFound() *AcknowledgeMovesAndShipmentsNotFound {
	return &AcknowledgeMovesAndShipmentsNotFound{}
}

/*
AcknowledgeMovesAndShipmentsNotFound describes a response with status code 404, with default header values.

The requested resource wasn't found.
*/
type AcknowledgeMovesAndShipmentsNotFound struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this acknowledge moves and shipments not found response has a 2xx status code
func (o *AcknowledgeMovesAndShipmentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this acknowledge moves and shipments not found response has a 3xx status code
func (o *AcknowledgeMovesAndShipmentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this acknowledge moves and shipments not found response has a 4xx status code
func (o *AcknowledgeMovesAndShipmentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this acknowledge moves and shipments not found response has a 5xx status code
func (o *AcknowledgeMovesAndShipmentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this acknowledge moves and shipments not found response a status code equal to that given
func (o *AcknowledgeMovesAndShipmentsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the acknowledge moves and shipments not found response
func (o *AcknowledgeMovesAndShipmentsNotFound) Code() int {
	return 404
}

func (o *AcknowledgeMovesAndShipmentsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsNotFound  %+v", 404, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsNotFound) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsNotFound  %+v", 404, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsNotFound) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *AcknowledgeMovesAndShipmentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcknowledgeMovesAndShipmentsConflict creates a AcknowledgeMovesAndShipmentsConflict with default headers values
func NewAcknowledgeMovesAndShipmentsConflict() *AcknowledgeMovesAndShipmentsConflict {
	return &AcknowledgeMovesAndShipmentsConflict{}
}

/*
AcknowledgeMovesAndShipmentsConflict describes a response with status code 409, with default header values.

The request could not be processed because of conflict in the current state of the resource.
*/
type AcknowledgeMovesAndShipmentsConflict struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this acknowledge moves and shipments conflict response has a 2xx status code
func (o *AcknowledgeMovesAndShipmentsConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this acknowledge moves and shipments conflict response has a 3xx status code
func (o *AcknowledgeMovesAndShipmentsConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this acknowledge moves and shipments conflict response has a 4xx status code
func (o *AcknowledgeMovesAndShipmentsConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this acknowledge moves and shipments conflict response has a 5xx status code
func (o *AcknowledgeMovesAndShipmentsConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this acknowledge moves and shipments conflict response a status code equal to that given
func (o *AcknowledgeMovesAndShipmentsConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the acknowledge moves and shipments conflict response
func (o *AcknowledgeMovesAndShipmentsConflict) Code() int {
	return 409
}

func (o *AcknowledgeMovesAndShipmentsConflict) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsConflict  %+v", 409, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsConflict) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsConflict  %+v", 409, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsConflict) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *AcknowledgeMovesAndShipmentsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcknowledgeMovesAndShipmentsPreconditionFailed creates a AcknowledgeMovesAndShipmentsPreconditionFailed with default headers values
func NewAcknowledgeMovesAndShipmentsPreconditionFailed() *AcknowledgeMovesAndShipmentsPreconditionFailed {
	return &AcknowledgeMovesAndShipmentsPreconditionFailed{}
}

/*
AcknowledgeMovesAndShipmentsPreconditionFailed describes a response with status code 412, with default header values.

Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
*/
type AcknowledgeMovesAndShipmentsPreconditionFailed struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this acknowledge moves and shipments precondition failed response has a 2xx status code
func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this acknowledge moves and shipments precondition failed response has a 3xx status code
func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this acknowledge moves and shipments precondition failed response has a 4xx status code
func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this acknowledge moves and shipments precondition failed response has a 5xx status code
func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this acknowledge moves and shipments precondition failed response a status code equal to that given
func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the acknowledge moves and shipments precondition failed response
func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) Code() int {
	return 412
}

func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *AcknowledgeMovesAndShipmentsPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcknowledgeMovesAndShipmentsUnprocessableEntity creates a AcknowledgeMovesAndShipmentsUnprocessableEntity with default headers values
func NewAcknowledgeMovesAndShipmentsUnprocessableEntity() *AcknowledgeMovesAndShipmentsUnprocessableEntity {
	return &AcknowledgeMovesAndShipmentsUnprocessableEntity{}
}

/*
AcknowledgeMovesAndShipmentsUnprocessableEntity describes a response with status code 422, with default header values.

The request was unprocessable, likely due to bad input from the requester.
*/
type AcknowledgeMovesAndShipmentsUnprocessableEntity struct {
	Payload *primemessages.ValidationError
}

// IsSuccess returns true when this acknowledge moves and shipments unprocessable entity response has a 2xx status code
func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this acknowledge moves and shipments unprocessable entity response has a 3xx status code
func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this acknowledge moves and shipments unprocessable entity response has a 4xx status code
func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this acknowledge moves and shipments unprocessable entity response has a 5xx status code
func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this acknowledge moves and shipments unprocessable entity response a status code equal to that given
func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the acknowledge moves and shipments unprocessable entity response
func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) Code() int {
	return 422
}

func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) GetPayload() *primemessages.ValidationError {
	return o.Payload
}

func (o *AcknowledgeMovesAndShipmentsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcknowledgeMovesAndShipmentsInternalServerError creates a AcknowledgeMovesAndShipmentsInternalServerError with default headers values
func NewAcknowledgeMovesAndShipmentsInternalServerError() *AcknowledgeMovesAndShipmentsInternalServerError {
	return &AcknowledgeMovesAndShipmentsInternalServerError{}
}

/*
AcknowledgeMovesAndShipmentsInternalServerError describes a response with status code 500, with default header values.

A server error occurred.
*/
type AcknowledgeMovesAndShipmentsInternalServerError struct {
	Payload *primemessages.Error
}

// IsSuccess returns true when this acknowledge moves and shipments internal server error response has a 2xx status code
func (o *AcknowledgeMovesAndShipmentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this acknowledge moves and shipments internal server error response has a 3xx status code
func (o *AcknowledgeMovesAndShipmentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this acknowledge moves and shipments internal server error response has a 4xx status code
func (o *AcknowledgeMovesAndShipmentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this acknowledge moves and shipments internal server error response has a 5xx status code
func (o *AcknowledgeMovesAndShipmentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this acknowledge moves and shipments internal server error response a status code equal to that given
func (o *AcknowledgeMovesAndShipmentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the acknowledge moves and shipments internal server error response
func (o *AcknowledgeMovesAndShipmentsInternalServerError) Code() int {
	return 500
}

func (o *AcknowledgeMovesAndShipmentsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsInternalServerError  %+v", 500, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /move-task-orders/acknowledge][%d] acknowledgeMovesAndShipmentsInternalServerError  %+v", 500, o.Payload)
}

func (o *AcknowledgeMovesAndShipmentsInternalServerError) GetPayload() *primemessages.Error {
	return o.Payload
}

func (o *AcknowledgeMovesAndShipmentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
