// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListMovesParams creates a new ListMovesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListMovesParams() *ListMovesParams {
	return &ListMovesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListMovesParamsWithTimeout creates a new ListMovesParams object
// with the ability to set a timeout on a request.
func NewListMovesParamsWithTimeout(timeout time.Duration) *ListMovesParams {
	return &ListMovesParams{
		timeout: timeout,
	}
}

// NewListMovesParamsWithContext creates a new ListMovesParams object
// with the ability to set a context for a request.
func NewListMovesParamsWithContext(ctx context.Context) *ListMovesParams {
	return &ListMovesParams{
		Context: ctx,
	}
}

// NewListMovesParamsWithHTTPClient creates a new ListMovesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListMovesParamsWithHTTPClient(client *http.Client) *ListMovesParams {
	return &ListMovesParams{
		HTTPClient: client,
	}
}

/*
ListMovesParams contains all the parameters to send to the API endpoint

	for the list moves operation.

	Typically these are written to a http.Request.
*/
type ListMovesParams struct {

	/* Acknowledged.

	   When set to true, only moves where both the move and all its shipments are acknowledged will be included in the results. When set to false, only moves where either the move or any one (or more) of its shipments are NOT acknowledged will be included in the results.
	*/
	Acknowledged *bool

	/* AcknowledgedAfter.

	   Only return moves where the move or any one (or more) of its shipments was acknowledged after this time. Formatted like "2021-07-23T18:30:47.116Z"

	   Format: date-time
	*/
	AcknowledgedAfter *strfmt.DateTime

	/* AcknowledgedBefore.

	   Only return moves where the move or any one (or more) of its shipments was acknowledged before this time. Formatted like "2021-07-23T18:30:47.116Z"

	   Format: date-time
	*/
	AcknowledgedBefore *strfmt.DateTime

	/* Since.

	   Only return moves updated since this time. Formatted like "2021-07-23T18:30:47.116Z"

	   Format: date-time
	*/
	Since *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list moves params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListMovesParams) WithDefaults() *ListMovesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list moves params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListMovesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list moves params
func (o *ListMovesParams) WithTimeout(timeout time.Duration) *ListMovesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list moves params
func (o *ListMovesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list moves params
func (o *ListMovesParams) WithContext(ctx context.Context) *ListMovesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list moves params
func (o *ListMovesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list moves params
func (o *ListMovesParams) WithHTTPClient(client *http.Client) *ListMovesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list moves params
func (o *ListMovesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcknowledged adds the acknowledged to the list moves params
func (o *ListMovesParams) WithAcknowledged(acknowledged *bool) *ListMovesParams {
	o.SetAcknowledged(acknowledged)
	return o
}

// SetAcknowledged adds the acknowledged to the list moves params
func (o *ListMovesParams) SetAcknowledged(acknowledged *bool) {
	o.Acknowledged = acknowledged
}

// WithAcknowledgedAfter adds the acknowledgedAfter to the list moves params
func (o *ListMovesParams) WithAcknowledgedAfter(acknowledgedAfter *strfmt.DateTime) *ListMovesParams {
	o.SetAcknowledgedAfter(acknowledgedAfter)
	return o
}

// SetAcknowledgedAfter adds the acknowledgedAfter to the list moves params
func (o *ListMovesParams) SetAcknowledgedAfter(acknowledgedAfter *strfmt.DateTime) {
	o.AcknowledgedAfter = acknowledgedAfter
}

// WithAcknowledgedBefore adds the acknowledgedBefore to the list moves params
func (o *ListMovesParams) WithAcknowledgedBefore(acknowledgedBefore *strfmt.DateTime) *ListMovesParams {
	o.SetAcknowledgedBefore(acknowledgedBefore)
	return o
}

// SetAcknowledgedBefore adds the acknowledgedBefore to the list moves params
func (o *ListMovesParams) SetAcknowledgedBefore(acknowledgedBefore *strfmt.DateTime) {
	o.AcknowledgedBefore = acknowledgedBefore
}

// WithSince adds the since to the list moves params
func (o *ListMovesParams) WithSince(since *strfmt.DateTime) *ListMovesParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the list moves params
func (o *ListMovesParams) SetSince(since *strfmt.DateTime) {
	o.Since = since
}

// WriteToRequest writes these params to a swagger request
func (o *ListMovesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Acknowledged != nil {

		// query param acknowledged
		var qrAcknowledged bool

		if o.Acknowledged != nil {
			qrAcknowledged = *o.Acknowledged
		}
		qAcknowledged := swag.FormatBool(qrAcknowledged)
		if qAcknowledged != "" {

			if err := r.SetQueryParam("acknowledged", qAcknowledged); err != nil {
				return err
			}
		}
	}

	if o.AcknowledgedAfter != nil {

		// query param acknowledgedAfter
		var qrAcknowledgedAfter strfmt.DateTime

		if o.AcknowledgedAfter != nil {
			qrAcknowledgedAfter = *o.AcknowledgedAfter
		}
		qAcknowledgedAfter := qrAcknowledgedAfter.String()
		if qAcknowledgedAfter != "" {

			if err := r.SetQueryParam("acknowledgedAfter", qAcknowledgedAfter); err != nil {
				return err
			}
		}
	}

	if o.AcknowledgedBefore != nil {

		// query param acknowledgedBefore
		var qrAcknowledgedBefore strfmt.DateTime

		if o.AcknowledgedBefore != nil {
			qrAcknowledgedBefore = *o.AcknowledgedBefore
		}
		qAcknowledgedBefore := qrAcknowledgedBefore.String()
		if qAcknowledgedBefore != "" {

			if err := r.SetQueryParam("acknowledgedBefore", qAcknowledgedBefore); err != nil {
				return err
			}
		}
	}

	if o.Since != nil {

		// query param since
		var qrSince strfmt.DateTime

		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := qrSince.String()
		if qSince != "" {

			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
