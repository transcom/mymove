// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/primemessages"
)

// UpdateSITDeliveryRequestReader is a Reader for the UpdateSITDeliveryRequest structure.
type UpdateSITDeliveryRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSITDeliveryRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSITDeliveryRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSITDeliveryRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSITDeliveryRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateSITDeliveryRequestPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSITDeliveryRequestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /mto-shipments/{mtoShipmentID}/sit-delivery] updateSITDeliveryRequest", response, response.Code())
	}
}

// NewUpdateSITDeliveryRequestOK creates a UpdateSITDeliveryRequestOK with default headers values
func NewUpdateSITDeliveryRequestOK() *UpdateSITDeliveryRequestOK {
	return &UpdateSITDeliveryRequestOK{}
}

/*
UpdateSITDeliveryRequestOK describes a response with status code 200, with default header values.

Successfully updated the shipment's authorized end date.
*/
type UpdateSITDeliveryRequestOK struct {
	Payload *primemessages.SITStatus
}

// IsSuccess returns true when this update s i t delivery request o k response has a 2xx status code
func (o *UpdateSITDeliveryRequestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update s i t delivery request o k response has a 3xx status code
func (o *UpdateSITDeliveryRequestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update s i t delivery request o k response has a 4xx status code
func (o *UpdateSITDeliveryRequestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update s i t delivery request o k response has a 5xx status code
func (o *UpdateSITDeliveryRequestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update s i t delivery request o k response a status code equal to that given
func (o *UpdateSITDeliveryRequestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update s i t delivery request o k response
func (o *UpdateSITDeliveryRequestOK) Code() int {
	return 200
}

func (o *UpdateSITDeliveryRequestOK) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/sit-delivery][%d] updateSITDeliveryRequestOK  %+v", 200, o.Payload)
}

func (o *UpdateSITDeliveryRequestOK) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/sit-delivery][%d] updateSITDeliveryRequestOK  %+v", 200, o.Payload)
}

func (o *UpdateSITDeliveryRequestOK) GetPayload() *primemessages.SITStatus {
	return o.Payload
}

func (o *UpdateSITDeliveryRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.SITStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSITDeliveryRequestBadRequest creates a UpdateSITDeliveryRequestBadRequest with default headers values
func NewUpdateSITDeliveryRequestBadRequest() *UpdateSITDeliveryRequestBadRequest {
	return &UpdateSITDeliveryRequestBadRequest{}
}

/*
UpdateSITDeliveryRequestBadRequest describes a response with status code 400, with default header values.

The request payload is invalid.
*/
type UpdateSITDeliveryRequestBadRequest struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update s i t delivery request bad request response has a 2xx status code
func (o *UpdateSITDeliveryRequestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update s i t delivery request bad request response has a 3xx status code
func (o *UpdateSITDeliveryRequestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update s i t delivery request bad request response has a 4xx status code
func (o *UpdateSITDeliveryRequestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update s i t delivery request bad request response has a 5xx status code
func (o *UpdateSITDeliveryRequestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update s i t delivery request bad request response a status code equal to that given
func (o *UpdateSITDeliveryRequestBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update s i t delivery request bad request response
func (o *UpdateSITDeliveryRequestBadRequest) Code() int {
	return 400
}

func (o *UpdateSITDeliveryRequestBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/sit-delivery][%d] updateSITDeliveryRequestBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSITDeliveryRequestBadRequest) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/sit-delivery][%d] updateSITDeliveryRequestBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSITDeliveryRequestBadRequest) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateSITDeliveryRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSITDeliveryRequestNotFound creates a UpdateSITDeliveryRequestNotFound with default headers values
func NewUpdateSITDeliveryRequestNotFound() *UpdateSITDeliveryRequestNotFound {
	return &UpdateSITDeliveryRequestNotFound{}
}

/*
UpdateSITDeliveryRequestNotFound describes a response with status code 404, with default header values.

The requested resource wasn't found.
*/
type UpdateSITDeliveryRequestNotFound struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update s i t delivery request not found response has a 2xx status code
func (o *UpdateSITDeliveryRequestNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update s i t delivery request not found response has a 3xx status code
func (o *UpdateSITDeliveryRequestNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update s i t delivery request not found response has a 4xx status code
func (o *UpdateSITDeliveryRequestNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update s i t delivery request not found response has a 5xx status code
func (o *UpdateSITDeliveryRequestNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update s i t delivery request not found response a status code equal to that given
func (o *UpdateSITDeliveryRequestNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update s i t delivery request not found response
func (o *UpdateSITDeliveryRequestNotFound) Code() int {
	return 404
}

func (o *UpdateSITDeliveryRequestNotFound) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/sit-delivery][%d] updateSITDeliveryRequestNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSITDeliveryRequestNotFound) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/sit-delivery][%d] updateSITDeliveryRequestNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSITDeliveryRequestNotFound) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateSITDeliveryRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSITDeliveryRequestPreconditionFailed creates a UpdateSITDeliveryRequestPreconditionFailed with default headers values
func NewUpdateSITDeliveryRequestPreconditionFailed() *UpdateSITDeliveryRequestPreconditionFailed {
	return &UpdateSITDeliveryRequestPreconditionFailed{}
}

/*
UpdateSITDeliveryRequestPreconditionFailed describes a response with status code 412, with default header values.

Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
*/
type UpdateSITDeliveryRequestPreconditionFailed struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update s i t delivery request precondition failed response has a 2xx status code
func (o *UpdateSITDeliveryRequestPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update s i t delivery request precondition failed response has a 3xx status code
func (o *UpdateSITDeliveryRequestPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update s i t delivery request precondition failed response has a 4xx status code
func (o *UpdateSITDeliveryRequestPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update s i t delivery request precondition failed response has a 5xx status code
func (o *UpdateSITDeliveryRequestPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this update s i t delivery request precondition failed response a status code equal to that given
func (o *UpdateSITDeliveryRequestPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the update s i t delivery request precondition failed response
func (o *UpdateSITDeliveryRequestPreconditionFailed) Code() int {
	return 412
}

func (o *UpdateSITDeliveryRequestPreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/sit-delivery][%d] updateSITDeliveryRequestPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateSITDeliveryRequestPreconditionFailed) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/sit-delivery][%d] updateSITDeliveryRequestPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateSITDeliveryRequestPreconditionFailed) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateSITDeliveryRequestPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSITDeliveryRequestInternalServerError creates a UpdateSITDeliveryRequestInternalServerError with default headers values
func NewUpdateSITDeliveryRequestInternalServerError() *UpdateSITDeliveryRequestInternalServerError {
	return &UpdateSITDeliveryRequestInternalServerError{}
}

/*
UpdateSITDeliveryRequestInternalServerError describes a response with status code 500, with default header values.

A server error occurred.
*/
type UpdateSITDeliveryRequestInternalServerError struct {
	Payload *primemessages.Error
}

// IsSuccess returns true when this update s i t delivery request internal server error response has a 2xx status code
func (o *UpdateSITDeliveryRequestInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update s i t delivery request internal server error response has a 3xx status code
func (o *UpdateSITDeliveryRequestInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update s i t delivery request internal server error response has a 4xx status code
func (o *UpdateSITDeliveryRequestInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update s i t delivery request internal server error response has a 5xx status code
func (o *UpdateSITDeliveryRequestInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update s i t delivery request internal server error response a status code equal to that given
func (o *UpdateSITDeliveryRequestInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update s i t delivery request internal server error response
func (o *UpdateSITDeliveryRequestInternalServerError) Code() int {
	return 500
}

func (o *UpdateSITDeliveryRequestInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/sit-delivery][%d] updateSITDeliveryRequestInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSITDeliveryRequestInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /mto-shipments/{mtoShipmentID}/sit-delivery][%d] updateSITDeliveryRequestInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSITDeliveryRequestInternalServerError) GetPayload() *primemessages.Error {
	return o.Payload
}

func (o *UpdateSITDeliveryRequestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
