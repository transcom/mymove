// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/primemessages"
)

// UpdateMTOAgentReader is a Reader for the UpdateMTOAgent structure.
type UpdateMTOAgentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMTOAgentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateMTOAgentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateMTOAgentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateMTOAgentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateMTOAgentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateMTOAgentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateMTOAgentPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateMTOAgentUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateMTOAgentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}] updateMTOAgent", response, response.Code())
	}
}

// NewUpdateMTOAgentOK creates a UpdateMTOAgentOK with default headers values
func NewUpdateMTOAgentOK() *UpdateMTOAgentOK {
	return &UpdateMTOAgentOK{}
}

/*
UpdateMTOAgentOK describes a response with status code 200, with default header values.

Successfully updated the agent.
*/
type UpdateMTOAgentOK struct {
	Payload *primemessages.MTOAgent
}

// IsSuccess returns true when this update m t o agent o k response has a 2xx status code
func (o *UpdateMTOAgentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update m t o agent o k response has a 3xx status code
func (o *UpdateMTOAgentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o agent o k response has a 4xx status code
func (o *UpdateMTOAgentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update m t o agent o k response has a 5xx status code
func (o *UpdateMTOAgentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o agent o k response a status code equal to that given
func (o *UpdateMTOAgentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update m t o agent o k response
func (o *UpdateMTOAgentOK) Code() int {
	return 200
}

func (o *UpdateMTOAgentOK) Error() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentOK  %+v", 200, o.Payload)
}

func (o *UpdateMTOAgentOK) String() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentOK  %+v", 200, o.Payload)
}

func (o *UpdateMTOAgentOK) GetPayload() *primemessages.MTOAgent {
	return o.Payload
}

func (o *UpdateMTOAgentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.MTOAgent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOAgentBadRequest creates a UpdateMTOAgentBadRequest with default headers values
func NewUpdateMTOAgentBadRequest() *UpdateMTOAgentBadRequest {
	return &UpdateMTOAgentBadRequest{}
}

/*
UpdateMTOAgentBadRequest describes a response with status code 400, with default header values.

The request payload is invalid.
*/
type UpdateMTOAgentBadRequest struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update m t o agent bad request response has a 2xx status code
func (o *UpdateMTOAgentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o agent bad request response has a 3xx status code
func (o *UpdateMTOAgentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o agent bad request response has a 4xx status code
func (o *UpdateMTOAgentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o agent bad request response has a 5xx status code
func (o *UpdateMTOAgentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o agent bad request response a status code equal to that given
func (o *UpdateMTOAgentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update m t o agent bad request response
func (o *UpdateMTOAgentBadRequest) Code() int {
	return 400
}

func (o *UpdateMTOAgentBadRequest) Error() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMTOAgentBadRequest) String() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMTOAgentBadRequest) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOAgentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOAgentUnauthorized creates a UpdateMTOAgentUnauthorized with default headers values
func NewUpdateMTOAgentUnauthorized() *UpdateMTOAgentUnauthorized {
	return &UpdateMTOAgentUnauthorized{}
}

/*
UpdateMTOAgentUnauthorized describes a response with status code 401, with default header values.

The request was denied.
*/
type UpdateMTOAgentUnauthorized struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update m t o agent unauthorized response has a 2xx status code
func (o *UpdateMTOAgentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o agent unauthorized response has a 3xx status code
func (o *UpdateMTOAgentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o agent unauthorized response has a 4xx status code
func (o *UpdateMTOAgentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o agent unauthorized response has a 5xx status code
func (o *UpdateMTOAgentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o agent unauthorized response a status code equal to that given
func (o *UpdateMTOAgentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update m t o agent unauthorized response
func (o *UpdateMTOAgentUnauthorized) Code() int {
	return 401
}

func (o *UpdateMTOAgentUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateMTOAgentUnauthorized) String() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateMTOAgentUnauthorized) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOAgentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOAgentForbidden creates a UpdateMTOAgentForbidden with default headers values
func NewUpdateMTOAgentForbidden() *UpdateMTOAgentForbidden {
	return &UpdateMTOAgentForbidden{}
}

/*
UpdateMTOAgentForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type UpdateMTOAgentForbidden struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update m t o agent forbidden response has a 2xx status code
func (o *UpdateMTOAgentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o agent forbidden response has a 3xx status code
func (o *UpdateMTOAgentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o agent forbidden response has a 4xx status code
func (o *UpdateMTOAgentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o agent forbidden response has a 5xx status code
func (o *UpdateMTOAgentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o agent forbidden response a status code equal to that given
func (o *UpdateMTOAgentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update m t o agent forbidden response
func (o *UpdateMTOAgentForbidden) Code() int {
	return 403
}

func (o *UpdateMTOAgentForbidden) Error() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentForbidden  %+v", 403, o.Payload)
}

func (o *UpdateMTOAgentForbidden) String() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentForbidden  %+v", 403, o.Payload)
}

func (o *UpdateMTOAgentForbidden) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOAgentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOAgentNotFound creates a UpdateMTOAgentNotFound with default headers values
func NewUpdateMTOAgentNotFound() *UpdateMTOAgentNotFound {
	return &UpdateMTOAgentNotFound{}
}

/*
UpdateMTOAgentNotFound describes a response with status code 404, with default header values.

The requested resource wasn't found.
*/
type UpdateMTOAgentNotFound struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update m t o agent not found response has a 2xx status code
func (o *UpdateMTOAgentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o agent not found response has a 3xx status code
func (o *UpdateMTOAgentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o agent not found response has a 4xx status code
func (o *UpdateMTOAgentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o agent not found response has a 5xx status code
func (o *UpdateMTOAgentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o agent not found response a status code equal to that given
func (o *UpdateMTOAgentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update m t o agent not found response
func (o *UpdateMTOAgentNotFound) Code() int {
	return 404
}

func (o *UpdateMTOAgentNotFound) Error() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMTOAgentNotFound) String() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMTOAgentNotFound) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOAgentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOAgentPreconditionFailed creates a UpdateMTOAgentPreconditionFailed with default headers values
func NewUpdateMTOAgentPreconditionFailed() *UpdateMTOAgentPreconditionFailed {
	return &UpdateMTOAgentPreconditionFailed{}
}

/*
UpdateMTOAgentPreconditionFailed describes a response with status code 412, with default header values.

Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
*/
type UpdateMTOAgentPreconditionFailed struct {
	Payload *primemessages.ClientError
}

// IsSuccess returns true when this update m t o agent precondition failed response has a 2xx status code
func (o *UpdateMTOAgentPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o agent precondition failed response has a 3xx status code
func (o *UpdateMTOAgentPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o agent precondition failed response has a 4xx status code
func (o *UpdateMTOAgentPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o agent precondition failed response has a 5xx status code
func (o *UpdateMTOAgentPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o agent precondition failed response a status code equal to that given
func (o *UpdateMTOAgentPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the update m t o agent precondition failed response
func (o *UpdateMTOAgentPreconditionFailed) Code() int {
	return 412
}

func (o *UpdateMTOAgentPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateMTOAgentPreconditionFailed) String() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateMTOAgentPreconditionFailed) GetPayload() *primemessages.ClientError {
	return o.Payload
}

func (o *UpdateMTOAgentPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOAgentUnprocessableEntity creates a UpdateMTOAgentUnprocessableEntity with default headers values
func NewUpdateMTOAgentUnprocessableEntity() *UpdateMTOAgentUnprocessableEntity {
	return &UpdateMTOAgentUnprocessableEntity{}
}

/*
UpdateMTOAgentUnprocessableEntity describes a response with status code 422, with default header values.

The request was unprocessable, likely due to bad input from the requester.
*/
type UpdateMTOAgentUnprocessableEntity struct {
	Payload *primemessages.ValidationError
}

// IsSuccess returns true when this update m t o agent unprocessable entity response has a 2xx status code
func (o *UpdateMTOAgentUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o agent unprocessable entity response has a 3xx status code
func (o *UpdateMTOAgentUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o agent unprocessable entity response has a 4xx status code
func (o *UpdateMTOAgentUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update m t o agent unprocessable entity response has a 5xx status code
func (o *UpdateMTOAgentUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update m t o agent unprocessable entity response a status code equal to that given
func (o *UpdateMTOAgentUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update m t o agent unprocessable entity response
func (o *UpdateMTOAgentUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateMTOAgentUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateMTOAgentUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateMTOAgentUnprocessableEntity) GetPayload() *primemessages.ValidationError {
	return o.Payload
}

func (o *UpdateMTOAgentUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMTOAgentInternalServerError creates a UpdateMTOAgentInternalServerError with default headers values
func NewUpdateMTOAgentInternalServerError() *UpdateMTOAgentInternalServerError {
	return &UpdateMTOAgentInternalServerError{}
}

/*
UpdateMTOAgentInternalServerError describes a response with status code 500, with default header values.

A server error occurred.
*/
type UpdateMTOAgentInternalServerError struct {
	Payload *primemessages.Error
}

// IsSuccess returns true when this update m t o agent internal server error response has a 2xx status code
func (o *UpdateMTOAgentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update m t o agent internal server error response has a 3xx status code
func (o *UpdateMTOAgentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update m t o agent internal server error response has a 4xx status code
func (o *UpdateMTOAgentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update m t o agent internal server error response has a 5xx status code
func (o *UpdateMTOAgentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update m t o agent internal server error response a status code equal to that given
func (o *UpdateMTOAgentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update m t o agent internal server error response
func (o *UpdateMTOAgentInternalServerError) Code() int {
	return 500
}

func (o *UpdateMTOAgentInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateMTOAgentInternalServerError) String() string {
	return fmt.Sprintf("[PUT /mto-shipments/{mtoShipmentID}/agents/{agentID}][%d] updateMTOAgentInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateMTOAgentInternalServerError) GetPayload() *primemessages.Error {
	return o.Payload
}

func (o *UpdateMTOAgentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(primemessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
