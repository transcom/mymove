// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mto shipment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mto shipment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMTOAgent(params *CreateMTOAgentParams, opts ...ClientOption) (*CreateMTOAgentOK, error)

	CreateMTOShipment(params *CreateMTOShipmentParams, opts ...ClientOption) (*CreateMTOShipmentOK, error)

	CreateSITExtension(params *CreateSITExtensionParams, opts ...ClientOption) (*CreateSITExtensionCreated, error)

	DeleteMTOShipment(params *DeleteMTOShipmentParams, opts ...ClientOption) (*DeleteMTOShipmentNoContent, error)

	UpdateMTOAgent(params *UpdateMTOAgentParams, opts ...ClientOption) (*UpdateMTOAgentOK, error)

	UpdateMTOShipment(params *UpdateMTOShipmentParams, opts ...ClientOption) error

	UpdateMTOShipmentAddress(params *UpdateMTOShipmentAddressParams, opts ...ClientOption) (*UpdateMTOShipmentAddressOK, error)

	UpdateMTOShipmentStatus(params *UpdateMTOShipmentStatusParams, opts ...ClientOption) (*UpdateMTOShipmentStatusOK, error)

	UpdateReweigh(params *UpdateReweighParams, opts ...ClientOption) (*UpdateReweighOK, error)

	UpdateShipmentDestinationAddress(params *UpdateShipmentDestinationAddressParams, opts ...ClientOption) (*UpdateShipmentDestinationAddressCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateMTOAgent creates m t o agent

	### Functionality

This endpoint is used to **create** and add agents for an existing MTO Shipment. Only the fields being modified need to be sent in the request body.

### Errors
The agent must always have a name and at least one method of contact (either `email` or `phone`).

The agent must be associated with the MTO shipment passed in the url.

The shipment should be associated with an MTO that is available to the Pime.
If the caller requests a new agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.
*/
func (a *Client) CreateMTOAgent(params *CreateMTOAgentParams, opts ...ClientOption) (*CreateMTOAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMTOAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMTOAgent",
		Method:             "POST",
		PathPattern:        "/mto-shipments/{mtoShipmentID}/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMTOAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMTOAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMTOAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateMTOShipment creates m t o shipment

	_[Deprecated: sunset on 2024-04-08]_ This endpoint is deprecated and will be removed in a future version.

Please use the new endpoint at `/prime/v2/createMTOShipment` instead.

Creates a new shipment within the specified move. This endpoint should be used whenever the movers identify a
need for an additional shipment. The new shipment will be submitted to the TOO for review, and the TOO must
approve it before the contractor can proceed with billing.

**WIP**: The Prime should be notified by a push notification whenever the TOO approves a shipment connected to
one of their moves. Otherwise, the Prime can fetch the related move using the
[getMoveTaskOrder](#operation/getMoveTaskOrder) endpoint and see if this shipment has the status `"APPROVED"`.
*/
func (a *Client) CreateMTOShipment(params *CreateMTOShipmentParams, opts ...ClientOption) (*CreateMTOShipmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMTOShipmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMTOShipment",
		Method:             "POST",
		PathPattern:        "/mto-shipments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMTOShipmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMTOShipmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMTOShipment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateSITExtension creates s i t extension

	### Functionality

This endpoint creates a storage in transit (SIT) extension request for a shipment. A SIT extension request is a request an
increase in the shipment day allowance for the number of days a shipment is allowed to be in SIT. The total SIT day allowance
includes time spent in both origin and destination SIT.
*/
func (a *Client) CreateSITExtension(params *CreateSITExtensionParams, opts ...ClientOption) (*CreateSITExtensionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSITExtensionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSITExtension",
		Method:             "POST",
		PathPattern:        "/mto-shipments/{mtoShipmentID}/sit-extensions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSITExtensionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSITExtensionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSITExtension: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteMTOShipment deletes m t o shipment

	### Functionality

This endpoint deletes an individual shipment by ID.

### Errors
* The mtoShipment should be associated with an MTO that is available to prime.
* The mtoShipment must be a PPM shipment.
* Counseling should not have already been completed for the associated MTO.
*/
func (a *Client) DeleteMTOShipment(params *DeleteMTOShipmentParams, opts ...ClientOption) (*DeleteMTOShipmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMTOShipmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMTOShipment",
		Method:             "DELETE",
		PathPattern:        "/mto-shipments/{mtoShipmentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMTOShipmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMTOShipmentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMTOShipment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateMTOAgent updates m t o agent

	### Functionality

This endpoint is used to **update** the agents for an MTO Shipment. Only the fields being modified need to be sent in the request body.

### Errors:
The agent must always have a name and at least one method of contact (either `email` or `phone`).

The agent must be associated with the MTO shipment passed in the url.

The shipment should be associated with an MTO that is available to the Prime.
If the caller requests an update to an agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.
*/
func (a *Client) UpdateMTOAgent(params *UpdateMTOAgentParams, opts ...ClientOption) (*UpdateMTOAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMTOAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMTOAgent",
		Method:             "PUT",
		PathPattern:        "/mto-shipments/{mtoShipmentID}/agents/{agentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMTOAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMTOAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMTOAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateMTOShipment updates m t o shipment

	_[Deprecated: this endpoint was deprecated on August 5th, 2024]_

Please use the new endpoint at `/prime/v3/updateMTOShipment` instead.
*/
func (a *Client) UpdateMTOShipment(params *UpdateMTOShipmentParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMTOShipmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMTOShipment",
		Method:             "PATCH",
		PathPattern:        "/mto-shipments/{mtoShipmentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMTOShipmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
	UpdateMTOShipmentAddress updates m t o shipment address

	### Functionality

This endpoint is used to **update** the pickup, secondary, and destination addresses on an MTO Shipment. mto-shipments/{mtoShipmentID}/shipment-address-updates is for updating a delivery address. The address details completely replace the original, except for the UUID.
Therefore a complete address should be sent in the request.
When a destination address on a shipment is updated, the destination SIT service items address ID will also be updated so that shipment and service item final destinations match.

This endpoint **cannot create** an address.
To create an address on an MTO shipment, the caller must use [updateMTOShipment](#operation/updateMTOShipment) as the parent shipment has to be updated with the appropriate link to the address.

### Errors
The address must be associated with the mtoShipment passed in the url.
In other words, it should be listed as pickupAddress, destinationAddress, secondaryPickupAddress or secondaryDeliveryAddress on the mtoShipment provided.
If it is not, caller will receive a **Conflict** Error.

The mtoShipment should be associated with an MTO that is available to prime.
If the caller requests an update to an address, and the shipment is not on an available MTO, the caller will receive a **NotFound** Error.
*/
func (a *Client) UpdateMTOShipmentAddress(params *UpdateMTOShipmentAddressParams, opts ...ClientOption) (*UpdateMTOShipmentAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMTOShipmentAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMTOShipmentAddress",
		Method:             "PUT",
		PathPattern:        "/mto-shipments/{mtoShipmentID}/addresses/{addressID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMTOShipmentAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMTOShipmentAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMTOShipmentAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateMTOShipmentStatus updates m t o shipment status

	### Functionality

This endpoint should be used by the Prime to confirm the cancellation of a shipment. It allows the shipment
status to be changed to "CANCELED." Currently, the Prime cannot update the shipment to any other status.
*/
func (a *Client) UpdateMTOShipmentStatus(params *UpdateMTOShipmentStatusParams, opts ...ClientOption) (*UpdateMTOShipmentStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMTOShipmentStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMTOShipmentStatus",
		Method:             "PATCH",
		PathPattern:        "/mto-shipments/{mtoShipmentID}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMTOShipmentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMTOShipmentStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMTOShipmentStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateReweigh updates reweigh

	### Functionality

This endpoint can be used to update a reweigh with a new weight or to provide the reason why a reweigh did not occur.
Only one of weight or verificationReason should be sent in the request body.

A reweigh is the second recorded weight for a shipment, as validated by certified weight tickets. Applies to one shipment.
A reweigh can be triggered automatically, or requested by the customer or transportation office. Not all shipments are reweighed,
so not all shipments will have a reweigh weight.
*/
func (a *Client) UpdateReweigh(params *UpdateReweighParams, opts ...ClientOption) (*UpdateReweighOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReweighParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateReweigh",
		Method:             "PATCH",
		PathPattern:        "/mto-shipments/{mtoShipmentID}/reweighs/{reweighID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateReweighReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReweighOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateReweigh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateShipmentDestinationAddress updates shipment destination address

	### Functionality

This endpoint is used so the Prime can request an **update** for the destination address on an MTO Shipment,
after the destination address has already been approved.

This endpoint and operation only supports the following shipment types:
- HHG
- NTSR

For HHG shipments, if automatically approved or TOO approves, this will update the final destination address values for destination SIT service items to be the same as the changed destination address that was approved.

Address updates will be automatically approved unless they change:
  - The service area
  - Mileage bracket for direct delivery
  - the address and the distance between the old and new address is > 50
  - Domestic Short Haul to Domestic Line Haul or vice versa
  - Shipments that start and end in one ZIP3 use Short Haul pricing
  - Shipments that start and end in different ZIP3s use Line Haul pricing

For those, changes will require TOO approval.
*/
func (a *Client) UpdateShipmentDestinationAddress(params *UpdateShipmentDestinationAddressParams, opts ...ClientOption) (*UpdateShipmentDestinationAddressCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateShipmentDestinationAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateShipmentDestinationAddress",
		Method:             "POST",
		PathPattern:        "/mto-shipments/{mtoShipmentID}/shipment-address-updates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateShipmentDestinationAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateShipmentDestinationAddressCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateShipmentDestinationAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
