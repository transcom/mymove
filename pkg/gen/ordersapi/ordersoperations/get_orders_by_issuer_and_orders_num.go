// Code generated by go-swagger; DO NOT EDIT.

package ordersoperations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetOrdersByIssuerAndOrdersNumHandlerFunc turns a function with the right signature into a get orders by issuer and orders num handler
type GetOrdersByIssuerAndOrdersNumHandlerFunc func(GetOrdersByIssuerAndOrdersNumParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOrdersByIssuerAndOrdersNumHandlerFunc) Handle(params GetOrdersByIssuerAndOrdersNumParams) middleware.Responder {
	return fn(params)
}

// GetOrdersByIssuerAndOrdersNumHandler interface for that can handle valid get orders by issuer and orders num params
type GetOrdersByIssuerAndOrdersNumHandler interface {
	Handle(GetOrdersByIssuerAndOrdersNumParams) middleware.Responder
}

// NewGetOrdersByIssuerAndOrdersNum creates a new http.Handler for the get orders by issuer and orders num operation
func NewGetOrdersByIssuerAndOrdersNum(ctx *middleware.Context, handler GetOrdersByIssuerAndOrdersNumHandler) *GetOrdersByIssuerAndOrdersNum {
	return &GetOrdersByIssuerAndOrdersNum{Context: ctx, Handler: handler}
}

/*GetOrdersByIssuerAndOrdersNum swagger:route GET /issuers/{issuer}/orders/{ordersNum} getOrdersByIssuerAndOrdersNum

Retrieve orders by issuer and orders number

Return Orders with the provided issuer and orders number.
# Errors
Users of this endpoint must have permission to read Orders for the specified issuer. Otherwise, this endpoint will return `403 Forbidden`.
If there are no Orders with the specified orders number from the specified issuer, then this endpoint will return `404 Not Found`.

*/
type GetOrdersByIssuerAndOrdersNum struct {
	Context *middleware.Context
	Handler GetOrdersByIssuerAndOrdersNumHandler
}

func (o *GetOrdersByIssuerAndOrdersNum) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetOrdersByIssuerAndOrdersNumParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
