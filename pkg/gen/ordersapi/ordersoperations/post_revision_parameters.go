// Code generated by go-swagger; DO NOT EDIT.

package ordersoperations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"github.com/transcom/mymove/pkg/gen/ordersmessages"
)

// NewPostRevisionParams creates a new PostRevisionParams object
//
// There are no default values defined in the spec.
func NewPostRevisionParams() PostRevisionParams {

	return PostRevisionParams{}
}

// PostRevisionParams contains all the bound params for the post revision operation
// typically these are obtained from a http.Request
//
// swagger:parameters postRevision
type PostRevisionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Organization that issued the Orders.
	  Required: true
	  In: query
	*/
	Issuer string
	/*Electronic Data Interchange Personal Identifier of the member (preferred). If the member's EDIPI is unknown, then the Social Security Number may be provided instead.

	  Required: true
	  Pattern: ^\d{9}\d?$
	  In: query
	*/
	MemberID string
	/*Orders number, corresponding to the ORDERS number (Army), the CT SDN (Navy, Marines), the SPECIAL ORDER NO (Air Force), the Travel Order No (Coast Guard), or the Travel Authorization Number (Civilian).
	  Required: true
	  In: query
	*/
	OrdersNum string
	/*
	  Required: true
	  In: body
	*/
	Revision *ordersmessages.Revision
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostRevisionParams() beforehand.
func (o *PostRevisionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qIssuer, qhkIssuer, _ := qs.GetOK("issuer")
	if err := o.bindIssuer(qIssuer, qhkIssuer, route.Formats); err != nil {
		res = append(res, err)
	}

	qMemberID, qhkMemberID, _ := qs.GetOK("memberId")
	if err := o.bindMemberID(qMemberID, qhkMemberID, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrdersNum, qhkOrdersNum, _ := qs.GetOK("ordersNum")
	if err := o.bindOrdersNum(qOrdersNum, qhkOrdersNum, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body ordersmessages.Revision
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("revision", "body", ""))
			} else {
				res = append(res, errors.NewParseError("revision", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(r.Context())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Revision = &body
			}
		}
	} else {
		res = append(res, errors.Required("revision", "body", ""))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIssuer binds and validates parameter Issuer from query.
func (o *PostRevisionParams) bindIssuer(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("issuer", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("issuer", "query", raw); err != nil {
		return err
	}
	o.Issuer = raw

	if err := o.validateIssuer(formats); err != nil {
		return err
	}

	return nil
}

// validateIssuer carries on validations for parameter Issuer
func (o *PostRevisionParams) validateIssuer(formats strfmt.Registry) error {

	if err := validate.EnumCase("issuer", "query", o.Issuer, []interface{}{"army", "navy", "air-force", "marine-corps", "coast-guard"}, true); err != nil {
		return err
	}

	return nil
}

// bindMemberID binds and validates parameter MemberID from query.
func (o *PostRevisionParams) bindMemberID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("memberId", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("memberId", "query", raw); err != nil {
		return err
	}
	o.MemberID = raw

	if err := o.validateMemberID(formats); err != nil {
		return err
	}

	return nil
}

// validateMemberID carries on validations for parameter MemberID
func (o *PostRevisionParams) validateMemberID(formats strfmt.Registry) error {

	if err := validate.Pattern("memberId", "query", o.MemberID, `^\d{9}\d?$`); err != nil {
		return err
	}

	return nil
}

// bindOrdersNum binds and validates parameter OrdersNum from query.
func (o *PostRevisionParams) bindOrdersNum(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("ordersNum", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("ordersNum", "query", raw); err != nil {
		return err
	}
	o.OrdersNum = raw

	return nil
}
