// Code generated by go-swagger; DO NOT EDIT.

package ordersoperations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetOrdersHandlerFunc turns a function with the right signature into a get orders handler
type GetOrdersHandlerFunc func(GetOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOrdersHandlerFunc) Handle(params GetOrdersParams) middleware.Responder {
	return fn(params)
}

// GetOrdersHandler interface for that can handle valid get orders params
type GetOrdersHandler interface {
	Handle(GetOrdersParams) middleware.Responder
}

// NewGetOrders creates a new http.Handler for the get orders operation
func NewGetOrders(ctx *middleware.Context, handler GetOrdersHandler) *GetOrders {
	return &GetOrders{Context: ctx, Handler: handler}
}

/*GetOrders swagger:route GET /orders/{uuid} getOrders

Retrieve a set of Orders and all of its Revisions by UUID

Gets Orders with the supplied UUID.
## Errors
Users of this endpoint must have permission to read Orders for the `issuer` associated with the Orders. If not, this endpoint will return `403 Forbidden`.
The UUID must match an existing set of Orders. Otherwise, this endpoint will return `404 Not Found`.

*/
type GetOrders struct {
	Context *middleware.Context
	Handler GetOrdersHandler
}

func (o *GetOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetOrdersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
