// Code generated by go-swagger; DO NOT EDIT.

package ordersoperations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostRevisionHandlerFunc turns a function with the right signature into a post revision handler
type PostRevisionHandlerFunc func(PostRevisionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostRevisionHandlerFunc) Handle(params PostRevisionParams) middleware.Responder {
	return fn(params)
}

// PostRevisionHandler interface for that can handle valid post revision params
type PostRevisionHandler interface {
	Handle(PostRevisionParams) middleware.Responder
}

// NewPostRevision creates a new http.Handler for the post revision operation
func NewPostRevision(ctx *middleware.Context, handler PostRevisionHandler) *PostRevision {
	return &PostRevision{Context: ctx, Handler: handler}
}

/*PostRevision swagger:route POST /orders postRevision

Submit a new set of orders, make an amendment to an existing set of orders, or cancel a set of orders.

Creates a Revision of a set of orders.
# Identifying the service member
The Orders Gateway associates Orders and their Revisions with the member's EDIPI. For users of this API who do not have the member's EDIPI but do have the member's SSN, they can submit the SSN instead. The Orders Gateway will then fetch the member's EDIPI using DMDC's Identity Web Services. Calls using the 9-digit SSN instead of the 10-digit EDIPI will take longer to respond due to the additional overhead.
# Submitting Orders Revisions
## New Orders
The supplied Revision is considered part of a new set of Orders if the combination of `ordersNum` and `issuer` has never been seen before. A new UUID is created and associated with the Orders, which is returned along with the supplied Revision.
## Amended Orders
If the system already has Orders with the supplied combination of `ordersNum` and `issuer`, then the supplied Revision is considered to be an amendment of those Orders. The Revision with the highest `seqNum` is considered the most recent amendment, which is not necessarily the Revision with the latest `dateIssued` or the Revision submitted last.
If you stored the UUID of the Orders from a previous call to this API, you have the option of using the `POST /orders/{uuid}` API instead to supply a new Revision.
## Canceled, Rescinded, or Revoked Orders
To cancel, rescind, or revoke Orders, POST a new Revision with the status set to "canceled".
# Errors
Users of this endpoint must have permission to write Orders for the specified `issuer`. Otherwise, this endpoint will return `403 Forbidden`.
If SSN instead of EDIPI is provided to identify the member, and DMDC's Identity Web Services does not return an EDIPI for that SSN, then this endpoint will return `404 Not Found`.
If amending existing Orders, the supplied seqNum must be unique when compared to existing Revisions in those Orders. If it has already been used, this endpoint will return `409 Conflict`.
If amending existing Orders, the supplied memberId, as an EDIPI, or as an EDIPI retrieved from DMDC by SSN, must match the EDIPI in the existing Orders. If the EDIPIs do not match, this endpoint will return `409 Conflict`.


*/
type PostRevision struct {
	Context *middleware.Context
	Handler PostRevisionHandler
}

func (o *PostRevision) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostRevisionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
