// Code generated by go-swagger; DO NOT EDIT.

package ordersoperations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// IndexOrdersForMemberHandlerFunc turns a function with the right signature into a index orders for member handler
type IndexOrdersForMemberHandlerFunc func(IndexOrdersForMemberParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IndexOrdersForMemberHandlerFunc) Handle(params IndexOrdersForMemberParams) middleware.Responder {
	return fn(params)
}

// IndexOrdersForMemberHandler interface for that can handle valid index orders for member params
type IndexOrdersForMemberHandler interface {
	Handle(IndexOrdersForMemberParams) middleware.Responder
}

// NewIndexOrdersForMember creates a new http.Handler for the index orders for member operation
func NewIndexOrdersForMember(ctx *middleware.Context, handler IndexOrdersForMemberHandler) *IndexOrdersForMember {
	return &IndexOrdersForMember{Context: ctx, Handler: handler}
}

/*IndexOrdersForMember swagger:route GET /edipis/{edipi}/orders indexOrdersForMember

Retrieve orders for a particular member

Returns all Orders for the specified service member. This endpoint will only return Orders cut by issuers to which the user has read permission.


*/
type IndexOrdersForMember struct {
	Context *middleware.Context
	Handler IndexOrdersForMemberHandler
}

func (o *IndexOrdersForMember) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIndexOrdersForMemberParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
