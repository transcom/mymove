// Code generated by go-swagger; DO NOT EDIT.

package ordersoperations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostRevisionToOrdersHandlerFunc turns a function with the right signature into a post revision to orders handler
type PostRevisionToOrdersHandlerFunc func(PostRevisionToOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostRevisionToOrdersHandlerFunc) Handle(params PostRevisionToOrdersParams) middleware.Responder {
	return fn(params)
}

// PostRevisionToOrdersHandler interface for that can handle valid post revision to orders params
type PostRevisionToOrdersHandler interface {
	Handle(PostRevisionToOrdersParams) middleware.Responder
}

// NewPostRevisionToOrders creates a new http.Handler for the post revision to orders operation
func NewPostRevisionToOrders(ctx *middleware.Context, handler PostRevisionToOrdersHandler) *PostRevisionToOrders {
	return &PostRevisionToOrders{Context: ctx, Handler: handler}
}

/*PostRevisionToOrders swagger:route POST /orders/{uuid} postRevisionToOrders

Make an amendment to or cancel an existing set of orders by UUID

Creates a Revision of a set of orders. The Orders to be amended or canceled must already exist with the supplied UUID.
## Amendment requirements
The `seqNum` in the supplied Revision must be unique among all Revisions in these Orders. Other than `seqNum`, nothing else is required to change in the Revision compared to any other Revision in these Orders.
# Errors
Users of this endpoint must have permission to write Orders for the `issuer` associated with the Orders that were originally POST'd to the `orders` endpoint. If not, this endpoint will return `403 Forbidden`.
The UUID must match an existing set of Orders. Otherwise, this endpoint will return `404 Not Found`.
If amending existing Orders, the supplied seqNum must be unique. If it has already been used, this endpoint will return `409 Conflict`.

*/
type PostRevisionToOrders struct {
	Context *middleware.Context
	Handler PostRevisionToOrdersHandler
}

func (o *PostRevisionToOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostRevisionToOrdersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
