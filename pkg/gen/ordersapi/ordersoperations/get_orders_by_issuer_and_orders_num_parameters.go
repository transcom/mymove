// Code generated by go-swagger; DO NOT EDIT.

package ordersoperations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOrdersByIssuerAndOrdersNumParams creates a new GetOrdersByIssuerAndOrdersNumParams object
// no default values defined in spec.
func NewGetOrdersByIssuerAndOrdersNumParams() GetOrdersByIssuerAndOrdersNumParams {

	return GetOrdersByIssuerAndOrdersNumParams{}
}

// GetOrdersByIssuerAndOrdersNumParams contains all the bound params for the get orders by issuer and orders num operation
// typically these are obtained from a http.Request
//
// swagger:parameters getOrdersByIssuerAndOrdersNum
type GetOrdersByIssuerAndOrdersNumParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Organization that issued the Orders
	  Required: true
	  In: path
	*/
	Issuer string
	/*Orders number, corresponding to the ORDERS number (Army), the CT SDN (Navy, Marines), the SPECIAL ORDER NO (Air Force), the Travel Order No (Coast Guard), or the Travel Authorization Number (Civilian).
	  Required: true
	  In: path
	*/
	OrdersNum string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetOrdersByIssuerAndOrdersNumParams() beforehand.
func (o *GetOrdersByIssuerAndOrdersNumParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rIssuer, rhkIssuer, _ := route.Params.GetOK("issuer")
	if err := o.bindIssuer(rIssuer, rhkIssuer, route.Formats); err != nil {
		res = append(res, err)
	}

	rOrdersNum, rhkOrdersNum, _ := route.Params.GetOK("ordersNum")
	if err := o.bindOrdersNum(rOrdersNum, rhkOrdersNum, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIssuer binds and validates parameter Issuer from path.
func (o *GetOrdersByIssuerAndOrdersNumParams) bindIssuer(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Issuer = raw

	if err := o.validateIssuer(formats); err != nil {
		return err
	}

	return nil
}

// validateIssuer carries on validations for parameter Issuer
func (o *GetOrdersByIssuerAndOrdersNumParams) validateIssuer(formats strfmt.Registry) error {

	if err := validate.Enum("issuer", "path", o.Issuer, []interface{}{"army", "navy", "air-force", "marine-corps", "coast-guard"}); err != nil {
		return err
	}

	return nil
}

// bindOrdersNum binds and validates parameter OrdersNum from path.
func (o *GetOrdersByIssuerAndOrdersNumParams) bindOrdersNum(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.OrdersNum = raw

	return nil
}
