// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateWebhookNotificationHandlerFunc turns a function with the right signature into a create webhook notification handler
type CreateWebhookNotificationHandlerFunc func(CreateWebhookNotificationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateWebhookNotificationHandlerFunc) Handle(params CreateWebhookNotificationParams) middleware.Responder {
	return fn(params)
}

// CreateWebhookNotificationHandler interface for that can handle valid create webhook notification params
type CreateWebhookNotificationHandler interface {
	Handle(CreateWebhookNotificationParams) middleware.Responder
}

// NewCreateWebhookNotification creates a new http.Handler for the create webhook notification operation
func NewCreateWebhookNotification(ctx *middleware.Context, handler CreateWebhookNotificationHandler) *CreateWebhookNotification {
	return &CreateWebhookNotification{Context: ctx, Handler: handler}
}

/*CreateWebhookNotification swagger:route POST /webhook-notifications webhook createWebhookNotification

Test endpoint for creating webhook notifications

This endpoint creates a webhook notification in the database. If the webhook client is running, it may send the notification soon after creation.


*/
type CreateWebhookNotification struct {
	Context *middleware.Context
	Handler CreateWebhookNotificationHandler
}

func (o *CreateWebhookNotification) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateWebhookNotificationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
