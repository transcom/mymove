// Code generated by go-swagger; DO NOT EDIT.

package payment_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RecalculatePaymentRequestHandlerFunc turns a function with the right signature into a recalculate payment request handler
type RecalculatePaymentRequestHandlerFunc func(RecalculatePaymentRequestParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RecalculatePaymentRequestHandlerFunc) Handle(params RecalculatePaymentRequestParams) middleware.Responder {
	return fn(params)
}

// RecalculatePaymentRequestHandler interface for that can handle valid recalculate payment request params
type RecalculatePaymentRequestHandler interface {
	Handle(RecalculatePaymentRequestParams) middleware.Responder
}

// NewRecalculatePaymentRequest creates a new http.Handler for the recalculate payment request operation
func NewRecalculatePaymentRequest(ctx *middleware.Context, handler RecalculatePaymentRequestHandler) *RecalculatePaymentRequest {
	return &RecalculatePaymentRequest{Context: ctx, Handler: handler}
}

/*
	RecalculatePaymentRequest swagger:route POST /payment-requests/{paymentRequestID}/recalculate paymentRequest recalculatePaymentRequest

recalculatePaymentRequest

Recalculates an existing pending payment request by creating a new payment request for the same service
items but is priced based on the current inputs (weights, dates, etc.). The previously existing payment
request is then deprecated. A link is made between the new and existing payment requests.

This is a support endpoint and will not be available in production.
*/
type RecalculatePaymentRequest struct {
	Context *middleware.Context
	Handler RecalculatePaymentRequestHandler
}

func (o *RecalculatePaymentRequest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRecalculatePaymentRequestParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
