// Code generated by go-swagger; DO NOT EDIT.

package payment_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ProcessReviewedPaymentRequestsHandlerFunc turns a function with the right signature into a process reviewed payment requests handler
type ProcessReviewedPaymentRequestsHandlerFunc func(ProcessReviewedPaymentRequestsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ProcessReviewedPaymentRequestsHandlerFunc) Handle(params ProcessReviewedPaymentRequestsParams) middleware.Responder {
	return fn(params)
}

// ProcessReviewedPaymentRequestsHandler interface for that can handle valid process reviewed payment requests params
type ProcessReviewedPaymentRequestsHandler interface {
	Handle(ProcessReviewedPaymentRequestsParams) middleware.Responder
}

// NewProcessReviewedPaymentRequests creates a new http.Handler for the process reviewed payment requests operation
func NewProcessReviewedPaymentRequests(ctx *middleware.Context, handler ProcessReviewedPaymentRequestsHandler) *ProcessReviewedPaymentRequests {
	return &ProcessReviewedPaymentRequests{Context: ctx, Handler: handler}
}

/*
	ProcessReviewedPaymentRequests swagger:route PATCH /payment-requests/process-reviewed paymentRequest processReviewedPaymentRequests

processReviewedPaymentRequests

Updates the status of reviewed payment requests and sends PRs to Syncada if
the SendToSyncada flag is set

This is a support endpoint and will not be available in production.
*/
type ProcessReviewedPaymentRequests struct {
	Context *middleware.Context
	Handler ProcessReviewedPaymentRequestsHandler
}

func (o *ProcessReviewedPaymentRequests) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewProcessReviewedPaymentRequestsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
