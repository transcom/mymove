// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateMTOShipmentStatusHandlerFunc turns a function with the right signature into a update m t o shipment status handler
type UpdateMTOShipmentStatusHandlerFunc func(UpdateMTOShipmentStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMTOShipmentStatusHandlerFunc) Handle(params UpdateMTOShipmentStatusParams) middleware.Responder {
	return fn(params)
}

// UpdateMTOShipmentStatusHandler interface for that can handle valid update m t o shipment status params
type UpdateMTOShipmentStatusHandler interface {
	Handle(UpdateMTOShipmentStatusParams) middleware.Responder
}

// NewUpdateMTOShipmentStatus creates a new http.Handler for the update m t o shipment status operation
func NewUpdateMTOShipmentStatus(ctx *middleware.Context, handler UpdateMTOShipmentStatusHandler) *UpdateMTOShipmentStatus {
	return &UpdateMTOShipmentStatus{Context: ctx, Handler: handler}
}

/*
	UpdateMTOShipmentStatus swagger:route PATCH /mto-shipments/{mtoShipmentID}/status mtoShipment updateMTOShipmentStatus

updateMTOShipmentStatus

Updates a shipment's status to APPROVED or REJECTED for the purpose of testing the Prime API. If APPROVED, `rejectionReason` should be blank and any value passed through the body will be ignored. If REJECTED, a value in `rejectionReason` is required. <br /> <br /> This is a support endpoint and will not be available in production.
*/
type UpdateMTOShipmentStatus struct {
	Context *middleware.Context
	Handler UpdateMTOShipmentStatusHandler
}

func (o *UpdateMTOShipmentStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateMTOShipmentStatusParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
