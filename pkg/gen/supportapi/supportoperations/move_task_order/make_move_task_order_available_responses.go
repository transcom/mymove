// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/supportmessages"
)

// MakeMoveTaskOrderAvailableOKCode is the HTTP code returned for type MakeMoveTaskOrderAvailableOK
const MakeMoveTaskOrderAvailableOKCode int = 200

/*
MakeMoveTaskOrderAvailableOK Successfully made MTO available to Prime.

swagger:response makeMoveTaskOrderAvailableOK
*/
type MakeMoveTaskOrderAvailableOK struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.MoveTaskOrder `json:"body,omitempty"`
}

// NewMakeMoveTaskOrderAvailableOK creates MakeMoveTaskOrderAvailableOK with default headers values
func NewMakeMoveTaskOrderAvailableOK() *MakeMoveTaskOrderAvailableOK {

	return &MakeMoveTaskOrderAvailableOK{}
}

// WithPayload adds the payload to the make move task order available o k response
func (o *MakeMoveTaskOrderAvailableOK) WithPayload(payload *supportmessages.MoveTaskOrder) *MakeMoveTaskOrderAvailableOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the make move task order available o k response
func (o *MakeMoveTaskOrderAvailableOK) SetPayload(payload *supportmessages.MoveTaskOrder) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MakeMoveTaskOrderAvailableOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MakeMoveTaskOrderAvailableBadRequestCode is the HTTP code returned for type MakeMoveTaskOrderAvailableBadRequest
const MakeMoveTaskOrderAvailableBadRequestCode int = 400

/*
MakeMoveTaskOrderAvailableBadRequest The request payload is invalid.

swagger:response makeMoveTaskOrderAvailableBadRequest
*/
type MakeMoveTaskOrderAvailableBadRequest struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.ClientError `json:"body,omitempty"`
}

// NewMakeMoveTaskOrderAvailableBadRequest creates MakeMoveTaskOrderAvailableBadRequest with default headers values
func NewMakeMoveTaskOrderAvailableBadRequest() *MakeMoveTaskOrderAvailableBadRequest {

	return &MakeMoveTaskOrderAvailableBadRequest{}
}

// WithPayload adds the payload to the make move task order available bad request response
func (o *MakeMoveTaskOrderAvailableBadRequest) WithPayload(payload *supportmessages.ClientError) *MakeMoveTaskOrderAvailableBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the make move task order available bad request response
func (o *MakeMoveTaskOrderAvailableBadRequest) SetPayload(payload *supportmessages.ClientError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MakeMoveTaskOrderAvailableBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MakeMoveTaskOrderAvailableUnauthorizedCode is the HTTP code returned for type MakeMoveTaskOrderAvailableUnauthorized
const MakeMoveTaskOrderAvailableUnauthorizedCode int = 401

/*
MakeMoveTaskOrderAvailableUnauthorized The request was denied.

swagger:response makeMoveTaskOrderAvailableUnauthorized
*/
type MakeMoveTaskOrderAvailableUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.ClientError `json:"body,omitempty"`
}

// NewMakeMoveTaskOrderAvailableUnauthorized creates MakeMoveTaskOrderAvailableUnauthorized with default headers values
func NewMakeMoveTaskOrderAvailableUnauthorized() *MakeMoveTaskOrderAvailableUnauthorized {

	return &MakeMoveTaskOrderAvailableUnauthorized{}
}

// WithPayload adds the payload to the make move task order available unauthorized response
func (o *MakeMoveTaskOrderAvailableUnauthorized) WithPayload(payload *supportmessages.ClientError) *MakeMoveTaskOrderAvailableUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the make move task order available unauthorized response
func (o *MakeMoveTaskOrderAvailableUnauthorized) SetPayload(payload *supportmessages.ClientError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MakeMoveTaskOrderAvailableUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MakeMoveTaskOrderAvailableForbiddenCode is the HTTP code returned for type MakeMoveTaskOrderAvailableForbidden
const MakeMoveTaskOrderAvailableForbiddenCode int = 403

/*
MakeMoveTaskOrderAvailableForbidden The request was denied.

swagger:response makeMoveTaskOrderAvailableForbidden
*/
type MakeMoveTaskOrderAvailableForbidden struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.ClientError `json:"body,omitempty"`
}

// NewMakeMoveTaskOrderAvailableForbidden creates MakeMoveTaskOrderAvailableForbidden with default headers values
func NewMakeMoveTaskOrderAvailableForbidden() *MakeMoveTaskOrderAvailableForbidden {

	return &MakeMoveTaskOrderAvailableForbidden{}
}

// WithPayload adds the payload to the make move task order available forbidden response
func (o *MakeMoveTaskOrderAvailableForbidden) WithPayload(payload *supportmessages.ClientError) *MakeMoveTaskOrderAvailableForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the make move task order available forbidden response
func (o *MakeMoveTaskOrderAvailableForbidden) SetPayload(payload *supportmessages.ClientError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MakeMoveTaskOrderAvailableForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MakeMoveTaskOrderAvailableNotFoundCode is the HTTP code returned for type MakeMoveTaskOrderAvailableNotFound
const MakeMoveTaskOrderAvailableNotFoundCode int = 404

/*
MakeMoveTaskOrderAvailableNotFound The requested resource wasn't found.

swagger:response makeMoveTaskOrderAvailableNotFound
*/
type MakeMoveTaskOrderAvailableNotFound struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.ClientError `json:"body,omitempty"`
}

// NewMakeMoveTaskOrderAvailableNotFound creates MakeMoveTaskOrderAvailableNotFound with default headers values
func NewMakeMoveTaskOrderAvailableNotFound() *MakeMoveTaskOrderAvailableNotFound {

	return &MakeMoveTaskOrderAvailableNotFound{}
}

// WithPayload adds the payload to the make move task order available not found response
func (o *MakeMoveTaskOrderAvailableNotFound) WithPayload(payload *supportmessages.ClientError) *MakeMoveTaskOrderAvailableNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the make move task order available not found response
func (o *MakeMoveTaskOrderAvailableNotFound) SetPayload(payload *supportmessages.ClientError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MakeMoveTaskOrderAvailableNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MakeMoveTaskOrderAvailablePreconditionFailedCode is the HTTP code returned for type MakeMoveTaskOrderAvailablePreconditionFailed
const MakeMoveTaskOrderAvailablePreconditionFailedCode int = 412

/*
MakeMoveTaskOrderAvailablePreconditionFailed Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.

swagger:response makeMoveTaskOrderAvailablePreconditionFailed
*/
type MakeMoveTaskOrderAvailablePreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.ClientError `json:"body,omitempty"`
}

// NewMakeMoveTaskOrderAvailablePreconditionFailed creates MakeMoveTaskOrderAvailablePreconditionFailed with default headers values
func NewMakeMoveTaskOrderAvailablePreconditionFailed() *MakeMoveTaskOrderAvailablePreconditionFailed {

	return &MakeMoveTaskOrderAvailablePreconditionFailed{}
}

// WithPayload adds the payload to the make move task order available precondition failed response
func (o *MakeMoveTaskOrderAvailablePreconditionFailed) WithPayload(payload *supportmessages.ClientError) *MakeMoveTaskOrderAvailablePreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the make move task order available precondition failed response
func (o *MakeMoveTaskOrderAvailablePreconditionFailed) SetPayload(payload *supportmessages.ClientError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MakeMoveTaskOrderAvailablePreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MakeMoveTaskOrderAvailableUnprocessableEntityCode is the HTTP code returned for type MakeMoveTaskOrderAvailableUnprocessableEntity
const MakeMoveTaskOrderAvailableUnprocessableEntityCode int = 422

/*
MakeMoveTaskOrderAvailableUnprocessableEntity The payload was unprocessable.

swagger:response makeMoveTaskOrderAvailableUnprocessableEntity
*/
type MakeMoveTaskOrderAvailableUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.ValidationError `json:"body,omitempty"`
}

// NewMakeMoveTaskOrderAvailableUnprocessableEntity creates MakeMoveTaskOrderAvailableUnprocessableEntity with default headers values
func NewMakeMoveTaskOrderAvailableUnprocessableEntity() *MakeMoveTaskOrderAvailableUnprocessableEntity {

	return &MakeMoveTaskOrderAvailableUnprocessableEntity{}
}

// WithPayload adds the payload to the make move task order available unprocessable entity response
func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) WithPayload(payload *supportmessages.ValidationError) *MakeMoveTaskOrderAvailableUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the make move task order available unprocessable entity response
func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) SetPayload(payload *supportmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MakeMoveTaskOrderAvailableUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MakeMoveTaskOrderAvailableInternalServerErrorCode is the HTTP code returned for type MakeMoveTaskOrderAvailableInternalServerError
const MakeMoveTaskOrderAvailableInternalServerErrorCode int = 500

/*
MakeMoveTaskOrderAvailableInternalServerError A server error occurred.

swagger:response makeMoveTaskOrderAvailableInternalServerError
*/
type MakeMoveTaskOrderAvailableInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.Error `json:"body,omitempty"`
}

// NewMakeMoveTaskOrderAvailableInternalServerError creates MakeMoveTaskOrderAvailableInternalServerError with default headers values
func NewMakeMoveTaskOrderAvailableInternalServerError() *MakeMoveTaskOrderAvailableInternalServerError {

	return &MakeMoveTaskOrderAvailableInternalServerError{}
}

// WithPayload adds the payload to the make move task order available internal server error response
func (o *MakeMoveTaskOrderAvailableInternalServerError) WithPayload(payload *supportmessages.Error) *MakeMoveTaskOrderAvailableInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the make move task order available internal server error response
func (o *MakeMoveTaskOrderAvailableInternalServerError) SetPayload(payload *supportmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MakeMoveTaskOrderAvailableInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
