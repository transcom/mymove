// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// HideNonFakeMoveTaskOrdersHandlerFunc turns a function with the right signature into a hide non fake move task orders handler
type HideNonFakeMoveTaskOrdersHandlerFunc func(HideNonFakeMoveTaskOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn HideNonFakeMoveTaskOrdersHandlerFunc) Handle(params HideNonFakeMoveTaskOrdersParams) middleware.Responder {
	return fn(params)
}

// HideNonFakeMoveTaskOrdersHandler interface for that can handle valid hide non fake move task orders params
type HideNonFakeMoveTaskOrdersHandler interface {
	Handle(HideNonFakeMoveTaskOrdersParams) middleware.Responder
}

// NewHideNonFakeMoveTaskOrders creates a new http.Handler for the hide non fake move task orders operation
func NewHideNonFakeMoveTaskOrders(ctx *middleware.Context, handler HideNonFakeMoveTaskOrdersHandler) *HideNonFakeMoveTaskOrders {
	return &HideNonFakeMoveTaskOrders{Context: ctx, Handler: handler}
}

/*
	HideNonFakeMoveTaskOrders swagger:route PATCH /move-task-orders/hide moveTaskOrder hideNonFakeMoveTaskOrders

hideNonFakeMoveTaskOrders

Updates move task order without fake user data `show` to false. No request body required. <br />
<br />
This is a support endpoint and will not be available in production.
*/
type HideNonFakeMoveTaskOrders struct {
	Context *middleware.Context
	Handler HideNonFakeMoveTaskOrdersHandler
}

func (o *HideNonFakeMoveTaskOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewHideNonFakeMoveTaskOrdersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
