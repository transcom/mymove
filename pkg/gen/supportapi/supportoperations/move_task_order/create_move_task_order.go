// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateMoveTaskOrderHandlerFunc turns a function with the right signature into a create move task order handler
type CreateMoveTaskOrderHandlerFunc func(CreateMoveTaskOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateMoveTaskOrderHandlerFunc) Handle(params CreateMoveTaskOrderParams) middleware.Responder {
	return fn(params)
}

// CreateMoveTaskOrderHandler interface for that can handle valid create move task order params
type CreateMoveTaskOrderHandler interface {
	Handle(CreateMoveTaskOrderParams) middleware.Responder
}

// NewCreateMoveTaskOrder creates a new http.Handler for the create move task order operation
func NewCreateMoveTaskOrder(ctx *middleware.Context, handler CreateMoveTaskOrderHandler) *CreateMoveTaskOrder {
	return &CreateMoveTaskOrder{Context: ctx, Handler: handler}
}

/*CreateMoveTaskOrder swagger:route POST /move-task-orders moveTaskOrder createMoveTaskOrder

createMoveTaskOrder

Creates an instance of moveTaskOrder.
Currently this will also create a number of nested objects but not all.
It will currently create
* MoveTaskOrder
* Order
* Customer
* User
* Entitlement

It will not create addresses, duty stations, shipments, payment requests or service items. It requires an existing contractor ID, destination duty station ID,
origin duty station ID, and an uploaded orders ID to be passed into the request.

This is a support endpoint and will not be available in production.


*/
type CreateMoveTaskOrder struct {
	Context *middleware.Context
	Handler CreateMoveTaskOrderHandler
}

func (o *CreateMoveTaskOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateMoveTaskOrderParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
