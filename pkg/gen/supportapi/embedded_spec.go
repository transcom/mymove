// Code generated by go-swagger; DO NOT EDIT.

package supportapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Milmove Support API gives you programmatic access to support functionality useful for testing and debug.\n\nThis API is not available in production.\n\nAll endpoints are located at ` + "`" + `primelocal/support/v1/` + "`" + `.\n",
    "title": "Milmove Support API",
    "contact": {
      "email": "dp3@truss.works"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/support/v1",
  "paths": {
    "/move-task-orders": {
      "get": {
        "description": "### Functionality\nThis endpoint lists all MoveTaskOrders regardless of whether or not they have been made available to Prime.\n\nIt will provide nested information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "listMTOs",
        "operationId": "listMTOs",
        "parameters": [
          {
            "type": "integer",
            "format": "timestamp",
            "description": "Only return move task orders updated since this time.",
            "name": "since",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all move task orders.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrders"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "post": {
        "description": "Creates an instance of moveTaskOrder.\nCurrently this will also create a number of nested objects but not all.\nIt will currently create\n* MoveTaskOrder\n* Order\n* Customer\n* User\n* Entitlement\n\nIt will not create addresses, duty stations, shipments, payment requests or service items. It requires an existing contractor ID, destination duty station ID,\norigin duty station ID, and an uploaded orders ID to be passed into the request.\n\nThis is a support endpoint and will not be available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "createMoveTaskOrder",
        "operationId": "createMoveTaskOrder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created MoveTaskOrder object.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/move-task-orders/hide": {
      "patch": {
        "description": "Updates move task order without fake user data ` + "`" + `show` + "`" + ` to false. No request body required. \u003cbr /\u003e\n\u003cbr /\u003e\nThis is a support endpoint and will not be available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "hideNonFakeMoveTaskOrders",
        "operationId": "hideNonFakeMoveTaskOrders",
        "responses": {
          "200": {
            "description": "Successfully hid MTOs.",
            "schema": {
              "$ref": "#/definitions/MTOHideMovesResponse"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}": {
      "get": {
        "description": "### Functionality\nThis endpoint gets an individual MoveTaskOrder by ID.\n\nIt will provide nested information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests.\n\nThis is a support endpoint and is not available in production.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "getMoveTaskOrder",
        "operationId": "getMoveTaskOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieve an individual move task order.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "UUID of move task order to use.",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/available-to-prime": {
      "patch": {
        "description": "Updates move task order ` + "`" + `availableToPrimeAt` + "`" + ` to make it available to prime. No request body required. \u003cbr /\u003e\n\u003cbr /\u003e\nThis is a support endpoint and will not be available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "makeMoveTaskOrderAvailable",
        "operationId": "makeMoveTaskOrderAvailable",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully made MTO available to Prime.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "UUID of move task order.",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/payment-requests": {
      "get": {
        "description": "### Functionality\n\nThis endpoint lists all PaymentRequests associated with a given MoveTaskOrder.\n\nThis is a support endpoint and is not available in production.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "listMTOPaymentRequests",
        "operationId": "listMTOPaymentRequests",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Only return move task orders updated since this time.",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved payment requests associated with a given move task order",
            "schema": {
              "$ref": "#/definitions/PaymentRequests"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-service-items/{mtoServiceItemID}/status": {
      "patch": {
        "description": "Updates the status of a service item for a move to APPROVED or REJECTED. \u003cbr /\u003e\n\u003cbr /\u003e\nThis is a support endpoint and will not be available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "updateMTOServiceItemStatus",
        "operationId": "updateMTOServiceItemStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOServiceItemStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated service item status for a move task order.",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "UUID of mto service item to use.",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/mto-shipments/{mtoShipmentID}/status": {
      "patch": {
        "description": "Updates a shipment's status to APPROVED or REJECTED for the purpose of testing the Prime API. If APPROVED, ` + "`" + `rejectionReason` + "`" + ` should be blank and any value passed through the body will be ignored. If REJECTED, a value in ` + "`" + `rejectionReason` + "`" + ` is required. \u003cbr /\u003e \u003cbr /\u003e This is a support endpoint and will not be available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipmentStatus",
        "operationId": "updateMTOShipmentStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOShipmentStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the shipment's status.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the shipment being updated.",
          "name": "mtoShipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/process-reviewed": {
      "patch": {
        "description": "Updates the status of reviewed payment requests and sends PRs to Syncada if\nthe SendToSyncada flag is set\n\nThis is a support endpoint and will not be available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "processReviewedPaymentRequests",
        "operationId": "processReviewedPaymentRequests",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessReviewedPaymentRequests"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status of reviewed payment request and sent to Syncada if that flag is set",
            "schema": {
              "$ref": "#/definitions/PaymentRequests"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/payment-requests/{paymentRequestID}/edi": {
      "get": {
        "description": "Returns the EDI (Electronic Data Interchange) message for the payment request identified\nby the given payment request ID. Note that the EDI returned in the JSON payload will have \\n where there\nwould normally be line breaks (due to JSON not allowing line breaks in a string).\n\nThis is a support endpoint and will not be available in production.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "getPaymentRequestEDI",
        "operationId": "getPaymentRequestEDI",
        "responses": {
          "200": {
            "description": "Successfully retrieved payment requests associated with a given move task order",
            "schema": {
              "$ref": "#/definitions/PaymentRequestEDI"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the payment request for which EDI should be generated.",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}/status": {
      "patch": {
        "description": "Updates status of a payment request to REVIEWED, SENT_TO_GEX, RECEIVED_BY_GEX, REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED, or PAID.\n\nA status of REVIEWED can optionally have a ` + "`" + `rejectionReason` + "`" + `.\n\nThis is a support endpoint and is not available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "updatePaymentRequestStatus",
        "operationId": "updatePaymentRequestStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePaymentRequestStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated payment request status.",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of payment request.",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/webhook-notifications": {
      "post": {
        "description": "This endpoint creates a webhook notification in the database. If the webhook client is running, it may send the notification soon after creation.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "webhook"
        ],
        "summary": "Test endpoint for creating webhook notifications",
        "operationId": "createWebhookNotification",
        "parameters": [
          {
            "description": "The notification sent by webhook-client.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/WebhookNotification"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful creation",
            "schema": {
              "$ref": "#/definitions/WebhookNotification"
            }
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/webhook-notify": {
      "post": {
        "description": "This endpoint receives a notification that matches the webhook notification model. This is a test endpoint that represents a receiving server. In production, the Prime will set up a receiving endpoint. In testing, this server accepts notifications at this endpoint and simply responds with success and logs them. The ` + "`" + `webhook-client` + "`" + ` is responsible for retrieving messages from the webhook_notifications table and sending them to the Prime (this endpoint in our testing case) via an mTLS connection.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "webhook"
        ],
        "summary": "Test endpoint for receiving messages from our own webhook-client",
        "operationId": "receiveWebhookNotification",
        "parameters": [
          {
            "description": "The webhook notification being sent",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookNotification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Received notification",
            "schema": {
              "$ref": "#/definitions/WebhookNotification"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "required": [
        "streetAddress1",
        "city",
        "state",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "Customer": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "dodID",
        "rank",
        "agency"
      ],
      "properties": {
        "agency": {
          "type": "string",
          "title": "Agency customer is affilated with"
        },
        "currentAddress": {
          "$ref": "#/definitions/Address"
        },
        "dodID": {
          "type": "string"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "example": "Vanya"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string",
          "example": "Petrovna"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "rank": {
          "$ref": "#/definitions/Rank"
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "DeptIndicator": {
      "type": "string",
      "title": "Dept. indicator",
      "enum": [
        "NAVY_AND_MARINES",
        "ARMY",
        "AIR_FORCE",
        "COAST_GUARD"
      ],
      "x-display-value": {
        "AIR_FORCE": "57 Air Force",
        "ARMY": "21 Army",
        "COAST_GUARD": "70 Coast Guard",
        "NAVY_AND_MARINES": "17 Navy and Marine Corps"
      },
      "x-nullable": true
    },
    "DimensionType": {
      "description": "Describes a dimension type for a MTOServiceItemDimension.",
      "type": "string",
      "enum": [
        "ITEM",
        "CRATE"
      ]
    },
    "Document": {
      "type": "object",
      "required": [
        "id",
        "serviceMemberID",
        "uploads"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "serviceMemberID": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "DutyStation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        }
      }
    },
    "Entitlement": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "571008b1-b0de-454d-b843-d71be9f02c04"
        },
        "nonTemporaryStorage": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "privatelyOwnedVehicle": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "proGearWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "readOnly": true,
          "example": 2000
        },
        "proGearWeightSpouse": {
          "type": "integer",
          "x-formatting": "weight",
          "readOnly": true,
          "example": 500
        },
        "storageInTransit": {
          "type": "integer",
          "example": 90
        },
        "totalDependents": {
          "type": "integer",
          "example": 2
        },
        "totalWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "title",
        "detail"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "$ref": "#/definitions/MTOAgentType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})?$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^([2-9]\\d{2}-\\d{3}-\\d{4})?$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOAgentType": {
      "type": "string",
      "title": "MTO Agent Type",
      "enum": [
        "RELEASING_AGENT",
        "RECEIVING_AGENT"
      ],
      "example": "RELEASING_AGENT"
    },
    "MTOAgents": {
      "type": "array",
      "maxItems": 2,
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOHideMove": {
      "description": "describes the MTO ID and a description reason why the move was hidden.",
      "type": "object",
      "properties": {
        "hideReason": {
          "description": "Reason the move was selected to be hidden",
          "type": "string",
          "x-nullable": true,
          "example": "invalid name"
        },
        "moveTaskOrderID": {
          "description": "ID of the associated moveTaskOrder",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        }
      }
    },
    "MTOHideMovesResponse": {
      "description": "describes the moves that were hidden that contained non-approved fake data to use in the MilMove system.",
      "type": "object",
      "properties": {
        "moves": {
          "description": "Array of moves that were hidden.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOHideMove"
          }
        },
        "numberMovesHidden": {
          "description": "Number of moves that were hidden",
          "type": "integer"
        }
      }
    },
    "MTOServiceItem": {
      "description": "MTOServiceItem describes a base type of a service item. Polymorphic type. Both Move Task Orders and MTO Shipments will have MTO Service Items.",
      "type": "object",
      "required": [
        "modelType",
        "moveTaskOrderID"
      ],
      "properties": {
        "eTag": {
          "description": "ETag identifier required to update this object",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "ID of the service item",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "modelType": {
          "$ref": "#/definitions/MTOServiceItemModelType"
        },
        "moveTaskOrderID": {
          "description": "ID of the associated moveTaskOrder",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "description": "ID of the associated mtoShipment",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "description": "Full descriptive name of the service",
          "type": "string",
          "readOnly": true
        },
        "rejectionReason": {
          "description": "Reason the service item was rejected by the TOO",
          "type": "string",
          "x-nullable": true,
          "example": "item was too heavy"
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        }
      },
      "discriminator": "modelType"
    },
    "MTOServiceItemBasic": {
      "description": "Describes a basic service item subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode"
          ],
          "properties": {
            "reServiceCode": {
              "$ref": "#/definitions/ReServiceCode"
            }
          }
        }
      ]
    },
    "MTOServiceItemDestSIT": {
      "description": "Describes a domestic destination SIT service item. Subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "timeMilitary1",
            "firstAvailableDeliveryDate1",
            "timeMilitary2",
            "firstAvailableDeliveryDate2",
            "sitEntryDate"
          ],
          "properties": {
            "firstAvailableDeliveryDate1": {
              "description": "First available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date"
            },
            "firstAvailableDeliveryDate2": {
              "description": "Second available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date"
            },
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDFSIT",
                "DDASIT"
              ]
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT",
              "type": "string",
              "format": "date"
            },
            "timeMilitary1": {
              "description": "Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate1` + "`" + `, in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "example": "1400Z"
            },
            "timeMilitary2": {
              "description": "Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate2` + "`" + `, in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "example": "1400Z"
            }
          }
        }
      ]
    },
    "MTOServiceItemDimension": {
      "description": "Describes a dimension object for the MTOServiceItem.",
      "type": "object",
      "required": [
        "length",
        "width",
        "height"
      ],
      "properties": {
        "height": {
          "description": "Height in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "length": {
          "description": "Length in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "type": {
          "$ref": "#/definitions/DimensionType"
        },
        "width": {
          "description": "Width in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        }
      }
    },
    "MTOServiceItemDomesticCrating": {
      "description": "Describes a domestic crating/uncrating service item subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "item",
            "crate",
            "description"
          ],
          "properties": {
            "crate": {
              "$ref": "#/definitions/MTOServiceItemDimension"
            },
            "description": {
              "type": "string",
              "example": "Decorated horse head to be crated."
            },
            "item": {
              "$ref": "#/definitions/MTOServiceItemDimension"
            },
            "reServiceCode": {
              "description": "Service codes allowed for this model type.",
              "type": "string",
              "enum": [
                "DCRT",
                "DCRTSA",
                "DUCRT"
              ]
            }
          }
        }
      ]
    },
    "MTOServiceItemModelType": {
      "description": "Describes all model sub-types for a MTOServiceItem model.\n\nUsing this list, choose the correct modelType in the dropdown, corresponding to the service item type.\n  * DOFSIT, DOASIT - MTOServiceItemOriginSIT\n  * DDFSIT, DDASIT - MTOServiceItemDestSIT\n  * DOSHUT, DDSHUT - MTOServiceItemShuttle\n  * DCRT, DCRTSA, DUCRT - MTOServiceItemDomesticCrating\n\nThe documentation will then update with the supported fields.\n",
      "type": "string",
      "enum": [
        "MTOServiceItemBasic",
        "MTOServiceItemOriginSIT",
        "MTOServiceItemDestSIT",
        "MTOServiceItemShuttle",
        "MTOServiceItemDomesticCrating"
      ]
    },
    "MTOServiceItemOriginSIT": {
      "description": "Describes a domestic origin SIT service item. Subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "reason",
            "sitPostalCode",
            "sitEntryDate"
          ],
          "properties": {
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DOFSIT",
                "DOASIT"
              ]
            },
            "reason": {
              "description": "Explanation of why Prime is picking up SIT item.",
              "type": "string",
              "example": "Storage items need to be picked up"
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT",
              "type": "string",
              "format": "date"
            },
            "sitPostalCode": {
              "type": "string",
              "format": "zip",
              "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
              "example": "90210"
            }
          }
        }
      ]
    },
    "MTOServiceItemShuttle": {
      "description": "Describes a shuttle service item.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reason",
            "reServiceCode",
            "description"
          ],
          "properties": {
            "description": {
              "description": "Further details about the shuttle service.",
              "type": "string",
              "example": "Things to be moved to the place by shuttle."
            },
            "reServiceCode": {
              "description": "Service codes allowed for this model type.",
              "type": "string",
              "enum": [
                "DOSHUT",
                "DDSHUT"
              ]
            },
            "reason": {
              "description": "Explanation of why a shuttle service is required.",
              "type": "string",
              "example": "Storage items need to be picked up."
            }
          }
        }
      ]
    },
    "MTOServiceItemStatus": {
      "description": "Describes all statuses for a MTOServiceItem.",
      "type": "string",
      "enum": [
        "SUBMITTED",
        "APPROVED",
        "REJECTED"
      ]
    },
    "MTOShipment": {
      "properties": {
        "actualPickupDate": {
          "type": "string",
          "format": "date"
        },
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "approvedDate": {
          "description": "date when the shipment was given the status \"APPROVED\"",
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "firstAvailableDeliveryDate": {
          "type": "string",
          "format": "date"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoServiceItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "pointOfContact": {
          "description": "Email or id of a contact person for this update.",
          "type": "string"
        },
        "primeActualWeight": {
          "type": "integer",
          "example": 4500
        },
        "primeEstimatedWeight": {
          "type": "integer",
          "example": 4500
        },
        "primeEstimatedWeightRecordedDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "MTO Shipment not good enough"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "requiredDeliveryDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "scheduledPickupDate": {
          "type": "string",
          "format": "date"
        },
        "secondaryDeliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "SUBMITTED",
            "REJECTED"
          ],
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOShipmentType": {
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "HHG",
        "INTERNATIONAL_HHG",
        "INTERNATIONAL_UB"
      ],
      "x-display-value": {
        "HHG": "HHG",
        "INTERNATIONAL_HHG": "International HHG",
        "INTERNATIONAL_UB": "International UB"
      },
      "example": "HHG"
    },
    "MTOShipments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "MoveStatus": {
      "description": "Current status of this MoveTaskOrder",
      "type": "string",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "MoveTaskOrder": {
      "type": "object",
      "required": [
        "order",
        "contractorID"
      ],
      "properties": {
        "availableToPrimeAt": {
          "description": "Indicates this MoveTaskOrder is available for Prime API handling.\n\nIn production, only MoveTaskOrders for which this is set will be available to the API.\n",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "contractorID": {
          "description": "ID associated with the contractor, in this case Prime\n",
          "type": "string",
          "format": "uuid",
          "example": "5db13bb4-6d29-4bdb-bc81-262f4513ecf6"
        },
        "createdAt": {
          "description": "Date the MoveTaskOrder was created on.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "description": "Uniquely identifies the state of the MoveTaskOrder object (but not the nested objects)\n\nIt will change everytime the object is updated. Client should store the value.\nUpdates to this MoveTaskOrder will require that this eTag be passed in with the If-Match header.\n",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "ID of the MoveTaskOrder object.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "isCanceled": {
          "description": "Indicated this MoveTaskOrder has been canceled.",
          "type": "boolean",
          "x-nullable": true,
          "readOnly": true
        },
        "moveCode": {
          "description": "Unique 6-character code the customer can use to refer to their move",
          "type": "string",
          "readOnly": true,
          "example": "ABC123"
        },
        "mtoServiceItems": {
          "description": "Array of MTOServiceItems associated with this MoveTaskOrder.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "mtoShipments": {
          "$ref": "#/definitions/MTOShipments"
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "orderID": {
          "description": "ID of the Order object",
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequests": {
          "$ref": "#/definitions/PaymentRequests"
        },
        "ppmEstimatedWeight": {
          "description": "If the move is a PPM, this is the estimated weight in lbs.",
          "type": "integer"
        },
        "ppmType": {
          "description": "If the move is a PPM, indicates whether it is full or partial.",
          "type": "string",
          "enum": [
            "FULL",
            "PARTIAL"
          ]
        },
        "referenceId": {
          "description": "Unique ID associated with this Order.\n\nNo two MoveTaskOrders may have the same ID.\nAttempting to create a MoveTaskOrder may fail if this referenceId has been used already.\n",
          "type": "string",
          "readOnly": true,
          "example": "1001-3456"
        },
        "selectedMoveType": {
          "$ref": "#/definitions/SelectedMoveType"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "updatedAt": {
          "description": "Date on which this MoveTaskOrder was last updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MoveTaskOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveTaskOrder"
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "orderNumber",
        "ordersType",
        "ordersTypeDetail",
        "rank",
        "reportByDate",
        "issueDate",
        "status",
        "uploadedOrdersID",
        "tac",
        "originDutyStationID",
        "destinationDutyStationID",
        "departmentIndicator"
      ],
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "customerID": {
          "description": "ID of the Customer this Order belongs to.\n\nIf creating a MoveTaskOrder. either an existing customerID should be provided or the nested customer object should be populated for creation.\n",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "departmentIndicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "destinationDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "destinationDutyStationID": {
          "description": "ID of the destination duty station.\n\nIf creating a MoveTaskOrder, this should match an existing duty station.\n",
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "description": "Uniquely identifies the state of the Order object (but not the nested objects)\n\nIt will change everytime the object is updated. Client should store the value.\nUpdates to this Order will require that this eTag be passed in with the If-Match header.\n",
          "type": "string",
          "readOnly": true
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlement"
        },
        "id": {
          "description": "ID of the Order object.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "issueDate": {
          "description": "The date the orders were issued.",
          "type": "string",
          "format": "date"
        },
        "orderNumber": {
          "description": "ID of the military orders associated with this move.",
          "type": "string",
          "x-nullable": true,
          "example": "030-00362"
        },
        "ordersType": {
          "$ref": "#/definitions/OrdersType"
        },
        "ordersTypeDetail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "originDutyStationID": {
          "description": "ID of the origin duty station.\n\nIf creating a MoveTaskOrder, this should match an existing duty station.\n",
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "rank": {
          "$ref": "#/definitions/Rank"
        },
        "reportByDate": {
          "description": "Date that the service member must report to the new DutyStation by.",
          "type": "string",
          "format": "date"
        },
        "status": {
          "$ref": "#/definitions/OrdersStatus"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "example": "F8J1"
        },
        "uploadedOrders": {
          "$ref": "#/definitions/Document"
        },
        "uploadedOrdersID": {
          "description": "ID of the uploaded document.",
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OrdersStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "RETIREMENT",
        "SEPARATION",
        "GHC",
        "NTS"
      ],
      "x-display-value": {
        "GHC": "GHC",
        "NTS": "NTS",
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station (PCS)",
        "RETIREMENT": "Retirement",
        "SEPARATION": "Separation"
      }
    },
    "OrdersTypeDetail": {
      "type": "string",
      "title": "Orders type detail",
      "enum": [
        "HHG_PERMITTED",
        "PCS_TDY",
        "HHG_RESTRICTED_PROHIBITED",
        "HHG_RESTRICTED_AREA",
        "INSTRUCTION_20_WEEKS",
        "HHG_PROHIBITED_20_WEEKS",
        "DELAYED_APPROVAL"
      ],
      "x-display-value": {
        "DELAYED_APPROVAL": "Delayed Approval 20 Weeks or More",
        "HHG_PERMITTED": "Shipment of HHG Permitted",
        "HHG_PROHIBITED_20_WEEKS": "Shipment of HHG Prohibited but Authorized within 20 weeks",
        "HHG_RESTRICTED_AREA": "HHG Restricted Area-HHG Prohibited",
        "HHG_RESTRICTED_PROHIBITED": "Shipment of HHG Restricted or Prohibited",
        "INSTRUCTION_20_WEEKS": "Course of Instruction 20 Weeks or More",
        "PCS_TDY": "PCS with TDY Enroute"
      },
      "x-nullable": true
    },
    "PaymentRequest": {
      "type": "object",
      "properties": {
        "documentPackage": {
          "$ref": "#/definitions/ProofOfServicePackage"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestNumber": {
          "type": "string",
          "readOnly": true,
          "example": "1234-5678-1"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "PaymentRequestEDI": {
      "type": "object",
      "properties": {
        "edi": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "PaymentRequestStatus": {
      "type": "string",
      "title": "Payment Request Status",
      "enum": [
        "PENDING",
        "REVIEWED",
        "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
        "SENT_TO_GEX",
        "RECEIVED_BY_GEX",
        "PAID"
      ]
    },
    "PaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentRequest"
      }
    },
    "ProcessReviewedPaymentRequests": {
      "type": "object",
      "required": [
        "sendToSyncada",
        "readFromSyncada",
        "deleteFromSyncada"
      ],
      "properties": {
        "deleteFromSyncada": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "paymentRequestID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "readFromSyncada": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "sendToSyncada": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "ProofOfServicePackage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "Rank": {
      "description": "Rank of the service member, must match specific list of available ranks.",
      "type": "string",
      "enum": [
        "E_1",
        "E_2",
        "E_3",
        "E_4",
        "E_5",
        "E_6",
        "E_7",
        "E_8",
        "E_9",
        "O_1_ACADEMY_GRADUATE",
        "O_2",
        "O_3",
        "O_4",
        "O_5",
        "O_6",
        "O_7",
        "O_8",
        "O_9",
        "O_10",
        "W_1",
        "W_2",
        "W_3",
        "W_4",
        "W_5",
        "AVIATION_CADET",
        "CIVILIAN_EMPLOYEE",
        "ACADEMY_CADET",
        "MIDSHIPMAN"
      ]
    },
    "ReServiceCode": {
      "description": "This is the full list of service items that can be found on a shipment. Not all service items\nmay be requested by the Prime, but may be returned in a response.\n\nDocumentation of all the service items will be provided.\n",
      "type": "string",
      "enum": [
        "CS",
        "DBHF",
        "DBTF",
        "DCRT",
        "DCRTSA",
        "DDASIT",
        "DDDSIT",
        "DDFSIT",
        "DDP",
        "DDSHUT",
        "DLH",
        "DMHF",
        "DNPKF",
        "DOASIT",
        "DOFSIT",
        "DOP",
        "DOPSIT",
        "DOSHUT",
        "DPK",
        "DSH",
        "DUCRT",
        "DUPK",
        "FSC",
        "IBHF",
        "IBTF",
        "ICOLH",
        "ICOUB",
        "ICRT",
        "ICRTSA",
        "IDASIT",
        "IDDSIT",
        "IDFSIT",
        "IDSHUT",
        "IHPK",
        "IHUPK",
        "INPKF",
        "IOASIT",
        "IOCLH",
        "IOCUB",
        "IOFSIT",
        "IOOLH",
        "IOOUB",
        "IOPSIT",
        "IOSHUT",
        "IUBPK",
        "IUBUPK",
        "IUCRT",
        "MS",
        "NSTH",
        "NSTUB"
      ]
    },
    "SelectedMoveType": {
      "type": "string",
      "title": "Selected Move Type",
      "enum": [
        "HHG",
        "PPM",
        "UB",
        "POV",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "HHG_PPM"
      ],
      "x-nullable": true
    },
    "UpdateMTOServiceItemStatus": {
      "properties": {
        "rejectionReason": {
          "description": "Reason the service item was rejected by the TOO\"\"",
          "type": "string",
          "x-nullable": true,
          "example": "item was too heavy"
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        }
      }
    },
    "UpdateMTOShipmentStatus": {
      "properties": {
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment not good enough"
        },
        "status": {
          "type": "string",
          "enum": [
            "REJECTED",
            "APPROVED",
            "SUBMITTED",
            "CANCELLATION_REQUESTED"
          ]
        }
      }
    },
    "UpdatePaymentRequestStatus": {
      "type": "object",
      "properties": {
        "eTag": {
          "description": "Attribute of the payment request object that automatically changes when the request is updated. This matches the value passed in the header for ` + "`" + `If-Match` + "`" + `. Required when sending PUT or PATCH requests to prevent updating stale data.",
          "type": "string",
          "readOnly": true
        },
        "rejectionReason": {
          "description": "A written reason to provide context for the status.",
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "Upload": {
      "type": "object",
      "required": [
        "id",
        "url",
        "filename",
        "contentType",
        "bytes"
      ],
      "properties": {
        "bytes": {
          "type": "integer"
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "type": "string",
          "enum": [
            "INFECTED",
            "CLEAN",
            "PROCESSING"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "format": "uri",
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalidFields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "type": "object"
        }
      ],
      "properties": {
        "invalidFields": {
          "type": "object",
          "additionalProperties": {
            "description": "List of errors for the field",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "WebhookNotification": {
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Time representing when the event was triggered",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eventKey": {
          "description": "Name of event triggered",
          "type": "string",
          "example": "PaymentRequest.Update"
        },
        "firstAttemptedAt": {
          "description": "Time representing when the system firstAttempted to send this notification",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "object": {
          "type": "string",
          "format": "JSON",
          "x-nullable": true
        },
        "objectID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "$ref": "#/definitions/WebhookNotificationStatus"
        },
        "traceID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updatedAt": {
          "description": "Time representing when the notification was last updated",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "WebhookNotificationStatus": {
      "description": "Statuses available for a Webhook Notification",
      "type": "string",
      "enum": [
        "PENDING",
        "SENT",
        "SKIPPED",
        "FAILING",
        "FAILED"
      ]
    }
  },
  "responses": {
    "Conflict": {
      "description": "There was a conflict with the request.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "ServerError": {
      "description": "A server error occurred.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "The payload was unprocessable.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "moveTaskOrder"
    },
    {
      "name": "paymentRequest"
    },
    {
      "name": "mtoServiceItem"
    },
    {
      "name": "mtoShipment"
    },
    {
      "name": "webhook"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Milmove Support API gives you programmatic access to support functionality useful for testing and debug.\n\nThis API is not available in production.\n\nAll endpoints are located at ` + "`" + `primelocal/support/v1/` + "`" + `.\n",
    "title": "Milmove Support API",
    "contact": {
      "email": "dp3@truss.works"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/support/v1",
  "paths": {
    "/move-task-orders": {
      "get": {
        "description": "### Functionality\nThis endpoint lists all MoveTaskOrders regardless of whether or not they have been made available to Prime.\n\nIt will provide nested information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "listMTOs",
        "operationId": "listMTOs",
        "parameters": [
          {
            "type": "integer",
            "format": "timestamp",
            "description": "Only return move task orders updated since this time.",
            "name": "since",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all move task orders.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrders"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Creates an instance of moveTaskOrder.\nCurrently this will also create a number of nested objects but not all.\nIt will currently create\n* MoveTaskOrder\n* Order\n* Customer\n* User\n* Entitlement\n\nIt will not create addresses, duty stations, shipments, payment requests or service items. It requires an existing contractor ID, destination duty station ID,\norigin duty station ID, and an uploaded orders ID to be passed into the request.\n\nThis is a support endpoint and will not be available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "createMoveTaskOrder",
        "operationId": "createMoveTaskOrder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created MoveTaskOrder object.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/move-task-orders/hide": {
      "patch": {
        "description": "Updates move task order without fake user data ` + "`" + `show` + "`" + ` to false. No request body required. \u003cbr /\u003e\n\u003cbr /\u003e\nThis is a support endpoint and will not be available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "hideNonFakeMoveTaskOrders",
        "operationId": "hideNonFakeMoveTaskOrders",
        "responses": {
          "200": {
            "description": "Successfully hid MTOs.",
            "schema": {
              "$ref": "#/definitions/MTOHideMovesResponse"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "There was a conflict with the request.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}": {
      "get": {
        "description": "### Functionality\nThis endpoint gets an individual MoveTaskOrder by ID.\n\nIt will provide nested information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests.\n\nThis is a support endpoint and is not available in production.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "getMoveTaskOrder",
        "operationId": "getMoveTaskOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieve an individual move task order.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "UUID of move task order to use.",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/available-to-prime": {
      "patch": {
        "description": "Updates move task order ` + "`" + `availableToPrimeAt` + "`" + ` to make it available to prime. No request body required. \u003cbr /\u003e\n\u003cbr /\u003e\nThis is a support endpoint and will not be available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "makeMoveTaskOrderAvailable",
        "operationId": "makeMoveTaskOrderAvailable",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully made MTO available to Prime.",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "UUID of move task order.",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/payment-requests": {
      "get": {
        "description": "### Functionality\n\nThis endpoint lists all PaymentRequests associated with a given MoveTaskOrder.\n\nThis is a support endpoint and is not available in production.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "listMTOPaymentRequests",
        "operationId": "listMTOPaymentRequests",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Only return move task orders updated since this time.",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved payment requests associated with a given move task order",
            "schema": {
              "$ref": "#/definitions/PaymentRequests"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-service-items/{mtoServiceItemID}/status": {
      "patch": {
        "description": "Updates the status of a service item for a move to APPROVED or REJECTED. \u003cbr /\u003e\n\u003cbr /\u003e\nThis is a support endpoint and will not be available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "updateMTOServiceItemStatus",
        "operationId": "updateMTOServiceItemStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOServiceItemStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated service item status for a move task order.",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "There was a conflict with the request.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "UUID of mto service item to use.",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/mto-shipments/{mtoShipmentID}/status": {
      "patch": {
        "description": "Updates a shipment's status to APPROVED or REJECTED for the purpose of testing the Prime API. If APPROVED, ` + "`" + `rejectionReason` + "`" + ` should be blank and any value passed through the body will be ignored. If REJECTED, a value in ` + "`" + `rejectionReason` + "`" + ` is required. \u003cbr /\u003e \u003cbr /\u003e This is a support endpoint and will not be available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipmentStatus",
        "operationId": "updateMTOShipmentStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMTOShipmentStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the shipment's status.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "There was a conflict with the request.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the shipment being updated.",
          "name": "mtoShipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/process-reviewed": {
      "patch": {
        "description": "Updates the status of reviewed payment requests and sends PRs to Syncada if\nthe SendToSyncada flag is set\n\nThis is a support endpoint and will not be available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "processReviewedPaymentRequests",
        "operationId": "processReviewedPaymentRequests",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessReviewedPaymentRequests"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status of reviewed payment request and sent to Syncada if that flag is set",
            "schema": {
              "$ref": "#/definitions/PaymentRequests"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/payment-requests/{paymentRequestID}/edi": {
      "get": {
        "description": "Returns the EDI (Electronic Data Interchange) message for the payment request identified\nby the given payment request ID. Note that the EDI returned in the JSON payload will have \\n where there\nwould normally be line breaks (due to JSON not allowing line breaks in a string).\n\nThis is a support endpoint and will not be available in production.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "getPaymentRequestEDI",
        "operationId": "getPaymentRequestEDI",
        "responses": {
          "200": {
            "description": "Successfully retrieved payment requests associated with a given move task order",
            "schema": {
              "$ref": "#/definitions/PaymentRequestEDI"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "There was a conflict with the request.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the payment request for which EDI should be generated.",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}/status": {
      "patch": {
        "description": "Updates status of a payment request to REVIEWED, SENT_TO_GEX, RECEIVED_BY_GEX, REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED, or PAID.\n\nA status of REVIEWED can optionally have a ` + "`" + `rejectionReason` + "`" + `.\n\nThis is a support endpoint and is not available in production.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequest"
        ],
        "summary": "updatePaymentRequestStatus",
        "operationId": "updatePaymentRequestStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePaymentRequestStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated payment request status.",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "There was a conflict with the request.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of payment request.",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/webhook-notifications": {
      "post": {
        "description": "This endpoint creates a webhook notification in the database. If the webhook client is running, it may send the notification soon after creation.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "webhook"
        ],
        "summary": "Test endpoint for creating webhook notifications",
        "operationId": "createWebhookNotification",
        "parameters": [
          {
            "description": "The notification sent by webhook-client.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/WebhookNotification"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful creation",
            "schema": {
              "$ref": "#/definitions/WebhookNotification"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook-notify": {
      "post": {
        "description": "This endpoint receives a notification that matches the webhook notification model. This is a test endpoint that represents a receiving server. In production, the Prime will set up a receiving endpoint. In testing, this server accepts notifications at this endpoint and simply responds with success and logs them. The ` + "`" + `webhook-client` + "`" + ` is responsible for retrieving messages from the webhook_notifications table and sending them to the Prime (this endpoint in our testing case) via an mTLS connection.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "webhook"
        ],
        "summary": "Test endpoint for receiving messages from our own webhook-client",
        "operationId": "receiveWebhookNotification",
        "parameters": [
          {
            "description": "The webhook notification being sent",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookNotification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Received notification",
            "schema": {
              "$ref": "#/definitions/WebhookNotification"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "required": [
        "streetAddress1",
        "city",
        "state",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "Customer": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "dodID",
        "rank",
        "agency"
      ],
      "properties": {
        "agency": {
          "type": "string",
          "title": "Agency customer is affilated with"
        },
        "currentAddress": {
          "$ref": "#/definitions/Address"
        },
        "dodID": {
          "type": "string"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "example": "Vanya"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string",
          "example": "Petrovna"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "rank": {
          "$ref": "#/definitions/Rank"
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "DeptIndicator": {
      "type": "string",
      "title": "Dept. indicator",
      "enum": [
        "NAVY_AND_MARINES",
        "ARMY",
        "AIR_FORCE",
        "COAST_GUARD"
      ],
      "x-display-value": {
        "AIR_FORCE": "57 Air Force",
        "ARMY": "21 Army",
        "COAST_GUARD": "70 Coast Guard",
        "NAVY_AND_MARINES": "17 Navy and Marine Corps"
      },
      "x-nullable": true
    },
    "DimensionType": {
      "description": "Describes a dimension type for a MTOServiceItemDimension.",
      "type": "string",
      "enum": [
        "ITEM",
        "CRATE"
      ]
    },
    "Document": {
      "type": "object",
      "required": [
        "id",
        "serviceMemberID",
        "uploads"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "serviceMemberID": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "DutyStation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        }
      }
    },
    "Entitlement": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "571008b1-b0de-454d-b843-d71be9f02c04"
        },
        "nonTemporaryStorage": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "privatelyOwnedVehicle": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "proGearWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "readOnly": true,
          "example": 2000
        },
        "proGearWeightSpouse": {
          "type": "integer",
          "x-formatting": "weight",
          "readOnly": true,
          "example": 500
        },
        "storageInTransit": {
          "type": "integer",
          "example": 90
        },
        "totalDependents": {
          "type": "integer",
          "example": 2
        },
        "totalWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "title",
        "detail"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "$ref": "#/definitions/MTOAgentType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})?$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^([2-9]\\d{2}-\\d{3}-\\d{4})?$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOAgentType": {
      "type": "string",
      "title": "MTO Agent Type",
      "enum": [
        "RELEASING_AGENT",
        "RECEIVING_AGENT"
      ],
      "example": "RELEASING_AGENT"
    },
    "MTOAgents": {
      "type": "array",
      "maxItems": 2,
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOHideMove": {
      "description": "describes the MTO ID and a description reason why the move was hidden.",
      "type": "object",
      "properties": {
        "hideReason": {
          "description": "Reason the move was selected to be hidden",
          "type": "string",
          "x-nullable": true,
          "example": "invalid name"
        },
        "moveTaskOrderID": {
          "description": "ID of the associated moveTaskOrder",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        }
      }
    },
    "MTOHideMovesResponse": {
      "description": "describes the moves that were hidden that contained non-approved fake data to use in the MilMove system.",
      "type": "object",
      "properties": {
        "moves": {
          "description": "Array of moves that were hidden.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOHideMove"
          }
        },
        "numberMovesHidden": {
          "description": "Number of moves that were hidden",
          "type": "integer"
        }
      }
    },
    "MTOServiceItem": {
      "description": "MTOServiceItem describes a base type of a service item. Polymorphic type. Both Move Task Orders and MTO Shipments will have MTO Service Items.",
      "type": "object",
      "required": [
        "modelType",
        "moveTaskOrderID"
      ],
      "properties": {
        "eTag": {
          "description": "ETag identifier required to update this object",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "ID of the service item",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "modelType": {
          "$ref": "#/definitions/MTOServiceItemModelType"
        },
        "moveTaskOrderID": {
          "description": "ID of the associated moveTaskOrder",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "description": "ID of the associated mtoShipment",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "description": "Full descriptive name of the service",
          "type": "string",
          "readOnly": true
        },
        "rejectionReason": {
          "description": "Reason the service item was rejected by the TOO",
          "type": "string",
          "x-nullable": true,
          "example": "item was too heavy"
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        }
      },
      "discriminator": "modelType"
    },
    "MTOServiceItemBasic": {
      "description": "Describes a basic service item subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode"
          ],
          "properties": {
            "reServiceCode": {
              "$ref": "#/definitions/ReServiceCode"
            }
          }
        }
      ]
    },
    "MTOServiceItemDestSIT": {
      "description": "Describes a domestic destination SIT service item. Subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "timeMilitary1",
            "firstAvailableDeliveryDate1",
            "timeMilitary2",
            "firstAvailableDeliveryDate2",
            "sitEntryDate"
          ],
          "properties": {
            "firstAvailableDeliveryDate1": {
              "description": "First available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date"
            },
            "firstAvailableDeliveryDate2": {
              "description": "Second available date that Prime can deliver SIT service item.",
              "type": "string",
              "format": "date"
            },
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DDFSIT",
                "DDASIT"
              ]
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT",
              "type": "string",
              "format": "date"
            },
            "timeMilitary1": {
              "description": "Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate1` + "`" + `, in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "example": "1400Z"
            },
            "timeMilitary2": {
              "description": "Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate2` + "`" + `, in military format.",
              "type": "string",
              "pattern": "\\d{4}Z",
              "example": "1400Z"
            }
          }
        }
      ]
    },
    "MTOServiceItemDimension": {
      "description": "Describes a dimension object for the MTOServiceItem.",
      "type": "object",
      "required": [
        "length",
        "width",
        "height"
      ],
      "properties": {
        "height": {
          "description": "Height in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "length": {
          "description": "Length in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "type": {
          "$ref": "#/definitions/DimensionType"
        },
        "width": {
          "description": "Width in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        }
      }
    },
    "MTOServiceItemDomesticCrating": {
      "description": "Describes a domestic crating/uncrating service item subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "item",
            "crate",
            "description"
          ],
          "properties": {
            "crate": {
              "$ref": "#/definitions/MTOServiceItemDimension"
            },
            "description": {
              "type": "string",
              "example": "Decorated horse head to be crated."
            },
            "item": {
              "$ref": "#/definitions/MTOServiceItemDimension"
            },
            "reServiceCode": {
              "description": "Service codes allowed for this model type.",
              "type": "string",
              "enum": [
                "DCRT",
                "DCRTSA",
                "DUCRT"
              ]
            }
          }
        }
      ]
    },
    "MTOServiceItemModelType": {
      "description": "Describes all model sub-types for a MTOServiceItem model.\n\nUsing this list, choose the correct modelType in the dropdown, corresponding to the service item type.\n  * DOFSIT, DOASIT - MTOServiceItemOriginSIT\n  * DDFSIT, DDASIT - MTOServiceItemDestSIT\n  * DOSHUT, DDSHUT - MTOServiceItemShuttle\n  * DCRT, DCRTSA, DUCRT - MTOServiceItemDomesticCrating\n\nThe documentation will then update with the supported fields.\n",
      "type": "string",
      "enum": [
        "MTOServiceItemBasic",
        "MTOServiceItemOriginSIT",
        "MTOServiceItemDestSIT",
        "MTOServiceItemShuttle",
        "MTOServiceItemDomesticCrating"
      ]
    },
    "MTOServiceItemOriginSIT": {
      "description": "Describes a domestic origin SIT service item. Subtype of a MTOServiceItem.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reServiceCode",
            "reason",
            "sitPostalCode",
            "sitEntryDate"
          ],
          "properties": {
            "reServiceCode": {
              "description": "Service code allowed for this model type.",
              "type": "string",
              "enum": [
                "DOFSIT",
                "DOASIT"
              ]
            },
            "reason": {
              "description": "Explanation of why Prime is picking up SIT item.",
              "type": "string",
              "example": "Storage items need to be picked up"
            },
            "sitDepartureDate": {
              "description": "Departure date for SIT. This is the end date of the SIT at either origin or destination. This is optional as it can be updated using the UpdateMTOServiceItemSIT modelType at a later date.",
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitEntryDate": {
              "description": "Entry date for the SIT",
              "type": "string",
              "format": "date"
            },
            "sitPostalCode": {
              "type": "string",
              "format": "zip",
              "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
              "example": "90210"
            }
          }
        }
      ]
    },
    "MTOServiceItemShuttle": {
      "description": "Describes a shuttle service item.",
      "allOf": [
        {
          "$ref": "#/definitions/MTOServiceItem"
        },
        {
          "type": "object",
          "required": [
            "reason",
            "reServiceCode",
            "description"
          ],
          "properties": {
            "description": {
              "description": "Further details about the shuttle service.",
              "type": "string",
              "example": "Things to be moved to the place by shuttle."
            },
            "reServiceCode": {
              "description": "Service codes allowed for this model type.",
              "type": "string",
              "enum": [
                "DOSHUT",
                "DDSHUT"
              ]
            },
            "reason": {
              "description": "Explanation of why a shuttle service is required.",
              "type": "string",
              "example": "Storage items need to be picked up."
            }
          }
        }
      ]
    },
    "MTOServiceItemStatus": {
      "description": "Describes all statuses for a MTOServiceItem.",
      "type": "string",
      "enum": [
        "SUBMITTED",
        "APPROVED",
        "REJECTED"
      ]
    },
    "MTOShipment": {
      "properties": {
        "actualPickupDate": {
          "type": "string",
          "format": "date"
        },
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "approvedDate": {
          "description": "date when the shipment was given the status \"APPROVED\"",
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "firstAvailableDeliveryDate": {
          "type": "string",
          "format": "date"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoServiceItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "pointOfContact": {
          "description": "Email or id of a contact person for this update.",
          "type": "string"
        },
        "primeActualWeight": {
          "type": "integer",
          "example": 4500
        },
        "primeEstimatedWeight": {
          "type": "integer",
          "example": 4500
        },
        "primeEstimatedWeightRecordedDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "MTO Shipment not good enough"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "requiredDeliveryDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "scheduledPickupDate": {
          "type": "string",
          "format": "date"
        },
        "secondaryDeliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "SUBMITTED",
            "REJECTED"
          ],
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOShipmentType": {
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "HHG",
        "INTERNATIONAL_HHG",
        "INTERNATIONAL_UB"
      ],
      "x-display-value": {
        "HHG": "HHG",
        "INTERNATIONAL_HHG": "International HHG",
        "INTERNATIONAL_UB": "International UB"
      },
      "example": "HHG"
    },
    "MTOShipments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "MoveStatus": {
      "description": "Current status of this MoveTaskOrder",
      "type": "string",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "MoveTaskOrder": {
      "type": "object",
      "required": [
        "order",
        "contractorID"
      ],
      "properties": {
        "availableToPrimeAt": {
          "description": "Indicates this MoveTaskOrder is available for Prime API handling.\n\nIn production, only MoveTaskOrders for which this is set will be available to the API.\n",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "contractorID": {
          "description": "ID associated with the contractor, in this case Prime\n",
          "type": "string",
          "format": "uuid",
          "example": "5db13bb4-6d29-4bdb-bc81-262f4513ecf6"
        },
        "createdAt": {
          "description": "Date the MoveTaskOrder was created on.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "description": "Uniquely identifies the state of the MoveTaskOrder object (but not the nested objects)\n\nIt will change everytime the object is updated. Client should store the value.\nUpdates to this MoveTaskOrder will require that this eTag be passed in with the If-Match header.\n",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "ID of the MoveTaskOrder object.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "isCanceled": {
          "description": "Indicated this MoveTaskOrder has been canceled.",
          "type": "boolean",
          "x-nullable": true,
          "readOnly": true
        },
        "moveCode": {
          "description": "Unique 6-character code the customer can use to refer to their move",
          "type": "string",
          "readOnly": true,
          "example": "ABC123"
        },
        "mtoServiceItems": {
          "description": "Array of MTOServiceItems associated with this MoveTaskOrder.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTOServiceItem"
          }
        },
        "mtoShipments": {
          "$ref": "#/definitions/MTOShipments"
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "orderID": {
          "description": "ID of the Order object",
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequests": {
          "$ref": "#/definitions/PaymentRequests"
        },
        "ppmEstimatedWeight": {
          "description": "If the move is a PPM, this is the estimated weight in lbs.",
          "type": "integer"
        },
        "ppmType": {
          "description": "If the move is a PPM, indicates whether it is full or partial.",
          "type": "string",
          "enum": [
            "FULL",
            "PARTIAL"
          ]
        },
        "referenceId": {
          "description": "Unique ID associated with this Order.\n\nNo two MoveTaskOrders may have the same ID.\nAttempting to create a MoveTaskOrder may fail if this referenceId has been used already.\n",
          "type": "string",
          "readOnly": true,
          "example": "1001-3456"
        },
        "selectedMoveType": {
          "$ref": "#/definitions/SelectedMoveType"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "updatedAt": {
          "description": "Date on which this MoveTaskOrder was last updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MoveTaskOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveTaskOrder"
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "orderNumber",
        "ordersType",
        "ordersTypeDetail",
        "rank",
        "reportByDate",
        "issueDate",
        "status",
        "uploadedOrdersID",
        "tac",
        "originDutyStationID",
        "destinationDutyStationID",
        "departmentIndicator"
      ],
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "customerID": {
          "description": "ID of the Customer this Order belongs to.\n\nIf creating a MoveTaskOrder. either an existing customerID should be provided or the nested customer object should be populated for creation.\n",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "departmentIndicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "destinationDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "destinationDutyStationID": {
          "description": "ID of the destination duty station.\n\nIf creating a MoveTaskOrder, this should match an existing duty station.\n",
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "description": "Uniquely identifies the state of the Order object (but not the nested objects)\n\nIt will change everytime the object is updated. Client should store the value.\nUpdates to this Order will require that this eTag be passed in with the If-Match header.\n",
          "type": "string",
          "readOnly": true
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlement"
        },
        "id": {
          "description": "ID of the Order object.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "issueDate": {
          "description": "The date the orders were issued.",
          "type": "string",
          "format": "date"
        },
        "orderNumber": {
          "description": "ID of the military orders associated with this move.",
          "type": "string",
          "x-nullable": true,
          "example": "030-00362"
        },
        "ordersType": {
          "$ref": "#/definitions/OrdersType"
        },
        "ordersTypeDetail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "originDutyStationID": {
          "description": "ID of the origin duty station.\n\nIf creating a MoveTaskOrder, this should match an existing duty station.\n",
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "rank": {
          "$ref": "#/definitions/Rank"
        },
        "reportByDate": {
          "description": "Date that the service member must report to the new DutyStation by.",
          "type": "string",
          "format": "date"
        },
        "status": {
          "$ref": "#/definitions/OrdersStatus"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "example": "F8J1"
        },
        "uploadedOrders": {
          "$ref": "#/definitions/Document"
        },
        "uploadedOrdersID": {
          "description": "ID of the uploaded document.",
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OrdersStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "RETIREMENT",
        "SEPARATION",
        "GHC",
        "NTS"
      ],
      "x-display-value": {
        "GHC": "GHC",
        "NTS": "NTS",
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station (PCS)",
        "RETIREMENT": "Retirement",
        "SEPARATION": "Separation"
      }
    },
    "OrdersTypeDetail": {
      "type": "string",
      "title": "Orders type detail",
      "enum": [
        "HHG_PERMITTED",
        "PCS_TDY",
        "HHG_RESTRICTED_PROHIBITED",
        "HHG_RESTRICTED_AREA",
        "INSTRUCTION_20_WEEKS",
        "HHG_PROHIBITED_20_WEEKS",
        "DELAYED_APPROVAL"
      ],
      "x-display-value": {
        "DELAYED_APPROVAL": "Delayed Approval 20 Weeks or More",
        "HHG_PERMITTED": "Shipment of HHG Permitted",
        "HHG_PROHIBITED_20_WEEKS": "Shipment of HHG Prohibited but Authorized within 20 weeks",
        "HHG_RESTRICTED_AREA": "HHG Restricted Area-HHG Prohibited",
        "HHG_RESTRICTED_PROHIBITED": "Shipment of HHG Restricted or Prohibited",
        "INSTRUCTION_20_WEEKS": "Course of Instruction 20 Weeks or More",
        "PCS_TDY": "PCS with TDY Enroute"
      },
      "x-nullable": true
    },
    "PaymentRequest": {
      "type": "object",
      "properties": {
        "documentPackage": {
          "$ref": "#/definitions/ProofOfServicePackage"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestNumber": {
          "type": "string",
          "readOnly": true,
          "example": "1234-5678-1"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "PaymentRequestEDI": {
      "type": "object",
      "properties": {
        "edi": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "PaymentRequestStatus": {
      "type": "string",
      "title": "Payment Request Status",
      "enum": [
        "PENDING",
        "REVIEWED",
        "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
        "SENT_TO_GEX",
        "RECEIVED_BY_GEX",
        "PAID"
      ]
    },
    "PaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentRequest"
      }
    },
    "ProcessReviewedPaymentRequests": {
      "type": "object",
      "required": [
        "sendToSyncada",
        "readFromSyncada",
        "deleteFromSyncada"
      ],
      "properties": {
        "deleteFromSyncada": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "paymentRequestID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "readFromSyncada": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "sendToSyncada": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "ProofOfServicePackage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "Rank": {
      "description": "Rank of the service member, must match specific list of available ranks.",
      "type": "string",
      "enum": [
        "E_1",
        "E_2",
        "E_3",
        "E_4",
        "E_5",
        "E_6",
        "E_7",
        "E_8",
        "E_9",
        "O_1_ACADEMY_GRADUATE",
        "O_2",
        "O_3",
        "O_4",
        "O_5",
        "O_6",
        "O_7",
        "O_8",
        "O_9",
        "O_10",
        "W_1",
        "W_2",
        "W_3",
        "W_4",
        "W_5",
        "AVIATION_CADET",
        "CIVILIAN_EMPLOYEE",
        "ACADEMY_CADET",
        "MIDSHIPMAN"
      ]
    },
    "ReServiceCode": {
      "description": "This is the full list of service items that can be found on a shipment. Not all service items\nmay be requested by the Prime, but may be returned in a response.\n\nDocumentation of all the service items will be provided.\n",
      "type": "string",
      "enum": [
        "CS",
        "DBHF",
        "DBTF",
        "DCRT",
        "DCRTSA",
        "DDASIT",
        "DDDSIT",
        "DDFSIT",
        "DDP",
        "DDSHUT",
        "DLH",
        "DMHF",
        "DNPKF",
        "DOASIT",
        "DOFSIT",
        "DOP",
        "DOPSIT",
        "DOSHUT",
        "DPK",
        "DSH",
        "DUCRT",
        "DUPK",
        "FSC",
        "IBHF",
        "IBTF",
        "ICOLH",
        "ICOUB",
        "ICRT",
        "ICRTSA",
        "IDASIT",
        "IDDSIT",
        "IDFSIT",
        "IDSHUT",
        "IHPK",
        "IHUPK",
        "INPKF",
        "IOASIT",
        "IOCLH",
        "IOCUB",
        "IOFSIT",
        "IOOLH",
        "IOOUB",
        "IOPSIT",
        "IOSHUT",
        "IUBPK",
        "IUBUPK",
        "IUCRT",
        "MS",
        "NSTH",
        "NSTUB"
      ]
    },
    "SelectedMoveType": {
      "type": "string",
      "title": "Selected Move Type",
      "enum": [
        "HHG",
        "PPM",
        "UB",
        "POV",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "HHG_PPM"
      ],
      "x-nullable": true
    },
    "UpdateMTOServiceItemStatus": {
      "properties": {
        "rejectionReason": {
          "description": "Reason the service item was rejected by the TOO\"\"",
          "type": "string",
          "x-nullable": true,
          "example": "item was too heavy"
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        }
      }
    },
    "UpdateMTOShipmentStatus": {
      "properties": {
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment not good enough"
        },
        "status": {
          "type": "string",
          "enum": [
            "REJECTED",
            "APPROVED",
            "SUBMITTED",
            "CANCELLATION_REQUESTED"
          ]
        }
      }
    },
    "UpdatePaymentRequestStatus": {
      "type": "object",
      "properties": {
        "eTag": {
          "description": "Attribute of the payment request object that automatically changes when the request is updated. This matches the value passed in the header for ` + "`" + `If-Match` + "`" + `. Required when sending PUT or PATCH requests to prevent updating stale data.",
          "type": "string",
          "readOnly": true
        },
        "rejectionReason": {
          "description": "A written reason to provide context for the status.",
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "Upload": {
      "type": "object",
      "required": [
        "id",
        "url",
        "filename",
        "contentType",
        "bytes"
      ],
      "properties": {
        "bytes": {
          "type": "integer"
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "type": "string",
          "enum": [
            "INFECTED",
            "CLEAN",
            "PROCESSING"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "format": "uri",
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalidFields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "$ref": "#/definitions/ValidationErrorAllOf1"
        }
      ],
      "properties": {
        "invalidFields": {
          "type": "object",
          "additionalProperties": {
            "description": "List of errors for the field",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "ValidationErrorAllOf1": {
      "type": "object"
    },
    "WebhookNotification": {
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Time representing when the event was triggered",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eventKey": {
          "description": "Name of event triggered",
          "type": "string",
          "example": "PaymentRequest.Update"
        },
        "firstAttemptedAt": {
          "description": "Time representing when the system firstAttempted to send this notification",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "object": {
          "type": "string",
          "format": "JSON",
          "x-nullable": true
        },
        "objectID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "$ref": "#/definitions/WebhookNotificationStatus"
        },
        "traceID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updatedAt": {
          "description": "Time representing when the notification was last updated",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "WebhookNotificationStatus": {
      "description": "Statuses available for a Webhook Notification",
      "type": "string",
      "enum": [
        "PENDING",
        "SENT",
        "SKIPPED",
        "FAILING",
        "FAILED"
      ]
    }
  },
  "responses": {
    "Conflict": {
      "description": "There was a conflict with the request.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "ServerError": {
      "description": "A server error occurred.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "The payload was unprocessable.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "moveTaskOrder"
    },
    {
      "name": "paymentRequest"
    },
    {
      "name": "mtoServiceItem"
    },
    {
      "name": "mtoShipment"
    },
    {
      "name": "webhook"
    }
  ]
}`))
}
