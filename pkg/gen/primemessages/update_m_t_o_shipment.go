// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateMTOShipment update m t o shipment
//
// swagger:model UpdateMTOShipment
type UpdateMTOShipment struct {

	// The date when the Prime contractor actually picked up the shipment. Updated after-the-fact.
	// Format: date
	ActualPickupDate *strfmt.Date `json:"actualPickupDate"`

	// Where the movers should deliver this shipment. Often provided by the customer when they enter shipment details
	// during onboarding, if they know their new address already.
	//
	// May be blank when entered by the customer, required when entered by the Prime. May not represent the true
	// final destination due to the shipment being diverted or placed in SIT.
	//
	DestinationAddress struct {
		Address
	} `json:"destinationAddress,omitempty"`

	// This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion.
	//
	Diversion bool `json:"diversion,omitempty"`

	// The date the Prime provides to the customer as the first possible delivery date so that they can plan their travel accordingly.
	//
	// Format: date
	FirstAvailableDeliveryDate *strfmt.Date `json:"firstAvailableDeliveryDate"`

	// The address where the movers should pick up this shipment, entered by the customer during onboarding when they enter shipment details.
	//
	PickupAddress struct {
		Address
	} `json:"pickupAddress,omitempty"`

	// Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.
	//
	PointOfContact string `json:"pointOfContact,omitempty"`

	// The actual weight of the shipment, provided after the Prime packs, picks up, and weighs a customer's shipment.
	// Example: 4500
	PrimeActualWeight int64 `json:"primeActualWeight,omitempty"`

	// The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contracter will need to contact the TOO to change it.
	//
	// Example: 4500
	PrimeEstimatedWeight int64 `json:"primeEstimatedWeight,omitempty"`

	// The date the Prime contractor scheduled to pick up this shipment after consultation with the customer.
	// Format: date
	ScheduledPickupDate *strfmt.Date `json:"scheduledPickupDate"`

	// A second delivery address for this shipment, if the customer entered one. An optional field.
	SecondaryDeliveryAddress struct {
		Address
	} `json:"secondaryDeliveryAddress,omitempty"`

	// A second pickup address for this shipment, if the customer entered one. An optional field.
	SecondaryPickupAddress struct {
		Address
	} `json:"secondaryPickupAddress,omitempty"`

	// shipment type
	ShipmentType MTOShipmentType `json:"shipmentType,omitempty"`
}

// Validate validates this update m t o shipment
func (m *UpdateMTOShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstAvailableDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateMTOShipment) validateActualPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actualPickupDate", "body", "date", m.ActualPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOShipment) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdateMTOShipment) validateFirstAvailableDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstAvailableDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("firstAvailableDeliveryDate", "body", "date", m.FirstAvailableDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOShipment) validatePickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdateMTOShipment) validateScheduledPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduledPickupDate", "body", "date", m.ScheduledPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOShipment) validateSecondaryDeliveryAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDeliveryAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdateMTOShipment) validateSecondaryPickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryPickupAddress) { // not required
		return nil
	}

	return nil
}

func (m *UpdateMTOShipment) validateShipmentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentType) { // not required
		return nil
	}

	if err := m.ShipmentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipmentType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this update m t o shipment based on the context it is used
func (m *UpdateMTOShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryDeliveryAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryPickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateMTOShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateMTOShipment) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateMTOShipment) contextValidateSecondaryDeliveryAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateMTOShipment) contextValidateSecondaryPickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateMTOShipment) contextValidateShipmentType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ShipmentType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipmentType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateMTOShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateMTOShipment) UnmarshalBinary(b []byte) error {
	var res UpdateMTOShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
