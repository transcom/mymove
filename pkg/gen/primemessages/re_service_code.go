// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReServiceCode This is the full list of service items that can be found on a shipment. Not all service items
// may be requested by the Prime, but may be returned in a response.
//
// Documentation of all the service items will be provided.
//
// swagger:model ReServiceCode
type ReServiceCode string

func NewReServiceCode(value ReServiceCode) *ReServiceCode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ReServiceCode.
func (m ReServiceCode) Pointer() *ReServiceCode {
	return &m
}

const (

	// ReServiceCodeCS captures enum value "CS"
	ReServiceCodeCS ReServiceCode = "CS"

	// ReServiceCodeDBHF captures enum value "DBHF"
	ReServiceCodeDBHF ReServiceCode = "DBHF"

	// ReServiceCodeDBTF captures enum value "DBTF"
	ReServiceCodeDBTF ReServiceCode = "DBTF"

	// ReServiceCodeDCRT captures enum value "DCRT"
	ReServiceCodeDCRT ReServiceCode = "DCRT"

	// ReServiceCodeDDASIT captures enum value "DDASIT"
	ReServiceCodeDDASIT ReServiceCode = "DDASIT"

	// ReServiceCodeDDDSIT captures enum value "DDDSIT"
	ReServiceCodeDDDSIT ReServiceCode = "DDDSIT"

	// ReServiceCodeDDFSIT captures enum value "DDFSIT"
	ReServiceCodeDDFSIT ReServiceCode = "DDFSIT"

	// ReServiceCodeDDP captures enum value "DDP"
	ReServiceCodeDDP ReServiceCode = "DDP"

	// ReServiceCodeDDSHUT captures enum value "DDSHUT"
	ReServiceCodeDDSHUT ReServiceCode = "DDSHUT"

	// ReServiceCodeDLH captures enum value "DLH"
	ReServiceCodeDLH ReServiceCode = "DLH"

	// ReServiceCodeDMHF captures enum value "DMHF"
	ReServiceCodeDMHF ReServiceCode = "DMHF"

	// ReServiceCodeDNPK captures enum value "DNPK"
	ReServiceCodeDNPK ReServiceCode = "DNPK"

	// ReServiceCodeDOASIT captures enum value "DOASIT"
	ReServiceCodeDOASIT ReServiceCode = "DOASIT"

	// ReServiceCodeDOFSIT captures enum value "DOFSIT"
	ReServiceCodeDOFSIT ReServiceCode = "DOFSIT"

	// ReServiceCodeDOP captures enum value "DOP"
	ReServiceCodeDOP ReServiceCode = "DOP"

	// ReServiceCodeDOPSIT captures enum value "DOPSIT"
	ReServiceCodeDOPSIT ReServiceCode = "DOPSIT"

	// ReServiceCodeDOSHUT captures enum value "DOSHUT"
	ReServiceCodeDOSHUT ReServiceCode = "DOSHUT"

	// ReServiceCodeDPK captures enum value "DPK"
	ReServiceCodeDPK ReServiceCode = "DPK"

	// ReServiceCodeDSH captures enum value "DSH"
	ReServiceCodeDSH ReServiceCode = "DSH"

	// ReServiceCodeDUCRT captures enum value "DUCRT"
	ReServiceCodeDUCRT ReServiceCode = "DUCRT"

	// ReServiceCodeDUPK captures enum value "DUPK"
	ReServiceCodeDUPK ReServiceCode = "DUPK"

	// ReServiceCodeFSC captures enum value "FSC"
	ReServiceCodeFSC ReServiceCode = "FSC"

	// ReServiceCodeIBHF captures enum value "IBHF"
	ReServiceCodeIBHF ReServiceCode = "IBHF"

	// ReServiceCodeIBTF captures enum value "IBTF"
	ReServiceCodeIBTF ReServiceCode = "IBTF"

	// ReServiceCodeICOLH captures enum value "ICOLH"
	ReServiceCodeICOLH ReServiceCode = "ICOLH"

	// ReServiceCodeICOUB captures enum value "ICOUB"
	ReServiceCodeICOUB ReServiceCode = "ICOUB"

	// ReServiceCodeICRT captures enum value "ICRT"
	ReServiceCodeICRT ReServiceCode = "ICRT"

	// ReServiceCodeICRTSA captures enum value "ICRTSA"
	ReServiceCodeICRTSA ReServiceCode = "ICRTSA"

	// ReServiceCodeIDASIT captures enum value "IDASIT"
	ReServiceCodeIDASIT ReServiceCode = "IDASIT"

	// ReServiceCodeIDDSIT captures enum value "IDDSIT"
	ReServiceCodeIDDSIT ReServiceCode = "IDDSIT"

	// ReServiceCodeIDFSIT captures enum value "IDFSIT"
	ReServiceCodeIDFSIT ReServiceCode = "IDFSIT"

	// ReServiceCodeIDSHUT captures enum value "IDSHUT"
	ReServiceCodeIDSHUT ReServiceCode = "IDSHUT"

	// ReServiceCodeIHPK captures enum value "IHPK"
	ReServiceCodeIHPK ReServiceCode = "IHPK"

	// ReServiceCodeIHUPK captures enum value "IHUPK"
	ReServiceCodeIHUPK ReServiceCode = "IHUPK"

	// ReServiceCodeINPK captures enum value "INPK"
	ReServiceCodeINPK ReServiceCode = "INPK"

	// ReServiceCodeIOASIT captures enum value "IOASIT"
	ReServiceCodeIOASIT ReServiceCode = "IOASIT"

	// ReServiceCodeIOCLH captures enum value "IOCLH"
	ReServiceCodeIOCLH ReServiceCode = "IOCLH"

	// ReServiceCodeIOCUB captures enum value "IOCUB"
	ReServiceCodeIOCUB ReServiceCode = "IOCUB"

	// ReServiceCodeIOFSIT captures enum value "IOFSIT"
	ReServiceCodeIOFSIT ReServiceCode = "IOFSIT"

	// ReServiceCodeIOOLH captures enum value "IOOLH"
	ReServiceCodeIOOLH ReServiceCode = "IOOLH"

	// ReServiceCodeIOOUB captures enum value "IOOUB"
	ReServiceCodeIOOUB ReServiceCode = "IOOUB"

	// ReServiceCodeIOPSIT captures enum value "IOPSIT"
	ReServiceCodeIOPSIT ReServiceCode = "IOPSIT"

	// ReServiceCodeIOSHUT captures enum value "IOSHUT"
	ReServiceCodeIOSHUT ReServiceCode = "IOSHUT"

	// ReServiceCodeIUBPK captures enum value "IUBPK"
	ReServiceCodeIUBPK ReServiceCode = "IUBPK"

	// ReServiceCodeIUBUPK captures enum value "IUBUPK"
	ReServiceCodeIUBUPK ReServiceCode = "IUBUPK"

	// ReServiceCodeIUCRT captures enum value "IUCRT"
	ReServiceCodeIUCRT ReServiceCode = "IUCRT"

	// ReServiceCodeMS captures enum value "MS"
	ReServiceCodeMS ReServiceCode = "MS"

	// ReServiceCodeNSTH captures enum value "NSTH"
	ReServiceCodeNSTH ReServiceCode = "NSTH"

	// ReServiceCodeNSTUB captures enum value "NSTUB"
	ReServiceCodeNSTUB ReServiceCode = "NSTUB"
)

// for schema
var reServiceCodeEnum []interface{}

func init() {
	var res []ReServiceCode
	if err := json.Unmarshal([]byte(`["CS","DBHF","DBTF","DCRT","DDASIT","DDDSIT","DDFSIT","DDP","DDSHUT","DLH","DMHF","DNPK","DOASIT","DOFSIT","DOP","DOPSIT","DOSHUT","DPK","DSH","DUCRT","DUPK","FSC","IBHF","IBTF","ICOLH","ICOUB","ICRT","ICRTSA","IDASIT","IDDSIT","IDFSIT","IDSHUT","IHPK","IHUPK","INPK","IOASIT","IOCLH","IOCUB","IOFSIT","IOOLH","IOOUB","IOPSIT","IOSHUT","IUBPK","IUBUPK","IUCRT","MS","NSTH","NSTUB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reServiceCodeEnum = append(reServiceCodeEnum, v)
	}
}

func (m ReServiceCode) validateReServiceCodeEnum(path, location string, value ReServiceCode) error {
	if err := validate.EnumCase(path, location, value, reServiceCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this re service code
func (m ReServiceCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReServiceCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this re service code based on context it is used
func (m ReServiceCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
