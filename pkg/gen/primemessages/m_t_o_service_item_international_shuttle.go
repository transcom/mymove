// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MTOServiceItemInternationalShuttle Describes an international shuttle service item.
//
// swagger:model MTOServiceItemInternationalShuttle
type MTOServiceItemInternationalShuttle struct {
	eTagField string

	idField strfmt.UUID

	lockedPriceCentsField *int64

	moveTaskOrderIdField *strfmt.UUID

	mtoShipmentIdField strfmt.UUID

	reServiceNameField string

	rejectionReasonField *string

	serviceRequestDocumentsField ServiceRequestDocuments

	statusField MTOServiceItemStatus

	// A record of the actual weight that was shuttled. Provided by the movers, based on weight tickets.
	// Example: 4000
	ActualWeight *int64 `json:"actualWeight"`

	// An estimate of how much weight from a shipment will be included in the shuttling service.
	// Example: 4200
	EstimatedWeight *int64 `json:"estimatedWeight"`

	// To identify whether the service was provided within (CONUS) or (OCONUS)
	// Example: CONUS
	// Enum: [CONUS OCONUS]
	Market string `json:"market,omitempty"`

	// A unique code for the service item. Indicates if shuttling is requested for the international shipment origin (`IOSHUT`) or destination (`IDSHUT`).
	//
	// Required: true
	// Enum: [IOSHUT IDSHUT]
	ReServiceCode *string `json:"reServiceCode"`

	// The contractor's explanation for why a shuttle service is requested. Used by the TOO while deciding to approve or reject the service item.
	//
	// Example: Storage items need to be picked up.
	// Required: true
	Reason *string `json:"reason"`

	// Indicates if "Approvals Requested" status is being requested.
	RequestApprovalsRequestedStatus *bool `json:"requestApprovalsRequestedStatus,omitempty"`
}

// ETag gets the e tag of this subtype
func (m *MTOServiceItemInternationalShuttle) ETag() string {
	return m.eTagField
}

// SetETag sets the e tag of this subtype
func (m *MTOServiceItemInternationalShuttle) SetETag(val string) {
	m.eTagField = val
}

// ID gets the id of this subtype
func (m *MTOServiceItemInternationalShuttle) ID() strfmt.UUID {
	return m.idField
}

// SetID sets the id of this subtype
func (m *MTOServiceItemInternationalShuttle) SetID(val strfmt.UUID) {
	m.idField = val
}

// LockedPriceCents gets the locked price cents of this subtype
func (m *MTOServiceItemInternationalShuttle) LockedPriceCents() *int64 {
	return m.lockedPriceCentsField
}

// SetLockedPriceCents sets the locked price cents of this subtype
func (m *MTOServiceItemInternationalShuttle) SetLockedPriceCents(val *int64) {
	m.lockedPriceCentsField = val
}

// ModelType gets the model type of this subtype
func (m *MTOServiceItemInternationalShuttle) ModelType() MTOServiceItemModelType {
	return "MTOServiceItemInternationalShuttle"
}

// SetModelType sets the model type of this subtype
func (m *MTOServiceItemInternationalShuttle) SetModelType(val MTOServiceItemModelType) {
}

// MoveTaskOrderID gets the move task order ID of this subtype
func (m *MTOServiceItemInternationalShuttle) MoveTaskOrderID() *strfmt.UUID {
	return m.moveTaskOrderIdField
}

// SetMoveTaskOrderID sets the move task order ID of this subtype
func (m *MTOServiceItemInternationalShuttle) SetMoveTaskOrderID(val *strfmt.UUID) {
	m.moveTaskOrderIdField = val
}

// MtoShipmentID gets the mto shipment ID of this subtype
func (m *MTOServiceItemInternationalShuttle) MtoShipmentID() strfmt.UUID {
	return m.mtoShipmentIdField
}

// SetMtoShipmentID sets the mto shipment ID of this subtype
func (m *MTOServiceItemInternationalShuttle) SetMtoShipmentID(val strfmt.UUID) {
	m.mtoShipmentIdField = val
}

// ReServiceName gets the re service name of this subtype
func (m *MTOServiceItemInternationalShuttle) ReServiceName() string {
	return m.reServiceNameField
}

// SetReServiceName sets the re service name of this subtype
func (m *MTOServiceItemInternationalShuttle) SetReServiceName(val string) {
	m.reServiceNameField = val
}

// RejectionReason gets the rejection reason of this subtype
func (m *MTOServiceItemInternationalShuttle) RejectionReason() *string {
	return m.rejectionReasonField
}

// SetRejectionReason sets the rejection reason of this subtype
func (m *MTOServiceItemInternationalShuttle) SetRejectionReason(val *string) {
	m.rejectionReasonField = val
}

// ServiceRequestDocuments gets the service request documents of this subtype
func (m *MTOServiceItemInternationalShuttle) ServiceRequestDocuments() ServiceRequestDocuments {
	return m.serviceRequestDocumentsField
}

// SetServiceRequestDocuments sets the service request documents of this subtype
func (m *MTOServiceItemInternationalShuttle) SetServiceRequestDocuments(val ServiceRequestDocuments) {
	m.serviceRequestDocumentsField = val
}

// Status gets the status of this subtype
func (m *MTOServiceItemInternationalShuttle) Status() MTOServiceItemStatus {
	return m.statusField
}

// SetStatus sets the status of this subtype
func (m *MTOServiceItemInternationalShuttle) SetStatus(val MTOServiceItemStatus) {
	m.statusField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *MTOServiceItemInternationalShuttle) UnmarshalJSON(raw []byte) error {
	var data struct {

		// A record of the actual weight that was shuttled. Provided by the movers, based on weight tickets.
		// Example: 4000
		ActualWeight *int64 `json:"actualWeight"`

		// An estimate of how much weight from a shipment will be included in the shuttling service.
		// Example: 4200
		EstimatedWeight *int64 `json:"estimatedWeight"`

		// To identify whether the service was provided within (CONUS) or (OCONUS)
		// Example: CONUS
		// Enum: [CONUS OCONUS]
		Market string `json:"market,omitempty"`

		// A unique code for the service item. Indicates if shuttling is requested for the international shipment origin (`IOSHUT`) or destination (`IDSHUT`).
		//
		// Required: true
		// Enum: [IOSHUT IDSHUT]
		ReServiceCode *string `json:"reServiceCode"`

		// The contractor's explanation for why a shuttle service is requested. Used by the TOO while deciding to approve or reject the service item.
		//
		// Example: Storage items need to be picked up.
		// Required: true
		Reason *string `json:"reason"`

		// Indicates if "Approvals Requested" status is being requested.
		RequestApprovalsRequestedStatus *bool `json:"requestApprovalsRequestedStatus,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ETag string `json:"eTag,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		LockedPriceCents *int64 `json:"lockedPriceCents,omitempty"`

		ModelType MTOServiceItemModelType `json:"modelType"`

		MoveTaskOrderID *strfmt.UUID `json:"moveTaskOrderID"`

		MtoShipmentID strfmt.UUID `json:"mtoShipmentID,omitempty"`

		ReServiceName string `json:"reServiceName,omitempty"`

		RejectionReason *string `json:"rejectionReason,omitempty"`

		ServiceRequestDocuments ServiceRequestDocuments `json:"serviceRequestDocuments,omitempty"`

		Status MTOServiceItemStatus `json:"status,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result MTOServiceItemInternationalShuttle

	result.eTagField = base.ETag

	result.idField = base.ID

	result.lockedPriceCentsField = base.LockedPriceCents

	if base.ModelType != result.ModelType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid modelType value: %q", base.ModelType)
	}
	result.moveTaskOrderIdField = base.MoveTaskOrderID

	result.mtoShipmentIdField = base.MtoShipmentID

	result.reServiceNameField = base.ReServiceName

	result.rejectionReasonField = base.RejectionReason

	result.serviceRequestDocumentsField = base.ServiceRequestDocuments

	result.statusField = base.Status

	result.ActualWeight = data.ActualWeight
	result.EstimatedWeight = data.EstimatedWeight
	result.Market = data.Market
	result.ReServiceCode = data.ReServiceCode
	result.Reason = data.Reason
	result.RequestApprovalsRequestedStatus = data.RequestApprovalsRequestedStatus

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m MTOServiceItemInternationalShuttle) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// A record of the actual weight that was shuttled. Provided by the movers, based on weight tickets.
		// Example: 4000
		ActualWeight *int64 `json:"actualWeight"`

		// An estimate of how much weight from a shipment will be included in the shuttling service.
		// Example: 4200
		EstimatedWeight *int64 `json:"estimatedWeight"`

		// To identify whether the service was provided within (CONUS) or (OCONUS)
		// Example: CONUS
		// Enum: [CONUS OCONUS]
		Market string `json:"market,omitempty"`

		// A unique code for the service item. Indicates if shuttling is requested for the international shipment origin (`IOSHUT`) or destination (`IDSHUT`).
		//
		// Required: true
		// Enum: [IOSHUT IDSHUT]
		ReServiceCode *string `json:"reServiceCode"`

		// The contractor's explanation for why a shuttle service is requested. Used by the TOO while deciding to approve or reject the service item.
		//
		// Example: Storage items need to be picked up.
		// Required: true
		Reason *string `json:"reason"`

		// Indicates if "Approvals Requested" status is being requested.
		RequestApprovalsRequestedStatus *bool `json:"requestApprovalsRequestedStatus,omitempty"`
	}{

		ActualWeight: m.ActualWeight,

		EstimatedWeight: m.EstimatedWeight,

		Market: m.Market,

		ReServiceCode: m.ReServiceCode,

		Reason: m.Reason,

		RequestApprovalsRequestedStatus: m.RequestApprovalsRequestedStatus,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ETag string `json:"eTag,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		LockedPriceCents *int64 `json:"lockedPriceCents,omitempty"`

		ModelType MTOServiceItemModelType `json:"modelType"`

		MoveTaskOrderID *strfmt.UUID `json:"moveTaskOrderID"`

		MtoShipmentID strfmt.UUID `json:"mtoShipmentID,omitempty"`

		ReServiceName string `json:"reServiceName,omitempty"`

		RejectionReason *string `json:"rejectionReason,omitempty"`

		ServiceRequestDocuments ServiceRequestDocuments `json:"serviceRequestDocuments,omitempty"`

		Status MTOServiceItemStatus `json:"status,omitempty"`
	}{

		ETag: m.ETag(),

		ID: m.ID(),

		LockedPriceCents: m.LockedPriceCents(),

		ModelType: m.ModelType(),

		MoveTaskOrderID: m.MoveTaskOrderID(),

		MtoShipmentID: m.MtoShipmentID(),

		ReServiceName: m.ReServiceName(),

		RejectionReason: m.RejectionReason(),

		ServiceRequestDocuments: m.ServiceRequestDocuments(),

		Status: m.Status(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this m t o service item international shuttle
func (m *MTOServiceItemInternationalShuttle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveTaskOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceRequestDocuments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReServiceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOServiceItemInternationalShuttle) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemInternationalShuttle) validateMoveTaskOrderID(formats strfmt.Registry) error {

	if err := validate.Required("moveTaskOrderID", "body", m.MoveTaskOrderID()); err != nil {
		return err
	}

	if err := validate.FormatOf("moveTaskOrderID", "body", "uuid", m.MoveTaskOrderID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemInternationalShuttle) validateMtoShipmentID(formats strfmt.Registry) error {

	if swag.IsZero(m.MtoShipmentID()) { // not required
		return nil
	}

	if err := validate.FormatOf("mtoShipmentID", "body", "uuid", m.MtoShipmentID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemInternationalShuttle) validateServiceRequestDocuments(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceRequestDocuments()) { // not required
		return nil
	}

	if err := m.ServiceRequestDocuments().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceRequestDocuments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceRequestDocuments")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItemInternationalShuttle) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status()) { // not required
		return nil
	}

	if err := m.Status().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

var mTOServiceItemInternationalShuttleTypeMarketPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONUS","OCONUS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mTOServiceItemInternationalShuttleTypeMarketPropEnum = append(mTOServiceItemInternationalShuttleTypeMarketPropEnum, v)
	}
}

// property enum
func (m *MTOServiceItemInternationalShuttle) validateMarketEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mTOServiceItemInternationalShuttleTypeMarketPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MTOServiceItemInternationalShuttle) validateMarket(formats strfmt.Registry) error {

	if swag.IsZero(m.Market) { // not required
		return nil
	}

	// value enum
	if err := m.validateMarketEnum("market", "body", m.Market); err != nil {
		return err
	}

	return nil
}

var mTOServiceItemInternationalShuttleTypeReServiceCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IOSHUT","IDSHUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mTOServiceItemInternationalShuttleTypeReServiceCodePropEnum = append(mTOServiceItemInternationalShuttleTypeReServiceCodePropEnum, v)
	}
}

// property enum
func (m *MTOServiceItemInternationalShuttle) validateReServiceCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mTOServiceItemInternationalShuttleTypeReServiceCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MTOServiceItemInternationalShuttle) validateReServiceCode(formats strfmt.Registry) error {

	if err := validate.Required("reServiceCode", "body", m.ReServiceCode); err != nil {
		return err
	}

	// value enum
	if err := m.validateReServiceCodeEnum("reServiceCode", "body", *m.ReServiceCode); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemInternationalShuttle) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this m t o service item international shuttle based on the context it is used
func (m *MTOServiceItemInternationalShuttle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReServiceName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRejectionReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceRequestDocuments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTOServiceItemInternationalShuttle) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag())); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemInternationalShuttle) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID())); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemInternationalShuttle) contextValidateModelType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ModelType().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("modelType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("modelType")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItemInternationalShuttle) contextValidateReServiceName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "reServiceName", "body", string(m.ReServiceName())); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemInternationalShuttle) contextValidateRejectionReason(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "rejectionReason", "body", m.RejectionReason()); err != nil {
		return err
	}

	return nil
}

func (m *MTOServiceItemInternationalShuttle) contextValidateServiceRequestDocuments(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ServiceRequestDocuments().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceRequestDocuments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceRequestDocuments")
		}
		return err
	}

	return nil
}

func (m *MTOServiceItemInternationalShuttle) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status()) { // not required
		return nil
	}

	if err := m.Status().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MTOServiceItemInternationalShuttle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MTOServiceItemInternationalShuttle) UnmarshalBinary(b []byte) error {
	var res MTOServiceItemInternationalShuttle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
