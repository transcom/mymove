// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AcknowledgeShipment acknowledge shipment
//
// swagger:model AcknowledgeShipment
type AcknowledgeShipment struct {

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// prime acknowledged at
	// Example: 2025-04-13T14:15:33Z
	// Format: date-time
	PrimeAcknowledgedAt strfmt.DateTime `json:"primeAcknowledgedAt,omitempty"`
}

// Validate validates this acknowledge shipment
func (m *AcknowledgeShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimeAcknowledgedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AcknowledgeShipment) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AcknowledgeShipment) validatePrimeAcknowledgedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimeAcknowledgedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("primeAcknowledgedAt", "body", "date-time", m.PrimeAcknowledgedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this acknowledge shipment based on context it is used
func (m *AcknowledgeShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AcknowledgeShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AcknowledgeShipment) UnmarshalBinary(b []byte) error {
	var res AcknowledgeShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
