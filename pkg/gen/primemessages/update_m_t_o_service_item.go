// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateMTOServiceItem UpdateMTOServiceItem describes a base type of a service item. Polymorphic type. Both Move Task Orders and MTO Shipments will have MTO Service Items.
//
// swagger:discriminator UpdateMTOServiceItem modelType
type UpdateMTOServiceItem interface {
	runtime.Validatable
	runtime.ContextValidatable

	// ID of the service item. Must match path.
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	ID() strfmt.UUID
	SetID(strfmt.UUID)

	// model type
	// Required: true
	ModelType() UpdateMTOServiceItemModelType
	SetModelType(UpdateMTOServiceItemModelType)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type updateMTOServiceItem struct {
	idField strfmt.UUID

	modelTypeField UpdateMTOServiceItemModelType
}

// ID gets the id of this polymorphic type
func (m *updateMTOServiceItem) ID() strfmt.UUID {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *updateMTOServiceItem) SetID(val strfmt.UUID) {
	m.idField = val
}

// ModelType gets the model type of this polymorphic type
func (m *updateMTOServiceItem) ModelType() UpdateMTOServiceItemModelType {
	return "UpdateMTOServiceItem"
}

// SetModelType sets the model type of this polymorphic type
func (m *updateMTOServiceItem) SetModelType(val UpdateMTOServiceItemModelType) {
}

// UnmarshalUpdateMTOServiceItemSlice unmarshals polymorphic slices of UpdateMTOServiceItem
func UnmarshalUpdateMTOServiceItemSlice(reader io.Reader, consumer runtime.Consumer) ([]UpdateMTOServiceItem, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []UpdateMTOServiceItem
	for _, element := range elements {
		obj, err := unmarshalUpdateMTOServiceItem(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalUpdateMTOServiceItem unmarshals polymorphic UpdateMTOServiceItem
func UnmarshalUpdateMTOServiceItem(reader io.Reader, consumer runtime.Consumer) (UpdateMTOServiceItem, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalUpdateMTOServiceItem(data, consumer)
}

func unmarshalUpdateMTOServiceItem(data []byte, consumer runtime.Consumer) (UpdateMTOServiceItem, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the modelType property.
	var getType struct {
		ModelType string `json:"modelType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("modelType", "body", getType.ModelType); err != nil {
		return nil, err
	}

	// The value of modelType is used to determine which type to create and unmarshal the data into
	switch getType.ModelType {
	case "UpdateMTOServiceItem":
		var result updateMTOServiceItem
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "UpdateMTOServiceItemSIT":
		var result UpdateMTOServiceItemSIT
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "UpdateMTOServiceItemShuttle":
		var result UpdateMTOServiceItemShuttle
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid modelType value: %q", getType.ModelType)
}

// Validate validates this update m t o service item
func (m *updateMTOServiceItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *updateMTOServiceItem) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID().String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update m t o service item based on the context it is used
func (m *updateMTOServiceItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModelType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *updateMTOServiceItem) contextValidateModelType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ModelType().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("modelType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("modelType")
		}
		return err
	}

	return nil
}
