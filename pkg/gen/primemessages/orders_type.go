// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrdersType Orders type
//
// swagger:model OrdersType
type OrdersType string

func NewOrdersType(value OrdersType) *OrdersType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OrdersType.
func (m OrdersType) Pointer() *OrdersType {
	return &m
}

const (

	// OrdersTypePERMANENTCHANGEOFSTATION captures enum value "PERMANENT_CHANGE_OF_STATION"
	OrdersTypePERMANENTCHANGEOFSTATION OrdersType = "PERMANENT_CHANGE_OF_STATION"

	// OrdersTypeLOCALMOVE captures enum value "LOCAL_MOVE"
	OrdersTypeLOCALMOVE OrdersType = "LOCAL_MOVE"

	// OrdersTypeRETIREMENT captures enum value "RETIREMENT"
	OrdersTypeRETIREMENT OrdersType = "RETIREMENT"

	// OrdersTypeSEPARATION captures enum value "SEPARATION"
	OrdersTypeSEPARATION OrdersType = "SEPARATION"

	// OrdersTypeWOUNDEDWARRIOR captures enum value "WOUNDED_WARRIOR"
	OrdersTypeWOUNDEDWARRIOR OrdersType = "WOUNDED_WARRIOR"

	// OrdersTypeBLUEBARK captures enum value "BLUEBARK"
	OrdersTypeBLUEBARK OrdersType = "BLUEBARK"

	// OrdersTypeSAFETYMOVE captures enum value "SAFETY_MOVE"
	OrdersTypeSAFETYMOVE OrdersType = "SAFETY_MOVE"
)

// for schema
var ordersTypeEnum []interface{}

func init() {
	var res []OrdersType
	if err := json.Unmarshal([]byte(`["PERMANENT_CHANGE_OF_STATION","LOCAL_MOVE","RETIREMENT","SEPARATION","WOUNDED_WARRIOR","BLUEBARK","SAFETY_MOVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ordersTypeEnum = append(ordersTypeEnum, v)
	}
}

func (m OrdersType) validateOrdersTypeEnum(path, location string, value OrdersType) error {
	if err := validate.EnumCase(path, location, value, ordersTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this orders type
func (m OrdersType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrdersTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this orders type based on context it is used
func (m OrdersType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
