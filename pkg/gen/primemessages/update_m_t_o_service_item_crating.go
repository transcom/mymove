// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateMTOServiceItemCrating Subtype used to provide the size and types for crating. This is not creating a new service item but rather updating an existing service item.
//
// swagger:model UpdateMTOServiceItemCrating
type UpdateMTOServiceItemCrating struct {
	idField strfmt.UUID

	// The dimensions for the crate the item will be shipped in.
	Crate struct {
		MTOServiceItemDimension
	} `json:"crate,omitempty"`

	// A description of the item being crated.
	// Example: Decorated horse head to be crated.
	Description *string `json:"description,omitempty"`

	// external crate
	ExternalCrate *bool `json:"externalCrate,omitempty"`

	// The dimensions of the item being crated.
	Item struct {
		MTOServiceItemDimension
	} `json:"item,omitempty"`

	// Service code allowed for this model type.
	// Enum: [ICRT IUCRT]
	ReServiceCode string `json:"reServiceCode,omitempty"`

	// Indicates if "Approvals Requested" status is being requested.
	RequestApprovalsRequestedStatus *bool `json:"requestApprovalsRequestedStatus,omitempty"`

	// standalone crate
	StandaloneCrate *bool `json:"standaloneCrate,omitempty"`

	// Reason for updating service item.
	UpdateReason *string `json:"updateReason,omitempty"`
}

// ID gets the id of this subtype
func (m *UpdateMTOServiceItemCrating) ID() strfmt.UUID {
	return m.idField
}

// SetID sets the id of this subtype
func (m *UpdateMTOServiceItemCrating) SetID(val strfmt.UUID) {
	m.idField = val
}

// ModelType gets the model type of this subtype
func (m *UpdateMTOServiceItemCrating) ModelType() UpdateMTOServiceItemModelType {
	return "UpdateMTOServiceItemCrating"
}

// SetModelType sets the model type of this subtype
func (m *UpdateMTOServiceItemCrating) SetModelType(val UpdateMTOServiceItemModelType) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *UpdateMTOServiceItemCrating) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The dimensions for the crate the item will be shipped in.
		Crate struct {
			MTOServiceItemDimension
		} `json:"crate,omitempty"`

		// A description of the item being crated.
		// Example: Decorated horse head to be crated.
		Description *string `json:"description,omitempty"`

		// external crate
		ExternalCrate *bool `json:"externalCrate,omitempty"`

		// The dimensions of the item being crated.
		Item struct {
			MTOServiceItemDimension
		} `json:"item,omitempty"`

		// Service code allowed for this model type.
		// Enum: [ICRT IUCRT]
		ReServiceCode string `json:"reServiceCode,omitempty"`

		// Indicates if "Approvals Requested" status is being requested.
		RequestApprovalsRequestedStatus *bool `json:"requestApprovalsRequestedStatus,omitempty"`

		// standalone crate
		StandaloneCrate *bool `json:"standaloneCrate,omitempty"`

		// Reason for updating service item.
		UpdateReason *string `json:"updateReason,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ID strfmt.UUID `json:"id,omitempty"`

		ModelType UpdateMTOServiceItemModelType `json:"modelType"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result UpdateMTOServiceItemCrating

	result.idField = base.ID

	if base.ModelType != result.ModelType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid modelType value: %q", base.ModelType)
	}

	result.Crate = data.Crate
	result.Description = data.Description
	result.ExternalCrate = data.ExternalCrate
	result.Item = data.Item
	result.ReServiceCode = data.ReServiceCode
	result.RequestApprovalsRequestedStatus = data.RequestApprovalsRequestedStatus
	result.StandaloneCrate = data.StandaloneCrate
	result.UpdateReason = data.UpdateReason

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m UpdateMTOServiceItemCrating) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The dimensions for the crate the item will be shipped in.
		Crate struct {
			MTOServiceItemDimension
		} `json:"crate,omitempty"`

		// A description of the item being crated.
		// Example: Decorated horse head to be crated.
		Description *string `json:"description,omitempty"`

		// external crate
		ExternalCrate *bool `json:"externalCrate,omitempty"`

		// The dimensions of the item being crated.
		Item struct {
			MTOServiceItemDimension
		} `json:"item,omitempty"`

		// Service code allowed for this model type.
		// Enum: [ICRT IUCRT]
		ReServiceCode string `json:"reServiceCode,omitempty"`

		// Indicates if "Approvals Requested" status is being requested.
		RequestApprovalsRequestedStatus *bool `json:"requestApprovalsRequestedStatus,omitempty"`

		// standalone crate
		StandaloneCrate *bool `json:"standaloneCrate,omitempty"`

		// Reason for updating service item.
		UpdateReason *string `json:"updateReason,omitempty"`
	}{

		Crate: m.Crate,

		Description: m.Description,

		ExternalCrate: m.ExternalCrate,

		Item: m.Item,

		ReServiceCode: m.ReServiceCode,

		RequestApprovalsRequestedStatus: m.RequestApprovalsRequestedStatus,

		StandaloneCrate: m.StandaloneCrate,

		UpdateReason: m.UpdateReason,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ID strfmt.UUID `json:"id,omitempty"`

		ModelType UpdateMTOServiceItemModelType `json:"modelType"`
	}{

		ID: m.ID(),

		ModelType: m.ModelType(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this update m t o service item crating
func (m *UpdateMTOServiceItemCrating) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReServiceCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateMTOServiceItemCrating) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemCrating) validateCrate(formats strfmt.Registry) error {

	if swag.IsZero(m.Crate) { // not required
		return nil
	}

	return nil
}

func (m *UpdateMTOServiceItemCrating) validateItem(formats strfmt.Registry) error {

	if swag.IsZero(m.Item) { // not required
		return nil
	}

	return nil
}

var updateMTOServiceItemCratingTypeReServiceCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ICRT","IUCRT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateMTOServiceItemCratingTypeReServiceCodePropEnum = append(updateMTOServiceItemCratingTypeReServiceCodePropEnum, v)
	}
}

// property enum
func (m *UpdateMTOServiceItemCrating) validateReServiceCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateMTOServiceItemCratingTypeReServiceCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateMTOServiceItemCrating) validateReServiceCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ReServiceCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateReServiceCodeEnum("reServiceCode", "body", m.ReServiceCode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update m t o service item crating based on the context it is used
func (m *UpdateMTOServiceItemCrating) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCrate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateMTOServiceItemCrating) contextValidateModelType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ModelType().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("modelType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("modelType")
		}
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemCrating) contextValidateCrate(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateMTOServiceItemCrating) contextValidateItem(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateMTOServiceItemCrating) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateMTOServiceItemCrating) UnmarshalBinary(b []byte) error {
	var res UpdateMTOServiceItemCrating
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
