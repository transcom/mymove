// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AcknowledgeMove acknowledge move
//
// swagger:model AcknowledgeMove
type AcknowledgeMove struct {

	// id
	// Example: a502b4f1-b9c4-4faf-8bdd-68292501bf26
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// mto shipments
	MtoShipments []*AcknowledgeShipment `json:"mtoShipments"`

	// prime acknowledged at
	// Example: 2025-04-13T14:15:22Z
	// Format: date-time
	PrimeAcknowledgedAt strfmt.DateTime `json:"primeAcknowledgedAt,omitempty"`
}

// Validate validates this acknowledge move
func (m *AcknowledgeMove) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoShipments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimeAcknowledgedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AcknowledgeMove) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AcknowledgeMove) validateMtoShipments(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoShipments) { // not required
		return nil
	}

	for i := 0; i < len(m.MtoShipments); i++ {
		if swag.IsZero(m.MtoShipments[i]) { // not required
			continue
		}

		if m.MtoShipments[i] != nil {
			if err := m.MtoShipments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mtoShipments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mtoShipments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AcknowledgeMove) validatePrimeAcknowledgedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimeAcknowledgedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("primeAcknowledgedAt", "body", "date-time", m.PrimeAcknowledgedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this acknowledge move based on the context it is used
func (m *AcknowledgeMove) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMtoShipments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AcknowledgeMove) contextValidateMtoShipments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MtoShipments); i++ {

		if m.MtoShipments[i] != nil {

			if swag.IsZero(m.MtoShipments[i]) { // not required
				return nil
			}

			if err := m.MtoShipments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mtoShipments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mtoShipments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AcknowledgeMove) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AcknowledgeMove) UnmarshalBinary(b []byte) error {
	var res AcknowledgeMove
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
