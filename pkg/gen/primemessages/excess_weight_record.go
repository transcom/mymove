// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExcessWeightRecord A document uploaded by the movers proving that the customer has been counseled about excess weight.
//
// swagger:model ExcessWeightRecord
type ExcessWeightRecord struct {
	UploadWithOmissions

	// The date and time when the TOO acknowledged the excess weight alert, either by dismissing the risk or updating the max billable weight. This will occur after the excess weight record has been uploaded.
	//
	// Read Only: true
	// Format: date-time
	MoveExcessWeightAcknowledgedAt *strfmt.DateTime `json:"moveExcessWeightAcknowledgedAt"`

	// The date and time when the sum of all the move's shipments met the excess weight qualification threshold. The system monitors these weights and will update this field automatically.
	//
	// Read Only: true
	// Format: date-time
	MoveExcessWeightQualifiedAt *strfmt.DateTime `json:"moveExcessWeightQualifiedAt"`

	// The UUID of the move this excess weight record belongs to.
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	MoveID *strfmt.UUID `json:"moveId"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ExcessWeightRecord) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 UploadWithOmissions
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.UploadWithOmissions = aO0

	// AO1
	var dataAO1 struct {
		MoveExcessWeightAcknowledgedAt *strfmt.DateTime `json:"moveExcessWeightAcknowledgedAt"`

		MoveExcessWeightQualifiedAt *strfmt.DateTime `json:"moveExcessWeightQualifiedAt"`

		MoveID *strfmt.UUID `json:"moveId"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.MoveExcessWeightAcknowledgedAt = dataAO1.MoveExcessWeightAcknowledgedAt

	m.MoveExcessWeightQualifiedAt = dataAO1.MoveExcessWeightQualifiedAt

	m.MoveID = dataAO1.MoveID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ExcessWeightRecord) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.UploadWithOmissions)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		MoveExcessWeightAcknowledgedAt *strfmt.DateTime `json:"moveExcessWeightAcknowledgedAt"`

		MoveExcessWeightQualifiedAt *strfmt.DateTime `json:"moveExcessWeightQualifiedAt"`

		MoveID *strfmt.UUID `json:"moveId"`
	}

	dataAO1.MoveExcessWeightAcknowledgedAt = m.MoveExcessWeightAcknowledgedAt

	dataAO1.MoveExcessWeightQualifiedAt = m.MoveExcessWeightQualifiedAt

	dataAO1.MoveID = m.MoveID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this excess weight record
func (m *ExcessWeightRecord) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with UploadWithOmissions
	if err := m.UploadWithOmissions.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveExcessWeightAcknowledgedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveExcessWeightQualifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExcessWeightRecord) validateMoveExcessWeightAcknowledgedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.MoveExcessWeightAcknowledgedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("moveExcessWeightAcknowledgedAt", "body", "date-time", m.MoveExcessWeightAcknowledgedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExcessWeightRecord) validateMoveExcessWeightQualifiedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.MoveExcessWeightQualifiedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("moveExcessWeightQualifiedAt", "body", "date-time", m.MoveExcessWeightQualifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExcessWeightRecord) validateMoveID(formats strfmt.Registry) error {

	if err := validate.Required("moveId", "body", m.MoveID); err != nil {
		return err
	}

	if err := validate.FormatOf("moveId", "body", "uuid", m.MoveID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this excess weight record based on the context it is used
func (m *ExcessWeightRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with UploadWithOmissions
	if err := m.UploadWithOmissions.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMoveExcessWeightAcknowledgedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMoveExcessWeightQualifiedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExcessWeightRecord) contextValidateMoveExcessWeightAcknowledgedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "moveExcessWeightAcknowledgedAt", "body", m.MoveExcessWeightAcknowledgedAt); err != nil {
		return err
	}

	return nil
}

func (m *ExcessWeightRecord) contextValidateMoveExcessWeightQualifiedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "moveExcessWeightQualifiedAt", "body", m.MoveExcessWeightQualifiedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExcessWeightRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExcessWeightRecord) UnmarshalBinary(b []byte) error {
	var res ExcessWeightRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
