// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentAddressUpdate A postal address
//
// swagger:model ShipmentAddressUpdate
type ShipmentAddressUpdate struct {

	// Contractor Remarks
	// Example: This is a contractor remark
	// Required: true
	// Read Only: true
	ContractorRemarks string `json:"contractorRemarks"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// fdas
	//
	// Required: true
	NewAddress struct {
		Address
	} `json:"newAddress"`

	// Office Remarks
	// Example: This is an office remark
	OfficeRemarks *string `json:"officeRemarks,omitempty"`

	// No
	//
	// Required: true
	OriginalAddress struct {
		Address
	} `json:"originalAddress"`

	// shipment ID
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Read Only: true
	// Format: uuid
	ShipmentID strfmt.UUID `json:"shipmentID"`

	// Status
	// Required: true
	// Read Only: true
	// Enum: [REQUESTED REJECTED APPROVED]
	Status string `json:"status"`
}

// Validate validates this shipment address update
func (m *ShipmentAddressUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContractorRemarks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentAddressUpdate) validateContractorRemarks(formats strfmt.Registry) error {

	if err := validate.RequiredString("contractorRemarks", "body", m.ContractorRemarks); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) validateNewAddress(formats strfmt.Registry) error {

	return nil
}

func (m *ShipmentAddressUpdate) validateOriginalAddress(formats strfmt.Registry) error {

	return nil
}

func (m *ShipmentAddressUpdate) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentID", "body", strfmt.UUID(m.ShipmentID)); err != nil {
		return err
	}

	if err := validate.FormatOf("shipmentID", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

var shipmentAddressUpdateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REQUESTED","REJECTED","APPROVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shipmentAddressUpdateTypeStatusPropEnum = append(shipmentAddressUpdateTypeStatusPropEnum, v)
	}
}

const (

	// ShipmentAddressUpdateStatusREQUESTED captures enum value "REQUESTED"
	ShipmentAddressUpdateStatusREQUESTED string = "REQUESTED"

	// ShipmentAddressUpdateStatusREJECTED captures enum value "REJECTED"
	ShipmentAddressUpdateStatusREJECTED string = "REJECTED"

	// ShipmentAddressUpdateStatusAPPROVED captures enum value "APPROVED"
	ShipmentAddressUpdateStatusAPPROVED string = "APPROVED"
)

// prop value enum
func (m *ShipmentAddressUpdate) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shipmentAddressUpdateTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShipmentAddressUpdate) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this shipment address update based on the context it is used
func (m *ShipmentAddressUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContractorRemarks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginalAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentAddressUpdate) contextValidateContractorRemarks(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "contractorRemarks", "body", string(m.ContractorRemarks)); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) contextValidateNewAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ShipmentAddressUpdate) contextValidateOriginalAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ShipmentAddressUpdate) contextValidateShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "shipmentID", "body", strfmt.UUID(m.ShipmentID)); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentAddressUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentAddressUpdate) UnmarshalBinary(b []byte) error {
	var res ShipmentAddressUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
