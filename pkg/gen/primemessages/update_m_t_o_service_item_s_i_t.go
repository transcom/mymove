// Code generated by go-swagger; DO NOT EDIT.

package primemessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateMTOServiceItemSIT Subtype used to provide the departure date for origin or destination SIT. This is not creating a new service item but rather updating and existing service item.
//
// swagger:model UpdateMTOServiceItemSIT
type UpdateMTOServiceItemSIT struct {
	idField strfmt.UUID

	// Date of attempted contact by the prime corresponding to 'timeMilitary1'.
	// Format: date
	DateOfContact1 *strfmt.Date `json:"dateOfContact1,omitempty"`

	// Date of attempted contact by the prime corresponding to 'timeMilitary2'.
	// Format: date
	DateOfContact2 *strfmt.Date `json:"dateOfContact2,omitempty"`

	// First available date that Prime can deliver SIT service item.
	// Format: date
	FirstAvailableDeliveryDate1 *strfmt.Date `json:"firstAvailableDeliveryDate1,omitempty"`

	// Second available date that Prime can deliver SIT service item.
	// Format: date
	FirstAvailableDeliveryDate2 *strfmt.Date `json:"firstAvailableDeliveryDate2,omitempty"`

	// Service code allowed for this model type.
	// Enum: [DDDSIT DOPSIT DOASIT DOFSIT]
	ReServiceCode string `json:"reServiceCode,omitempty"`

	// Indicates if "Approvals Requested" status is being requested.
	RequestApprovalsRequestedStatus *bool `json:"requestApprovalsRequestedStatus,omitempty"`

	// Date when the customer contacted the prime for a delivery out of SIT.
	// Format: date
	SitCustomerContacted *strfmt.Date `json:"sitCustomerContacted,omitempty"`

	// Departure date for SIT. This is the end date of the SIT at either origin or destination.
	// Format: date
	SitDepartureDate strfmt.Date `json:"sitDepartureDate,omitempty"`

	// sit destination final address
	SitDestinationFinalAddress *Address `json:"sitDestinationFinalAddress,omitempty"`

	// Entry date for the SIT.
	// Format: date
	SitEntryDate *strfmt.Date `json:"sitEntryDate,omitempty"`

	// sit postal code
	// Example: 90210
	// Pattern: ^(\d{5}([\-]\d{4})?)$
	SitPostalCode *string `json:"sitPostalCode,omitempty"`

	// Date when the customer has requested delivery out of SIT.
	// Format: date
	SitRequestedDelivery *strfmt.Date `json:"sitRequestedDelivery,omitempty"`

	// Time of attempted contact by the prime corresponding to 'dateOfContact1', in military format.
	// Example: 1400Z
	// Pattern: \d{4}Z
	TimeMilitary1 *string `json:"timeMilitary1,omitempty"`

	// Time of attempted contact by the prime corresponding to 'dateOfContact2', in military format.
	// Example: 1400Z
	// Pattern: \d{4}Z
	TimeMilitary2 *string `json:"timeMilitary2,omitempty"`

	// Reason for updating service item.
	UpdateReason *string `json:"updateReason,omitempty"`
}

// ID gets the id of this subtype
func (m *UpdateMTOServiceItemSIT) ID() strfmt.UUID {
	return m.idField
}

// SetID sets the id of this subtype
func (m *UpdateMTOServiceItemSIT) SetID(val strfmt.UUID) {
	m.idField = val
}

// ModelType gets the model type of this subtype
func (m *UpdateMTOServiceItemSIT) ModelType() UpdateMTOServiceItemModelType {
	return "UpdateMTOServiceItemSIT"
}

// SetModelType sets the model type of this subtype
func (m *UpdateMTOServiceItemSIT) SetModelType(val UpdateMTOServiceItemModelType) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *UpdateMTOServiceItemSIT) UnmarshalJSON(raw []byte) error {
	var data struct {

		// Date of attempted contact by the prime corresponding to 'timeMilitary1'.
		// Format: date
		DateOfContact1 *strfmt.Date `json:"dateOfContact1,omitempty"`

		// Date of attempted contact by the prime corresponding to 'timeMilitary2'.
		// Format: date
		DateOfContact2 *strfmt.Date `json:"dateOfContact2,omitempty"`

		// First available date that Prime can deliver SIT service item.
		// Format: date
		FirstAvailableDeliveryDate1 *strfmt.Date `json:"firstAvailableDeliveryDate1,omitempty"`

		// Second available date that Prime can deliver SIT service item.
		// Format: date
		FirstAvailableDeliveryDate2 *strfmt.Date `json:"firstAvailableDeliveryDate2,omitempty"`

		// Service code allowed for this model type.
		// Enum: [DDDSIT DOPSIT DOASIT DOFSIT]
		ReServiceCode string `json:"reServiceCode,omitempty"`

		// Indicates if "Approvals Requested" status is being requested.
		RequestApprovalsRequestedStatus *bool `json:"requestApprovalsRequestedStatus,omitempty"`

		// Date when the customer contacted the prime for a delivery out of SIT.
		// Format: date
		SitCustomerContacted *strfmt.Date `json:"sitCustomerContacted,omitempty"`

		// Departure date for SIT. This is the end date of the SIT at either origin or destination.
		// Format: date
		SitDepartureDate strfmt.Date `json:"sitDepartureDate,omitempty"`

		// sit destination final address
		SitDestinationFinalAddress *Address `json:"sitDestinationFinalAddress,omitempty"`

		// Entry date for the SIT.
		// Format: date
		SitEntryDate *strfmt.Date `json:"sitEntryDate,omitempty"`

		// sit postal code
		// Example: 90210
		// Pattern: ^(\d{5}([\-]\d{4})?)$
		SitPostalCode *string `json:"sitPostalCode,omitempty"`

		// Date when the customer has requested delivery out of SIT.
		// Format: date
		SitRequestedDelivery *strfmt.Date `json:"sitRequestedDelivery,omitempty"`

		// Time of attempted contact by the prime corresponding to 'dateOfContact1', in military format.
		// Example: 1400Z
		// Pattern: \d{4}Z
		TimeMilitary1 *string `json:"timeMilitary1,omitempty"`

		// Time of attempted contact by the prime corresponding to 'dateOfContact2', in military format.
		// Example: 1400Z
		// Pattern: \d{4}Z
		TimeMilitary2 *string `json:"timeMilitary2,omitempty"`

		// Reason for updating service item.
		UpdateReason *string `json:"updateReason,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ID strfmt.UUID `json:"id,omitempty"`

		ModelType UpdateMTOServiceItemModelType `json:"modelType"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result UpdateMTOServiceItemSIT

	result.idField = base.ID

	if base.ModelType != result.ModelType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid modelType value: %q", base.ModelType)
	}

	result.DateOfContact1 = data.DateOfContact1
	result.DateOfContact2 = data.DateOfContact2
	result.FirstAvailableDeliveryDate1 = data.FirstAvailableDeliveryDate1
	result.FirstAvailableDeliveryDate2 = data.FirstAvailableDeliveryDate2
	result.ReServiceCode = data.ReServiceCode
	result.RequestApprovalsRequestedStatus = data.RequestApprovalsRequestedStatus
	result.SitCustomerContacted = data.SitCustomerContacted
	result.SitDepartureDate = data.SitDepartureDate
	result.SitDestinationFinalAddress = data.SitDestinationFinalAddress
	result.SitEntryDate = data.SitEntryDate
	result.SitPostalCode = data.SitPostalCode
	result.SitRequestedDelivery = data.SitRequestedDelivery
	result.TimeMilitary1 = data.TimeMilitary1
	result.TimeMilitary2 = data.TimeMilitary2
	result.UpdateReason = data.UpdateReason

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m UpdateMTOServiceItemSIT) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// Date of attempted contact by the prime corresponding to 'timeMilitary1'.
		// Format: date
		DateOfContact1 *strfmt.Date `json:"dateOfContact1,omitempty"`

		// Date of attempted contact by the prime corresponding to 'timeMilitary2'.
		// Format: date
		DateOfContact2 *strfmt.Date `json:"dateOfContact2,omitempty"`

		// First available date that Prime can deliver SIT service item.
		// Format: date
		FirstAvailableDeliveryDate1 *strfmt.Date `json:"firstAvailableDeliveryDate1,omitempty"`

		// Second available date that Prime can deliver SIT service item.
		// Format: date
		FirstAvailableDeliveryDate2 *strfmt.Date `json:"firstAvailableDeliveryDate2,omitempty"`

		// Service code allowed for this model type.
		// Enum: [DDDSIT DOPSIT DOASIT DOFSIT]
		ReServiceCode string `json:"reServiceCode,omitempty"`

		// Indicates if "Approvals Requested" status is being requested.
		RequestApprovalsRequestedStatus *bool `json:"requestApprovalsRequestedStatus,omitempty"`

		// Date when the customer contacted the prime for a delivery out of SIT.
		// Format: date
		SitCustomerContacted *strfmt.Date `json:"sitCustomerContacted,omitempty"`

		// Departure date for SIT. This is the end date of the SIT at either origin or destination.
		// Format: date
		SitDepartureDate strfmt.Date `json:"sitDepartureDate,omitempty"`

		// sit destination final address
		SitDestinationFinalAddress *Address `json:"sitDestinationFinalAddress,omitempty"`

		// Entry date for the SIT.
		// Format: date
		SitEntryDate *strfmt.Date `json:"sitEntryDate,omitempty"`

		// sit postal code
		// Example: 90210
		// Pattern: ^(\d{5}([\-]\d{4})?)$
		SitPostalCode *string `json:"sitPostalCode,omitempty"`

		// Date when the customer has requested delivery out of SIT.
		// Format: date
		SitRequestedDelivery *strfmt.Date `json:"sitRequestedDelivery,omitempty"`

		// Time of attempted contact by the prime corresponding to 'dateOfContact1', in military format.
		// Example: 1400Z
		// Pattern: \d{4}Z
		TimeMilitary1 *string `json:"timeMilitary1,omitempty"`

		// Time of attempted contact by the prime corresponding to 'dateOfContact2', in military format.
		// Example: 1400Z
		// Pattern: \d{4}Z
		TimeMilitary2 *string `json:"timeMilitary2,omitempty"`

		// Reason for updating service item.
		UpdateReason *string `json:"updateReason,omitempty"`
	}{

		DateOfContact1: m.DateOfContact1,

		DateOfContact2: m.DateOfContact2,

		FirstAvailableDeliveryDate1: m.FirstAvailableDeliveryDate1,

		FirstAvailableDeliveryDate2: m.FirstAvailableDeliveryDate2,

		ReServiceCode: m.ReServiceCode,

		RequestApprovalsRequestedStatus: m.RequestApprovalsRequestedStatus,

		SitCustomerContacted: m.SitCustomerContacted,

		SitDepartureDate: m.SitDepartureDate,

		SitDestinationFinalAddress: m.SitDestinationFinalAddress,

		SitEntryDate: m.SitEntryDate,

		SitPostalCode: m.SitPostalCode,

		SitRequestedDelivery: m.SitRequestedDelivery,

		TimeMilitary1: m.TimeMilitary1,

		TimeMilitary2: m.TimeMilitary2,

		UpdateReason: m.UpdateReason,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ID strfmt.UUID `json:"id,omitempty"`

		ModelType UpdateMTOServiceItemModelType `json:"modelType"`
	}{

		ID: m.ID(),

		ModelType: m.ModelType(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this update m t o service item s i t
func (m *UpdateMTOServiceItemSIT) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateOfContact1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateOfContact2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstAvailableDeliveryDate1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstAvailableDeliveryDate2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReServiceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitCustomerContacted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitDestinationFinalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEntryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitRequestedDelivery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeMilitary1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeMilitary2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateMTOServiceItemSIT) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) validateDateOfContact1(formats strfmt.Registry) error {

	if swag.IsZero(m.DateOfContact1) { // not required
		return nil
	}

	if err := validate.FormatOf("dateOfContact1", "body", "date", m.DateOfContact1.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) validateDateOfContact2(formats strfmt.Registry) error {

	if swag.IsZero(m.DateOfContact2) { // not required
		return nil
	}

	if err := validate.FormatOf("dateOfContact2", "body", "date", m.DateOfContact2.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) validateFirstAvailableDeliveryDate1(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstAvailableDeliveryDate1) { // not required
		return nil
	}

	if err := validate.FormatOf("firstAvailableDeliveryDate1", "body", "date", m.FirstAvailableDeliveryDate1.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) validateFirstAvailableDeliveryDate2(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstAvailableDeliveryDate2) { // not required
		return nil
	}

	if err := validate.FormatOf("firstAvailableDeliveryDate2", "body", "date", m.FirstAvailableDeliveryDate2.String(), formats); err != nil {
		return err
	}

	return nil
}

var updateMTOServiceItemSITTypeReServiceCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DDDSIT","DOPSIT","DOASIT","DOFSIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateMTOServiceItemSITTypeReServiceCodePropEnum = append(updateMTOServiceItemSITTypeReServiceCodePropEnum, v)
	}
}

// property enum
func (m *UpdateMTOServiceItemSIT) validateReServiceCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateMTOServiceItemSITTypeReServiceCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateMTOServiceItemSIT) validateReServiceCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ReServiceCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateReServiceCodeEnum("reServiceCode", "body", m.ReServiceCode); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) validateSitCustomerContacted(formats strfmt.Registry) error {

	if swag.IsZero(m.SitCustomerContacted) { // not required
		return nil
	}

	if err := validate.FormatOf("sitCustomerContacted", "body", "date", m.SitCustomerContacted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) validateSitDepartureDate(formats strfmt.Registry) error {

	if swag.IsZero(m.SitDepartureDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitDepartureDate", "body", "date", m.SitDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) validateSitDestinationFinalAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.SitDestinationFinalAddress) { // not required
		return nil
	}

	if m.SitDestinationFinalAddress != nil {
		if err := m.SitDestinationFinalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitDestinationFinalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitDestinationFinalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) validateSitEntryDate(formats strfmt.Registry) error {

	if swag.IsZero(m.SitEntryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitEntryDate", "body", "date", m.SitEntryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) validateSitPostalCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SitPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("sitPostalCode", "body", *m.SitPostalCode, `^(\d{5}([\-]\d{4})?)$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) validateSitRequestedDelivery(formats strfmt.Registry) error {

	if swag.IsZero(m.SitRequestedDelivery) { // not required
		return nil
	}

	if err := validate.FormatOf("sitRequestedDelivery", "body", "date", m.SitRequestedDelivery.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) validateTimeMilitary1(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeMilitary1) { // not required
		return nil
	}

	if err := validate.Pattern("timeMilitary1", "body", *m.TimeMilitary1, `\d{4}Z`); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) validateTimeMilitary2(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeMilitary2) { // not required
		return nil
	}

	if err := validate.Pattern("timeMilitary2", "body", *m.TimeMilitary2, `\d{4}Z`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update m t o service item s i t based on the context it is used
func (m *UpdateMTOServiceItemSIT) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSitDestinationFinalAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateMTOServiceItemSIT) contextValidateModelType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ModelType().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("modelType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("modelType")
		}
		return err
	}

	return nil
}

func (m *UpdateMTOServiceItemSIT) contextValidateSitDestinationFinalAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SitDestinationFinalAddress != nil {

		if swag.IsZero(m.SitDestinationFinalAddress) { // not required
			return nil
		}

		if err := m.SitDestinationFinalAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitDestinationFinalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitDestinationFinalAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateMTOServiceItemSIT) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateMTOServiceItemSIT) UnmarshalBinary(b []byte) error {
	var res UpdateMTOServiceItemSIT
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
