// Code generated by go-swagger; DO NOT EDIT.

package primev2messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateReweigh Contains the fields available to the Prime when updating a reweigh record.
//
// swagger:model UpdateReweigh
type UpdateReweigh struct {

	// In lieu of a document being uploaded indicating why a reweigh did not occur.
	// Example: The reweigh was not performed because the shipment was already delivered
	VerificationReason *string `json:"verificationReason"`

	// The total reweighed weight for the shipment in pounds.
	// Example: 2000
	// Minimum: 1
	Weight *int64 `json:"weight"`
}

// Validate validates this update reweigh
func (m *UpdateReweigh) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateReweigh) validateWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.Weight) { // not required
		return nil
	}

	if err := validate.MinimumInt("weight", "body", *m.Weight, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update reweigh based on context it is used
func (m *UpdateReweigh) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateReweigh) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateReweigh) UnmarshalBinary(b []byte) error {
	var res UpdateReweigh
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
