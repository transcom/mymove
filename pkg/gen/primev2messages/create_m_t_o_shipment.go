// Code generated by go-swagger; DO NOT EDIT.

package primev2messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMTOShipment create m t o shipment
//
// swagger:model CreateMTOShipment
type CreateMTOShipment struct {

	// agents
	Agents MTOAgents `json:"agents,omitempty"`

	// counselor remarks
	// Example: counselor approved
	CounselorRemarks *string `json:"counselorRemarks,omitempty"`

	// The customer can use the customer remarks field to inform the services counselor and the movers about any
	// special circumstances for this shipment. Typical examples:
	//   * bulky or fragile items,
	//   * weapons,
	//   * access info for their address.
	//
	// Customer enters this information during onboarding. Optional field.
	//
	// Example: handle with care
	CustomerRemarks *string `json:"customerRemarks,omitempty"`

	// Where the movers should deliver this shipment.
	DestinationAddress struct {
		Address
	} `json:"destinationAddress,omitempty"`

	// This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion. When this boolean is true, you must link it to a parent shipment with the divertedFromShipmentId parameter.
	//
	Diversion bool `json:"diversion,omitempty"`

	// The ID of the shipment this is a diversion from. Aka the "Parent" shipment. The diversion boolean must be true if this parameter is supplied in the request. If provided, and if the diverted from shipment is also a diversion, the previous should must then also have a parent ID.
	//
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Format: uuid
	DivertedFromShipmentID strfmt.UUID `json:"divertedFromShipmentId,omitempty"`

	// The ID of the move this new shipment is for.
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	MoveTaskOrderID *strfmt.UUID `json:"moveTaskOrderID"`

	mtoServiceItemsField []MTOServiceItem

	// The address where the movers should pick up this shipment.
	PickupAddress struct {
		Address
	} `json:"pickupAddress,omitempty"`

	// Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor.
	//
	PointOfContact string `json:"pointOfContact,omitempty"`

	// ppm shipment
	PpmShipment *CreatePPMShipment `json:"ppmShipment,omitempty"`

	// The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contractor will need to contact the TOO to change it.
	//
	// Example: 4500
	// Minimum: 1
	PrimeEstimatedWeight *int64 `json:"primeEstimatedWeight,omitempty"`

	// The customer's preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.
	//
	// Format: date
	RequestedPickupDate *strfmt.Date `json:"requestedPickupDate,omitempty"`

	// shipment type
	// Required: true
	ShipmentType *MTOShipmentType `json:"shipmentType"`
}

// MtoServiceItems gets the mto service items of this base type
func (m *CreateMTOShipment) MtoServiceItems() []MTOServiceItem {
	return m.mtoServiceItemsField
}

// SetMtoServiceItems sets the mto service items of this base type
func (m *CreateMTOShipment) SetMtoServiceItems(val []MTOServiceItem) {
	m.mtoServiceItemsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CreateMTOShipment) UnmarshalJSON(raw []byte) error {
	var data struct {
		Agents MTOAgents `json:"agents,omitempty"`

		CounselorRemarks *string `json:"counselorRemarks,omitempty"`

		CustomerRemarks *string `json:"customerRemarks,omitempty"`

		DestinationAddress struct {
			Address
		} `json:"destinationAddress,omitempty"`

		Diversion bool `json:"diversion,omitempty"`

		DivertedFromShipmentID strfmt.UUID `json:"divertedFromShipmentId,omitempty"`

		MoveTaskOrderID *strfmt.UUID `json:"moveTaskOrderID"`

		MtoServiceItems json.RawMessage `json:"mtoServiceItems"`

		PickupAddress struct {
			Address
		} `json:"pickupAddress,omitempty"`

		PointOfContact string `json:"pointOfContact,omitempty"`

		PpmShipment *CreatePPMShipment `json:"ppmShipment,omitempty"`

		PrimeEstimatedWeight *int64 `json:"primeEstimatedWeight,omitempty"`

		RequestedPickupDate *strfmt.Date `json:"requestedPickupDate,omitempty"`

		ShipmentType *MTOShipmentType `json:"shipmentType"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propMtoServiceItems []MTOServiceItem
	if string(data.MtoServiceItems) != "null" {
		mtoServiceItems, err := UnmarshalMTOServiceItemSlice(bytes.NewBuffer(data.MtoServiceItems), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propMtoServiceItems = mtoServiceItems
	}

	var result CreateMTOShipment

	// agents
	result.Agents = data.Agents

	// counselorRemarks
	result.CounselorRemarks = data.CounselorRemarks

	// customerRemarks
	result.CustomerRemarks = data.CustomerRemarks

	// destinationAddress
	result.DestinationAddress = data.DestinationAddress

	// diversion
	result.Diversion = data.Diversion

	// divertedFromShipmentId
	result.DivertedFromShipmentID = data.DivertedFromShipmentID

	// moveTaskOrderID
	result.MoveTaskOrderID = data.MoveTaskOrderID

	// mtoServiceItems
	result.mtoServiceItemsField = propMtoServiceItems

	// pickupAddress
	result.PickupAddress = data.PickupAddress

	// pointOfContact
	result.PointOfContact = data.PointOfContact

	// ppmShipment
	result.PpmShipment = data.PpmShipment

	// primeEstimatedWeight
	result.PrimeEstimatedWeight = data.PrimeEstimatedWeight

	// requestedPickupDate
	result.RequestedPickupDate = data.RequestedPickupDate

	// shipmentType
	result.ShipmentType = data.ShipmentType

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CreateMTOShipment) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Agents MTOAgents `json:"agents,omitempty"`

		CounselorRemarks *string `json:"counselorRemarks,omitempty"`

		CustomerRemarks *string `json:"customerRemarks,omitempty"`

		DestinationAddress struct {
			Address
		} `json:"destinationAddress,omitempty"`

		Diversion bool `json:"diversion,omitempty"`

		DivertedFromShipmentID strfmt.UUID `json:"divertedFromShipmentId,omitempty"`

		MoveTaskOrderID *strfmt.UUID `json:"moveTaskOrderID"`

		PickupAddress struct {
			Address
		} `json:"pickupAddress,omitempty"`

		PointOfContact string `json:"pointOfContact,omitempty"`

		PpmShipment *CreatePPMShipment `json:"ppmShipment,omitempty"`

		PrimeEstimatedWeight *int64 `json:"primeEstimatedWeight,omitempty"`

		RequestedPickupDate *strfmt.Date `json:"requestedPickupDate,omitempty"`

		ShipmentType *MTOShipmentType `json:"shipmentType"`
	}{

		Agents: m.Agents,

		CounselorRemarks: m.CounselorRemarks,

		CustomerRemarks: m.CustomerRemarks,

		DestinationAddress: m.DestinationAddress,

		Diversion: m.Diversion,

		DivertedFromShipmentID: m.DivertedFromShipmentID,

		MoveTaskOrderID: m.MoveTaskOrderID,

		PickupAddress: m.PickupAddress,

		PointOfContact: m.PointOfContact,

		PpmShipment: m.PpmShipment,

		PrimeEstimatedWeight: m.PrimeEstimatedWeight,

		RequestedPickupDate: m.RequestedPickupDate,

		ShipmentType: m.ShipmentType,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		MtoServiceItems []MTOServiceItem `json:"mtoServiceItems"`
	}{

		MtoServiceItems: m.mtoServiceItemsField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this create m t o shipment
func (m *CreateMTOShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivertedFromShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveTaskOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoServiceItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpmShipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimeEstimatedWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMTOShipment) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	if err := m.Agents.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *CreateMTOShipment) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	return nil
}

func (m *CreateMTOShipment) validateDivertedFromShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.DivertedFromShipmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("divertedFromShipmentId", "body", "uuid", m.DivertedFromShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateMTOShipment) validateMoveTaskOrderID(formats strfmt.Registry) error {

	if err := validate.Required("moveTaskOrderID", "body", m.MoveTaskOrderID); err != nil {
		return err
	}

	if err := validate.FormatOf("moveTaskOrderID", "body", "uuid", m.MoveTaskOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateMTOShipment) validateMtoServiceItems(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoServiceItems()) { // not required
		return nil
	}

	for i := 0; i < len(m.MtoServiceItems()); i++ {

		if err := m.mtoServiceItemsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mtoServiceItems" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mtoServiceItems" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *CreateMTOShipment) validatePickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupAddress) { // not required
		return nil
	}

	return nil
}

func (m *CreateMTOShipment) validatePpmShipment(formats strfmt.Registry) error {
	if swag.IsZero(m.PpmShipment) { // not required
		return nil
	}

	if m.PpmShipment != nil {
		if err := m.PpmShipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppmShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppmShipment")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMTOShipment) validatePrimeEstimatedWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimeEstimatedWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("primeEstimatedWeight", "body", *m.PrimeEstimatedWeight, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateMTOShipment) validateRequestedPickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedPickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedPickupDate", "body", "date", m.RequestedPickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateMTOShipment) validateShipmentType(formats strfmt.Registry) error {

	if err := validate.Required("shipmentType", "body", m.ShipmentType); err != nil {
		return err
	}

	if err := validate.Required("shipmentType", "body", m.ShipmentType); err != nil {
		return err
	}

	if m.ShipmentType != nil {
		if err := m.ShipmentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create m t o shipment based on the context it is used
func (m *CreateMTOShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtoServiceItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePpmShipment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMTOShipment) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Agents.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *CreateMTOShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CreateMTOShipment) contextValidateMtoServiceItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MtoServiceItems()); i++ {

		if swag.IsZero(m.mtoServiceItemsField[i]) { // not required
			return nil
		}

		if err := m.mtoServiceItemsField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mtoServiceItems" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mtoServiceItems" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *CreateMTOShipment) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CreateMTOShipment) contextValidatePpmShipment(ctx context.Context, formats strfmt.Registry) error {

	if m.PpmShipment != nil {

		if swag.IsZero(m.PpmShipment) { // not required
			return nil
		}

		if err := m.PpmShipment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppmShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppmShipment")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMTOShipment) contextValidateShipmentType(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentType != nil {

		if err := m.ShipmentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMTOShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMTOShipment) UnmarshalBinary(b []byte) error {
	var res CreateMTOShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
