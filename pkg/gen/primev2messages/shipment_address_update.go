// Code generated by go-swagger; DO NOT EDIT.

package primev2messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentAddressUpdate This represents a destination address change request made by the Prime that is either auto-approved or requires review if the pricing criteria has changed. If criteria has changed, then it must be approved or rejected by a TOO.
//
// swagger:model ShipmentAddressUpdate
type ShipmentAddressUpdate struct {

	// Contractor Remarks
	//
	// The reason there is an address change.
	// Example: This is a contractor remark
	// Required: true
	// Read Only: true
	ContractorRemarks string `json:"contractorRemarks"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// new address
	// Required: true
	NewAddress *Address `json:"newAddress"`

	// The distance between the original SIT address and requested new destination address of shipment
	// Example: 88
	// Minimum: 0
	NewSitDistanceBetween *int64 `json:"newSitDistanceBetween,omitempty"`

	// Office Remarks
	//
	// The TOO comment on approval or rejection.
	// Example: This is an office remark
	OfficeRemarks *string `json:"officeRemarks,omitempty"`

	// The distance between the original SIT address and the previous/old destination address of shipment
	// Example: 50
	// Minimum: 0
	OldSitDistanceBetween *int64 `json:"oldSitDistanceBetween,omitempty"`

	// original address
	// Required: true
	OriginalAddress *Address `json:"originalAddress"`

	// shipment ID
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Read Only: true
	// Format: uuid
	ShipmentID strfmt.UUID `json:"shipmentID"`

	// sit original address
	SitOriginalAddress *Address `json:"sitOriginalAddress,omitempty"`

	// status
	// Required: true
	Status ShipmentAddressUpdateStatus `json:"status"`
}

// Validate validates this shipment address update
func (m *ShipmentAddressUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContractorRemarks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewSitDistanceBetween(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOldSitDistanceBetween(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitOriginalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentAddressUpdate) validateContractorRemarks(formats strfmt.Registry) error {

	if err := validate.RequiredString("contractorRemarks", "body", m.ContractorRemarks); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) validateNewAddress(formats strfmt.Registry) error {

	if err := validate.Required("newAddress", "body", m.NewAddress); err != nil {
		return err
	}

	if m.NewAddress != nil {
		if err := m.NewAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentAddressUpdate) validateNewSitDistanceBetween(formats strfmt.Registry) error {
	if swag.IsZero(m.NewSitDistanceBetween) { // not required
		return nil
	}

	if err := validate.MinimumInt("newSitDistanceBetween", "body", *m.NewSitDistanceBetween, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) validateOldSitDistanceBetween(formats strfmt.Registry) error {
	if swag.IsZero(m.OldSitDistanceBetween) { // not required
		return nil
	}

	if err := validate.MinimumInt("oldSitDistanceBetween", "body", *m.OldSitDistanceBetween, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) validateOriginalAddress(formats strfmt.Registry) error {

	if err := validate.Required("originalAddress", "body", m.OriginalAddress); err != nil {
		return err
	}

	if m.OriginalAddress != nil {
		if err := m.OriginalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentAddressUpdate) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentID", "body", strfmt.UUID(m.ShipmentID)); err != nil {
		return err
	}

	if err := validate.FormatOf("shipmentID", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) validateSitOriginalAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SitOriginalAddress) { // not required
		return nil
	}

	if m.SitOriginalAddress != nil {
		if err := m.SitOriginalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitOriginalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitOriginalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentAddressUpdate) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", ShipmentAddressUpdateStatus(m.Status)); err != nil {
		return err
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this shipment address update based on the context it is used
func (m *ShipmentAddressUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContractorRemarks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginalAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitOriginalAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentAddressUpdate) contextValidateContractorRemarks(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "contractorRemarks", "body", string(m.ContractorRemarks)); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) contextValidateNewAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.NewAddress != nil {

		if err := m.NewAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentAddressUpdate) contextValidateOriginalAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalAddress != nil {

		if err := m.OriginalAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentAddressUpdate) contextValidateShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "shipmentID", "body", strfmt.UUID(m.ShipmentID)); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentAddressUpdate) contextValidateSitOriginalAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SitOriginalAddress != nil {

		if swag.IsZero(m.SitOriginalAddress) { // not required
			return nil
		}

		if err := m.SitOriginalAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitOriginalAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitOriginalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentAddressUpdate) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentAddressUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentAddressUpdate) UnmarshalBinary(b []byte) error {
	var res ShipmentAddressUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
