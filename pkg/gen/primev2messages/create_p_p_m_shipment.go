// Code generated by go-swagger; DO NOT EDIT.

package primev2messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreatePPMShipment Creation object containing the `PPM` shipmentType specific data, not used for other shipment types.
//
// swagger:model CreatePPMShipment
type CreatePPMShipment struct {

	// The address of the destination location where goods are being delivered to.
	DestinationAddress struct {
		Address
	} `json:"destinationAddress,omitempty"`

	// The estimated weight of the PPM shipment goods being moved in pounds.
	// Example: 4200
	// Required: true
	EstimatedWeight *int64 `json:"estimatedWeight"`

	// Date the customer expects to begin moving from their origin.
	//
	// Required: true
	// Format: date
	ExpectedDepartureDate *strfmt.Date `json:"expectedDepartureDate"`

	// Indicates whether PPM shipment has pro gear for themselves or their spouse.
	//
	// Required: true
	HasProGear *bool `json:"hasProGear"`

	// The address of the origin location where goods are being moved from.
	PickupAddress struct {
		Address
	} `json:"pickupAddress,omitempty"`

	// The estimated weight of the pro-gear being moved belonging to the service member in pounds.
	ProGearWeight *int64 `json:"proGearWeight,omitempty"`

	// The date that goods will exit the storage location.
	// Format: date
	SitEstimatedDepartureDate *strfmt.Date `json:"sitEstimatedDepartureDate,omitempty"`

	// The date that goods will first enter the storage location.
	// Format: date
	SitEstimatedEntryDate *strfmt.Date `json:"sitEstimatedEntryDate,omitempty"`

	// The estimated weight of the goods being put into storage in pounds.
	// Example: 2000
	SitEstimatedWeight *int64 `json:"sitEstimatedWeight,omitempty"`

	// Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.
	//
	// Must be set to `true` when providing `sitLocation`, `sitEstimatedWeight`, `sitEstimatedEntryDate`, and `sitEstimatedDepartureDate` values to calculate the `sitEstimatedCost`.
	//
	// Required: true
	SitExpected *bool `json:"sitExpected"`

	// sit location
	SitLocation *SITLocationType `json:"sitLocation,omitempty"`

	// The estimated weight of the pro-gear being moved belonging to a spouse in pounds.
	SpouseProGearWeight *int64 `json:"spouseProGearWeight,omitempty"`
}

// Validate validates this create p p m shipment
func (m *CreatePPMShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasProGear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEstimatedDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEstimatedEntryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitExpected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatePPMShipment) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	return nil
}

func (m *CreatePPMShipment) validateEstimatedWeight(formats strfmt.Registry) error {

	if err := validate.Required("estimatedWeight", "body", m.EstimatedWeight); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validateExpectedDepartureDate(formats strfmt.Registry) error {

	if err := validate.Required("expectedDepartureDate", "body", m.ExpectedDepartureDate); err != nil {
		return err
	}

	if err := validate.FormatOf("expectedDepartureDate", "body", "date", m.ExpectedDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validateHasProGear(formats strfmt.Registry) error {

	if err := validate.Required("hasProGear", "body", m.HasProGear); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validatePickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupAddress) { // not required
		return nil
	}

	return nil
}

func (m *CreatePPMShipment) validateSitEstimatedDepartureDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitEstimatedDepartureDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitEstimatedDepartureDate", "body", "date", m.SitEstimatedDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validateSitEstimatedEntryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitEstimatedEntryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitEstimatedEntryDate", "body", "date", m.SitEstimatedEntryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validateSitExpected(formats strfmt.Registry) error {

	if err := validate.Required("sitExpected", "body", m.SitExpected); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validateSitLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.SitLocation) { // not required
		return nil
	}

	if m.SitLocation != nil {
		if err := m.SitLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitLocation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create p p m shipment based on the context it is used
func (m *CreatePPMShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatePPMShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CreatePPMShipment) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CreatePPMShipment) contextValidateSitLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.SitLocation != nil {

		if swag.IsZero(m.SitLocation) { // not required
			return nil
		}

		if err := m.SitLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitLocation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreatePPMShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreatePPMShipment) UnmarshalBinary(b []byte) error {
	var res CreatePPMShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
