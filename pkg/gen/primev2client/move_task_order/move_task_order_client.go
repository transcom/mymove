// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new move task order API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for move task order API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetMoveTaskOrder(params *GetMoveTaskOrderParams, opts ...ClientOption) (*GetMoveTaskOrderOK, error)

	ListMoves(params *ListMovesParams, opts ...ClientOption) (*ListMovesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetMoveTaskOrder gets move task order

	### Functionality

This endpoint gets an individual MoveTaskOrder by ID.

It will provide information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests.
*/
func (a *Client) GetMoveTaskOrder(params *GetMoveTaskOrderParams, opts ...ClientOption) (*GetMoveTaskOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMoveTaskOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMoveTaskOrder",
		Method:             "GET",
		PathPattern:        "/move-task-orders/{moveID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMoveTaskOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMoveTaskOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMoveTaskOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListMoves lists moves

	Gets all moves that have been reviewed and approved by the TOO. The `since` parameter can be used to filter this

list down to only the moves that have been updated since the provided timestamp. A move will be considered
updated if the `updatedAt` timestamp on the move or on its orders, shipments, service items, or payment
requests, is later than the provided date and time.

**WIP**: Include what causes moves to leave this list. Currently, once the `availableToPrimeAt` timestamp has
been set, that move will always appear in this list.

**NOTE**: Version 1 of listMoves will eventually need to be deprecated. Version 2 is an extension of 1 containing
amendment total/since count information.
*/
func (a *Client) ListMoves(params *ListMovesParams, opts ...ClientOption) (*ListMovesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMovesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMoves",
		Method:             "GET",
		PathPattern:        "/moves",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListMovesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMovesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listMoves: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
