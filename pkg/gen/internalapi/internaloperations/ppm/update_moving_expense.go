// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateMovingExpenseHandlerFunc turns a function with the right signature into a update moving expense handler
type UpdateMovingExpenseHandlerFunc func(UpdateMovingExpenseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMovingExpenseHandlerFunc) Handle(params UpdateMovingExpenseParams) middleware.Responder {
	return fn(params)
}

// UpdateMovingExpenseHandler interface for that can handle valid update moving expense params
type UpdateMovingExpenseHandler interface {
	Handle(UpdateMovingExpenseParams) middleware.Responder
}

// NewUpdateMovingExpense creates a new http.Handler for the update moving expense operation
func NewUpdateMovingExpense(ctx *middleware.Context, handler UpdateMovingExpenseHandler) *UpdateMovingExpense {
	return &UpdateMovingExpense{Context: ctx, Handler: handler}
}

/*
	UpdateMovingExpense swagger:route PATCH /ppm-shipments/{ppmShipmentId}/moving-expenses/{movingExpenseId} ppm updateMovingExpense

# Updates the moving expense

Any fields sent in this request will be set on the moving expense referenced
*/
type UpdateMovingExpense struct {
	Context *middleware.Context
	Handler UpdateMovingExpenseHandler
}

func (o *UpdateMovingExpense) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateMovingExpenseParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
