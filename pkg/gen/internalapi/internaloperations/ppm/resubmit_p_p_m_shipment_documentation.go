// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ResubmitPPMShipmentDocumentationHandlerFunc turns a function with the right signature into a resubmit p p m shipment documentation handler
type ResubmitPPMShipmentDocumentationHandlerFunc func(ResubmitPPMShipmentDocumentationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ResubmitPPMShipmentDocumentationHandlerFunc) Handle(params ResubmitPPMShipmentDocumentationParams) middleware.Responder {
	return fn(params)
}

// ResubmitPPMShipmentDocumentationHandler interface for that can handle valid resubmit p p m shipment documentation params
type ResubmitPPMShipmentDocumentationHandler interface {
	Handle(ResubmitPPMShipmentDocumentationParams) middleware.Responder
}

// NewResubmitPPMShipmentDocumentation creates a new http.Handler for the resubmit p p m shipment documentation operation
func NewResubmitPPMShipmentDocumentation(ctx *middleware.Context, handler ResubmitPPMShipmentDocumentationHandler) *ResubmitPPMShipmentDocumentation {
	return &ResubmitPPMShipmentDocumentation{Context: ctx, Handler: handler}
}

/*
	ResubmitPPMShipmentDocumentation swagger:route PUT /ppm-shipments/{ppmShipmentId}/resubmit-ppm-shipment-documentation/{signedCertificationId} ppm resubmitPPMShipmentDocumentation

# Updates signature and routes PPM shipment to service counselor

Updates customer signature along with the text they agreed to, and then routes the PPM shipment to the service
counselor queue for review.
*/
type ResubmitPPMShipmentDocumentation struct {
	Context *middleware.Context
	Handler ResubmitPPMShipmentDocumentationHandler
}

func (o *ResubmitPPMShipmentDocumentation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewResubmitPPMShipmentDocumentationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
