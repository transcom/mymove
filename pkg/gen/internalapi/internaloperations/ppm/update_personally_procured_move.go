// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdatePersonallyProcuredMoveHandlerFunc turns a function with the right signature into a update personally procured move handler
type UpdatePersonallyProcuredMoveHandlerFunc func(UpdatePersonallyProcuredMoveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdatePersonallyProcuredMoveHandlerFunc) Handle(params UpdatePersonallyProcuredMoveParams) middleware.Responder {
	return fn(params)
}

// UpdatePersonallyProcuredMoveHandler interface for that can handle valid update personally procured move params
type UpdatePersonallyProcuredMoveHandler interface {
	Handle(UpdatePersonallyProcuredMoveParams) middleware.Responder
}

// NewUpdatePersonallyProcuredMove creates a new http.Handler for the update personally procured move operation
func NewUpdatePersonallyProcuredMove(ctx *middleware.Context, handler UpdatePersonallyProcuredMoveHandler) *UpdatePersonallyProcuredMove {
	return &UpdatePersonallyProcuredMove{Context: ctx, Handler: handler}
}

/*UpdatePersonallyProcuredMove swagger:route PUT /moves/{moveId}/personally_procured_move/{personallyProcuredMoveId} ppm updatePersonallyProcuredMove

Updates the PPM

This replaces the current version of the PPM with the version sent.

*/
type UpdatePersonallyProcuredMove struct {
	Context *middleware.Context
	Handler UpdatePersonallyProcuredMoveHandler
}

func (o *UpdatePersonallyProcuredMove) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdatePersonallyProcuredMoveParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
