// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateGunSafeWeightTicketHandlerFunc turns a function with the right signature into a create gun safe weight ticket handler
type CreateGunSafeWeightTicketHandlerFunc func(CreateGunSafeWeightTicketParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateGunSafeWeightTicketHandlerFunc) Handle(params CreateGunSafeWeightTicketParams) middleware.Responder {
	return fn(params)
}

// CreateGunSafeWeightTicketHandler interface for that can handle valid create gun safe weight ticket params
type CreateGunSafeWeightTicketHandler interface {
	Handle(CreateGunSafeWeightTicketParams) middleware.Responder
}

// NewCreateGunSafeWeightTicket creates a new http.Handler for the create gun safe weight ticket operation
func NewCreateGunSafeWeightTicket(ctx *middleware.Context, handler CreateGunSafeWeightTicketHandler) *CreateGunSafeWeightTicket {
	return &CreateGunSafeWeightTicket{Context: ctx, Handler: handler}
}

/*
	CreateGunSafeWeightTicket swagger:route POST /ppm-shipments/{ppmShipmentId}/gun-safe-weight-tickets ppm createGunSafeWeightTicket

# Creates a gun safe weight ticket

Creates a PPM shipment's gun safe weight ticket. This will only contain the minimum necessary fields for a
gun safe weight ticket. Data should be filled in using the patch endpoint.
*/
type CreateGunSafeWeightTicket struct {
	Context *middleware.Context
	Handler CreateGunSafeWeightTicketHandler
}

func (o *CreateGunSafeWeightTicket) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateGunSafeWeightTicketParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
