// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewCreatePPMAttachmentsParams creates a new CreatePPMAttachmentsParams object
// no default values defined in spec.
func NewCreatePPMAttachmentsParams() CreatePPMAttachmentsParams {

	return CreatePPMAttachmentsParams{}
}

// CreatePPMAttachmentsParams contains all the bound params for the create p p m attachments operation
// typically these are obtained from a http.Request
//
// swagger:parameters createPPMAttachments
type CreatePPMAttachmentsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Restrict the list to documents with matching docType.
	  Required: true
	  In: query
	  Collection Format: csv
	*/
	DocTypes []string
	/*UUID of the PPM to create an attachments PDF for
	  Required: true
	  In: path
	*/
	PersonallyProcuredMoveID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCreatePPMAttachmentsParams() beforehand.
func (o *CreatePPMAttachmentsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDocTypes, qhkDocTypes, _ := qs.GetOK("docTypes")
	if err := o.bindDocTypes(qDocTypes, qhkDocTypes, route.Formats); err != nil {
		res = append(res, err)
	}

	rPersonallyProcuredMoveID, rhkPersonallyProcuredMoveID, _ := route.Params.GetOK("personallyProcuredMoveId")
	if err := o.bindPersonallyProcuredMoveID(rPersonallyProcuredMoveID, rhkPersonallyProcuredMoveID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDocTypes binds and validates array parameter DocTypes from query.
//
// Arrays are parsed according to CollectionFormat: "csv" (defaults to "csv" when empty).
func (o *CreatePPMAttachmentsParams) bindDocTypes(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("docTypes", "query", rawData)
	}

	var qvDocTypes string
	if len(rawData) > 0 {
		qvDocTypes = rawData[len(rawData)-1]
	}

	// CollectionFormat: csv
	docTypesIC := swag.SplitByFormat(qvDocTypes, "csv")

	if len(docTypesIC) == 0 {
		return errors.Required("docTypes", "query", docTypesIC)
	}

	var docTypesIR []string
	for i, docTypesIV := range docTypesIC {
		docTypesI := docTypesIV

		if err := validate.EnumCase(fmt.Sprintf("%s.%v", "docTypes", i), "query", docTypesI, []interface{}{"OTHER", "WEIGHT_TICKET", "STORAGE_EXPENSE", "SHIPMENT_SUMMARY", "EXPENSE", "WEIGHT_TICKET_SET"}, true); err != nil {
			return err
		}

		docTypesIR = append(docTypesIR, docTypesI)
	}

	o.DocTypes = docTypesIR

	return nil
}

// bindPersonallyProcuredMoveID binds and validates parameter PersonallyProcuredMoveID from path.
func (o *CreatePPMAttachmentsParams) bindPersonallyProcuredMoveID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("personallyProcuredMoveId", "path", "strfmt.UUID", raw)
	}
	o.PersonallyProcuredMoveID = *(value.(*strfmt.UUID))

	if err := o.validatePersonallyProcuredMoveID(formats); err != nil {
		return err
	}

	return nil
}

// validatePersonallyProcuredMoveID carries on validations for parameter PersonallyProcuredMoveID
func (o *CreatePPMAttachmentsParams) validatePersonallyProcuredMoveID(formats strfmt.Registry) error {

	if err := validate.FormatOf("personallyProcuredMoveId", "path", "uuid", o.PersonallyProcuredMoveID.String(), formats); err != nil {
		return err
	}
	return nil
}
