// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShowPPMSitEstimateHandlerFunc turns a function with the right signature into a show p p m sit estimate handler
type ShowPPMSitEstimateHandlerFunc func(ShowPPMSitEstimateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShowPPMSitEstimateHandlerFunc) Handle(params ShowPPMSitEstimateParams) middleware.Responder {
	return fn(params)
}

// ShowPPMSitEstimateHandler interface for that can handle valid show p p m sit estimate params
type ShowPPMSitEstimateHandler interface {
	Handle(ShowPPMSitEstimateParams) middleware.Responder
}

// NewShowPPMSitEstimate creates a new http.Handler for the show p p m sit estimate operation
func NewShowPPMSitEstimate(ctx *middleware.Context, handler ShowPPMSitEstimateHandler) *ShowPPMSitEstimate {
	return &ShowPPMSitEstimate{Context: ctx, Handler: handler}
}

/*ShowPPMSitEstimate swagger:route GET /estimates/ppm_sit ppm showPPMSitEstimate

Return a PPM move's SIT cost estimate

Calculates a reimbursment for a PPM move's SIT

*/
type ShowPPMSitEstimate struct {
	Context *middleware.Context
	Handler ShowPPMSitEstimateHandler
}

func (o *ShowPPMSitEstimate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewShowPPMSitEstimateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
