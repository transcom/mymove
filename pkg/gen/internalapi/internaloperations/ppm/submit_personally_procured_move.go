// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SubmitPersonallyProcuredMoveHandlerFunc turns a function with the right signature into a submit personally procured move handler
type SubmitPersonallyProcuredMoveHandlerFunc func(SubmitPersonallyProcuredMoveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SubmitPersonallyProcuredMoveHandlerFunc) Handle(params SubmitPersonallyProcuredMoveParams) middleware.Responder {
	return fn(params)
}

// SubmitPersonallyProcuredMoveHandler interface for that can handle valid submit personally procured move params
type SubmitPersonallyProcuredMoveHandler interface {
	Handle(SubmitPersonallyProcuredMoveParams) middleware.Responder
}

// NewSubmitPersonallyProcuredMove creates a new http.Handler for the submit personally procured move operation
func NewSubmitPersonallyProcuredMove(ctx *middleware.Context, handler SubmitPersonallyProcuredMoveHandler) *SubmitPersonallyProcuredMove {
	return &SubmitPersonallyProcuredMove{Context: ctx, Handler: handler}
}

/* SubmitPersonallyProcuredMove swagger:route POST /personally_procured_move/{personallyProcuredMoveId}/submit ppm submitPersonallyProcuredMove

Submits a PPM for approval

Submits a PPM for approval by the office. The status of the PPM will be updated to SUBMITTED

*/
type SubmitPersonallyProcuredMove struct {
	Context *middleware.Context
	Handler SubmitPersonallyProcuredMoveHandler
}

func (o *SubmitPersonallyProcuredMove) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSubmitPersonallyProcuredMoveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
