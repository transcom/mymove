// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreatePPMAttachmentsHandlerFunc turns a function with the right signature into a create p p m attachments handler
type CreatePPMAttachmentsHandlerFunc func(CreatePPMAttachmentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreatePPMAttachmentsHandlerFunc) Handle(params CreatePPMAttachmentsParams) middleware.Responder {
	return fn(params)
}

// CreatePPMAttachmentsHandler interface for that can handle valid create p p m attachments params
type CreatePPMAttachmentsHandler interface {
	Handle(CreatePPMAttachmentsParams) middleware.Responder
}

// NewCreatePPMAttachments creates a new http.Handler for the create p p m attachments operation
func NewCreatePPMAttachments(ctx *middleware.Context, handler CreatePPMAttachmentsHandler) *CreatePPMAttachments {
	return &CreatePPMAttachments{Context: ctx, Handler: handler}
}

/* CreatePPMAttachments swagger:route POST /personally_procured_moves/{personallyProcuredMoveId}/create_ppm_attachments ppm createPPMAttachments

Creates PPM attachments PDF

Creates a PPM attachments PDF

*/
type CreatePPMAttachments struct {
	Context *middleware.Context
	Handler CreatePPMAttachmentsHandler
}

func (o *CreatePPMAttachments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreatePPMAttachmentsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
