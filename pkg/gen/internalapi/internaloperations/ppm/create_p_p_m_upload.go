// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreatePPMUploadHandlerFunc turns a function with the right signature into a create p p m upload handler
type CreatePPMUploadHandlerFunc func(CreatePPMUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreatePPMUploadHandlerFunc) Handle(params CreatePPMUploadParams) middleware.Responder {
	return fn(params)
}

// CreatePPMUploadHandler interface for that can handle valid create p p m upload params
type CreatePPMUploadHandler interface {
	Handle(CreatePPMUploadParams) middleware.Responder
}

// NewCreatePPMUpload creates a new http.Handler for the create p p m upload operation
func NewCreatePPMUpload(ctx *middleware.Context, handler CreatePPMUploadHandler) *CreatePPMUpload {
	return &CreatePPMUpload{Context: ctx, Handler: handler}
}

/*
	CreatePPMUpload swagger:route POST /ppm-shipments/{ppmShipmentId}/uploads ppm createPPMUpload

# Create a new upload for a PPM weight ticket, pro-gear, or moving expense document

Uploads represent a single digital file, such as a PNG, JPEG, PDF, or spreadsheet.
*/
type CreatePPMUpload struct {
	Context *middleware.Context
	Handler CreatePPMUploadHandler
}

func (o *CreatePPMUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreatePPMUploadParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
