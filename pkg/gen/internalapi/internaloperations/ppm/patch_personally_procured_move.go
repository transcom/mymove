// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchPersonallyProcuredMoveHandlerFunc turns a function with the right signature into a patch personally procured move handler
type PatchPersonallyProcuredMoveHandlerFunc func(PatchPersonallyProcuredMoveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchPersonallyProcuredMoveHandlerFunc) Handle(params PatchPersonallyProcuredMoveParams) middleware.Responder {
	return fn(params)
}

// PatchPersonallyProcuredMoveHandler interface for that can handle valid patch personally procured move params
type PatchPersonallyProcuredMoveHandler interface {
	Handle(PatchPersonallyProcuredMoveParams) middleware.Responder
}

// NewPatchPersonallyProcuredMove creates a new http.Handler for the patch personally procured move operation
func NewPatchPersonallyProcuredMove(ctx *middleware.Context, handler PatchPersonallyProcuredMoveHandler) *PatchPersonallyProcuredMove {
	return &PatchPersonallyProcuredMove{Context: ctx, Handler: handler}
}

/* PatchPersonallyProcuredMove swagger:route PATCH /moves/{moveId}/personally_procured_move/{personallyProcuredMoveId} ppm patchPersonallyProcuredMove

Patches the PPM

Any fields sent in this request will be set on the PPM referenced

*/
type PatchPersonallyProcuredMove struct {
	Context *middleware.Context
	Handler PatchPersonallyProcuredMoveHandler
}

func (o *PatchPersonallyProcuredMove) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchPersonallyProcuredMoveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
