// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IndexPersonallyProcuredMovesHandlerFunc turns a function with the right signature into a index personally procured moves handler
type IndexPersonallyProcuredMovesHandlerFunc func(IndexPersonallyProcuredMovesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IndexPersonallyProcuredMovesHandlerFunc) Handle(params IndexPersonallyProcuredMovesParams) middleware.Responder {
	return fn(params)
}

// IndexPersonallyProcuredMovesHandler interface for that can handle valid index personally procured moves params
type IndexPersonallyProcuredMovesHandler interface {
	Handle(IndexPersonallyProcuredMovesParams) middleware.Responder
}

// NewIndexPersonallyProcuredMoves creates a new http.Handler for the index personally procured moves operation
func NewIndexPersonallyProcuredMoves(ctx *middleware.Context, handler IndexPersonallyProcuredMovesHandler) *IndexPersonallyProcuredMoves {
	return &IndexPersonallyProcuredMoves{Context: ctx, Handler: handler}
}

/* IndexPersonallyProcuredMoves swagger:route GET /moves/{moveId}/personally_procured_move ppm indexPersonallyProcuredMoves

Returns a list of all PPMs associated with this move

Returns a list of all PPMs associated with this move

*/
type IndexPersonallyProcuredMoves struct {
	Context *middleware.Context
	Handler IndexPersonallyProcuredMovesHandler
}

func (o *IndexPersonallyProcuredMoves) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIndexPersonallyProcuredMovesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
