// Code generated by go-swagger; DO NOT EDIT.

package transportation_offices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShowDutyStationTransportationOfficeHandlerFunc turns a function with the right signature into a show duty station transportation office handler
type ShowDutyStationTransportationOfficeHandlerFunc func(ShowDutyStationTransportationOfficeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShowDutyStationTransportationOfficeHandlerFunc) Handle(params ShowDutyStationTransportationOfficeParams) middleware.Responder {
	return fn(params)
}

// ShowDutyStationTransportationOfficeHandler interface for that can handle valid show duty station transportation office params
type ShowDutyStationTransportationOfficeHandler interface {
	Handle(ShowDutyStationTransportationOfficeParams) middleware.Responder
}

// NewShowDutyStationTransportationOffice creates a new http.Handler for the show duty station transportation office operation
func NewShowDutyStationTransportationOffice(ctx *middleware.Context, handler ShowDutyStationTransportationOfficeHandler) *ShowDutyStationTransportationOffice {
	return &ShowDutyStationTransportationOffice{Context: ctx, Handler: handler}
}

/* ShowDutyStationTransportationOffice swagger:route GET /duty_stations/{dutyStationId}/transportation_office transportation_offices showDutyStationTransportationOffice

Returns the transportation office for a given duty station

Returns the given duty station's transportation office

*/
type ShowDutyStationTransportationOffice struct {
	Context *middleware.Context
	Handler ShowDutyStationTransportationOfficeHandler
}

func (o *ShowDutyStationTransportationOffice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewShowDutyStationTransportationOfficeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
