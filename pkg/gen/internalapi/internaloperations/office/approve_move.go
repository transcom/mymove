// Code generated by go-swagger; DO NOT EDIT.

package office

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ApproveMoveHandlerFunc turns a function with the right signature into a approve move handler
type ApproveMoveHandlerFunc func(ApproveMoveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ApproveMoveHandlerFunc) Handle(params ApproveMoveParams) middleware.Responder {
	return fn(params)
}

// ApproveMoveHandler interface for that can handle valid approve move params
type ApproveMoveHandler interface {
	Handle(ApproveMoveParams) middleware.Responder
}

// NewApproveMove creates a new http.Handler for the approve move operation
func NewApproveMove(ctx *middleware.Context, handler ApproveMoveHandler) *ApproveMove {
	return &ApproveMove{Context: ctx, Handler: handler}
}

/*
	ApproveMove swagger:route POST /moves/{moveId}/approve office approveMove

# Approves a move to proceed

Approves the basic details of a move. The status of the move will be updated to APPROVED
*/
type ApproveMove struct {
	Context *middleware.Context
	Handler ApproveMoveHandler
}

func (o *ApproveMove) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewApproveMoveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
