// Code generated by go-swagger; DO NOT EDIT.

package office

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ApprovePPMHandlerFunc turns a function with the right signature into a approve p p m handler
type ApprovePPMHandlerFunc func(ApprovePPMParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ApprovePPMHandlerFunc) Handle(params ApprovePPMParams) middleware.Responder {
	return fn(params)
}

// ApprovePPMHandler interface for that can handle valid approve p p m params
type ApprovePPMHandler interface {
	Handle(ApprovePPMParams) middleware.Responder
}

// NewApprovePPM creates a new http.Handler for the approve p p m operation
func NewApprovePPM(ctx *middleware.Context, handler ApprovePPMHandler) *ApprovePPM {
	return &ApprovePPM{Context: ctx, Handler: handler}
}

/*ApprovePPM swagger:route POST /personally_procured_moves/{personallyProcuredMoveId}/approve office approvePPM

Approves the PPM

Sets the status of the PPM to APPROVED.

*/
type ApprovePPM struct {
	Context *middleware.Context
	Handler ApprovePPMHandler
}

func (o *ApprovePPM) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewApprovePPMParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
