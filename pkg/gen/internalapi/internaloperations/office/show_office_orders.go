// Code generated by go-swagger; DO NOT EDIT.

package office

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShowOfficeOrdersHandlerFunc turns a function with the right signature into a show office orders handler
type ShowOfficeOrdersHandlerFunc func(ShowOfficeOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShowOfficeOrdersHandlerFunc) Handle(params ShowOfficeOrdersParams) middleware.Responder {
	return fn(params)
}

// ShowOfficeOrdersHandler interface for that can handle valid show office orders params
type ShowOfficeOrdersHandler interface {
	Handle(ShowOfficeOrdersParams) middleware.Responder
}

// NewShowOfficeOrders creates a new http.Handler for the show office orders operation
func NewShowOfficeOrders(ctx *middleware.Context, handler ShowOfficeOrdersHandler) *ShowOfficeOrders {
	return &ShowOfficeOrders{Context: ctx, Handler: handler}
}

/*
	ShowOfficeOrders swagger:route GET /moves/{moveId}/orders office showOfficeOrders

# Returns orders information for a move for office use

Returns orders information for a move for office use
*/
type ShowOfficeOrders struct {
	Context *middleware.Context
	Handler ShowOfficeOrdersHandler
}

func (o *ShowOfficeOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewShowOfficeOrdersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
