// Code generated by go-swagger; DO NOT EDIT.

package duty_stations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SearchDutyStationsHandlerFunc turns a function with the right signature into a search duty stations handler
type SearchDutyStationsHandlerFunc func(SearchDutyStationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchDutyStationsHandlerFunc) Handle(params SearchDutyStationsParams) middleware.Responder {
	return fn(params)
}

// SearchDutyStationsHandler interface for that can handle valid search duty stations params
type SearchDutyStationsHandler interface {
	Handle(SearchDutyStationsParams) middleware.Responder
}

// NewSearchDutyStations creates a new http.Handler for the search duty stations operation
func NewSearchDutyStations(ctx *middleware.Context, handler SearchDutyStationsHandler) *SearchDutyStations {
	return &SearchDutyStations{Context: ctx, Handler: handler}
}

/*SearchDutyStations swagger:route GET /duty_stations duty_stations searchDutyStations

Returns the duty stations matching the search query

Returns the duty stations matching the search query

*/
type SearchDutyStations struct {
	Context *middleware.Context
	Handler SearchDutyStationsHandler
}

func (o *SearchDutyStations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSearchDutyStationsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
