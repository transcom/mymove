// Code generated by go-swagger; DO NOT EDIT.

package calendar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IsDateWeekendHolidayHandlerFunc turns a function with the right signature into a is date weekend holiday handler
type IsDateWeekendHolidayHandlerFunc func(IsDateWeekendHolidayParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IsDateWeekendHolidayHandlerFunc) Handle(params IsDateWeekendHolidayParams) middleware.Responder {
	return fn(params)
}

// IsDateWeekendHolidayHandler interface for that can handle valid is date weekend holiday params
type IsDateWeekendHolidayHandler interface {
	Handle(IsDateWeekendHolidayParams) middleware.Responder
}

// NewIsDateWeekendHoliday creates a new http.Handler for the is date weekend holiday operation
func NewIsDateWeekendHoliday(ctx *middleware.Context, handler IsDateWeekendHolidayHandler) *IsDateWeekendHoliday {
	return &IsDateWeekendHoliday{Context: ctx, Handler: handler}
}

/*
	IsDateWeekendHoliday swagger:route GET /calendar/{countryCode}/is-weekend-holiday/{date} calendar isDateWeekendHoliday

# Validate  move date selection

Utility API to determine if input date falls on weekend and/or holiday.
*/
type IsDateWeekendHoliday struct {
	Context *middleware.Context
	Handler IsDateWeekendHolidayHandler
}

func (o *IsDateWeekendHoliday) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIsDateWeekendHolidayParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
