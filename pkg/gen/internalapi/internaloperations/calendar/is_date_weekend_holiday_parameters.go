// Code generated by go-swagger; DO NOT EDIT.

package calendar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewIsDateWeekendHolidayParams creates a new IsDateWeekendHolidayParams object
//
// There are no default values defined in the spec.
func NewIsDateWeekendHolidayParams() IsDateWeekendHolidayParams {

	return IsDateWeekendHolidayParams{}
}

// IsDateWeekendHolidayParams contains all the bound params for the is date weekend holiday operation
// typically these are obtained from a http.Request
//
// swagger:parameters isDateWeekendHoliday
type IsDateWeekendHolidayParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*country code for context of date
	  Required: true
	  In: path
	*/
	CountryCode string
	/*input date to determine if weekend/holiday for given country.
	  Required: true
	  In: path
	*/
	Date strfmt.Date
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewIsDateWeekendHolidayParams() beforehand.
func (o *IsDateWeekendHolidayParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rCountryCode, rhkCountryCode, _ := route.Params.GetOK("countryCode")
	if err := o.bindCountryCode(rCountryCode, rhkCountryCode, route.Formats); err != nil {
		res = append(res, err)
	}

	rDate, rhkDate, _ := route.Params.GetOK("date")
	if err := o.bindDate(rDate, rhkDate, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCountryCode binds and validates parameter CountryCode from path.
func (o *IsDateWeekendHolidayParams) bindCountryCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.CountryCode = raw

	if err := o.validateCountryCode(formats); err != nil {
		return err
	}

	return nil
}

// validateCountryCode carries on validations for parameter CountryCode
func (o *IsDateWeekendHolidayParams) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.EnumCase("countryCode", "path", o.CountryCode, []interface{}{"US"}, true); err != nil {
		return err
	}

	return nil
}

// bindDate binds and validates parameter Date from path.
func (o *IsDateWeekendHolidayParams) bindDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("date", "path", "strfmt.Date", raw)
	}
	o.Date = *(value.(*strfmt.Date))

	if err := o.validateDate(formats); err != nil {
		return err
	}

	return nil
}

// validateDate carries on validations for parameter Date
func (o *IsDateWeekendHolidayParams) validateDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("date", "path", "date", o.Date.String(), formats); err != nil {
		return err
	}
	return nil
}
