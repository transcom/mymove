// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateOrdersHandlerFunc turns a function with the right signature into a create orders handler
type CreateOrdersHandlerFunc func(CreateOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateOrdersHandlerFunc) Handle(params CreateOrdersParams) middleware.Responder {
	return fn(params)
}

// CreateOrdersHandler interface for that can handle valid create orders params
type CreateOrdersHandler interface {
	Handle(CreateOrdersParams) middleware.Responder
}

// NewCreateOrders creates a new http.Handler for the create orders operation
func NewCreateOrders(ctx *middleware.Context, handler CreateOrdersHandler) *CreateOrders {
	return &CreateOrders{Context: ctx, Handler: handler}
}

/*
	CreateOrders swagger:route POST /orders orders createOrders

# Creates an orders model for a logged-in user

Creates an instance of orders tied to a service member
*/
type CreateOrders struct {
	Context *middleware.Context
	Handler CreateOrdersHandler
}

func (o *CreateOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateOrdersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
