// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShowOrdersHandlerFunc turns a function with the right signature into a show orders handler
type ShowOrdersHandlerFunc func(ShowOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShowOrdersHandlerFunc) Handle(params ShowOrdersParams) middleware.Responder {
	return fn(params)
}

// ShowOrdersHandler interface for that can handle valid show orders params
type ShowOrdersHandler interface {
	Handle(ShowOrdersParams) middleware.Responder
}

// NewShowOrders creates a new http.Handler for the show orders operation
func NewShowOrders(ctx *middleware.Context, handler ShowOrdersHandler) *ShowOrders {
	return &ShowOrders{Context: ctx, Handler: handler}
}

/*
	ShowOrders swagger:route GET /orders/{ordersId} orders showOrders

# Returns the given order

Returns the given order
*/
type ShowOrders struct {
	Context *middleware.Context
	Handler ShowOrdersHandler
}

func (o *ShowOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewShowOrdersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
