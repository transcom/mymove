// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateOrdersHandlerFunc turns a function with the right signature into a update orders handler
type UpdateOrdersHandlerFunc func(UpdateOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateOrdersHandlerFunc) Handle(params UpdateOrdersParams) middleware.Responder {
	return fn(params)
}

// UpdateOrdersHandler interface for that can handle valid update orders params
type UpdateOrdersHandler interface {
	Handle(UpdateOrdersParams) middleware.Responder
}

// NewUpdateOrders creates a new http.Handler for the update orders operation
func NewUpdateOrders(ctx *middleware.Context, handler UpdateOrdersHandler) *UpdateOrders {
	return &UpdateOrders{Context: ctx, Handler: handler}
}

/*
	UpdateOrders swagger:route PUT /orders/{ordersId} orders updateOrders

# Updates orders

All fields sent in this request will be set on the orders referenced
*/
type UpdateOrders struct {
	Context *middleware.Context
	Handler UpdateOrdersHandler
}

func (o *UpdateOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateOrdersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
