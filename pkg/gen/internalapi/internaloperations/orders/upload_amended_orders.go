// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UploadAmendedOrdersHandlerFunc turns a function with the right signature into a upload amended orders handler
type UploadAmendedOrdersHandlerFunc func(UploadAmendedOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadAmendedOrdersHandlerFunc) Handle(params UploadAmendedOrdersParams) middleware.Responder {
	return fn(params)
}

// UploadAmendedOrdersHandler interface for that can handle valid upload amended orders params
type UploadAmendedOrdersHandler interface {
	Handle(UploadAmendedOrdersParams) middleware.Responder
}

// NewUploadAmendedOrders creates a new http.Handler for the upload amended orders operation
func NewUploadAmendedOrders(ctx *middleware.Context, handler UploadAmendedOrdersHandler) *UploadAmendedOrders {
	return &UploadAmendedOrders{Context: ctx, Handler: handler}
}

/*
	UploadAmendedOrders swagger:route PATCH /orders/{ordersId}/upload_amended_orders orders uploadAmendedOrders

# Patch the amended orders for a given order

Patch the amended orders for a given order
*/
type UploadAmendedOrders struct {
	Context *middleware.Context
	Handler UploadAmendedOrdersHandler
}

func (o *UploadAmendedOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUploadAmendedOrdersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
