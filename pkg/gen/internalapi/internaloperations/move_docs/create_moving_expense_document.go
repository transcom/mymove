// Code generated by go-swagger; DO NOT EDIT.

package move_docs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateMovingExpenseDocumentHandlerFunc turns a function with the right signature into a create moving expense document handler
type CreateMovingExpenseDocumentHandlerFunc func(CreateMovingExpenseDocumentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateMovingExpenseDocumentHandlerFunc) Handle(params CreateMovingExpenseDocumentParams) middleware.Responder {
	return fn(params)
}

// CreateMovingExpenseDocumentHandler interface for that can handle valid create moving expense document params
type CreateMovingExpenseDocumentHandler interface {
	Handle(CreateMovingExpenseDocumentParams) middleware.Responder
}

// NewCreateMovingExpenseDocument creates a new http.Handler for the create moving expense document operation
func NewCreateMovingExpenseDocument(ctx *middleware.Context, handler CreateMovingExpenseDocumentHandler) *CreateMovingExpenseDocument {
	return &CreateMovingExpenseDocument{Context: ctx, Handler: handler}
}

/*CreateMovingExpenseDocument swagger:route POST /moves/{moveId}/moving_expense_documents move_docs createMovingExpenseDocument

Creates a moving expense document

Created a moving expense document with the given information

*/
type CreateMovingExpenseDocument struct {
	Context *middleware.Context
	Handler CreateMovingExpenseDocumentHandler
}

func (o *CreateMovingExpenseDocument) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateMovingExpenseDocumentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
