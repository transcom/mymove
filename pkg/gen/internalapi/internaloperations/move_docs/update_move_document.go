// Code generated by go-swagger; DO NOT EDIT.

package move_docs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateMoveDocumentHandlerFunc turns a function with the right signature into a update move document handler
type UpdateMoveDocumentHandlerFunc func(UpdateMoveDocumentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMoveDocumentHandlerFunc) Handle(params UpdateMoveDocumentParams) middleware.Responder {
	return fn(params)
}

// UpdateMoveDocumentHandler interface for that can handle valid update move document params
type UpdateMoveDocumentHandler interface {
	Handle(UpdateMoveDocumentParams) middleware.Responder
}

// NewUpdateMoveDocument creates a new http.Handler for the update move document operation
func NewUpdateMoveDocument(ctx *middleware.Context, handler UpdateMoveDocumentHandler) *UpdateMoveDocument {
	return &UpdateMoveDocument{Context: ctx, Handler: handler}
}

/*
	UpdateMoveDocument swagger:route PUT /move_documents/{moveDocumentId} move_docs updateMoveDocument

# Updates a move document

Update a move document with the given information
*/
type UpdateMoveDocument struct {
	Context *middleware.Context
	Handler UpdateMoveDocumentHandler
}

func (o *UpdateMoveDocument) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateMoveDocumentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
