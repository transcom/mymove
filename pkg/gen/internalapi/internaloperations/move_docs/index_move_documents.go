// Code generated by go-swagger; DO NOT EDIT.

package move_docs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IndexMoveDocumentsHandlerFunc turns a function with the right signature into a index move documents handler
type IndexMoveDocumentsHandlerFunc func(IndexMoveDocumentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IndexMoveDocumentsHandlerFunc) Handle(params IndexMoveDocumentsParams) middleware.Responder {
	return fn(params)
}

// IndexMoveDocumentsHandler interface for that can handle valid index move documents params
type IndexMoveDocumentsHandler interface {
	Handle(IndexMoveDocumentsParams) middleware.Responder
}

// NewIndexMoveDocuments creates a new http.Handler for the index move documents operation
func NewIndexMoveDocuments(ctx *middleware.Context, handler IndexMoveDocumentsHandler) *IndexMoveDocuments {
	return &IndexMoveDocuments{Context: ctx, Handler: handler}
}

/*
	IndexMoveDocuments swagger:route GET /moves/{moveId}/move_documents move_docs indexMoveDocuments

# Returns a list of all Move Documents associated with this move

Returns a list of all Move Documents associated with this move
*/
type IndexMoveDocuments struct {
	Context *middleware.Context
	Handler IndexMoveDocumentsHandler
}

func (o *IndexMoveDocuments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIndexMoveDocumentsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
