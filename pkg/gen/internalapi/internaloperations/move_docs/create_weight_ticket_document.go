// Code generated by go-swagger; DO NOT EDIT.

package move_docs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateWeightTicketDocumentHandlerFunc turns a function with the right signature into a create weight ticket document handler
type CreateWeightTicketDocumentHandlerFunc func(CreateWeightTicketDocumentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateWeightTicketDocumentHandlerFunc) Handle(params CreateWeightTicketDocumentParams) middleware.Responder {
	return fn(params)
}

// CreateWeightTicketDocumentHandler interface for that can handle valid create weight ticket document params
type CreateWeightTicketDocumentHandler interface {
	Handle(CreateWeightTicketDocumentParams) middleware.Responder
}

// NewCreateWeightTicketDocument creates a new http.Handler for the create weight ticket document operation
func NewCreateWeightTicketDocument(ctx *middleware.Context, handler CreateWeightTicketDocumentHandler) *CreateWeightTicketDocument {
	return &CreateWeightTicketDocument{Context: ctx, Handler: handler}
}

/*
	CreateWeightTicketDocument swagger:route POST /moves/{moveId}/weight_ticket move_docs createWeightTicketDocument

# Creates a weight ticket document

Created a weight ticket document with the given information
*/
type CreateWeightTicketDocument struct {
	Context *middleware.Context
	Handler CreateWeightTicketDocumentHandler
}

func (o *CreateWeightTicketDocument) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateWeightTicketDocumentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
