// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShowLoggedInUserHandlerFunc turns a function with the right signature into a show logged in user handler
type ShowLoggedInUserHandlerFunc func(ShowLoggedInUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShowLoggedInUserHandlerFunc) Handle(params ShowLoggedInUserParams) middleware.Responder {
	return fn(params)
}

// ShowLoggedInUserHandler interface for that can handle valid show logged in user params
type ShowLoggedInUserHandler interface {
	Handle(ShowLoggedInUserParams) middleware.Responder
}

// NewShowLoggedInUser creates a new http.Handler for the show logged in user operation
func NewShowLoggedInUser(ctx *middleware.Context, handler ShowLoggedInUserHandler) *ShowLoggedInUser {
	return &ShowLoggedInUser{Context: ctx, Handler: handler}
}

/*
	ShowLoggedInUser swagger:route GET /users/logged_in users showLoggedInUser

# Returns the user info for the currently logged in user

Returns the user info for the currently logged in user
*/
type ShowLoggedInUser struct {
	Context *middleware.Context
	Handler ShowLoggedInUserHandler
}

func (o *ShowLoggedInUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewShowLoggedInUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
