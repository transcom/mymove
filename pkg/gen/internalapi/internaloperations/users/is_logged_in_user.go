// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IsLoggedInUserHandlerFunc turns a function with the right signature into a is logged in user handler
type IsLoggedInUserHandlerFunc func(IsLoggedInUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IsLoggedInUserHandlerFunc) Handle(params IsLoggedInUserParams) middleware.Responder {
	return fn(params)
}

// IsLoggedInUserHandler interface for that can handle valid is logged in user params
type IsLoggedInUserHandler interface {
	Handle(IsLoggedInUserParams) middleware.Responder
}

// NewIsLoggedInUser creates a new http.Handler for the is logged in user operation
func NewIsLoggedInUser(ctx *middleware.Context, handler IsLoggedInUserHandler) *IsLoggedInUser {
	return &IsLoggedInUser{Context: ctx, Handler: handler}
}

/*
	IsLoggedInUser swagger:route GET /users/is_logged_in users isLoggedInUser

# Returns boolean as to whether the user is logged in

Returns boolean as to whether the user is logged in
*/
type IsLoggedInUser struct {
	Context *middleware.Context
	Handler IsLoggedInUserHandler
}

func (o *IsLoggedInUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIsLoggedInUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// IsLoggedInUserOKBody is logged in user o k body
//
// swagger:model IsLoggedInUserOKBody
type IsLoggedInUserOKBody struct {

	// is logged in
	// Required: true
	IsLoggedIn *bool `json:"isLoggedIn"`
}

// Validate validates this is logged in user o k body
func (o *IsLoggedInUserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIsLoggedIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IsLoggedInUserOKBody) validateIsLoggedIn(formats strfmt.Registry) error {

	if err := validate.Required("isLoggedInUserOK"+"."+"isLoggedIn", "body", o.IsLoggedIn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this is logged in user o k body based on context it is used
func (o *IsLoggedInUserOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *IsLoggedInUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IsLoggedInUserOKBody) UnmarshalBinary(b []byte) error {
	var res IsLoggedInUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
