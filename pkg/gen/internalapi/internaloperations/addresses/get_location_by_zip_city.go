// Code generated by go-swagger; DO NOT EDIT.

package addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetLocationByZipCityHandlerFunc turns a function with the right signature into a get location by zip city handler
type GetLocationByZipCityHandlerFunc func(GetLocationByZipCityParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLocationByZipCityHandlerFunc) Handle(params GetLocationByZipCityParams) middleware.Responder {
	return fn(params)
}

// GetLocationByZipCityHandler interface for that can handle valid get location by zip city params
type GetLocationByZipCityHandler interface {
	Handle(GetLocationByZipCityParams) middleware.Responder
}

// NewGetLocationByZipCity creates a new http.Handler for the get location by zip city operation
func NewGetLocationByZipCity(ctx *middleware.Context, handler GetLocationByZipCityHandler) *GetLocationByZipCity {
	return &GetLocationByZipCity{Context: ctx, Handler: handler}
}

/*
	GetLocationByZipCity swagger:route GET /addresses/zip_city_lookup/{search} addresses getLocationByZipCity

Returns City, State, Postal Code, and County associated with the specified full/partial Postal Code or City string

Find by API using full/partial Postal Code or City name that returns an us_post_region_cities json object containing city, state, county and postal code.
*/
type GetLocationByZipCity struct {
	Context *middleware.Context
	Handler GetLocationByZipCityHandler
}

func (o *GetLocationByZipCity) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetLocationByZipCityParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
