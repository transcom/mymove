// Code generated by go-swagger; DO NOT EDIT.

package addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SearchCountriesHandlerFunc turns a function with the right signature into a search countries handler
type SearchCountriesHandlerFunc func(SearchCountriesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchCountriesHandlerFunc) Handle(params SearchCountriesParams) middleware.Responder {
	return fn(params)
}

// SearchCountriesHandler interface for that can handle valid search countries params
type SearchCountriesHandler interface {
	Handle(SearchCountriesParams) middleware.Responder
}

// NewSearchCountries creates a new http.Handler for the search countries operation
func NewSearchCountries(ctx *middleware.Context, handler SearchCountriesHandler) *SearchCountries {
	return &SearchCountries{Context: ctx, Handler: handler}
}

/*
	SearchCountries swagger:route GET /addresses/countries addresses searchCountries

# Returns the countries matching the search query

Search API using search string that returns list of countries containing its code and name. Will return all if 'search' query string parameter is not available/empty. If 2 chars are provided search will do an exact match on country code and also do a starts with match on country name. If not 2 characters search will do a starts with match on country name.
*/
type SearchCountries struct {
	Context *middleware.Context
	Handler SearchCountriesHandler
}

func (o *SearchCountries) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSearchCountriesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
