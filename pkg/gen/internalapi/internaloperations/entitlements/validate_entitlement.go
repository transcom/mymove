// Code generated by go-swagger; DO NOT EDIT.

package entitlements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ValidateEntitlementHandlerFunc turns a function with the right signature into a validate entitlement handler
type ValidateEntitlementHandlerFunc func(ValidateEntitlementParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ValidateEntitlementHandlerFunc) Handle(params ValidateEntitlementParams) middleware.Responder {
	return fn(params)
}

// ValidateEntitlementHandler interface for that can handle valid validate entitlement params
type ValidateEntitlementHandler interface {
	Handle(ValidateEntitlementParams) middleware.Responder
}

// NewValidateEntitlement creates a new http.Handler for the validate entitlement operation
func NewValidateEntitlement(ctx *middleware.Context, handler ValidateEntitlementHandler) *ValidateEntitlement {
	return &ValidateEntitlement{Context: ctx, Handler: handler}
}

/*ValidateEntitlement swagger:route GET /entitlements/{moveId} entitlements validateEntitlement

Validates that the stored weight estimate is below the allotted entitlement range for a service member

Determine whether weight estimate is below entitlement

*/
type ValidateEntitlement struct {
	Context *middleware.Context
	Handler ValidateEntitlementHandler
}

func (o *ValidateEntitlement) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewValidateEntitlementParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
