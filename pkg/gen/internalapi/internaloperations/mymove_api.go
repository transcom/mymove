// Code generated by go-swagger; DO NOT EDIT.

package internaloperations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/addresses"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/application_parameters"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/backup_contacts"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/calendar"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/certification"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/documents"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/duty_locations"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/entitlements"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/feature_flags"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/move_docs"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/moves"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/mto_shipment"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/office"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/okta_profile"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/orders"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/postal_codes"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/ppm"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/queues"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/service_members"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/transportation_offices"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/uploads"
	"github.com/transcom/mymove/pkg/gen/internalapi/internaloperations/users"
)

// NewMymoveAPI creates a new Mymove instance
func NewMymoveAPI(spec *loads.Document) *MymoveAPI {
	return &MymoveAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),

		OfficeApproveMoveHandler: office.ApproveMoveHandlerFunc(func(params office.ApproveMoveParams) middleware.Responder {
			return middleware.NotImplemented("operation office.ApproveMove has not yet been implemented")
		}),
		OfficeApproveReimbursementHandler: office.ApproveReimbursementHandlerFunc(func(params office.ApproveReimbursementParams) middleware.Responder {
			return middleware.NotImplemented("operation office.ApproveReimbursement has not yet been implemented")
		}),
		FeatureFlagsBooleanFeatureFlagForUserHandler: feature_flags.BooleanFeatureFlagForUserHandlerFunc(func(params feature_flags.BooleanFeatureFlagForUserParams) middleware.Responder {
			return middleware.NotImplemented("operation feature_flags.BooleanFeatureFlagForUser has not yet been implemented")
		}),
		OfficeCancelMoveHandler: office.CancelMoveHandlerFunc(func(params office.CancelMoveParams) middleware.Responder {
			return middleware.NotImplemented("operation office.CancelMove has not yet been implemented")
		}),
		DocumentsCreateDocumentHandler: documents.CreateDocumentHandlerFunc(func(params documents.CreateDocumentParams) middleware.Responder {
			return middleware.NotImplemented("operation documents.CreateDocument has not yet been implemented")
		}),
		MoveDocsCreateGenericMoveDocumentHandler: move_docs.CreateGenericMoveDocumentHandlerFunc(func(params move_docs.CreateGenericMoveDocumentParams) middleware.Responder {
			return middleware.NotImplemented("operation move_docs.CreateGenericMoveDocument has not yet been implemented")
		}),
		MtoShipmentCreateMTOShipmentHandler: mto_shipment.CreateMTOShipmentHandlerFunc(func(params mto_shipment.CreateMTOShipmentParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_shipment.CreateMTOShipment has not yet been implemented")
		}),
		PpmCreateMovingExpenseHandler: ppm.CreateMovingExpenseHandlerFunc(func(params ppm.CreateMovingExpenseParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.CreateMovingExpense has not yet been implemented")
		}),
		OrdersCreateOrdersHandler: orders.CreateOrdersHandlerFunc(func(params orders.CreateOrdersParams) middleware.Responder {
			return middleware.NotImplemented("operation orders.CreateOrders has not yet been implemented")
		}),
		PpmCreatePPMUploadHandler: ppm.CreatePPMUploadHandlerFunc(func(params ppm.CreatePPMUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.CreatePPMUpload has not yet been implemented")
		}),
		PpmCreateProGearWeightTicketHandler: ppm.CreateProGearWeightTicketHandlerFunc(func(params ppm.CreateProGearWeightTicketParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.CreateProGearWeightTicket has not yet been implemented")
		}),
		ServiceMembersCreateServiceMemberHandler: service_members.CreateServiceMemberHandlerFunc(func(params service_members.CreateServiceMemberParams) middleware.Responder {
			return middleware.NotImplemented("operation service_members.CreateServiceMember has not yet been implemented")
		}),
		BackupContactsCreateServiceMemberBackupContactHandler: backup_contacts.CreateServiceMemberBackupContactHandlerFunc(func(params backup_contacts.CreateServiceMemberBackupContactParams) middleware.Responder {
			return middleware.NotImplemented("operation backup_contacts.CreateServiceMemberBackupContact has not yet been implemented")
		}),
		CertificationCreateSignedCertificationHandler: certification.CreateSignedCertificationHandlerFunc(func(params certification.CreateSignedCertificationParams) middleware.Responder {
			return middleware.NotImplemented("operation certification.CreateSignedCertification has not yet been implemented")
		}),
		UploadsCreateUploadHandler: uploads.CreateUploadHandlerFunc(func(params uploads.CreateUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation uploads.CreateUpload has not yet been implemented")
		}),
		PpmCreateWeightTicketHandler: ppm.CreateWeightTicketHandlerFunc(func(params ppm.CreateWeightTicketParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.CreateWeightTicket has not yet been implemented")
		}),
		MoveDocsCreateWeightTicketDocumentHandler: move_docs.CreateWeightTicketDocumentHandlerFunc(func(params move_docs.CreateWeightTicketDocumentParams) middleware.Responder {
			return middleware.NotImplemented("operation move_docs.CreateWeightTicketDocument has not yet been implemented")
		}),
		MoveDocsDeleteMoveDocumentHandler: move_docs.DeleteMoveDocumentHandlerFunc(func(params move_docs.DeleteMoveDocumentParams) middleware.Responder {
			return middleware.NotImplemented("operation move_docs.DeleteMoveDocument has not yet been implemented")
		}),
		PpmDeleteMovingExpenseHandler: ppm.DeleteMovingExpenseHandlerFunc(func(params ppm.DeleteMovingExpenseParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.DeleteMovingExpense has not yet been implemented")
		}),
		PpmDeleteProGearWeightTicketHandler: ppm.DeleteProGearWeightTicketHandlerFunc(func(params ppm.DeleteProGearWeightTicketParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.DeleteProGearWeightTicket has not yet been implemented")
		}),
		MtoShipmentDeleteShipmentHandler: mto_shipment.DeleteShipmentHandlerFunc(func(params mto_shipment.DeleteShipmentParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_shipment.DeleteShipment has not yet been implemented")
		}),
		UploadsDeleteUploadHandler: uploads.DeleteUploadHandlerFunc(func(params uploads.DeleteUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation uploads.DeleteUpload has not yet been implemented")
		}),
		UploadsDeleteUploadsHandler: uploads.DeleteUploadsHandlerFunc(func(params uploads.DeleteUploadsParams) middleware.Responder {
			return middleware.NotImplemented("operation uploads.DeleteUploads has not yet been implemented")
		}),
		PpmDeleteWeightTicketHandler: ppm.DeleteWeightTicketHandlerFunc(func(params ppm.DeleteWeightTicketParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.DeleteWeightTicket has not yet been implemented")
		}),
		MovesGetAllMovesHandler: moves.GetAllMovesHandlerFunc(func(params moves.GetAllMovesParams) middleware.Responder {
			return middleware.NotImplemented("operation moves.GetAllMoves has not yet been implemented")
		}),
		TransportationOfficesGetTransportationOfficesHandler: transportation_offices.GetTransportationOfficesHandlerFunc(func(params transportation_offices.GetTransportationOfficesParams) middleware.Responder {
			return middleware.NotImplemented("operation transportation_offices.GetTransportationOffices has not yet been implemented")
		}),
		EntitlementsIndexEntitlementsHandler: entitlements.IndexEntitlementsHandlerFunc(func(params entitlements.IndexEntitlementsParams) middleware.Responder {
			return middleware.NotImplemented("operation entitlements.IndexEntitlements has not yet been implemented")
		}),
		MoveDocsIndexMoveDocumentsHandler: move_docs.IndexMoveDocumentsHandlerFunc(func(params move_docs.IndexMoveDocumentsParams) middleware.Responder {
			return middleware.NotImplemented("operation move_docs.IndexMoveDocuments has not yet been implemented")
		}),
		BackupContactsIndexServiceMemberBackupContactsHandler: backup_contacts.IndexServiceMemberBackupContactsHandlerFunc(func(params backup_contacts.IndexServiceMemberBackupContactsParams) middleware.Responder {
			return middleware.NotImplemented("operation backup_contacts.IndexServiceMemberBackupContacts has not yet been implemented")
		}),
		CertificationIndexSignedCertificationHandler: certification.IndexSignedCertificationHandlerFunc(func(params certification.IndexSignedCertificationParams) middleware.Responder {
			return middleware.NotImplemented("operation certification.IndexSignedCertification has not yet been implemented")
		}),
		UsersIsLoggedInUserHandler: users.IsLoggedInUserHandlerFunc(func(params users.IsLoggedInUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.IsLoggedInUser has not yet been implemented")
		}),
		MtoShipmentListMTOShipmentsHandler: mto_shipment.ListMTOShipmentsHandlerFunc(func(params mto_shipment.ListMTOShipmentsParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_shipment.ListMTOShipments has not yet been implemented")
		}),
		MovesPatchMoveHandler: moves.PatchMoveHandlerFunc(func(params moves.PatchMoveParams) middleware.Responder {
			return middleware.NotImplemented("operation moves.PatchMove has not yet been implemented")
		}),
		ServiceMembersPatchServiceMemberHandler: service_members.PatchServiceMemberHandlerFunc(func(params service_members.PatchServiceMemberParams) middleware.Responder {
			return middleware.NotImplemented("operation service_members.PatchServiceMember has not yet been implemented")
		}),
		PpmResubmitPPMShipmentDocumentationHandler: ppm.ResubmitPPMShipmentDocumentationHandlerFunc(func(params ppm.ResubmitPPMShipmentDocumentationParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.ResubmitPPMShipmentDocumentation has not yet been implemented")
		}),
		DutyLocationsSearchDutyLocationsHandler: duty_locations.SearchDutyLocationsHandlerFunc(func(params duty_locations.SearchDutyLocationsParams) middleware.Responder {
			return middleware.NotImplemented("operation duty_locations.SearchDutyLocations has not yet been implemented")
		}),
		PpmShowAOAPacketHandler: ppm.ShowAOAPacketHandlerFunc(func(params ppm.ShowAOAPacketParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.ShowAOAPacket has not yet been implemented")
		}),
		AddressesShowAddressHandler: addresses.ShowAddressHandlerFunc(func(params addresses.ShowAddressParams) middleware.Responder {
			return middleware.NotImplemented("operation addresses.ShowAddress has not yet been implemented")
		}),
		CalendarShowAvailableMoveDatesHandler: calendar.ShowAvailableMoveDatesHandlerFunc(func(params calendar.ShowAvailableMoveDatesParams) middleware.Responder {
			return middleware.NotImplemented("operation calendar.ShowAvailableMoveDates has not yet been implemented")
		}),
		DocumentsShowDocumentHandler: documents.ShowDocumentHandlerFunc(func(params documents.ShowDocumentParams) middleware.Responder {
			return middleware.NotImplemented("operation documents.ShowDocument has not yet been implemented")
		}),
		TransportationOfficesShowDutyLocationTransportationOfficeHandler: transportation_offices.ShowDutyLocationTransportationOfficeHandlerFunc(func(params transportation_offices.ShowDutyLocationTransportationOfficeParams) middleware.Responder {
			return middleware.NotImplemented("operation transportation_offices.ShowDutyLocationTransportationOffice has not yet been implemented")
		}),
		UsersShowLoggedInUserHandler: users.ShowLoggedInUserHandlerFunc(func(params users.ShowLoggedInUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.ShowLoggedInUser has not yet been implemented")
		}),
		MovesShowMoveHandler: moves.ShowMoveHandlerFunc(func(params moves.ShowMoveParams) middleware.Responder {
			return middleware.NotImplemented("operation moves.ShowMove has not yet been implemented")
		}),
		OfficeShowOfficeOrdersHandler: office.ShowOfficeOrdersHandlerFunc(func(params office.ShowOfficeOrdersParams) middleware.Responder {
			return middleware.NotImplemented("operation office.ShowOfficeOrders has not yet been implemented")
		}),
		OktaProfileShowOktaInfoHandler: okta_profile.ShowOktaInfoHandlerFunc(func(params okta_profile.ShowOktaInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation okta_profile.ShowOktaInfo has not yet been implemented")
		}),
		OrdersShowOrdersHandler: orders.ShowOrdersHandlerFunc(func(params orders.ShowOrdersParams) middleware.Responder {
			return middleware.NotImplemented("operation orders.ShowOrders has not yet been implemented")
		}),
		PpmShowPaymentPacketHandler: ppm.ShowPaymentPacketHandlerFunc(func(params ppm.ShowPaymentPacketParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.ShowPaymentPacket has not yet been implemented")
		}),
		QueuesShowQueueHandler: queues.ShowQueueHandlerFunc(func(params queues.ShowQueueParams) middleware.Responder {
			return middleware.NotImplemented("operation queues.ShowQueue has not yet been implemented")
		}),
		ServiceMembersShowServiceMemberHandler: service_members.ShowServiceMemberHandlerFunc(func(params service_members.ShowServiceMemberParams) middleware.Responder {
			return middleware.NotImplemented("operation service_members.ShowServiceMember has not yet been implemented")
		}),
		BackupContactsShowServiceMemberBackupContactHandler: backup_contacts.ShowServiceMemberBackupContactHandlerFunc(func(params backup_contacts.ShowServiceMemberBackupContactParams) middleware.Responder {
			return middleware.NotImplemented("operation backup_contacts.ShowServiceMemberBackupContact has not yet been implemented")
		}),
		ServiceMembersShowServiceMemberOrdersHandler: service_members.ShowServiceMemberOrdersHandlerFunc(func(params service_members.ShowServiceMemberOrdersParams) middleware.Responder {
			return middleware.NotImplemented("operation service_members.ShowServiceMemberOrders has not yet been implemented")
		}),
		MovesSubmitAmendedOrdersHandler: moves.SubmitAmendedOrdersHandlerFunc(func(params moves.SubmitAmendedOrdersParams) middleware.Responder {
			return middleware.NotImplemented("operation moves.SubmitAmendedOrders has not yet been implemented")
		}),
		MovesSubmitMoveForApprovalHandler: moves.SubmitMoveForApprovalHandlerFunc(func(params moves.SubmitMoveForApprovalParams) middleware.Responder {
			return middleware.NotImplemented("operation moves.SubmitMoveForApproval has not yet been implemented")
		}),
		PpmSubmitPPMShipmentDocumentationHandler: ppm.SubmitPPMShipmentDocumentationHandlerFunc(func(params ppm.SubmitPPMShipmentDocumentationParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.SubmitPPMShipmentDocumentation has not yet been implemented")
		}),
		MtoShipmentUpdateMTOShipmentHandler: mto_shipment.UpdateMTOShipmentHandlerFunc(func(params mto_shipment.UpdateMTOShipmentParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_shipment.UpdateMTOShipment has not yet been implemented")
		}),
		MoveDocsUpdateMoveDocumentHandler: move_docs.UpdateMoveDocumentHandlerFunc(func(params move_docs.UpdateMoveDocumentParams) middleware.Responder {
			return middleware.NotImplemented("operation move_docs.UpdateMoveDocument has not yet been implemented")
		}),
		PpmUpdateMovingExpenseHandler: ppm.UpdateMovingExpenseHandlerFunc(func(params ppm.UpdateMovingExpenseParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.UpdateMovingExpense has not yet been implemented")
		}),
		OktaProfileUpdateOktaInfoHandler: okta_profile.UpdateOktaInfoHandlerFunc(func(params okta_profile.UpdateOktaInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation okta_profile.UpdateOktaInfo has not yet been implemented")
		}),
		OrdersUpdateOrdersHandler: orders.UpdateOrdersHandlerFunc(func(params orders.UpdateOrdersParams) middleware.Responder {
			return middleware.NotImplemented("operation orders.UpdateOrders has not yet been implemented")
		}),
		PpmUpdateProGearWeightTicketHandler: ppm.UpdateProGearWeightTicketHandlerFunc(func(params ppm.UpdateProGearWeightTicketParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.UpdateProGearWeightTicket has not yet been implemented")
		}),
		BackupContactsUpdateServiceMemberBackupContactHandler: backup_contacts.UpdateServiceMemberBackupContactHandlerFunc(func(params backup_contacts.UpdateServiceMemberBackupContactParams) middleware.Responder {
			return middleware.NotImplemented("operation backup_contacts.UpdateServiceMemberBackupContact has not yet been implemented")
		}),
		PpmUpdateWeightTicketHandler: ppm.UpdateWeightTicketHandlerFunc(func(params ppm.UpdateWeightTicketParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.UpdateWeightTicket has not yet been implemented")
		}),
		MovesUploadAdditionalDocumentsHandler: moves.UploadAdditionalDocumentsHandlerFunc(func(params moves.UploadAdditionalDocumentsParams) middleware.Responder {
			return middleware.NotImplemented("operation moves.UploadAdditionalDocuments has not yet been implemented")
		}),
		OrdersUploadAmendedOrdersHandler: orders.UploadAmendedOrdersHandlerFunc(func(params orders.UploadAmendedOrdersParams) middleware.Responder {
			return middleware.NotImplemented("operation orders.UploadAmendedOrders has not yet been implemented")
		}),
		ApplicationParametersValidateHandler: application_parameters.ValidateHandlerFunc(func(params application_parameters.ValidateParams) middleware.Responder {
			return middleware.NotImplemented("operation application_parameters.Validate has not yet been implemented")
		}),
		PostalCodesValidatePostalCodeWithRateDataHandler: postal_codes.ValidatePostalCodeWithRateDataHandlerFunc(func(params postal_codes.ValidatePostalCodeWithRateDataParams) middleware.Responder {
			return middleware.NotImplemented("operation postal_codes.ValidatePostalCodeWithRateData has not yet been implemented")
		}),
		FeatureFlagsVariantFeatureFlagForUserHandler: feature_flags.VariantFeatureFlagForUserHandlerFunc(func(params feature_flags.VariantFeatureFlagForUserParams) middleware.Responder {
			return middleware.NotImplemented("operation feature_flags.VariantFeatureFlagForUser has not yet been implemented")
		}),
	}
}

/*
MymoveAPI The Internal API is a RESTful API that enables the Customer application for
MilMove.

All endpoints are located under `/internal`.
*/
type MymoveAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	// BinProducer registers a producer for the following mime types:
	//   - application/pdf
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// OfficeApproveMoveHandler sets the operation handler for the approve move operation
	OfficeApproveMoveHandler office.ApproveMoveHandler
	// OfficeApproveReimbursementHandler sets the operation handler for the approve reimbursement operation
	OfficeApproveReimbursementHandler office.ApproveReimbursementHandler
	// FeatureFlagsBooleanFeatureFlagForUserHandler sets the operation handler for the boolean feature flag for user operation
	FeatureFlagsBooleanFeatureFlagForUserHandler feature_flags.BooleanFeatureFlagForUserHandler
	// OfficeCancelMoveHandler sets the operation handler for the cancel move operation
	OfficeCancelMoveHandler office.CancelMoveHandler
	// DocumentsCreateDocumentHandler sets the operation handler for the create document operation
	DocumentsCreateDocumentHandler documents.CreateDocumentHandler
	// MoveDocsCreateGenericMoveDocumentHandler sets the operation handler for the create generic move document operation
	MoveDocsCreateGenericMoveDocumentHandler move_docs.CreateGenericMoveDocumentHandler
	// MtoShipmentCreateMTOShipmentHandler sets the operation handler for the create m t o shipment operation
	MtoShipmentCreateMTOShipmentHandler mto_shipment.CreateMTOShipmentHandler
	// PpmCreateMovingExpenseHandler sets the operation handler for the create moving expense operation
	PpmCreateMovingExpenseHandler ppm.CreateMovingExpenseHandler
	// OrdersCreateOrdersHandler sets the operation handler for the create orders operation
	OrdersCreateOrdersHandler orders.CreateOrdersHandler
	// PpmCreatePPMUploadHandler sets the operation handler for the create p p m upload operation
	PpmCreatePPMUploadHandler ppm.CreatePPMUploadHandler
	// PpmCreateProGearWeightTicketHandler sets the operation handler for the create pro gear weight ticket operation
	PpmCreateProGearWeightTicketHandler ppm.CreateProGearWeightTicketHandler
	// ServiceMembersCreateServiceMemberHandler sets the operation handler for the create service member operation
	ServiceMembersCreateServiceMemberHandler service_members.CreateServiceMemberHandler
	// BackupContactsCreateServiceMemberBackupContactHandler sets the operation handler for the create service member backup contact operation
	BackupContactsCreateServiceMemberBackupContactHandler backup_contacts.CreateServiceMemberBackupContactHandler
	// CertificationCreateSignedCertificationHandler sets the operation handler for the create signed certification operation
	CertificationCreateSignedCertificationHandler certification.CreateSignedCertificationHandler
	// UploadsCreateUploadHandler sets the operation handler for the create upload operation
	UploadsCreateUploadHandler uploads.CreateUploadHandler
	// PpmCreateWeightTicketHandler sets the operation handler for the create weight ticket operation
	PpmCreateWeightTicketHandler ppm.CreateWeightTicketHandler
	// MoveDocsCreateWeightTicketDocumentHandler sets the operation handler for the create weight ticket document operation
	MoveDocsCreateWeightTicketDocumentHandler move_docs.CreateWeightTicketDocumentHandler
	// MoveDocsDeleteMoveDocumentHandler sets the operation handler for the delete move document operation
	MoveDocsDeleteMoveDocumentHandler move_docs.DeleteMoveDocumentHandler
	// PpmDeleteMovingExpenseHandler sets the operation handler for the delete moving expense operation
	PpmDeleteMovingExpenseHandler ppm.DeleteMovingExpenseHandler
	// PpmDeleteProGearWeightTicketHandler sets the operation handler for the delete pro gear weight ticket operation
	PpmDeleteProGearWeightTicketHandler ppm.DeleteProGearWeightTicketHandler
	// MtoShipmentDeleteShipmentHandler sets the operation handler for the delete shipment operation
	MtoShipmentDeleteShipmentHandler mto_shipment.DeleteShipmentHandler
	// UploadsDeleteUploadHandler sets the operation handler for the delete upload operation
	UploadsDeleteUploadHandler uploads.DeleteUploadHandler
	// UploadsDeleteUploadsHandler sets the operation handler for the delete uploads operation
	UploadsDeleteUploadsHandler uploads.DeleteUploadsHandler
	// PpmDeleteWeightTicketHandler sets the operation handler for the delete weight ticket operation
	PpmDeleteWeightTicketHandler ppm.DeleteWeightTicketHandler
	// MovesGetAllMovesHandler sets the operation handler for the get all moves operation
	MovesGetAllMovesHandler moves.GetAllMovesHandler
	// TransportationOfficesGetTransportationOfficesHandler sets the operation handler for the get transportation offices operation
	TransportationOfficesGetTransportationOfficesHandler transportation_offices.GetTransportationOfficesHandler
	// EntitlementsIndexEntitlementsHandler sets the operation handler for the index entitlements operation
	EntitlementsIndexEntitlementsHandler entitlements.IndexEntitlementsHandler
	// MoveDocsIndexMoveDocumentsHandler sets the operation handler for the index move documents operation
	MoveDocsIndexMoveDocumentsHandler move_docs.IndexMoveDocumentsHandler
	// BackupContactsIndexServiceMemberBackupContactsHandler sets the operation handler for the index service member backup contacts operation
	BackupContactsIndexServiceMemberBackupContactsHandler backup_contacts.IndexServiceMemberBackupContactsHandler
	// CertificationIndexSignedCertificationHandler sets the operation handler for the index signed certification operation
	CertificationIndexSignedCertificationHandler certification.IndexSignedCertificationHandler
	// UsersIsLoggedInUserHandler sets the operation handler for the is logged in user operation
	UsersIsLoggedInUserHandler users.IsLoggedInUserHandler
	// MtoShipmentListMTOShipmentsHandler sets the operation handler for the list m t o shipments operation
	MtoShipmentListMTOShipmentsHandler mto_shipment.ListMTOShipmentsHandler
	// MovesPatchMoveHandler sets the operation handler for the patch move operation
	MovesPatchMoveHandler moves.PatchMoveHandler
	// ServiceMembersPatchServiceMemberHandler sets the operation handler for the patch service member operation
	ServiceMembersPatchServiceMemberHandler service_members.PatchServiceMemberHandler
	// PpmResubmitPPMShipmentDocumentationHandler sets the operation handler for the resubmit p p m shipment documentation operation
	PpmResubmitPPMShipmentDocumentationHandler ppm.ResubmitPPMShipmentDocumentationHandler
	// DutyLocationsSearchDutyLocationsHandler sets the operation handler for the search duty locations operation
	DutyLocationsSearchDutyLocationsHandler duty_locations.SearchDutyLocationsHandler
	// PpmShowAOAPacketHandler sets the operation handler for the show a o a packet operation
	PpmShowAOAPacketHandler ppm.ShowAOAPacketHandler
	// AddressesShowAddressHandler sets the operation handler for the show address operation
	AddressesShowAddressHandler addresses.ShowAddressHandler
	// CalendarShowAvailableMoveDatesHandler sets the operation handler for the show available move dates operation
	CalendarShowAvailableMoveDatesHandler calendar.ShowAvailableMoveDatesHandler
	// DocumentsShowDocumentHandler sets the operation handler for the show document operation
	DocumentsShowDocumentHandler documents.ShowDocumentHandler
	// TransportationOfficesShowDutyLocationTransportationOfficeHandler sets the operation handler for the show duty location transportation office operation
	TransportationOfficesShowDutyLocationTransportationOfficeHandler transportation_offices.ShowDutyLocationTransportationOfficeHandler
	// UsersShowLoggedInUserHandler sets the operation handler for the show logged in user operation
	UsersShowLoggedInUserHandler users.ShowLoggedInUserHandler
	// MovesShowMoveHandler sets the operation handler for the show move operation
	MovesShowMoveHandler moves.ShowMoveHandler
	// OfficeShowOfficeOrdersHandler sets the operation handler for the show office orders operation
	OfficeShowOfficeOrdersHandler office.ShowOfficeOrdersHandler
	// OktaProfileShowOktaInfoHandler sets the operation handler for the show okta info operation
	OktaProfileShowOktaInfoHandler okta_profile.ShowOktaInfoHandler
	// OrdersShowOrdersHandler sets the operation handler for the show orders operation
	OrdersShowOrdersHandler orders.ShowOrdersHandler
	// PpmShowPaymentPacketHandler sets the operation handler for the show payment packet operation
	PpmShowPaymentPacketHandler ppm.ShowPaymentPacketHandler
	// QueuesShowQueueHandler sets the operation handler for the show queue operation
	QueuesShowQueueHandler queues.ShowQueueHandler
	// ServiceMembersShowServiceMemberHandler sets the operation handler for the show service member operation
	ServiceMembersShowServiceMemberHandler service_members.ShowServiceMemberHandler
	// BackupContactsShowServiceMemberBackupContactHandler sets the operation handler for the show service member backup contact operation
	BackupContactsShowServiceMemberBackupContactHandler backup_contacts.ShowServiceMemberBackupContactHandler
	// ServiceMembersShowServiceMemberOrdersHandler sets the operation handler for the show service member orders operation
	ServiceMembersShowServiceMemberOrdersHandler service_members.ShowServiceMemberOrdersHandler
	// MovesSubmitAmendedOrdersHandler sets the operation handler for the submit amended orders operation
	MovesSubmitAmendedOrdersHandler moves.SubmitAmendedOrdersHandler
	// MovesSubmitMoveForApprovalHandler sets the operation handler for the submit move for approval operation
	MovesSubmitMoveForApprovalHandler moves.SubmitMoveForApprovalHandler
	// PpmSubmitPPMShipmentDocumentationHandler sets the operation handler for the submit p p m shipment documentation operation
	PpmSubmitPPMShipmentDocumentationHandler ppm.SubmitPPMShipmentDocumentationHandler
	// MtoShipmentUpdateMTOShipmentHandler sets the operation handler for the update m t o shipment operation
	MtoShipmentUpdateMTOShipmentHandler mto_shipment.UpdateMTOShipmentHandler
	// MoveDocsUpdateMoveDocumentHandler sets the operation handler for the update move document operation
	MoveDocsUpdateMoveDocumentHandler move_docs.UpdateMoveDocumentHandler
	// PpmUpdateMovingExpenseHandler sets the operation handler for the update moving expense operation
	PpmUpdateMovingExpenseHandler ppm.UpdateMovingExpenseHandler
	// OktaProfileUpdateOktaInfoHandler sets the operation handler for the update okta info operation
	OktaProfileUpdateOktaInfoHandler okta_profile.UpdateOktaInfoHandler
	// OrdersUpdateOrdersHandler sets the operation handler for the update orders operation
	OrdersUpdateOrdersHandler orders.UpdateOrdersHandler
	// PpmUpdateProGearWeightTicketHandler sets the operation handler for the update pro gear weight ticket operation
	PpmUpdateProGearWeightTicketHandler ppm.UpdateProGearWeightTicketHandler
	// BackupContactsUpdateServiceMemberBackupContactHandler sets the operation handler for the update service member backup contact operation
	BackupContactsUpdateServiceMemberBackupContactHandler backup_contacts.UpdateServiceMemberBackupContactHandler
	// PpmUpdateWeightTicketHandler sets the operation handler for the update weight ticket operation
	PpmUpdateWeightTicketHandler ppm.UpdateWeightTicketHandler
	// MovesUploadAdditionalDocumentsHandler sets the operation handler for the upload additional documents operation
	MovesUploadAdditionalDocumentsHandler moves.UploadAdditionalDocumentsHandler
	// OrdersUploadAmendedOrdersHandler sets the operation handler for the upload amended orders operation
	OrdersUploadAmendedOrdersHandler orders.UploadAmendedOrdersHandler
	// ApplicationParametersValidateHandler sets the operation handler for the validate operation
	ApplicationParametersValidateHandler application_parameters.ValidateHandler
	// PostalCodesValidatePostalCodeWithRateDataHandler sets the operation handler for the validate postal code with rate data operation
	PostalCodesValidatePostalCodeWithRateDataHandler postal_codes.ValidatePostalCodeWithRateDataHandler
	// FeatureFlagsVariantFeatureFlagForUserHandler sets the operation handler for the variant feature flag for user operation
	FeatureFlagsVariantFeatureFlagForUserHandler feature_flags.VariantFeatureFlagForUserHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *MymoveAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *MymoveAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *MymoveAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *MymoveAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *MymoveAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *MymoveAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *MymoveAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *MymoveAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *MymoveAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the MymoveAPI
func (o *MymoveAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.OfficeApproveMoveHandler == nil {
		unregistered = append(unregistered, "office.ApproveMoveHandler")
	}
	if o.OfficeApproveReimbursementHandler == nil {
		unregistered = append(unregistered, "office.ApproveReimbursementHandler")
	}
	if o.FeatureFlagsBooleanFeatureFlagForUserHandler == nil {
		unregistered = append(unregistered, "feature_flags.BooleanFeatureFlagForUserHandler")
	}
	if o.OfficeCancelMoveHandler == nil {
		unregistered = append(unregistered, "office.CancelMoveHandler")
	}
	if o.DocumentsCreateDocumentHandler == nil {
		unregistered = append(unregistered, "documents.CreateDocumentHandler")
	}
	if o.MoveDocsCreateGenericMoveDocumentHandler == nil {
		unregistered = append(unregistered, "move_docs.CreateGenericMoveDocumentHandler")
	}
	if o.MtoShipmentCreateMTOShipmentHandler == nil {
		unregistered = append(unregistered, "mto_shipment.CreateMTOShipmentHandler")
	}
	if o.PpmCreateMovingExpenseHandler == nil {
		unregistered = append(unregistered, "ppm.CreateMovingExpenseHandler")
	}
	if o.OrdersCreateOrdersHandler == nil {
		unregistered = append(unregistered, "orders.CreateOrdersHandler")
	}
	if o.PpmCreatePPMUploadHandler == nil {
		unregistered = append(unregistered, "ppm.CreatePPMUploadHandler")
	}
	if o.PpmCreateProGearWeightTicketHandler == nil {
		unregistered = append(unregistered, "ppm.CreateProGearWeightTicketHandler")
	}
	if o.ServiceMembersCreateServiceMemberHandler == nil {
		unregistered = append(unregistered, "service_members.CreateServiceMemberHandler")
	}
	if o.BackupContactsCreateServiceMemberBackupContactHandler == nil {
		unregistered = append(unregistered, "backup_contacts.CreateServiceMemberBackupContactHandler")
	}
	if o.CertificationCreateSignedCertificationHandler == nil {
		unregistered = append(unregistered, "certification.CreateSignedCertificationHandler")
	}
	if o.UploadsCreateUploadHandler == nil {
		unregistered = append(unregistered, "uploads.CreateUploadHandler")
	}
	if o.PpmCreateWeightTicketHandler == nil {
		unregistered = append(unregistered, "ppm.CreateWeightTicketHandler")
	}
	if o.MoveDocsCreateWeightTicketDocumentHandler == nil {
		unregistered = append(unregistered, "move_docs.CreateWeightTicketDocumentHandler")
	}
	if o.MoveDocsDeleteMoveDocumentHandler == nil {
		unregistered = append(unregistered, "move_docs.DeleteMoveDocumentHandler")
	}
	if o.PpmDeleteMovingExpenseHandler == nil {
		unregistered = append(unregistered, "ppm.DeleteMovingExpenseHandler")
	}
	if o.PpmDeleteProGearWeightTicketHandler == nil {
		unregistered = append(unregistered, "ppm.DeleteProGearWeightTicketHandler")
	}
	if o.MtoShipmentDeleteShipmentHandler == nil {
		unregistered = append(unregistered, "mto_shipment.DeleteShipmentHandler")
	}
	if o.UploadsDeleteUploadHandler == nil {
		unregistered = append(unregistered, "uploads.DeleteUploadHandler")
	}
	if o.UploadsDeleteUploadsHandler == nil {
		unregistered = append(unregistered, "uploads.DeleteUploadsHandler")
	}
	if o.PpmDeleteWeightTicketHandler == nil {
		unregistered = append(unregistered, "ppm.DeleteWeightTicketHandler")
	}
	if o.MovesGetAllMovesHandler == nil {
		unregistered = append(unregistered, "moves.GetAllMovesHandler")
	}
	if o.TransportationOfficesGetTransportationOfficesHandler == nil {
		unregistered = append(unregistered, "transportation_offices.GetTransportationOfficesHandler")
	}
	if o.EntitlementsIndexEntitlementsHandler == nil {
		unregistered = append(unregistered, "entitlements.IndexEntitlementsHandler")
	}
	if o.MoveDocsIndexMoveDocumentsHandler == nil {
		unregistered = append(unregistered, "move_docs.IndexMoveDocumentsHandler")
	}
	if o.BackupContactsIndexServiceMemberBackupContactsHandler == nil {
		unregistered = append(unregistered, "backup_contacts.IndexServiceMemberBackupContactsHandler")
	}
	if o.CertificationIndexSignedCertificationHandler == nil {
		unregistered = append(unregistered, "certification.IndexSignedCertificationHandler")
	}
	if o.UsersIsLoggedInUserHandler == nil {
		unregistered = append(unregistered, "users.IsLoggedInUserHandler")
	}
	if o.MtoShipmentListMTOShipmentsHandler == nil {
		unregistered = append(unregistered, "mto_shipment.ListMTOShipmentsHandler")
	}
	if o.MovesPatchMoveHandler == nil {
		unregistered = append(unregistered, "moves.PatchMoveHandler")
	}
	if o.ServiceMembersPatchServiceMemberHandler == nil {
		unregistered = append(unregistered, "service_members.PatchServiceMemberHandler")
	}
	if o.PpmResubmitPPMShipmentDocumentationHandler == nil {
		unregistered = append(unregistered, "ppm.ResubmitPPMShipmentDocumentationHandler")
	}
	if o.DutyLocationsSearchDutyLocationsHandler == nil {
		unregistered = append(unregistered, "duty_locations.SearchDutyLocationsHandler")
	}
	if o.PpmShowAOAPacketHandler == nil {
		unregistered = append(unregistered, "ppm.ShowAOAPacketHandler")
	}
	if o.AddressesShowAddressHandler == nil {
		unregistered = append(unregistered, "addresses.ShowAddressHandler")
	}
	if o.CalendarShowAvailableMoveDatesHandler == nil {
		unregistered = append(unregistered, "calendar.ShowAvailableMoveDatesHandler")
	}
	if o.DocumentsShowDocumentHandler == nil {
		unregistered = append(unregistered, "documents.ShowDocumentHandler")
	}
	if o.TransportationOfficesShowDutyLocationTransportationOfficeHandler == nil {
		unregistered = append(unregistered, "transportation_offices.ShowDutyLocationTransportationOfficeHandler")
	}
	if o.UsersShowLoggedInUserHandler == nil {
		unregistered = append(unregistered, "users.ShowLoggedInUserHandler")
	}
	if o.MovesShowMoveHandler == nil {
		unregistered = append(unregistered, "moves.ShowMoveHandler")
	}
	if o.OfficeShowOfficeOrdersHandler == nil {
		unregistered = append(unregistered, "office.ShowOfficeOrdersHandler")
	}
	if o.OktaProfileShowOktaInfoHandler == nil {
		unregistered = append(unregistered, "okta_profile.ShowOktaInfoHandler")
	}
	if o.OrdersShowOrdersHandler == nil {
		unregistered = append(unregistered, "orders.ShowOrdersHandler")
	}
	if o.PpmShowPaymentPacketHandler == nil {
		unregistered = append(unregistered, "ppm.ShowPaymentPacketHandler")
	}
	if o.QueuesShowQueueHandler == nil {
		unregistered = append(unregistered, "queues.ShowQueueHandler")
	}
	if o.ServiceMembersShowServiceMemberHandler == nil {
		unregistered = append(unregistered, "service_members.ShowServiceMemberHandler")
	}
	if o.BackupContactsShowServiceMemberBackupContactHandler == nil {
		unregistered = append(unregistered, "backup_contacts.ShowServiceMemberBackupContactHandler")
	}
	if o.ServiceMembersShowServiceMemberOrdersHandler == nil {
		unregistered = append(unregistered, "service_members.ShowServiceMemberOrdersHandler")
	}
	if o.MovesSubmitAmendedOrdersHandler == nil {
		unregistered = append(unregistered, "moves.SubmitAmendedOrdersHandler")
	}
	if o.MovesSubmitMoveForApprovalHandler == nil {
		unregistered = append(unregistered, "moves.SubmitMoveForApprovalHandler")
	}
	if o.PpmSubmitPPMShipmentDocumentationHandler == nil {
		unregistered = append(unregistered, "ppm.SubmitPPMShipmentDocumentationHandler")
	}
	if o.MtoShipmentUpdateMTOShipmentHandler == nil {
		unregistered = append(unregistered, "mto_shipment.UpdateMTOShipmentHandler")
	}
	if o.MoveDocsUpdateMoveDocumentHandler == nil {
		unregistered = append(unregistered, "move_docs.UpdateMoveDocumentHandler")
	}
	if o.PpmUpdateMovingExpenseHandler == nil {
		unregistered = append(unregistered, "ppm.UpdateMovingExpenseHandler")
	}
	if o.OktaProfileUpdateOktaInfoHandler == nil {
		unregistered = append(unregistered, "okta_profile.UpdateOktaInfoHandler")
	}
	if o.OrdersUpdateOrdersHandler == nil {
		unregistered = append(unregistered, "orders.UpdateOrdersHandler")
	}
	if o.PpmUpdateProGearWeightTicketHandler == nil {
		unregistered = append(unregistered, "ppm.UpdateProGearWeightTicketHandler")
	}
	if o.BackupContactsUpdateServiceMemberBackupContactHandler == nil {
		unregistered = append(unregistered, "backup_contacts.UpdateServiceMemberBackupContactHandler")
	}
	if o.PpmUpdateWeightTicketHandler == nil {
		unregistered = append(unregistered, "ppm.UpdateWeightTicketHandler")
	}
	if o.MovesUploadAdditionalDocumentsHandler == nil {
		unregistered = append(unregistered, "moves.UploadAdditionalDocumentsHandler")
	}
	if o.OrdersUploadAmendedOrdersHandler == nil {
		unregistered = append(unregistered, "orders.UploadAmendedOrdersHandler")
	}
	if o.ApplicationParametersValidateHandler == nil {
		unregistered = append(unregistered, "application_parameters.ValidateHandler")
	}
	if o.PostalCodesValidatePostalCodeWithRateDataHandler == nil {
		unregistered = append(unregistered, "postal_codes.ValidatePostalCodeWithRateDataHandler")
	}
	if o.FeatureFlagsVariantFeatureFlagForUserHandler == nil {
		unregistered = append(unregistered, "feature_flags.VariantFeatureFlagForUserHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *MymoveAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *MymoveAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *MymoveAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *MymoveAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *MymoveAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/pdf":
			result["application/pdf"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *MymoveAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the mymove API
func (o *MymoveAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *MymoveAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/moves/{moveId}/approve"] = office.NewApproveMove(o.context, o.OfficeApproveMoveHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/reimbursement/{reimbursementId}/approve"] = office.NewApproveReimbursement(o.context, o.OfficeApproveReimbursementHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/feature-flags/user-boolean/{key}"] = feature_flags.NewBooleanFeatureFlagForUser(o.context, o.FeatureFlagsBooleanFeatureFlagForUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/moves/{moveId}/cancel"] = office.NewCancelMove(o.context, o.OfficeCancelMoveHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/documents"] = documents.NewCreateDocument(o.context, o.DocumentsCreateDocumentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/moves/{moveId}/move_documents"] = move_docs.NewCreateGenericMoveDocument(o.context, o.MoveDocsCreateGenericMoveDocumentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mto_shipments"] = mto_shipment.NewCreateMTOShipment(o.context, o.MtoShipmentCreateMTOShipmentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ppm-shipments/{ppmShipmentId}/moving-expenses"] = ppm.NewCreateMovingExpense(o.context, o.PpmCreateMovingExpenseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orders"] = orders.NewCreateOrders(o.context, o.OrdersCreateOrdersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ppm-shipments/{ppmShipmentId}/uploads"] = ppm.NewCreatePPMUpload(o.context, o.PpmCreatePPMUploadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets"] = ppm.NewCreateProGearWeightTicket(o.context, o.PpmCreateProGearWeightTicketHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service_members"] = service_members.NewCreateServiceMember(o.context, o.ServiceMembersCreateServiceMemberHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service_members/{serviceMemberId}/backup_contacts"] = backup_contacts.NewCreateServiceMemberBackupContact(o.context, o.BackupContactsCreateServiceMemberBackupContactHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/moves/{moveId}/signed_certifications"] = certification.NewCreateSignedCertification(o.context, o.CertificationCreateSignedCertificationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/uploads"] = uploads.NewCreateUpload(o.context, o.UploadsCreateUploadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ppm-shipments/{ppmShipmentId}/weight-ticket"] = ppm.NewCreateWeightTicket(o.context, o.PpmCreateWeightTicketHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/moves/{moveId}/weight_ticket"] = move_docs.NewCreateWeightTicketDocument(o.context, o.MoveDocsCreateWeightTicketDocumentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/move_documents/{moveDocumentId}"] = move_docs.NewDeleteMoveDocument(o.context, o.MoveDocsDeleteMoveDocumentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/ppm-shipments/{ppmShipmentId}/moving-expenses/{movingExpenseId}"] = ppm.NewDeleteMovingExpense(o.context, o.PpmDeleteMovingExpenseHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets/{proGearWeightTicketId}"] = ppm.NewDeleteProGearWeightTicket(o.context, o.PpmDeleteProGearWeightTicketHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mto-shipments/{mtoShipmentId}"] = mto_shipment.NewDeleteShipment(o.context, o.MtoShipmentDeleteShipmentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/uploads/{uploadId}"] = uploads.NewDeleteUpload(o.context, o.UploadsDeleteUploadHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/uploads"] = uploads.NewDeleteUploads(o.context, o.UploadsDeleteUploadsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/ppm-shipments/{ppmShipmentId}/weight-ticket/{weightTicketId}"] = ppm.NewDeleteWeightTicket(o.context, o.PpmDeleteWeightTicketHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/allmoves/{serviceMemberId}"] = moves.NewGetAllMoves(o.context, o.MovesGetAllMovesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/transportation-offices"] = transportation_offices.NewGetTransportationOffices(o.context, o.TransportationOfficesGetTransportationOfficesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entitlements"] = entitlements.NewIndexEntitlements(o.context, o.EntitlementsIndexEntitlementsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/moves/{moveId}/move_documents"] = move_docs.NewIndexMoveDocuments(o.context, o.MoveDocsIndexMoveDocumentsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_members/{serviceMemberId}/backup_contacts"] = backup_contacts.NewIndexServiceMemberBackupContacts(o.context, o.BackupContactsIndexServiceMemberBackupContactsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/moves/{moveId}/signed_certifications"] = certification.NewIndexSignedCertification(o.context, o.CertificationIndexSignedCertificationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/is_logged_in"] = users.NewIsLoggedInUser(o.context, o.UsersIsLoggedInUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/moves/{moveTaskOrderID}/mto_shipments"] = mto_shipment.NewListMTOShipments(o.context, o.MtoShipmentListMTOShipmentsHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/moves/{moveId}"] = moves.NewPatchMove(o.context, o.MovesPatchMoveHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/service_members/{serviceMemberId}"] = service_members.NewPatchServiceMember(o.context, o.ServiceMembersPatchServiceMemberHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/ppm-shipments/{ppmShipmentId}/resubmit-ppm-shipment-documentation/{signedCertificationId}"] = ppm.NewResubmitPPMShipmentDocumentation(o.context, o.PpmResubmitPPMShipmentDocumentationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/duty_locations"] = duty_locations.NewSearchDutyLocations(o.context, o.DutyLocationsSearchDutyLocationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ppm-shipments/{ppmShipmentId}/aoa-packet"] = ppm.NewShowAOAPacket(o.context, o.PpmShowAOAPacketHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/addresses/{addressId}"] = addresses.NewShowAddress(o.context, o.AddressesShowAddressHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/calendar/available_move_dates"] = calendar.NewShowAvailableMoveDates(o.context, o.CalendarShowAvailableMoveDatesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/documents/{documentId}"] = documents.NewShowDocument(o.context, o.DocumentsShowDocumentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/duty_locations/{dutyLocationId}/transportation_office"] = transportation_offices.NewShowDutyLocationTransportationOffice(o.context, o.TransportationOfficesShowDutyLocationTransportationOfficeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/logged_in"] = users.NewShowLoggedInUser(o.context, o.UsersShowLoggedInUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/moves/{moveId}"] = moves.NewShowMove(o.context, o.MovesShowMoveHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/moves/{moveId}/orders"] = office.NewShowOfficeOrders(o.context, o.OfficeShowOfficeOrdersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/okta-profile"] = okta_profile.NewShowOktaInfo(o.context, o.OktaProfileShowOktaInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orders/{ordersId}"] = orders.NewShowOrders(o.context, o.OrdersShowOrdersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ppm-shipments/{ppmShipmentId}/payment-packet"] = ppm.NewShowPaymentPacket(o.context, o.PpmShowPaymentPacketHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/queues/{queueType}"] = queues.NewShowQueue(o.context, o.QueuesShowQueueHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_members/{serviceMemberId}"] = service_members.NewShowServiceMember(o.context, o.ServiceMembersShowServiceMemberHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/backup_contacts/{backupContactId}"] = backup_contacts.NewShowServiceMemberBackupContact(o.context, o.BackupContactsShowServiceMemberBackupContactHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_members/{serviceMemberId}/current_orders"] = service_members.NewShowServiceMemberOrders(o.context, o.ServiceMembersShowServiceMemberOrdersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/moves/{moveId}/submit_amended_orders"] = moves.NewSubmitAmendedOrders(o.context, o.MovesSubmitAmendedOrdersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/moves/{moveId}/submit"] = moves.NewSubmitMoveForApproval(o.context, o.MovesSubmitMoveForApprovalHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ppm-shipments/{ppmShipmentId}/submit-ppm-shipment-documentation"] = ppm.NewSubmitPPMShipmentDocumentation(o.context, o.PpmSubmitPPMShipmentDocumentationHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/mto-shipments/{mtoShipmentId}"] = mto_shipment.NewUpdateMTOShipment(o.context, o.MtoShipmentUpdateMTOShipmentHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/move_documents/{moveDocumentId}"] = move_docs.NewUpdateMoveDocument(o.context, o.MoveDocsUpdateMoveDocumentHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/ppm-shipments/{ppmShipmentId}/moving-expenses/{movingExpenseId}"] = ppm.NewUpdateMovingExpense(o.context, o.PpmUpdateMovingExpenseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/okta-profile"] = okta_profile.NewUpdateOktaInfo(o.context, o.OktaProfileUpdateOktaInfoHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/orders/{ordersId}"] = orders.NewUpdateOrders(o.context, o.OrdersUpdateOrdersHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets/{proGearWeightTicketId}"] = ppm.NewUpdateProGearWeightTicket(o.context, o.PpmUpdateProGearWeightTicketHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/backup_contacts/{backupContactId}"] = backup_contacts.NewUpdateServiceMemberBackupContact(o.context, o.BackupContactsUpdateServiceMemberBackupContactHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/ppm-shipments/{ppmShipmentId}/weight-ticket/{weightTicketId}"] = ppm.NewUpdateWeightTicket(o.context, o.PpmUpdateWeightTicketHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/moves/{moveId}/uploadAdditionalDocuments"] = moves.NewUploadAdditionalDocuments(o.context, o.MovesUploadAdditionalDocumentsHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/orders/{ordersId}/upload_amended_orders"] = orders.NewUploadAmendedOrders(o.context, o.OrdersUploadAmendedOrdersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/application_parameters"] = application_parameters.NewValidate(o.context, o.ApplicationParametersValidateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rate_engine_postal_codes/{postal_code}"] = postal_codes.NewValidatePostalCodeWithRateData(o.context, o.PostalCodesValidatePostalCodeWithRateDataHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/feature-flags/user-variant/{key}"] = feature_flags.NewVariantFeatureFlagForUser(o.context, o.FeatureFlagsVariantFeatureFlagForUserHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *MymoveAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *MymoveAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *MymoveAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *MymoveAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *MymoveAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
