// Code generated by go-swagger; DO NOT EDIT.

package application_parameters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ValidateHandlerFunc turns a function with the right signature into a validate handler
type ValidateHandlerFunc func(ValidateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ValidateHandlerFunc) Handle(params ValidateParams) middleware.Responder {
	return fn(params)
}

// ValidateHandler interface for that can handle valid validate params
type ValidateHandler interface {
	Handle(ValidateParams) middleware.Responder
}

// NewValidate creates a new http.Handler for the validate operation
func NewValidate(ctx *middleware.Context, handler ValidateHandler) *Validate {
	return &Validate{Context: ctx, Handler: handler}
}

/*
	Validate swagger:route POST /application_parameters application_parameters validate

# Searches for an application parameter by name and value, returns nil if not found

Searches for an application parameter by name and value, returns nil if not found
*/
type Validate struct {
	Context *middleware.Context
	Handler ValidateHandler
}

func (o *Validate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewValidateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
