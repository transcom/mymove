// Code generated by go-swagger; DO NOT EDIT.

package postal_codes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ValidatePostalCodeWithRateDataHandlerFunc turns a function with the right signature into a validate postal code with rate data handler
type ValidatePostalCodeWithRateDataHandlerFunc func(ValidatePostalCodeWithRateDataParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ValidatePostalCodeWithRateDataHandlerFunc) Handle(params ValidatePostalCodeWithRateDataParams) middleware.Responder {
	return fn(params)
}

// ValidatePostalCodeWithRateDataHandler interface for that can handle valid validate postal code with rate data params
type ValidatePostalCodeWithRateDataHandler interface {
	Handle(ValidatePostalCodeWithRateDataParams) middleware.Responder
}

// NewValidatePostalCodeWithRateData creates a new http.Handler for the validate postal code with rate data operation
func NewValidatePostalCodeWithRateData(ctx *middleware.Context, handler ValidatePostalCodeWithRateDataHandler) *ValidatePostalCodeWithRateData {
	return &ValidatePostalCodeWithRateData{Context: ctx, Handler: handler}
}

/*
	ValidatePostalCodeWithRateData swagger:route GET /rate_engine_postal_codes/{postal_code} postal_codes validatePostalCodeWithRateData

Validate if a zipcode is valid for origin or destination location for a move.

Verifies if a zipcode is valid for origin or destination location for a move.
*/
type ValidatePostalCodeWithRateData struct {
	Context *middleware.Context
	Handler ValidatePostalCodeWithRateDataHandler
}

func (o *ValidatePostalCodeWithRateData) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewValidatePostalCodeWithRateDataParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
