// Code generated by go-swagger; DO NOT EDIT.

package postal_codes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewValidatePostalCodeWithRateDataParams creates a new ValidatePostalCodeWithRateDataParams object
//
// There are no default values defined in the spec.
func NewValidatePostalCodeWithRateDataParams() ValidatePostalCodeWithRateDataParams {

	return ValidatePostalCodeWithRateDataParams{}
}

// ValidatePostalCodeWithRateDataParams contains all the bound params for the validate postal code with rate data operation
// typically these are obtained from a http.Request
//
// swagger:parameters validatePostalCodeWithRateData
type ValidatePostalCodeWithRateDataParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  Pattern: ^(\d{5}?)$
	  In: path
	*/
	PostalCode string
	/*
	  Required: true
	  In: query
	*/
	PostalCodeType string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewValidatePostalCodeWithRateDataParams() beforehand.
func (o *ValidatePostalCodeWithRateDataParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rPostalCode, rhkPostalCode, _ := route.Params.GetOK("postal_code")
	if err := o.bindPostalCode(rPostalCode, rhkPostalCode, route.Formats); err != nil {
		res = append(res, err)
	}

	qPostalCodeType, qhkPostalCodeType, _ := qs.GetOK("postal_code_type")
	if err := o.bindPostalCodeType(qPostalCodeType, qhkPostalCodeType, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindPostalCode binds and validates parameter PostalCode from path.
func (o *ValidatePostalCodeWithRateDataParams) bindPostalCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.PostalCode = raw

	if err := o.validatePostalCode(formats); err != nil {
		return err
	}

	return nil
}

// validatePostalCode carries on validations for parameter PostalCode
func (o *ValidatePostalCodeWithRateDataParams) validatePostalCode(formats strfmt.Registry) error {

	if err := validate.Pattern("postal_code", "path", o.PostalCode, `^(\d{5}?)$`); err != nil {
		return err
	}

	return nil
}

// bindPostalCodeType binds and validates parameter PostalCodeType from query.
func (o *ValidatePostalCodeWithRateDataParams) bindPostalCodeType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("postal_code_type", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("postal_code_type", "query", raw); err != nil {
		return err
	}
	o.PostalCodeType = raw

	if err := o.validatePostalCodeType(formats); err != nil {
		return err
	}

	return nil
}

// validatePostalCodeType carries on validations for parameter PostalCodeType
func (o *ValidatePostalCodeWithRateDataParams) validatePostalCodeType(formats strfmt.Registry) error {

	if err := validate.EnumCase("postal_code_type", "query", o.PostalCodeType, []interface{}{"origin", "destination"}, true); err != nil {
		return err
	}

	return nil
}
