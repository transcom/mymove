// Code generated by go-swagger; DO NOT EDIT.

package accesscode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ValidateAccessCodeHandlerFunc turns a function with the right signature into a validate access code handler
type ValidateAccessCodeHandlerFunc func(ValidateAccessCodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ValidateAccessCodeHandlerFunc) Handle(params ValidateAccessCodeParams) middleware.Responder {
	return fn(params)
}

// ValidateAccessCodeHandler interface for that can handle valid validate access code params
type ValidateAccessCodeHandler interface {
	Handle(ValidateAccessCodeParams) middleware.Responder
}

// NewValidateAccessCode creates a new http.Handler for the validate access code operation
func NewValidateAccessCode(ctx *middleware.Context, handler ValidateAccessCodeHandler) *ValidateAccessCode {
	return &ValidateAccessCode{Context: ctx, Handler: handler}
}

/* ValidateAccessCode swagger:route GET /access_codes/valid accesscode validateAccessCode

Validate if an access code has been unused and associated with the correct move type.

Verifies if access code is both unused and correctly associated with a move type.

*/
type ValidateAccessCode struct {
	Context *middleware.Context
	Handler ValidateAccessCodeHandler
}

func (o *ValidateAccessCode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewValidateAccessCodeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
