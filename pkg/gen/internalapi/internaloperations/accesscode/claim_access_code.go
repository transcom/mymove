// Code generated by go-swagger; DO NOT EDIT.

package accesscode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClaimAccessCodeHandlerFunc turns a function with the right signature into a claim access code handler
type ClaimAccessCodeHandlerFunc func(ClaimAccessCodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ClaimAccessCodeHandlerFunc) Handle(params ClaimAccessCodeParams) middleware.Responder {
	return fn(params)
}

// ClaimAccessCodeHandler interface for that can handle valid claim access code params
type ClaimAccessCodeHandler interface {
	Handle(ClaimAccessCodeParams) middleware.Responder
}

// NewClaimAccessCode creates a new http.Handler for the claim access code operation
func NewClaimAccessCode(ctx *middleware.Context, handler ClaimAccessCodeHandler) *ClaimAccessCode {
	return &ClaimAccessCode{Context: ctx, Handler: handler}
}

/*ClaimAccessCode swagger:route PATCH /access_codes/invalid accesscode claimAccessCode

Updates access code as invalid by associating it with the current service member.

Updates access code as invalid by associating it with the current service member.

*/
type ClaimAccessCode struct {
	Context *middleware.Context
	Handler ClaimAccessCodeHandler
}

func (o *ClaimAccessCode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewClaimAccessCodeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ClaimAccessCodeBody claim access code body
//
// swagger:model ClaimAccessCodeBody
type ClaimAccessCodeBody struct {

	// code
	// Required: true
	Code *string `json:"code"`
}

// Validate validates this claim access code body
func (o *ClaimAccessCodeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClaimAccessCodeBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("accessCode"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClaimAccessCodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClaimAccessCodeBody) UnmarshalBinary(b []byte) error {
	var res ClaimAccessCodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
