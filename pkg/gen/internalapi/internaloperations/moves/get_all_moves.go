// Code generated by go-swagger; DO NOT EDIT.

package moves

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAllMovesHandlerFunc turns a function with the right signature into a get all moves handler
type GetAllMovesHandlerFunc func(GetAllMovesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllMovesHandlerFunc) Handle(params GetAllMovesParams) middleware.Responder {
	return fn(params)
}

// GetAllMovesHandler interface for that can handle valid get all moves params
type GetAllMovesHandler interface {
	Handle(GetAllMovesParams) middleware.Responder
}

// NewGetAllMoves creates a new http.Handler for the get all moves operation
func NewGetAllMoves(ctx *middleware.Context, handler GetAllMovesHandler) *GetAllMoves {
	return &GetAllMoves{Context: ctx, Handler: handler}
}

/*
	GetAllMoves swagger:route GET /allmoves/{serviceMemberId} moves getAllMoves

# Return the current and previous moves of a service member

This endpoint gets all moves that belongs to the serviceMember by using the service members id. In a previous moves array and the current move in the current move array. The current move is the move with the latest CreatedAt date. All other moves will go into the previous move array.
*/
type GetAllMoves struct {
	Context *middleware.Context
	Handler GetAllMovesHandler
}

func (o *GetAllMoves) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAllMovesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
