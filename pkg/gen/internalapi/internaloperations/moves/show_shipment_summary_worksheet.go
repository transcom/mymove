// Code generated by go-swagger; DO NOT EDIT.

package moves

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShowShipmentSummaryWorksheetHandlerFunc turns a function with the right signature into a show shipment summary worksheet handler
type ShowShipmentSummaryWorksheetHandlerFunc func(ShowShipmentSummaryWorksheetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShowShipmentSummaryWorksheetHandlerFunc) Handle(params ShowShipmentSummaryWorksheetParams) middleware.Responder {
	return fn(params)
}

// ShowShipmentSummaryWorksheetHandler interface for that can handle valid show shipment summary worksheet params
type ShowShipmentSummaryWorksheetHandler interface {
	Handle(ShowShipmentSummaryWorksheetParams) middleware.Responder
}

// NewShowShipmentSummaryWorksheet creates a new http.Handler for the show shipment summary worksheet operation
func NewShowShipmentSummaryWorksheet(ctx *middleware.Context, handler ShowShipmentSummaryWorksheetHandler) *ShowShipmentSummaryWorksheet {
	return &ShowShipmentSummaryWorksheet{Context: ctx, Handler: handler}
}

/*ShowShipmentSummaryWorksheet swagger:route GET /moves/{moveId}/shipment_summary_worksheet moves showShipmentSummaryWorksheet

Returns Shipment Summary Worksheet

Generates pre-filled PDF using data already collected

*/
type ShowShipmentSummaryWorksheet struct {
	Context *middleware.Context
	Handler ShowShipmentSummaryWorksheetHandler
}

func (o *ShowShipmentSummaryWorksheet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewShowShipmentSummaryWorksheetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
