// Code generated by go-swagger; DO NOT EDIT.

package moves

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SubmitAmendedOrdersHandlerFunc turns a function with the right signature into a submit amended orders handler
type SubmitAmendedOrdersHandlerFunc func(SubmitAmendedOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SubmitAmendedOrdersHandlerFunc) Handle(params SubmitAmendedOrdersParams) middleware.Responder {
	return fn(params)
}

// SubmitAmendedOrdersHandler interface for that can handle valid submit amended orders params
type SubmitAmendedOrdersHandler interface {
	Handle(SubmitAmendedOrdersParams) middleware.Responder
}

// NewSubmitAmendedOrders creates a new http.Handler for the submit amended orders operation
func NewSubmitAmendedOrders(ctx *middleware.Context, handler SubmitAmendedOrdersHandler) *SubmitAmendedOrders {
	return &SubmitAmendedOrders{Context: ctx, Handler: handler}
}

/*
	SubmitAmendedOrders swagger:route POST /moves/{moveId}/submit_amended_orders moves submitAmendedOrders

# Submits amended orders for review

Submits amended orders for review by the office. The status of the move will be updated to an appropriate status depending on whether it needs services counseling or not.
*/
type SubmitAmendedOrders struct {
	Context *middleware.Context
	Handler SubmitAmendedOrdersHandler
}

func (o *SubmitAmendedOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSubmitAmendedOrdersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
