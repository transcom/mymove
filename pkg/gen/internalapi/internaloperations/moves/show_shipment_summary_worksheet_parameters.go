// Code generated by go-swagger; DO NOT EDIT.

package moves

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewShowShipmentSummaryWorksheetParams creates a new ShowShipmentSummaryWorksheetParams object
// no default values defined in spec.
func NewShowShipmentSummaryWorksheetParams() ShowShipmentSummaryWorksheetParams {

	return ShowShipmentSummaryWorksheetParams{}
}

// ShowShipmentSummaryWorksheetParams contains all the bound params for the show shipment summary worksheet operation
// typically these are obtained from a http.Request
//
// swagger:parameters showShipmentSummaryWorksheet
type ShowShipmentSummaryWorksheetParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*UUID of the move
	  Required: true
	  In: path
	*/
	MoveID strfmt.UUID
	/*The preparationDate of PDF
	  Required: true
	  In: query
	*/
	PreparationDate strfmt.Date
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewShowShipmentSummaryWorksheetParams() beforehand.
func (o *ShowShipmentSummaryWorksheetParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rMoveID, rhkMoveID, _ := route.Params.GetOK("moveId")
	if err := o.bindMoveID(rMoveID, rhkMoveID, route.Formats); err != nil {
		res = append(res, err)
	}

	qPreparationDate, qhkPreparationDate, _ := qs.GetOK("preparationDate")
	if err := o.bindPreparationDate(qPreparationDate, qhkPreparationDate, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindMoveID binds and validates parameter MoveID from path.
func (o *ShowShipmentSummaryWorksheetParams) bindMoveID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("moveId", "path", "strfmt.UUID", raw)
	}
	o.MoveID = *(value.(*strfmt.UUID))

	if err := o.validateMoveID(formats); err != nil {
		return err
	}

	return nil
}

// validateMoveID carries on validations for parameter MoveID
func (o *ShowShipmentSummaryWorksheetParams) validateMoveID(formats strfmt.Registry) error {

	if err := validate.FormatOf("moveId", "path", "uuid", o.MoveID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindPreparationDate binds and validates parameter PreparationDate from query.
func (o *ShowShipmentSummaryWorksheetParams) bindPreparationDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("preparationDate", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("preparationDate", "query", raw); err != nil {
		return err
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("preparationDate", "query", "strfmt.Date", raw)
	}
	o.PreparationDate = *(value.(*strfmt.Date))

	if err := o.validatePreparationDate(formats); err != nil {
		return err
	}

	return nil
}

// validatePreparationDate carries on validations for parameter PreparationDate
func (o *ShowShipmentSummaryWorksheetParams) validatePreparationDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("preparationDate", "query", "date", o.PreparationDate.String(), formats); err != nil {
		return err
	}
	return nil
}
