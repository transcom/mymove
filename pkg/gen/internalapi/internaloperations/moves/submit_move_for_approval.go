// Code generated by go-swagger; DO NOT EDIT.

package moves

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SubmitMoveForApprovalHandlerFunc turns a function with the right signature into a submit move for approval handler
type SubmitMoveForApprovalHandlerFunc func(SubmitMoveForApprovalParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SubmitMoveForApprovalHandlerFunc) Handle(params SubmitMoveForApprovalParams) middleware.Responder {
	return fn(params)
}

// SubmitMoveForApprovalHandler interface for that can handle valid submit move for approval params
type SubmitMoveForApprovalHandler interface {
	Handle(SubmitMoveForApprovalParams) middleware.Responder
}

// NewSubmitMoveForApproval creates a new http.Handler for the submit move for approval operation
func NewSubmitMoveForApproval(ctx *middleware.Context, handler SubmitMoveForApprovalHandler) *SubmitMoveForApproval {
	return &SubmitMoveForApproval{Context: ctx, Handler: handler}
}

/*
	SubmitMoveForApproval swagger:route POST /moves/{moveId}/submit moves submitMoveForApproval

# Submits a move for approval

Submits a move for approval by the office. The status of the move will be updated to SUBMITTED
*/
type SubmitMoveForApproval struct {
	Context *middleware.Context
	Handler SubmitMoveForApprovalHandler
}

func (o *SubmitMoveForApproval) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSubmitMoveForApprovalParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
