// Code generated by go-swagger; DO NOT EDIT.

package uploads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewDeleteUploadsParams creates a new DeleteUploadsParams object
//
// There are no default values defined in the spec.
func NewDeleteUploadsParams() DeleteUploadsParams {

	return DeleteUploadsParams{}
}

// DeleteUploadsParams contains all the bound params for the delete uploads operation
// typically these are obtained from a http.Request
//
// swagger:parameters deleteUploads
type DeleteUploadsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Array of UUIDs to be deleted
	  Required: true
	  In: query
	*/
	UploadIds []strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteUploadsParams() beforehand.
func (o *DeleteUploadsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qUploadIds, qhkUploadIds, _ := qs.GetOK("uploadIds")
	if err := o.bindUploadIds(qUploadIds, qhkUploadIds, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindUploadIds binds and validates array parameter UploadIds from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *DeleteUploadsParams) bindUploadIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("uploadIds", "query", rawData)
	}
	var qvUploadIds string
	if len(rawData) > 0 {
		qvUploadIds = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	uploadIdsIC := swag.SplitByFormat(qvUploadIds, "")
	if len(uploadIdsIC) == 0 {
		return errors.Required("uploadIds", "query", uploadIdsIC)
	}

	var uploadIdsIR []strfmt.UUID
	for i, uploadIdsIV := range uploadIdsIC {
		// items.Format: "uuid"
		value, err := formats.Parse("uuid", uploadIdsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "uploadIds", i), "query", "strfmt.UUID", value)
		}
		uploadIdsI := *(value.(*strfmt.UUID))

		if err := validate.FormatOf(fmt.Sprintf("%s.%v", "uploadIds", i), "query", "uuid", uploadIdsI.String(), formats); err != nil {
			return err
		}
		uploadIdsIR = append(uploadIdsIR, uploadIdsI)
	}

	o.UploadIds = uploadIdsIR

	return nil
}
