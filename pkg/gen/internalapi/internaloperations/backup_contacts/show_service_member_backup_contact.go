// Code generated by go-swagger; DO NOT EDIT.

package backup_contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShowServiceMemberBackupContactHandlerFunc turns a function with the right signature into a show service member backup contact handler
type ShowServiceMemberBackupContactHandlerFunc func(ShowServiceMemberBackupContactParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShowServiceMemberBackupContactHandlerFunc) Handle(params ShowServiceMemberBackupContactParams) middleware.Responder {
	return fn(params)
}

// ShowServiceMemberBackupContactHandler interface for that can handle valid show service member backup contact params
type ShowServiceMemberBackupContactHandler interface {
	Handle(ShowServiceMemberBackupContactParams) middleware.Responder
}

// NewShowServiceMemberBackupContact creates a new http.Handler for the show service member backup contact operation
func NewShowServiceMemberBackupContact(ctx *middleware.Context, handler ShowServiceMemberBackupContactHandler) *ShowServiceMemberBackupContact {
	return &ShowServiceMemberBackupContact{Context: ctx, Handler: handler}
}

/*
	ShowServiceMemberBackupContact swagger:route GET /backup_contacts/{backupContactId} backup_contacts showServiceMemberBackupContact

# Returns the given service member backup contact

Returns the given service member backup contact
*/
type ShowServiceMemberBackupContact struct {
	Context *middleware.Context
	Handler ShowServiceMemberBackupContactHandler
}

func (o *ShowServiceMemberBackupContact) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewShowServiceMemberBackupContactParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
