// Code generated by go-swagger; DO NOT EDIT.

package backup_contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateServiceMemberBackupContactHandlerFunc turns a function with the right signature into a update service member backup contact handler
type UpdateServiceMemberBackupContactHandlerFunc func(UpdateServiceMemberBackupContactParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateServiceMemberBackupContactHandlerFunc) Handle(params UpdateServiceMemberBackupContactParams) middleware.Responder {
	return fn(params)
}

// UpdateServiceMemberBackupContactHandler interface for that can handle valid update service member backup contact params
type UpdateServiceMemberBackupContactHandler interface {
	Handle(UpdateServiceMemberBackupContactParams) middleware.Responder
}

// NewUpdateServiceMemberBackupContact creates a new http.Handler for the update service member backup contact operation
func NewUpdateServiceMemberBackupContact(ctx *middleware.Context, handler UpdateServiceMemberBackupContactHandler) *UpdateServiceMemberBackupContact {
	return &UpdateServiceMemberBackupContact{Context: ctx, Handler: handler}
}

/*
	UpdateServiceMemberBackupContact swagger:route PUT /backup_contacts/{backupContactId} backup_contacts updateServiceMemberBackupContact

# Updates a service member backup contact

Any fields sent in this request will be set on the backup contact referenced
*/
type UpdateServiceMemberBackupContact struct {
	Context *middleware.Context
	Handler UpdateServiceMemberBackupContactHandler
}

func (o *UpdateServiceMemberBackupContact) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateServiceMemberBackupContactParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
