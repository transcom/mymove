// Code generated by go-swagger; DO NOT EDIT.

package backup_contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IndexServiceMemberBackupContactsHandlerFunc turns a function with the right signature into a index service member backup contacts handler
type IndexServiceMemberBackupContactsHandlerFunc func(IndexServiceMemberBackupContactsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IndexServiceMemberBackupContactsHandlerFunc) Handle(params IndexServiceMemberBackupContactsParams) middleware.Responder {
	return fn(params)
}

// IndexServiceMemberBackupContactsHandler interface for that can handle valid index service member backup contacts params
type IndexServiceMemberBackupContactsHandler interface {
	Handle(IndexServiceMemberBackupContactsParams) middleware.Responder
}

// NewIndexServiceMemberBackupContacts creates a new http.Handler for the index service member backup contacts operation
func NewIndexServiceMemberBackupContacts(ctx *middleware.Context, handler IndexServiceMemberBackupContactsHandler) *IndexServiceMemberBackupContacts {
	return &IndexServiceMemberBackupContacts{Context: ctx, Handler: handler}
}

/*
	IndexServiceMemberBackupContacts swagger:route GET /service_members/{serviceMemberId}/backup_contacts backup_contacts indexServiceMemberBackupContacts

# List all service member backup contacts

List all service member backup contacts
*/
type IndexServiceMemberBackupContacts struct {
	Context *middleware.Context
	Handler IndexServiceMemberBackupContactsHandler
}

func (o *IndexServiceMemberBackupContacts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIndexServiceMemberBackupContactsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
