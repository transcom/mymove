// Code generated by go-swagger; DO NOT EDIT.

package certification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IndexSignedCertificationHandlerFunc turns a function with the right signature into a index signed certification handler
type IndexSignedCertificationHandlerFunc func(IndexSignedCertificationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IndexSignedCertificationHandlerFunc) Handle(params IndexSignedCertificationParams) middleware.Responder {
	return fn(params)
}

// IndexSignedCertificationHandler interface for that can handle valid index signed certification params
type IndexSignedCertificationHandler interface {
	Handle(IndexSignedCertificationParams) middleware.Responder
}

// NewIndexSignedCertification creates a new http.Handler for the index signed certification operation
func NewIndexSignedCertification(ctx *middleware.Context, handler IndexSignedCertificationHandler) *IndexSignedCertification {
	return &IndexSignedCertification{Context: ctx, Handler: handler}
}

/*
	IndexSignedCertification swagger:route GET /moves/{moveId}/signed_certifications certification indexSignedCertification

gets the signed certifications for the given move ID

returns a list of all signed_certifications associated with the move ID
*/
type IndexSignedCertification struct {
	Context *middleware.Context
	Handler IndexSignedCertificationHandler
}

func (o *IndexSignedCertification) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIndexSignedCertificationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
