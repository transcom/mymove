// Code generated by go-swagger; DO NOT EDIT.

package service_members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateServiceMemberHandlerFunc turns a function with the right signature into a create service member handler
type CreateServiceMemberHandlerFunc func(CreateServiceMemberParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateServiceMemberHandlerFunc) Handle(params CreateServiceMemberParams) middleware.Responder {
	return fn(params)
}

// CreateServiceMemberHandler interface for that can handle valid create service member params
type CreateServiceMemberHandler interface {
	Handle(CreateServiceMemberParams) middleware.Responder
}

// NewCreateServiceMember creates a new http.Handler for the create service member operation
func NewCreateServiceMember(ctx *middleware.Context, handler CreateServiceMemberHandler) *CreateServiceMember {
	return &CreateServiceMember{Context: ctx, Handler: handler}
}

/*
	CreateServiceMember swagger:route POST /service_members service_members createServiceMember

# Creates service member for a logged-in user

Creates an instance of a service member tied to a user
*/
type CreateServiceMember struct {
	Context *middleware.Context
	Handler CreateServiceMemberHandler
}

func (o *CreateServiceMember) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateServiceMemberParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
