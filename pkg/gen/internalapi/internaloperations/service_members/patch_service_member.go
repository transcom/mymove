// Code generated by go-swagger; DO NOT EDIT.

package service_members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchServiceMemberHandlerFunc turns a function with the right signature into a patch service member handler
type PatchServiceMemberHandlerFunc func(PatchServiceMemberParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchServiceMemberHandlerFunc) Handle(params PatchServiceMemberParams) middleware.Responder {
	return fn(params)
}

// PatchServiceMemberHandler interface for that can handle valid patch service member params
type PatchServiceMemberHandler interface {
	Handle(PatchServiceMemberParams) middleware.Responder
}

// NewPatchServiceMember creates a new http.Handler for the patch service member operation
func NewPatchServiceMember(ctx *middleware.Context, handler PatchServiceMemberHandler) *PatchServiceMember {
	return &PatchServiceMember{Context: ctx, Handler: handler}
}

/*
	PatchServiceMember swagger:route PATCH /service_members/{serviceMemberId} service_members patchServiceMember

# Patches the service member

Any fields sent in this request will be set on the service member referenced
*/
type PatchServiceMember struct {
	Context *middleware.Context
	Handler PatchServiceMemberHandler
}

func (o *PatchServiceMember) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchServiceMemberParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
