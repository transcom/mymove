// Code generated by go-swagger; DO NOT EDIT.

package feature_flags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// VariantFeatureFlagForUserHandlerFunc turns a function with the right signature into a variant feature flag for user handler
type VariantFeatureFlagForUserHandlerFunc func(VariantFeatureFlagForUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VariantFeatureFlagForUserHandlerFunc) Handle(params VariantFeatureFlagForUserParams) middleware.Responder {
	return fn(params)
}

// VariantFeatureFlagForUserHandler interface for that can handle valid variant feature flag for user params
type VariantFeatureFlagForUserHandler interface {
	Handle(VariantFeatureFlagForUserParams) middleware.Responder
}

// NewVariantFeatureFlagForUser creates a new http.Handler for the variant feature flag for user operation
func NewVariantFeatureFlagForUser(ctx *middleware.Context, handler VariantFeatureFlagForUserHandler) *VariantFeatureFlagForUser {
	return &VariantFeatureFlagForUser{Context: ctx, Handler: handler}
}

/*
	VariantFeatureFlagForUser swagger:route POST /feature-flags/user-variant/{key} featureFlags variantFeatureFlagForUser

# Determines if a user has a feature flag enabled

Determines if a user has a feature flag enabled. The flagContext contains context used to determine if this flag applies to the logged in user.
*/
type VariantFeatureFlagForUser struct {
	Context *middleware.Context
	Handler VariantFeatureFlagForUserHandler
}

func (o *VariantFeatureFlagForUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewVariantFeatureFlagForUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
