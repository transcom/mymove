// Code generated by go-swagger; DO NOT EDIT.

package feature_flags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FeatureFlagForUserHandlerFunc turns a function with the right signature into a feature flag for user handler
type FeatureFlagForUserHandlerFunc func(FeatureFlagForUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FeatureFlagForUserHandlerFunc) Handle(params FeatureFlagForUserParams) middleware.Responder {
	return fn(params)
}

// FeatureFlagForUserHandler interface for that can handle valid feature flag for user params
type FeatureFlagForUserHandler interface {
	Handle(FeatureFlagForUserParams) middleware.Responder
}

// NewFeatureFlagForUser creates a new http.Handler for the feature flag for user operation
func NewFeatureFlagForUser(ctx *middleware.Context, handler FeatureFlagForUserHandler) *FeatureFlagForUser {
	return &FeatureFlagForUser{Context: ctx, Handler: handler}
}

/*
	FeatureFlagForUser swagger:route POST /feature-flags/user/{key} featureFlags featureFlagForUser

# Determines if a user has a feature flag enabled

Determines if a user has a feature flag enabled. The flagContext contains context used to determine if this flag applies to the logged in user.
*/
type FeatureFlagForUser struct {
	Context *middleware.Context
	Handler FeatureFlagForUserHandler
}

func (o *FeatureFlagForUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFeatureFlagForUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
