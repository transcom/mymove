// Code generated by go-swagger; DO NOT EDIT.

package feature_flags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// BooleanFeatureFlagUnauthenticatedHandlerFunc turns a function with the right signature into a boolean feature flag unauthenticated handler
type BooleanFeatureFlagUnauthenticatedHandlerFunc func(BooleanFeatureFlagUnauthenticatedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BooleanFeatureFlagUnauthenticatedHandlerFunc) Handle(params BooleanFeatureFlagUnauthenticatedParams) middleware.Responder {
	return fn(params)
}

// BooleanFeatureFlagUnauthenticatedHandler interface for that can handle valid boolean feature flag unauthenticated params
type BooleanFeatureFlagUnauthenticatedHandler interface {
	Handle(BooleanFeatureFlagUnauthenticatedParams) middleware.Responder
}

// NewBooleanFeatureFlagUnauthenticated creates a new http.Handler for the boolean feature flag unauthenticated operation
func NewBooleanFeatureFlagUnauthenticated(ctx *middleware.Context, handler BooleanFeatureFlagUnauthenticatedHandler) *BooleanFeatureFlagUnauthenticated {
	return &BooleanFeatureFlagUnauthenticated{Context: ctx, Handler: handler}
}

/*
	BooleanFeatureFlagUnauthenticated swagger:route POST /open/feature-flags/boolean/{key} featureFlags booleanFeatureFlagUnauthenticated

Determines if a feature flag is enabled. Only used for unauthenticated users.

Determines if a feature flag is enabled.
*/
type BooleanFeatureFlagUnauthenticated struct {
	Context *middleware.Context
	Handler BooleanFeatureFlagUnauthenticatedHandler
}

func (o *BooleanFeatureFlagUnauthenticated) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewBooleanFeatureFlagUnauthenticatedParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
