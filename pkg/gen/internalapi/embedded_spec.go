// Code generated by go-swagger; DO NOT EDIT.

package internalapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Internal API is a RESTful API that enables the Customer application for\nMilMove.\n\nAll endpoints are located under ` + "`" + `/internal` + "`" + `.\n",
    "title": "MilMove Internal API",
    "contact": {
      "email": "ppp@truss.works"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/internal",
  "paths": {
    "/addresses/{addressId}": {
      "get": {
        "description": "Returns an address",
        "tags": [
          "addresses"
        ],
        "summary": "Returns an address",
        "operationId": "showAddress",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the address to return",
            "name": "addressId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the requested address",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/allmoves/{serviceMemberId}": {
      "get": {
        "description": "This endpoint gets all moves that belongs to the serviceMember by using the service members id. In a previous moves array and the current move in the current move array. The current move is the move with the latest CreatedAt date. All other moves will go into the previous move array.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moves"
        ],
        "summary": "Return the current and previous moves of a service member",
        "operationId": "getAllMoves",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moves. A successful fetch might still return zero moves.",
            "schema": {
              "$ref": "#/definitions/MovesList"
            }
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/backup_contacts/{backupContactId}": {
      "get": {
        "description": "Returns the given service member backup contact",
        "tags": [
          "backup_contacts"
        ],
        "summary": "Returns the given service member backup contact",
        "operationId": "showServiceMemberBackupContact",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member backup contact",
            "name": "backupContactId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the service member backup contact",
            "schema": {
              "$ref": "#/definitions/ServiceMemberBackupContactPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "backup contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "description": "Any fields sent in this request will be set on the backup contact referenced",
        "tags": [
          "backup_contacts"
        ],
        "summary": "Updates a service member backup contact",
        "operationId": "updateServiceMemberBackupContact",
        "parameters": [
          {
            "name": "updateServiceMemberBackupContactPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceMemberBackupContactPayload"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member backup contact",
            "name": "backupContactId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "updated instance of backup contact",
            "schema": {
              "$ref": "#/definitions/ServiceMemberBackupContactPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "backup contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/calendar/available_move_dates": {
      "get": {
        "description": "Returns available dates for the move calendar",
        "tags": [
          "calendar"
        ],
        "summary": "Returns available dates for the move calendar",
        "operationId": "showAvailableMoveDates",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "description": "Look for future available dates starting from (and including) this date",
            "name": "startDate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of available dates",
            "schema": {
              "$ref": "#/definitions/AvailableMoveDates"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/documents": {
      "post": {
        "description": "Documents represent a physical artifact such as a scanned document or a PDF file",
        "tags": [
          "documents"
        ],
        "summary": "Create a new document",
        "operationId": "createDocument",
        "parameters": [
          {
            "name": "documentPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostDocumentPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created document",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/documents/{documentId}": {
      "get": {
        "description": "Returns a document and its uploads",
        "tags": [
          "documents"
        ],
        "summary": "Returns a document",
        "operationId": "showDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to return",
            "name": "documentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the requested document",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/duty_locations": {
      "get": {
        "description": "Returns the duty locations matching the search query",
        "tags": [
          "duty_locations"
        ],
        "summary": "Returns the duty locations matching the search query",
        "operationId": "searchDutyLocations",
        "parameters": [
          {
            "type": "string",
            "description": "Search string for duty locations",
            "name": "search",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the duty location",
            "schema": {
              "$ref": "#/definitions/DutyLocationsPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "matching duty location not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/duty_locations/{dutyLocationId}/transportation_office": {
      "get": {
        "description": "Returns the given duty location's transportation office",
        "tags": [
          "transportation_offices"
        ],
        "summary": "Returns the transportation office for a given duty location",
        "operationId": "showDutyLocationTransportationOffice",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the duty location",
            "name": "dutyLocationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the transportation office for a duty location",
            "schema": {
              "$ref": "#/definitions/TransportationOffice"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "transportation office not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/entitlements": {
      "get": {
        "description": "List weight weights allotted by entitlement",
        "tags": [
          "entitlements"
        ],
        "summary": "List weight weights allotted by entitlement",
        "operationId": "indexEntitlements",
        "responses": {
          "200": {
            "description": "List of weights allotted entitlement",
            "schema": {
              "$ref": "#/definitions/IndexEntitlements"
            }
          }
        }
      }
    },
    "/feature-flags/user-boolean/{key}": {
      "post": {
        "description": "Determines if a user has a feature flag enabled. The flagContext contains context used to determine if this flag applies to the logged in user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "featureFlags"
        ],
        "summary": "Determines if a user has a feature flag enabled",
        "operationId": "booleanFeatureFlagForUser",
        "parameters": [
          {
            "type": "string",
            "description": "Feature Flag Key",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "description": "context for the feature flag request",
            "name": "flagContext",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean Feature Flag Status",
            "schema": {
              "$ref": "#/definitions/FeatureFlagBoolean"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/feature-flags/user-variant/{key}": {
      "post": {
        "description": "Determines if a user has a feature flag enabled. The flagContext contains context used to determine if this flag applies to the logged in user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "featureFlags"
        ],
        "summary": "Determines if a user has a feature flag enabled",
        "operationId": "variantFeatureFlagForUser",
        "parameters": [
          {
            "type": "string",
            "description": "Feature Flag Key",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "description": "context for the feature flag request",
            "name": "flagContext",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Variant Feature Flag Status",
            "schema": {
              "$ref": "#/definitions/FeatureFlagVariant"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/move_documents/{moveDocumentId}": {
      "put": {
        "description": "Update a move document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Updates a move document",
        "operationId": "updateMoveDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move document model",
            "name": "moveDocumentId",
            "in": "path",
            "required": true
          },
          {
            "name": "updateMoveDocument",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of move document",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move document not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "description": "Deletes a move document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Deletes a move document",
        "operationId": "deleteMoveDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move document model",
            "name": "moveDocumentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}": {
      "get": {
        "description": "Returns the given move",
        "tags": [
          "moves"
        ],
        "summary": "Returns the given move",
        "operationId": "showMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the move",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move is not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "patch": {
        "description": "Any fields sent in this request will be set on the move referenced",
        "tags": [
          "moves"
        ],
        "summary": "Patches the move",
        "operationId": "patchMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/ifMatch"
          },
          {
            "name": "patchMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMovePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of move",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move or closeout office is not found"
          },
          "412": {
            "description": "precondition failed"
          },
          "422": {
            "description": "unprocessable entity"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/approve": {
      "post": {
        "description": "Approves the basic details of a move. The status of the move will be updated to APPROVED",
        "tags": [
          "office"
        ],
        "summary": "Approves a move to proceed",
        "operationId": "approveMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (approved) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to approve this move"
          },
          "409": {
            "description": "the move is not in a state to be approved",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/cancel": {
      "post": {
        "description": "Cancels the basic details of a move. The status of the move will be updated to CANCELED",
        "tags": [
          "office"
        ],
        "summary": "Cancels a move",
        "operationId": "cancelMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "cancelMove",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelMove"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (canceled) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to cancel this move"
          },
          "409": {
            "description": "the move is not in a state to be canceled",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/move_documents": {
      "get": {
        "description": "Returns a list of all Move Documents associated with this move",
        "tags": [
          "move_docs"
        ],
        "summary": "Returns a list of all Move Documents associated with this move",
        "operationId": "indexMoveDocuments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of move douments",
            "schema": {
              "$ref": "#/definitions/MoveDocuments"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          }
        }
      },
      "post": {
        "description": "Created a move document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Creates a move document",
        "operationId": "createGenericMoveDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createGenericMoveDocumentPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGenericMoveDocumentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns new move document object",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to modify this move"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/orders": {
      "get": {
        "description": "Returns orders information for a move for office use",
        "tags": [
          "office"
        ],
        "summary": "Returns orders information for a move for office use",
        "operationId": "showOfficeOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the orders information for a move for office use",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/signed_certifications": {
      "get": {
        "description": "returns a list of all signed_certifications associated with the move ID",
        "tags": [
          "certification"
        ],
        "summary": "gets the signed certifications for the given move ID",
        "operationId": "indexSignedCertification",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of signed certifications",
            "schema": {
              "$ref": "#/definitions/SignedCertifications"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "description": "Create an instance of signed_certification tied to the move ID",
        "tags": [
          "certification"
        ],
        "summary": "Submits signed certification for the given move ID",
        "operationId": "createSignedCertification",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move being signed for",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createSignedCertificationPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSignedCertificationPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of signed_certification",
            "schema": {
              "$ref": "#/definitions/SignedCertificationPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to sign for this move"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/submit": {
      "post": {
        "description": "Submits a move for approval by the office. The status of the move will be updated to SUBMITTED",
        "tags": [
          "moves"
        ],
        "summary": "Submits a move for approval",
        "operationId": "submitMoveForApproval",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "submitMoveForApprovalPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitMoveForApprovalPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (submitted) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to approve this move"
          },
          "409": {
            "description": "the move is not in a state to be approved",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/submit_amended_orders": {
      "post": {
        "description": "Submits amended orders for review by the office. The status of the move will be updated to an appropriate status depending on whether it needs services counseling or not.",
        "tags": [
          "moves"
        ],
        "summary": "Submits amended orders for review",
        "operationId": "submitAmendedOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (submitted) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to approve this move"
          },
          "409": {
            "description": "the move is not in a state to be approved",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/weight_ticket": {
      "post": {
        "description": "Created a weight ticket document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Creates a weight ticket document",
        "operationId": "createWeightTicketDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createWeightTicketDocument",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWeightTicketDocumentsPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns new weight ticket document object",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to modify this move"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveTaskOrderID}/mto_shipments": {
      "get": {
        "description": "Gets all MTO shipments for the specified Move Task Order.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Gets all shipments for a move task order",
        "operationId": "listMTOShipments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of move task order for mto shipment to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all mto shipments for a move task order.",
            "schema": {
              "$ref": "#/definitions/MTOShipments"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentId}": {
      "delete": {
        "description": "Soft deletes a shipment by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Soft deletes a shipment by ID",
        "operationId": "deleteShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipment to be deleted",
            "name": "mtoShipmentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully soft deleted the shipment"
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "patch": {
        "description": "Updates a specified MTO shipment.\n\nRequired fields include:\n* MTO Shipment ID required in path\n* If-Match required in headers\n* Shipment type is required in body\n\nOptional fields include:\n* New shipment status type\n* Customer requested pick-up date\n* Pick-up Address\n* Delivery Address\n* Customer Remarks\n* Releasing / Receiving agents\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipment",
        "operationId": "updateMTOShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the MTO Shipment to update",
            "name": "mtoShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the specified MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto_shipments": {
      "post": {
        "description": "Creates a MTO shipment for the specified Move Task Order.\nRequired fields include:\n* Shipment Type\n* Customer requested pick-up date\n* Pick-up Address\n* Delivery Address\n\nOptional fields include:\n* Customer Remarks\n* Releasing / Receiving agents\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOShipment",
        "operationId": "createMTOShipment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/okta-profile": {
      "get": {
        "description": "Calls a GET request to Okta's Users API and returns profile values that includes Okta data that the user provided upon registration or most recent profile update.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "okta_profile"
        ],
        "summary": "Returns Okta profile values from Okta's Users API",
        "operationId": "showOktaInfo",
        "responses": {
          "200": {
            "description": "okta profile for user",
            "schema": {
              "$ref": "#/definitions/OktaUserProfileData"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "description": "Update the user's okta profile with primary data, returns Okta profile values from the Okta's Users API reflecting updated values.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "okta_profile"
        ],
        "summary": "Update the user's okta profile with primary data, returns Okta profile values from the Okta's Users API reflecting updated values.",
        "operationId": "updateOktaInfo",
        "parameters": [
          {
            "name": "updateOktaUserProfileData",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOktaUserProfileData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "okta profile for user",
            "schema": {
              "$ref": "#/definitions/OktaUserProfileData"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "422": {
            "description": "validation error",
            "schema": {
              "$ref": "#/responses/UnprocessableEntity"
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "description": "Creates an instance of orders tied to a service member",
        "tags": [
          "orders"
        ],
        "summary": "Creates an orders model for a logged-in user",
        "operationId": "createOrders",
        "parameters": [
          {
            "name": "createOrders",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateOrders"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of orders",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/orders/{ordersId}": {
      "get": {
        "description": "Returns the given order",
        "tags": [
          "orders"
        ],
        "summary": "Returns the given order",
        "operationId": "showOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the order",
            "name": "ordersId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the order",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "order is not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "description": "All fields sent in this request will be set on the orders referenced",
        "tags": [
          "orders"
        ],
        "summary": "Updates orders",
        "operationId": "updateOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the orders model",
            "name": "ordersId",
            "in": "path",
            "required": true
          },
          {
            "name": "updateOrders",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateOrders"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of orders",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "orders not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/orders/{ordersId}/upload_amended_orders": {
      "patch": {
        "description": "Patch the amended orders for a given order",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "orders"
        ],
        "summary": "Patch the amended orders for a given order",
        "operationId": "uploadAmendedOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the order",
            "name": "ordersId",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/aoa-packet": {
      "get": {
        "description": "### Functionality\nThis endpoint downloads all uploaded move order documentation combined with the Shipment Summary Worksheet into a single PDF.\n### Errors\n* The PPMShipment must have requested an AOA.\n* The PPMShipment AOA Request must have been approved.\n",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Downloads AOA Packet form PPMShipment as a PDF",
        "operationId": "showAOAPacket",
        "responses": {
          "200": {
            "description": "AOA PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "the id for the ppmshipment with aoa to be downloaded",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/moving-expenses": {
      "post": {
        "description": "Creates a moving expense document for the PPM shipment",
        "tags": [
          "ppm"
        ],
        "summary": "Creates moving expense document",
        "operationId": "createMovingExpense",
        "parameters": [
          {
            "$ref": "#/parameters/ppmShipmentId"
          }
        ],
        "responses": {
          "201": {
            "description": "returns new moving expense object",
            "schema": {
              "$ref": "#/definitions/MovingExpense"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/moving-expenses/{movingExpenseId}": {
      "delete": {
        "description": "Removes a single moving expense receipt from the closeout line items for a PPM shipment. Soft deleted\nrecords are not visible in milmove, but are kept in the database.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Soft deletes a moving expense by ID",
        "operationId": "deleteMovingExpense",
        "parameters": [
          {
            "$ref": "#/parameters/ppmShipmentId"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the moving expense to be deleted",
            "name": "movingExpenseId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully soft deleted the moving expense"
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "patch": {
        "description": "Any fields sent in this request will be set on the moving expense referenced",
        "tags": [
          "ppm"
        ],
        "summary": "Updates the moving expense",
        "operationId": "updateMovingExpense",
        "parameters": [
          {
            "$ref": "#/parameters/ppmShipmentId"
          },
          {
            "$ref": "#/parameters/movingExpenseId"
          },
          {
            "$ref": "#/parameters/ifMatch"
          },
          {
            "name": "updateMovingExpense",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMovingExpense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an updated moving expense object",
            "schema": {
              "$ref": "#/definitions/MovingExpense"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets": {
      "post": {
        "description": "Creates a PPM shipment's pro-gear weight ticket. This will only contain the minimum necessary fields for a\npro-gear weight ticket. Data should be filled in using the patch endpoint.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Creates a pro-gear weight ticket",
        "operationId": "createProGearWeightTicket",
        "responses": {
          "201": {
            "description": "returns a new pro-gear weight ticket object",
            "schema": {
              "$ref": "#/definitions/ProGearWeightTicket"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/ppmShipmentId"
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets/{proGearWeightTicketId}": {
      "delete": {
        "description": "Removes a single pro-gear weight ticket set from the closeout line items for a PPM shipment. Soft deleted\nrecords are not visible in milmove, but are kept in the database.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Soft deletes a pro-gear weight line item by ID",
        "operationId": "deleteProGearWeightTicket",
        "parameters": [
          {
            "$ref": "#/parameters/ppmShipmentId"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the pro-gear weight ticket to be deleted",
            "name": "proGearWeightTicketId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully soft deleted the pro-gear weight ticket"
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "patch": {
        "description": "Updates a PPM shipment's pro-gear weight ticket with new information. Only some of the fields are editable\nbecause some have to be set by the customer, e.g. the description.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates a pro-gear weight ticket",
        "operationId": "updateProGearWeightTicket",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatch"
          },
          {
            "$ref": "#/parameters/ppmShipmentId"
          },
          {
            "$ref": "#/parameters/proGearWeightTicketId"
          },
          {
            "name": "updateProGearWeightTicket",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProGearWeightTicket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an updated pro-gear weight ticket object",
            "schema": {
              "$ref": "#/definitions/ProGearWeightTicket"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/resubmit-ppm-shipment-documentation/{signedCertificationId}": {
      "put": {
        "description": "Updates customer signature along with the text they agreed to, and then routes the PPM shipment to the service\ncounselor queue for review.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates signature and routes PPM shipment to service counselor",
        "operationId": "resubmitPPMShipmentDocumentation",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the signed certification",
            "name": "signedCertificationId",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/ifMatch"
          },
          {
            "name": "savePPMShipmentSignedCertificationPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SavePPMShipmentSignedCertification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated PPM shipment",
            "schema": {
              "$ref": "#/definitions/PPMShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/ppmShipmentId"
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/submit-ppm-shipment-documentation": {
      "post": {
        "description": "Saves customer signature along with the text they agreed to, and then routes the PPM shipment to the service\ncounselor queue for review.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Saves signature and routes PPM shipment to service counselor",
        "operationId": "submitPPMShipmentDocumentation",
        "parameters": [
          {
            "name": "savePPMShipmentSignedCertificationPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SavePPMShipmentSignedCertification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated PPM shipment",
            "schema": {
              "$ref": "#/definitions/PPMShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/ppmShipmentId"
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/uploads": {
      "post": {
        "description": "Uploads represent a single digital file, such as a PNG, JPEG, PDF, or spreadsheet.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Create a new upload for a PPM weight ticket, pro-gear, or moving expense document",
        "operationId": "createPPMUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the ppm shipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to add an upload to",
            "name": "documentId",
            "in": "query",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "413": {
            "description": "payload is too large"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/weight-ticket": {
      "post": {
        "description": "Created a weight ticket document with the given information",
        "tags": [
          "ppm"
        ],
        "summary": "Creates a weight ticket document",
        "operationId": "createWeightTicket",
        "parameters": [
          {
            "$ref": "#/parameters/ppmShipmentId"
          }
        ],
        "responses": {
          "200": {
            "description": "returns new weight ticket object",
            "schema": {
              "$ref": "#/definitions/WeightTicket"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/weight-ticket/{weightTicketId}": {
      "delete": {
        "description": "Removes a single weight ticket from the closeout line items for a PPM shipment. Soft deleted\nrecords are not visible in milmove, but are kept in the database. This may change the PPM shipment's final\nincentive.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Soft deletes a weight ticket by ID",
        "operationId": "deleteWeightTicket",
        "parameters": [
          {
            "$ref": "#/parameters/ppmShipmentId"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the weight ticket to be deleted",
            "name": "weightTicketId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully soft deleted the weight ticket"
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "patch": {
        "description": "Updates a weight ticket document with the new information",
        "tags": [
          "ppm"
        ],
        "summary": "Updates a weight ticket document",
        "operationId": "updateWeightTicket",
        "parameters": [
          {
            "$ref": "#/parameters/ppmShipmentId"
          },
          {
            "$ref": "#/parameters/weightTicketId"
          },
          {
            "$ref": "#/parameters/ifMatch"
          },
          {
            "name": "updateWeightTicketPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateWeightTicket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an updated weight ticket object",
            "schema": {
              "$ref": "#/definitions/WeightTicket"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/queues/{queueType}": {
      "get": {
        "description": "Show all moves in a queue",
        "tags": [
          "queues"
        ],
        "summary": "Show all moves in a queue",
        "operationId": "showQueue",
        "parameters": [
          {
            "enum": [
              "new",
              "ppm_payment_requested",
              "all",
              "ppm_approved",
              "ppm_completed"
            ],
            "type": "string",
            "description": "Queue type to show",
            "name": "queueType",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list all moves in the specified queue",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MoveQueueItem"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to access this queue"
          },
          "404": {
            "description": "move queue item is not found"
          }
        }
      }
    },
    "/rate_engine_postal_codes/{postal_code}": {
      "get": {
        "description": "Verifies if a zipcode is valid for origin or destination location for a move.",
        "tags": [
          "postal_codes"
        ],
        "summary": "Validate if a zipcode is valid for origin or destination location for a move.",
        "operationId": "validatePostalCodeWithRateData",
        "parameters": [
          {
            "pattern": "^(\\d{5}?)$",
            "type": "string",
            "format": "zip",
            "name": "postal_code",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "origin",
              "destination"
            ],
            "type": "string",
            "name": "postal_code_type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "postal_code is valid or invalid",
            "schema": {
              "$ref": "#/definitions/RateEnginePostalCodePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/reimbursement/{reimbursementId}/approve": {
      "post": {
        "description": "Sets the status of the reimbursement to APPROVED.",
        "tags": [
          "office"
        ],
        "summary": "Approves the reimbursement",
        "operationId": "approveReimbursement",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the reimbursement being approved",
            "name": "reimbursementId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of reimbursement",
            "schema": {
              "$ref": "#/definitions/Reimbursement"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members": {
      "post": {
        "description": "Creates an instance of a service member tied to a user",
        "tags": [
          "service_members"
        ],
        "summary": "Creates service member for a logged-in user",
        "operationId": "createServiceMember",
        "parameters": [
          {
            "name": "createServiceMemberPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceMemberPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of service member",
            "schema": {
              "$ref": "#/definitions/ServiceMemberPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members/{serviceMemberId}": {
      "get": {
        "description": "Returns the given service member",
        "tags": [
          "service_members"
        ],
        "summary": "Returns the given service member",
        "operationId": "showServiceMember",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the service member",
            "schema": {
              "$ref": "#/definitions/ServiceMemberPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "patch": {
        "description": "Any fields sent in this request will be set on the service member referenced",
        "tags": [
          "service_members"
        ],
        "summary": "Patches the service member",
        "operationId": "patchServiceMember",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          },
          {
            "name": "patchServiceMemberPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchServiceMemberPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of service member",
            "schema": {
              "$ref": "#/definitions/ServiceMemberPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members/{serviceMemberId}/backup_contacts": {
      "get": {
        "description": "List all service member backup contacts",
        "tags": [
          "backup_contacts"
        ],
        "summary": "List all service member backup contacts",
        "operationId": "indexServiceMemberBackupContacts",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of service member backup contacts",
            "schema": {
              "$ref": "#/definitions/IndexServiceMemberBackupContactsPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to see this backup contact"
          },
          "404": {
            "description": "contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "description": "Creates an instance of a backup contact tied to a service member user",
        "tags": [
          "backup_contacts"
        ],
        "summary": "Submits backup contact for a logged-in user",
        "operationId": "createServiceMemberBackupContact",
        "parameters": [
          {
            "name": "createBackupContactPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceMemberBackupContactPayload"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of service member backup contact",
            "schema": {
              "$ref": "#/definitions/ServiceMemberBackupContactPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to create this backup contact"
          },
          "404": {
            "description": "contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members/{serviceMemberId}/current_orders": {
      "get": {
        "description": "Returns orders",
        "tags": [
          "service_members"
        ],
        "summary": "Returns the latest orders for a given service member",
        "operationId": "showServiceMemberOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the service member",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/transportation-offices": {
      "get": {
        "description": "Returns the transportation offices matching the search query",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transportation_offices"
        ],
        "summary": "Returns the transportation offices matching the search query",
        "operationId": "getTransportationOffices",
        "parameters": [
          {
            "minLength": 2,
            "type": "string",
            "description": "Search string for transportation offices",
            "name": "search",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transportation offices",
            "schema": {
              "$ref": "#/definitions/TransportationOffices"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/uploads": {
      "post": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "uploads"
        ],
        "summary": "Create a new upload",
        "operationId": "createUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to add an upload to",
            "name": "documentId",
            "in": "query"
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "delete": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "tags": [
          "uploads"
        ],
        "summary": "Deletes a collection of uploads",
        "operationId": "deleteUploads",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Array of UUIDs to be deleted",
            "name": "uploadIds",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/uploads/{uploadId}": {
      "delete": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "tags": [
          "uploads"
        ],
        "summary": "Deletes an upload",
        "operationId": "deleteUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the upload to be deleted",
            "name": "uploadId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the order that the upload belongs to",
            "name": "orderId",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users/is_logged_in": {
      "get": {
        "description": "Returns boolean as to whether the user is logged in",
        "tags": [
          "users"
        ],
        "summary": "Returns boolean as to whether the user is logged in",
        "operationId": "isLoggedInUser",
        "responses": {
          "200": {
            "description": "Currently logged in user",
            "schema": {
              "type": "object",
              "required": [
                "isLoggedIn"
              ],
              "properties": {
                "isLoggedIn": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users/logged_in": {
      "get": {
        "description": "Returns the user info for the currently logged in user",
        "tags": [
          "users"
        ],
        "summary": "Returns the user info for the currently logged in user",
        "operationId": "showLoggedInUser",
        "responses": {
          "200": {
            "description": "Currently logged in user",
            "schema": {
              "$ref": "#/definitions/LoggedInUserPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "A postal address",
      "type": "object",
      "required": [
        "streetAddress1",
        "city",
        "state",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "Affiliation": {
      "description": "Military branch of service",
      "type": "string",
      "title": "Branch of service",
      "enum": [
        "ARMY",
        "NAVY",
        "MARINES",
        "AIR_FORCE",
        "COAST_GUARD",
        "SPACE_FORCE",
        "OTHER"
      ],
      "x-display-value": {
        "AIR_FORCE": "Air Force",
        "ARMY": "Army",
        "COAST_GUARD": "Coast Guard",
        "MARINES": "Marine Corps",
        "NAVY": "Navy",
        "OTHER": "OTHER",
        "SPACE_FORCE": "Space Force"
      },
      "x-nullable": true
    },
    "AvailableMoveDates": {
      "type": "object",
      "required": [
        "start_date",
        "available"
      ],
      "properties": {
        "available": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "example": "2018-09-25"
        }
      }
    },
    "BackupContactPermission": {
      "type": "string",
      "title": "Permissions",
      "enum": [
        "NONE",
        "VIEW",
        "EDIT"
      ],
      "x-display-value": {
        "EDIT": "View and edit all move details",
        "NONE": "Contact Only",
        "VIEW": "View all move details"
      }
    },
    "CancelMove": {
      "type": "object",
      "required": [
        "cancel_reason"
      ],
      "properties": {
        "cancel_reason": {
          "type": "string",
          "x-nullable": true,
          "example": "Change of orders"
        }
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateGenericMoveDocumentPayload": {
      "type": "object",
      "required": [
        "upload_ids",
        "title",
        "move_document_type"
      ],
      "properties": {
        "move_document_type": {
          "$ref": "#/definitions/MoveDocumentType"
        },
        "notes": {
          "type": "string",
          "title": "Notes",
          "x-nullable": true,
          "example": "This document is good to go!"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "title": {
          "type": "string",
          "example": "very_useful_document.pdf"
        },
        "upload_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          }
        }
      }
    },
    "CreatePPMShipment": {
      "description": "A personally procured move is a type of shipment that a service members moves themselves.",
      "required": [
        "expectedDepartureDate",
        "pickupPostalCode",
        "pickupAddress",
        "destinationPostalCode",
        "destinationAddress",
        "sitExpected"
      ],
      "properties": {
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "destinationPostalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "example": "90210"
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to move.\n",
          "type": "string",
          "format": "date"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "pickupPostalCode": {
          "description": "zip code",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "example": "90210"
        },
        "secondaryDestinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryDestinationPostalCode": {
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "$ref": "#/definitions/NullableString",
          "example": "90210"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupPostalCode": {
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "$ref": "#/definitions/NullableString",
          "example": "90210"
        },
        "sitExpected": {
          "type": "boolean"
        }
      }
    },
    "CreateServiceMemberBackupContactPayload": {
      "type": "object",
      "required": [
        "name",
        "email",
        "permission"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "Email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@exmaple.com"
        },
        "name": {
          "type": "string",
          "title": "Name",
          "x-nullable": true,
          "example": "Susan Smith"
        },
        "permission": {
          "$ref": "#/definitions/BackupContactPermission"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        }
      }
    },
    "CreateServiceMemberPayload": {
      "type": "object",
      "properties": {
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "backup_mailing_address": {
          "$ref": "#/definitions/Address"
        },
        "current_location_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID number",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "x-nullable": true,
          "example": "5789345789"
        },
        "email_is_preferred": {
          "type": "boolean",
          "title": "Email",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "grade": {
          "$ref": "#/definitions/OrderPayGrade"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "personal_email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "phone_is_preferred": {
          "type": "boolean",
          "title": "Phone",
          "x-nullable": true
        },
        "residential_address": {
          "$ref": "#/definitions/Address"
        },
        "secondary_telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Alternate phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "suffix": {
          "type": "string",
          "title": "Suffix",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best contact phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "CreateShipment": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "shipmentType"
      ],
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "ppmShipment": {
          "$ref": "#/definitions/CreatePPMShipment"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "secondaryDeliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        }
      }
    },
    "CreateSignedCertificationPayload": {
      "type": "object",
      "required": [
        "date",
        "signature",
        "certification_text"
      ],
      "properties": {
        "certification_text": {
          "type": "string"
        },
        "certification_type": {
          "$ref": "#/definitions/SignedCertificationTypeCreate"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "title": "Date"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "ppm_id": {
          "$ref": "#/definitions/PpmID"
        },
        "signature": {
          "type": "string",
          "title": "Signature"
        }
      }
    },
    "CreateUpdateOrders": {
      "type": "object",
      "required": [
        "service_member_id",
        "issue_date",
        "report_by_date",
        "orders_type",
        "has_dependents",
        "spouse_has_pro_gear",
        "new_duty_location_id"
      ],
      "properties": {
        "department_indicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "grade": {
          "$ref": "#/definitions/OrderPayGrade"
        },
        "has_dependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?"
        },
        "issue_date": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Orders date",
          "example": "2018-04-26"
        },
        "new_duty_location_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "orders_number": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "orders_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "orders_type_detail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "origin_duty_location_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "report_by_date": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report-by date",
          "example": "2018-04-26"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "spouse_has_pro_gear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "CreateWeightTicketDocumentsPayload": {
      "type": "object",
      "required": [
        "personally_procured_move_id",
        "weight_ticket_set_type",
        "full_weight_ticket_missing",
        "empty_weight_ticket_missing",
        "trailer_ownership_missing"
      ],
      "properties": {
        "empty_weight": {
          "type": "integer",
          "title": "empty weight ticket recorded weight"
        },
        "empty_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing empty weight ticket"
        },
        "full_weight": {
          "type": "integer",
          "title": "full weight ticket recorded weight"
        },
        "full_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing full weight ticket"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "trailer_ownership_missing": {
          "type": "boolean",
          "title": "missing trailer ownership documentation"
        },
        "upload_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          }
        },
        "vehicle_make": {
          "type": "string",
          "title": "Vehicle make",
          "x-nullable": true
        },
        "vehicle_model": {
          "type": "string",
          "title": "Vehicle model",
          "x-nullable": true
        },
        "vehicle_nickname": {
          "type": "string",
          "title": "Vehicle nickname (ex. 'Large box truck')",
          "x-nullable": true
        },
        "weight_ticket_date": {
          "type": "string",
          "format": "date",
          "title": "Full Weight Ticket Date",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "weight_ticket_set_type": {
          "$ref": "#/definitions/WeightTicketSetType"
        }
      }
    },
    "DeptIndicator": {
      "type": "string",
      "title": "Dept. indicator",
      "enum": [
        "NAVY_AND_MARINES",
        "ARMY",
        "ARMY_CORPS_OF_ENGINEERS",
        "AIR_AND_SPACE_FORCE",
        "COAST_GUARD",
        "OFFICE_OF_SECRETARY_OF_DEFENSE"
      ],
      "x-display-value": {
        "AIR_AND_SPACE_FORCE": "57 Air Force and Space Force",
        "ARMY": "21 Army",
        "ARMY_CORPS_OF_ENGINEERS": "96 Army Corps of Engineers",
        "COAST_GUARD": "70 Coast Guard",
        "NAVY_AND_MARINES": "17 Navy and Marine Corps",
        "OFFICE_OF_SECRETARY_OF_DEFENSE": "97 Office of the Secretary of Defense"
      },
      "x-nullable": true
    },
    "Document": {
      "type": "object",
      "required": [
        "id",
        "service_member_id",
        "uploads"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "DutyLocationPayload": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address_id",
        "affiliation",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "address_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "transportation_office": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "transportation_office_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DutyLocationsPayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DutyLocationPayload"
      }
    },
    "Entitlement": {
      "type": "object",
      "properties": {
        "proGear": {
          "description": "Pro-gear weight limit as set by an Office user, distinct from the service member's default weight allotment determined by pay grade\n",
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "proGearSpouse": {
          "description": "Spouse's pro-gear weight limit as set by an Office user, distinct from the service member's default weight allotment determined by pay grade\n",
          "type": "integer",
          "x-nullable": true,
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "title",
        "detail"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "FeatureFlagBoolean": {
      "description": "A feature flag",
      "type": "object",
      "required": [
        "entity",
        "key",
        "match",
        "namespace"
      ],
      "properties": {
        "entity": {
          "type": "string",
          "example": "11111111-1111-1111-1111-111111111111"
        },
        "key": {
          "type": "string",
          "example": "flag"
        },
        "match": {
          "type": "boolean",
          "example": true
        },
        "namespace": {
          "type": "string",
          "example": "test"
        }
      }
    },
    "FeatureFlagVariant": {
      "description": "A feature flag",
      "type": "object",
      "required": [
        "entity",
        "key",
        "match",
        "variant",
        "namespace"
      ],
      "properties": {
        "entity": {
          "type": "string",
          "example": "11111111-1111-1111-1111-111111111111"
        },
        "key": {
          "type": "string",
          "example": "flag"
        },
        "match": {
          "type": "boolean",
          "example": true
        },
        "namespace": {
          "type": "string",
          "example": "test"
        },
        "variant": {
          "type": "string",
          "example": "myval"
        }
      }
    },
    "IndexEntitlements": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/WeightAllotment"
      }
    },
    "IndexMovesPayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MovePayload"
      }
    },
    "IndexServiceMemberBackupContactsPayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceMemberBackupContactPayload"
      }
    },
    "InternalMove": {
      "type": "object",
      "properties": {
        "closeoutOffice": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "a502b4f1-b9c4-4faf-8bdd-68292501bf26"
        },
        "moveCode": {
          "type": "string",
          "readOnly": true,
          "example": "HYXFJF"
        },
        "mtoShipments": {
          "$ref": "#/definitions/MTOShipments"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "orders": {
          "type": "object"
        },
        "status": {
          "type": "string",
          "readOnly": true
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "InvalidRequestResponsePayload": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LoggedInUserPayload": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "readOnly": true,
          "example": "john_bob@example.com"
        },
        "first_name": {
          "type": "string",
          "readOnly": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "office_user": {
          "$ref": "#/definitions/OfficeUser"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          },
          "x-nullable": true
        },
        "service_member": {
          "$ref": "#/definitions/ServiceMemberPayload"
        }
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "$ref": "#/definitions/MTOAgentType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$)|(^$)",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "(^[2-9]\\d{2}-\\d{3}-\\d{4}$)|(^$)",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOAgentType": {
      "type": "string",
      "title": "MTO Agent Type",
      "enum": [
        "RELEASING_AGENT",
        "RECEIVING_AGENT"
      ],
      "example": "RELEASING_AGENT"
    },
    "MTOAgents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOShipment": {
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string"
        },
        "hasSecondaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "ppmShipment": {
          "$ref": "#/definitions/PPMShipment"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "readOnly": true
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "readOnly": true
        },
        "secondaryDeliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOShipmentStatus": {
      "type": "string",
      "enum": [
        "DRAFT",
        "APPROVED",
        "SUBMITTED",
        "REJECTED"
      ],
      "readOnly": true
    },
    "MTOShipmentType": {
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "HHG",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "PPM"
      ],
      "x-display-value": {
        "HHG": "HHG",
        "INTERNATIONAL_HHG": "International HHG",
        "INTERNATIONAL_UB": "International UB",
        "PPM": "PPM"
      },
      "example": "HHG"
    },
    "MTOShipments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "MethodOfReceipt": {
      "type": "string",
      "title": "Method of Receipt",
      "enum": [
        "MIL_PAY",
        "OTHER_DD",
        "GTCC"
      ],
      "x-display-value": {
        "GTCC": "GTCC",
        "MIL_PAY": "MilPay",
        "OTHER_DD": "Other account"
      },
      "x-nullable": true
    },
    "MoveDocumentPayload": {
      "type": "object",
      "required": [
        "id",
        "move_id",
        "document",
        "title",
        "move_document_type",
        "status"
      ],
      "properties": {
        "document": {
          "$ref": "#/definitions/Document"
        },
        "empty_weight": {
          "type": "integer",
          "title": "Empty weight",
          "x-formatting": "weight",
          "x-nullable": true
        },
        "empty_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing empty weight ticket",
          "x-nullable": true
        },
        "full_weight": {
          "type": "integer",
          "title": "Full weight",
          "x-formatting": "weight",
          "x-nullable": true
        },
        "full_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing full weight ticket",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "move_document_type": {
          "$ref": "#/definitions/MoveDocumentType"
        },
        "move_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moving_expense_type": {
          "$ref": "#/definitions/MovingExpenseType"
        },
        "notes": {
          "type": "string",
          "title": "Notes",
          "x-nullable": true,
          "example": "This document is good to go!"
        },
        "payment_method": {
          "type": "string",
          "title": "Payment Method",
          "enum": [
            "OTHER",
            "GTCC"
          ],
          "x-display-value": {
            "GTCC": "GTCC",
            "OTHER": "Other account"
          }
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "receipt_missing": {
          "type": "boolean",
          "title": "missing expense receipt",
          "x-nullable": true
        },
        "requested_amount_cents": {
          "description": "unit is cents",
          "type": "integer",
          "format": "cents",
          "title": "Requested Amount",
          "minimum": 1
        },
        "status": {
          "$ref": "#/definitions/MoveDocumentStatus"
        },
        "storage_end_date": {
          "type": "string",
          "format": "date",
          "title": "End date of storage for storage expenses",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "storage_start_date": {
          "type": "string",
          "format": "date",
          "title": "Start date of storage for storage expenses",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "title": {
          "type": "string",
          "title": "Document title",
          "example": "very_useful_document.pdf"
        },
        "trailer_ownership_missing": {
          "type": "boolean",
          "title": "missing trailer ownership documentation",
          "x-nullable": true
        },
        "vehicle_make": {
          "type": "string",
          "title": "Vehicle make",
          "x-nullable": true
        },
        "vehicle_model": {
          "type": "string",
          "title": "Vehicle model",
          "x-nullable": true
        },
        "vehicle_nickname": {
          "type": "string",
          "title": "Nickname (ex. \"15-foot truck\")",
          "x-nullable": true
        },
        "weight_ticket_date": {
          "type": "string",
          "format": "date",
          "title": "Weight ticket date",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "weight_ticket_set_type": {
          "$ref": "#/definitions/WeightTicketSetType"
        }
      }
    },
    "MoveDocumentStatus": {
      "type": "string",
      "title": "Document status",
      "enum": [
        "AWAITING_REVIEW",
        "OK",
        "HAS_ISSUE",
        "EXCLUDE_FROM_CALCULATION"
      ],
      "x-display-value": {
        "AWAITING_REVIEW": "Awaiting review",
        "EXCLUDE_FROM_CALCULATION": "Exclude from calculation",
        "HAS_ISSUE": "Has issue",
        "OK": "OK"
      }
    },
    "MoveDocumentType": {
      "type": "string",
      "title": "Document type",
      "enum": [
        "OTHER",
        "WEIGHT_TICKET",
        "STORAGE_EXPENSE",
        "SHIPMENT_SUMMARY",
        "EXPENSE",
        "WEIGHT_TICKET_SET"
      ],
      "x-display-value": {
        "EXPENSE": "Expense",
        "OTHER": "Other document type",
        "SHIPMENT_SUMMARY": "Shipment summary",
        "STORAGE_EXPENSE": "Storage expense receipt",
        "WEIGHT_TICKET": "Weight ticket",
        "WEIGHT_TICKET_SET": "Weight ticket set"
      },
      "example": "EXPENSE"
    },
    "MoveDocuments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveDocumentPayload"
      }
    },
    "MovePayload": {
      "type": "object",
      "required": [
        "id",
        "orders_id",
        "locator",
        "created_at",
        "updated_at",
        "eTag"
      ],
      "properties": {
        "cancel_reason": {
          "type": "string",
          "x-nullable": true,
          "example": "Change of orders"
        },
        "closeout_office": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "mto_shipments": {
          "$ref": "#/definitions/MTOShipments"
        },
        "orders_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "submitted_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveQueueItem": {
      "type": "object",
      "required": [
        "id",
        "status",
        "locator",
        "customer_name",
        "edipi",
        "grade",
        "orders_type",
        "branch_of_service",
        "last_modified_date",
        "created_at"
      ],
      "properties": {
        "actual_move_date": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "branch_of_service": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "customer_name": {
          "type": "string",
          "title": "Customer Name",
          "example": "Thedog, Nino"
        },
        "delivered_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2017-07-21T17:32:28Z"
        },
        "destination_duty_location_name": {
          "type": "string",
          "title": "Destination",
          "x-nullable": true,
          "example": "Dover AFB"
        },
        "destination_gbloc": {
          "type": "string",
          "title": "Destination GBLOC",
          "x-nullable": true,
          "example": "LKNQ"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID #",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "example": "5789345789"
        },
        "gbl_number": {
          "type": "string",
          "title": "GBL Number",
          "x-nullable": true,
          "example": "LNK12345"
        },
        "grade": {
          "$ref": "#/definitions/OrderPayGrade"
        },
        "hhg_status": {
          "type": "string",
          "x-nullable": true,
          "example": "ACCEPTED"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "invoice_approved_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2017-07-21T17:32:28Z"
        },
        "last_modified_date": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-21T17:32:28Z"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "move_date": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "orders_type": {
          "type": "string",
          "title": "Move Type",
          "enum": [
            "PCS - OCONUS",
            "PCS - CONUS",
            "PCS + TDY - OCONUS",
            "PCS + TDY - CONUS"
          ]
        },
        "origin_duty_location_name": {
          "type": "string",
          "title": "Origin",
          "x-nullable": true,
          "example": "Dover AFB"
        },
        "origin_gbloc": {
          "type": "string",
          "title": "Origin GBLOC",
          "x-nullable": true,
          "example": "LKNQ"
        },
        "original_move_date": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "pm_survey_conducted_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2017-07-21T17:32:28Z"
        },
        "ppm_status": {
          "type": "string",
          "x-nullable": true,
          "example": "PAYMENT_REQUESTED"
        },
        "status": {
          "type": "string",
          "example": "APPROVED"
        },
        "submitted_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "weight_allotment": {
          "$ref": "#/definitions/WeightAllotment"
        }
      }
    },
    "MoveStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED",
        "NEEDS SERVICE COUNSELING",
        "APPROVALS REQUESTED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "MovesList": {
      "type": "object",
      "properties": {
        "currentMove": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InternalMove"
          }
        },
        "previousMoves": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InternalMove"
          }
        }
      }
    },
    "MovingExpense": {
      "description": "Expense information and receipts of costs incurred that can be reimbursed while moving a PPM shipment.",
      "type": "object",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "ppmShipmentId",
        "documentId",
        "document"
      ],
      "properties": {
        "amount": {
          "description": "The total amount of the expense as indicated on the receipt",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "description": "Timestamp the moving expense object was initially created in the system (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "A brief description of the expense",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "document": {
          "allOf": [
            {
              "description": "The Document object that contains all file uploads for this expense"
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "documentId": {
          "description": "The id of the Document that contains all file uploads for this expense",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique primary identifier of the Moving Expense object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "missingReceipt": {
          "description": "Indicates if the service member is missing the receipt with the proof of expense amount",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "movingExpenseType": {
          "$ref": "#/definitions/OmittableMovingExpenseType"
        },
        "paidWithGtcc": {
          "description": "Indicates if the service member used their government issued card to pay for the expense",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ppmShipmentId": {
          "description": "The PPM Shipment id that this moving expense belongs to",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reason": {
          "$ref": "#/definitions/PPMDocumentStatusReason"
        },
        "sitEndDate": {
          "description": "The date the shipment exited storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "2018-05-26"
        },
        "sitStartDate": {
          "description": "The date the shipment entered storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "2022-04-26"
        },
        "status": {
          "$ref": "#/definitions/OmittablePPMDocumentStatus"
        },
        "updatedAt": {
          "description": "Timestamp when a property of this moving expense object was last modified (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MovingExpenseType": {
      "description": "Moving Expense Type",
      "type": "string",
      "enum": [
        "CONTRACTED_EXPENSE",
        "GAS",
        "OIL",
        "OTHER",
        "PACKING_MATERIALS",
        "RENTAL_EQUIPMENT",
        "STORAGE",
        "TOLLS",
        "WEIGHING_FEE"
      ],
      "x-display-value": {
        "CONTRACTED_EXPENSE": "Contracted expense",
        "GAS": "Gas",
        "OIL": "Oil",
        "OTHER": "Other",
        "PACKING_MATERIALS": "Packing materials",
        "RENTAL_EQUIPMENT": "Rental equipment",
        "STORAGE": "Storage",
        "TOLLS": "Tolls",
        "WEIGHING_FEE": "Weighing fee"
      }
    },
    "NullableSignedCertificationType": {
      "type": "string",
      "enum": [
        "PPM_PAYMENT",
        "SHIPMENT",
        "PPM",
        "HHG"
      ],
      "x-nullable": true
    },
    "NullableString": {
      "type": "string",
      "x-go-type": {
        "import": {
          "package": "github.com/transcom/mymove/pkg/swagger/nullable"
        },
        "type": "String"
      }
    },
    "OfficeUser": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal Email Address",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best contact phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "transportation_office": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OktaUserProfileData": {
      "type": "object",
      "properties": {
        "cac_edipi": {
          "type": "string",
          "maxLength": 10,
          "x-nullable": true,
          "example": "1234567890"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9.%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "example": "user@email.com"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "login": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9.%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "example": "user@email.com"
        },
        "sub": {
          "type": "string",
          "format": "string",
          "example": "1duekdue9ekrjghf"
        }
      }
    },
    "OmittableMovingExpenseType": {
      "description": "Moving Expense Type",
      "type": "string",
      "enum": [
        "CONTRACTED_EXPENSE",
        "GAS",
        "OIL",
        "OTHER",
        "PACKING_MATERIALS",
        "RENTAL_EQUIPMENT",
        "STORAGE",
        "TOLLS",
        "WEIGHING_FEE"
      ],
      "x-display-value": {
        "CONTRACTED_EXPENSE": "Contracted expense",
        "GAS": "Gas",
        "OIL": "Oil",
        "OTHER": "Other",
        "PACKING_MATERIALS": "Packing materials",
        "RENTAL_EQUIPMENT": "Rental equipment",
        "STORAGE": "Storage",
        "TOLLS": "Tolls",
        "WEIGHING_FEE": "Weighing fee"
      },
      "x-nullable": true,
      "x-omitempty": false
    },
    "OmittablePPMDocumentStatus": {
      "description": "Status of the PPM document.",
      "type": "string",
      "enum": [
        "APPROVED",
        "EXCLUDED",
        "REJECTED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "EXCLUDED": "Excluded",
        "REJECTED": "Rejected"
      },
      "x-nullable": true,
      "x-omitempty": false
    },
    "OrderPayGrade": {
      "type": "string",
      "title": "Grade",
      "enum": [
        "E_1",
        "E_2",
        "E_3",
        "E_4",
        "E_5",
        "E_6",
        "E_7",
        "E_8",
        "E_9",
        "E_9_SPECIAL_SENIOR_ENLISTED",
        "O_1_ACADEMY_GRADUATE",
        "O_2",
        "O_3",
        "O_4",
        "O_5",
        "O_6",
        "O_7",
        "O_8",
        "O_9",
        "O_10",
        "W_1",
        "W_2",
        "W_3",
        "W_4",
        "W_5",
        "AVIATION_CADET",
        "CIVILIAN_EMPLOYEE",
        "ACADEMY_CADET",
        "MIDSHIPMAN"
      ],
      "x-display-value": {
        "ACADEMY_CADET": "Service Academy Cadet",
        "AVIATION_CADET": "Aviation Cadet",
        "CIVILIAN_EMPLOYEE": "Civilian Employee",
        "E_1": "E-1",
        "E_2": "E-2",
        "E_3": "E-3",
        "E_4": "E-4",
        "E_5": "E-5",
        "E_6": "E-6",
        "E_7": "E-7",
        "E_8": "E-8",
        "E_9": "E-9",
        "E_9_SPECIAL_SENIOR_ENLISTED": "E-9 (Special Senior Enlisted)",
        "MIDSHIPMAN": "Midshipman",
        "O_10": "O-10",
        "O_1_ACADEMY_GRADUATE": "O-1 or Service Academy Graduate",
        "O_2": "O-2",
        "O_3": "O-3",
        "O_4": "O-4",
        "O_5": "O-5",
        "O_6": "O-6",
        "O_7": "O-7",
        "O_8": "O-8",
        "O_9": "O-9",
        "W_1": "W-1",
        "W_2": "W-2",
        "W_3": "W-3",
        "W_4": "W-4",
        "W_5": "W-5"
      },
      "x-nullable": true
    },
    "Orders": {
      "type": "object",
      "required": [
        "id",
        "service_member_id",
        "issue_date",
        "report_by_date",
        "orders_type",
        "has_dependents",
        "spouse_has_pro_gear",
        "new_duty_location",
        "uploaded_orders",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 7000
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "department_indicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlement"
        },
        "grade": {
          "$ref": "#/definitions/OrderPayGrade"
        },
        "has_dependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "issue_date": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Date issued",
          "example": "2018-04-26"
        },
        "moves": {
          "$ref": "#/definitions/IndexMovesPayload"
        },
        "new_duty_location": {
          "$ref": "#/definitions/DutyLocationPayload"
        },
        "orders_number": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "orders_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "orders_type_detail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyLocationGbloc": {
          "type": "string",
          "title": "From what GBLOC do your orders originate?",
          "x-nullable": true
        },
        "origin_duty_location": {
          "x-nullable": true,
          "$ref": "#/definitions/DutyLocationPayload"
        },
        "providesServicesCounseling": {
          "type": "boolean",
          "x-omitempty": false
        },
        "report_by_date": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report by",
          "example": "2018-04-26"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "spouse_has_pro_gear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?"
        },
        "status": {
          "$ref": "#/definitions/OrdersStatus"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "uploaded_amended_orders": {
          "$ref": "#/definitions/Document"
        },
        "uploaded_amended_orders_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "uploaded_orders": {
          "$ref": "#/definitions/Document"
        }
      }
    },
    "OrdersStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "LOCAL_MOVE",
        "RETIREMENT",
        "SEPARATION",
        "BLUEBARK"
      ],
      "x-display-value": {
        "BLUEBARK": "BLUEBARK",
        "LOCAL_MOVE": "Local Move",
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station",
        "RETIREMENT": "Retirement",
        "SEPARATION": "Separation"
      }
    },
    "OrdersTypeDetail": {
      "type": "string",
      "title": "Orders type detail",
      "enum": [
        "HHG_PERMITTED",
        "PCS_TDY",
        "HHG_RESTRICTED_PROHIBITED",
        "HHG_RESTRICTED_AREA",
        "INSTRUCTION_20_WEEKS",
        "HHG_PROHIBITED_20_WEEKS",
        "DELAYED_APPROVAL"
      ],
      "x-display-value": {
        "DELAYED_APPROVAL": "Delayed Approval 20 Weeks or More",
        "HHG_PERMITTED": "Shipment of HHG Permitted",
        "HHG_PROHIBITED_20_WEEKS": "Shipment of HHG Prohibited but Authorized within 20 weeks",
        "HHG_RESTRICTED_AREA": "HHG Restricted Area-HHG Prohibited",
        "HHG_RESTRICTED_PROHIBITED": "Shipment of HHG Restricted or Prohibited",
        "INSTRUCTION_20_WEEKS": "Course of Instruction 20 Weeks or More",
        "PCS_TDY": "PCS with TDY Enroute"
      },
      "x-nullable": true
    },
    "PPMAdvanceStatus": {
      "description": "Indicates whether an advance status has been accepted, rejected, or edited, or a prime counseled PPM has been received or not received",
      "type": "string",
      "title": "PPM Advance Status",
      "enum": [
        "APPROVED",
        "REJECTED",
        "EDITED",
        "RECEIVED",
        "NOT_RECEIVED"
      ],
      "x-nullable": true
    },
    "PPMDocumentStatusReason": {
      "description": "The reason the services counselor has excluded or rejected the item.",
      "type": "string",
      "x-nullable": true,
      "x-omitempty": false
    },
    "PPMEstimateRange": {
      "type": "object",
      "required": [
        "range_min",
        "range_max"
      ],
      "properties": {
        "range_max": {
          "type": "integer",
          "title": "High estimate"
        },
        "range_min": {
          "type": "integer",
          "title": "Low estimate"
        }
      }
    },
    "PPMShipment": {
      "description": "A personally procured move is a type of shipment that a service member moves themselves.",
      "required": [
        "id",
        "shipmentId",
        "createdAt",
        "status",
        "expectedDepartureDate",
        "pickupPostalCode",
        "destinationPostalCode",
        "sitExpected",
        "eTag"
      ],
      "properties": {
        "actualDestinationPostalCode": {
          "description": "The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "actualMoveDate": {
          "description": "The actual start date of when the PPM shipment left the origin.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualPickupPostalCode": {
          "description": "The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "advanceAmountReceived": {
          "description": "The amount received for an advance, or null if no advance is received.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "advanceAmountRequested": {
          "description": "The amount requested as an advance by the service member up to a maximum percentage of the estimated incentive.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "advanceStatus": {
          "$ref": "#/definitions/PPMAdvanceStatus"
        },
        "approvedAt": {
          "description": "The timestamp of when the shipment was approved and the service member can begin their move.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "description": "Timestamp of when the PPM Shipment was initially created (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "destinationPostalCode": {
          "description": "The postal code of the destination location where goods are being delivered to.",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "example": "90210"
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "estimatedIncentive": {
          "description": "The estimated amount the government will pay the service member to move their belongings based on the moving date, locations, and shipment weight.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "estimatedWeight": {
          "description": "The estimated weight of the PPM shipment goods being moved.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to begin their move.\n",
          "type": "string",
          "format": "date"
        },
        "finalIncentive": {
          "description": "The final calculated incentive for the PPM shipment. This does not include **SIT** as it is a reimbursement.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear for themselves or their spouse.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasReceivedAdvance": {
          "description": "Indicates whether an advance was received for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasRequestedAdvance": {
          "description": "Indicates whether an advance has been requested for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "Primary auto-generated unique identifier of the PPM shipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "movingExpenses": {
          "description": "All expense documentation receipt records of this PPM shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MovingExpense"
          }
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "pickupPostalCode": {
          "description": "The postal code of the origin location where goods are being moved from.",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "example": "90210"
        },
        "proGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to the service member.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "proGearWeightTickets": {
          "description": "All pro-gear weight ticket documentation records for this PPM shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProGearWeightTicket"
          }
        },
        "reviewedAt": {
          "description": "The timestamp of when the Service Counselor has reviewed all of the closeout documents.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "secondaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "secondaryDestinationPostalCode": {
          "description": "An optional secondary location near the destination where goods will be dropped off.",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "secondaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "secondaryPickupPostalCode": {
          "type": "string",
          "format": "An optional secondary pickup location near the origin where additional goods exist.",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "shipmentId": {
          "description": "The id of the parent MTOShipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "signedCertification": {
          "$ref": "#/definitions/SignedCertification"
        },
        "sitEstimatedCost": {
          "description": "The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedDepartureDate": {
          "description": "The date that goods will exit the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedEntryDate": {
          "description": "The date that goods will first enter the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedWeight": {
          "description": "The estimated weight of the goods being put into storage.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        },
        "sitExpected": {
          "description": "Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.\n\nMust be set to ` + "`" + `true` + "`" + ` when providing ` + "`" + `sitLocation` + "`" + `, ` + "`" + `sitEstimatedWeight` + "`" + `, ` + "`" + `sitEstimatedEntryDate` + "`" + `, and ` + "`" + `sitEstimatedDepartureDate` + "`" + ` values to calculate the ` + "`" + `sitEstimatedCost` + "`" + `.\n",
          "type": "boolean"
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "spouseProGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to a spouse.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "status": {
          "$ref": "#/definitions/PPMShipmentStatus"
        },
        "submittedAt": {
          "description": "The timestamp of when the customer submitted their PPM documentation to the counselor for review.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "updatedAt": {
          "description": "Timestamp of when a property of this object was last updated (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "w2Address": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "weightTickets": {
          "$ref": "#/definitions/WeightTickets"
        }
      },
      "x-nullable": true
    },
    "PPMShipmentStatus": {
      "description": "Status of the PPM Shipment:\n  * **DRAFT**: The customer has created the PPM shipment but has not yet submitted their move for counseling.\n  * **SUBMITTED**: The shipment belongs to a move that has been submitted by the customer or has been created by a Service Counselor or Prime Contractor for a submitted move.\n  * **WAITING_ON_CUSTOMER**: The PPM shipment has been approved and the customer may now provide their actual move closeout information and documentation required to get paid.\n  * **NEEDS_ADVANCE_APPROVAL**: The shipment was counseled by the Prime Contractor and approved but an advance was requested so will need further financial approval from the government.\n  * **NEEDS_PAYMENT_APPROVAL**: The customer has provided their closeout weight tickets, receipts, and expenses and certified it for the Service Counselor to approve, exclude or reject.\n  * **PAYMENT_APPROVED**: The Service Counselor has reviewed all of the customer's PPM closeout documentation and authorizes the customer can download and submit their finalized SSW packet.\n",
      "type": "string",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "WAITING_ON_CUSTOMER",
        "NEEDS_ADVANCE_APPROVAL",
        "NEEDS_PAYMENT_APPROVAL",
        "PAYMENT_APPROVED"
      ],
      "readOnly": true
    },
    "PatchMovePayload": {
      "type": "object",
      "required": [
        "closeoutOfficeId"
      ],
      "properties": {
        "closeoutOfficeId": {
          "description": "The transportation office that will handle the PPM shipment's closeout approvals for Army and Air Force service members",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "PatchServiceMemberPayload": {
      "type": "object",
      "properties": {
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "backup_mailing_address": {
          "$ref": "#/definitions/Address"
        },
        "current_location_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID number",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "x-nullable": true,
          "example": "5789345789"
        },
        "email_is_preferred": {
          "type": "boolean",
          "title": "Email",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "personal_email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal Email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "phone_is_preferred": {
          "type": "boolean",
          "title": "Phone",
          "x-nullable": true
        },
        "residential_address": {
          "$ref": "#/definitions/Address"
        },
        "secondary_telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Alternate Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "suffix": {
          "type": "string",
          "title": "Suffix",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best Contact Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "PostDocumentPayload": {
      "type": "object",
      "properties": {
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        }
      }
    },
    "PpmID": {
      "description": "The PPM Shipment ID to associate with the assigned certificate.\n",
      "type": "string",
      "format": "uuid",
      "x-nullable": true,
      "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
    },
    "ProGearWeightTicket": {
      "description": "Pro-gear associated information and weight docs for a PPM shipment",
      "type": "object",
      "required": [
        "ppmShipmentId",
        "createdAt",
        "updatedAt",
        "documentId",
        "document"
      ],
      "properties": {
        "belongsToSelf": {
          "description": "Indicates if this information is for the customer's own pro-gear, otherwise, it's the spouse's.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "Describes the pro-gear that was moved.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "document": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the pro-gear weight."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "documentId": {
          "description": "The ID of the document that is associated with the user uploads containing the pro-gear weight.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "hasWeightTickets": {
          "description": "Indicates if the user has a weight ticket for their pro-gear, otherwise they have a constructed weight.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "The ID of the pro-gear weight ticket.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ppmShipmentId": {
          "description": "The ID of the PPM shipment that this pro-gear weight ticket is associated with.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reason": {
          "$ref": "#/definitions/PPMDocumentStatusReason"
        },
        "status": {
          "$ref": "#/definitions/OmittablePPMDocumentStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "weight": {
          "description": "Weight of the pro-gear.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        }
      }
    },
    "RateEnginePostalCodePayload": {
      "type": "object",
      "required": [
        "valid",
        "postal_code",
        "postal_code_type"
      ],
      "properties": {
        "postal_code": {
          "description": "zip code, international allowed",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "example": "'90210' or 'N15 3NL'"
        },
        "postal_code_type": {
          "type": "string",
          "enum": [
            "origin",
            "destination"
          ]
        },
        "valid": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "Reimbursement": {
      "type": "object",
      "required": [
        "requested_amount",
        "method_of_receipt"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "method_of_receipt": {
          "$ref": "#/definitions/MethodOfReceipt"
        },
        "requested_amount": {
          "description": "unit is cents",
          "type": "integer",
          "format": "cents",
          "title": "Requested Amount",
          "minimum": 1
        },
        "requested_date": {
          "type": "string",
          "format": "date",
          "title": "Requested Date",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "status": {
          "$ref": "#/definitions/ReimbursementStatus"
        }
      },
      "x-nullable": true
    },
    "ReimbursementStatus": {
      "type": "string",
      "title": "Reimbursement",
      "enum": [
        "DRAFT",
        "REQUESTED",
        "APPROVED",
        "REJECTED",
        "PAID"
      ],
      "x-nullable": true
    },
    "Role": {
      "type": "object",
      "required": [
        "id",
        "roleType",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "roleType": {
          "type": "string",
          "example": "customer"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SITLocationType": {
      "description": "The list of SIT location types.",
      "type": "string",
      "enum": [
        "ORIGIN",
        "DESTINATION"
      ]
    },
    "SavePPMShipmentSignedCertification": {
      "type": "object",
      "required": [
        "certification_text",
        "signature",
        "date"
      ],
      "properties": {
        "certification_text": {
          "description": "Text that the customer is agreeing to and signing.",
          "type": "string"
        },
        "date": {
          "description": "Date of signature",
          "type": "string",
          "format": "date"
        },
        "signature": {
          "description": "Customer signature",
          "type": "string"
        }
      }
    },
    "ServiceMemberBackupContactPayload": {
      "type": "object",
      "required": [
        "id",
        "created_at",
        "updated_at",
        "name",
        "email",
        "permission"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "Email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "title": "Name",
          "x-nullable": true,
          "example": "Susan Smith"
        },
        "permission": {
          "$ref": "#/definitions/BackupContactPermission"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ServiceMemberPayload": {
      "type": "object",
      "required": [
        "id",
        "user_id",
        "is_profile_complete",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "affiliation": {
          "title": "Branch",
          "$ref": "#/definitions/Affiliation"
        },
        "backup_contacts": {
          "$ref": "#/definitions/IndexServiceMemberBackupContactsPayload"
        },
        "backup_mailing_address": {
          "$ref": "#/definitions/Address"
        },
        "cac_validated": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID number",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "x-nullable": true,
          "example": "5789345789"
        },
        "email_is_preferred": {
          "type": "boolean",
          "title": "Email",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "grade": {
          "title": "Grade",
          "$ref": "#/definitions/OrderPayGrade"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "is_profile_complete": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Orders"
          }
        },
        "personal_email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal Email Address",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "phone_is_preferred": {
          "type": "boolean",
          "title": "Telephone",
          "x-nullable": true
        },
        "residential_address": {
          "title": "Residential Address",
          "$ref": "#/definitions/Address"
        },
        "secondary_telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Secondary Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "suffix": {
          "type": "string",
          "title": "Suffix",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best contact phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "weight_allotment": {
          "$ref": "#/definitions/WeightAllotment"
        }
      }
    },
    "SignedCertification": {
      "description": "Signed certification",
      "type": "object",
      "required": [
        "id",
        "submittingUserId",
        "moveId",
        "certificationType",
        "certificationText",
        "signature",
        "date",
        "createdAt",
        "updatedAt",
        "eTag"
      ],
      "properties": {
        "certificationText": {
          "description": "Full text that the customer agreed to and signed.",
          "type": "string"
        },
        "certificationType": {
          "$ref": "#/definitions/SignedCertificationType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "date": {
          "description": "Date that the customer signed the certification.",
          "type": "string",
          "format": "date"
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "The ID of the signed certification.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moveId": {
          "description": "The ID of the move associated with this signed certification.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ppmId": {
          "description": "The ID of the PPM shipment associated with this signed certification, if any.",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "signature": {
          "description": "The signature that the customer provided.",
          "type": "string"
        },
        "submittingUserId": {
          "description": "The ID of the user that signed.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SignedCertificationPayload": {
      "type": "object",
      "required": [
        "id",
        "move_id",
        "created_at",
        "updated_at",
        "date",
        "signature",
        "certification_text"
      ],
      "properties": {
        "certification_text": {
          "type": "string"
        },
        "certification_type": {
          "$ref": "#/definitions/NullableSignedCertificationType"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "title": "Date"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "move_id": {
          "type": "string",
          "format": "uuid"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "ppm_id": {
          "$ref": "#/definitions/PpmID"
        },
        "signature": {
          "type": "string",
          "title": "Signature"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SignedCertificationType": {
      "description": "The type of signed certification:\n  - PPM_PAYMENT: This is used when the customer has a PPM shipment that they have uploaded their documents for and are\n      ready to submit their documentation for review. When they submit, they will be asked to sign certifying the\n      information is correct.\n  - SHIPMENT: This is used when a customer submits their move with their shipments to be reviewed by office users.\n",
      "type": "string",
      "enum": [
        "PPM_PAYMENT",
        "SHIPMENT"
      ],
      "readOnly": true
    },
    "SignedCertificationTypeCreate": {
      "type": "string",
      "enum": [
        "PPM_PAYMENT",
        "SHIPMENT"
      ],
      "x-nullable": true
    },
    "SignedCertifications": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SignedCertificationPayload"
      }
    },
    "SubmitMoveForApprovalPayload": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/CreateSignedCertificationPayload"
        }
      }
    },
    "TransportationOffice": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "gbloc": {
          "type": "string",
          "pattern": "^[A-Z]{4}$",
          "example": "JENQ"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "example": 29.382973
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "example": -98.62759
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "phone_lines": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "telephone",
            "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
            "example": "212-555-5555"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TransportationOffices": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransportationOffice"
      }
    },
    "UpdateMovingExpense": {
      "type": "object",
      "required": [
        "movingExpenseType",
        "description",
        "paidWithGTCC",
        "amount",
        "missingReceipt"
      ],
      "properties": {
        "amount": {
          "description": "The total amount of the expense as indicated on the receipt",
          "type": "integer"
        },
        "description": {
          "description": "A brief description of the expense",
          "type": "string"
        },
        "missingReceipt": {
          "description": "Indicates if the customer is missing the receipt for their expense.",
          "type": "boolean"
        },
        "movingExpenseType": {
          "$ref": "#/definitions/MovingExpenseType"
        },
        "paidWithGTCC": {
          "description": "Indicates if the service member used their government issued card to pay for the expense",
          "type": "boolean"
        },
        "sitEndDate": {
          "description": "The date the shipment exited storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "example": "2018-05-26"
        },
        "sitStartDate": {
          "description": "The date the shipment entered storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "example": "2022-04-26"
        }
      }
    },
    "UpdateOktaUserProfileData": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/OktaUserProfileData"
        }
      }
    },
    "UpdatePPMShipment": {
      "type": "object",
      "properties": {
        "actualDestinationPostalCode": {
          "description": "The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "example": "90210"
        },
        "actualMoveDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "actualPickupPostalCode": {
          "description": "The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "example": "90210"
        },
        "advanceAmountReceived": {
          "description": "The amount received for an advance, or null if no advance is received.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true
        },
        "advanceAmountRequested": {
          "description": "The amount requested for an advance, or null if no advance is requested\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "destinationPostalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "example": "90210"
        },
        "estimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to move.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "finalIncentive": {
          "description": "The final calculated incentive for the PPM shipment. This does not include **SIT** as it is a reimbursement.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "hasReceivedAdvance": {
          "description": "Indicates whether an advance was received for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "hasRequestedAdvance": {
          "description": "Indicates whether an advance has been requested for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "hasSecondaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "pickupPostalCode": {
          "description": "zip code",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "example": "90210"
        },
        "proGearWeight": {
          "type": "integer",
          "x-nullable": true
        },
        "secondaryDestinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryDestinationPostalCode": {
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "$ref": "#/definitions/NullableString",
          "example": "90210"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupPostalCode": {
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "$ref": "#/definitions/NullableString",
          "example": "90210"
        },
        "sitExpected": {
          "type": "boolean",
          "x-nullable": true
        },
        "spouseProGearWeight": {
          "type": "integer",
          "x-nullable": true
        },
        "w2Address": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        }
      }
    },
    "UpdateProGearWeightTicket": {
      "type": "object",
      "properties": {
        "belongsToSelf": {
          "description": "Indicates if this information is for the customer's own pro-gear, otherwise, it's the spouse's.",
          "type": "boolean"
        },
        "description": {
          "description": "Describes the pro-gear that was moved.",
          "type": "string"
        },
        "hasWeightTickets": {
          "description": "Indicates if the user has a weight ticket for their pro-gear, otherwise they have a constructed weight.",
          "type": "boolean"
        },
        "weight": {
          "description": "Weight of the vehicle not including the pro-gear.",
          "type": "integer"
        }
      }
    },
    "UpdateServiceMemberBackupContactPayload": {
      "type": "object",
      "required": [
        "name",
        "email",
        "permission"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "email address",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "name": {
          "type": "string",
          "x-nullable": true,
          "example": "Susan Smith"
        },
        "permission": {
          "$ref": "#/definitions/BackupContactPermission"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        }
      }
    },
    "UpdateShipment": {
      "type": "object",
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "hasSecondaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "ppmShipment": {
          "$ref": "#/definitions/UpdatePPMShipment"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "secondaryDeliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        }
      }
    },
    "UpdateWeightTicket": {
      "type": "object",
      "properties": {
        "adjustedNetWeight": {
          "description": "Indicates the adjusted net weight of the vehicle",
          "type": "integer"
        },
        "allowableWeight": {
          "description": "Indicates the maximum reimbursable weight of the shipment",
          "type": "integer"
        },
        "emptyWeight": {
          "description": "Weight of the vehicle when empty.",
          "type": "integer"
        },
        "fullWeight": {
          "description": "The weight of the vehicle when full.",
          "type": "integer"
        },
        "missingEmptyWeightTicket": {
          "description": "Indicates if the customer is missing a weight ticket for the vehicle weight when empty.",
          "type": "boolean"
        },
        "missingFullWeightTicket": {
          "description": "Indicates if the customer is missing a weight ticket for the vehicle weight when full.",
          "type": "boolean"
        },
        "netWeightRemarks": {
          "description": "Remarks explaining any edits made to the net weight",
          "type": "string"
        },
        "ownsTrailer": {
          "description": "Indicates if the customer used a trailer they own for the move.",
          "type": "boolean"
        },
        "trailerMeetsCriteria": {
          "description": "Indicates if the trailer that the customer used meets all the criteria to be claimable.",
          "type": "boolean"
        },
        "vehicleDescription": {
          "description": "Description of the vehicle used for the trip. E.g. make/model, type of truck/van, etc.",
          "type": "string"
        }
      }
    },
    "Upload": {
      "description": "An uploaded file.",
      "type": "object",
      "required": [
        "id",
        "url",
        "filename",
        "contentType",
        "bytes",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "bytes": {
          "type": "integer",
          "readOnly": true
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "readOnly": true,
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "readOnly": true,
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isWeightTicket": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "INFECTED",
            "CLEAN",
            "PROCESSING"
          ],
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalidFields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "type": "object"
        }
      ],
      "properties": {
        "invalidFields": {
          "type": "object",
          "additionalProperties": {
            "description": "List of errors for the field",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "WeightAllotment": {
      "type": "object",
      "required": [
        "total_weight_self",
        "total_weight_self_plus_dependents",
        "pro_gear_weight",
        "pro_gear_weight_spouse"
      ],
      "properties": {
        "pro_gear_weight": {
          "type": "integer",
          "example": 2000
        },
        "pro_gear_weight_spouse": {
          "type": "integer",
          "example": 500
        },
        "total_weight_self": {
          "type": "integer",
          "example": 18000
        },
        "total_weight_self_plus_dependents": {
          "type": "integer",
          "example": 18000
        }
      }
    },
    "WeightTicket": {
      "description": "Vehicle and optional trailer information and weight documents used to move this PPM shipment.",
      "type": "object",
      "required": [
        "ppmShipmentId",
        "createdAt",
        "updatedAt",
        "emptyDocumentId",
        "emptyDocument",
        "fullDocument",
        "fullDocumentId",
        "proofOfTrailerOwnershipDocument",
        "proofOfTrailerOwnershipDocumentId"
      ],
      "properties": {
        "adjustedNetWeight": {
          "description": "Indicates the adjusted net weight of the vehicle",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "allowableWeight": {
          "description": "Maximum reimbursable weight.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "emptyDocument": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the vehicle weight when empty."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "emptyDocumentId": {
          "description": "ID of the document that is associated with the user uploads containing the vehicle weight when empty.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "emptyWeight": {
          "description": "Weight of the vehicle when empty.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "fullDocument": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the vehicle weight when full."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "fullDocumentId": {
          "description": "ID of the document that is associated with the user uploads containing the vehicle weight when full.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "fullWeight": {
          "description": "The weight of the vehicle when full.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "ID of this set of weight tickets.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "missingEmptyWeightTicket": {
          "description": "Indicates if the customer is missing a weight ticket for the vehicle weight when empty.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "missingFullWeightTicket": {
          "description": "Indicates if the customer is missing a weight ticket for the vehicle weight when full.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "netWeightRemarks": {
          "description": "Remarks explaining any edits made to the net weight",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ownsTrailer": {
          "description": "Indicates if the customer used a trailer they own for the move.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ppmShipmentId": {
          "description": "The ID of the PPM shipment that this set of weight tickets is for.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "proofOfTrailerOwnershipDocument": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the proof of trailer ownership."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "proofOfTrailerOwnershipDocumentId": {
          "description": "ID of the document that is associated with the user uploads containing the proof of trailer ownership.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reason": {
          "$ref": "#/definitions/PPMDocumentStatusReason"
        },
        "status": {
          "$ref": "#/definitions/OmittablePPMDocumentStatus"
        },
        "trailerMeetsCriteria": {
          "description": "Indicates if the trailer that the customer used meets all the criteria to be claimable.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "vehicleDescription": {
          "description": "Description of the vehicle used for the trip. E.g. make/model, type of truck/van, etc.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        }
      }
    },
    "WeightTicketSetType": {
      "type": "string",
      "title": "Select weight ticket type",
      "enum": [
        "CAR",
        "CAR_TRAILER",
        "BOX_TRUCK",
        "PRO_GEAR"
      ],
      "x-display-value": {
        "BOX_TRUCK": "Box truck",
        "CAR": "Car",
        "CAR_TRAILER": "Car + Trailer",
        "PRO_GEAR": "Pro-gear"
      },
      "x-nullable": true
    },
    "WeightTickets": {
      "description": "All weight tickets associated with a PPM shipment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/WeightTicket"
      },
      "x-omitempty": false
    }
  },
  "parameters": {
    "ifMatch": {
      "type": "string",
      "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
      "name": "If-Match",
      "in": "header",
      "required": true
    },
    "movingExpenseId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the moving expense",
      "name": "movingExpenseId",
      "in": "path",
      "required": true
    },
    "ppmShipmentId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the PPM shipment",
      "name": "ppmShipmentId",
      "in": "path",
      "required": true
    },
    "proGearWeightTicketId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the pro-gear weight ticket",
      "name": "proGearWeightTicketId",
      "in": "path",
      "required": true
    },
    "weightTicketId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the weight ticket",
      "name": "weightTicketId",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "Conflict": {
      "description": "The request could not be processed because of conflict in the current state of the resource.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "ServerError": {
      "description": "A server error occurred.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "The payload was unprocessable.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "responses"
    },
    {
      "name": "orders"
    },
    {
      "name": "certification"
    },
    {
      "name": "moves"
    },
    {
      "name": "office"
    },
    {
      "name": "documents"
    },
    {
      "name": "uploads"
    },
    {
      "name": "service_members"
    },
    {
      "name": "backup_contacts"
    },
    {
      "name": "duty_locations"
    },
    {
      "name": "transportation_offices"
    },
    {
      "name": "queues"
    },
    {
      "name": "entitlements"
    },
    {
      "name": "calendar"
    },
    {
      "name": "move_docs"
    },
    {
      "name": "ppm"
    },
    {
      "name": "postal_codes"
    },
    {
      "name": "addresses"
    },
    {
      "name": "mtoShipment"
    },
    {
      "name": "featureFlags"
    },
    {
      "name": "okta_profile"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Internal API is a RESTful API that enables the Customer application for\nMilMove.\n\nAll endpoints are located under ` + "`" + `/internal` + "`" + `.\n",
    "title": "MilMove Internal API",
    "contact": {
      "email": "ppp@truss.works"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/internal",
  "paths": {
    "/addresses/{addressId}": {
      "get": {
        "description": "Returns an address",
        "tags": [
          "addresses"
        ],
        "summary": "Returns an address",
        "operationId": "showAddress",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the address to return",
            "name": "addressId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the requested address",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/allmoves/{serviceMemberId}": {
      "get": {
        "description": "This endpoint gets all moves that belongs to the serviceMember by using the service members id. In a previous moves array and the current move in the current move array. The current move is the move with the latest CreatedAt date. All other moves will go into the previous move array.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moves"
        ],
        "summary": "Return the current and previous moves of a service member",
        "operationId": "getAllMoves",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moves. A successful fetch might still return zero moves.",
            "schema": {
              "$ref": "#/definitions/MovesList"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/backup_contacts/{backupContactId}": {
      "get": {
        "description": "Returns the given service member backup contact",
        "tags": [
          "backup_contacts"
        ],
        "summary": "Returns the given service member backup contact",
        "operationId": "showServiceMemberBackupContact",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member backup contact",
            "name": "backupContactId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the service member backup contact",
            "schema": {
              "$ref": "#/definitions/ServiceMemberBackupContactPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "backup contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "description": "Any fields sent in this request will be set on the backup contact referenced",
        "tags": [
          "backup_contacts"
        ],
        "summary": "Updates a service member backup contact",
        "operationId": "updateServiceMemberBackupContact",
        "parameters": [
          {
            "name": "updateServiceMemberBackupContactPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceMemberBackupContactPayload"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member backup contact",
            "name": "backupContactId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "updated instance of backup contact",
            "schema": {
              "$ref": "#/definitions/ServiceMemberBackupContactPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "backup contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/calendar/available_move_dates": {
      "get": {
        "description": "Returns available dates for the move calendar",
        "tags": [
          "calendar"
        ],
        "summary": "Returns available dates for the move calendar",
        "operationId": "showAvailableMoveDates",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "description": "Look for future available dates starting from (and including) this date",
            "name": "startDate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of available dates",
            "schema": {
              "$ref": "#/definitions/AvailableMoveDates"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/documents": {
      "post": {
        "description": "Documents represent a physical artifact such as a scanned document or a PDF file",
        "tags": [
          "documents"
        ],
        "summary": "Create a new document",
        "operationId": "createDocument",
        "parameters": [
          {
            "name": "documentPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostDocumentPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created document",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/documents/{documentId}": {
      "get": {
        "description": "Returns a document and its uploads",
        "tags": [
          "documents"
        ],
        "summary": "Returns a document",
        "operationId": "showDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to return",
            "name": "documentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the requested document",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/duty_locations": {
      "get": {
        "description": "Returns the duty locations matching the search query",
        "tags": [
          "duty_locations"
        ],
        "summary": "Returns the duty locations matching the search query",
        "operationId": "searchDutyLocations",
        "parameters": [
          {
            "type": "string",
            "description": "Search string for duty locations",
            "name": "search",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the duty location",
            "schema": {
              "$ref": "#/definitions/DutyLocationsPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "matching duty location not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/duty_locations/{dutyLocationId}/transportation_office": {
      "get": {
        "description": "Returns the given duty location's transportation office",
        "tags": [
          "transportation_offices"
        ],
        "summary": "Returns the transportation office for a given duty location",
        "operationId": "showDutyLocationTransportationOffice",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the duty location",
            "name": "dutyLocationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the transportation office for a duty location",
            "schema": {
              "$ref": "#/definitions/TransportationOffice"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "transportation office not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/entitlements": {
      "get": {
        "description": "List weight weights allotted by entitlement",
        "tags": [
          "entitlements"
        ],
        "summary": "List weight weights allotted by entitlement",
        "operationId": "indexEntitlements",
        "responses": {
          "200": {
            "description": "List of weights allotted entitlement",
            "schema": {
              "$ref": "#/definitions/IndexEntitlements"
            }
          }
        }
      }
    },
    "/feature-flags/user-boolean/{key}": {
      "post": {
        "description": "Determines if a user has a feature flag enabled. The flagContext contains context used to determine if this flag applies to the logged in user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "featureFlags"
        ],
        "summary": "Determines if a user has a feature flag enabled",
        "operationId": "booleanFeatureFlagForUser",
        "parameters": [
          {
            "type": "string",
            "description": "Feature Flag Key",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "description": "context for the feature flag request",
            "name": "flagContext",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean Feature Flag Status",
            "schema": {
              "$ref": "#/definitions/FeatureFlagBoolean"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/feature-flags/user-variant/{key}": {
      "post": {
        "description": "Determines if a user has a feature flag enabled. The flagContext contains context used to determine if this flag applies to the logged in user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "featureFlags"
        ],
        "summary": "Determines if a user has a feature flag enabled",
        "operationId": "variantFeatureFlagForUser",
        "parameters": [
          {
            "type": "string",
            "description": "Feature Flag Key",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "description": "context for the feature flag request",
            "name": "flagContext",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Variant Feature Flag Status",
            "schema": {
              "$ref": "#/definitions/FeatureFlagVariant"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/move_documents/{moveDocumentId}": {
      "put": {
        "description": "Update a move document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Updates a move document",
        "operationId": "updateMoveDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move document model",
            "name": "moveDocumentId",
            "in": "path",
            "required": true
          },
          {
            "name": "updateMoveDocument",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of move document",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move document not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "description": "Deletes a move document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Deletes a move document",
        "operationId": "deleteMoveDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move document model",
            "name": "moveDocumentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}": {
      "get": {
        "description": "Returns the given move",
        "tags": [
          "moves"
        ],
        "summary": "Returns the given move",
        "operationId": "showMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the move",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move is not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "patch": {
        "description": "Any fields sent in this request will be set on the move referenced",
        "tags": [
          "moves"
        ],
        "summary": "Patches the move",
        "operationId": "patchMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "patchMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMovePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of move",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move or closeout office is not found"
          },
          "412": {
            "description": "precondition failed"
          },
          "422": {
            "description": "unprocessable entity"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/approve": {
      "post": {
        "description": "Approves the basic details of a move. The status of the move will be updated to APPROVED",
        "tags": [
          "office"
        ],
        "summary": "Approves a move to proceed",
        "operationId": "approveMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (approved) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to approve this move"
          },
          "409": {
            "description": "the move is not in a state to be approved",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/cancel": {
      "post": {
        "description": "Cancels the basic details of a move. The status of the move will be updated to CANCELED",
        "tags": [
          "office"
        ],
        "summary": "Cancels a move",
        "operationId": "cancelMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "cancelMove",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelMove"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (canceled) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to cancel this move"
          },
          "409": {
            "description": "the move is not in a state to be canceled",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/move_documents": {
      "get": {
        "description": "Returns a list of all Move Documents associated with this move",
        "tags": [
          "move_docs"
        ],
        "summary": "Returns a list of all Move Documents associated with this move",
        "operationId": "indexMoveDocuments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of move douments",
            "schema": {
              "$ref": "#/definitions/MoveDocuments"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          }
        }
      },
      "post": {
        "description": "Created a move document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Creates a move document",
        "operationId": "createGenericMoveDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createGenericMoveDocumentPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGenericMoveDocumentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns new move document object",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to modify this move"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/orders": {
      "get": {
        "description": "Returns orders information for a move for office use",
        "tags": [
          "office"
        ],
        "summary": "Returns orders information for a move for office use",
        "operationId": "showOfficeOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the orders information for a move for office use",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/signed_certifications": {
      "get": {
        "description": "returns a list of all signed_certifications associated with the move ID",
        "tags": [
          "certification"
        ],
        "summary": "gets the signed certifications for the given move ID",
        "operationId": "indexSignedCertification",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of signed certifications",
            "schema": {
              "$ref": "#/definitions/SignedCertifications"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "description": "Create an instance of signed_certification tied to the move ID",
        "tags": [
          "certification"
        ],
        "summary": "Submits signed certification for the given move ID",
        "operationId": "createSignedCertification",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move being signed for",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createSignedCertificationPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSignedCertificationPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of signed_certification",
            "schema": {
              "$ref": "#/definitions/SignedCertificationPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to sign for this move"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/submit": {
      "post": {
        "description": "Submits a move for approval by the office. The status of the move will be updated to SUBMITTED",
        "tags": [
          "moves"
        ],
        "summary": "Submits a move for approval",
        "operationId": "submitMoveForApproval",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "submitMoveForApprovalPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitMoveForApprovalPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (submitted) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to approve this move"
          },
          "409": {
            "description": "the move is not in a state to be approved",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/submit_amended_orders": {
      "post": {
        "description": "Submits amended orders for review by the office. The status of the move will be updated to an appropriate status depending on whether it needs services counseling or not.",
        "tags": [
          "moves"
        ],
        "summary": "Submits amended orders for review",
        "operationId": "submitAmendedOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (submitted) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to approve this move"
          },
          "409": {
            "description": "the move is not in a state to be approved",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/weight_ticket": {
      "post": {
        "description": "Created a weight ticket document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Creates a weight ticket document",
        "operationId": "createWeightTicketDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createWeightTicketDocument",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWeightTicketDocumentsPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns new weight ticket document object",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to modify this move"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveTaskOrderID}/mto_shipments": {
      "get": {
        "description": "Gets all MTO shipments for the specified Move Task Order.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Gets all shipments for a move task order",
        "operationId": "listMTOShipments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of move task order for mto shipment to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all mto shipments for a move task order.",
            "schema": {
              "$ref": "#/definitions/MTOShipments"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentId}": {
      "delete": {
        "description": "Soft deletes a shipment by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Soft deletes a shipment by ID",
        "operationId": "deleteShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipment to be deleted",
            "name": "mtoShipmentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully soft deleted the shipment"
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates a specified MTO shipment.\n\nRequired fields include:\n* MTO Shipment ID required in path\n* If-Match required in headers\n* Shipment type is required in body\n\nOptional fields include:\n* New shipment status type\n* Customer requested pick-up date\n* Pick-up Address\n* Delivery Address\n* Customer Remarks\n* Releasing / Receiving agents\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipment",
        "operationId": "updateMTOShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the MTO Shipment to update",
            "name": "mtoShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the specified MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto_shipments": {
      "post": {
        "description": "Creates a MTO shipment for the specified Move Task Order.\nRequired fields include:\n* Shipment Type\n* Customer requested pick-up date\n* Pick-up Address\n* Delivery Address\n\nOptional fields include:\n* Customer Remarks\n* Releasing / Receiving agents\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOShipment",
        "operationId": "createMTOShipment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/okta-profile": {
      "get": {
        "description": "Calls a GET request to Okta's Users API and returns profile values that includes Okta data that the user provided upon registration or most recent profile update.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "okta_profile"
        ],
        "summary": "Returns Okta profile values from Okta's Users API",
        "operationId": "showOktaInfo",
        "responses": {
          "200": {
            "description": "okta profile for user",
            "schema": {
              "$ref": "#/definitions/OktaUserProfileData"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "description": "Update the user's okta profile with primary data, returns Okta profile values from the Okta's Users API reflecting updated values.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "okta_profile"
        ],
        "summary": "Update the user's okta profile with primary data, returns Okta profile values from the Okta's Users API reflecting updated values.",
        "operationId": "updateOktaInfo",
        "parameters": [
          {
            "name": "updateOktaUserProfileData",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOktaUserProfileData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "okta profile for user",
            "schema": {
              "$ref": "#/definitions/OktaUserProfileData"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "422": {
            "description": "validation error",
            "schema": {
              "description": "The payload was unprocessable.",
              "schema": {
                "$ref": "#/definitions/ValidationError"
              }
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "description": "Creates an instance of orders tied to a service member",
        "tags": [
          "orders"
        ],
        "summary": "Creates an orders model for a logged-in user",
        "operationId": "createOrders",
        "parameters": [
          {
            "name": "createOrders",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateOrders"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of orders",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/orders/{ordersId}": {
      "get": {
        "description": "Returns the given order",
        "tags": [
          "orders"
        ],
        "summary": "Returns the given order",
        "operationId": "showOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the order",
            "name": "ordersId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the order",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "order is not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "description": "All fields sent in this request will be set on the orders referenced",
        "tags": [
          "orders"
        ],
        "summary": "Updates orders",
        "operationId": "updateOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the orders model",
            "name": "ordersId",
            "in": "path",
            "required": true
          },
          {
            "name": "updateOrders",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateOrders"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of orders",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "orders not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/orders/{ordersId}/upload_amended_orders": {
      "patch": {
        "description": "Patch the amended orders for a given order",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "orders"
        ],
        "summary": "Patch the amended orders for a given order",
        "operationId": "uploadAmendedOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the order",
            "name": "ordersId",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/aoa-packet": {
      "get": {
        "description": "### Functionality\nThis endpoint downloads all uploaded move order documentation combined with the Shipment Summary Worksheet into a single PDF.\n### Errors\n* The PPMShipment must have requested an AOA.\n* The PPMShipment AOA Request must have been approved.\n",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Downloads AOA Packet form PPMShipment as a PDF",
        "operationId": "showAOAPacket",
        "responses": {
          "200": {
            "description": "AOA PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "the id for the ppmshipment with aoa to be downloaded",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/moving-expenses": {
      "post": {
        "description": "Creates a moving expense document for the PPM shipment",
        "tags": [
          "ppm"
        ],
        "summary": "Creates moving expense document",
        "operationId": "createMovingExpense",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM shipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "returns new moving expense object",
            "schema": {
              "$ref": "#/definitions/MovingExpense"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/moving-expenses/{movingExpenseId}": {
      "delete": {
        "description": "Removes a single moving expense receipt from the closeout line items for a PPM shipment. Soft deleted\nrecords are not visible in milmove, but are kept in the database.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Soft deletes a moving expense by ID",
        "operationId": "deleteMovingExpense",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM shipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the moving expense to be deleted",
            "name": "movingExpenseId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully soft deleted the moving expense"
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Any fields sent in this request will be set on the moving expense referenced",
        "tags": [
          "ppm"
        ],
        "summary": "Updates the moving expense",
        "operationId": "updateMovingExpense",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM shipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the moving expense",
            "name": "movingExpenseId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "updateMovingExpense",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMovingExpense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an updated moving expense object",
            "schema": {
              "$ref": "#/definitions/MovingExpense"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets": {
      "post": {
        "description": "Creates a PPM shipment's pro-gear weight ticket. This will only contain the minimum necessary fields for a\npro-gear weight ticket. Data should be filled in using the patch endpoint.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Creates a pro-gear weight ticket",
        "operationId": "createProGearWeightTicket",
        "responses": {
          "201": {
            "description": "returns a new pro-gear weight ticket object",
            "schema": {
              "$ref": "#/definitions/ProGearWeightTicket"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the PPM shipment",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets/{proGearWeightTicketId}": {
      "delete": {
        "description": "Removes a single pro-gear weight ticket set from the closeout line items for a PPM shipment. Soft deleted\nrecords are not visible in milmove, but are kept in the database.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Soft deletes a pro-gear weight line item by ID",
        "operationId": "deleteProGearWeightTicket",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM shipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the pro-gear weight ticket to be deleted",
            "name": "proGearWeightTicketId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully soft deleted the pro-gear weight ticket"
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates a PPM shipment's pro-gear weight ticket with new information. Only some of the fields are editable\nbecause some have to be set by the customer, e.g. the description.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates a pro-gear weight ticket",
        "operationId": "updateProGearWeightTicket",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM shipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the pro-gear weight ticket",
            "name": "proGearWeightTicketId",
            "in": "path",
            "required": true
          },
          {
            "name": "updateProGearWeightTicket",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProGearWeightTicket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an updated pro-gear weight ticket object",
            "schema": {
              "$ref": "#/definitions/ProGearWeightTicket"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/resubmit-ppm-shipment-documentation/{signedCertificationId}": {
      "put": {
        "description": "Updates customer signature along with the text they agreed to, and then routes the PPM shipment to the service\ncounselor queue for review.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates signature and routes PPM shipment to service counselor",
        "operationId": "resubmitPPMShipmentDocumentation",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the signed certification",
            "name": "signedCertificationId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "savePPMShipmentSignedCertificationPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SavePPMShipmentSignedCertification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated PPM shipment",
            "schema": {
              "$ref": "#/definitions/PPMShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the PPM shipment",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/submit-ppm-shipment-documentation": {
      "post": {
        "description": "Saves customer signature along with the text they agreed to, and then routes the PPM shipment to the service\ncounselor queue for review.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Saves signature and routes PPM shipment to service counselor",
        "operationId": "submitPPMShipmentDocumentation",
        "parameters": [
          {
            "name": "savePPMShipmentSignedCertificationPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SavePPMShipmentSignedCertification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated PPM shipment",
            "schema": {
              "$ref": "#/definitions/PPMShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the PPM shipment",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/uploads": {
      "post": {
        "description": "Uploads represent a single digital file, such as a PNG, JPEG, PDF, or spreadsheet.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Create a new upload for a PPM weight ticket, pro-gear, or moving expense document",
        "operationId": "createPPMUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the ppm shipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to add an upload to",
            "name": "documentId",
            "in": "query",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "413": {
            "description": "payload is too large"
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/weight-ticket": {
      "post": {
        "description": "Created a weight ticket document with the given information",
        "tags": [
          "ppm"
        ],
        "summary": "Creates a weight ticket document",
        "operationId": "createWeightTicket",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM shipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns new weight ticket object",
            "schema": {
              "$ref": "#/definitions/WeightTicket"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/weight-ticket/{weightTicketId}": {
      "delete": {
        "description": "Removes a single weight ticket from the closeout line items for a PPM shipment. Soft deleted\nrecords are not visible in milmove, but are kept in the database. This may change the PPM shipment's final\nincentive.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Soft deletes a weight ticket by ID",
        "operationId": "deleteWeightTicket",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM shipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the weight ticket to be deleted",
            "name": "weightTicketId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully soft deleted the weight ticket"
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates a weight ticket document with the new information",
        "tags": [
          "ppm"
        ],
        "summary": "Updates a weight ticket document",
        "operationId": "updateWeightTicket",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM shipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the weight ticket",
            "name": "weightTicketId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "updateWeightTicketPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateWeightTicket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an updated weight ticket object",
            "schema": {
              "$ref": "#/definitions/WeightTicket"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/queues/{queueType}": {
      "get": {
        "description": "Show all moves in a queue",
        "tags": [
          "queues"
        ],
        "summary": "Show all moves in a queue",
        "operationId": "showQueue",
        "parameters": [
          {
            "enum": [
              "new",
              "ppm_payment_requested",
              "all",
              "ppm_approved",
              "ppm_completed"
            ],
            "type": "string",
            "description": "Queue type to show",
            "name": "queueType",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list all moves in the specified queue",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MoveQueueItem"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to access this queue"
          },
          "404": {
            "description": "move queue item is not found"
          }
        }
      }
    },
    "/rate_engine_postal_codes/{postal_code}": {
      "get": {
        "description": "Verifies if a zipcode is valid for origin or destination location for a move.",
        "tags": [
          "postal_codes"
        ],
        "summary": "Validate if a zipcode is valid for origin or destination location for a move.",
        "operationId": "validatePostalCodeWithRateData",
        "parameters": [
          {
            "pattern": "^(\\d{5}?)$",
            "type": "string",
            "format": "zip",
            "name": "postal_code",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "origin",
              "destination"
            ],
            "type": "string",
            "name": "postal_code_type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "postal_code is valid or invalid",
            "schema": {
              "$ref": "#/definitions/RateEnginePostalCodePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/reimbursement/{reimbursementId}/approve": {
      "post": {
        "description": "Sets the status of the reimbursement to APPROVED.",
        "tags": [
          "office"
        ],
        "summary": "Approves the reimbursement",
        "operationId": "approveReimbursement",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the reimbursement being approved",
            "name": "reimbursementId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of reimbursement",
            "schema": {
              "$ref": "#/definitions/Reimbursement"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members": {
      "post": {
        "description": "Creates an instance of a service member tied to a user",
        "tags": [
          "service_members"
        ],
        "summary": "Creates service member for a logged-in user",
        "operationId": "createServiceMember",
        "parameters": [
          {
            "name": "createServiceMemberPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceMemberPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of service member",
            "schema": {
              "$ref": "#/definitions/ServiceMemberPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members/{serviceMemberId}": {
      "get": {
        "description": "Returns the given service member",
        "tags": [
          "service_members"
        ],
        "summary": "Returns the given service member",
        "operationId": "showServiceMember",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the service member",
            "schema": {
              "$ref": "#/definitions/ServiceMemberPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "patch": {
        "description": "Any fields sent in this request will be set on the service member referenced",
        "tags": [
          "service_members"
        ],
        "summary": "Patches the service member",
        "operationId": "patchServiceMember",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          },
          {
            "name": "patchServiceMemberPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchServiceMemberPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of service member",
            "schema": {
              "$ref": "#/definitions/ServiceMemberPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members/{serviceMemberId}/backup_contacts": {
      "get": {
        "description": "List all service member backup contacts",
        "tags": [
          "backup_contacts"
        ],
        "summary": "List all service member backup contacts",
        "operationId": "indexServiceMemberBackupContacts",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of service member backup contacts",
            "schema": {
              "$ref": "#/definitions/IndexServiceMemberBackupContactsPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to see this backup contact"
          },
          "404": {
            "description": "contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "description": "Creates an instance of a backup contact tied to a service member user",
        "tags": [
          "backup_contacts"
        ],
        "summary": "Submits backup contact for a logged-in user",
        "operationId": "createServiceMemberBackupContact",
        "parameters": [
          {
            "name": "createBackupContactPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceMemberBackupContactPayload"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of service member backup contact",
            "schema": {
              "$ref": "#/definitions/ServiceMemberBackupContactPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to create this backup contact"
          },
          "404": {
            "description": "contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members/{serviceMemberId}/current_orders": {
      "get": {
        "description": "Returns orders",
        "tags": [
          "service_members"
        ],
        "summary": "Returns the latest orders for a given service member",
        "operationId": "showServiceMemberOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the service member",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/transportation-offices": {
      "get": {
        "description": "Returns the transportation offices matching the search query",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transportation_offices"
        ],
        "summary": "Returns the transportation offices matching the search query",
        "operationId": "getTransportationOffices",
        "parameters": [
          {
            "minLength": 2,
            "type": "string",
            "description": "Search string for transportation offices",
            "name": "search",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transportation offices",
            "schema": {
              "$ref": "#/definitions/TransportationOffices"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/uploads": {
      "post": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "uploads"
        ],
        "summary": "Create a new upload",
        "operationId": "createUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to add an upload to",
            "name": "documentId",
            "in": "query"
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "delete": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "tags": [
          "uploads"
        ],
        "summary": "Deletes a collection of uploads",
        "operationId": "deleteUploads",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Array of UUIDs to be deleted",
            "name": "uploadIds",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/uploads/{uploadId}": {
      "delete": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "tags": [
          "uploads"
        ],
        "summary": "Deletes an upload",
        "operationId": "deleteUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the upload to be deleted",
            "name": "uploadId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the order that the upload belongs to",
            "name": "orderId",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users/is_logged_in": {
      "get": {
        "description": "Returns boolean as to whether the user is logged in",
        "tags": [
          "users"
        ],
        "summary": "Returns boolean as to whether the user is logged in",
        "operationId": "isLoggedInUser",
        "responses": {
          "200": {
            "description": "Currently logged in user",
            "schema": {
              "type": "object",
              "required": [
                "isLoggedIn"
              ],
              "properties": {
                "isLoggedIn": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users/logged_in": {
      "get": {
        "description": "Returns the user info for the currently logged in user",
        "tags": [
          "users"
        ],
        "summary": "Returns the user info for the currently logged in user",
        "operationId": "showLoggedInUser",
        "responses": {
          "200": {
            "description": "Currently logged in user",
            "schema": {
              "$ref": "#/definitions/LoggedInUserPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "A postal address",
      "type": "object",
      "required": [
        "streetAddress1",
        "city",
        "state",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "Affiliation": {
      "description": "Military branch of service",
      "type": "string",
      "title": "Branch of service",
      "enum": [
        "ARMY",
        "NAVY",
        "MARINES",
        "AIR_FORCE",
        "COAST_GUARD",
        "SPACE_FORCE",
        "OTHER"
      ],
      "x-display-value": {
        "AIR_FORCE": "Air Force",
        "ARMY": "Army",
        "COAST_GUARD": "Coast Guard",
        "MARINES": "Marine Corps",
        "NAVY": "Navy",
        "OTHER": "OTHER",
        "SPACE_FORCE": "Space Force"
      },
      "x-nullable": true
    },
    "AvailableMoveDates": {
      "type": "object",
      "required": [
        "start_date",
        "available"
      ],
      "properties": {
        "available": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "example": "2018-09-25"
        }
      }
    },
    "BackupContactPermission": {
      "type": "string",
      "title": "Permissions",
      "enum": [
        "NONE",
        "VIEW",
        "EDIT"
      ],
      "x-display-value": {
        "EDIT": "View and edit all move details",
        "NONE": "Contact Only",
        "VIEW": "View all move details"
      }
    },
    "CancelMove": {
      "type": "object",
      "required": [
        "cancel_reason"
      ],
      "properties": {
        "cancel_reason": {
          "type": "string",
          "x-nullable": true,
          "example": "Change of orders"
        }
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateGenericMoveDocumentPayload": {
      "type": "object",
      "required": [
        "upload_ids",
        "title",
        "move_document_type"
      ],
      "properties": {
        "move_document_type": {
          "$ref": "#/definitions/MoveDocumentType"
        },
        "notes": {
          "type": "string",
          "title": "Notes",
          "x-nullable": true,
          "example": "This document is good to go!"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "title": {
          "type": "string",
          "example": "very_useful_document.pdf"
        },
        "upload_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          }
        }
      }
    },
    "CreatePPMShipment": {
      "description": "A personally procured move is a type of shipment that a service members moves themselves.",
      "required": [
        "expectedDepartureDate",
        "pickupPostalCode",
        "pickupAddress",
        "destinationPostalCode",
        "destinationAddress",
        "sitExpected"
      ],
      "properties": {
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "destinationPostalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "example": "90210"
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to move.\n",
          "type": "string",
          "format": "date"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "pickupPostalCode": {
          "description": "zip code",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "example": "90210"
        },
        "secondaryDestinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryDestinationPostalCode": {
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "$ref": "#/definitions/NullableString",
          "example": "90210"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupPostalCode": {
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "$ref": "#/definitions/NullableString",
          "example": "90210"
        },
        "sitExpected": {
          "type": "boolean"
        }
      }
    },
    "CreateServiceMemberBackupContactPayload": {
      "type": "object",
      "required": [
        "name",
        "email",
        "permission"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "Email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@exmaple.com"
        },
        "name": {
          "type": "string",
          "title": "Name",
          "x-nullable": true,
          "example": "Susan Smith"
        },
        "permission": {
          "$ref": "#/definitions/BackupContactPermission"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        }
      }
    },
    "CreateServiceMemberPayload": {
      "type": "object",
      "properties": {
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "backup_mailing_address": {
          "$ref": "#/definitions/Address"
        },
        "current_location_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID number",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "x-nullable": true,
          "example": "5789345789"
        },
        "email_is_preferred": {
          "type": "boolean",
          "title": "Email",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "grade": {
          "$ref": "#/definitions/OrderPayGrade"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "personal_email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "phone_is_preferred": {
          "type": "boolean",
          "title": "Phone",
          "x-nullable": true
        },
        "residential_address": {
          "$ref": "#/definitions/Address"
        },
        "secondary_telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Alternate phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "suffix": {
          "type": "string",
          "title": "Suffix",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best contact phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "CreateShipment": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "shipmentType"
      ],
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "ppmShipment": {
          "$ref": "#/definitions/CreatePPMShipment"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "secondaryDeliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        }
      }
    },
    "CreateSignedCertificationPayload": {
      "type": "object",
      "required": [
        "date",
        "signature",
        "certification_text"
      ],
      "properties": {
        "certification_text": {
          "type": "string"
        },
        "certification_type": {
          "$ref": "#/definitions/SignedCertificationTypeCreate"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "title": "Date"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "ppm_id": {
          "$ref": "#/definitions/PpmID"
        },
        "signature": {
          "type": "string",
          "title": "Signature"
        }
      }
    },
    "CreateUpdateOrders": {
      "type": "object",
      "required": [
        "service_member_id",
        "issue_date",
        "report_by_date",
        "orders_type",
        "has_dependents",
        "spouse_has_pro_gear",
        "new_duty_location_id"
      ],
      "properties": {
        "department_indicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "grade": {
          "$ref": "#/definitions/OrderPayGrade"
        },
        "has_dependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?"
        },
        "issue_date": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Orders date",
          "example": "2018-04-26"
        },
        "new_duty_location_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "orders_number": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "orders_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "orders_type_detail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "origin_duty_location_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "report_by_date": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report-by date",
          "example": "2018-04-26"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "spouse_has_pro_gear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "CreateWeightTicketDocumentsPayload": {
      "type": "object",
      "required": [
        "personally_procured_move_id",
        "weight_ticket_set_type",
        "full_weight_ticket_missing",
        "empty_weight_ticket_missing",
        "trailer_ownership_missing"
      ],
      "properties": {
        "empty_weight": {
          "type": "integer",
          "title": "empty weight ticket recorded weight",
          "minimum": 0
        },
        "empty_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing empty weight ticket"
        },
        "full_weight": {
          "type": "integer",
          "title": "full weight ticket recorded weight",
          "minimum": 0
        },
        "full_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing full weight ticket"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "trailer_ownership_missing": {
          "type": "boolean",
          "title": "missing trailer ownership documentation"
        },
        "upload_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          }
        },
        "vehicle_make": {
          "type": "string",
          "title": "Vehicle make",
          "x-nullable": true
        },
        "vehicle_model": {
          "type": "string",
          "title": "Vehicle model",
          "x-nullable": true
        },
        "vehicle_nickname": {
          "type": "string",
          "title": "Vehicle nickname (ex. 'Large box truck')",
          "x-nullable": true
        },
        "weight_ticket_date": {
          "type": "string",
          "format": "date",
          "title": "Full Weight Ticket Date",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "weight_ticket_set_type": {
          "$ref": "#/definitions/WeightTicketSetType"
        }
      }
    },
    "DeptIndicator": {
      "type": "string",
      "title": "Dept. indicator",
      "enum": [
        "NAVY_AND_MARINES",
        "ARMY",
        "ARMY_CORPS_OF_ENGINEERS",
        "AIR_AND_SPACE_FORCE",
        "COAST_GUARD",
        "OFFICE_OF_SECRETARY_OF_DEFENSE"
      ],
      "x-display-value": {
        "AIR_AND_SPACE_FORCE": "57 Air Force and Space Force",
        "ARMY": "21 Army",
        "ARMY_CORPS_OF_ENGINEERS": "96 Army Corps of Engineers",
        "COAST_GUARD": "70 Coast Guard",
        "NAVY_AND_MARINES": "17 Navy and Marine Corps",
        "OFFICE_OF_SECRETARY_OF_DEFENSE": "97 Office of the Secretary of Defense"
      },
      "x-nullable": true
    },
    "Document": {
      "type": "object",
      "required": [
        "id",
        "service_member_id",
        "uploads"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "DutyLocationPayload": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address_id",
        "affiliation",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "address_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "transportation_office": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "transportation_office_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DutyLocationsPayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DutyLocationPayload"
      }
    },
    "Entitlement": {
      "type": "object",
      "properties": {
        "proGear": {
          "description": "Pro-gear weight limit as set by an Office user, distinct from the service member's default weight allotment determined by pay grade\n",
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "proGearSpouse": {
          "description": "Spouse's pro-gear weight limit as set by an Office user, distinct from the service member's default weight allotment determined by pay grade\n",
          "type": "integer",
          "x-nullable": true,
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "title",
        "detail"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "FeatureFlagBoolean": {
      "description": "A feature flag",
      "type": "object",
      "required": [
        "entity",
        "key",
        "match",
        "namespace"
      ],
      "properties": {
        "entity": {
          "type": "string",
          "example": "11111111-1111-1111-1111-111111111111"
        },
        "key": {
          "type": "string",
          "example": "flag"
        },
        "match": {
          "type": "boolean",
          "example": true
        },
        "namespace": {
          "type": "string",
          "example": "test"
        }
      }
    },
    "FeatureFlagVariant": {
      "description": "A feature flag",
      "type": "object",
      "required": [
        "entity",
        "key",
        "match",
        "variant",
        "namespace"
      ],
      "properties": {
        "entity": {
          "type": "string",
          "example": "11111111-1111-1111-1111-111111111111"
        },
        "key": {
          "type": "string",
          "example": "flag"
        },
        "match": {
          "type": "boolean",
          "example": true
        },
        "namespace": {
          "type": "string",
          "example": "test"
        },
        "variant": {
          "type": "string",
          "example": "myval"
        }
      }
    },
    "IndexEntitlements": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/WeightAllotment"
      }
    },
    "IndexMovesPayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MovePayload"
      }
    },
    "IndexServiceMemberBackupContactsPayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceMemberBackupContactPayload"
      }
    },
    "InternalMove": {
      "type": "object",
      "properties": {
        "closeoutOffice": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "a502b4f1-b9c4-4faf-8bdd-68292501bf26"
        },
        "moveCode": {
          "type": "string",
          "readOnly": true,
          "example": "HYXFJF"
        },
        "mtoShipments": {
          "$ref": "#/definitions/MTOShipments"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "orders": {
          "type": "object"
        },
        "status": {
          "type": "string",
          "readOnly": true
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "InvalidRequestResponsePayload": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LoggedInUserPayload": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "readOnly": true,
          "example": "john_bob@example.com"
        },
        "first_name": {
          "type": "string",
          "readOnly": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "office_user": {
          "$ref": "#/definitions/OfficeUser"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          },
          "x-nullable": true
        },
        "service_member": {
          "$ref": "#/definitions/ServiceMemberPayload"
        }
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "$ref": "#/definitions/MTOAgentType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$)|(^$)",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "(^[2-9]\\d{2}-\\d{3}-\\d{4}$)|(^$)",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOAgentType": {
      "type": "string",
      "title": "MTO Agent Type",
      "enum": [
        "RELEASING_AGENT",
        "RECEIVING_AGENT"
      ],
      "example": "RELEASING_AGENT"
    },
    "MTOAgents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOShipment": {
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string"
        },
        "hasSecondaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "ppmShipment": {
          "$ref": "#/definitions/PPMShipment"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "readOnly": true
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "readOnly": true
        },
        "secondaryDeliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOShipmentStatus": {
      "type": "string",
      "enum": [
        "DRAFT",
        "APPROVED",
        "SUBMITTED",
        "REJECTED"
      ],
      "readOnly": true
    },
    "MTOShipmentType": {
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "HHG",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "PPM"
      ],
      "x-display-value": {
        "HHG": "HHG",
        "INTERNATIONAL_HHG": "International HHG",
        "INTERNATIONAL_UB": "International UB",
        "PPM": "PPM"
      },
      "example": "HHG"
    },
    "MTOShipments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "MethodOfReceipt": {
      "type": "string",
      "title": "Method of Receipt",
      "enum": [
        "MIL_PAY",
        "OTHER_DD",
        "GTCC"
      ],
      "x-display-value": {
        "GTCC": "GTCC",
        "MIL_PAY": "MilPay",
        "OTHER_DD": "Other account"
      },
      "x-nullable": true
    },
    "MoveDocumentPayload": {
      "type": "object",
      "required": [
        "id",
        "move_id",
        "document",
        "title",
        "move_document_type",
        "status"
      ],
      "properties": {
        "document": {
          "$ref": "#/definitions/Document"
        },
        "empty_weight": {
          "type": "integer",
          "title": "Empty weight",
          "minimum": 0,
          "x-formatting": "weight",
          "x-nullable": true
        },
        "empty_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing empty weight ticket",
          "x-nullable": true
        },
        "full_weight": {
          "type": "integer",
          "title": "Full weight",
          "minimum": 0,
          "x-formatting": "weight",
          "x-nullable": true
        },
        "full_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing full weight ticket",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "move_document_type": {
          "$ref": "#/definitions/MoveDocumentType"
        },
        "move_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moving_expense_type": {
          "$ref": "#/definitions/MovingExpenseType"
        },
        "notes": {
          "type": "string",
          "title": "Notes",
          "x-nullable": true,
          "example": "This document is good to go!"
        },
        "payment_method": {
          "type": "string",
          "title": "Payment Method",
          "enum": [
            "OTHER",
            "GTCC"
          ],
          "x-display-value": {
            "GTCC": "GTCC",
            "OTHER": "Other account"
          }
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "receipt_missing": {
          "type": "boolean",
          "title": "missing expense receipt",
          "x-nullable": true
        },
        "requested_amount_cents": {
          "description": "unit is cents",
          "type": "integer",
          "format": "cents",
          "title": "Requested Amount",
          "minimum": 1
        },
        "status": {
          "$ref": "#/definitions/MoveDocumentStatus"
        },
        "storage_end_date": {
          "type": "string",
          "format": "date",
          "title": "End date of storage for storage expenses",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "storage_start_date": {
          "type": "string",
          "format": "date",
          "title": "Start date of storage for storage expenses",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "title": {
          "type": "string",
          "title": "Document title",
          "example": "very_useful_document.pdf"
        },
        "trailer_ownership_missing": {
          "type": "boolean",
          "title": "missing trailer ownership documentation",
          "x-nullable": true
        },
        "vehicle_make": {
          "type": "string",
          "title": "Vehicle make",
          "x-nullable": true
        },
        "vehicle_model": {
          "type": "string",
          "title": "Vehicle model",
          "x-nullable": true
        },
        "vehicle_nickname": {
          "type": "string",
          "title": "Nickname (ex. \"15-foot truck\")",
          "x-nullable": true
        },
        "weight_ticket_date": {
          "type": "string",
          "format": "date",
          "title": "Weight ticket date",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "weight_ticket_set_type": {
          "$ref": "#/definitions/WeightTicketSetType"
        }
      }
    },
    "MoveDocumentStatus": {
      "type": "string",
      "title": "Document status",
      "enum": [
        "AWAITING_REVIEW",
        "OK",
        "HAS_ISSUE",
        "EXCLUDE_FROM_CALCULATION"
      ],
      "x-display-value": {
        "AWAITING_REVIEW": "Awaiting review",
        "EXCLUDE_FROM_CALCULATION": "Exclude from calculation",
        "HAS_ISSUE": "Has issue",
        "OK": "OK"
      }
    },
    "MoveDocumentType": {
      "type": "string",
      "title": "Document type",
      "enum": [
        "OTHER",
        "WEIGHT_TICKET",
        "STORAGE_EXPENSE",
        "SHIPMENT_SUMMARY",
        "EXPENSE",
        "WEIGHT_TICKET_SET"
      ],
      "x-display-value": {
        "EXPENSE": "Expense",
        "OTHER": "Other document type",
        "SHIPMENT_SUMMARY": "Shipment summary",
        "STORAGE_EXPENSE": "Storage expense receipt",
        "WEIGHT_TICKET": "Weight ticket",
        "WEIGHT_TICKET_SET": "Weight ticket set"
      },
      "example": "EXPENSE"
    },
    "MoveDocuments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveDocumentPayload"
      }
    },
    "MovePayload": {
      "type": "object",
      "required": [
        "id",
        "orders_id",
        "locator",
        "created_at",
        "updated_at",
        "eTag"
      ],
      "properties": {
        "cancel_reason": {
          "type": "string",
          "x-nullable": true,
          "example": "Change of orders"
        },
        "closeout_office": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "mto_shipments": {
          "$ref": "#/definitions/MTOShipments"
        },
        "orders_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "submitted_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveQueueItem": {
      "type": "object",
      "required": [
        "id",
        "status",
        "locator",
        "customer_name",
        "edipi",
        "grade",
        "orders_type",
        "branch_of_service",
        "last_modified_date",
        "created_at"
      ],
      "properties": {
        "actual_move_date": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "branch_of_service": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "customer_name": {
          "type": "string",
          "title": "Customer Name",
          "example": "Thedog, Nino"
        },
        "delivered_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2017-07-21T17:32:28Z"
        },
        "destination_duty_location_name": {
          "type": "string",
          "title": "Destination",
          "x-nullable": true,
          "example": "Dover AFB"
        },
        "destination_gbloc": {
          "type": "string",
          "title": "Destination GBLOC",
          "x-nullable": true,
          "example": "LKNQ"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID #",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "example": "5789345789"
        },
        "gbl_number": {
          "type": "string",
          "title": "GBL Number",
          "x-nullable": true,
          "example": "LNK12345"
        },
        "grade": {
          "$ref": "#/definitions/OrderPayGrade"
        },
        "hhg_status": {
          "type": "string",
          "x-nullable": true,
          "example": "ACCEPTED"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "invoice_approved_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2017-07-21T17:32:28Z"
        },
        "last_modified_date": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-21T17:32:28Z"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "move_date": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "orders_type": {
          "type": "string",
          "title": "Move Type",
          "enum": [
            "PCS - OCONUS",
            "PCS - CONUS",
            "PCS + TDY - OCONUS",
            "PCS + TDY - CONUS"
          ]
        },
        "origin_duty_location_name": {
          "type": "string",
          "title": "Origin",
          "x-nullable": true,
          "example": "Dover AFB"
        },
        "origin_gbloc": {
          "type": "string",
          "title": "Origin GBLOC",
          "x-nullable": true,
          "example": "LKNQ"
        },
        "original_move_date": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "pm_survey_conducted_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2017-07-21T17:32:28Z"
        },
        "ppm_status": {
          "type": "string",
          "x-nullable": true,
          "example": "PAYMENT_REQUESTED"
        },
        "status": {
          "type": "string",
          "example": "APPROVED"
        },
        "submitted_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "weight_allotment": {
          "$ref": "#/definitions/WeightAllotment"
        }
      }
    },
    "MoveStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED",
        "NEEDS SERVICE COUNSELING",
        "APPROVALS REQUESTED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "MovesList": {
      "type": "object",
      "properties": {
        "currentMove": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InternalMove"
          }
        },
        "previousMoves": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InternalMove"
          }
        }
      }
    },
    "MovingExpense": {
      "description": "Expense information and receipts of costs incurred that can be reimbursed while moving a PPM shipment.",
      "type": "object",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "ppmShipmentId",
        "documentId",
        "document"
      ],
      "properties": {
        "amount": {
          "description": "The total amount of the expense as indicated on the receipt",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "description": "Timestamp the moving expense object was initially created in the system (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "A brief description of the expense",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "document": {
          "allOf": [
            {
              "description": "The Document object that contains all file uploads for this expense"
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "documentId": {
          "description": "The id of the Document that contains all file uploads for this expense",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique primary identifier of the Moving Expense object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "missingReceipt": {
          "description": "Indicates if the service member is missing the receipt with the proof of expense amount",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "movingExpenseType": {
          "$ref": "#/definitions/OmittableMovingExpenseType"
        },
        "paidWithGtcc": {
          "description": "Indicates if the service member used their government issued card to pay for the expense",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ppmShipmentId": {
          "description": "The PPM Shipment id that this moving expense belongs to",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reason": {
          "$ref": "#/definitions/PPMDocumentStatusReason"
        },
        "sitEndDate": {
          "description": "The date the shipment exited storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "2018-05-26"
        },
        "sitStartDate": {
          "description": "The date the shipment entered storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "2022-04-26"
        },
        "status": {
          "$ref": "#/definitions/OmittablePPMDocumentStatus"
        },
        "updatedAt": {
          "description": "Timestamp when a property of this moving expense object was last modified (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MovingExpenseType": {
      "description": "Moving Expense Type",
      "type": "string",
      "enum": [
        "CONTRACTED_EXPENSE",
        "GAS",
        "OIL",
        "OTHER",
        "PACKING_MATERIALS",
        "RENTAL_EQUIPMENT",
        "STORAGE",
        "TOLLS",
        "WEIGHING_FEE"
      ],
      "x-display-value": {
        "CONTRACTED_EXPENSE": "Contracted expense",
        "GAS": "Gas",
        "OIL": "Oil",
        "OTHER": "Other",
        "PACKING_MATERIALS": "Packing materials",
        "RENTAL_EQUIPMENT": "Rental equipment",
        "STORAGE": "Storage",
        "TOLLS": "Tolls",
        "WEIGHING_FEE": "Weighing fee"
      }
    },
    "NullableSignedCertificationType": {
      "type": "string",
      "enum": [
        "PPM_PAYMENT",
        "SHIPMENT",
        "PPM",
        "HHG"
      ],
      "x-nullable": true
    },
    "NullableString": {
      "type": "string",
      "x-go-type": {
        "import": {
          "package": "github.com/transcom/mymove/pkg/swagger/nullable"
        },
        "type": "String"
      }
    },
    "OfficeUser": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal Email Address",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best contact phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "transportation_office": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OktaUserProfileData": {
      "type": "object",
      "properties": {
        "cac_edipi": {
          "type": "string",
          "maxLength": 10,
          "x-nullable": true,
          "example": "1234567890"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9.%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "example": "user@email.com"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "login": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9.%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "example": "user@email.com"
        },
        "sub": {
          "type": "string",
          "format": "string",
          "example": "1duekdue9ekrjghf"
        }
      }
    },
    "OmittableMovingExpenseType": {
      "description": "Moving Expense Type",
      "type": "string",
      "enum": [
        "CONTRACTED_EXPENSE",
        "GAS",
        "OIL",
        "OTHER",
        "PACKING_MATERIALS",
        "RENTAL_EQUIPMENT",
        "STORAGE",
        "TOLLS",
        "WEIGHING_FEE"
      ],
      "x-display-value": {
        "CONTRACTED_EXPENSE": "Contracted expense",
        "GAS": "Gas",
        "OIL": "Oil",
        "OTHER": "Other",
        "PACKING_MATERIALS": "Packing materials",
        "RENTAL_EQUIPMENT": "Rental equipment",
        "STORAGE": "Storage",
        "TOLLS": "Tolls",
        "WEIGHING_FEE": "Weighing fee"
      },
      "x-nullable": true,
      "x-omitempty": false
    },
    "OmittablePPMDocumentStatus": {
      "description": "Status of the PPM document.",
      "type": "string",
      "enum": [
        "APPROVED",
        "EXCLUDED",
        "REJECTED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "EXCLUDED": "Excluded",
        "REJECTED": "Rejected"
      },
      "x-nullable": true,
      "x-omitempty": false
    },
    "OrderPayGrade": {
      "type": "string",
      "title": "Grade",
      "enum": [
        "E_1",
        "E_2",
        "E_3",
        "E_4",
        "E_5",
        "E_6",
        "E_7",
        "E_8",
        "E_9",
        "E_9_SPECIAL_SENIOR_ENLISTED",
        "O_1_ACADEMY_GRADUATE",
        "O_2",
        "O_3",
        "O_4",
        "O_5",
        "O_6",
        "O_7",
        "O_8",
        "O_9",
        "O_10",
        "W_1",
        "W_2",
        "W_3",
        "W_4",
        "W_5",
        "AVIATION_CADET",
        "CIVILIAN_EMPLOYEE",
        "ACADEMY_CADET",
        "MIDSHIPMAN"
      ],
      "x-display-value": {
        "ACADEMY_CADET": "Service Academy Cadet",
        "AVIATION_CADET": "Aviation Cadet",
        "CIVILIAN_EMPLOYEE": "Civilian Employee",
        "E_1": "E-1",
        "E_2": "E-2",
        "E_3": "E-3",
        "E_4": "E-4",
        "E_5": "E-5",
        "E_6": "E-6",
        "E_7": "E-7",
        "E_8": "E-8",
        "E_9": "E-9",
        "E_9_SPECIAL_SENIOR_ENLISTED": "E-9 (Special Senior Enlisted)",
        "MIDSHIPMAN": "Midshipman",
        "O_10": "O-10",
        "O_1_ACADEMY_GRADUATE": "O-1 or Service Academy Graduate",
        "O_2": "O-2",
        "O_3": "O-3",
        "O_4": "O-4",
        "O_5": "O-5",
        "O_6": "O-6",
        "O_7": "O-7",
        "O_8": "O-8",
        "O_9": "O-9",
        "W_1": "W-1",
        "W_2": "W-2",
        "W_3": "W-3",
        "W_4": "W-4",
        "W_5": "W-5"
      },
      "x-nullable": true
    },
    "Orders": {
      "type": "object",
      "required": [
        "id",
        "service_member_id",
        "issue_date",
        "report_by_date",
        "orders_type",
        "has_dependents",
        "spouse_has_pro_gear",
        "new_duty_location",
        "uploaded_orders",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 7000
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "department_indicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlement"
        },
        "grade": {
          "$ref": "#/definitions/OrderPayGrade"
        },
        "has_dependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "issue_date": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Date issued",
          "example": "2018-04-26"
        },
        "moves": {
          "$ref": "#/definitions/IndexMovesPayload"
        },
        "new_duty_location": {
          "$ref": "#/definitions/DutyLocationPayload"
        },
        "orders_number": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "orders_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "orders_type_detail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyLocationGbloc": {
          "type": "string",
          "title": "From what GBLOC do your orders originate?",
          "x-nullable": true
        },
        "origin_duty_location": {
          "x-nullable": true,
          "$ref": "#/definitions/DutyLocationPayload"
        },
        "providesServicesCounseling": {
          "type": "boolean",
          "x-omitempty": false
        },
        "report_by_date": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report by",
          "example": "2018-04-26"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "spouse_has_pro_gear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?"
        },
        "status": {
          "$ref": "#/definitions/OrdersStatus"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "uploaded_amended_orders": {
          "$ref": "#/definitions/Document"
        },
        "uploaded_amended_orders_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "uploaded_orders": {
          "$ref": "#/definitions/Document"
        }
      }
    },
    "OrdersStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "LOCAL_MOVE",
        "RETIREMENT",
        "SEPARATION",
        "BLUEBARK"
      ],
      "x-display-value": {
        "BLUEBARK": "BLUEBARK",
        "LOCAL_MOVE": "Local Move",
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station",
        "RETIREMENT": "Retirement",
        "SEPARATION": "Separation"
      }
    },
    "OrdersTypeDetail": {
      "type": "string",
      "title": "Orders type detail",
      "enum": [
        "HHG_PERMITTED",
        "PCS_TDY",
        "HHG_RESTRICTED_PROHIBITED",
        "HHG_RESTRICTED_AREA",
        "INSTRUCTION_20_WEEKS",
        "HHG_PROHIBITED_20_WEEKS",
        "DELAYED_APPROVAL"
      ],
      "x-display-value": {
        "DELAYED_APPROVAL": "Delayed Approval 20 Weeks or More",
        "HHG_PERMITTED": "Shipment of HHG Permitted",
        "HHG_PROHIBITED_20_WEEKS": "Shipment of HHG Prohibited but Authorized within 20 weeks",
        "HHG_RESTRICTED_AREA": "HHG Restricted Area-HHG Prohibited",
        "HHG_RESTRICTED_PROHIBITED": "Shipment of HHG Restricted or Prohibited",
        "INSTRUCTION_20_WEEKS": "Course of Instruction 20 Weeks or More",
        "PCS_TDY": "PCS with TDY Enroute"
      },
      "x-nullable": true
    },
    "PPMAdvanceStatus": {
      "description": "Indicates whether an advance status has been accepted, rejected, or edited, or a prime counseled PPM has been received or not received",
      "type": "string",
      "title": "PPM Advance Status",
      "enum": [
        "APPROVED",
        "REJECTED",
        "EDITED",
        "RECEIVED",
        "NOT_RECEIVED"
      ],
      "x-nullable": true
    },
    "PPMDocumentStatusReason": {
      "description": "The reason the services counselor has excluded or rejected the item.",
      "type": "string",
      "x-nullable": true,
      "x-omitempty": false
    },
    "PPMEstimateRange": {
      "type": "object",
      "required": [
        "range_min",
        "range_max"
      ],
      "properties": {
        "range_max": {
          "type": "integer",
          "title": "High estimate"
        },
        "range_min": {
          "type": "integer",
          "title": "Low estimate"
        }
      }
    },
    "PPMShipment": {
      "description": "A personally procured move is a type of shipment that a service member moves themselves.",
      "required": [
        "id",
        "shipmentId",
        "createdAt",
        "status",
        "expectedDepartureDate",
        "pickupPostalCode",
        "destinationPostalCode",
        "sitExpected",
        "eTag"
      ],
      "properties": {
        "actualDestinationPostalCode": {
          "description": "The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "actualMoveDate": {
          "description": "The actual start date of when the PPM shipment left the origin.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualPickupPostalCode": {
          "description": "The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "advanceAmountReceived": {
          "description": "The amount received for an advance, or null if no advance is received.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "advanceAmountRequested": {
          "description": "The amount requested as an advance by the service member up to a maximum percentage of the estimated incentive.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "advanceStatus": {
          "$ref": "#/definitions/PPMAdvanceStatus"
        },
        "approvedAt": {
          "description": "The timestamp of when the shipment was approved and the service member can begin their move.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "description": "Timestamp of when the PPM Shipment was initially created (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "destinationPostalCode": {
          "description": "The postal code of the destination location where goods are being delivered to.",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "example": "90210"
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "estimatedIncentive": {
          "description": "The estimated amount the government will pay the service member to move their belongings based on the moving date, locations, and shipment weight.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "estimatedWeight": {
          "description": "The estimated weight of the PPM shipment goods being moved.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to begin their move.\n",
          "type": "string",
          "format": "date"
        },
        "finalIncentive": {
          "description": "The final calculated incentive for the PPM shipment. This does not include **SIT** as it is a reimbursement.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear for themselves or their spouse.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasReceivedAdvance": {
          "description": "Indicates whether an advance was received for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasRequestedAdvance": {
          "description": "Indicates whether an advance has been requested for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "Primary auto-generated unique identifier of the PPM shipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "movingExpenses": {
          "description": "All expense documentation receipt records of this PPM shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MovingExpense"
          }
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "pickupPostalCode": {
          "description": "The postal code of the origin location where goods are being moved from.",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "example": "90210"
        },
        "proGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to the service member.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "proGearWeightTickets": {
          "description": "All pro-gear weight ticket documentation records for this PPM shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProGearWeightTicket"
          }
        },
        "reviewedAt": {
          "description": "The timestamp of when the Service Counselor has reviewed all of the closeout documents.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "secondaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "secondaryDestinationPostalCode": {
          "description": "An optional secondary location near the destination where goods will be dropped off.",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "secondaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "secondaryPickupPostalCode": {
          "type": "string",
          "format": "An optional secondary pickup location near the origin where additional goods exist.",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "shipmentId": {
          "description": "The id of the parent MTOShipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "signedCertification": {
          "$ref": "#/definitions/SignedCertification"
        },
        "sitEstimatedCost": {
          "description": "The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedDepartureDate": {
          "description": "The date that goods will exit the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedEntryDate": {
          "description": "The date that goods will first enter the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedWeight": {
          "description": "The estimated weight of the goods being put into storage.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        },
        "sitExpected": {
          "description": "Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.\n\nMust be set to ` + "`" + `true` + "`" + ` when providing ` + "`" + `sitLocation` + "`" + `, ` + "`" + `sitEstimatedWeight` + "`" + `, ` + "`" + `sitEstimatedEntryDate` + "`" + `, and ` + "`" + `sitEstimatedDepartureDate` + "`" + ` values to calculate the ` + "`" + `sitEstimatedCost` + "`" + `.\n",
          "type": "boolean"
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "spouseProGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to a spouse.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "status": {
          "$ref": "#/definitions/PPMShipmentStatus"
        },
        "submittedAt": {
          "description": "The timestamp of when the customer submitted their PPM documentation to the counselor for review.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "updatedAt": {
          "description": "Timestamp of when a property of this object was last updated (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "w2Address": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "weightTickets": {
          "$ref": "#/definitions/WeightTickets"
        }
      },
      "x-nullable": true
    },
    "PPMShipmentStatus": {
      "description": "Status of the PPM Shipment:\n  * **DRAFT**: The customer has created the PPM shipment but has not yet submitted their move for counseling.\n  * **SUBMITTED**: The shipment belongs to a move that has been submitted by the customer or has been created by a Service Counselor or Prime Contractor for a submitted move.\n  * **WAITING_ON_CUSTOMER**: The PPM shipment has been approved and the customer may now provide their actual move closeout information and documentation required to get paid.\n  * **NEEDS_ADVANCE_APPROVAL**: The shipment was counseled by the Prime Contractor and approved but an advance was requested so will need further financial approval from the government.\n  * **NEEDS_PAYMENT_APPROVAL**: The customer has provided their closeout weight tickets, receipts, and expenses and certified it for the Service Counselor to approve, exclude or reject.\n  * **PAYMENT_APPROVED**: The Service Counselor has reviewed all of the customer's PPM closeout documentation and authorizes the customer can download and submit their finalized SSW packet.\n",
      "type": "string",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "WAITING_ON_CUSTOMER",
        "NEEDS_ADVANCE_APPROVAL",
        "NEEDS_PAYMENT_APPROVAL",
        "PAYMENT_APPROVED"
      ],
      "readOnly": true
    },
    "PatchMovePayload": {
      "type": "object",
      "required": [
        "closeoutOfficeId"
      ],
      "properties": {
        "closeoutOfficeId": {
          "description": "The transportation office that will handle the PPM shipment's closeout approvals for Army and Air Force service members",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "PatchServiceMemberPayload": {
      "type": "object",
      "properties": {
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "backup_mailing_address": {
          "$ref": "#/definitions/Address"
        },
        "current_location_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID number",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "x-nullable": true,
          "example": "5789345789"
        },
        "email_is_preferred": {
          "type": "boolean",
          "title": "Email",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "personal_email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal Email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "phone_is_preferred": {
          "type": "boolean",
          "title": "Phone",
          "x-nullable": true
        },
        "residential_address": {
          "$ref": "#/definitions/Address"
        },
        "secondary_telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Alternate Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "suffix": {
          "type": "string",
          "title": "Suffix",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best Contact Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "PostDocumentPayload": {
      "type": "object",
      "properties": {
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        }
      }
    },
    "PpmID": {
      "description": "The PPM Shipment ID to associate with the assigned certificate.\n",
      "type": "string",
      "format": "uuid",
      "x-nullable": true,
      "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
    },
    "ProGearWeightTicket": {
      "description": "Pro-gear associated information and weight docs for a PPM shipment",
      "type": "object",
      "required": [
        "ppmShipmentId",
        "createdAt",
        "updatedAt",
        "documentId",
        "document"
      ],
      "properties": {
        "belongsToSelf": {
          "description": "Indicates if this information is for the customer's own pro-gear, otherwise, it's the spouse's.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "Describes the pro-gear that was moved.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "document": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the pro-gear weight."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "documentId": {
          "description": "The ID of the document that is associated with the user uploads containing the pro-gear weight.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "hasWeightTickets": {
          "description": "Indicates if the user has a weight ticket for their pro-gear, otherwise they have a constructed weight.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "The ID of the pro-gear weight ticket.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ppmShipmentId": {
          "description": "The ID of the PPM shipment that this pro-gear weight ticket is associated with.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reason": {
          "$ref": "#/definitions/PPMDocumentStatusReason"
        },
        "status": {
          "$ref": "#/definitions/OmittablePPMDocumentStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "weight": {
          "description": "Weight of the pro-gear.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        }
      }
    },
    "RateEnginePostalCodePayload": {
      "type": "object",
      "required": [
        "valid",
        "postal_code",
        "postal_code_type"
      ],
      "properties": {
        "postal_code": {
          "description": "zip code, international allowed",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "example": "'90210' or 'N15 3NL'"
        },
        "postal_code_type": {
          "type": "string",
          "enum": [
            "origin",
            "destination"
          ]
        },
        "valid": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "Reimbursement": {
      "type": "object",
      "required": [
        "requested_amount",
        "method_of_receipt"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "method_of_receipt": {
          "$ref": "#/definitions/MethodOfReceipt"
        },
        "requested_amount": {
          "description": "unit is cents",
          "type": "integer",
          "format": "cents",
          "title": "Requested Amount",
          "minimum": 1
        },
        "requested_date": {
          "type": "string",
          "format": "date",
          "title": "Requested Date",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "status": {
          "$ref": "#/definitions/ReimbursementStatus"
        }
      },
      "x-nullable": true
    },
    "ReimbursementStatus": {
      "type": "string",
      "title": "Reimbursement",
      "enum": [
        "DRAFT",
        "REQUESTED",
        "APPROVED",
        "REJECTED",
        "PAID"
      ],
      "x-nullable": true
    },
    "Role": {
      "type": "object",
      "required": [
        "id",
        "roleType",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "roleType": {
          "type": "string",
          "example": "customer"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SITLocationType": {
      "description": "The list of SIT location types.",
      "type": "string",
      "enum": [
        "ORIGIN",
        "DESTINATION"
      ]
    },
    "SavePPMShipmentSignedCertification": {
      "type": "object",
      "required": [
        "certification_text",
        "signature",
        "date"
      ],
      "properties": {
        "certification_text": {
          "description": "Text that the customer is agreeing to and signing.",
          "type": "string"
        },
        "date": {
          "description": "Date of signature",
          "type": "string",
          "format": "date"
        },
        "signature": {
          "description": "Customer signature",
          "type": "string"
        }
      }
    },
    "ServiceMemberBackupContactPayload": {
      "type": "object",
      "required": [
        "id",
        "created_at",
        "updated_at",
        "name",
        "email",
        "permission"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "Email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "title": "Name",
          "x-nullable": true,
          "example": "Susan Smith"
        },
        "permission": {
          "$ref": "#/definitions/BackupContactPermission"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ServiceMemberPayload": {
      "type": "object",
      "required": [
        "id",
        "user_id",
        "is_profile_complete",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "affiliation": {
          "title": "Branch",
          "$ref": "#/definitions/Affiliation"
        },
        "backup_contacts": {
          "$ref": "#/definitions/IndexServiceMemberBackupContactsPayload"
        },
        "backup_mailing_address": {
          "$ref": "#/definitions/Address"
        },
        "cac_validated": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID number",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "x-nullable": true,
          "example": "5789345789"
        },
        "email_is_preferred": {
          "type": "boolean",
          "title": "Email",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "grade": {
          "title": "Grade",
          "$ref": "#/definitions/OrderPayGrade"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "is_profile_complete": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Orders"
          }
        },
        "personal_email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal Email Address",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "phone_is_preferred": {
          "type": "boolean",
          "title": "Telephone",
          "x-nullable": true
        },
        "residential_address": {
          "title": "Residential Address",
          "$ref": "#/definitions/Address"
        },
        "secondary_telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Secondary Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "suffix": {
          "type": "string",
          "title": "Suffix",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best contact phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "weight_allotment": {
          "$ref": "#/definitions/WeightAllotment"
        }
      }
    },
    "SignedCertification": {
      "description": "Signed certification",
      "type": "object",
      "required": [
        "id",
        "submittingUserId",
        "moveId",
        "certificationType",
        "certificationText",
        "signature",
        "date",
        "createdAt",
        "updatedAt",
        "eTag"
      ],
      "properties": {
        "certificationText": {
          "description": "Full text that the customer agreed to and signed.",
          "type": "string"
        },
        "certificationType": {
          "$ref": "#/definitions/SignedCertificationType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "date": {
          "description": "Date that the customer signed the certification.",
          "type": "string",
          "format": "date"
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "The ID of the signed certification.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moveId": {
          "description": "The ID of the move associated with this signed certification.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ppmId": {
          "description": "The ID of the PPM shipment associated with this signed certification, if any.",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "signature": {
          "description": "The signature that the customer provided.",
          "type": "string"
        },
        "submittingUserId": {
          "description": "The ID of the user that signed.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SignedCertificationPayload": {
      "type": "object",
      "required": [
        "id",
        "move_id",
        "created_at",
        "updated_at",
        "date",
        "signature",
        "certification_text"
      ],
      "properties": {
        "certification_text": {
          "type": "string"
        },
        "certification_type": {
          "$ref": "#/definitions/NullableSignedCertificationType"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "title": "Date"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "move_id": {
          "type": "string",
          "format": "uuid"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "ppm_id": {
          "$ref": "#/definitions/PpmID"
        },
        "signature": {
          "type": "string",
          "title": "Signature"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SignedCertificationType": {
      "description": "The type of signed certification:\n  - PPM_PAYMENT: This is used when the customer has a PPM shipment that they have uploaded their documents for and are\n      ready to submit their documentation for review. When they submit, they will be asked to sign certifying the\n      information is correct.\n  - SHIPMENT: This is used when a customer submits their move with their shipments to be reviewed by office users.\n",
      "type": "string",
      "enum": [
        "PPM_PAYMENT",
        "SHIPMENT"
      ],
      "readOnly": true
    },
    "SignedCertificationTypeCreate": {
      "type": "string",
      "enum": [
        "PPM_PAYMENT",
        "SHIPMENT"
      ],
      "x-nullable": true
    },
    "SignedCertifications": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SignedCertificationPayload"
      }
    },
    "SubmitMoveForApprovalPayload": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/CreateSignedCertificationPayload"
        }
      }
    },
    "TransportationOffice": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "gbloc": {
          "type": "string",
          "pattern": "^[A-Z]{4}$",
          "example": "JENQ"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "example": 29.382973
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "example": -98.62759
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "phone_lines": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "telephone",
            "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
            "example": "212-555-5555"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TransportationOffices": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransportationOffice"
      }
    },
    "UpdateMovingExpense": {
      "type": "object",
      "required": [
        "movingExpenseType",
        "description",
        "paidWithGTCC",
        "amount",
        "missingReceipt"
      ],
      "properties": {
        "amount": {
          "description": "The total amount of the expense as indicated on the receipt",
          "type": "integer"
        },
        "description": {
          "description": "A brief description of the expense",
          "type": "string"
        },
        "missingReceipt": {
          "description": "Indicates if the customer is missing the receipt for their expense.",
          "type": "boolean"
        },
        "movingExpenseType": {
          "$ref": "#/definitions/MovingExpenseType"
        },
        "paidWithGTCC": {
          "description": "Indicates if the service member used their government issued card to pay for the expense",
          "type": "boolean"
        },
        "sitEndDate": {
          "description": "The date the shipment exited storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "example": "2018-05-26"
        },
        "sitStartDate": {
          "description": "The date the shipment entered storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "example": "2022-04-26"
        }
      }
    },
    "UpdateOktaUserProfileData": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/OktaUserProfileData"
        }
      }
    },
    "UpdatePPMShipment": {
      "type": "object",
      "properties": {
        "actualDestinationPostalCode": {
          "description": "The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "example": "90210"
        },
        "actualMoveDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "actualPickupPostalCode": {
          "description": "The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "example": "90210"
        },
        "advanceAmountReceived": {
          "description": "The amount received for an advance, or null if no advance is received.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true
        },
        "advanceAmountRequested": {
          "description": "The amount requested for an advance, or null if no advance is requested\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "destinationPostalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "example": "90210"
        },
        "estimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to move.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "finalIncentive": {
          "description": "The final calculated incentive for the PPM shipment. This does not include **SIT** as it is a reimbursement.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "hasReceivedAdvance": {
          "description": "Indicates whether an advance was received for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "hasRequestedAdvance": {
          "description": "Indicates whether an advance has been requested for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "hasSecondaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "pickupPostalCode": {
          "description": "zip code",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "example": "90210"
        },
        "proGearWeight": {
          "type": "integer",
          "x-nullable": true
        },
        "secondaryDestinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryDestinationPostalCode": {
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "$ref": "#/definitions/NullableString",
          "example": "90210"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupPostalCode": {
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "$ref": "#/definitions/NullableString",
          "example": "90210"
        },
        "sitExpected": {
          "type": "boolean",
          "x-nullable": true
        },
        "spouseProGearWeight": {
          "type": "integer",
          "x-nullable": true
        },
        "w2Address": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        }
      }
    },
    "UpdateProGearWeightTicket": {
      "type": "object",
      "properties": {
        "belongsToSelf": {
          "description": "Indicates if this information is for the customer's own pro-gear, otherwise, it's the spouse's.",
          "type": "boolean"
        },
        "description": {
          "description": "Describes the pro-gear that was moved.",
          "type": "string"
        },
        "hasWeightTickets": {
          "description": "Indicates if the user has a weight ticket for their pro-gear, otherwise they have a constructed weight.",
          "type": "boolean"
        },
        "weight": {
          "description": "Weight of the vehicle not including the pro-gear.",
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "UpdateServiceMemberBackupContactPayload": {
      "type": "object",
      "required": [
        "name",
        "email",
        "permission"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "email address",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "name": {
          "type": "string",
          "x-nullable": true,
          "example": "Susan Smith"
        },
        "permission": {
          "$ref": "#/definitions/BackupContactPermission"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        }
      }
    },
    "UpdateShipment": {
      "type": "object",
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "hasSecondaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "ppmShipment": {
          "$ref": "#/definitions/UpdatePPMShipment"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "secondaryDeliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        }
      }
    },
    "UpdateWeightTicket": {
      "type": "object",
      "properties": {
        "adjustedNetWeight": {
          "description": "Indicates the adjusted net weight of the vehicle",
          "type": "integer",
          "minimum": 0
        },
        "allowableWeight": {
          "description": "Indicates the maximum reimbursable weight of the shipment",
          "type": "integer",
          "minimum": 0
        },
        "emptyWeight": {
          "description": "Weight of the vehicle when empty.",
          "type": "integer",
          "minimum": 0
        },
        "fullWeight": {
          "description": "The weight of the vehicle when full.",
          "type": "integer",
          "minimum": 0
        },
        "missingEmptyWeightTicket": {
          "description": "Indicates if the customer is missing a weight ticket for the vehicle weight when empty.",
          "type": "boolean"
        },
        "missingFullWeightTicket": {
          "description": "Indicates if the customer is missing a weight ticket for the vehicle weight when full.",
          "type": "boolean"
        },
        "netWeightRemarks": {
          "description": "Remarks explaining any edits made to the net weight",
          "type": "string"
        },
        "ownsTrailer": {
          "description": "Indicates if the customer used a trailer they own for the move.",
          "type": "boolean"
        },
        "trailerMeetsCriteria": {
          "description": "Indicates if the trailer that the customer used meets all the criteria to be claimable.",
          "type": "boolean"
        },
        "vehicleDescription": {
          "description": "Description of the vehicle used for the trip. E.g. make/model, type of truck/van, etc.",
          "type": "string"
        }
      }
    },
    "Upload": {
      "description": "An uploaded file.",
      "type": "object",
      "required": [
        "id",
        "url",
        "filename",
        "contentType",
        "bytes",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "bytes": {
          "type": "integer",
          "readOnly": true
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "readOnly": true,
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "readOnly": true,
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isWeightTicket": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "INFECTED",
            "CLEAN",
            "PROCESSING"
          ],
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalidFields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "$ref": "#/definitions/ValidationErrorAllOf1"
        }
      ],
      "properties": {
        "invalidFields": {
          "type": "object",
          "additionalProperties": {
            "description": "List of errors for the field",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "ValidationErrorAllOf1": {
      "type": "object"
    },
    "WeightAllotment": {
      "type": "object",
      "required": [
        "total_weight_self",
        "total_weight_self_plus_dependents",
        "pro_gear_weight",
        "pro_gear_weight_spouse"
      ],
      "properties": {
        "pro_gear_weight": {
          "type": "integer",
          "example": 2000
        },
        "pro_gear_weight_spouse": {
          "type": "integer",
          "example": 500
        },
        "total_weight_self": {
          "type": "integer",
          "example": 18000
        },
        "total_weight_self_plus_dependents": {
          "type": "integer",
          "example": 18000
        }
      }
    },
    "WeightTicket": {
      "description": "Vehicle and optional trailer information and weight documents used to move this PPM shipment.",
      "type": "object",
      "required": [
        "ppmShipmentId",
        "createdAt",
        "updatedAt",
        "emptyDocumentId",
        "emptyDocument",
        "fullDocument",
        "fullDocumentId",
        "proofOfTrailerOwnershipDocument",
        "proofOfTrailerOwnershipDocumentId"
      ],
      "properties": {
        "adjustedNetWeight": {
          "description": "Indicates the adjusted net weight of the vehicle",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        },
        "allowableWeight": {
          "description": "Maximum reimbursable weight.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "emptyDocument": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the vehicle weight when empty."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "emptyDocumentId": {
          "description": "ID of the document that is associated with the user uploads containing the vehicle weight when empty.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "emptyWeight": {
          "description": "Weight of the vehicle when empty.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        },
        "fullDocument": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the vehicle weight when full."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "fullDocumentId": {
          "description": "ID of the document that is associated with the user uploads containing the vehicle weight when full.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "fullWeight": {
          "description": "The weight of the vehicle when full.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "ID of this set of weight tickets.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "missingEmptyWeightTicket": {
          "description": "Indicates if the customer is missing a weight ticket for the vehicle weight when empty.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "missingFullWeightTicket": {
          "description": "Indicates if the customer is missing a weight ticket for the vehicle weight when full.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "netWeightRemarks": {
          "description": "Remarks explaining any edits made to the net weight",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ownsTrailer": {
          "description": "Indicates if the customer used a trailer they own for the move.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ppmShipmentId": {
          "description": "The ID of the PPM shipment that this set of weight tickets is for.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "proofOfTrailerOwnershipDocument": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the proof of trailer ownership."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "proofOfTrailerOwnershipDocumentId": {
          "description": "ID of the document that is associated with the user uploads containing the proof of trailer ownership.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reason": {
          "$ref": "#/definitions/PPMDocumentStatusReason"
        },
        "status": {
          "$ref": "#/definitions/OmittablePPMDocumentStatus"
        },
        "trailerMeetsCriteria": {
          "description": "Indicates if the trailer that the customer used meets all the criteria to be claimable.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "vehicleDescription": {
          "description": "Description of the vehicle used for the trip. E.g. make/model, type of truck/van, etc.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        }
      }
    },
    "WeightTicketSetType": {
      "type": "string",
      "title": "Select weight ticket type",
      "enum": [
        "CAR",
        "CAR_TRAILER",
        "BOX_TRUCK",
        "PRO_GEAR"
      ],
      "x-display-value": {
        "BOX_TRUCK": "Box truck",
        "CAR": "Car",
        "CAR_TRAILER": "Car + Trailer",
        "PRO_GEAR": "Pro-gear"
      },
      "x-nullable": true
    },
    "WeightTickets": {
      "description": "All weight tickets associated with a PPM shipment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/WeightTicket"
      },
      "x-omitempty": false
    }
  },
  "parameters": {
    "ifMatch": {
      "type": "string",
      "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
      "name": "If-Match",
      "in": "header",
      "required": true
    },
    "movingExpenseId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the moving expense",
      "name": "movingExpenseId",
      "in": "path",
      "required": true
    },
    "ppmShipmentId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the PPM shipment",
      "name": "ppmShipmentId",
      "in": "path",
      "required": true
    },
    "proGearWeightTicketId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the pro-gear weight ticket",
      "name": "proGearWeightTicketId",
      "in": "path",
      "required": true
    },
    "weightTicketId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the weight ticket",
      "name": "weightTicketId",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "Conflict": {
      "description": "The request could not be processed because of conflict in the current state of the resource.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "ServerError": {
      "description": "A server error occurred.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "The payload was unprocessable.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "responses"
    },
    {
      "name": "orders"
    },
    {
      "name": "certification"
    },
    {
      "name": "moves"
    },
    {
      "name": "office"
    },
    {
      "name": "documents"
    },
    {
      "name": "uploads"
    },
    {
      "name": "service_members"
    },
    {
      "name": "backup_contacts"
    },
    {
      "name": "duty_locations"
    },
    {
      "name": "transportation_offices"
    },
    {
      "name": "queues"
    },
    {
      "name": "entitlements"
    },
    {
      "name": "calendar"
    },
    {
      "name": "move_docs"
    },
    {
      "name": "ppm"
    },
    {
      "name": "postal_codes"
    },
    {
      "name": "addresses"
    },
    {
      "name": "mtoShipment"
    },
    {
      "name": "featureFlags"
    },
    {
      "name": "okta_profile"
    }
  ]
}`))
}
