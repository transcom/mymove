// Code generated by go-swagger; DO NOT EDIT.

package internalapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The internal/website API for my.move.mil",
    "title": "my.move.mil",
    "contact": {
      "email": "ppp@truss.works"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/internal",
  "paths": {
    "/access_codes": {
      "get": {
        "description": "Fetches the access code for a service member.",
        "tags": [
          "accesscode"
        ],
        "summary": "Fetches an access code",
        "operationId": "fetchAccessCode",
        "responses": {
          "200": {
            "description": "access code has been found in system",
            "schema": {
              "$ref": "#/definitions/AccessCode"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "not authorized to fetch access code"
          },
          "404": {
            "description": "access code not found in system"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/access_codes/invalid": {
      "patch": {
        "description": "Updates access code as invalid by associating it with the current service member.",
        "tags": [
          "accesscode"
        ],
        "summary": "Updates access code as invalid by associating it with the current service member.",
        "operationId": "claimAccessCode",
        "parameters": [
          {
            "description": "the code the access code represents and verifies if in use",
            "name": "accessCode",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "code"
              ],
              "properties": {
                "code": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "access code is invalid or valid",
            "schema": {
              "$ref": "#/definitions/AccessCode"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "not authorized to validate access code"
          },
          "404": {
            "description": "access code not found in system"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/access_codes/valid": {
      "get": {
        "description": "Verifies if access code is both unused and correctly associated with a move type.",
        "tags": [
          "accesscode"
        ],
        "summary": "Validate if an access code has been unused and associated with the correct move type.",
        "operationId": "validateAccessCode",
        "parameters": [
          {
            "pattern": "^(HHG|PPM)-[A-Z0-9]{6}$",
            "type": "string",
            "x-nullable": false,
            "description": "the code the access code represents and verifies if in use",
            "name": "code",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "access code is invalid or valid",
            "schema": {
              "$ref": "#/definitions/AccessCode"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "not authorized to validate access code"
          },
          "404": {
            "description": "access code not found in system"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/addresses/{addressId}": {
      "get": {
        "description": "Returns an address",
        "tags": [
          "addresses"
        ],
        "summary": "Returns an address",
        "operationId": "showAddress",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the address to return",
            "name": "addressId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the requested address",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/backup_contacts/{backupContactId}": {
      "get": {
        "description": "Returns the given service member backup contact",
        "tags": [
          "backup_contacts"
        ],
        "summary": "Returns the given service member backup contact",
        "operationId": "showServiceMemberBackupContact",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member backup contact",
            "name": "backupContactId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the service member backup contact",
            "schema": {
              "$ref": "#/definitions/ServiceMemberBackupContactPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "backup contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "description": "Any fields sent in this request will be set on the backup contact referenced",
        "tags": [
          "backup_contacts"
        ],
        "summary": "Updates a service member backup contact",
        "operationId": "updateServiceMemberBackupContact",
        "parameters": [
          {
            "name": "updateServiceMemberBackupContactPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceMemberBackupContactPayload"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member backup contact",
            "name": "backupContactId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "updated instance of backup contact",
            "schema": {
              "$ref": "#/definitions/ServiceMemberBackupContactPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "backup contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/calendar/available_move_dates": {
      "get": {
        "description": "Returns available dates for the move calendar",
        "tags": [
          "calendar"
        ],
        "summary": "Returns available dates for the move calendar",
        "operationId": "showAvailableMoveDates",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "description": "Look for future available dates starting from (and including) this date",
            "name": "startDate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of available dates",
            "schema": {
              "$ref": "#/definitions/AvailableMoveDates"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/documents": {
      "post": {
        "description": "Documents represent a physical artifact such as a scanned document or a PDF file",
        "tags": [
          "documents"
        ],
        "summary": "Create a new document",
        "operationId": "createDocument",
        "parameters": [
          {
            "name": "documentPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostDocumentPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created document",
            "schema": {
              "$ref": "#/definitions/DocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/documents/{documentId}": {
      "get": {
        "description": "Returns a document and its uploads",
        "tags": [
          "documents"
        ],
        "summary": "Returns a document",
        "operationId": "showDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to return",
            "name": "documentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the requested document",
            "schema": {
              "$ref": "#/definitions/DocumentPayload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/dps_auth/cookie_url": {
      "post": {
        "description": "Returns the URL to redirect to that begins DPS auth",
        "tags": [
          "dps_auth"
        ],
        "summary": "Returns the URL to redirect to that begins DPS auth",
        "operationId": "getCookieURL",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the cookie to set, DPS by default",
            "name": "cookie_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The DPS URL to redirec to",
            "name": "dps_redirect_url",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DPSAuthCookieURLPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/duty_stations": {
      "get": {
        "description": "Returns the duty stations matching the search query",
        "tags": [
          "duty_stations"
        ],
        "summary": "Returns the duty stations matching the search query",
        "operationId": "searchDutyStations",
        "parameters": [
          {
            "type": "string",
            "description": "Search string for duty stations",
            "name": "search",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the duty station",
            "schema": {
              "$ref": "#/definitions/DutyStationsPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "matching duty station not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/duty_stations/{dutyStationId}/transportation_office": {
      "get": {
        "description": "Returns the given duty station's transportation office",
        "tags": [
          "transportation_offices"
        ],
        "summary": "Returns the transportation office for a given duty station",
        "operationId": "showDutyStationTransportationOffice",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the duty station",
            "name": "dutyStationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the transportation office for a duty station",
            "schema": {
              "$ref": "#/definitions/TransportationOffice"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "transportation office not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/entitlements": {
      "get": {
        "description": "List weight weights allotted by entitlement",
        "tags": [
          "entitlements"
        ],
        "summary": "List weight weights allotted by entitlement",
        "operationId": "indexEntitlements",
        "responses": {
          "200": {
            "description": "List of weights allotted entitlement",
            "schema": {
              "$ref": "#/definitions/IndexEntitlements"
            }
          }
        }
      }
    },
    "/entitlements/{moveId}": {
      "get": {
        "description": "Determine whether weight estimate is below entitlement",
        "tags": [
          "entitlements"
        ],
        "summary": "Validates that the stored weight estimate is below the allotted entitlement range for a service member",
        "operationId": "validateEntitlement",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "weight estimate is below allotted entitlement"
          },
          "404": {
            "description": "personally procured move not found"
          },
          "409": {
            "description": "Requested weight estimate is above allotted entitlement"
          }
        }
      }
    },
    "/estimates/ppm": {
      "get": {
        "description": "Calculates a reimbursement range for a PPM move (excluding SIT)",
        "tags": [
          "ppm"
        ],
        "summary": "Return a PPM cost estimate",
        "operationId": "showPPMEstimate",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "name": "original_move_date",
            "in": "query",
            "required": true
          },
          {
            "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
            "type": "string",
            "format": "zip",
            "name": "origin_zip",
            "in": "query",
            "required": true
          },
          {
            "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
            "type": "string",
            "format": "zip",
            "name": "origin_duty_station_zip",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "name": "orders_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "weight_estimate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Made estimate of PPM cost range",
            "schema": {
              "$ref": "#/definitions/PPMEstimateRange"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "ppm discount not found for provided postal codes and original move date"
          },
          "409": {
            "description": "distance is less than 50 miles (no short haul moves)"
          },
          "422": {
            "description": "cannot process request with given information"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/estimates/ppm_sit": {
      "get": {
        "description": "Calculates a reimbursment for a PPM move's SIT",
        "tags": [
          "ppm"
        ],
        "summary": "Return a PPM move's SIT cost estimate",
        "operationId": "showPPMSitEstimate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "personally_procured_move_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "original_move_date",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "days_in_storage",
            "in": "query",
            "required": true
          },
          {
            "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
            "type": "string",
            "format": "zip",
            "name": "origin_zip",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "name": "orders_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "weight_estimate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "show PPM SIT estimate",
            "schema": {
              "$ref": "#/definitions/PPMSitEstimate"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "409": {
            "description": "distance is less than 50 miles (no short haul moves)"
          },
          "422": {
            "description": "the payload was unprocessable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/move_documents/{moveDocumentId}": {
      "put": {
        "description": "Update a move document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Updates a move document",
        "operationId": "updateMoveDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move document model",
            "name": "moveDocumentId",
            "in": "path",
            "required": true
          },
          {
            "name": "updateMoveDocument",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of move document",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move document not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "description": "Deletes a move document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Deletes a move document",
        "operationId": "deleteMoveDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move document model",
            "name": "moveDocumentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}": {
      "get": {
        "description": "Returns the given move",
        "tags": [
          "moves"
        ],
        "summary": "Returns the given move",
        "operationId": "showMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the move",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move is not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "patch": {
        "description": "Any fields sent in this request will be set on the move referenced",
        "tags": [
          "moves"
        ],
        "summary": "Patches the move",
        "operationId": "patchMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "patchMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMovePayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "updated instance of move",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move is not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/approve": {
      "post": {
        "description": "Approves the basic details of a move. The status of the move will be updated to APPROVED",
        "tags": [
          "office"
        ],
        "summary": "Approves a move to proceed",
        "operationId": "approveMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (approved) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to approve this move"
          },
          "409": {
            "description": "the move is not in a state to be approved",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/cancel": {
      "post": {
        "description": "Cancels the basic details of a move. The status of the move will be updated to CANCELED",
        "tags": [
          "office"
        ],
        "summary": "Cancels a move",
        "operationId": "cancelMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "cancelMove",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelMove"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (canceled) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to cancel this move"
          },
          "409": {
            "description": "the move is not in a state to be canceled",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/move_dates_summary": {
      "get": {
        "description": "Returns projected move-related dates for a given move date",
        "tags": [
          "moves"
        ],
        "summary": "Returns projected move-related dates for a given move date",
        "operationId": "showMoveDatesSummary",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "description": "The chosen move date",
            "name": "moveDate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of projected move-related dates",
            "schema": {
              "$ref": "#/definitions/MoveDatesSummary"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/move_documents": {
      "get": {
        "description": "Returns a list of all Move Documents associated with this move",
        "tags": [
          "move_docs"
        ],
        "summary": "Returns a list of all Move Documents associated with this move",
        "operationId": "indexMoveDocuments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of move douments",
            "schema": {
              "$ref": "#/definitions/MoveDocuments"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          }
        }
      },
      "post": {
        "description": "Created a move document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Creates a move document",
        "operationId": "createGenericMoveDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createGenericMoveDocumentPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGenericMoveDocumentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns new move document object",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to modify this move"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/moving_expense_documents": {
      "post": {
        "description": "Created a moving expense document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Creates a moving expense document",
        "operationId": "createMovingExpenseDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createMovingExpenseDocumentPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMovingExpenseDocumentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns new moving expense document object",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to modify this move"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/orders": {
      "get": {
        "description": "Returns orders information for a move for office use",
        "tags": [
          "office"
        ],
        "summary": "Returns orders information for a move for office use",
        "operationId": "showOfficeOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the orders information for a move for office use",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/personally_procured_move": {
      "get": {
        "description": "Returns a list of all PPMs associated with this move",
        "tags": [
          "ppm"
        ],
        "summary": "Returns a list of all PPMs associated with this move",
        "operationId": "indexPersonallyProcuredMoves",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move these PPMs are associated with",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/IndexPersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          }
        }
      },
      "post": {
        "description": "Create an instance of personally_procured_move tied to the move ID",
        "tags": [
          "ppm"
        ],
        "summary": "Creates a new PPM for the given move",
        "operationId": "createPersonallyProcuredMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move this PPM is associated with",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createPersonallyProcuredMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePersonallyProcuredMovePayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/personally_procured_move/{personallyProcuredMoveId}": {
      "get": {
        "description": "Returns the given PPM",
        "tags": [
          "ppm"
        ],
        "summary": "Returns the given PPM",
        "operationId": "showPersonallyProcuredMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move being signed for",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/IndexPersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          }
        }
      },
      "put": {
        "description": "This replaces the current version of the PPM with the version sent.",
        "tags": [
          "ppm"
        ],
        "summary": "Updates the PPM",
        "operationId": "updatePersonallyProcuredMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM being updated",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          },
          {
            "name": "updatePersonallyProcuredMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePersonallyProcuredMovePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "patch": {
        "description": "Any fields sent in this request will be set on the PPM referenced",
        "tags": [
          "ppm"
        ],
        "summary": "Patches the PPM",
        "operationId": "patchPersonallyProcuredMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM being patched",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          },
          {
            "name": "patchPersonallyProcuredMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchPersonallyProcuredMovePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "ppm is not found or ppm discount not found for provided postal codes and original move date"
          },
          "422": {
            "description": "cannot process request with given information"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/personally_procured_move/{personallyProcuredMoveId}/estimate": {
      "patch": {
        "description": "This request calculates the estimated incentive of a PPM and attaches this range to the PPM",
        "tags": [
          "ppm"
        ],
        "summary": "Calculates the estimated incentive of a PPM",
        "operationId": "updatePersonallyProcuredMoveEstimate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM being patched",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "ppm is not found or ppm discount not found for provided postal codes and original move date"
          },
          "422": {
            "description": "cannot process request with given information"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/shipment_summary_worksheet": {
      "get": {
        "description": "Generates pre-filled PDF using data already collected",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "moves"
        ],
        "summary": "Returns Shipment Summary Worksheet",
        "operationId": "showShipmentSummaryWorksheet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "description": "The preparationDate of PDF",
            "name": "preparationDate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Pre-filled worksheet PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/signed_certifications": {
      "get": {
        "description": "returns a list of all signed_certifications associated with the move ID",
        "tags": [
          "certification"
        ],
        "summary": "gets the signed certifications for the given move ID",
        "operationId": "indexSignedCertification",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of signed certifications",
            "schema": {
              "$ref": "#/definitions/SignedCertifications"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "description": "Create an instance of signed_certification tied to the move ID",
        "tags": [
          "certification"
        ],
        "summary": "Submits signed certification for the given move ID",
        "operationId": "createSignedCertification",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move being signed for",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createSignedCertificationPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSignedCertificationPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of signed_certification",
            "schema": {
              "$ref": "#/definitions/SignedCertificationPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to sign for this move"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/submit": {
      "post": {
        "description": "Submits a move for approval by the office. The status of the move will be updated to SUBMITTED",
        "tags": [
          "moves"
        ],
        "summary": "Submits a move for approval",
        "operationId": "submitMoveForApproval",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "submitMoveForApprovalPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitMoveForApprovalPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (submitted) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to approve this move"
          },
          "409": {
            "description": "the move is not in a state to be approved",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/weight_ticket": {
      "post": {
        "description": "Created a weight ticket document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Creates a weight ticket document",
        "operationId": "createWeightTicketDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createWeightTicketDocument",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWeightTicketDocumentsPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns new weight ticket document object",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to modify this move"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveTaskOrderID}/mto_shipments": {
      "get": {
        "description": "Gets all MTO shipments for the specified Move Task Order.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Gets all shipments for a move task order",
        "operationId": "listMTOShipments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of move task order for mto shipment to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all mto shipments for a move task order.",
            "schema": {
              "$ref": "#/definitions/MTOShipments"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentId}": {
      "patch": {
        "description": "Updates a specified MTO shipment.\n\nRequired fields include:\n* MTO Shipment ID required in path\n* If-Match required in headers\n* No fields required in body\n\nOptional fields include:\n* New shipment status type\n* Shipment Type\n* Customer requested pick-up date\n* Pick-up Address\n* Delivery Address\n* Customer Remarks\n* Releasing / Receiving agents\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipment",
        "operationId": "updateMTOShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the MTO Shipment to update",
            "name": "mtoShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the specified MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/mto_shipments": {
      "post": {
        "description": "Creates a MTO shipment for the specified Move Task Order.\nRequired fields include:\n* Shipment Type\n* Customer requested pick-up date\n* Pick-up Address\n* Delivery Address\n\nOptional fields include:\n* Customer Remarks\n* Releasing / Receiving agents\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOShipment",
        "operationId": "createMTOShipment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "description": "Creates an instance of orders tied to a service member",
        "tags": [
          "orders"
        ],
        "summary": "Creates an orders model for a logged-in user",
        "operationId": "createOrders",
        "parameters": [
          {
            "name": "createOrders",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateOrders"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of orders",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/orders/{ordersId}": {
      "get": {
        "description": "Returns the given order",
        "tags": [
          "orders"
        ],
        "summary": "Returns the given order",
        "operationId": "showOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the order",
            "name": "ordersId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the order",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "order is not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "description": "All fields sent in this request will be set on the orders referenced",
        "tags": [
          "orders"
        ],
        "summary": "Updates orders",
        "operationId": "updateOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the orders model",
            "name": "ordersId",
            "in": "path",
            "required": true
          },
          {
            "name": "updateOrders",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateOrders"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of orders",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "orders not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/personally_procured_move/{personallyProcuredMoveId}/expense_summary": {
      "get": {
        "description": "Calculates and returns an expense summary organized by expense type",
        "tags": [
          "ppm"
        ],
        "summary": "Returns an expense summary organized by expense type",
        "operationId": "requestPPMExpenseSummary",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully calculated expense summary",
            "schema": {
              "$ref": "#/definitions/ExpenseSummaryPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "personally procured move not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/personally_procured_move/{personallyProcuredMoveId}/request_payment": {
      "post": {
        "description": "Moves the PPM and the move into the PAYMENT_REQUESTED state",
        "tags": [
          "ppm"
        ],
        "summary": "Moves the PPM and the move into the PAYMENT_REQUESTED state",
        "operationId": "requestPPMPayment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Sucesssfully requested payment",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/personally_procured_move/{personallyProcuredMoveId}/submit": {
      "post": {
        "description": "Submits a PPM for approval by the office. The status of the PPM will be updated to SUBMITTED",
        "tags": [
          "ppm"
        ],
        "summary": "Submits a PPM for approval",
        "operationId": "submitPersonallyProcuredMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM being submitted",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          },
          {
            "name": "submitPersonallyProcuredMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitPersonallyProcuredMovePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "ppm is not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/personally_procured_moves/incentive": {
      "get": {
        "description": "Calculates incentive for a PPM move (excluding SIT)",
        "tags": [
          "ppm"
        ],
        "summary": "Return a PPM incentive value",
        "operationId": "showPPMIncentive",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "name": "original_move_date",
            "in": "query",
            "required": true
          },
          {
            "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
            "type": "string",
            "format": "zip",
            "name": "origin_zip",
            "in": "query",
            "required": true
          },
          {
            "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
            "type": "string",
            "format": "zip",
            "name": "origin_duty_station_zip",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "name": "orders_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "weight",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Made calculation of PPM incentive",
            "schema": {
              "$ref": "#/definitions/PPMIncentive"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "409": {
            "description": "distance is less than 50 miles (no short haul moves)"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/personally_procured_moves/{personallyProcuredMoveId}/approve": {
      "post": {
        "description": "Sets the status of the PPM to APPROVED.",
        "tags": [
          "office"
        ],
        "summary": "Approves the PPM",
        "operationId": "approvePPM",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM being updated",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          },
          {
            "name": "approvePersonallyProcuredMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApprovePersonallyProcuredMovePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/personally_procured_moves/{personallyProcuredMoveId}/create_ppm_attachments": {
      "post": {
        "description": "Creates a PPM attachments PDF",
        "tags": [
          "ppm"
        ],
        "summary": "Creates PPM attachments PDF",
        "operationId": "createPPMAttachments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM to create an attachments PDF for",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "OTHER",
                "WEIGHT_TICKET",
                "STORAGE_EXPENSE",
                "SHIPMENT_SUMMARY",
                "EXPENSE",
                "WEIGHT_TICKET_SET"
              ],
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "Restrict the list to documents with matching docType.",
            "name": "docTypes",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a PPM attachments upload",
            "schema": {
              "$ref": "#/definitions/UploadPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to perform this action"
          },
          "413": {
            "description": "payload is too large"
          },
          "422": {
            "description": "malformed PDF contained in uploads"
          },
          "424": {
            "description": "no files to be processed into attachments PDF"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/queues/{queueType}": {
      "get": {
        "description": "Show all moves in a queue",
        "tags": [
          "queues"
        ],
        "summary": "Show all moves in a queue",
        "operationId": "showQueue",
        "parameters": [
          {
            "enum": [
              "new",
              "ppm_payment_requested",
              "all",
              "ppm_approved",
              "ppm_completed"
            ],
            "type": "string",
            "description": "Queue type to show",
            "name": "queueType",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list all moves in the specified queue",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MoveQueueItem"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to access this queue"
          },
          "404": {
            "description": "move queue item is not found"
          }
        }
      }
    },
    "/rate_engine_postal_codes/{postal_code}": {
      "get": {
        "description": "Verifies if a zipcode is valid for origin or destination location for a move.",
        "tags": [
          "postal_codes"
        ],
        "summary": "Validate if a zipcode is valid for origin or destination location for a move.",
        "operationId": "validatePostalCodeWithRateData",
        "parameters": [
          {
            "pattern": "^(\\d{5}?)$",
            "type": "string",
            "format": "zip",
            "name": "postal_code",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "origin",
              "destination"
            ],
            "type": "string",
            "name": "postal_code_type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "postal_code is valid or invalid",
            "schema": {
              "$ref": "#/definitions/RateEnginePostalCodePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/reimbursement/{reimbursementId}/approve": {
      "post": {
        "description": "Sets the status of the reimbursement to APPROVED.",
        "tags": [
          "office"
        ],
        "summary": "Approves the reimbursement",
        "operationId": "approveReimbursement",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the reimbursement being approved",
            "name": "reimbursementId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of reimbursement",
            "schema": {
              "$ref": "#/definitions/Reimbursement"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members": {
      "post": {
        "description": "Creates an instance of a service member tied to a user",
        "tags": [
          "service_members"
        ],
        "summary": "Creates service member for a logged-in user",
        "operationId": "createServiceMember",
        "parameters": [
          {
            "name": "createServiceMemberPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceMemberPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of service member",
            "schema": {
              "$ref": "#/definitions/ServiceMemberPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members/{serviceMemberId}": {
      "get": {
        "description": "Returns the given service member",
        "tags": [
          "service_members"
        ],
        "summary": "Returns the given service member",
        "operationId": "showServiceMember",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the service member",
            "schema": {
              "$ref": "#/definitions/ServiceMemberPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "patch": {
        "description": "Any fields sent in this request will be set on the service member referenced",
        "tags": [
          "service_members"
        ],
        "summary": "Patches the service member",
        "operationId": "patchServiceMember",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          },
          {
            "name": "patchServiceMemberPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchServiceMemberPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of service member",
            "schema": {
              "$ref": "#/definitions/ServiceMemberPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members/{serviceMemberId}/backup_contacts": {
      "get": {
        "description": "List all service member backup contacts",
        "tags": [
          "backup_contacts"
        ],
        "summary": "List all service member backup contacts",
        "operationId": "indexServiceMemberBackupContacts",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of service member backup contacts",
            "schema": {
              "$ref": "#/definitions/IndexServiceMemberBackupContactsPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to see this backup contact"
          },
          "404": {
            "description": "contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "description": "Creates an instance of a backup contact tied to a service member user",
        "tags": [
          "backup_contacts"
        ],
        "summary": "Submits backup contact for a logged-in user",
        "operationId": "createServiceMemberBackupContact",
        "parameters": [
          {
            "name": "createBackupContactPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceMemberBackupContactPayload"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of service member backup contact",
            "schema": {
              "$ref": "#/definitions/ServiceMemberBackupContactPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to create this backup contact"
          },
          "404": {
            "description": "contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members/{serviceMemberId}/current_orders": {
      "get": {
        "description": "Returns orders",
        "tags": [
          "service_members"
        ],
        "summary": "Returns the latest orders for a given service member",
        "operationId": "showServiceMemberOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the service member",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/uploads": {
      "post": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "uploads"
        ],
        "summary": "Create a new upload",
        "operationId": "createUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to add an upload to",
            "name": "documentId",
            "in": "query"
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/UploadPayload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "delete": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "tags": [
          "uploads"
        ],
        "summary": "Deletes a collection of uploads",
        "operationId": "deleteUploads",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Array of UUIDs to be deleted",
            "name": "uploadIds",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/uploads/{uploadId}": {
      "delete": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "tags": [
          "uploads"
        ],
        "summary": "Deletes an upload",
        "operationId": "deleteUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the upload to be deleted",
            "name": "uploadId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users/is_logged_in": {
      "get": {
        "description": "Returns boolean as to whether the user is logged in",
        "tags": [
          "users"
        ],
        "summary": "Returns boolean as to whether the user is logged in",
        "operationId": "isLoggedInUser",
        "responses": {
          "200": {
            "description": "Currently logged in user",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users/logged_in": {
      "get": {
        "description": "Returns the user info for the currently logged in user",
        "tags": [
          "users"
        ],
        "summary": "Returns the user info for the currently logged in user",
        "operationId": "showLoggedInUser",
        "responses": {
          "200": {
            "description": "Currently logged in user",
            "schema": {
              "$ref": "#/definitions/LoggedInUserPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessCode": {
      "type": "object",
      "required": [
        "id",
        "code",
        "move_type",
        "created_at"
      ],
      "properties": {
        "claimed_at": {
          "description": "when the access code was claimed or used",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2018-04-12T23:20:50.52Z"
        },
        "code": {
          "type": "string",
          "example": "CODE456"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "move_type": {
          "type": "string",
          "title": "Selected Move Type",
          "enum": [
            "HHG",
            "PPM"
          ]
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "Address": {
      "type": "object",
      "required": [
        "street_address_1",
        "city",
        "state",
        "postal_code"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "street_address_1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "street_address_2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "street_address_3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "Affiliation": {
      "type": "string",
      "title": "Branch of service",
      "enum": [
        "ARMY",
        "NAVY",
        "MARINES",
        "AIR_FORCE",
        "COAST_GUARD"
      ],
      "x-display-value": {
        "AIR_FORCE": "Air Force",
        "ARMY": "Army",
        "COAST_GUARD": "Coast Guard",
        "MARINES": "Marine Corps",
        "NAVY": "Navy"
      },
      "x-nullable": true
    },
    "ApprovePersonallyProcuredMovePayload": {
      "type": "object",
      "required": [
        "approve_date"
      ],
      "properties": {
        "approve_date": {
          "type": "string",
          "format": "date-time",
          "title": "When was the ppm move approved?",
          "example": "2019-03-26T13:19:56-04:00"
        }
      }
    },
    "AvailableMoveDates": {
      "type": "object",
      "required": [
        "start_date",
        "available"
      ],
      "properties": {
        "available": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "example": "2018-09-25"
        }
      }
    },
    "BackupContactPermission": {
      "type": "string",
      "title": "Permissions",
      "enum": [
        "NONE",
        "VIEW",
        "EDIT"
      ],
      "x-display-value": {
        "EDIT": "View and edit all move details",
        "NONE": "Contact Only",
        "VIEW": "View all move details"
      }
    },
    "CancelMove": {
      "type": "object",
      "required": [
        "cancel_reason"
      ],
      "properties": {
        "cancel_reason": {
          "type": "string",
          "x-nullable": true,
          "example": "Change of orders"
        }
      }
    },
    "CategoryExpenseSummary": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/MovingExpenseType"
        },
        "payment_methods": {
          "$ref": "#/definitions/PaymentMethodsTotals"
        },
        "total": {
          "type": "integer"
        }
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateGenericMoveDocumentPayload": {
      "type": "object",
      "required": [
        "upload_ids",
        "title",
        "move_document_type"
      ],
      "properties": {
        "move_document_type": {
          "$ref": "#/definitions/MoveDocumentType"
        },
        "notes": {
          "type": "string",
          "title": "Notes",
          "x-nullable": true,
          "example": "This document is good to go!"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "title": {
          "type": "string",
          "example": "very_useful_document.pdf"
        },
        "upload_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          }
        }
      }
    },
    "CreateMovingExpenseDocumentPayload": {
      "type": "object",
      "required": [
        "title",
        "move_document_type",
        "moving_expense_type",
        "requested_amount_cents",
        "payment_method"
      ],
      "properties": {
        "move_document_type": {
          "$ref": "#/definitions/MoveDocumentType"
        },
        "moving_expense_type": {
          "$ref": "#/definitions/MovingExpenseType"
        },
        "notes": {
          "type": "string",
          "title": "Notes",
          "x-nullable": true,
          "example": "This document is good to go!"
        },
        "payment_method": {
          "type": "string",
          "title": "Method of Payment",
          "enum": [
            "OTHER",
            "GTCC"
          ],
          "x-display-value": {
            "GTCC": "GTCC",
            "OTHER": "Other payment method"
          }
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "receipt_missing": {
          "type": "boolean",
          "title": "missing expense receipt"
        },
        "requested_amount_cents": {
          "description": "unit is cents",
          "type": "integer",
          "format": "cents",
          "title": "Requested Amount",
          "minimum": 1
        },
        "storage_end_date": {
          "type": "string",
          "format": "date",
          "title": "End date of storage for storage expenses",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "storage_start_date": {
          "type": "string",
          "format": "date",
          "title": "Start date of storage for storage expenses",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "title": {
          "type": "string",
          "example": "very_useful_document.pdf"
        },
        "upload_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          }
        }
      }
    },
    "CreatePersonallyProcuredMovePayload": {
      "type": "object",
      "properties": {
        "additional_pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "advance": {
          "$ref": "#/definitions/CreateReimbursement"
        },
        "advance_worksheet": {
          "$ref": "#/definitions/DocumentPayload"
        },
        "days_in_storage": {
          "type": "integer",
          "title": "How many days of storage do you think you'll need?",
          "maximum": 90,
          "x-nullable": true
        },
        "destination_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "estimated_storage_reimbursement": {
          "type": "string",
          "title": "Estimated Storage Reimbursement",
          "x-nullable": true
        },
        "has_additional_postal_code": {
          "type": "boolean",
          "title": "Will you move anything from another pickup location?",
          "x-nullable": true
        },
        "has_pro_gear": {
          "type": "string",
          "title": "Has Pro-Gear",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-nullable": true
        },
        "has_pro_gear_over_thousand": {
          "type": "string",
          "title": "Has Pro-Gear Over Thousand Pounds",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-nullable": true
        },
        "has_requested_advance": {
          "type": "boolean",
          "title": "Would you like an advance of up to 60% of your PPM incentive?"
        },
        "has_sit": {
          "type": "boolean",
          "title": "Will you put anything in storage?",
          "x-nullable": true
        },
        "net_weight": {
          "type": "integer",
          "title": "Net Weight",
          "minimum": 1,
          "x-nullable": true
        },
        "original_move_date": {
          "type": "string",
          "format": "date",
          "title": "When do you plan to move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "size": {
          "$ref": "#/definitions/TShirtSize"
        },
        "weight_estimate": {
          "type": "integer",
          "title": "Weight Estimate",
          "x-nullable": true
        }
      }
    },
    "CreateReimbursement": {
      "type": "object",
      "required": [
        "requested_amount",
        "method_of_receipt"
      ],
      "properties": {
        "method_of_receipt": {
          "$ref": "#/definitions/MethodOfReceipt"
        },
        "requested_amount": {
          "description": "unit is cents",
          "type": "integer",
          "format": "cents",
          "title": "Requested Amount",
          "minimum": 1
        }
      },
      "x-nullable": true
    },
    "CreateServiceMemberBackupContactPayload": {
      "type": "object",
      "required": [
        "name",
        "email",
        "permission"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "Email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@exmaple.com"
        },
        "name": {
          "type": "string",
          "title": "Name",
          "x-nullable": true,
          "example": "Susan Smith"
        },
        "permission": {
          "$ref": "#/definitions/BackupContactPermission"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        }
      }
    },
    "CreateServiceMemberPayload": {
      "type": "object",
      "properties": {
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "backup_mailing_address": {
          "title": "Backup Mailing Address",
          "$ref": "#/definitions/Address"
        },
        "current_station_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID number",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "x-nullable": true,
          "example": "5789345789"
        },
        "email_is_preferred": {
          "type": "boolean",
          "title": "Email",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "personal_email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "phone_is_preferred": {
          "type": "boolean",
          "title": "Phone",
          "x-nullable": true
        },
        "rank": {
          "$ref": "#/definitions/ServiceMemberRank"
        },
        "residential_address": {
          "title": "Residential Address",
          "$ref": "#/definitions/Address"
        },
        "secondary_telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Alternate phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "suffix": {
          "type": "string",
          "title": "Suffix",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best contact phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "CreateShipment": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "shipmentType"
      ],
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        }
      }
    },
    "CreateSignedCertificationPayload": {
      "type": "object",
      "required": [
        "date",
        "signature",
        "certification_text"
      ],
      "properties": {
        "certification_text": {
          "type": "string"
        },
        "certification_type": {
          "x-nullable": true,
          "$ref": "#/definitions/SignedCertificationTypeCreate"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "title": "Date"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "signature": {
          "type": "string",
          "title": "Signature"
        }
      }
    },
    "CreateUpdateOrders": {
      "type": "object",
      "required": [
        "service_member_id",
        "issue_date",
        "report_by_date",
        "orders_type",
        "has_dependents",
        "spouse_has_pro_gear",
        "new_duty_station_id"
      ],
      "properties": {
        "department_indicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "has_dependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?"
        },
        "issue_date": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Orders date",
          "example": "2018-04-26"
        },
        "new_duty_station_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "orders_number": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "orders_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "orders_type_detail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "report_by_date": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report-by date",
          "example": "2018-04-26"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "spouse_has_pro_gear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "CreateWeightTicketDocumentsPayload": {
      "type": "object",
      "required": [
        "personally_procured_move_id",
        "weight_ticket_set_type",
        "full_weight_ticket_missing",
        "empty_weight_ticket_missing",
        "trailer_ownership_missing"
      ],
      "properties": {
        "empty_weight": {
          "type": "integer",
          "title": "empty weight ticket recorded weight"
        },
        "empty_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing empty weight ticket"
        },
        "full_weight": {
          "type": "integer",
          "title": "full weight ticket recorded weight"
        },
        "full_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing full weight ticket"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "trailer_ownership_missing": {
          "type": "boolean",
          "title": "missing trailer ownership documentation"
        },
        "upload_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          }
        },
        "vehicle_make": {
          "type": "string",
          "title": "Vehicle make",
          "x-nullable": true
        },
        "vehicle_model": {
          "type": "string",
          "title": "Vehicle model",
          "x-nullable": true
        },
        "vehicle_nickname": {
          "type": "string",
          "title": "Vehicle nickname (ex. 'Large box truck')",
          "x-nullable": true
        },
        "weight_ticket_date": {
          "type": "string",
          "format": "date",
          "title": "Full Weight Ticket Date",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "weight_ticket_set_type": {
          "$ref": "#/definitions/WeightTicketSetType"
        }
      }
    },
    "DPSAuthCookieURLPayload": {
      "type": "object",
      "properties": {
        "cookie_url": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "DeptIndicator": {
      "type": "string",
      "title": "Dept. indicator",
      "enum": [
        "NAVY_AND_MARINES",
        "ARMY",
        "AIR_FORCE",
        "COAST_GUARD"
      ],
      "x-display-value": {
        "AIR_FORCE": "57 Air Force",
        "ARMY": "21 Army",
        "COAST_GUARD": "70 Coast Guard",
        "NAVY_AND_MARINES": "17 Navy and Marine Corps"
      },
      "x-nullable": true
    },
    "DocumentPayload": {
      "type": "object",
      "required": [
        "id",
        "service_member_id",
        "uploads"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadPayload"
          }
        }
      }
    },
    "DutyStationPayload": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address_id",
        "address",
        "affiliation",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "address_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "transportation_office": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DutyStationsPayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DutyStationPayload"
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "title",
        "detail"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "ExpenseSummaryPayload": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryExpenseSummary"
          }
        },
        "grand_total": {
          "type": "object",
          "properties": {
            "payment_method_totals": {
              "$ref": "#/definitions/PaymentMethodsTotals"
            },
            "total": {
              "type": "integer"
            }
          }
        }
      }
    },
    "IndexEntitlements": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/WeightAllotment"
      }
    },
    "IndexMovesPayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MovePayload"
      }
    },
    "IndexPersonallyProcuredMovePayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PersonallyProcuredMovePayload"
      }
    },
    "IndexServiceMemberBackupContactsPayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceMemberBackupContactPayload"
      }
    },
    "InvalidRequestResponsePayload": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LoggedInUserPayload": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "readOnly": true,
          "example": "john_bob@example.com"
        },
        "first_name": {
          "type": "string",
          "readOnly": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "office_user": {
          "x-nullable": true,
          "$ref": "#/definitions/OfficeUser"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "service_member": {
          "x-nullable": true,
          "$ref": "#/definitions/ServiceMemberPayload"
        }
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "$ref": "#/definitions/MTOAgentType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOAgentType": {
      "type": "string",
      "title": "MTO Agent Type",
      "enum": [
        "RELEASING_AGENT",
        "RECEIVING_AGENT"
      ],
      "example": "RELEASING_AGENT"
    },
    "MTOAgents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOShipment": {
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "readOnly": true
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "readOnly": true
        },
        "secondaryDeliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOShipmentStatus": {
      "type": "string",
      "enum": [
        "DRAFT",
        "APPROVED",
        "SUBMITTED",
        "REJECTED"
      ],
      "readOnly": true
    },
    "MTOShipmentType": {
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "HHG",
        "HHG_LONGHAUL_DOMESTIC",
        "HHG_SHORTHAUL_DOMESTIC",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC"
      ],
      "x-display-value": {
        "HHG": "HHG",
        "INTERNATIONAL_HHG": "International HHG",
        "INTERNATIONAL_UB": "International UB"
      },
      "example": "HHG"
    },
    "MTOShipments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "MethodOfReceipt": {
      "type": "string",
      "title": "Method of Receipt",
      "enum": [
        "MIL_PAY",
        "OTHER_DD",
        "GTCC"
      ],
      "x-display-value": {
        "GTCC": "GTCC",
        "MIL_PAY": "MilPay",
        "OTHER_DD": "Other account"
      },
      "x-nullable": true
    },
    "MoveDatesSummary": {
      "type": "object",
      "required": [
        "id",
        "move_id",
        "move_date",
        "pack",
        "pickup",
        "transit",
        "delivery",
        "report"
      ],
      "properties": {
        "delivery": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        },
        "id": {
          "type": "string",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538:2018-09-25"
        },
        "move_date": {
          "type": "string",
          "format": "date",
          "example": "2018-09-25"
        },
        "move_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "pack": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        },
        "pickup": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        },
        "report": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        },
        "transit": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        }
      }
    },
    "MoveDocumentPayload": {
      "type": "object",
      "required": [
        "id",
        "move_id",
        "document",
        "title",
        "move_document_type",
        "status"
      ],
      "properties": {
        "document": {
          "$ref": "#/definitions/DocumentPayload"
        },
        "empty_weight": {
          "type": "integer",
          "title": "Empty weight",
          "x-formatting": "weight",
          "x-nullable": true
        },
        "empty_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing empty weight ticket",
          "x-nullable": true
        },
        "full_weight": {
          "type": "integer",
          "title": "Full weight",
          "x-formatting": "weight",
          "x-nullable": true
        },
        "full_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing full weight ticket",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "move_document_type": {
          "$ref": "#/definitions/MoveDocumentType"
        },
        "move_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moving_expense_type": {
          "$ref": "#/definitions/MovingExpenseType"
        },
        "notes": {
          "type": "string",
          "title": "Notes",
          "x-nullable": true,
          "example": "This document is good to go!"
        },
        "payment_method": {
          "type": "string",
          "title": "Payment Method",
          "enum": [
            "OTHER",
            "GTCC"
          ],
          "x-display-value": {
            "GTCC": "GTCC",
            "OTHER": "Other account"
          }
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "receipt_missing": {
          "type": "boolean",
          "title": "missing expense receipt",
          "x-nullable": true
        },
        "requested_amount_cents": {
          "description": "unit is cents",
          "type": "integer",
          "format": "cents",
          "title": "Requested Amount",
          "minimum": 1
        },
        "status": {
          "$ref": "#/definitions/MoveDocumentStatus"
        },
        "storage_end_date": {
          "type": "string",
          "format": "date",
          "title": "End date of storage for storage expenses",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "storage_start_date": {
          "type": "string",
          "format": "date",
          "title": "Start date of storage for storage expenses",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "title": {
          "type": "string",
          "title": "Document title",
          "example": "very_useful_document.pdf"
        },
        "trailer_ownership_missing": {
          "type": "boolean",
          "title": "missing trailer ownership documentation",
          "x-nullable": true
        },
        "vehicle_make": {
          "type": "string",
          "title": "Vehicle make",
          "x-nullable": true
        },
        "vehicle_model": {
          "type": "string",
          "title": "Vehicle model",
          "x-nullable": true
        },
        "vehicle_nickname": {
          "type": "string",
          "title": "Nickname (ex. \"15-foot truck\")",
          "x-nullable": true
        },
        "weight_ticket_date": {
          "type": "string",
          "format": "date",
          "title": "Weight ticket date",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "weight_ticket_set_type": {
          "$ref": "#/definitions/WeightTicketSetType"
        }
      }
    },
    "MoveDocumentStatus": {
      "type": "string",
      "title": "Document status",
      "enum": [
        "AWAITING_REVIEW",
        "OK",
        "HAS_ISSUE",
        "EXCLUDE_FROM_CALCULATION"
      ],
      "x-display-value": {
        "AWAITING_REVIEW": "Awaiting review",
        "EXCLUDE_FROM_CALCULATION": "Exclude from calculation",
        "HAS_ISSUE": "Has issue",
        "OK": "OK"
      }
    },
    "MoveDocumentType": {
      "type": "string",
      "title": "Document type",
      "enum": [
        "OTHER",
        "WEIGHT_TICKET",
        "STORAGE_EXPENSE",
        "SHIPMENT_SUMMARY",
        "EXPENSE",
        "WEIGHT_TICKET_SET"
      ],
      "x-display-value": {
        "EXPENSE": "Expense",
        "OTHER": "Other document type",
        "SHIPMENT_SUMMARY": "Shipment summary",
        "STORAGE_EXPENSE": "Storage expense receipt",
        "WEIGHT_TICKET": "Weight ticket",
        "WEIGHT_TICKET_SET": "Weight ticket set"
      },
      "example": "EXPENSE"
    },
    "MoveDocuments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveDocumentPayload"
      }
    },
    "MovePayload": {
      "type": "object",
      "required": [
        "id",
        "orders_id",
        "locator",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "cancel_reason": {
          "type": "string",
          "x-nullable": true,
          "example": "Change of orders"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "mto_shipments": {
          "$ref": "#/definitions/MTOShipments"
        },
        "orders_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "personally_procured_moves": {
          "$ref": "#/definitions/IndexPersonallyProcuredMovePayload"
        },
        "selected_move_type": {
          "$ref": "#/definitions/SelectedMoveType"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "submitted_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveQueueItem": {
      "type": "object",
      "required": [
        "id",
        "status",
        "locator",
        "customer_name",
        "edipi",
        "rank",
        "orders_type",
        "branch_of_service",
        "last_modified_date",
        "created_at"
      ],
      "properties": {
        "actual_move_date": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "branch_of_service": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "customer_name": {
          "type": "string",
          "title": "Customer Name",
          "example": "Thedog, Nino"
        },
        "delivered_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2017-07-21T17:32:28Z"
        },
        "destination_duty_station_name": {
          "type": "string",
          "title": "Destination",
          "x-nullable": true,
          "example": "Dover AFB"
        },
        "destination_gbloc": {
          "type": "string",
          "title": "Destination GBLOC",
          "x-nullable": true,
          "example": "LKNQ"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID #",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "example": "5789345789"
        },
        "gbl_number": {
          "type": "string",
          "title": "GBL Number",
          "x-nullable": true,
          "example": "LNK12345"
        },
        "hhg_status": {
          "type": "string",
          "x-nullable": true,
          "example": "ACCEPTED"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "invoice_approved_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2017-07-21T17:32:28Z"
        },
        "last_modified_date": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-21T17:32:28Z"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "move_date": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "orders_type": {
          "type": "string",
          "title": "Move Type",
          "enum": [
            "PCS - OCONUS",
            "PCS - CONUS",
            "PCS + TDY - OCONUS",
            "PCS + TDY - CONUS"
          ]
        },
        "origin_duty_station_name": {
          "type": "string",
          "title": "Origin",
          "x-nullable": true,
          "example": "Dover AFB"
        },
        "origin_gbloc": {
          "type": "string",
          "title": "Origin GBLOC",
          "x-nullable": true,
          "example": "LKNQ"
        },
        "original_move_date": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "pm_survey_conducted_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2017-07-21T17:32:28Z"
        },
        "ppm_status": {
          "type": "string",
          "x-nullable": true,
          "example": "PAYMENT_REQUESTED"
        },
        "rank": {
          "$ref": "#/definitions/ServiceMemberRank"
        },
        "status": {
          "type": "string",
          "example": "APPROVED"
        },
        "submitted_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "weight_allotment": {
          "$ref": "#/definitions/WeightAllotment"
        }
      }
    },
    "MoveStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED",
        "NEEDS SERVICE COUNSELING"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "MovingExpenseType": {
      "type": "string",
      "title": "Moving Expense Type",
      "enum": [
        "CONTRACTED_EXPENSE",
        "GAS",
        "OIL",
        "OTHER",
        "PACKING_MATERIALS",
        "RENTAL_EQUIPMENT",
        "STORAGE",
        "TOLLS",
        "WEIGHING_FEES"
      ],
      "x-display-value": {
        "CONTRACTED_EXPENSE": "Contracted expense",
        "GAS": "Gas",
        "OIL": "Oil",
        "OTHER": "Other",
        "PACKING_MATERIALS": "Packing materials",
        "RENTAL_EQUIPMENT": "Rental equipment",
        "STORAGE": "Storage",
        "TOLLS": "Tolls",
        "WEIGHING_FEES": "Weighing fees"
      }
    },
    "OfficeUser": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal Email Address",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best contact phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "transportation_office": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "Orders": {
      "type": "object",
      "required": [
        "id",
        "service_member_id",
        "issue_date",
        "report_by_date",
        "orders_type",
        "has_dependents",
        "spouse_has_pro_gear",
        "new_duty_station",
        "uploaded_orders",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 7000
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "department_indicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "grade": {
          "type": "string",
          "x-nullable": true,
          "example": "O-6"
        },
        "has_dependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "issue_date": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Date issued",
          "example": "2018-04-26"
        },
        "moves": {
          "$ref": "#/definitions/IndexMovesPayload"
        },
        "new_duty_station": {
          "$ref": "#/definitions/DutyStationPayload"
        },
        "orders_number": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "orders_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "orders_type_detail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "origin_duty_station": {
          "x-nullable": true,
          "$ref": "#/definitions/DutyStationPayload"
        },
        "report_by_date": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report by",
          "example": "2018-04-26"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "spouse_has_pro_gear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?"
        },
        "status": {
          "$ref": "#/definitions/OrdersStatus"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "uploaded_orders": {
          "$ref": "#/definitions/DocumentPayload"
        }
      }
    },
    "OrdersStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "RETIREMENT",
        "SEPARATION"
      ],
      "x-display-value": {
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station (PCS)",
        "RETIREMENT": "Retirement",
        "SEPARATION": "Separation"
      }
    },
    "OrdersTypeDetail": {
      "type": "string",
      "title": "Orders type detail",
      "enum": [
        "HHG_PERMITTED",
        "PCS_TDY",
        "HHG_RESTRICTED_PROHIBITED",
        "HHG_RESTRICTED_AREA",
        "INSTRUCTION_20_WEEKS",
        "HHG_PROHIBITED_20_WEEKS",
        "DELAYED_APPROVAL"
      ],
      "x-display-value": {
        "DELAYED_APPROVAL": "Delayed Approval 20 Weeks or More",
        "HHG_PERMITTED": "Shipment of HHG Permitted",
        "HHG_PROHIBITED_20_WEEKS": "Shipment of HHG Prohibited but Authorized within 20 weeks",
        "HHG_RESTRICTED_AREA": "HHG Restricted Area-HHG Prohibited",
        "HHG_RESTRICTED_PROHIBITED": "Shipment of HHG Restricted or Prohibited",
        "INSTRUCTION_20_WEEKS": "Course of Instruction 20 Weeks or More",
        "PCS_TDY": "PCS with TDY Enroute"
      },
      "x-nullable": true
    },
    "PPMEstimateRange": {
      "type": "object",
      "required": [
        "range_min",
        "range_max"
      ],
      "properties": {
        "range_max": {
          "type": "integer",
          "title": "High estimate"
        },
        "range_min": {
          "type": "integer",
          "title": "Low estimate"
        }
      }
    },
    "PPMIncentive": {
      "type": "object",
      "required": [
        "gcc",
        "incentive_percentage"
      ],
      "properties": {
        "gcc": {
          "type": "integer",
          "title": "GCC"
        },
        "incentive_percentage": {
          "type": "integer",
          "title": "PPM Incentive @ 95%"
        }
      }
    },
    "PPMSitEstimate": {
      "type": "object",
      "required": [
        "estimate"
      ],
      "properties": {
        "estimate": {
          "type": "integer",
          "title": "Value in cents of SIT estimate for PPM"
        }
      }
    },
    "PPMStatus": {
      "type": "string",
      "title": "PPM status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "COMPLETED",
        "CANCELED",
        "PAYMENT_REQUESTED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "COMPLETED": "Completed",
        "DRAFT": "Draft",
        "PAYMENT_REQUESTED": "Payment Requested",
        "SUBMITTED": "Submitted"
      }
    },
    "PatchMovePayload": {
      "type": "object",
      "properties": {
        "selected_move_type": {
          "$ref": "#/definitions/SelectedMoveType"
        }
      }
    },
    "PatchPersonallyProcuredMovePayload": {
      "type": "object",
      "properties": {
        "actual_move_date": {
          "type": "string",
          "format": "date",
          "title": "When did you actually move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "additional_pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "advance": {
          "$ref": "#/definitions/Reimbursement"
        },
        "advance_worksheet": {
          "$ref": "#/definitions/DocumentPayload"
        },
        "days_in_storage": {
          "type": "integer",
          "title": "How many days of storage do you think you'll need?",
          "maximum": 90,
          "x-nullable": true
        },
        "destination_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "has_additional_postal_code": {
          "type": "boolean",
          "title": "Will you move anything from another pickup location?",
          "x-nullable": true
        },
        "has_pro_gear": {
          "type": "string",
          "title": "Has Pro-Gear",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-nullable": true
        },
        "has_pro_gear_over_thousand": {
          "type": "string",
          "title": "Has Pro-Gear Over Thousand Pounds",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-nullable": true
        },
        "has_requested_advance": {
          "type": "boolean",
          "title": "Would you like an advance of up to 60% of your PPM incentive?",
          "default": false
        },
        "has_sit": {
          "type": "boolean",
          "title": "Will you put anything in storage?",
          "x-nullable": true
        },
        "incentive_estimate_max": {
          "type": "integer",
          "title": "Incentive Estimate Max",
          "minimum": 1,
          "x-nullable": true
        },
        "incentive_estimate_min": {
          "type": "integer",
          "title": "Incentive Estimate Min",
          "minimum": 1,
          "x-nullable": true
        },
        "net_weight": {
          "type": "integer",
          "title": "Net Weight",
          "minimum": 1,
          "x-nullable": true
        },
        "original_move_date": {
          "type": "string",
          "format": "date",
          "title": "When do you plan to move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "size": {
          "$ref": "#/definitions/TShirtSize"
        },
        "total_sit_cost": {
          "type": "integer",
          "title": "How much does your storage cost?",
          "minimum": 1,
          "x-nullable": true
        },
        "weight_estimate": {
          "type": "integer",
          "title": "Weight Estimate",
          "x-nullable": true
        }
      }
    },
    "PatchServiceMemberPayload": {
      "type": "object",
      "properties": {
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "backup_mailing_address": {
          "title": "Backup Mailing Address",
          "$ref": "#/definitions/Address"
        },
        "current_station_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID number",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "x-nullable": true,
          "example": "5789345789"
        },
        "email_is_preferred": {
          "type": "boolean",
          "title": "Email",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "personal_email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal Email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "phone_is_preferred": {
          "type": "boolean",
          "title": "Phone",
          "x-nullable": true
        },
        "rank": {
          "$ref": "#/definitions/ServiceMemberRank"
        },
        "residential_address": {
          "title": "Residential Address",
          "$ref": "#/definitions/Address"
        },
        "secondary_telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Alternate Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "suffix": {
          "type": "string",
          "title": "Suffix",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best Contact Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "PaymentMethodsTotals": {
      "type": "object",
      "properties": {
        "GTCC": {
          "type": "integer"
        },
        "MIL_PAY": {
          "type": "integer"
        },
        "OTHER": {
          "type": "integer"
        }
      }
    },
    "PersonallyProcuredMovePayload": {
      "type": "object",
      "required": [
        "id",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "actual_move_date": {
          "type": "string",
          "format": "date",
          "title": "When did you actually move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "additional_pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "advance": {
          "$ref": "#/definitions/Reimbursement"
        },
        "advance_worksheet": {
          "$ref": "#/definitions/DocumentPayload"
        },
        "approve_date": {
          "type": "string",
          "format": "date-time",
          "title": "When was the ppm move approved?",
          "x-nullable": true,
          "example": "2019-03-26T13:19:56-04:00"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "days_in_storage": {
          "type": "integer",
          "title": "How many days of storage do you think you'll need?",
          "maximum": 90,
          "x-nullable": true
        },
        "destination_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "estimated_storage_reimbursement": {
          "type": "string",
          "title": "Estimated Storage Reimbursement",
          "x-nullable": true
        },
        "has_additional_postal_code": {
          "type": "boolean",
          "title": "Will you move anything from another pickup location?",
          "x-nullable": true
        },
        "has_pro_gear": {
          "type": "string",
          "title": "Has Pro-Gear",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-display-value": {
            "NO": false,
            "NOT SURE": "Not Sure",
            "YES": true
          },
          "x-nullable": true
        },
        "has_pro_gear_over_thousand": {
          "type": "string",
          "title": "Has Pro-Gear Over Thousand Pounds",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-display-value": {
            "NO": false,
            "NOT SURE": "Not Sure",
            "YES": true
          },
          "x-nullable": true
        },
        "has_requested_advance": {
          "type": "boolean",
          "title": "Would you like an advance of up to 60% of your PPM incentive?",
          "default": false
        },
        "has_sit": {
          "type": "boolean",
          "title": "Will you put anything in storage?",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "incentive_estimate_max": {
          "type": "integer",
          "title": "Estimated incentive maximum in cents",
          "x-nullable": true
        },
        "incentive_estimate_min": {
          "type": "integer",
          "title": "Estimated incentive minimum in cents",
          "x-nullable": true
        },
        "mileage": {
          "type": "integer",
          "title": "Distance between origin and destination in miles",
          "x-nullable": true
        },
        "move_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "net_weight": {
          "type": "integer",
          "title": "Net Weight",
          "minimum": 1,
          "x-formatting": "weight",
          "x-nullable": true
        },
        "original_move_date": {
          "type": "string",
          "format": "date",
          "title": "When do you plan to move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "planned_sit_max": {
          "type": "integer",
          "title": "Maximum SIT reimbursement for the planned SIT duration",
          "x-nullable": true
        },
        "sit_max": {
          "type": "integer",
          "title": "Maximum SIT reimbursement for maximum SIT duration",
          "x-nullable": true
        },
        "size": {
          "$ref": "#/definitions/TShirtSize"
        },
        "status": {
          "$ref": "#/definitions/PPMStatus"
        },
        "submit_date": {
          "type": "string",
          "format": "date-time",
          "title": "When was the ppm move submitted?",
          "x-nullable": true,
          "example": "2019-03-26T13:19:56-04:00"
        },
        "total_sit_cost": {
          "type": "integer",
          "format": "cents",
          "title": "Total cost for the planned SIT duration",
          "x-nullable": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "weight_estimate": {
          "type": "integer",
          "title": "Weight Estimate",
          "x-formatting": "weight",
          "x-nullable": true
        }
      }
    },
    "PostDocumentPayload": {
      "type": "object",
      "properties": {
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        }
      }
    },
    "RateEnginePostalCodePayload": {
      "type": "object",
      "required": [
        "valid",
        "postal_code",
        "postal_code_type"
      ],
      "properties": {
        "postal_code": {
          "description": "zip code, international allowed",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "example": "'90210' or 'N15 3NL'"
        },
        "postal_code_type": {
          "type": "string",
          "enum": [
            "origin",
            "destination"
          ]
        },
        "valid": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "Reimbursement": {
      "type": "object",
      "required": [
        "requested_amount",
        "method_of_receipt"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "method_of_receipt": {
          "$ref": "#/definitions/MethodOfReceipt"
        },
        "requested_amount": {
          "description": "unit is cents",
          "type": "integer",
          "format": "cents",
          "title": "Requested Amount",
          "minimum": 1
        },
        "requested_date": {
          "type": "string",
          "format": "date",
          "title": "Requested Date",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "status": {
          "$ref": "#/definitions/ReimbursementStatus"
        }
      },
      "x-nullable": true
    },
    "ReimbursementStatus": {
      "type": "string",
      "title": "Reimbursement",
      "enum": [
        "DRAFT",
        "REQUESTED",
        "APPROVED",
        "REJECTED",
        "PAID"
      ],
      "x-nullable": true
    },
    "Role": {
      "type": "object",
      "required": [
        "id",
        "roleType",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "roleType": {
          "type": "string",
          "example": "customer"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SelectedMoveType": {
      "type": "string",
      "title": "Selected Move Type",
      "enum": [
        "HHG",
        "PPM",
        "UB",
        "POV",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "HHG_PPM"
      ],
      "x-display-value": {
        "HHG": "Household Goods Move",
        "HHG_INTO_NTS_DOMESTIC": "Non-Temporary Storage",
        "HHG_OUTOF_NTS_DOMESTIC": "Non-Temporary Storage Release",
        "HHG_PPM": "Both HHG and PPM",
        "POV": "Privately-Owned Vehicle",
        "PPM": "Personal Procured Move",
        "UB": "Unaccompanied Baggage"
      },
      "x-nullable": true
    },
    "ServiceMemberBackupContactPayload": {
      "type": "object",
      "required": [
        "id",
        "created_at",
        "updated_at",
        "name",
        "email",
        "permission"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "Email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "title": "Name",
          "x-nullable": true,
          "example": "Susan Smith"
        },
        "permission": {
          "$ref": "#/definitions/BackupContactPermission"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ServiceMemberPayload": {
      "type": "object",
      "required": [
        "id",
        "user_id",
        "is_profile_complete",
        "created_at",
        "updated_at",
        "requires_access_code"
      ],
      "properties": {
        "affiliation": {
          "title": "Branch",
          "$ref": "#/definitions/Affiliation"
        },
        "backup_contacts": {
          "$ref": "#/definitions/IndexServiceMemberBackupContactsPayload"
        },
        "backup_mailing_address": {
          "$ref": "#/definitions/Address"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "current_station": {
          "$ref": "#/definitions/DutyStationPayload"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID number",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "x-nullable": true,
          "example": "5789345789"
        },
        "email_is_preferred": {
          "type": "boolean",
          "title": "Email",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "is_profile_complete": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Orders"
          }
        },
        "personal_email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal Email Address",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "phone_is_preferred": {
          "type": "boolean",
          "title": "Telephone",
          "x-nullable": true
        },
        "rank": {
          "title": "Rank",
          "$ref": "#/definitions/ServiceMemberRank"
        },
        "requires_access_code": {
          "type": "boolean",
          "title": "Requires Access Code",
          "x-nullable": false
        },
        "residential_address": {
          "title": "Residential Address",
          "$ref": "#/definitions/Address"
        },
        "secondary_telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Secondary Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "suffix": {
          "type": "string",
          "title": "Suffix",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best contact phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "weight_allotment": {
          "$ref": "#/definitions/WeightAllotment"
        }
      }
    },
    "ServiceMemberRank": {
      "type": "string",
      "title": "Rank",
      "enum": [
        "E_1",
        "E_2",
        "E_3",
        "E_4",
        "E_5",
        "E_6",
        "E_7",
        "E_8",
        "E_9",
        "O_1_ACADEMY_GRADUATE",
        "O_2",
        "O_3",
        "O_4",
        "O_5",
        "O_6",
        "O_7",
        "O_8",
        "O_9",
        "O_10",
        "W_1",
        "W_2",
        "W_3",
        "W_4",
        "W_5",
        "AVIATION_CADET",
        "CIVILIAN_EMPLOYEE",
        "ACADEMY_CADET",
        "MIDSHIPMAN"
      ],
      "x-display-value": {
        "ACADEMY_CADET": "Service Academy Cadet",
        "AVIATION_CADET": "Aviation Cadet",
        "CIVILIAN_EMPLOYEE": "Civilian Employee",
        "E_1": "E-1",
        "E_2": "E-2",
        "E_3": "E-3",
        "E_4": "E-4",
        "E_5": "E-5",
        "E_6": "E-6",
        "E_7": "E-7",
        "E_8": "E-8",
        "E_9": "E-9",
        "MIDSHIPMAN": "Midshipman",
        "O_10": "O-10",
        "O_1_ACADEMY_GRADUATE": "O-1/Service Academy Graduate",
        "O_2": "O-2",
        "O_3": "O-3",
        "O_4": "O-4",
        "O_5": "O-5",
        "O_6": "O-6",
        "O_7": "O-7",
        "O_8": "O-8",
        "O_9": "O-9",
        "W_1": "W-1",
        "W_2": "W-2",
        "W_3": "W-3",
        "W_4": "W-4",
        "W_5": "W-5"
      },
      "x-nullable": true
    },
    "SignedCertificationPayload": {
      "type": "object",
      "required": [
        "id",
        "move_id",
        "created_at",
        "updated_at",
        "date",
        "signature",
        "certification_text"
      ],
      "properties": {
        "certification_text": {
          "type": "string"
        },
        "certification_type": {
          "x-nullable": true,
          "$ref": "#/definitions/SignedCertificationType"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "title": "Date"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "move_id": {
          "type": "string",
          "format": "uuid"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "signature": {
          "type": "string",
          "title": "Signature"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SignedCertificationType": {
      "type": "string",
      "enum": [
        "PPM_PAYMENT",
        "SHIPMENT",
        "PPM",
        "HHG"
      ],
      "x-nullable": true
    },
    "SignedCertificationTypeCreate": {
      "type": "string",
      "enum": [
        "PPM_PAYMENT",
        "SHIPMENT"
      ],
      "x-nullable": true
    },
    "SignedCertifications": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SignedCertificationPayload"
      }
    },
    "SubmitMoveForApprovalPayload": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/CreateSignedCertificationPayload"
        }
      }
    },
    "SubmitPersonallyProcuredMovePayload": {
      "type": "object",
      "required": [
        "submit_date"
      ],
      "properties": {
        "submit_date": {
          "type": "string",
          "format": "date-time",
          "title": "When was the ppm move submitted?",
          "example": "2019-03-26T13:19:56-04:00"
        }
      }
    },
    "TShirtSize": {
      "type": "string",
      "title": "Size",
      "enum": [
        "S",
        "M",
        "L"
      ],
      "x-nullable": true
    },
    "TransportationOffice": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "gbloc": {
          "type": "string",
          "pattern": "^[A-Z]{4}$",
          "example": "JENQ"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "example": 29.382973
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "example": -98.62759
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "phone_lines": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "telephone",
            "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
            "example": "212-555-5555"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "UpdatePersonallyProcuredMovePayload": {
      "type": "object",
      "properties": {
        "actual_move_date": {
          "type": "string",
          "format": "date",
          "title": "When did you actually move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "additional_pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "advance": {
          "$ref": "#/definitions/Reimbursement"
        },
        "advance_worksheet": {
          "$ref": "#/definitions/DocumentPayload"
        },
        "days_in_storage": {
          "type": "integer",
          "title": "How many days of storage do you think you'll need?",
          "maximum": 90,
          "x-nullable": true
        },
        "destination_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "estimated_storage_reimbursement": {
          "type": "string",
          "title": "Estimated Storage Reimbursement",
          "x-nullable": true
        },
        "has_additional_postal_code": {
          "type": "boolean",
          "title": "Will you move anything from another pickup location?",
          "x-nullable": true
        },
        "has_pro_gear": {
          "type": "string",
          "title": "Has Pro-Gear",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-nullable": true
        },
        "has_pro_gear_over_thousand": {
          "type": "string",
          "title": "Has Pro-Gear Over Thousand Pounds",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-nullable": true
        },
        "has_requested_advance": {
          "type": "boolean",
          "title": "Would you like an advance of up to 60% of your PPM incentive?",
          "default": false
        },
        "has_sit": {
          "type": "boolean",
          "title": "Will you put anything in storage?",
          "x-nullable": true
        },
        "net_weight": {
          "type": "integer",
          "title": "Net Weight",
          "minimum": 1,
          "x-nullable": true
        },
        "original_move_date": {
          "type": "string",
          "format": "date",
          "title": "When do you plan to move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "size": {
          "$ref": "#/definitions/TShirtSize"
        },
        "total_sit_cost": {
          "type": "integer",
          "title": "How much does your storage cost?",
          "x-nullable": true
        },
        "weight_estimate": {
          "type": "integer",
          "title": "Weight Estimate",
          "x-nullable": true
        }
      }
    },
    "UpdateServiceMemberBackupContactPayload": {
      "type": "object",
      "required": [
        "name",
        "email",
        "permission"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "email address",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "name": {
          "type": "string",
          "x-nullable": true,
          "example": "Susan Smith"
        },
        "permission": {
          "$ref": "#/definitions/BackupContactPermission"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        }
      }
    },
    "UpdateShipment": {
      "type": "object",
      "properties": {
        "agents": {
          "x-nullable": true,
          "$ref": "#/definitions/MTOAgents"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        }
      }
    },
    "UploadPayload": {
      "type": "object",
      "required": [
        "id",
        "url",
        "filename",
        "content_type",
        "bytes",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "bytes": {
          "type": "integer"
        },
        "content_type": {
          "type": "string",
          "format": "mime-type",
          "example": "application/pdf"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "filename": {
          "type": "string",
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "type": "string",
          "enum": [
            "INFECTED",
            "CLEAN",
            "PROCESSING"
          ]
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalidFields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "type": "object"
        }
      ],
      "properties": {
        "invalidFields": {
          "type": "object",
          "additionalProperties": {
            "description": "List of errors for the field",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "WeightAllotment": {
      "type": "object",
      "required": [
        "total_weight_self",
        "total_weight_self_plus_dependents",
        "pro_gear_weight",
        "pro_gear_weight_spouse"
      ],
      "properties": {
        "pro_gear_weight": {
          "type": "integer",
          "example": 2000
        },
        "pro_gear_weight_spouse": {
          "type": "integer",
          "example": 500
        },
        "total_weight_self": {
          "type": "integer",
          "example": 18000
        },
        "total_weight_self_plus_dependents": {
          "type": "integer",
          "example": 18000
        }
      }
    },
    "WeightTicketSetType": {
      "type": "string",
      "title": "Select weight ticket type",
      "enum": [
        "CAR",
        "CAR_TRAILER",
        "BOX_TRUCK",
        "PRO_GEAR"
      ],
      "x-display-value": {
        "BOX_TRUCK": "Box truck",
        "CAR": "Car",
        "CAR_TRAILER": "Car + Trailer",
        "PRO_GEAR": "Pro-gear"
      },
      "x-nullable": true
    }
  },
  "responses": {
    "Conflict": {
      "description": "The request could not be processed because of conflict in the current state of the resource.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "ServerError": {
      "description": "A server error occurred.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "The payload was unprocessable.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The internal/website API for my.move.mil",
    "title": "my.move.mil",
    "contact": {
      "email": "ppp@truss.works"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/internal",
  "paths": {
    "/access_codes": {
      "get": {
        "description": "Fetches the access code for a service member.",
        "tags": [
          "accesscode"
        ],
        "summary": "Fetches an access code",
        "operationId": "fetchAccessCode",
        "responses": {
          "200": {
            "description": "access code has been found in system",
            "schema": {
              "$ref": "#/definitions/AccessCode"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "not authorized to fetch access code"
          },
          "404": {
            "description": "access code not found in system"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/access_codes/invalid": {
      "patch": {
        "description": "Updates access code as invalid by associating it with the current service member.",
        "tags": [
          "accesscode"
        ],
        "summary": "Updates access code as invalid by associating it with the current service member.",
        "operationId": "claimAccessCode",
        "parameters": [
          {
            "description": "the code the access code represents and verifies if in use",
            "name": "accessCode",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "code"
              ],
              "properties": {
                "code": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "access code is invalid or valid",
            "schema": {
              "$ref": "#/definitions/AccessCode"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "not authorized to validate access code"
          },
          "404": {
            "description": "access code not found in system"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/access_codes/valid": {
      "get": {
        "description": "Verifies if access code is both unused and correctly associated with a move type.",
        "tags": [
          "accesscode"
        ],
        "summary": "Validate if an access code has been unused and associated with the correct move type.",
        "operationId": "validateAccessCode",
        "parameters": [
          {
            "pattern": "^(HHG|PPM)-[A-Z0-9]{6}$",
            "type": "string",
            "x-nullable": false,
            "description": "the code the access code represents and verifies if in use",
            "name": "code",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "access code is invalid or valid",
            "schema": {
              "$ref": "#/definitions/AccessCode"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "not authorized to validate access code"
          },
          "404": {
            "description": "access code not found in system"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/addresses/{addressId}": {
      "get": {
        "description": "Returns an address",
        "tags": [
          "addresses"
        ],
        "summary": "Returns an address",
        "operationId": "showAddress",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the address to return",
            "name": "addressId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the requested address",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/backup_contacts/{backupContactId}": {
      "get": {
        "description": "Returns the given service member backup contact",
        "tags": [
          "backup_contacts"
        ],
        "summary": "Returns the given service member backup contact",
        "operationId": "showServiceMemberBackupContact",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member backup contact",
            "name": "backupContactId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the service member backup contact",
            "schema": {
              "$ref": "#/definitions/ServiceMemberBackupContactPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "backup contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "description": "Any fields sent in this request will be set on the backup contact referenced",
        "tags": [
          "backup_contacts"
        ],
        "summary": "Updates a service member backup contact",
        "operationId": "updateServiceMemberBackupContact",
        "parameters": [
          {
            "name": "updateServiceMemberBackupContactPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceMemberBackupContactPayload"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member backup contact",
            "name": "backupContactId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "updated instance of backup contact",
            "schema": {
              "$ref": "#/definitions/ServiceMemberBackupContactPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "backup contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/calendar/available_move_dates": {
      "get": {
        "description": "Returns available dates for the move calendar",
        "tags": [
          "calendar"
        ],
        "summary": "Returns available dates for the move calendar",
        "operationId": "showAvailableMoveDates",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "description": "Look for future available dates starting from (and including) this date",
            "name": "startDate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of available dates",
            "schema": {
              "$ref": "#/definitions/AvailableMoveDates"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/documents": {
      "post": {
        "description": "Documents represent a physical artifact such as a scanned document or a PDF file",
        "tags": [
          "documents"
        ],
        "summary": "Create a new document",
        "operationId": "createDocument",
        "parameters": [
          {
            "name": "documentPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostDocumentPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created document",
            "schema": {
              "$ref": "#/definitions/DocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/documents/{documentId}": {
      "get": {
        "description": "Returns a document and its uploads",
        "tags": [
          "documents"
        ],
        "summary": "Returns a document",
        "operationId": "showDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to return",
            "name": "documentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the requested document",
            "schema": {
              "$ref": "#/definitions/DocumentPayload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/dps_auth/cookie_url": {
      "post": {
        "description": "Returns the URL to redirect to that begins DPS auth",
        "tags": [
          "dps_auth"
        ],
        "summary": "Returns the URL to redirect to that begins DPS auth",
        "operationId": "getCookieURL",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the cookie to set, DPS by default",
            "name": "cookie_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The DPS URL to redirec to",
            "name": "dps_redirect_url",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DPSAuthCookieURLPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/duty_stations": {
      "get": {
        "description": "Returns the duty stations matching the search query",
        "tags": [
          "duty_stations"
        ],
        "summary": "Returns the duty stations matching the search query",
        "operationId": "searchDutyStations",
        "parameters": [
          {
            "type": "string",
            "description": "Search string for duty stations",
            "name": "search",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the duty station",
            "schema": {
              "$ref": "#/definitions/DutyStationsPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "matching duty station not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/duty_stations/{dutyStationId}/transportation_office": {
      "get": {
        "description": "Returns the given duty station's transportation office",
        "tags": [
          "transportation_offices"
        ],
        "summary": "Returns the transportation office for a given duty station",
        "operationId": "showDutyStationTransportationOffice",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the duty station",
            "name": "dutyStationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the transportation office for a duty station",
            "schema": {
              "$ref": "#/definitions/TransportationOffice"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "transportation office not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/entitlements": {
      "get": {
        "description": "List weight weights allotted by entitlement",
        "tags": [
          "entitlements"
        ],
        "summary": "List weight weights allotted by entitlement",
        "operationId": "indexEntitlements",
        "responses": {
          "200": {
            "description": "List of weights allotted entitlement",
            "schema": {
              "$ref": "#/definitions/IndexEntitlements"
            }
          }
        }
      }
    },
    "/entitlements/{moveId}": {
      "get": {
        "description": "Determine whether weight estimate is below entitlement",
        "tags": [
          "entitlements"
        ],
        "summary": "Validates that the stored weight estimate is below the allotted entitlement range for a service member",
        "operationId": "validateEntitlement",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "weight estimate is below allotted entitlement"
          },
          "404": {
            "description": "personally procured move not found"
          },
          "409": {
            "description": "Requested weight estimate is above allotted entitlement"
          }
        }
      }
    },
    "/estimates/ppm": {
      "get": {
        "description": "Calculates a reimbursement range for a PPM move (excluding SIT)",
        "tags": [
          "ppm"
        ],
        "summary": "Return a PPM cost estimate",
        "operationId": "showPPMEstimate",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "name": "original_move_date",
            "in": "query",
            "required": true
          },
          {
            "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
            "type": "string",
            "format": "zip",
            "name": "origin_zip",
            "in": "query",
            "required": true
          },
          {
            "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
            "type": "string",
            "format": "zip",
            "name": "origin_duty_station_zip",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "name": "orders_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "weight_estimate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Made estimate of PPM cost range",
            "schema": {
              "$ref": "#/definitions/PPMEstimateRange"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "ppm discount not found for provided postal codes and original move date"
          },
          "409": {
            "description": "distance is less than 50 miles (no short haul moves)"
          },
          "422": {
            "description": "cannot process request with given information"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/estimates/ppm_sit": {
      "get": {
        "description": "Calculates a reimbursment for a PPM move's SIT",
        "tags": [
          "ppm"
        ],
        "summary": "Return a PPM move's SIT cost estimate",
        "operationId": "showPPMSitEstimate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "personally_procured_move_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "original_move_date",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "days_in_storage",
            "in": "query",
            "required": true
          },
          {
            "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
            "type": "string",
            "format": "zip",
            "name": "origin_zip",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "name": "orders_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "weight_estimate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "show PPM SIT estimate",
            "schema": {
              "$ref": "#/definitions/PPMSitEstimate"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "409": {
            "description": "distance is less than 50 miles (no short haul moves)"
          },
          "422": {
            "description": "the payload was unprocessable"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/move_documents/{moveDocumentId}": {
      "put": {
        "description": "Update a move document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Updates a move document",
        "operationId": "updateMoveDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move document model",
            "name": "moveDocumentId",
            "in": "path",
            "required": true
          },
          {
            "name": "updateMoveDocument",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of move document",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move document not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "description": "Deletes a move document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Deletes a move document",
        "operationId": "deleteMoveDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move document model",
            "name": "moveDocumentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}": {
      "get": {
        "description": "Returns the given move",
        "tags": [
          "moves"
        ],
        "summary": "Returns the given move",
        "operationId": "showMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the move",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move is not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "patch": {
        "description": "Any fields sent in this request will be set on the move referenced",
        "tags": [
          "moves"
        ],
        "summary": "Patches the move",
        "operationId": "patchMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "patchMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMovePayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "updated instance of move",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move is not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/approve": {
      "post": {
        "description": "Approves the basic details of a move. The status of the move will be updated to APPROVED",
        "tags": [
          "office"
        ],
        "summary": "Approves a move to proceed",
        "operationId": "approveMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (approved) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to approve this move"
          },
          "409": {
            "description": "the move is not in a state to be approved",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/cancel": {
      "post": {
        "description": "Cancels the basic details of a move. The status of the move will be updated to CANCELED",
        "tags": [
          "office"
        ],
        "summary": "Cancels a move",
        "operationId": "cancelMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "cancelMove",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelMove"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (canceled) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to cancel this move"
          },
          "409": {
            "description": "the move is not in a state to be canceled",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/move_dates_summary": {
      "get": {
        "description": "Returns projected move-related dates for a given move date",
        "tags": [
          "moves"
        ],
        "summary": "Returns projected move-related dates for a given move date",
        "operationId": "showMoveDatesSummary",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "description": "The chosen move date",
            "name": "moveDate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of projected move-related dates",
            "schema": {
              "$ref": "#/definitions/MoveDatesSummary"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/move_documents": {
      "get": {
        "description": "Returns a list of all Move Documents associated with this move",
        "tags": [
          "move_docs"
        ],
        "summary": "Returns a list of all Move Documents associated with this move",
        "operationId": "indexMoveDocuments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of move douments",
            "schema": {
              "$ref": "#/definitions/MoveDocuments"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          }
        }
      },
      "post": {
        "description": "Created a move document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Creates a move document",
        "operationId": "createGenericMoveDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createGenericMoveDocumentPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGenericMoveDocumentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns new move document object",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to modify this move"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/moving_expense_documents": {
      "post": {
        "description": "Created a moving expense document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Creates a moving expense document",
        "operationId": "createMovingExpenseDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createMovingExpenseDocumentPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMovingExpenseDocumentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns new moving expense document object",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to modify this move"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/orders": {
      "get": {
        "description": "Returns orders information for a move for office use",
        "tags": [
          "office"
        ],
        "summary": "Returns orders information for a move for office use",
        "operationId": "showOfficeOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the orders information for a move for office use",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/personally_procured_move": {
      "get": {
        "description": "Returns a list of all PPMs associated with this move",
        "tags": [
          "ppm"
        ],
        "summary": "Returns a list of all PPMs associated with this move",
        "operationId": "indexPersonallyProcuredMoves",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move these PPMs are associated with",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/IndexPersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          }
        }
      },
      "post": {
        "description": "Create an instance of personally_procured_move tied to the move ID",
        "tags": [
          "ppm"
        ],
        "summary": "Creates a new PPM for the given move",
        "operationId": "createPersonallyProcuredMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move this PPM is associated with",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createPersonallyProcuredMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePersonallyProcuredMovePayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/personally_procured_move/{personallyProcuredMoveId}": {
      "get": {
        "description": "Returns the given PPM",
        "tags": [
          "ppm"
        ],
        "summary": "Returns the given PPM",
        "operationId": "showPersonallyProcuredMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move being signed for",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/IndexPersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          }
        }
      },
      "put": {
        "description": "This replaces the current version of the PPM with the version sent.",
        "tags": [
          "ppm"
        ],
        "summary": "Updates the PPM",
        "operationId": "updatePersonallyProcuredMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM being updated",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          },
          {
            "name": "updatePersonallyProcuredMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePersonallyProcuredMovePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "patch": {
        "description": "Any fields sent in this request will be set on the PPM referenced",
        "tags": [
          "ppm"
        ],
        "summary": "Patches the PPM",
        "operationId": "patchPersonallyProcuredMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM being patched",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          },
          {
            "name": "patchPersonallyProcuredMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchPersonallyProcuredMovePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "ppm is not found or ppm discount not found for provided postal codes and original move date"
          },
          "422": {
            "description": "cannot process request with given information"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/personally_procured_move/{personallyProcuredMoveId}/estimate": {
      "patch": {
        "description": "This request calculates the estimated incentive of a PPM and attaches this range to the PPM",
        "tags": [
          "ppm"
        ],
        "summary": "Calculates the estimated incentive of a PPM",
        "operationId": "updatePersonallyProcuredMoveEstimate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM being patched",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "ppm is not found or ppm discount not found for provided postal codes and original move date"
          },
          "422": {
            "description": "cannot process request with given information"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/shipment_summary_worksheet": {
      "get": {
        "description": "Generates pre-filled PDF using data already collected",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "moves"
        ],
        "summary": "Returns Shipment Summary Worksheet",
        "operationId": "showShipmentSummaryWorksheet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "description": "The preparationDate of PDF",
            "name": "preparationDate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Pre-filled worksheet PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/signed_certifications": {
      "get": {
        "description": "returns a list of all signed_certifications associated with the move ID",
        "tags": [
          "certification"
        ],
        "summary": "gets the signed certifications for the given move ID",
        "operationId": "indexSignedCertification",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "moveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of signed certifications",
            "schema": {
              "$ref": "#/definitions/SignedCertifications"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "description": "Create an instance of signed_certification tied to the move ID",
        "tags": [
          "certification"
        ],
        "summary": "Submits signed certification for the given move ID",
        "operationId": "createSignedCertification",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move being signed for",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createSignedCertificationPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSignedCertificationPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of signed_certification",
            "schema": {
              "$ref": "#/definitions/SignedCertificationPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to sign for this move"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/moves/{moveId}/submit": {
      "post": {
        "description": "Submits a move for approval by the office. The status of the move will be updated to SUBMITTED",
        "tags": [
          "moves"
        ],
        "summary": "Submits a move for approval",
        "operationId": "submitMoveForApproval",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "submitMoveForApprovalPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitMoveForApprovalPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated (submitted) move object",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to approve this move"
          },
          "409": {
            "description": "the move is not in a state to be approved",
            "schema": {
              "$ref": "#/definitions/MovePayload"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveId}/weight_ticket": {
      "post": {
        "description": "Created a weight ticket document with the given information",
        "tags": [
          "move_docs"
        ],
        "summary": "Creates a weight ticket document",
        "operationId": "createWeightTicketDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the move",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "name": "createWeightTicketDocument",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWeightTicketDocumentsPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns new weight ticket document object",
            "schema": {
              "$ref": "#/definitions/MoveDocumentPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to modify this move"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/moves/{moveTaskOrderID}/mto_shipments": {
      "get": {
        "description": "Gets all MTO shipments for the specified Move Task Order.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Gets all shipments for a move task order",
        "operationId": "listMTOShipments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of move task order for mto shipment to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all mto shipments for a move task order.",
            "schema": {
              "$ref": "#/definitions/MTOShipments"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto-shipments/{mtoShipmentId}": {
      "patch": {
        "description": "Updates a specified MTO shipment.\n\nRequired fields include:\n* MTO Shipment ID required in path\n* If-Match required in headers\n* No fields required in body\n\nOptional fields include:\n* New shipment status type\n* Shipment Type\n* Customer requested pick-up date\n* Pick-up Address\n* Delivery Address\n* Customer Remarks\n* Releasing / Receiving agents\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipment",
        "operationId": "updateMTOShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the MTO Shipment to update",
            "name": "mtoShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the specified MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mto_shipments": {
      "post": {
        "description": "Creates a MTO shipment for the specified Move Task Order.\nRequired fields include:\n* Shipment Type\n* Customer requested pick-up date\n* Pick-up Address\n* Delivery Address\n\nOptional fields include:\n* Customer Remarks\n* Releasing / Receiving agents\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOShipment",
        "operationId": "createMTOShipment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request was denied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested resource wasn't found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/orders": {
      "post": {
        "description": "Creates an instance of orders tied to a service member",
        "tags": [
          "orders"
        ],
        "summary": "Creates an orders model for a logged-in user",
        "operationId": "createOrders",
        "parameters": [
          {
            "name": "createOrders",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateOrders"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of orders",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/orders/{ordersId}": {
      "get": {
        "description": "Returns the given order",
        "tags": [
          "orders"
        ],
        "summary": "Returns the given order",
        "operationId": "showOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the order",
            "name": "ordersId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the order",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "order is not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "put": {
        "description": "All fields sent in this request will be set on the orders referenced",
        "tags": [
          "orders"
        ],
        "summary": "Updates orders",
        "operationId": "updateOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the orders model",
            "name": "ordersId",
            "in": "path",
            "required": true
          },
          {
            "name": "updateOrders",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateOrders"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of orders",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "orders not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/personally_procured_move/{personallyProcuredMoveId}/expense_summary": {
      "get": {
        "description": "Calculates and returns an expense summary organized by expense type",
        "tags": [
          "ppm"
        ],
        "summary": "Returns an expense summary organized by expense type",
        "operationId": "requestPPMExpenseSummary",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully calculated expense summary",
            "schema": {
              "$ref": "#/definitions/ExpenseSummaryPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "personally procured move not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/personally_procured_move/{personallyProcuredMoveId}/request_payment": {
      "post": {
        "description": "Moves the PPM and the move into the PAYMENT_REQUESTED state",
        "tags": [
          "ppm"
        ],
        "summary": "Moves the PPM and the move into the PAYMENT_REQUESTED state",
        "operationId": "requestPPMPayment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Sucesssfully requested payment",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "move not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/personally_procured_move/{personallyProcuredMoveId}/submit": {
      "post": {
        "description": "Submits a PPM for approval by the office. The status of the PPM will be updated to SUBMITTED",
        "tags": [
          "ppm"
        ],
        "summary": "Submits a PPM for approval",
        "operationId": "submitPersonallyProcuredMove",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM being submitted",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          },
          {
            "name": "submitPersonallyProcuredMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitPersonallyProcuredMovePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "ppm is not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/personally_procured_moves/incentive": {
      "get": {
        "description": "Calculates incentive for a PPM move (excluding SIT)",
        "tags": [
          "ppm"
        ],
        "summary": "Return a PPM incentive value",
        "operationId": "showPPMIncentive",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "name": "original_move_date",
            "in": "query",
            "required": true
          },
          {
            "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
            "type": "string",
            "format": "zip",
            "name": "origin_zip",
            "in": "query",
            "required": true
          },
          {
            "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
            "type": "string",
            "format": "zip",
            "name": "origin_duty_station_zip",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "name": "orders_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "weight",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Made calculation of PPM incentive",
            "schema": {
              "$ref": "#/definitions/PPMIncentive"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "409": {
            "description": "distance is less than 50 miles (no short haul moves)"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/personally_procured_moves/{personallyProcuredMoveId}/approve": {
      "post": {
        "description": "Sets the status of the PPM to APPROVED.",
        "tags": [
          "office"
        ],
        "summary": "Approves the PPM",
        "operationId": "approvePPM",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM being updated",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          },
          {
            "name": "approvePersonallyProcuredMovePayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApprovePersonallyProcuredMovePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of personally_procured_move",
            "schema": {
              "$ref": "#/definitions/PersonallyProcuredMovePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/personally_procured_moves/{personallyProcuredMoveId}/create_ppm_attachments": {
      "post": {
        "description": "Creates a PPM attachments PDF",
        "tags": [
          "ppm"
        ],
        "summary": "Creates PPM attachments PDF",
        "operationId": "createPPMAttachments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM to create an attachments PDF for",
            "name": "personallyProcuredMoveId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "OTHER",
                "WEIGHT_TICKET",
                "STORAGE_EXPENSE",
                "SHIPMENT_SUMMARY",
                "EXPENSE",
                "WEIGHT_TICKET_SET"
              ],
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "Restrict the list to documents with matching docType.",
            "name": "docTypes",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns a PPM attachments upload",
            "schema": {
              "$ref": "#/definitions/UploadPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "not authorized to perform this action"
          },
          "413": {
            "description": "payload is too large"
          },
          "422": {
            "description": "malformed PDF contained in uploads"
          },
          "424": {
            "description": "no files to be processed into attachments PDF"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/queues/{queueType}": {
      "get": {
        "description": "Show all moves in a queue",
        "tags": [
          "queues"
        ],
        "summary": "Show all moves in a queue",
        "operationId": "showQueue",
        "parameters": [
          {
            "enum": [
              "new",
              "ppm_payment_requested",
              "all",
              "ppm_approved",
              "ppm_completed"
            ],
            "type": "string",
            "description": "Queue type to show",
            "name": "queueType",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list all moves in the specified queue",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MoveQueueItem"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to access this queue"
          },
          "404": {
            "description": "move queue item is not found"
          }
        }
      }
    },
    "/rate_engine_postal_codes/{postal_code}": {
      "get": {
        "description": "Verifies if a zipcode is valid for origin or destination location for a move.",
        "tags": [
          "postal_codes"
        ],
        "summary": "Validate if a zipcode is valid for origin or destination location for a move.",
        "operationId": "validatePostalCodeWithRateData",
        "parameters": [
          {
            "pattern": "^(\\d{5}?)$",
            "type": "string",
            "format": "zip",
            "name": "postal_code",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "origin",
              "destination"
            ],
            "type": "string",
            "name": "postal_code_type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "postal_code is valid or invalid",
            "schema": {
              "$ref": "#/definitions/RateEnginePostalCodePayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "must be authenticated to use this endpoint"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/reimbursement/{reimbursementId}/approve": {
      "post": {
        "description": "Sets the status of the reimbursement to APPROVED.",
        "tags": [
          "office"
        ],
        "summary": "Approves the reimbursement",
        "operationId": "approveReimbursement",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the reimbursement being approved",
            "name": "reimbursementId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of reimbursement",
            "schema": {
              "$ref": "#/definitions/Reimbursement"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members": {
      "post": {
        "description": "Creates an instance of a service member tied to a user",
        "tags": [
          "service_members"
        ],
        "summary": "Creates service member for a logged-in user",
        "operationId": "createServiceMember",
        "parameters": [
          {
            "name": "createServiceMemberPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceMemberPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of service member",
            "schema": {
              "$ref": "#/definitions/ServiceMemberPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members/{serviceMemberId}": {
      "get": {
        "description": "Returns the given service member",
        "tags": [
          "service_members"
        ],
        "summary": "Returns the given service member",
        "operationId": "showServiceMember",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the service member",
            "schema": {
              "$ref": "#/definitions/ServiceMemberPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "patch": {
        "description": "Any fields sent in this request will be set on the service member referenced",
        "tags": [
          "service_members"
        ],
        "summary": "Patches the service member",
        "operationId": "patchServiceMember",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          },
          {
            "name": "patchServiceMemberPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchServiceMemberPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of service member",
            "schema": {
              "$ref": "#/definitions/ServiceMemberPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members/{serviceMemberId}/backup_contacts": {
      "get": {
        "description": "List all service member backup contacts",
        "tags": [
          "backup_contacts"
        ],
        "summary": "List all service member backup contacts",
        "operationId": "indexServiceMemberBackupContacts",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of service member backup contacts",
            "schema": {
              "$ref": "#/definitions/IndexServiceMemberBackupContactsPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to see this backup contact"
          },
          "404": {
            "description": "contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "description": "Creates an instance of a backup contact tied to a service member user",
        "tags": [
          "backup_contacts"
        ],
        "summary": "Submits backup contact for a logged-in user",
        "operationId": "createServiceMemberBackupContact",
        "parameters": [
          {
            "name": "createBackupContactPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceMemberBackupContactPayload"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created instance of service member backup contact",
            "schema": {
              "$ref": "#/definitions/ServiceMemberBackupContactPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized to create this backup contact"
          },
          "404": {
            "description": "contact not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/service_members/{serviceMemberId}/current_orders": {
      "get": {
        "description": "Returns orders",
        "tags": [
          "service_members"
        ],
        "summary": "Returns the latest orders for a given service member",
        "operationId": "showServiceMemberOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the service member",
            "name": "serviceMemberId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the instance of the service member",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "service member not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/uploads": {
      "post": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "uploads"
        ],
        "summary": "Create a new upload",
        "operationId": "createUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to add an upload to",
            "name": "documentId",
            "in": "query"
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/UploadPayload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        }
      },
      "delete": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "tags": [
          "uploads"
        ],
        "summary": "Deletes a collection of uploads",
        "operationId": "deleteUploads",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Array of UUIDs to be deleted",
            "name": "uploadIds",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/uploads/{uploadId}": {
      "delete": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "tags": [
          "uploads"
        ],
        "summary": "Deletes an upload",
        "operationId": "deleteUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the upload to be deleted",
            "name": "uploadId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users/is_logged_in": {
      "get": {
        "description": "Returns boolean as to whether the user is logged in",
        "tags": [
          "users"
        ],
        "summary": "Returns boolean as to whether the user is logged in",
        "operationId": "isLoggedInUser",
        "responses": {
          "200": {
            "description": "Currently logged in user",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/users/logged_in": {
      "get": {
        "description": "Returns the user info for the currently logged in user",
        "tags": [
          "users"
        ],
        "summary": "Returns the user info for the currently logged in user",
        "operationId": "showLoggedInUser",
        "responses": {
          "200": {
            "description": "Currently logged in user",
            "schema": {
              "$ref": "#/definitions/LoggedInUserPayload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessCode": {
      "type": "object",
      "required": [
        "id",
        "code",
        "move_type",
        "created_at"
      ],
      "properties": {
        "claimed_at": {
          "description": "when the access code was claimed or used",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2018-04-12T23:20:50.52Z"
        },
        "code": {
          "type": "string",
          "example": "CODE456"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "move_type": {
          "type": "string",
          "title": "Selected Move Type",
          "enum": [
            "HHG",
            "PPM"
          ]
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "Address": {
      "type": "object",
      "required": [
        "street_address_1",
        "city",
        "state",
        "postal_code"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "street_address_1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "street_address_2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "street_address_3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "Affiliation": {
      "type": "string",
      "title": "Branch of service",
      "enum": [
        "ARMY",
        "NAVY",
        "MARINES",
        "AIR_FORCE",
        "COAST_GUARD"
      ],
      "x-display-value": {
        "AIR_FORCE": "Air Force",
        "ARMY": "Army",
        "COAST_GUARD": "Coast Guard",
        "MARINES": "Marine Corps",
        "NAVY": "Navy"
      },
      "x-nullable": true
    },
    "ApprovePersonallyProcuredMovePayload": {
      "type": "object",
      "required": [
        "approve_date"
      ],
      "properties": {
        "approve_date": {
          "type": "string",
          "format": "date-time",
          "title": "When was the ppm move approved?",
          "example": "2019-03-26T13:19:56-04:00"
        }
      }
    },
    "AvailableMoveDates": {
      "type": "object",
      "required": [
        "start_date",
        "available"
      ],
      "properties": {
        "available": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "example": "2018-09-25"
        }
      }
    },
    "BackupContactPermission": {
      "type": "string",
      "title": "Permissions",
      "enum": [
        "NONE",
        "VIEW",
        "EDIT"
      ],
      "x-display-value": {
        "EDIT": "View and edit all move details",
        "NONE": "Contact Only",
        "VIEW": "View all move details"
      }
    },
    "CancelMove": {
      "type": "object",
      "required": [
        "cancel_reason"
      ],
      "properties": {
        "cancel_reason": {
          "type": "string",
          "x-nullable": true,
          "example": "Change of orders"
        }
      }
    },
    "CategoryExpenseSummary": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/MovingExpenseType"
        },
        "payment_methods": {
          "$ref": "#/definitions/PaymentMethodsTotals"
        },
        "total": {
          "type": "integer"
        }
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateGenericMoveDocumentPayload": {
      "type": "object",
      "required": [
        "upload_ids",
        "title",
        "move_document_type"
      ],
      "properties": {
        "move_document_type": {
          "$ref": "#/definitions/MoveDocumentType"
        },
        "notes": {
          "type": "string",
          "title": "Notes",
          "x-nullable": true,
          "example": "This document is good to go!"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "title": {
          "type": "string",
          "example": "very_useful_document.pdf"
        },
        "upload_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          }
        }
      }
    },
    "CreateMovingExpenseDocumentPayload": {
      "type": "object",
      "required": [
        "title",
        "move_document_type",
        "moving_expense_type",
        "requested_amount_cents",
        "payment_method"
      ],
      "properties": {
        "move_document_type": {
          "$ref": "#/definitions/MoveDocumentType"
        },
        "moving_expense_type": {
          "$ref": "#/definitions/MovingExpenseType"
        },
        "notes": {
          "type": "string",
          "title": "Notes",
          "x-nullable": true,
          "example": "This document is good to go!"
        },
        "payment_method": {
          "type": "string",
          "title": "Method of Payment",
          "enum": [
            "OTHER",
            "GTCC"
          ],
          "x-display-value": {
            "GTCC": "GTCC",
            "OTHER": "Other payment method"
          }
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "receipt_missing": {
          "type": "boolean",
          "title": "missing expense receipt"
        },
        "requested_amount_cents": {
          "description": "unit is cents",
          "type": "integer",
          "format": "cents",
          "title": "Requested Amount",
          "minimum": 1
        },
        "storage_end_date": {
          "type": "string",
          "format": "date",
          "title": "End date of storage for storage expenses",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "storage_start_date": {
          "type": "string",
          "format": "date",
          "title": "Start date of storage for storage expenses",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "title": {
          "type": "string",
          "example": "very_useful_document.pdf"
        },
        "upload_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          }
        }
      }
    },
    "CreatePersonallyProcuredMovePayload": {
      "type": "object",
      "properties": {
        "additional_pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "advance": {
          "$ref": "#/definitions/CreateReimbursement"
        },
        "advance_worksheet": {
          "$ref": "#/definitions/DocumentPayload"
        },
        "days_in_storage": {
          "type": "integer",
          "title": "How many days of storage do you think you'll need?",
          "maximum": 90,
          "minimum": 0,
          "x-nullable": true
        },
        "destination_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "estimated_storage_reimbursement": {
          "type": "string",
          "title": "Estimated Storage Reimbursement",
          "x-nullable": true
        },
        "has_additional_postal_code": {
          "type": "boolean",
          "title": "Will you move anything from another pickup location?",
          "x-nullable": true
        },
        "has_pro_gear": {
          "type": "string",
          "title": "Has Pro-Gear",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-nullable": true
        },
        "has_pro_gear_over_thousand": {
          "type": "string",
          "title": "Has Pro-Gear Over Thousand Pounds",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-nullable": true
        },
        "has_requested_advance": {
          "type": "boolean",
          "title": "Would you like an advance of up to 60% of your PPM incentive?"
        },
        "has_sit": {
          "type": "boolean",
          "title": "Will you put anything in storage?",
          "x-nullable": true
        },
        "net_weight": {
          "type": "integer",
          "title": "Net Weight",
          "minimum": 1,
          "x-nullable": true
        },
        "original_move_date": {
          "type": "string",
          "format": "date",
          "title": "When do you plan to move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "size": {
          "$ref": "#/definitions/TShirtSize"
        },
        "weight_estimate": {
          "type": "integer",
          "title": "Weight Estimate",
          "minimum": 0,
          "x-nullable": true
        }
      }
    },
    "CreateReimbursement": {
      "type": "object",
      "required": [
        "requested_amount",
        "method_of_receipt"
      ],
      "properties": {
        "method_of_receipt": {
          "$ref": "#/definitions/MethodOfReceipt"
        },
        "requested_amount": {
          "description": "unit is cents",
          "type": "integer",
          "format": "cents",
          "title": "Requested Amount",
          "minimum": 1
        }
      },
      "x-nullable": true
    },
    "CreateServiceMemberBackupContactPayload": {
      "type": "object",
      "required": [
        "name",
        "email",
        "permission"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "Email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@exmaple.com"
        },
        "name": {
          "type": "string",
          "title": "Name",
          "x-nullable": true,
          "example": "Susan Smith"
        },
        "permission": {
          "$ref": "#/definitions/BackupContactPermission"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        }
      }
    },
    "CreateServiceMemberPayload": {
      "type": "object",
      "properties": {
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "backup_mailing_address": {
          "title": "Backup Mailing Address",
          "$ref": "#/definitions/Address"
        },
        "current_station_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID number",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "x-nullable": true,
          "example": "5789345789"
        },
        "email_is_preferred": {
          "type": "boolean",
          "title": "Email",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "personal_email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "phone_is_preferred": {
          "type": "boolean",
          "title": "Phone",
          "x-nullable": true
        },
        "rank": {
          "$ref": "#/definitions/ServiceMemberRank"
        },
        "residential_address": {
          "title": "Residential Address",
          "$ref": "#/definitions/Address"
        },
        "secondary_telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Alternate phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "suffix": {
          "type": "string",
          "title": "Suffix",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best contact phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "CreateShipment": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "shipmentType"
      ],
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        }
      }
    },
    "CreateSignedCertificationPayload": {
      "type": "object",
      "required": [
        "date",
        "signature",
        "certification_text"
      ],
      "properties": {
        "certification_text": {
          "type": "string"
        },
        "certification_type": {
          "x-nullable": true,
          "$ref": "#/definitions/SignedCertificationTypeCreate"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "title": "Date"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "signature": {
          "type": "string",
          "title": "Signature"
        }
      }
    },
    "CreateUpdateOrders": {
      "type": "object",
      "required": [
        "service_member_id",
        "issue_date",
        "report_by_date",
        "orders_type",
        "has_dependents",
        "spouse_has_pro_gear",
        "new_duty_station_id"
      ],
      "properties": {
        "department_indicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "has_dependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?"
        },
        "issue_date": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Orders date",
          "example": "2018-04-26"
        },
        "new_duty_station_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "orders_number": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "orders_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "orders_type_detail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "report_by_date": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report-by date",
          "example": "2018-04-26"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "spouse_has_pro_gear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "CreateWeightTicketDocumentsPayload": {
      "type": "object",
      "required": [
        "personally_procured_move_id",
        "weight_ticket_set_type",
        "full_weight_ticket_missing",
        "empty_weight_ticket_missing",
        "trailer_ownership_missing"
      ],
      "properties": {
        "empty_weight": {
          "type": "integer",
          "title": "empty weight ticket recorded weight",
          "minimum": 0
        },
        "empty_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing empty weight ticket"
        },
        "full_weight": {
          "type": "integer",
          "title": "full weight ticket recorded weight",
          "minimum": 0
        },
        "full_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing full weight ticket"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "trailer_ownership_missing": {
          "type": "boolean",
          "title": "missing trailer ownership documentation"
        },
        "upload_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          }
        },
        "vehicle_make": {
          "type": "string",
          "title": "Vehicle make",
          "x-nullable": true
        },
        "vehicle_model": {
          "type": "string",
          "title": "Vehicle model",
          "x-nullable": true
        },
        "vehicle_nickname": {
          "type": "string",
          "title": "Vehicle nickname (ex. 'Large box truck')",
          "x-nullable": true
        },
        "weight_ticket_date": {
          "type": "string",
          "format": "date",
          "title": "Full Weight Ticket Date",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "weight_ticket_set_type": {
          "$ref": "#/definitions/WeightTicketSetType"
        }
      }
    },
    "DPSAuthCookieURLPayload": {
      "type": "object",
      "properties": {
        "cookie_url": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "DeptIndicator": {
      "type": "string",
      "title": "Dept. indicator",
      "enum": [
        "NAVY_AND_MARINES",
        "ARMY",
        "AIR_FORCE",
        "COAST_GUARD"
      ],
      "x-display-value": {
        "AIR_FORCE": "57 Air Force",
        "ARMY": "21 Army",
        "COAST_GUARD": "70 Coast Guard",
        "NAVY_AND_MARINES": "17 Navy and Marine Corps"
      },
      "x-nullable": true
    },
    "DocumentPayload": {
      "type": "object",
      "required": [
        "id",
        "service_member_id",
        "uploads"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadPayload"
          }
        }
      }
    },
    "DutyStationPayload": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address_id",
        "address",
        "affiliation",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "address_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "transportation_office": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DutyStationsPayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DutyStationPayload"
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "title",
        "detail"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "ExpenseSummaryPayload": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryExpenseSummary"
          }
        },
        "grand_total": {
          "type": "object",
          "properties": {
            "payment_method_totals": {
              "$ref": "#/definitions/PaymentMethodsTotals"
            },
            "total": {
              "type": "integer"
            }
          }
        }
      }
    },
    "ExpenseSummaryPayloadGrandTotal": {
      "type": "object",
      "properties": {
        "payment_method_totals": {
          "$ref": "#/definitions/PaymentMethodsTotals"
        },
        "total": {
          "type": "integer"
        }
      }
    },
    "IndexEntitlements": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/WeightAllotment"
      }
    },
    "IndexMovesPayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MovePayload"
      }
    },
    "IndexPersonallyProcuredMovePayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PersonallyProcuredMovePayload"
      }
    },
    "IndexServiceMemberBackupContactsPayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceMemberBackupContactPayload"
      }
    },
    "InvalidRequestResponsePayload": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LoggedInUserPayload": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "readOnly": true,
          "example": "john_bob@example.com"
        },
        "first_name": {
          "type": "string",
          "readOnly": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "office_user": {
          "x-nullable": true,
          "$ref": "#/definitions/OfficeUser"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "service_member": {
          "x-nullable": true,
          "$ref": "#/definitions/ServiceMemberPayload"
        }
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "$ref": "#/definitions/MTOAgentType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOAgentType": {
      "type": "string",
      "title": "MTO Agent Type",
      "enum": [
        "RELEASING_AGENT",
        "RECEIVING_AGENT"
      ],
      "example": "RELEASING_AGENT"
    },
    "MTOAgents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOShipment": {
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "readOnly": true
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "readOnly": true
        },
        "secondaryDeliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOShipmentStatus": {
      "type": "string",
      "enum": [
        "DRAFT",
        "APPROVED",
        "SUBMITTED",
        "REJECTED"
      ],
      "readOnly": true
    },
    "MTOShipmentType": {
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "HHG",
        "HHG_LONGHAUL_DOMESTIC",
        "HHG_SHORTHAUL_DOMESTIC",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC"
      ],
      "x-display-value": {
        "HHG": "HHG",
        "INTERNATIONAL_HHG": "International HHG",
        "INTERNATIONAL_UB": "International UB"
      },
      "example": "HHG"
    },
    "MTOShipments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "MethodOfReceipt": {
      "type": "string",
      "title": "Method of Receipt",
      "enum": [
        "MIL_PAY",
        "OTHER_DD",
        "GTCC"
      ],
      "x-display-value": {
        "GTCC": "GTCC",
        "MIL_PAY": "MilPay",
        "OTHER_DD": "Other account"
      },
      "x-nullable": true
    },
    "MoveDatesSummary": {
      "type": "object",
      "required": [
        "id",
        "move_id",
        "move_date",
        "pack",
        "pickup",
        "transit",
        "delivery",
        "report"
      ],
      "properties": {
        "delivery": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        },
        "id": {
          "type": "string",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538:2018-09-25"
        },
        "move_date": {
          "type": "string",
          "format": "date",
          "example": "2018-09-25"
        },
        "move_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "pack": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        },
        "pickup": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        },
        "report": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        },
        "transit": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date",
            "example": "2018-09-25"
          }
        }
      }
    },
    "MoveDocumentPayload": {
      "type": "object",
      "required": [
        "id",
        "move_id",
        "document",
        "title",
        "move_document_type",
        "status"
      ],
      "properties": {
        "document": {
          "$ref": "#/definitions/DocumentPayload"
        },
        "empty_weight": {
          "type": "integer",
          "title": "Empty weight",
          "minimum": 0,
          "x-formatting": "weight",
          "x-nullable": true
        },
        "empty_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing empty weight ticket",
          "x-nullable": true
        },
        "full_weight": {
          "type": "integer",
          "title": "Full weight",
          "minimum": 0,
          "x-formatting": "weight",
          "x-nullable": true
        },
        "full_weight_ticket_missing": {
          "type": "boolean",
          "title": "missing full weight ticket",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "move_document_type": {
          "$ref": "#/definitions/MoveDocumentType"
        },
        "move_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moving_expense_type": {
          "$ref": "#/definitions/MovingExpenseType"
        },
        "notes": {
          "type": "string",
          "title": "Notes",
          "x-nullable": true,
          "example": "This document is good to go!"
        },
        "payment_method": {
          "type": "string",
          "title": "Payment Method",
          "enum": [
            "OTHER",
            "GTCC"
          ],
          "x-display-value": {
            "GTCC": "GTCC",
            "OTHER": "Other account"
          }
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "receipt_missing": {
          "type": "boolean",
          "title": "missing expense receipt",
          "x-nullable": true
        },
        "requested_amount_cents": {
          "description": "unit is cents",
          "type": "integer",
          "format": "cents",
          "title": "Requested Amount",
          "minimum": 1
        },
        "status": {
          "$ref": "#/definitions/MoveDocumentStatus"
        },
        "storage_end_date": {
          "type": "string",
          "format": "date",
          "title": "End date of storage for storage expenses",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "storage_start_date": {
          "type": "string",
          "format": "date",
          "title": "Start date of storage for storage expenses",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "title": {
          "type": "string",
          "title": "Document title",
          "example": "very_useful_document.pdf"
        },
        "trailer_ownership_missing": {
          "type": "boolean",
          "title": "missing trailer ownership documentation",
          "x-nullable": true
        },
        "vehicle_make": {
          "type": "string",
          "title": "Vehicle make",
          "x-nullable": true
        },
        "vehicle_model": {
          "type": "string",
          "title": "Vehicle model",
          "x-nullable": true
        },
        "vehicle_nickname": {
          "type": "string",
          "title": "Nickname (ex. \"15-foot truck\")",
          "x-nullable": true
        },
        "weight_ticket_date": {
          "type": "string",
          "format": "date",
          "title": "Weight ticket date",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "weight_ticket_set_type": {
          "$ref": "#/definitions/WeightTicketSetType"
        }
      }
    },
    "MoveDocumentStatus": {
      "type": "string",
      "title": "Document status",
      "enum": [
        "AWAITING_REVIEW",
        "OK",
        "HAS_ISSUE",
        "EXCLUDE_FROM_CALCULATION"
      ],
      "x-display-value": {
        "AWAITING_REVIEW": "Awaiting review",
        "EXCLUDE_FROM_CALCULATION": "Exclude from calculation",
        "HAS_ISSUE": "Has issue",
        "OK": "OK"
      }
    },
    "MoveDocumentType": {
      "type": "string",
      "title": "Document type",
      "enum": [
        "OTHER",
        "WEIGHT_TICKET",
        "STORAGE_EXPENSE",
        "SHIPMENT_SUMMARY",
        "EXPENSE",
        "WEIGHT_TICKET_SET"
      ],
      "x-display-value": {
        "EXPENSE": "Expense",
        "OTHER": "Other document type",
        "SHIPMENT_SUMMARY": "Shipment summary",
        "STORAGE_EXPENSE": "Storage expense receipt",
        "WEIGHT_TICKET": "Weight ticket",
        "WEIGHT_TICKET_SET": "Weight ticket set"
      },
      "example": "EXPENSE"
    },
    "MoveDocuments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveDocumentPayload"
      }
    },
    "MovePayload": {
      "type": "object",
      "required": [
        "id",
        "orders_id",
        "locator",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "cancel_reason": {
          "type": "string",
          "x-nullable": true,
          "example": "Change of orders"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "mto_shipments": {
          "$ref": "#/definitions/MTOShipments"
        },
        "orders_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "personally_procured_moves": {
          "$ref": "#/definitions/IndexPersonallyProcuredMovePayload"
        },
        "selected_move_type": {
          "$ref": "#/definitions/SelectedMoveType"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "submitted_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveQueueItem": {
      "type": "object",
      "required": [
        "id",
        "status",
        "locator",
        "customer_name",
        "edipi",
        "rank",
        "orders_type",
        "branch_of_service",
        "last_modified_date",
        "created_at"
      ],
      "properties": {
        "actual_move_date": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "branch_of_service": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "customer_name": {
          "type": "string",
          "title": "Customer Name",
          "example": "Thedog, Nino"
        },
        "delivered_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2017-07-21T17:32:28Z"
        },
        "destination_duty_station_name": {
          "type": "string",
          "title": "Destination",
          "x-nullable": true,
          "example": "Dover AFB"
        },
        "destination_gbloc": {
          "type": "string",
          "title": "Destination GBLOC",
          "x-nullable": true,
          "example": "LKNQ"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID #",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "example": "5789345789"
        },
        "gbl_number": {
          "type": "string",
          "title": "GBL Number",
          "x-nullable": true,
          "example": "LNK12345"
        },
        "hhg_status": {
          "type": "string",
          "x-nullable": true,
          "example": "ACCEPTED"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "invoice_approved_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2017-07-21T17:32:28Z"
        },
        "last_modified_date": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-21T17:32:28Z"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "move_date": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "orders_type": {
          "type": "string",
          "title": "Move Type",
          "enum": [
            "PCS - OCONUS",
            "PCS - CONUS",
            "PCS + TDY - OCONUS",
            "PCS + TDY - CONUS"
          ]
        },
        "origin_duty_station_name": {
          "type": "string",
          "title": "Origin",
          "x-nullable": true,
          "example": "Dover AFB"
        },
        "origin_gbloc": {
          "type": "string",
          "title": "Origin GBLOC",
          "x-nullable": true,
          "example": "LKNQ"
        },
        "original_move_date": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "pm_survey_conducted_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2017-07-21T17:32:28Z"
        },
        "ppm_status": {
          "type": "string",
          "x-nullable": true,
          "example": "PAYMENT_REQUESTED"
        },
        "rank": {
          "$ref": "#/definitions/ServiceMemberRank"
        },
        "status": {
          "type": "string",
          "example": "APPROVED"
        },
        "submitted_date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "2018-04-25"
        },
        "weight_allotment": {
          "$ref": "#/definitions/WeightAllotment"
        }
      }
    },
    "MoveStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED",
        "NEEDS SERVICE COUNSELING"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "MovingExpenseType": {
      "type": "string",
      "title": "Moving Expense Type",
      "enum": [
        "CONTRACTED_EXPENSE",
        "GAS",
        "OIL",
        "OTHER",
        "PACKING_MATERIALS",
        "RENTAL_EQUIPMENT",
        "STORAGE",
        "TOLLS",
        "WEIGHING_FEES"
      ],
      "x-display-value": {
        "CONTRACTED_EXPENSE": "Contracted expense",
        "GAS": "Gas",
        "OIL": "Oil",
        "OTHER": "Other",
        "PACKING_MATERIALS": "Packing materials",
        "RENTAL_EQUIPMENT": "Rental equipment",
        "STORAGE": "Storage",
        "TOLLS": "Tolls",
        "WEIGHING_FEES": "Weighing fees"
      }
    },
    "OfficeUser": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal Email Address",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best contact phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "transportation_office": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "Orders": {
      "type": "object",
      "required": [
        "id",
        "service_member_id",
        "issue_date",
        "report_by_date",
        "orders_type",
        "has_dependents",
        "spouse_has_pro_gear",
        "new_duty_station",
        "uploaded_orders",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 7000
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "department_indicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "grade": {
          "type": "string",
          "x-nullable": true,
          "example": "O-6"
        },
        "has_dependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "issue_date": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Date issued",
          "example": "2018-04-26"
        },
        "moves": {
          "$ref": "#/definitions/IndexMovesPayload"
        },
        "new_duty_station": {
          "$ref": "#/definitions/DutyStationPayload"
        },
        "orders_number": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "orders_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "orders_type_detail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "origin_duty_station": {
          "x-nullable": true,
          "$ref": "#/definitions/DutyStationPayload"
        },
        "report_by_date": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report by",
          "example": "2018-04-26"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "spouse_has_pro_gear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?"
        },
        "status": {
          "$ref": "#/definitions/OrdersStatus"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "uploaded_orders": {
          "$ref": "#/definitions/DocumentPayload"
        }
      }
    },
    "OrdersStatus": {
      "type": "string",
      "title": "Move status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "CANCELED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "DRAFT": "Draft",
        "SUBMITTED": "Submitted"
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "RETIREMENT",
        "SEPARATION"
      ],
      "x-display-value": {
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station (PCS)",
        "RETIREMENT": "Retirement",
        "SEPARATION": "Separation"
      }
    },
    "OrdersTypeDetail": {
      "type": "string",
      "title": "Orders type detail",
      "enum": [
        "HHG_PERMITTED",
        "PCS_TDY",
        "HHG_RESTRICTED_PROHIBITED",
        "HHG_RESTRICTED_AREA",
        "INSTRUCTION_20_WEEKS",
        "HHG_PROHIBITED_20_WEEKS",
        "DELAYED_APPROVAL"
      ],
      "x-display-value": {
        "DELAYED_APPROVAL": "Delayed Approval 20 Weeks or More",
        "HHG_PERMITTED": "Shipment of HHG Permitted",
        "HHG_PROHIBITED_20_WEEKS": "Shipment of HHG Prohibited but Authorized within 20 weeks",
        "HHG_RESTRICTED_AREA": "HHG Restricted Area-HHG Prohibited",
        "HHG_RESTRICTED_PROHIBITED": "Shipment of HHG Restricted or Prohibited",
        "INSTRUCTION_20_WEEKS": "Course of Instruction 20 Weeks or More",
        "PCS_TDY": "PCS with TDY Enroute"
      },
      "x-nullable": true
    },
    "PPMEstimateRange": {
      "type": "object",
      "required": [
        "range_min",
        "range_max"
      ],
      "properties": {
        "range_max": {
          "type": "integer",
          "title": "High estimate"
        },
        "range_min": {
          "type": "integer",
          "title": "Low estimate"
        }
      }
    },
    "PPMIncentive": {
      "type": "object",
      "required": [
        "gcc",
        "incentive_percentage"
      ],
      "properties": {
        "gcc": {
          "type": "integer",
          "title": "GCC"
        },
        "incentive_percentage": {
          "type": "integer",
          "title": "PPM Incentive @ 95%"
        }
      }
    },
    "PPMSitEstimate": {
      "type": "object",
      "required": [
        "estimate"
      ],
      "properties": {
        "estimate": {
          "type": "integer",
          "title": "Value in cents of SIT estimate for PPM"
        }
      }
    },
    "PPMStatus": {
      "type": "string",
      "title": "PPM status",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVED",
        "COMPLETED",
        "CANCELED",
        "PAYMENT_REQUESTED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "CANCELED": "Canceled",
        "COMPLETED": "Completed",
        "DRAFT": "Draft",
        "PAYMENT_REQUESTED": "Payment Requested",
        "SUBMITTED": "Submitted"
      }
    },
    "PatchMovePayload": {
      "type": "object",
      "properties": {
        "selected_move_type": {
          "$ref": "#/definitions/SelectedMoveType"
        }
      }
    },
    "PatchPersonallyProcuredMovePayload": {
      "type": "object",
      "properties": {
        "actual_move_date": {
          "type": "string",
          "format": "date",
          "title": "When did you actually move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "additional_pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "advance": {
          "$ref": "#/definitions/Reimbursement"
        },
        "advance_worksheet": {
          "$ref": "#/definitions/DocumentPayload"
        },
        "days_in_storage": {
          "type": "integer",
          "title": "How many days of storage do you think you'll need?",
          "maximum": 90,
          "minimum": 0,
          "x-nullable": true
        },
        "destination_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "has_additional_postal_code": {
          "type": "boolean",
          "title": "Will you move anything from another pickup location?",
          "x-nullable": true
        },
        "has_pro_gear": {
          "type": "string",
          "title": "Has Pro-Gear",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-nullable": true
        },
        "has_pro_gear_over_thousand": {
          "type": "string",
          "title": "Has Pro-Gear Over Thousand Pounds",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-nullable": true
        },
        "has_requested_advance": {
          "type": "boolean",
          "title": "Would you like an advance of up to 60% of your PPM incentive?",
          "default": false
        },
        "has_sit": {
          "type": "boolean",
          "title": "Will you put anything in storage?",
          "x-nullable": true
        },
        "incentive_estimate_max": {
          "type": "integer",
          "title": "Incentive Estimate Max",
          "minimum": 1,
          "x-nullable": true
        },
        "incentive_estimate_min": {
          "type": "integer",
          "title": "Incentive Estimate Min",
          "minimum": 1,
          "x-nullable": true
        },
        "net_weight": {
          "type": "integer",
          "title": "Net Weight",
          "minimum": 1,
          "x-nullable": true
        },
        "original_move_date": {
          "type": "string",
          "format": "date",
          "title": "When do you plan to move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "size": {
          "$ref": "#/definitions/TShirtSize"
        },
        "total_sit_cost": {
          "type": "integer",
          "title": "How much does your storage cost?",
          "minimum": 1,
          "x-nullable": true
        },
        "weight_estimate": {
          "type": "integer",
          "title": "Weight Estimate",
          "minimum": 0,
          "x-nullable": true
        }
      }
    },
    "PatchServiceMemberPayload": {
      "type": "object",
      "properties": {
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "backup_mailing_address": {
          "title": "Backup Mailing Address",
          "$ref": "#/definitions/Address"
        },
        "current_station_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID number",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "x-nullable": true,
          "example": "5789345789"
        },
        "email_is_preferred": {
          "type": "boolean",
          "title": "Email",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "personal_email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal Email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "phone_is_preferred": {
          "type": "boolean",
          "title": "Phone",
          "x-nullable": true
        },
        "rank": {
          "$ref": "#/definitions/ServiceMemberRank"
        },
        "residential_address": {
          "title": "Residential Address",
          "$ref": "#/definitions/Address"
        },
        "secondary_telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Alternate Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "suffix": {
          "type": "string",
          "title": "Suffix",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best Contact Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "PaymentMethodsTotals": {
      "type": "object",
      "properties": {
        "GTCC": {
          "type": "integer"
        },
        "MIL_PAY": {
          "type": "integer"
        },
        "OTHER": {
          "type": "integer"
        }
      }
    },
    "PersonallyProcuredMovePayload": {
      "type": "object",
      "required": [
        "id",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "actual_move_date": {
          "type": "string",
          "format": "date",
          "title": "When did you actually move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "additional_pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "advance": {
          "$ref": "#/definitions/Reimbursement"
        },
        "advance_worksheet": {
          "$ref": "#/definitions/DocumentPayload"
        },
        "approve_date": {
          "type": "string",
          "format": "date-time",
          "title": "When was the ppm move approved?",
          "x-nullable": true,
          "example": "2019-03-26T13:19:56-04:00"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "days_in_storage": {
          "type": "integer",
          "title": "How many days of storage do you think you'll need?",
          "maximum": 90,
          "minimum": 0,
          "x-nullable": true
        },
        "destination_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "estimated_storage_reimbursement": {
          "type": "string",
          "title": "Estimated Storage Reimbursement",
          "x-nullable": true
        },
        "has_additional_postal_code": {
          "type": "boolean",
          "title": "Will you move anything from another pickup location?",
          "x-nullable": true
        },
        "has_pro_gear": {
          "type": "string",
          "title": "Has Pro-Gear",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-display-value": {
            "NO": false,
            "NOT SURE": "Not Sure",
            "YES": true
          },
          "x-nullable": true
        },
        "has_pro_gear_over_thousand": {
          "type": "string",
          "title": "Has Pro-Gear Over Thousand Pounds",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-display-value": {
            "NO": false,
            "NOT SURE": "Not Sure",
            "YES": true
          },
          "x-nullable": true
        },
        "has_requested_advance": {
          "type": "boolean",
          "title": "Would you like an advance of up to 60% of your PPM incentive?",
          "default": false
        },
        "has_sit": {
          "type": "boolean",
          "title": "Will you put anything in storage?",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "incentive_estimate_max": {
          "type": "integer",
          "title": "Estimated incentive maximum in cents",
          "x-nullable": true
        },
        "incentive_estimate_min": {
          "type": "integer",
          "title": "Estimated incentive minimum in cents",
          "x-nullable": true
        },
        "mileage": {
          "type": "integer",
          "title": "Distance between origin and destination in miles",
          "x-nullable": true
        },
        "move_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "net_weight": {
          "type": "integer",
          "title": "Net Weight",
          "minimum": 1,
          "x-formatting": "weight",
          "x-nullable": true
        },
        "original_move_date": {
          "type": "string",
          "format": "date",
          "title": "When do you plan to move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "planned_sit_max": {
          "type": "integer",
          "title": "Maximum SIT reimbursement for the planned SIT duration",
          "x-nullable": true
        },
        "sit_max": {
          "type": "integer",
          "title": "Maximum SIT reimbursement for maximum SIT duration",
          "x-nullable": true
        },
        "size": {
          "$ref": "#/definitions/TShirtSize"
        },
        "status": {
          "$ref": "#/definitions/PPMStatus"
        },
        "submit_date": {
          "type": "string",
          "format": "date-time",
          "title": "When was the ppm move submitted?",
          "x-nullable": true,
          "example": "2019-03-26T13:19:56-04:00"
        },
        "total_sit_cost": {
          "type": "integer",
          "format": "cents",
          "title": "Total cost for the planned SIT duration",
          "x-nullable": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "weight_estimate": {
          "type": "integer",
          "title": "Weight Estimate",
          "minimum": 0,
          "x-formatting": "weight",
          "x-nullable": true
        }
      }
    },
    "PostDocumentPayload": {
      "type": "object",
      "properties": {
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        }
      }
    },
    "RateEnginePostalCodePayload": {
      "type": "object",
      "required": [
        "valid",
        "postal_code",
        "postal_code_type"
      ],
      "properties": {
        "postal_code": {
          "description": "zip code, international allowed",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "example": "'90210' or 'N15 3NL'"
        },
        "postal_code_type": {
          "type": "string",
          "enum": [
            "origin",
            "destination"
          ]
        },
        "valid": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "Reimbursement": {
      "type": "object",
      "required": [
        "requested_amount",
        "method_of_receipt"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "method_of_receipt": {
          "$ref": "#/definitions/MethodOfReceipt"
        },
        "requested_amount": {
          "description": "unit is cents",
          "type": "integer",
          "format": "cents",
          "title": "Requested Amount",
          "minimum": 1
        },
        "requested_date": {
          "type": "string",
          "format": "date",
          "title": "Requested Date",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "status": {
          "$ref": "#/definitions/ReimbursementStatus"
        }
      },
      "x-nullable": true
    },
    "ReimbursementStatus": {
      "type": "string",
      "title": "Reimbursement",
      "enum": [
        "DRAFT",
        "REQUESTED",
        "APPROVED",
        "REJECTED",
        "PAID"
      ],
      "x-nullable": true
    },
    "Role": {
      "type": "object",
      "required": [
        "id",
        "roleType",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "roleType": {
          "type": "string",
          "example": "customer"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SelectedMoveType": {
      "type": "string",
      "title": "Selected Move Type",
      "enum": [
        "HHG",
        "PPM",
        "UB",
        "POV",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "HHG_PPM"
      ],
      "x-display-value": {
        "HHG": "Household Goods Move",
        "HHG_INTO_NTS_DOMESTIC": "Non-Temporary Storage",
        "HHG_OUTOF_NTS_DOMESTIC": "Non-Temporary Storage Release",
        "HHG_PPM": "Both HHG and PPM",
        "POV": "Privately-Owned Vehicle",
        "PPM": "Personal Procured Move",
        "UB": "Unaccompanied Baggage"
      },
      "x-nullable": true
    },
    "ServiceMemberBackupContactPayload": {
      "type": "object",
      "required": [
        "id",
        "created_at",
        "updated_at",
        "name",
        "email",
        "permission"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "Email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "title": "Name",
          "x-nullable": true,
          "example": "Susan Smith"
        },
        "permission": {
          "$ref": "#/definitions/BackupContactPermission"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ServiceMemberPayload": {
      "type": "object",
      "required": [
        "id",
        "user_id",
        "is_profile_complete",
        "created_at",
        "updated_at",
        "requires_access_code"
      ],
      "properties": {
        "affiliation": {
          "title": "Branch",
          "$ref": "#/definitions/Affiliation"
        },
        "backup_contacts": {
          "$ref": "#/definitions/IndexServiceMemberBackupContactsPayload"
        },
        "backup_mailing_address": {
          "$ref": "#/definitions/Address"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "current_station": {
          "$ref": "#/definitions/DutyStationPayload"
        },
        "edipi": {
          "type": "string",
          "format": "edipi",
          "title": "DoD ID number",
          "maxLength": 10,
          "minLength": 10,
          "pattern": "^\\d{10}$",
          "x-nullable": true,
          "example": "5789345789"
        },
        "email_is_preferred": {
          "type": "boolean",
          "title": "Email",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "title": "First name",
          "x-nullable": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "is_profile_complete": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string",
          "title": "Last name",
          "x-nullable": true,
          "example": "Donut"
        },
        "middle_name": {
          "type": "string",
          "title": "Middle name",
          "x-nullable": true,
          "example": "L."
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Orders"
          }
        },
        "personal_email": {
          "type": "string",
          "format": "x-email",
          "title": "Personal Email Address",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "phone_is_preferred": {
          "type": "boolean",
          "title": "Telephone",
          "x-nullable": true
        },
        "rank": {
          "title": "Rank",
          "$ref": "#/definitions/ServiceMemberRank"
        },
        "requires_access_code": {
          "type": "boolean",
          "title": "Requires Access Code",
          "x-nullable": false
        },
        "residential_address": {
          "title": "Residential Address",
          "$ref": "#/definitions/Address"
        },
        "secondary_telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Secondary Phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "suffix": {
          "type": "string",
          "title": "Suffix",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "title": "Best contact phone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "weight_allotment": {
          "$ref": "#/definitions/WeightAllotment"
        }
      }
    },
    "ServiceMemberRank": {
      "type": "string",
      "title": "Rank",
      "enum": [
        "E_1",
        "E_2",
        "E_3",
        "E_4",
        "E_5",
        "E_6",
        "E_7",
        "E_8",
        "E_9",
        "O_1_ACADEMY_GRADUATE",
        "O_2",
        "O_3",
        "O_4",
        "O_5",
        "O_6",
        "O_7",
        "O_8",
        "O_9",
        "O_10",
        "W_1",
        "W_2",
        "W_3",
        "W_4",
        "W_5",
        "AVIATION_CADET",
        "CIVILIAN_EMPLOYEE",
        "ACADEMY_CADET",
        "MIDSHIPMAN"
      ],
      "x-display-value": {
        "ACADEMY_CADET": "Service Academy Cadet",
        "AVIATION_CADET": "Aviation Cadet",
        "CIVILIAN_EMPLOYEE": "Civilian Employee",
        "E_1": "E-1",
        "E_2": "E-2",
        "E_3": "E-3",
        "E_4": "E-4",
        "E_5": "E-5",
        "E_6": "E-6",
        "E_7": "E-7",
        "E_8": "E-8",
        "E_9": "E-9",
        "MIDSHIPMAN": "Midshipman",
        "O_10": "O-10",
        "O_1_ACADEMY_GRADUATE": "O-1/Service Academy Graduate",
        "O_2": "O-2",
        "O_3": "O-3",
        "O_4": "O-4",
        "O_5": "O-5",
        "O_6": "O-6",
        "O_7": "O-7",
        "O_8": "O-8",
        "O_9": "O-9",
        "W_1": "W-1",
        "W_2": "W-2",
        "W_3": "W-3",
        "W_4": "W-4",
        "W_5": "W-5"
      },
      "x-nullable": true
    },
    "SignedCertificationPayload": {
      "type": "object",
      "required": [
        "id",
        "move_id",
        "created_at",
        "updated_at",
        "date",
        "signature",
        "certification_text"
      ],
      "properties": {
        "certification_text": {
          "type": "string"
        },
        "certification_type": {
          "x-nullable": true,
          "$ref": "#/definitions/SignedCertificationType"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "title": "Date"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "move_id": {
          "type": "string",
          "format": "uuid"
        },
        "personally_procured_move_id": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "signature": {
          "type": "string",
          "title": "Signature"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SignedCertificationType": {
      "type": "string",
      "enum": [
        "PPM_PAYMENT",
        "SHIPMENT",
        "PPM",
        "HHG"
      ],
      "x-nullable": true
    },
    "SignedCertificationTypeCreate": {
      "type": "string",
      "enum": [
        "PPM_PAYMENT",
        "SHIPMENT"
      ],
      "x-nullable": true
    },
    "SignedCertifications": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SignedCertificationPayload"
      }
    },
    "SubmitMoveForApprovalPayload": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/CreateSignedCertificationPayload"
        }
      }
    },
    "SubmitPersonallyProcuredMovePayload": {
      "type": "object",
      "required": [
        "submit_date"
      ],
      "properties": {
        "submit_date": {
          "type": "string",
          "format": "date-time",
          "title": "When was the ppm move submitted?",
          "example": "2019-03-26T13:19:56-04:00"
        }
      }
    },
    "TShirtSize": {
      "type": "string",
      "title": "Size",
      "enum": [
        "S",
        "M",
        "L"
      ],
      "x-nullable": true
    },
    "TransportationOffice": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "gbloc": {
          "type": "string",
          "pattern": "^[A-Z]{4}$",
          "example": "JENQ"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "example": 29.382973
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "example": -98.62759
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "phone_lines": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "telephone",
            "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
            "example": "212-555-5555"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "UpdatePersonallyProcuredMovePayload": {
      "type": "object",
      "properties": {
        "actual_move_date": {
          "type": "string",
          "format": "date",
          "title": "When did you actually move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "additional_pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "advance": {
          "$ref": "#/definitions/Reimbursement"
        },
        "advance_worksheet": {
          "$ref": "#/definitions/DocumentPayload"
        },
        "days_in_storage": {
          "type": "integer",
          "title": "How many days of storage do you think you'll need?",
          "maximum": 90,
          "minimum": 0,
          "x-nullable": true
        },
        "destination_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "estimated_storage_reimbursement": {
          "type": "string",
          "title": "Estimated Storage Reimbursement",
          "x-nullable": true
        },
        "has_additional_postal_code": {
          "type": "boolean",
          "title": "Will you move anything from another pickup location?",
          "x-nullable": true
        },
        "has_pro_gear": {
          "type": "string",
          "title": "Has Pro-Gear",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-nullable": true
        },
        "has_pro_gear_over_thousand": {
          "type": "string",
          "title": "Has Pro-Gear Over Thousand Pounds",
          "enum": [
            "NOT SURE",
            "YES",
            "NO"
          ],
          "x-nullable": true
        },
        "has_requested_advance": {
          "type": "boolean",
          "title": "Would you like an advance of up to 60% of your PPM incentive?",
          "default": false
        },
        "has_sit": {
          "type": "boolean",
          "title": "Will you put anything in storage?",
          "x-nullable": true
        },
        "net_weight": {
          "type": "integer",
          "title": "Net Weight",
          "minimum": 1,
          "x-nullable": true
        },
        "original_move_date": {
          "type": "string",
          "format": "date",
          "title": "When do you plan to move?",
          "x-nullable": true,
          "example": "2018-04-26"
        },
        "pickup_postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP code",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "x-nullable": true,
          "example": "90210"
        },
        "size": {
          "$ref": "#/definitions/TShirtSize"
        },
        "total_sit_cost": {
          "type": "integer",
          "title": "How much does your storage cost?",
          "minimum": 0,
          "x-nullable": true
        },
        "weight_estimate": {
          "type": "integer",
          "title": "Weight Estimate",
          "minimum": 0,
          "x-nullable": true
        }
      }
    },
    "UpdateServiceMemberBackupContactPayload": {
      "type": "object",
      "required": [
        "name",
        "email",
        "permission"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "title": "email address",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "john_bob@example.com"
        },
        "name": {
          "type": "string",
          "x-nullable": true,
          "example": "Susan Smith"
        },
        "permission": {
          "$ref": "#/definitions/BackupContactPermission"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true,
          "example": "212-555-5555"
        }
      }
    },
    "UpdateShipment": {
      "type": "object",
      "properties": {
        "agents": {
          "x-nullable": true,
          "$ref": "#/definitions/MTOAgents"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        }
      }
    },
    "UploadPayload": {
      "type": "object",
      "required": [
        "id",
        "url",
        "filename",
        "content_type",
        "bytes",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "bytes": {
          "type": "integer"
        },
        "content_type": {
          "type": "string",
          "format": "mime-type",
          "example": "application/pdf"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "filename": {
          "type": "string",
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "type": "string",
          "enum": [
            "INFECTED",
            "CLEAN",
            "PROCESSING"
          ]
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalidFields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "$ref": "#/definitions/ValidationErrorAllOf1"
        }
      ],
      "properties": {
        "invalidFields": {
          "type": "object",
          "additionalProperties": {
            "description": "List of errors for the field",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "ValidationErrorAllOf1": {
      "type": "object"
    },
    "WeightAllotment": {
      "type": "object",
      "required": [
        "total_weight_self",
        "total_weight_self_plus_dependents",
        "pro_gear_weight",
        "pro_gear_weight_spouse"
      ],
      "properties": {
        "pro_gear_weight": {
          "type": "integer",
          "example": 2000
        },
        "pro_gear_weight_spouse": {
          "type": "integer",
          "example": 500
        },
        "total_weight_self": {
          "type": "integer",
          "example": 18000
        },
        "total_weight_self_plus_dependents": {
          "type": "integer",
          "example": 18000
        }
      }
    },
    "WeightTicketSetType": {
      "type": "string",
      "title": "Select weight ticket type",
      "enum": [
        "CAR",
        "CAR_TRAILER",
        "BOX_TRUCK",
        "PRO_GEAR"
      ],
      "x-display-value": {
        "BOX_TRUCK": "Box truck",
        "CAR": "Car",
        "CAR_TRAILER": "Car + Trailer",
        "PRO_GEAR": "Pro-gear"
      },
      "x-nullable": true
    }
  },
  "responses": {
    "Conflict": {
      "description": "The request could not be processed because of conflict in the current state of the resource.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.",
      "schema": {
        "$ref": "#/definitions/ClientError"
      }
    },
    "ServerError": {
      "description": "A server error occurred.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "The payload was unprocessable.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  }
}`))
}
