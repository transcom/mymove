// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PPMShipment A personally procured move is a type of shipment that a service member moves themselves.
//
// swagger:model PPMShipment
type PPMShipment struct {

	// ZIP
	//
	// The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.
	//
	// Example: 90210
	// Pattern: ^(\d{5})$
	ActualDestinationPostalCode *string `json:"actualDestinationPostalCode"`

	// The actual start date of when the PPM shipment left the origin.
	// Format: date
	ActualMoveDate *strfmt.Date `json:"actualMoveDate"`

	// ZIP
	//
	// The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.
	//
	// Example: 90210
	// Pattern: ^(\d{5})$
	ActualPickupPostalCode *string `json:"actualPickupPostalCode"`

	// The amount received for an advance, or null if no advance is received.
	//
	AdvanceAmountReceived *int64 `json:"advanceAmountReceived"`

	// The amount requested as an advance by the service member up to a maximum percentage of the estimated incentive.
	//
	AdvanceAmountRequested *int64 `json:"advanceAmountRequested"`

	// advance status
	AdvanceStatus *PPMAdvanceStatus `json:"advanceStatus,omitempty"`

	// The timestamp of when the shipment was approved and the service member can begin their move.
	// Format: date-time
	ApprovedAt *strfmt.DateTime `json:"approvedAt"`

	// Timestamp of when the PPM Shipment was initially created (UTC)
	// Required: true
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt"`

	// destination address
	DestinationAddress *Address `json:"destinationAddress,omitempty"`

	// A hash unique to this shipment that should be used as the "If-Match" header for any updates.
	// Required: true
	// Read Only: true
	ETag string `json:"eTag"`

	// The estimated amount the government will pay the service member to move their belongings based on the moving date, locations, and shipment weight.
	EstimatedIncentive *int64 `json:"estimatedIncentive"`

	// The estimated weight of the PPM shipment goods being moved.
	// Example: 4200
	EstimatedWeight *int64 `json:"estimatedWeight"`

	// Date the customer expects to begin their move.
	//
	// Required: true
	// Format: date
	ExpectedDepartureDate *strfmt.Date `json:"expectedDepartureDate"`

	// The final calculated incentive for the PPM shipment. This does not include **SIT** as it is a reimbursement.
	//
	// Read Only: true
	FinalIncentive *int64 `json:"finalIncentive"`

	// Indicates whether PPM shipment has pro gear for themselves or their spouse.
	//
	HasProGear *bool `json:"hasProGear"`

	// Indicates whether an advance was received for the PPM shipment.
	//
	HasReceivedAdvance *bool `json:"hasReceivedAdvance"`

	// Indicates whether an advance has been requested for the PPM shipment.
	//
	HasRequestedAdvance *bool `json:"hasRequestedAdvance"`

	// has secondary destination address
	HasSecondaryDestinationAddress *bool `json:"hasSecondaryDestinationAddress"`

	// has secondary pickup address
	HasSecondaryPickupAddress *bool `json:"hasSecondaryPickupAddress"`

	// has tertiary destination address
	HasTertiaryDestinationAddress *bool `json:"hasTertiaryDestinationAddress"`

	// has tertiary pickup address
	HasTertiaryPickupAddress *bool `json:"hasTertiaryPickupAddress"`

	// Primary auto-generated unique identifier of the PPM shipment object
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// All expense documentation receipt records of this PPM shipment.
	MovingExpenses []*MovingExpense `json:"movingExpenses"`

	// pickup address
	PickupAddress *Address `json:"pickupAddress,omitempty"`

	// The estimated weight of the pro-gear being moved belonging to the service member.
	ProGearWeight *int64 `json:"proGearWeight"`

	// All pro-gear weight ticket documentation records for this PPM shipment.
	ProGearWeightTickets []*ProGearWeightTicket `json:"proGearWeightTickets"`

	// The timestamp of when the Service Counselor has reviewed all of the closeout documents.
	// Format: date-time
	ReviewedAt *strfmt.DateTime `json:"reviewedAt"`

	// secondary destination address
	SecondaryDestinationAddress *Address `json:"secondaryDestinationAddress,omitempty"`

	// secondary pickup address
	SecondaryPickupAddress *Address `json:"secondaryPickupAddress,omitempty"`

	// The id of the parent MTOShipment object
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Read Only: true
	// Format: uuid
	ShipmentID strfmt.UUID `json:"shipmentId"`

	// signed certification
	SignedCertification *SignedCertification `json:"signedCertification,omitempty"`

	// The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.
	SitEstimatedCost *int64 `json:"sitEstimatedCost"`

	// The date that goods will exit the storage location.
	// Format: date
	SitEstimatedDepartureDate *strfmt.Date `json:"sitEstimatedDepartureDate"`

	// The date that goods will first enter the storage location.
	// Format: date
	SitEstimatedEntryDate *strfmt.Date `json:"sitEstimatedEntryDate"`

	// The estimated weight of the goods being put into storage.
	// Example: 2000
	SitEstimatedWeight *int64 `json:"sitEstimatedWeight"`

	// Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.
	//
	// Must be set to `true` when providing `sitLocation`, `sitEstimatedWeight`, `sitEstimatedEntryDate`, and `sitEstimatedDepartureDate` values to calculate the `sitEstimatedCost`.
	//
	// Required: true
	SitExpected *bool `json:"sitExpected"`

	// sit location
	SitLocation *SITLocationType `json:"sitLocation,omitempty"`

	// The estimated weight of the pro-gear being moved belonging to a spouse.
	SpouseProGearWeight *int64 `json:"spouseProGearWeight"`

	// status
	// Required: true
	Status PPMShipmentStatus `json:"status"`

	// The timestamp of when the customer submitted their PPM documentation to the counselor for review.
	// Format: date-time
	SubmittedAt *strfmt.DateTime `json:"submittedAt"`

	// tertiary destination address
	TertiaryDestinationAddress *Address `json:"tertiaryDestinationAddress,omitempty"`

	// tertiary pickup address
	TertiaryPickupAddress *Address `json:"tertiaryPickupAddress,omitempty"`

	// Timestamp of when a property of this object was last updated (UTC)
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// w2 address
	W2Address *Address `json:"w2Address,omitempty"`

	// weight tickets
	WeightTickets WeightTickets `json:"weightTickets"`
}

// Validate validates this p p m shipment
func (m *PPMShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualDestinationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActualMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActualPickupPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdvanceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprovedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateETag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMovingExpenses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProGearWeightTickets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReviewedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignedCertification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEstimatedDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEstimatedEntryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitExpected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTertiaryDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTertiaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateW2Address(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeightTickets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPMShipment) validateActualDestinationPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualDestinationPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("actualDestinationPostalCode", "body", *m.ActualDestinationPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateActualMoveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualMoveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actualMoveDate", "body", "date", m.ActualMoveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateActualPickupPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualPickupPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("actualPickupPostalCode", "body", *m.ActualPickupPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateAdvanceStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvanceStatus) { // not required
		return nil
	}

	if m.AdvanceStatus != nil {
		if err := m.AdvanceStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advanceStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("advanceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) validateApprovedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("approvedAt", "body", "date-time", m.ApprovedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	if m.DestinationAddress != nil {
		if err := m.DestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) validateETag(formats strfmt.Registry) error {

	if err := validate.RequiredString("eTag", "body", m.ETag); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateExpectedDepartureDate(formats strfmt.Registry) error {

	if err := validate.Required("expectedDepartureDate", "body", m.ExpectedDepartureDate); err != nil {
		return err
	}

	if err := validate.FormatOf("expectedDepartureDate", "body", "date", m.ExpectedDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateMovingExpenses(formats strfmt.Registry) error {
	if swag.IsZero(m.MovingExpenses) { // not required
		return nil
	}

	for i := 0; i < len(m.MovingExpenses); i++ {
		if swag.IsZero(m.MovingExpenses[i]) { // not required
			continue
		}

		if m.MovingExpenses[i] != nil {
			if err := m.MovingExpenses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("movingExpenses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("movingExpenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PPMShipment) validatePickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupAddress) { // not required
		return nil
	}

	if m.PickupAddress != nil {
		if err := m.PickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) validateProGearWeightTickets(formats strfmt.Registry) error {
	if swag.IsZero(m.ProGearWeightTickets) { // not required
		return nil
	}

	for i := 0; i < len(m.ProGearWeightTickets); i++ {
		if swag.IsZero(m.ProGearWeightTickets[i]) { // not required
			continue
		}

		if m.ProGearWeightTickets[i] != nil {
			if err := m.ProGearWeightTickets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proGearWeightTickets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("proGearWeightTickets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PPMShipment) validateReviewedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ReviewedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("reviewedAt", "body", "date-time", m.ReviewedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateSecondaryDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDestinationAddress) { // not required
		return nil
	}

	if m.SecondaryDestinationAddress != nil {
		if err := m.SecondaryDestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryDestinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryDestinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) validateSecondaryPickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryPickupAddress) { // not required
		return nil
	}

	if m.SecondaryPickupAddress != nil {
		if err := m.SecondaryPickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", strfmt.UUID(m.ShipmentID)); err != nil {
		return err
	}

	if err := validate.FormatOf("shipmentId", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateSignedCertification(formats strfmt.Registry) error {
	if swag.IsZero(m.SignedCertification) { // not required
		return nil
	}

	if m.SignedCertification != nil {
		if err := m.SignedCertification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signedCertification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signedCertification")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) validateSitEstimatedDepartureDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitEstimatedDepartureDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitEstimatedDepartureDate", "body", "date", m.SitEstimatedDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateSitEstimatedEntryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitEstimatedEntryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitEstimatedEntryDate", "body", "date", m.SitEstimatedEntryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateSitExpected(formats strfmt.Registry) error {

	if err := validate.Required("sitExpected", "body", m.SitExpected); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateSitLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.SitLocation) { // not required
		return nil
	}

	if m.SitLocation != nil {
		if err := m.SitLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitLocation")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", PPMShipmentStatus(m.Status)); err != nil {
		return err
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *PPMShipment) validateSubmittedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmittedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submittedAt", "body", "date-time", m.SubmittedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateTertiaryDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.TertiaryDestinationAddress) { // not required
		return nil
	}

	if m.TertiaryDestinationAddress != nil {
		if err := m.TertiaryDestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tertiaryDestinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tertiaryDestinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) validateTertiaryPickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.TertiaryPickupAddress) { // not required
		return nil
	}

	if m.TertiaryPickupAddress != nil {
		if err := m.TertiaryPickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tertiaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tertiaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) validateW2Address(formats strfmt.Registry) error {
	if swag.IsZero(m.W2Address) { // not required
		return nil
	}

	if m.W2Address != nil {
		if err := m.W2Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("w2Address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("w2Address")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) validateWeightTickets(formats strfmt.Registry) error {
	if swag.IsZero(m.WeightTickets) { // not required
		return nil
	}

	if err := m.WeightTickets.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("weightTickets")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("weightTickets")
		}
		return err
	}

	return nil
}

// ContextValidate validate this p p m shipment based on the context it is used
func (m *PPMShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdvanceStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFinalIncentive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMovingExpenses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProGearWeightTickets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryPickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignedCertification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTertiaryDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTertiaryPickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateW2Address(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeightTickets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPMShipment) contextValidateAdvanceStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.AdvanceStatus != nil {

		if swag.IsZero(m.AdvanceStatus) { // not required
			return nil
		}

		if err := m.AdvanceStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advanceStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("advanceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationAddress != nil {

		if swag.IsZero(m.DestinationAddress) { // not required
			return nil
		}

		if err := m.DestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag)); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) contextValidateFinalIncentive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "finalIncentive", "body", m.FinalIncentive); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) contextValidateMovingExpenses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MovingExpenses); i++ {

		if m.MovingExpenses[i] != nil {

			if swag.IsZero(m.MovingExpenses[i]) { // not required
				return nil
			}

			if err := m.MovingExpenses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("movingExpenses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("movingExpenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PPMShipment) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.PickupAddress != nil {

		if swag.IsZero(m.PickupAddress) { // not required
			return nil
		}

		if err := m.PickupAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) contextValidateProGearWeightTickets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProGearWeightTickets); i++ {

		if m.ProGearWeightTickets[i] != nil {

			if swag.IsZero(m.ProGearWeightTickets[i]) { // not required
				return nil
			}

			if err := m.ProGearWeightTickets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proGearWeightTickets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("proGearWeightTickets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PPMShipment) contextValidateSecondaryDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryDestinationAddress != nil {

		if swag.IsZero(m.SecondaryDestinationAddress) { // not required
			return nil
		}

		if err := m.SecondaryDestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryDestinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryDestinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) contextValidateSecondaryPickupAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryPickupAddress != nil {

		if swag.IsZero(m.SecondaryPickupAddress) { // not required
			return nil
		}

		if err := m.SecondaryPickupAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) contextValidateShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "shipmentId", "body", strfmt.UUID(m.ShipmentID)); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) contextValidateSignedCertification(ctx context.Context, formats strfmt.Registry) error {

	if m.SignedCertification != nil {

		if swag.IsZero(m.SignedCertification) { // not required
			return nil
		}

		if err := m.SignedCertification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signedCertification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signedCertification")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) contextValidateSitLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.SitLocation != nil {

		if swag.IsZero(m.SitLocation) { // not required
			return nil
		}

		if err := m.SitLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitLocation")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *PPMShipment) contextValidateTertiaryDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.TertiaryDestinationAddress != nil {

		if swag.IsZero(m.TertiaryDestinationAddress) { // not required
			return nil
		}

		if err := m.TertiaryDestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tertiaryDestinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tertiaryDestinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) contextValidateTertiaryPickupAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.TertiaryPickupAddress != nil {

		if swag.IsZero(m.TertiaryPickupAddress) { // not required
			return nil
		}

		if err := m.TertiaryPickupAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tertiaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tertiaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *PPMShipment) contextValidateW2Address(ctx context.Context, formats strfmt.Registry) error {

	if m.W2Address != nil {

		if swag.IsZero(m.W2Address) { // not required
			return nil
		}

		if err := m.W2Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("w2Address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("w2Address")
			}
			return err
		}
	}

	return nil
}

func (m *PPMShipment) contextValidateWeightTickets(ctx context.Context, formats strfmt.Registry) error {

	if err := m.WeightTickets.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("weightTickets")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("weightTickets")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PPMShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PPMShipment) UnmarshalBinary(b []byte) error {
	var res PPMShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
