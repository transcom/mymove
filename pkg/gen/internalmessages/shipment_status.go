// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ShipmentStatus Shipment status
//
// swagger:model ShipmentStatus
type ShipmentStatus string

const (

	// ShipmentStatusDRAFT captures enum value "DRAFT"
	ShipmentStatusDRAFT ShipmentStatus = "DRAFT"

	// ShipmentStatusSUBMITTED captures enum value "SUBMITTED"
	ShipmentStatusSUBMITTED ShipmentStatus = "SUBMITTED"

	// ShipmentStatusAWARDED captures enum value "AWARDED"
	ShipmentStatusAWARDED ShipmentStatus = "AWARDED"

	// ShipmentStatusACCEPTED captures enum value "ACCEPTED"
	ShipmentStatusACCEPTED ShipmentStatus = "ACCEPTED"

	// ShipmentStatusAPPROVED captures enum value "APPROVED"
	ShipmentStatusAPPROVED ShipmentStatus = "APPROVED"

	// ShipmentStatusINTRANSIT captures enum value "IN_TRANSIT"
	ShipmentStatusINTRANSIT ShipmentStatus = "IN_TRANSIT"

	// ShipmentStatusDELIVERED captures enum value "DELIVERED"
	ShipmentStatusDELIVERED ShipmentStatus = "DELIVERED"
)

// for schema
var shipmentStatusEnum []interface{}

func init() {
	var res []ShipmentStatus
	if err := json.Unmarshal([]byte(`["DRAFT","SUBMITTED","AWARDED","ACCEPTED","APPROVED","IN_TRANSIT","DELIVERED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shipmentStatusEnum = append(shipmentStatusEnum, v)
	}
}

func (m ShipmentStatus) validateShipmentStatusEnum(path, location string, value ShipmentStatus) error {
	if err := validate.EnumCase(path, location, value, shipmentStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this shipment status
func (m ShipmentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateShipmentStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
