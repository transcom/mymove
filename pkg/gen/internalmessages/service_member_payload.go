// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceMemberPayload service member payload
//
// swagger:model ServiceMemberPayload
type ServiceMemberPayload struct {

	// Branch
	Affiliation *Affiliation `json:"affiliation,omitempty"`

	// backup contacts
	BackupContacts IndexServiceMemberBackupContactsPayload `json:"backup_contacts,omitempty"`

	// backup mailing address
	BackupMailingAddress *Address `json:"backup_mailing_address,omitempty"`

	// cac validated
	CacValidated bool `json:"cac_validated,omitempty"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// DoD ID number
	// Example: 5789345789
	// Max Length: 10
	// Min Length: 10
	// Pattern: ^\d{10}$
	Edipi *string `json:"edipi,omitempty"`

	// Email
	EmailIsPreferred *bool `json:"email_is_preferred,omitempty"`

	// USCG EMPLID
	// Example: 5789345
	// Max Length: 7
	// Min Length: 7
	// Pattern: ^\d{7}$
	Emplid *string `json:"emplid,omitempty"`

	// First name
	// Example: John
	FirstName *string `json:"first_name,omitempty"`

	// Grade
	Grade *OrderPayGrade `json:"grade,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// is profile complete
	// Required: true
	IsProfileComplete *bool `json:"is_profile_complete"`

	// Last name
	// Example: Donut
	LastName *string `json:"last_name,omitempty"`

	// Middle name
	// Example: L.
	MiddleName *string `json:"middle_name,omitempty"`

	// orders
	Orders []*Orders `json:"orders"`

	// Personal Email Address
	// Example: john_bob@example.com
	// Pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
	PersonalEmail *string `json:"personal_email,omitempty"`

	// Telephone
	PhoneIsPreferred *bool `json:"phone_is_preferred,omitempty"`

	// Residential Address
	ResidentialAddress *Address `json:"residential_address,omitempty"`

	// Secondary Phone
	// Example: 212-555-5555
	// Pattern: ^([2-9]\d{2}-\d{3}-\d{4})?$
	SecondaryTelephone *string `json:"secondary_telephone,omitempty"`

	// Suffix
	// Example: Jr.
	Suffix *string `json:"suffix,omitempty"`

	// Best contact phone
	// Example: 212-555-5555
	// Pattern: ^[2-9]\d{2}-\d{3}-\d{4}$
	Telephone *string `json:"telephone,omitempty"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// user id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	UserID *strfmt.UUID `json:"user_id"`

	// weight allotment
	WeightAllotment *WeightAllotment `json:"weight_allotment,omitempty"`
}

// Validate validates this service member payload
func (m *ServiceMemberPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupContacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupMailingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdipi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmplid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsProfileComplete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonalEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResidentialAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryTelephone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelephone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeightAllotment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceMemberPayload) validateAffiliation(formats strfmt.Registry) error {
	if swag.IsZero(m.Affiliation) { // not required
		return nil
	}

	if m.Affiliation != nil {
		if err := m.Affiliation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceMemberPayload) validateBackupContacts(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupContacts) { // not required
		return nil
	}

	if err := m.BackupContacts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("backup_contacts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("backup_contacts")
		}
		return err
	}

	return nil
}

func (m *ServiceMemberPayload) validateBackupMailingAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupMailingAddress) { // not required
		return nil
	}

	if m.BackupMailingAddress != nil {
		if err := m.BackupMailingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_mailing_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_mailing_address")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceMemberPayload) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceMemberPayload) validateEdipi(formats strfmt.Registry) error {
	if swag.IsZero(m.Edipi) { // not required
		return nil
	}

	if err := validate.MinLength("edipi", "body", *m.Edipi, 10); err != nil {
		return err
	}

	if err := validate.MaxLength("edipi", "body", *m.Edipi, 10); err != nil {
		return err
	}

	if err := validate.Pattern("edipi", "body", *m.Edipi, `^\d{10}$`); err != nil {
		return err
	}

	return nil
}

func (m *ServiceMemberPayload) validateEmplid(formats strfmt.Registry) error {
	if swag.IsZero(m.Emplid) { // not required
		return nil
	}

	if err := validate.MinLength("emplid", "body", *m.Emplid, 7); err != nil {
		return err
	}

	if err := validate.MaxLength("emplid", "body", *m.Emplid, 7); err != nil {
		return err
	}

	if err := validate.Pattern("emplid", "body", *m.Emplid, `^\d{7}$`); err != nil {
		return err
	}

	return nil
}

func (m *ServiceMemberPayload) validateGrade(formats strfmt.Registry) error {
	if swag.IsZero(m.Grade) { // not required
		return nil
	}

	if m.Grade != nil {
		if err := m.Grade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grade")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceMemberPayload) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceMemberPayload) validateIsProfileComplete(formats strfmt.Registry) error {

	if err := validate.Required("is_profile_complete", "body", m.IsProfileComplete); err != nil {
		return err
	}

	return nil
}

func (m *ServiceMemberPayload) validateOrders(formats strfmt.Registry) error {
	if swag.IsZero(m.Orders) { // not required
		return nil
	}

	for i := 0; i < len(m.Orders); i++ {
		if swag.IsZero(m.Orders[i]) { // not required
			continue
		}

		if m.Orders[i] != nil {
			if err := m.Orders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceMemberPayload) validatePersonalEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.PersonalEmail) { // not required
		return nil
	}

	if err := validate.Pattern("personal_email", "body", *m.PersonalEmail, `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`); err != nil {
		return err
	}

	return nil
}

func (m *ServiceMemberPayload) validateResidentialAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.ResidentialAddress) { // not required
		return nil
	}

	if m.ResidentialAddress != nil {
		if err := m.ResidentialAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("residential_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("residential_address")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceMemberPayload) validateSecondaryTelephone(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryTelephone) { // not required
		return nil
	}

	if err := validate.Pattern("secondary_telephone", "body", *m.SecondaryTelephone, `^([2-9]\d{2}-\d{3}-\d{4})?$`); err != nil {
		return err
	}

	return nil
}

func (m *ServiceMemberPayload) validateTelephone(formats strfmt.Registry) error {
	if swag.IsZero(m.Telephone) { // not required
		return nil
	}

	if err := validate.Pattern("telephone", "body", *m.Telephone, `^[2-9]\d{2}-\d{3}-\d{4}$`); err != nil {
		return err
	}

	return nil
}

func (m *ServiceMemberPayload) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceMemberPayload) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	if err := validate.FormatOf("user_id", "body", "uuid", m.UserID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceMemberPayload) validateWeightAllotment(formats strfmt.Registry) error {
	if swag.IsZero(m.WeightAllotment) { // not required
		return nil
	}

	if m.WeightAllotment != nil {
		if err := m.WeightAllotment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight_allotment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight_allotment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service member payload based on the context it is used
func (m *ServiceMemberPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffiliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupContacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupMailingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResidentialAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeightAllotment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceMemberPayload) contextValidateAffiliation(ctx context.Context, formats strfmt.Registry) error {

	if m.Affiliation != nil {

		if swag.IsZero(m.Affiliation) { // not required
			return nil
		}

		if err := m.Affiliation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceMemberPayload) contextValidateBackupContacts(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BackupContacts.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("backup_contacts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("backup_contacts")
		}
		return err
	}

	return nil
}

func (m *ServiceMemberPayload) contextValidateBackupMailingAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupMailingAddress != nil {

		if swag.IsZero(m.BackupMailingAddress) { // not required
			return nil
		}

		if err := m.BackupMailingAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_mailing_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_mailing_address")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceMemberPayload) contextValidateGrade(ctx context.Context, formats strfmt.Registry) error {

	if m.Grade != nil {

		if swag.IsZero(m.Grade) { // not required
			return nil
		}

		if err := m.Grade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grade")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceMemberPayload) contextValidateOrders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Orders); i++ {

		if m.Orders[i] != nil {

			if swag.IsZero(m.Orders[i]) { // not required
				return nil
			}

			if err := m.Orders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceMemberPayload) contextValidateResidentialAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ResidentialAddress != nil {

		if swag.IsZero(m.ResidentialAddress) { // not required
			return nil
		}

		if err := m.ResidentialAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("residential_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("residential_address")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceMemberPayload) contextValidateWeightAllotment(ctx context.Context, formats strfmt.Registry) error {

	if m.WeightAllotment != nil {

		if swag.IsZero(m.WeightAllotment) { // not required
			return nil
		}

		if err := m.WeightAllotment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight_allotment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight_allotment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceMemberPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceMemberPayload) UnmarshalBinary(b []byte) error {
	var res ServiceMemberPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
