// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DeptIndicator Dept. indicator
//
// swagger:model DeptIndicator
type DeptIndicator string

func NewDeptIndicator(value DeptIndicator) *DeptIndicator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DeptIndicator.
func (m DeptIndicator) Pointer() *DeptIndicator {
	return &m
}

const (

	// DeptIndicatorNAVYANDMARINES captures enum value "NAVY_AND_MARINES"
	DeptIndicatorNAVYANDMARINES DeptIndicator = "NAVY_AND_MARINES"

	// DeptIndicatorARMY captures enum value "ARMY"
	DeptIndicatorARMY DeptIndicator = "ARMY"

	// DeptIndicatorARMYCORPSOFENGINEERS captures enum value "ARMY_CORPS_OF_ENGINEERS"
	DeptIndicatorARMYCORPSOFENGINEERS DeptIndicator = "ARMY_CORPS_OF_ENGINEERS"

	// DeptIndicatorAIRANDSPACEFORCE captures enum value "AIR_AND_SPACE_FORCE"
	DeptIndicatorAIRANDSPACEFORCE DeptIndicator = "AIR_AND_SPACE_FORCE"

	// DeptIndicatorCOASTGUARD captures enum value "COAST_GUARD"
	DeptIndicatorCOASTGUARD DeptIndicator = "COAST_GUARD"

	// DeptIndicatorOFFICEOFSECRETARYOFDEFENSE captures enum value "OFFICE_OF_SECRETARY_OF_DEFENSE"
	DeptIndicatorOFFICEOFSECRETARYOFDEFENSE DeptIndicator = "OFFICE_OF_SECRETARY_OF_DEFENSE"
)

// for schema
var deptIndicatorEnum []interface{}

func init() {
	var res []DeptIndicator
	if err := json.Unmarshal([]byte(`["NAVY_AND_MARINES","ARMY","ARMY_CORPS_OF_ENGINEERS","AIR_AND_SPACE_FORCE","COAST_GUARD","OFFICE_OF_SECRETARY_OF_DEFENSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deptIndicatorEnum = append(deptIndicatorEnum, v)
	}
}

func (m DeptIndicator) validateDeptIndicatorEnum(path, location string, value DeptIndicator) error {
	if err := validate.EnumCase(path, location, value, deptIndicatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this dept indicator
func (m DeptIndicator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeptIndicatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this dept indicator based on context it is used
func (m DeptIndicator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
