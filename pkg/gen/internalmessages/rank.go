// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rank Rank
//
// swagger:model Rank
type Rank struct {

	// Affiliation
	// Enum: [NAVY_AND_MARINES ARMY ARMY_CORPS_OF_ENGINEERS AIR_AND_SPACE_FORCE COAST_GUARD OFFICE_OF_SECRETARY_OF_DEFENSE]
	Affiliation *string `json:"affiliation,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// paygrade Id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	PaygradeID strfmt.UUID `json:"paygradeId,omitempty"`

	// rank name
	// Example: SGT
	RankName *string `json:"rankName,omitempty"`

	// rank order
	RankOrder *int64 `json:"rankOrder,omitempty"`

	// Rank Abbv
	RankShortName *string `json:"rankShortName,omitempty"`
}

// Validate validates this rank
func (m *Rank) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaygradeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rankTypeAffiliationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NAVY_AND_MARINES","ARMY","ARMY_CORPS_OF_ENGINEERS","AIR_AND_SPACE_FORCE","COAST_GUARD","OFFICE_OF_SECRETARY_OF_DEFENSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rankTypeAffiliationPropEnum = append(rankTypeAffiliationPropEnum, v)
	}
}

const (

	// RankAffiliationNAVYANDMARINES captures enum value "NAVY_AND_MARINES"
	RankAffiliationNAVYANDMARINES string = "NAVY_AND_MARINES"

	// RankAffiliationARMY captures enum value "ARMY"
	RankAffiliationARMY string = "ARMY"

	// RankAffiliationARMYCORPSOFENGINEERS captures enum value "ARMY_CORPS_OF_ENGINEERS"
	RankAffiliationARMYCORPSOFENGINEERS string = "ARMY_CORPS_OF_ENGINEERS"

	// RankAffiliationAIRANDSPACEFORCE captures enum value "AIR_AND_SPACE_FORCE"
	RankAffiliationAIRANDSPACEFORCE string = "AIR_AND_SPACE_FORCE"

	// RankAffiliationCOASTGUARD captures enum value "COAST_GUARD"
	RankAffiliationCOASTGUARD string = "COAST_GUARD"

	// RankAffiliationOFFICEOFSECRETARYOFDEFENSE captures enum value "OFFICE_OF_SECRETARY_OF_DEFENSE"
	RankAffiliationOFFICEOFSECRETARYOFDEFENSE string = "OFFICE_OF_SECRETARY_OF_DEFENSE"
)

// prop value enum
func (m *Rank) validateAffiliationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rankTypeAffiliationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Rank) validateAffiliation(formats strfmt.Registry) error {
	if swag.IsZero(m.Affiliation) { // not required
		return nil
	}

	// value enum
	if err := m.validateAffiliationEnum("affiliation", "body", *m.Affiliation); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validatePaygradeID(formats strfmt.Registry) error {
	if swag.IsZero(m.PaygradeID) { // not required
		return nil
	}

	if err := validate.FormatOf("paygradeId", "body", "uuid", m.PaygradeID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rank based on context it is used
func (m *Rank) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Rank) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rank) UnmarshalBinary(b []byte) error {
	var res Rank
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
