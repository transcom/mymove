// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MoveDatesSummary move dates summary
//
// swagger:model MoveDatesSummary
type MoveDatesSummary struct {

	// delivery
	// Required: true
	Delivery []strfmt.Date `json:"delivery"`

	// id
	// Required: true
	ID *string `json:"id"`

	// move date
	// Required: true
	// Format: date
	MoveDate *strfmt.Date `json:"move_date"`

	// move id
	// Required: true
	// Format: uuid
	MoveID *strfmt.UUID `json:"move_id"`

	// pack
	// Required: true
	Pack []strfmt.Date `json:"pack"`

	// pickup
	// Required: true
	Pickup []strfmt.Date `json:"pickup"`

	// report
	// Required: true
	Report []strfmt.Date `json:"report"`

	// transit
	// Required: true
	Transit []strfmt.Date `json:"transit"`
}

// Validate validates this move dates summary
func (m *MoveDatesSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDelivery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoveDatesSummary) validateDelivery(formats strfmt.Registry) error {

	if err := validate.Required("delivery", "body", m.Delivery); err != nil {
		return err
	}

	for i := 0; i < len(m.Delivery); i++ {

		if err := validate.FormatOf("delivery"+"."+strconv.Itoa(i), "body", "date", m.Delivery[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *MoveDatesSummary) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *MoveDatesSummary) validateMoveDate(formats strfmt.Registry) error {

	if err := validate.Required("move_date", "body", m.MoveDate); err != nil {
		return err
	}

	if err := validate.FormatOf("move_date", "body", "date", m.MoveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MoveDatesSummary) validateMoveID(formats strfmt.Registry) error {

	if err := validate.Required("move_id", "body", m.MoveID); err != nil {
		return err
	}

	if err := validate.FormatOf("move_id", "body", "uuid", m.MoveID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MoveDatesSummary) validatePack(formats strfmt.Registry) error {

	if err := validate.Required("pack", "body", m.Pack); err != nil {
		return err
	}

	for i := 0; i < len(m.Pack); i++ {

		if err := validate.FormatOf("pack"+"."+strconv.Itoa(i), "body", "date", m.Pack[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *MoveDatesSummary) validatePickup(formats strfmt.Registry) error {

	if err := validate.Required("pickup", "body", m.Pickup); err != nil {
		return err
	}

	for i := 0; i < len(m.Pickup); i++ {

		if err := validate.FormatOf("pickup"+"."+strconv.Itoa(i), "body", "date", m.Pickup[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *MoveDatesSummary) validateReport(formats strfmt.Registry) error {

	if err := validate.Required("report", "body", m.Report); err != nil {
		return err
	}

	for i := 0; i < len(m.Report); i++ {

		if err := validate.FormatOf("report"+"."+strconv.Itoa(i), "body", "date", m.Report[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *MoveDatesSummary) validateTransit(formats strfmt.Registry) error {

	if err := validate.Required("transit", "body", m.Transit); err != nil {
		return err
	}

	for i := 0; i < len(m.Transit); i++ {

		if err := validate.FormatOf("transit"+"."+strconv.Itoa(i), "body", "date", m.Transit[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MoveDatesSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MoveDatesSummary) UnmarshalBinary(b []byte) error {
	var res MoveDatesSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
