// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateOktaAndMilMoveUser create okta and mil move user
//
// swagger:model CreateOktaAndMilMoveUser
type CreateOktaAndMilMoveUser struct {

	// Branch
	// Required: true
	Affiliation *Affiliation `json:"affiliation"`

	// DoD ID number
	// Example: 5789345789
	// Required: true
	// Max Length: 10
	// Min Length: 10
	// Pattern: ^\d{10}$
	Edipi *string `json:"edipi"`

	// Email
	// Example: user@userdomain.com
	// Required: true
	Email string `json:"email"`

	// Indicates if email is the preferred method of contact
	EmailIsPreferred bool `json:"emailIsPreferred,omitempty"`

	// USCG EMPLID
	// Example: 1234567
	// Max Length: 7
	// Min Length: 7
	// Pattern: ^\d{7}$
	Emplid *string `json:"emplid,omitempty"`

	// First Name
	// Required: true
	FirstName string `json:"firstName"`

	// Last Name
	// Required: true
	LastName string `json:"lastName"`

	// Middle Initial
	// Example: L.
	MiddleInitial *string `json:"middleInitial,omitempty"`

	// Indicates if phone is the preferred method of contact
	PhoneIsPreferred bool `json:"phoneIsPreferred,omitempty"`

	// secondary telephone
	// Example: 212-555-5555
	// Pattern: ^[2-9]\d{2}-\d{3}-\d{4}$
	SecondaryTelephone string `json:"secondaryTelephone,omitempty"`

	// telephone
	// Example: 212-555-5555
	// Required: true
	// Pattern: ^[2-9]\d{2}-\d{3}-\d{4}$
	Telephone string `json:"telephone"`
}

// Validate validates this create okta and mil move user
func (m *CreateOktaAndMilMoveUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdipi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmplid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryTelephone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelephone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateOktaAndMilMoveUser) validateAffiliation(formats strfmt.Registry) error {

	if err := validate.Required("affiliation", "body", m.Affiliation); err != nil {
		return err
	}

	if err := validate.Required("affiliation", "body", m.Affiliation); err != nil {
		return err
	}

	if m.Affiliation != nil {
		if err := m.Affiliation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *CreateOktaAndMilMoveUser) validateEdipi(formats strfmt.Registry) error {

	if err := validate.Required("edipi", "body", m.Edipi); err != nil {
		return err
	}

	if err := validate.MinLength("edipi", "body", *m.Edipi, 10); err != nil {
		return err
	}

	if err := validate.MaxLength("edipi", "body", *m.Edipi, 10); err != nil {
		return err
	}

	if err := validate.Pattern("edipi", "body", *m.Edipi, `^\d{10}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAndMilMoveUser) validateEmail(formats strfmt.Registry) error {

	if err := validate.RequiredString("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAndMilMoveUser) validateEmplid(formats strfmt.Registry) error {
	if swag.IsZero(m.Emplid) { // not required
		return nil
	}

	if err := validate.MinLength("emplid", "body", *m.Emplid, 7); err != nil {
		return err
	}

	if err := validate.MaxLength("emplid", "body", *m.Emplid, 7); err != nil {
		return err
	}

	if err := validate.Pattern("emplid", "body", *m.Emplid, `^\d{7}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAndMilMoveUser) validateFirstName(formats strfmt.Registry) error {

	if err := validate.RequiredString("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAndMilMoveUser) validateLastName(formats strfmt.Registry) error {

	if err := validate.RequiredString("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAndMilMoveUser) validateSecondaryTelephone(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryTelephone) { // not required
		return nil
	}

	if err := validate.Pattern("secondaryTelephone", "body", m.SecondaryTelephone, `^[2-9]\d{2}-\d{3}-\d{4}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAndMilMoveUser) validateTelephone(formats strfmt.Registry) error {

	if err := validate.RequiredString("telephone", "body", m.Telephone); err != nil {
		return err
	}

	if err := validate.Pattern("telephone", "body", m.Telephone, `^[2-9]\d{2}-\d{3}-\d{4}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create okta and mil move user based on the context it is used
func (m *CreateOktaAndMilMoveUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffiliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateOktaAndMilMoveUser) contextValidateAffiliation(ctx context.Context, formats strfmt.Registry) error {

	if m.Affiliation != nil {

		if err := m.Affiliation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateOktaAndMilMoveUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateOktaAndMilMoveUser) UnmarshalBinary(b []byte) error {
	var res CreateOktaAndMilMoveUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
