// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateMovingExpense update moving expense
//
// swagger:model UpdateMovingExpense
type UpdateMovingExpense struct {

	// The total amount of the expense as indicated on the receipt
	// Required: true
	Amount *int64 `json:"amount"`

	// A brief description of the expense
	// Required: true
	Description *string `json:"description"`

	// Indicates if the customer is missing the receipt for their expense.
	// Required: true
	MissingReceipt *bool `json:"missingReceipt"`

	// moving expense type
	// Required: true
	MovingExpenseType *MovingExpenseType `json:"movingExpenseType"`

	// Indicates if the service member used their government issued card to pay for the expense
	// Required: true
	PaidWithGTCC *bool `json:"paidWithGTCC"`

	// The date the shipment exited storage, applicable for the `STORAGE` movingExpenseType only
	// Format: date
	SitEndDate strfmt.Date `json:"sitEndDate,omitempty"`

	// sit location
	SitLocation *SITLocationType `json:"sitLocation,omitempty"`

	// The date the shipment entered storage, applicable for the `STORAGE` movingExpenseType only
	// Format: date
	SitStartDate strfmt.Date `json:"sitStartDate,omitempty"`

	// The total weight stored in PPM SIT
	WeightStored int64 `json:"weightStored,omitempty"`
}

// Validate validates this update moving expense
func (m *UpdateMovingExpense) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMissingReceipt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMovingExpenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaidWithGTCC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateMovingExpense) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMovingExpense) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMovingExpense) validateMissingReceipt(formats strfmt.Registry) error {

	if err := validate.Required("missingReceipt", "body", m.MissingReceipt); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMovingExpense) validateMovingExpenseType(formats strfmt.Registry) error {

	if err := validate.Required("movingExpenseType", "body", m.MovingExpenseType); err != nil {
		return err
	}

	if err := validate.Required("movingExpenseType", "body", m.MovingExpenseType); err != nil {
		return err
	}

	if m.MovingExpenseType != nil {
		if err := m.MovingExpenseType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("movingExpenseType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("movingExpenseType")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateMovingExpense) validatePaidWithGTCC(formats strfmt.Registry) error {

	if err := validate.Required("paidWithGTCC", "body", m.PaidWithGTCC); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMovingExpense) validateSitEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitEndDate", "body", "date", m.SitEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMovingExpense) validateSitLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.SitLocation) { // not required
		return nil
	}

	if m.SitLocation != nil {
		if err := m.SitLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitLocation")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateMovingExpense) validateSitStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitStartDate", "body", "date", m.SitStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update moving expense based on the context it is used
func (m *UpdateMovingExpense) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMovingExpenseType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSitLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateMovingExpense) contextValidateMovingExpenseType(ctx context.Context, formats strfmt.Registry) error {

	if m.MovingExpenseType != nil {

		if err := m.MovingExpenseType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("movingExpenseType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("movingExpenseType")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateMovingExpense) contextValidateSitLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.SitLocation != nil {

		if swag.IsZero(m.SitLocation) { // not required
			return nil
		}

		if err := m.SitLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sitLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sitLocation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateMovingExpense) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateMovingExpense) UnmarshalBinary(b []byte) error {
	var res UpdateMovingExpense
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
