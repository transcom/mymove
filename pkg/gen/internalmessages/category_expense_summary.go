// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CategoryExpenseSummary category expense summary
//
// swagger:model CategoryExpenseSummary
type CategoryExpenseSummary struct {

	// category
	Category MovingExpenseType `json:"category,omitempty"`

	// payment methods
	PaymentMethods *PaymentMethodsTotals `json:"payment_methods,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this category expense summary
func (m *CategoryExpenseSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CategoryExpenseSummary) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if err := m.Category.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("category")
		}
		return err
	}

	return nil
}

func (m *CategoryExpenseSummary) validatePaymentMethods(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentMethods) { // not required
		return nil
	}

	if m.PaymentMethods != nil {
		if err := m.PaymentMethods.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_methods")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CategoryExpenseSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CategoryExpenseSummary) UnmarshalBinary(b []byte) error {
	var res CategoryExpenseSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
