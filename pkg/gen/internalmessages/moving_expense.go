// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MovingExpense Expense information and receipts of costs incurred that can be reimbursed while moving a PPM shipment.
//
// swagger:model MovingExpense
type MovingExpense struct {

	// The total amount of the expense as indicated on the receipt
	Amount *int64 `json:"amount"`

	// Timestamp the moving expense object was initially created in the system (UTC)
	// Required: true
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt"`

	// A brief description of the expense
	Description *string `json:"description"`

	// document
	// Required: true
	Document *Document `json:"document"`

	// The id of the Document that contains all file uploads for this expense
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Read Only: true
	// Format: uuid
	DocumentID strfmt.UUID `json:"documentId"`

	// A hash that should be used as the "If-Match" header for any updates.
	// Read Only: true
	ETag string `json:"eTag,omitempty"`

	// Unique primary identifier of the Moving Expense object
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// Indicates if the service member is missing the receipt with the proof of expense amount
	MissingReceipt *bool `json:"missingReceipt"`

	// moving expense type
	MovingExpenseType *OmittableMovingExpenseType `json:"movingExpenseType"`

	// Indicates if the service member used their government issued card to pay for the expense
	PaidWithGtcc *bool `json:"paidWithGtcc"`

	// The PPM Shipment id that this moving expense belongs to
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Read Only: true
	// Format: uuid
	PpmShipmentID strfmt.UUID `json:"ppmShipmentId"`

	// reason
	Reason *PPMDocumentStatusReason `json:"reason"`

	// The date the shipment exited storage, applicable for the `STORAGE` movingExpenseType only
	// Example: 2018-05-26
	// Format: date
	SitEndDate *strfmt.Date `json:"sitEndDate"`

	// The date the shipment entered storage, applicable for the `STORAGE` movingExpenseType only
	// Example: 2022-04-26
	// Format: date
	SitStartDate *strfmt.Date `json:"sitStartDate"`

	// status
	Status *OmittablePPMDocumentStatus `json:"status"`

	// Timestamp when a property of this moving expense object was last modified (UTC)
	// Required: true
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt"`
}

// Validate validates this moving expense
func (m *MovingExpense) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMovingExpenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpmShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MovingExpense) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense) validateDocument(formats strfmt.Registry) error {

	if err := validate.Required("document", "body", m.Document); err != nil {
		return err
	}

	if m.Document != nil {
		if err := m.Document.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("document")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("document")
			}
			return err
		}
	}

	return nil
}

func (m *MovingExpense) validateDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("documentId", "body", strfmt.UUID(m.DocumentID)); err != nil {
		return err
	}

	if err := validate.FormatOf("documentId", "body", "uuid", m.DocumentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense) validateMovingExpenseType(formats strfmt.Registry) error {
	if swag.IsZero(m.MovingExpenseType) { // not required
		return nil
	}

	if m.MovingExpenseType != nil {
		if err := m.MovingExpenseType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("movingExpenseType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("movingExpenseType")
			}
			return err
		}
	}

	return nil
}

func (m *MovingExpense) validatePpmShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("ppmShipmentId", "body", strfmt.UUID(m.PpmShipmentID)); err != nil {
		return err
	}

	if err := validate.FormatOf("ppmShipmentId", "body", "uuid", m.PpmShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *MovingExpense) validateSitEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitEndDate", "body", "date", m.SitEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense) validateSitStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitStartDate", "body", "date", m.SitStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *MovingExpense) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this moving expense based on the context it is used
func (m *MovingExpense) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDocument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDocumentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMovingExpenseType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePpmShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MovingExpense) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense) contextValidateDocument(ctx context.Context, formats strfmt.Registry) error {

	if m.Document != nil {

		if err := m.Document.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("document")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("document")
			}
			return err
		}
	}

	return nil
}

func (m *MovingExpense) contextValidateDocumentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "documentId", "body", strfmt.UUID(m.DocumentID)); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag)); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense) contextValidateMovingExpenseType(ctx context.Context, formats strfmt.Registry) error {

	if m.MovingExpenseType != nil {

		if swag.IsZero(m.MovingExpenseType) { // not required
			return nil
		}

		if err := m.MovingExpenseType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("movingExpenseType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("movingExpenseType")
			}
			return err
		}
	}

	return nil
}

func (m *MovingExpense) contextValidatePpmShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ppmShipmentId", "body", strfmt.UUID(m.PpmShipmentID)); err != nil {
		return err
	}

	return nil
}

func (m *MovingExpense) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if m.Reason != nil {

		if swag.IsZero(m.Reason) { // not required
			return nil
		}

		if err := m.Reason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *MovingExpense) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *MovingExpense) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MovingExpense) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MovingExpense) UnmarshalBinary(b []byte) error {
	var res MovingExpense
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
