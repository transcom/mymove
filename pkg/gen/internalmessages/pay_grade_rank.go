// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PayGradeRank Pay Grade Rank
//
// swagger:model PayGradeRank
type PayGradeRank struct {

	// affiliation
	Affiliation *Affiliation `json:"affiliation,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// pay grade Id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	PayGradeID strfmt.UUID `json:"payGradeId,omitempty"`

	// rank name
	RankName *RankNames `json:"rankName,omitempty"`

	// rank order
	RankOrder *int64 `json:"rankOrder,omitempty"`

	// rank short name
	RankShortName *RankShortNames `json:"rankShortName,omitempty"`
}

// Validate validates this pay grade rank
func (m *PayGradeRank) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayGradeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRankName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRankShortName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PayGradeRank) validateAffiliation(formats strfmt.Registry) error {
	if swag.IsZero(m.Affiliation) { // not required
		return nil
	}

	if m.Affiliation != nil {
		if err := m.Affiliation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *PayGradeRank) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PayGradeRank) validatePayGradeID(formats strfmt.Registry) error {
	if swag.IsZero(m.PayGradeID) { // not required
		return nil
	}

	if err := validate.FormatOf("payGradeId", "body", "uuid", m.PayGradeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PayGradeRank) validateRankName(formats strfmt.Registry) error {
	if swag.IsZero(m.RankName) { // not required
		return nil
	}

	if m.RankName != nil {
		if err := m.RankName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rankName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rankName")
			}
			return err
		}
	}

	return nil
}

func (m *PayGradeRank) validateRankShortName(formats strfmt.Registry) error {
	if swag.IsZero(m.RankShortName) { // not required
		return nil
	}

	if m.RankShortName != nil {
		if err := m.RankShortName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rankShortName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rankShortName")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pay grade rank based on the context it is used
func (m *PayGradeRank) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffiliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRankName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRankShortName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PayGradeRank) contextValidateAffiliation(ctx context.Context, formats strfmt.Registry) error {

	if m.Affiliation != nil {

		if swag.IsZero(m.Affiliation) { // not required
			return nil
		}

		if err := m.Affiliation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *PayGradeRank) contextValidateRankName(ctx context.Context, formats strfmt.Registry) error {

	if m.RankName != nil {

		if swag.IsZero(m.RankName) { // not required
			return nil
		}

		if err := m.RankName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rankName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rankName")
			}
			return err
		}
	}

	return nil
}

func (m *PayGradeRank) contextValidateRankShortName(ctx context.Context, formats strfmt.Registry) error {

	if m.RankShortName != nil {

		if swag.IsZero(m.RankShortName) { // not required
			return nil
		}

		if err := m.RankShortName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rankShortName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rankShortName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PayGradeRank) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PayGradeRank) UnmarshalBinary(b []byte) error {
	var res PayGradeRank
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
