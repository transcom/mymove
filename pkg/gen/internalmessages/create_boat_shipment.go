// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateBoatShipment Boat shipment information for the move.
//
// swagger:model CreateBoatShipment
type CreateBoatShipment struct {

	// Does the boat have a trailer
	// Required: true
	HasTrailer *bool `json:"hasTrailer"`

	// Height of the Boat in inches
	// Required: true
	HeightInInches *int64 `json:"heightInInches"`

	// Is the trailer roadworthy
	IsRoadworthy *bool `json:"isRoadworthy,omitempty"`

	// Length of the Boat in inches
	// Required: true
	LengthInInches *int64 `json:"lengthInInches"`

	// Make of the Boat
	// Required: true
	Make *string `json:"make"`

	// Model of the Boat
	// Required: true
	Model *string `json:"model"`

	// type
	// Required: true
	// Enum: [HAUL_AWAY TOW_AWAY]
	Type *string `json:"type"`

	// Width of the Boat in inches
	// Required: true
	WidthInInches *int64 `json:"widthInInches"`

	// Year of the Boat
	// Required: true
	Year *int64 `json:"year"`
}

// Validate validates this create boat shipment
func (m *CreateBoatShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHasTrailer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeightInInches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLengthInInches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMake(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidthInInches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBoatShipment) validateHasTrailer(formats strfmt.Registry) error {

	if err := validate.Required("hasTrailer", "body", m.HasTrailer); err != nil {
		return err
	}

	return nil
}

func (m *CreateBoatShipment) validateHeightInInches(formats strfmt.Registry) error {

	if err := validate.Required("heightInInches", "body", m.HeightInInches); err != nil {
		return err
	}

	return nil
}

func (m *CreateBoatShipment) validateLengthInInches(formats strfmt.Registry) error {

	if err := validate.Required("lengthInInches", "body", m.LengthInInches); err != nil {
		return err
	}

	return nil
}

func (m *CreateBoatShipment) validateMake(formats strfmt.Registry) error {

	if err := validate.Required("make", "body", m.Make); err != nil {
		return err
	}

	return nil
}

func (m *CreateBoatShipment) validateModel(formats strfmt.Registry) error {

	if err := validate.Required("model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

var createBoatShipmentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HAUL_AWAY","TOW_AWAY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createBoatShipmentTypeTypePropEnum = append(createBoatShipmentTypeTypePropEnum, v)
	}
}

const (

	// CreateBoatShipmentTypeHAULAWAY captures enum value "HAUL_AWAY"
	CreateBoatShipmentTypeHAULAWAY string = "HAUL_AWAY"

	// CreateBoatShipmentTypeTOWAWAY captures enum value "TOW_AWAY"
	CreateBoatShipmentTypeTOWAWAY string = "TOW_AWAY"
)

// prop value enum
func (m *CreateBoatShipment) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createBoatShipmentTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateBoatShipment) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CreateBoatShipment) validateWidthInInches(formats strfmt.Registry) error {

	if err := validate.Required("widthInInches", "body", m.WidthInInches); err != nil {
		return err
	}

	return nil
}

func (m *CreateBoatShipment) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create boat shipment based on context it is used
func (m *CreateBoatShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateBoatShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBoatShipment) UnmarshalBinary(b []byte) error {
	var res CreateBoatShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
