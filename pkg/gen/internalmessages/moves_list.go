// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MovesList moves list
//
// swagger:model MovesList
type MovesList struct {

	// current move
	CurrentMove []*InternalMove `json:"currentMove"`

	// previous moves
	PreviousMoves []*InternalMove `json:"previousMoves"`
}

// Validate validates this moves list
func (m *MovesList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentMove(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousMoves(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MovesList) validateCurrentMove(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentMove) { // not required
		return nil
	}

	for i := 0; i < len(m.CurrentMove); i++ {
		if swag.IsZero(m.CurrentMove[i]) { // not required
			continue
		}

		if m.CurrentMove[i] != nil {
			if err := m.CurrentMove[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("currentMove" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("currentMove" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MovesList) validatePreviousMoves(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousMoves) { // not required
		return nil
	}

	for i := 0; i < len(m.PreviousMoves); i++ {
		if swag.IsZero(m.PreviousMoves[i]) { // not required
			continue
		}

		if m.PreviousMoves[i] != nil {
			if err := m.PreviousMoves[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("previousMoves" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("previousMoves" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this moves list based on the context it is used
func (m *MovesList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentMove(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreviousMoves(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MovesList) contextValidateCurrentMove(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CurrentMove); i++ {

		if m.CurrentMove[i] != nil {

			if swag.IsZero(m.CurrentMove[i]) { // not required
				return nil
			}

			if err := m.CurrentMove[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("currentMove" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("currentMove" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MovesList) contextValidatePreviousMoves(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreviousMoves); i++ {

		if m.PreviousMoves[i] != nil {

			if swag.IsZero(m.PreviousMoves[i]) { // not required
				return nil
			}

			if err := m.PreviousMoves[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("previousMoves" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("previousMoves" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MovesList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MovesList) UnmarshalBinary(b []byte) error {
	var res MovesList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
