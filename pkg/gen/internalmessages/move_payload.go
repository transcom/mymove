// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MovePayload move payload
//
// swagger:model MovePayload
type MovePayload struct {

	// cancel reason
	// Example: Change of orders
	CancelReason *string `json:"cancel_reason,omitempty"`

	// closeout office
	CloseoutOffice *TransportationOffice `json:"closeout_office,omitempty"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// e tag
	// Required: true
	ETag *string `json:"eTag"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// locator
	// Example: 12432
	// Required: true
	Locator *string `json:"locator"`

	// mto shipments
	MtoShipments MTOShipments `json:"mto_shipments,omitempty"`

	// orders id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	OrdersID *strfmt.UUID `json:"orders_id"`

	// service member id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Read Only: true
	// Format: uuid
	ServiceMemberID strfmt.UUID `json:"service_member_id,omitempty"`

	// status
	Status MoveStatus `json:"status,omitempty"`

	// submitted at
	// Format: date-time
	SubmittedAt *strfmt.DateTime `json:"submitted_at,omitempty"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this move payload
func (m *MovePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloseoutOffice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateETag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoShipments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMemberID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MovePayload) validateCloseoutOffice(formats strfmt.Registry) error {
	if swag.IsZero(m.CloseoutOffice) { // not required
		return nil
	}

	if m.CloseoutOffice != nil {
		if err := m.CloseoutOffice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeout_office")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("closeout_office")
			}
			return err
		}
	}

	return nil
}

func (m *MovePayload) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovePayload) validateETag(formats strfmt.Registry) error {

	if err := validate.Required("eTag", "body", m.ETag); err != nil {
		return err
	}

	return nil
}

func (m *MovePayload) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovePayload) validateLocator(formats strfmt.Registry) error {

	if err := validate.Required("locator", "body", m.Locator); err != nil {
		return err
	}

	return nil
}

func (m *MovePayload) validateMtoShipments(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoShipments) { // not required
		return nil
	}

	if err := m.MtoShipments.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mto_shipments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mto_shipments")
		}
		return err
	}

	return nil
}

func (m *MovePayload) validateOrdersID(formats strfmt.Registry) error {

	if err := validate.Required("orders_id", "body", m.OrdersID); err != nil {
		return err
	}

	if err := validate.FormatOf("orders_id", "body", "uuid", m.OrdersID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovePayload) validateServiceMemberID(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceMemberID) { // not required
		return nil
	}

	if err := validate.FormatOf("service_member_id", "body", "uuid", m.ServiceMemberID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovePayload) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *MovePayload) validateSubmittedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmittedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submitted_at", "body", "date-time", m.SubmittedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MovePayload) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this move payload based on the context it is used
func (m *MovePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloseoutOffice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtoShipments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceMemberID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MovePayload) contextValidateCloseoutOffice(ctx context.Context, formats strfmt.Registry) error {

	if m.CloseoutOffice != nil {

		if swag.IsZero(m.CloseoutOffice) { // not required
			return nil
		}

		if err := m.CloseoutOffice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeout_office")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("closeout_office")
			}
			return err
		}
	}

	return nil
}

func (m *MovePayload) contextValidateMtoShipments(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MtoShipments.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mto_shipments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mto_shipments")
		}
		return err
	}

	return nil
}

func (m *MovePayload) contextValidateServiceMemberID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "service_member_id", "body", strfmt.UUID(m.ServiceMemberID)); err != nil {
		return err
	}

	return nil
}

func (m *MovePayload) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MovePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MovePayload) UnmarshalBinary(b []byte) error {
	var res MovePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
