// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateReimbursement create reimbursement
//
// swagger:model CreateReimbursement
type CreateReimbursement struct {

	// method of receipt
	// Required: true
	MethodOfReceipt *MethodOfReceipt `json:"method_of_receipt"`

	// Requested Amount
	//
	// unit is cents
	// Required: true
	// Minimum: 1
	RequestedAmount *int64 `json:"requested_amount"`
}

// Validate validates this create reimbursement
func (m *CreateReimbursement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMethodOfReceipt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateReimbursement) validateMethodOfReceipt(formats strfmt.Registry) error {

	if err := validate.Required("method_of_receipt", "body", m.MethodOfReceipt); err != nil {
		return err
	}

	if err := validate.Required("method_of_receipt", "body", m.MethodOfReceipt); err != nil {
		return err
	}

	if m.MethodOfReceipt != nil {
		if err := m.MethodOfReceipt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("method_of_receipt")
			}
			return err
		}
	}

	return nil
}

func (m *CreateReimbursement) validateRequestedAmount(formats strfmt.Registry) error {

	if err := validate.Required("requested_amount", "body", m.RequestedAmount); err != nil {
		return err
	}

	if err := validate.MinimumInt("requested_amount", "body", *m.RequestedAmount, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create reimbursement based on the context it is used
func (m *CreateReimbursement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMethodOfReceipt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateReimbursement) contextValidateMethodOfReceipt(ctx context.Context, formats strfmt.Registry) error {

	if m.MethodOfReceipt != nil {
		if err := m.MethodOfReceipt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("method_of_receipt")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateReimbursement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateReimbursement) UnmarshalBinary(b []byte) error {
	var res CreateReimbursement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
