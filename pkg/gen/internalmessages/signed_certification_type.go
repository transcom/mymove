// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SignedCertificationType signed certification type
//
// swagger:model SignedCertificationType
type SignedCertificationType string

const (

	// SignedCertificationTypePPMPAYMENT captures enum value "PPM_PAYMENT"
	SignedCertificationTypePPMPAYMENT SignedCertificationType = "PPM_PAYMENT"

	// SignedCertificationTypeSHIPMENT captures enum value "SHIPMENT"
	SignedCertificationTypeSHIPMENT SignedCertificationType = "SHIPMENT"

	// SignedCertificationTypePPM captures enum value "PPM"
	SignedCertificationTypePPM SignedCertificationType = "PPM"

	// SignedCertificationTypeHHG captures enum value "HHG"
	SignedCertificationTypeHHG SignedCertificationType = "HHG"
)

// for schema
var signedCertificationTypeEnum []interface{}

func init() {
	var res []SignedCertificationType
	if err := json.Unmarshal([]byte(`["PPM_PAYMENT","SHIPMENT","PPM","HHG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signedCertificationTypeEnum = append(signedCertificationTypeEnum, v)
	}
}

func (m SignedCertificationType) validateSignedCertificationTypeEnum(path, location string, value SignedCertificationType) error {
	if err := validate.EnumCase(path, location, value, signedCertificationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this signed certification type
func (m SignedCertificationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSignedCertificationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
