// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InvoiceStatus Status
//
// swagger:model InvoiceStatus
type InvoiceStatus string

const (

	// InvoiceStatusDRAFT captures enum value "DRAFT"
	InvoiceStatusDRAFT InvoiceStatus = "DRAFT"

	// InvoiceStatusINPROCESS captures enum value "IN_PROCESS"
	InvoiceStatusINPROCESS InvoiceStatus = "IN_PROCESS"

	// InvoiceStatusSUBMITTED captures enum value "SUBMITTED"
	InvoiceStatusSUBMITTED InvoiceStatus = "SUBMITTED"

	// InvoiceStatusSUBMISSIONFAILURE captures enum value "SUBMISSION_FAILURE"
	InvoiceStatusSUBMISSIONFAILURE InvoiceStatus = "SUBMISSION_FAILURE"

	// InvoiceStatusUPDATEFAILURE captures enum value "UPDATE_FAILURE"
	InvoiceStatusUPDATEFAILURE InvoiceStatus = "UPDATE_FAILURE"
)

// for schema
var invoiceStatusEnum []interface{}

func init() {
	var res []InvoiceStatus
	if err := json.Unmarshal([]byte(`["DRAFT","IN_PROCESS","SUBMITTED","SUBMISSION_FAILURE","UPDATE_FAILURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceStatusEnum = append(invoiceStatusEnum, v)
	}
}

func (m InvoiceStatus) validateInvoiceStatusEnum(path, location string, value InvoiceStatus) error {
	if err := validate.EnumCase(path, location, value, invoiceStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this invoice status
func (m InvoiceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInvoiceStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
