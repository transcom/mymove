// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateWeightTicketDocumentsPayload create weight ticket documents payload
//
// swagger:model CreateWeightTicketDocumentsPayload
type CreateWeightTicketDocumentsPayload struct {

	// empty weight ticket recorded weight
	// Minimum: 0
	EmptyWeight *int64 `json:"empty_weight,omitempty"`

	// missing empty weight ticket
	// Required: true
	EmptyWeightTicketMissing *bool `json:"empty_weight_ticket_missing"`

	// full weight ticket recorded weight
	// Minimum: 0
	FullWeight *int64 `json:"full_weight,omitempty"`

	// missing full weight ticket
	// Required: true
	FullWeightTicketMissing *bool `json:"full_weight_ticket_missing"`

	// personally procured move id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	PersonallyProcuredMoveID *strfmt.UUID `json:"personally_procured_move_id"`

	// missing trailer ownership documentation
	// Required: true
	TrailerOwnershipMissing *bool `json:"trailer_ownership_missing"`

	// upload ids
	UploadIds []strfmt.UUID `json:"upload_ids"`

	// Vehicle make
	VehicleMake *string `json:"vehicle_make,omitempty"`

	// Vehicle model
	VehicleModel *string `json:"vehicle_model,omitempty"`

	// Vehicle nickname (ex. 'Large box truck')
	VehicleNickname *string `json:"vehicle_nickname,omitempty"`

	// Full Weight Ticket Date
	// Example: 2018-04-26
	// Format: date
	WeightTicketDate *strfmt.Date `json:"weight_ticket_date,omitempty"`

	// weight ticket set type
	// Required: true
	WeightTicketSetType *WeightTicketSetType `json:"weight_ticket_set_type"`
}

// Validate validates this create weight ticket documents payload
func (m *CreateWeightTicketDocumentsPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmptyWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyWeightTicketMissing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullWeightTicketMissing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonallyProcuredMoveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrailerOwnershipMissing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeightTicketDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeightTicketSetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateWeightTicketDocumentsPayload) validateEmptyWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.EmptyWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("empty_weight", "body", *m.EmptyWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicketDocumentsPayload) validateEmptyWeightTicketMissing(formats strfmt.Registry) error {

	if err := validate.Required("empty_weight_ticket_missing", "body", m.EmptyWeightTicketMissing); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicketDocumentsPayload) validateFullWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.FullWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("full_weight", "body", *m.FullWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicketDocumentsPayload) validateFullWeightTicketMissing(formats strfmt.Registry) error {

	if err := validate.Required("full_weight_ticket_missing", "body", m.FullWeightTicketMissing); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicketDocumentsPayload) validatePersonallyProcuredMoveID(formats strfmt.Registry) error {

	if err := validate.Required("personally_procured_move_id", "body", m.PersonallyProcuredMoveID); err != nil {
		return err
	}

	if err := validate.FormatOf("personally_procured_move_id", "body", "uuid", m.PersonallyProcuredMoveID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicketDocumentsPayload) validateTrailerOwnershipMissing(formats strfmt.Registry) error {

	if err := validate.Required("trailer_ownership_missing", "body", m.TrailerOwnershipMissing); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicketDocumentsPayload) validateUploadIds(formats strfmt.Registry) error {
	if swag.IsZero(m.UploadIds) { // not required
		return nil
	}

	for i := 0; i < len(m.UploadIds); i++ {

		if err := validate.FormatOf("upload_ids"+"."+strconv.Itoa(i), "body", "uuid", m.UploadIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *CreateWeightTicketDocumentsPayload) validateWeightTicketDate(formats strfmt.Registry) error {
	if swag.IsZero(m.WeightTicketDate) { // not required
		return nil
	}

	if err := validate.FormatOf("weight_ticket_date", "body", "date", m.WeightTicketDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateWeightTicketDocumentsPayload) validateWeightTicketSetType(formats strfmt.Registry) error {

	if err := validate.Required("weight_ticket_set_type", "body", m.WeightTicketSetType); err != nil {
		return err
	}

	if err := validate.Required("weight_ticket_set_type", "body", m.WeightTicketSetType); err != nil {
		return err
	}

	if m.WeightTicketSetType != nil {
		if err := m.WeightTicketSetType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight_ticket_set_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight_ticket_set_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create weight ticket documents payload based on the context it is used
func (m *CreateWeightTicketDocumentsPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWeightTicketSetType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateWeightTicketDocumentsPayload) contextValidateWeightTicketSetType(ctx context.Context, formats strfmt.Registry) error {

	if m.WeightTicketSetType != nil {

		if err := m.WeightTicketSetType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight_ticket_set_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight_ticket_set_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateWeightTicketDocumentsPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateWeightTicketDocumentsPayload) UnmarshalBinary(b []byte) error {
	var res CreateWeightTicketDocumentsPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
