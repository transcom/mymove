// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InternalMove internal move
//
// swagger:model InternalMove
type InternalMove struct {

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// e tag
	// Read Only: true
	ETag string `json:"eTag,omitempty"`

	// excess weight acknowledged at
	// Read Only: true
	// Format: date-time
	ExcessWeightAcknowledgedAt *strfmt.DateTime `json:"excessWeightAcknowledgedAt"`

	// excess weight qualified at
	// Read Only: true
	// Format: date-time
	ExcessWeightQualifiedAt *strfmt.DateTime `json:"excessWeightQualifiedAt"`

	// id
	// Example: a502b4f1-b9c4-4faf-8bdd-68292501bf26
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// move code
	// Example: HYXFJF
	// Read Only: true
	MoveCode string `json:"moveCode,omitempty"`

	// mto shipments
	MtoShipments MTOShipments `json:"mtoShipments,omitempty"`

	// order
	Order *Order `json:"order,omitempty"`

	// order ID
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	OrderID strfmt.UUID `json:"orderID,omitempty"`

	// orders
	Orders interface{} `json:"orders,omitempty"`

	// ppm estimated weight
	PpmEstimatedWeight int64 `json:"ppmEstimatedWeight,omitempty"`

	// prime counseling completed at
	// Read Only: true
	// Format: date-time
	PrimeCounselingCompletedAt *strfmt.DateTime `json:"primeCounselingCompletedAt,omitempty"`

	// reference Id
	// Example: 1001-3456
	ReferenceID string `json:"referenceId,omitempty"`

	// updated at
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this internal move
func (m *InternalMove) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcessWeightAcknowledgedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcessWeightQualifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoShipments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimeCounselingCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InternalMove) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) validateExcessWeightAcknowledgedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcessWeightAcknowledgedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("excessWeightAcknowledgedAt", "body", "date-time", m.ExcessWeightAcknowledgedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) validateExcessWeightQualifiedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcessWeightQualifiedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("excessWeightQualifiedAt", "body", "date-time", m.ExcessWeightQualifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) validateMtoShipments(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoShipments) { // not required
		return nil
	}

	if err := m.MtoShipments.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mtoShipments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mtoShipments")
		}
		return err
	}

	return nil
}

func (m *InternalMove) validateOrder(formats strfmt.Registry) error {
	if swag.IsZero(m.Order) { // not required
		return nil
	}

	if m.Order != nil {
		if err := m.Order.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("order")
			}
			return err
		}
	}

	return nil
}

func (m *InternalMove) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("orderID", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) validatePrimeCounselingCompletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimeCounselingCompletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("primeCounselingCompletedAt", "body", "date-time", m.PrimeCounselingCompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this internal move based on the context it is used
func (m *InternalMove) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExcessWeightAcknowledgedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExcessWeightQualifiedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMoveCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtoShipments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrimeCounselingCompletedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InternalMove) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag)); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateExcessWeightAcknowledgedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "excessWeightAcknowledgedAt", "body", m.ExcessWeightAcknowledgedAt); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateExcessWeightQualifiedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "excessWeightQualifiedAt", "body", m.ExcessWeightQualifiedAt); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateMoveCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "moveCode", "body", string(m.MoveCode)); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateMtoShipments(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MtoShipments.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mtoShipments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mtoShipments")
		}
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateOrder(ctx context.Context, formats strfmt.Registry) error {

	if m.Order != nil {

		if swag.IsZero(m.Order) { // not required
			return nil
		}

		if err := m.Order.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("order")
			}
			return err
		}
	}

	return nil
}

func (m *InternalMove) contextValidatePrimeCounselingCompletedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "primeCounselingCompletedAt", "body", m.PrimeCounselingCompletedAt); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InternalMove) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InternalMove) UnmarshalBinary(b []byte) error {
	var res InternalMove
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
