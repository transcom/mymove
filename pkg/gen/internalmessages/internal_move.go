// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InternalMove internal move
//
// swagger:model InternalMove
type InternalMove struct {

	// closeout office
	CloseoutOffice *TransportationOffice `json:"closeoutOffice,omitempty"`

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// e tag
	// Read Only: true
	ETag string `json:"eTag,omitempty"`

	// id
	// Example: a502b4f1-b9c4-4faf-8bdd-68292501bf26
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// move code
	// Example: HYXFJF
	// Read Only: true
	MoveCode string `json:"moveCode,omitempty"`

	// mto shipments
	MtoShipments MTOShipments `json:"mtoShipments,omitempty"`

	// order ID
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	OrderID strfmt.UUID `json:"orderID,omitempty"`

	// orders
	Orders interface{} `json:"orders,omitempty"`

	// status
	// Read Only: true
	Status string `json:"status,omitempty"`

	// submitted at
	// Read Only: true
	// Format: date-time
	SubmittedAt strfmt.DateTime `json:"submittedAt,omitempty"`

	// updated at
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this internal move
func (m *InternalMove) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloseoutOffice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtoShipments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InternalMove) validateCloseoutOffice(formats strfmt.Registry) error {
	if swag.IsZero(m.CloseoutOffice) { // not required
		return nil
	}

	if m.CloseoutOffice != nil {
		if err := m.CloseoutOffice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeoutOffice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("closeoutOffice")
			}
			return err
		}
	}

	return nil
}

func (m *InternalMove) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) validateMtoShipments(formats strfmt.Registry) error {
	if swag.IsZero(m.MtoShipments) { // not required
		return nil
	}

	if err := m.MtoShipments.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mtoShipments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mtoShipments")
		}
		return err
	}

	return nil
}

func (m *InternalMove) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("orderID", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) validateSubmittedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmittedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submittedAt", "body", "date-time", m.SubmittedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this internal move based on the context it is used
func (m *InternalMove) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloseoutOffice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMoveCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtoShipments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubmittedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InternalMove) contextValidateCloseoutOffice(ctx context.Context, formats strfmt.Registry) error {

	if m.CloseoutOffice != nil {

		if swag.IsZero(m.CloseoutOffice) { // not required
			return nil
		}

		if err := m.CloseoutOffice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeoutOffice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("closeoutOffice")
			}
			return err
		}
	}

	return nil
}

func (m *InternalMove) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag)); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateMoveCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "moveCode", "body", string(m.MoveCode)); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateMtoShipments(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MtoShipments.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mtoShipments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mtoShipments")
		}
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateSubmittedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "submittedAt", "body", strfmt.DateTime(m.SubmittedAt)); err != nil {
		return err
	}

	return nil
}

func (m *InternalMove) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InternalMove) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InternalMove) UnmarshalBinary(b []byte) error {
	var res InternalMove
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
