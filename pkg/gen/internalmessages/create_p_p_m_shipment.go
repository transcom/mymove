// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreatePPMShipment A personally procured move is a type of shipment that a service members moves themselves.
//
// swagger:model CreatePPMShipment
type CreatePPMShipment struct {

	// ZIP
	// Example: '90210' or 'N15 3NL'
	// Required: true
	DestinationPostalCode *string `json:"destinationPostalCode"`

	// Date the customer expects to move.
	//
	// Required: true
	// Format: date
	ExpectedDepartureDate *strfmt.Date `json:"expectedDepartureDate"`

	// ZIP
	//
	// zip code, international allowed
	// Example: '90210' or 'N15 3NL'
	// Required: true
	PickupPostalCode *string `json:"pickupPostalCode"`

	// ZIP
	// Example: '90210' or 'N15 3NL'
	SecondaryDestinationPostalCode string `json:"secondaryDestinationPostalCode,omitempty"`

	// ZIP
	// Example: '90210' or 'N15 3NL'
	SecondaryPickupPostalCode string `json:"secondaryPickupPostalCode,omitempty"`

	// sit expected
	// Required: true
	SitExpected *bool `json:"sitExpected"`
}

// Validate validates this create p p m shipment
func (m *CreatePPMShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitExpected(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatePPMShipment) validateDestinationPostalCode(formats strfmt.Registry) error {

	if err := validate.Required("destinationPostalCode", "body", m.DestinationPostalCode); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validateExpectedDepartureDate(formats strfmt.Registry) error {

	if err := validate.Required("expectedDepartureDate", "body", m.ExpectedDepartureDate); err != nil {
		return err
	}

	if err := validate.FormatOf("expectedDepartureDate", "body", "date", m.ExpectedDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validatePickupPostalCode(formats strfmt.Registry) error {

	if err := validate.Required("pickupPostalCode", "body", m.PickupPostalCode); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validateSitExpected(formats strfmt.Registry) error {

	if err := validate.Required("sitExpected", "body", m.SitExpected); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create p p m shipment based on context it is used
func (m *CreatePPMShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreatePPMShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreatePPMShipment) UnmarshalBinary(b []byte) error {
	var res CreatePPMShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
