// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/transcom/mymove/pkg/swagger/nullable"
)

// CreatePPMShipment A personally procured move is a type of shipment that a service members moves themselves.
//
// swagger:model CreatePPMShipment
type CreatePPMShipment struct {

	// destination address
	// Required: true
	DestinationAddress *Address `json:"destinationAddress"`

	// ZIP
	// Example: 90210
	// Required: true
	// Pattern: ^(\d{5})$
	DestinationPostalCode *string `json:"destinationPostalCode"`

	// Date the customer expects to move.
	//
	// Required: true
	// Format: date
	ExpectedDepartureDate *strfmt.Date `json:"expectedDepartureDate"`

	// has tertiary destination address
	HasTertiaryDestinationAddress *bool `json:"hasTertiaryDestinationAddress"`

	// has tertiary pickup address
	HasTertiaryPickupAddress *bool `json:"hasTertiaryPickupAddress"`

	// pickup address
	// Required: true
	PickupAddress *Address `json:"pickupAddress"`

	// ZIP
	//
	// zip code
	// Example: 90210
	// Required: true
	// Pattern: ^(\d{5})$
	PickupPostalCode *string `json:"pickupPostalCode"`

	// secondary destination address
	SecondaryDestinationAddress *Address `json:"secondaryDestinationAddress,omitempty"`

	// ZIP
	// Example: 90210
	SecondaryDestinationPostalCode nullable.String `json:"secondaryDestinationPostalCode,omitempty"`

	// secondary pickup address
	SecondaryPickupAddress *Address `json:"secondaryPickupAddress,omitempty"`

	// ZIP
	// Example: 90210
	SecondaryPickupPostalCode nullable.String `json:"secondaryPickupPostalCode,omitempty"`

	// sit expected
	// Required: true
	SitExpected *bool `json:"sitExpected"`

	// tertiary destination address
	TertiaryDestinationAddress *Address `json:"tertiaryDestinationAddress,omitempty"`

	// tertiary pickup address
	TertiaryPickupAddress *Address `json:"tertiaryPickupAddress,omitempty"`
}

// Validate validates this create p p m shipment
func (m *CreatePPMShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDestinationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryPickupPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitExpected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTertiaryDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTertiaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatePPMShipment) validateDestinationAddress(formats strfmt.Registry) error {

	if err := validate.Required("destinationAddress", "body", m.DestinationAddress); err != nil {
		return err
	}

	if m.DestinationAddress != nil {
		if err := m.DestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePPMShipment) validateDestinationPostalCode(formats strfmt.Registry) error {

	if err := validate.Required("destinationPostalCode", "body", m.DestinationPostalCode); err != nil {
		return err
	}

	if err := validate.Pattern("destinationPostalCode", "body", *m.DestinationPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validateExpectedDepartureDate(formats strfmt.Registry) error {

	if err := validate.Required("expectedDepartureDate", "body", m.ExpectedDepartureDate); err != nil {
		return err
	}

	if err := validate.FormatOf("expectedDepartureDate", "body", "date", m.ExpectedDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validatePickupAddress(formats strfmt.Registry) error {

	if err := validate.Required("pickupAddress", "body", m.PickupAddress); err != nil {
		return err
	}

	if m.PickupAddress != nil {
		if err := m.PickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePPMShipment) validatePickupPostalCode(formats strfmt.Registry) error {

	if err := validate.Required("pickupPostalCode", "body", m.PickupPostalCode); err != nil {
		return err
	}

	if err := validate.Pattern("pickupPostalCode", "body", *m.PickupPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validateSecondaryDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDestinationAddress) { // not required
		return nil
	}

	if m.SecondaryDestinationAddress != nil {
		if err := m.SecondaryDestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryDestinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryDestinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePPMShipment) validateSecondaryDestinationPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDestinationPostalCode) { // not required
		return nil
	}

	if err := m.SecondaryDestinationPostalCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secondaryDestinationPostalCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("secondaryDestinationPostalCode")
		}
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validateSecondaryPickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryPickupAddress) { // not required
		return nil
	}

	if m.SecondaryPickupAddress != nil {
		if err := m.SecondaryPickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePPMShipment) validateSecondaryPickupPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryPickupPostalCode) { // not required
		return nil
	}

	if err := m.SecondaryPickupPostalCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secondaryPickupPostalCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("secondaryPickupPostalCode")
		}
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validateSitExpected(formats strfmt.Registry) error {

	if err := validate.Required("sitExpected", "body", m.SitExpected); err != nil {
		return err
	}

	return nil
}

func (m *CreatePPMShipment) validateTertiaryDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.TertiaryDestinationAddress) { // not required
		return nil
	}

	if m.TertiaryDestinationAddress != nil {
		if err := m.TertiaryDestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tertiaryDestinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tertiaryDestinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePPMShipment) validateTertiaryPickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.TertiaryPickupAddress) { // not required
		return nil
	}

	if m.TertiaryPickupAddress != nil {
		if err := m.TertiaryPickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tertiaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tertiaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create p p m shipment based on the context it is used
func (m *CreatePPMShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryDestinationPostalCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryPickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryPickupPostalCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTertiaryDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTertiaryPickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatePPMShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationAddress != nil {

		if err := m.DestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePPMShipment) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.PickupAddress != nil {

		if err := m.PickupAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePPMShipment) contextValidateSecondaryDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryDestinationAddress != nil {

		if swag.IsZero(m.SecondaryDestinationAddress) { // not required
			return nil
		}

		if err := m.SecondaryDestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryDestinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryDestinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePPMShipment) contextValidateSecondaryDestinationPostalCode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SecondaryDestinationPostalCode) { // not required
		return nil
	}

	if err := m.SecondaryDestinationPostalCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secondaryDestinationPostalCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("secondaryDestinationPostalCode")
		}
		return err
	}

	return nil
}

func (m *CreatePPMShipment) contextValidateSecondaryPickupAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryPickupAddress != nil {

		if swag.IsZero(m.SecondaryPickupAddress) { // not required
			return nil
		}

		if err := m.SecondaryPickupAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePPMShipment) contextValidateSecondaryPickupPostalCode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SecondaryPickupPostalCode) { // not required
		return nil
	}

	if err := m.SecondaryPickupPostalCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secondaryPickupPostalCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("secondaryPickupPostalCode")
		}
		return err
	}

	return nil
}

func (m *CreatePPMShipment) contextValidateTertiaryDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.TertiaryDestinationAddress != nil {

		if swag.IsZero(m.TertiaryDestinationAddress) { // not required
			return nil
		}

		if err := m.TertiaryDestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tertiaryDestinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tertiaryDestinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePPMShipment) contextValidateTertiaryPickupAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.TertiaryPickupAddress != nil {

		if swag.IsZero(m.TertiaryPickupAddress) { // not required
			return nil
		}

		if err := m.TertiaryPickupAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tertiaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tertiaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreatePPMShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreatePPMShipment) UnmarshalBinary(b []byte) error {
	var res CreatePPMShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
