// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NullableSignedCertificationType nullable signed certification type
//
// swagger:model NullableSignedCertificationType
type NullableSignedCertificationType string

func NewNullableSignedCertificationType(value NullableSignedCertificationType) *NullableSignedCertificationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NullableSignedCertificationType.
func (m NullableSignedCertificationType) Pointer() *NullableSignedCertificationType {
	return &m
}

const (

	// NullableSignedCertificationTypePPMPAYMENT captures enum value "PPM_PAYMENT"
	NullableSignedCertificationTypePPMPAYMENT NullableSignedCertificationType = "PPM_PAYMENT"

	// NullableSignedCertificationTypeSHIPMENT captures enum value "SHIPMENT"
	NullableSignedCertificationTypeSHIPMENT NullableSignedCertificationType = "SHIPMENT"

	// NullableSignedCertificationTypePPM captures enum value "PPM"
	NullableSignedCertificationTypePPM NullableSignedCertificationType = "PPM"

	// NullableSignedCertificationTypeHHG captures enum value "HHG"
	NullableSignedCertificationTypeHHG NullableSignedCertificationType = "HHG"
)

// for schema
var nullableSignedCertificationTypeEnum []interface{}

func init() {
	var res []NullableSignedCertificationType
	if err := json.Unmarshal([]byte(`["PPM_PAYMENT","SHIPMENT","PPM","HHG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nullableSignedCertificationTypeEnum = append(nullableSignedCertificationTypeEnum, v)
	}
}

func (m NullableSignedCertificationType) validateNullableSignedCertificationTypeEnum(path, location string, value NullableSignedCertificationType) error {
	if err := validate.EnumCase(path, location, value, nullableSignedCertificationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this nullable signed certification type
func (m NullableSignedCertificationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNullableSignedCertificationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this nullable signed certification type based on context it is used
func (m NullableSignedCertificationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
