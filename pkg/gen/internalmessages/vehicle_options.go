// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// VehicleOptions Select weight ticket type
// swagger:model VehicleOptions
type VehicleOptions string

const (

	// VehicleOptionsCAR captures enum value "CAR"
	VehicleOptionsCAR VehicleOptions = "CAR"

	// VehicleOptionsCARTRAILER captures enum value "CAR_TRAILER"
	VehicleOptionsCARTRAILER VehicleOptions = "CAR_TRAILER"

	// VehicleOptionsBOXTRUCK captures enum value "BOX_TRUCK"
	VehicleOptionsBOXTRUCK VehicleOptions = "BOX_TRUCK"

	// VehicleOptionsPROGEAR captures enum value "PRO_GEAR"
	VehicleOptionsPROGEAR VehicleOptions = "PRO_GEAR"
)

// for schema
var vehicleOptionsEnum []interface{}

func init() {
	var res []VehicleOptions
	if err := json.Unmarshal([]byte(`["CAR","CAR_TRAILER","BOX_TRUCK","PRO_GEAR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vehicleOptionsEnum = append(vehicleOptionsEnum, v)
	}
}

func (m VehicleOptions) validateVehicleOptionsEnum(path, location string, value VehicleOptions) error {
	if err := validate.Enum(path, location, value, vehicleOptionsEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this vehicle options
func (m VehicleOptions) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVehicleOptionsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
