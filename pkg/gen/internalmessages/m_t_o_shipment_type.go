// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MTOShipmentType Shipment Type
// Example: HHG
//
// swagger:model MTOShipmentType
type MTOShipmentType string

func NewMTOShipmentType(value MTOShipmentType) *MTOShipmentType {
	v := value
	return &v
}

const (

	// MTOShipmentTypeHHG captures enum value "HHG"
	MTOShipmentTypeHHG MTOShipmentType = "HHG"

	// MTOShipmentTypeHHGLONGHAULDOMESTIC captures enum value "HHG_LONGHAUL_DOMESTIC"
	MTOShipmentTypeHHGLONGHAULDOMESTIC MTOShipmentType = "HHG_LONGHAUL_DOMESTIC"

	// MTOShipmentTypeHHGSHORTHAULDOMESTIC captures enum value "HHG_SHORTHAUL_DOMESTIC"
	MTOShipmentTypeHHGSHORTHAULDOMESTIC MTOShipmentType = "HHG_SHORTHAUL_DOMESTIC"

	// MTOShipmentTypeHHGINTONTSDOMESTIC captures enum value "HHG_INTO_NTS_DOMESTIC"
	MTOShipmentTypeHHGINTONTSDOMESTIC MTOShipmentType = "HHG_INTO_NTS_DOMESTIC"

	// MTOShipmentTypeHHGOUTOFNTSDOMESTIC captures enum value "HHG_OUTOF_NTS_DOMESTIC"
	MTOShipmentTypeHHGOUTOFNTSDOMESTIC MTOShipmentType = "HHG_OUTOF_NTS_DOMESTIC"
)

// for schema
var mTOShipmentTypeEnum []interface{}

func init() {
	var res []MTOShipmentType
	if err := json.Unmarshal([]byte(`["HHG","HHG_LONGHAUL_DOMESTIC","HHG_SHORTHAUL_DOMESTIC","HHG_INTO_NTS_DOMESTIC","HHG_OUTOF_NTS_DOMESTIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mTOShipmentTypeEnum = append(mTOShipmentTypeEnum, v)
	}
}

func (m MTOShipmentType) validateMTOShipmentTypeEnum(path, location string, value MTOShipmentType) error {
	if err := validate.EnumCase(path, location, value, mTOShipmentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this m t o shipment type
func (m MTOShipmentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMTOShipmentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this m t o shipment type based on context it is used
func (m MTOShipmentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
