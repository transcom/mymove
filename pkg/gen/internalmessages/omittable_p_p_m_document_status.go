// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OmittablePPMDocumentStatus Status of the PPM document.
//
// swagger:model OmittablePPMDocumentStatus
type OmittablePPMDocumentStatus string

func NewOmittablePPMDocumentStatus(value OmittablePPMDocumentStatus) *OmittablePPMDocumentStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OmittablePPMDocumentStatus.
func (m OmittablePPMDocumentStatus) Pointer() *OmittablePPMDocumentStatus {
	return &m
}

const (

	// OmittablePPMDocumentStatusAPPROVED captures enum value "APPROVED"
	OmittablePPMDocumentStatusAPPROVED OmittablePPMDocumentStatus = "APPROVED"

	// OmittablePPMDocumentStatusEXCLUDED captures enum value "EXCLUDED"
	OmittablePPMDocumentStatusEXCLUDED OmittablePPMDocumentStatus = "EXCLUDED"

	// OmittablePPMDocumentStatusREJECTED captures enum value "REJECTED"
	OmittablePPMDocumentStatusREJECTED OmittablePPMDocumentStatus = "REJECTED"
)

// for schema
var omittablePPMDocumentStatusEnum []interface{}

func init() {
	var res []OmittablePPMDocumentStatus
	if err := json.Unmarshal([]byte(`["APPROVED","EXCLUDED","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		omittablePPMDocumentStatusEnum = append(omittablePPMDocumentStatusEnum, v)
	}
}

func (m OmittablePPMDocumentStatus) validateOmittablePPMDocumentStatusEnum(path, location string, value OmittablePPMDocumentStatus) error {
	if err := validate.EnumCase(path, location, value, omittablePPMDocumentStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this omittable p p m document status
func (m OmittablePPMDocumentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOmittablePPMDocumentStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this omittable p p m document status based on context it is used
func (m OmittablePPMDocumentStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
