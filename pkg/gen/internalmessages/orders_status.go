// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrdersStatus Move status
//
// swagger:model OrdersStatus
type OrdersStatus string

func NewOrdersStatus(value OrdersStatus) *OrdersStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OrdersStatus.
func (m OrdersStatus) Pointer() *OrdersStatus {
	return &m
}

const (

	// OrdersStatusDRAFT captures enum value "DRAFT"
	OrdersStatusDRAFT OrdersStatus = "DRAFT"

	// OrdersStatusSUBMITTED captures enum value "SUBMITTED"
	OrdersStatusSUBMITTED OrdersStatus = "SUBMITTED"

	// OrdersStatusAPPROVED captures enum value "APPROVED"
	OrdersStatusAPPROVED OrdersStatus = "APPROVED"

	// OrdersStatusCANCELED captures enum value "CANCELED"
	OrdersStatusCANCELED OrdersStatus = "CANCELED"
)

// for schema
var ordersStatusEnum []interface{}

func init() {
	var res []OrdersStatus
	if err := json.Unmarshal([]byte(`["DRAFT","SUBMITTED","APPROVED","CANCELED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ordersStatusEnum = append(ordersStatusEnum, v)
	}
}

func (m OrdersStatus) validateOrdersStatusEnum(path, location string, value OrdersStatus) error {
	if err := validate.EnumCase(path, location, value, ordersStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this orders status
func (m OrdersStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrdersStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this orders status based on context it is used
func (m OrdersStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
