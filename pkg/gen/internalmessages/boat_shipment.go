// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BoatShipment boat shipment
//
// swagger:model BoatShipment
type BoatShipment struct {

	// Timestamp of when the Boat Shipment was initially created (UTC)
	// Required: true
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt"`

	// A hash unique to this shipment that should be used as the "If-Match" header for any updates.
	// Required: true
	// Read Only: true
	ETag string `json:"eTag"`

	// Does the boat have a trailer
	// Required: true
	HasTrailer *bool `json:"hasTrailer"`

	// Height of the Boat in inches
	// Required: true
	HeightInInches *int64 `json:"heightInInches"`

	// Primary auto-generated unique identifier of the Boat shipment object
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// Is the trailer roadworthy
	IsRoadworthy *bool `json:"isRoadworthy,omitempty"`

	// Length of the Boat in inches
	// Required: true
	LengthInInches *int64 `json:"lengthInInches"`

	// Make of the Boat
	// Required: true
	Make *string `json:"make"`

	// Model of the Boat
	// Required: true
	Model *string `json:"model"`

	// The id of the parent MTOShipment object
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Read Only: true
	// Format: uuid
	ShipmentID strfmt.UUID `json:"shipmentId"`

	// type
	// Required: true
	// Enum: [HAUL_AWAY TOW_AWAY]
	Type *string `json:"type"`

	// Timestamp of when a property of this object was last updated (UTC)
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// Width of the Boat in inches
	// Required: true
	WidthInInches *int64 `json:"widthInInches"`

	// Year of the Boat
	// Required: true
	Year *int64 `json:"year"`
}

// Validate validates this boat shipment
func (m *BoatShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateETag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasTrailer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeightInInches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLengthInInches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMake(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidthInInches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BoatShipment) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) validateETag(formats strfmt.Registry) error {

	if err := validate.RequiredString("eTag", "body", m.ETag); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) validateHasTrailer(formats strfmt.Registry) error {

	if err := validate.Required("hasTrailer", "body", m.HasTrailer); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) validateHeightInInches(formats strfmt.Registry) error {

	if err := validate.Required("heightInInches", "body", m.HeightInInches); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) validateLengthInInches(formats strfmt.Registry) error {

	if err := validate.Required("lengthInInches", "body", m.LengthInInches); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) validateMake(formats strfmt.Registry) error {

	if err := validate.Required("make", "body", m.Make); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) validateModel(formats strfmt.Registry) error {

	if err := validate.Required("model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", strfmt.UUID(m.ShipmentID)); err != nil {
		return err
	}

	if err := validate.FormatOf("shipmentId", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

var boatShipmentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HAUL_AWAY","TOW_AWAY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		boatShipmentTypeTypePropEnum = append(boatShipmentTypeTypePropEnum, v)
	}
}

const (

	// BoatShipmentTypeHAULAWAY captures enum value "HAUL_AWAY"
	BoatShipmentTypeHAULAWAY string = "HAUL_AWAY"

	// BoatShipmentTypeTOWAWAY captures enum value "TOW_AWAY"
	BoatShipmentTypeTOWAWAY string = "TOW_AWAY"
)

// prop value enum
func (m *BoatShipment) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, boatShipmentTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BoatShipment) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) validateWidthInInches(formats strfmt.Registry) error {

	if err := validate.Required("widthInInches", "body", m.WidthInInches); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this boat shipment based on the context it is used
func (m *BoatShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateETag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BoatShipment) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) contextValidateETag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eTag", "body", string(m.ETag)); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) contextValidateShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "shipmentId", "body", strfmt.UUID(m.ShipmentID)); err != nil {
		return err
	}

	return nil
}

func (m *BoatShipment) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BoatShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BoatShipment) UnmarshalBinary(b []byte) error {
	var res BoatShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
