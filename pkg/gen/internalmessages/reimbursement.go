// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Reimbursement reimbursement
//
// swagger:model Reimbursement
type Reimbursement struct {

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// method of receipt
	// Required: true
	MethodOfReceipt *MethodOfReceipt `json:"method_of_receipt"`

	// Requested Amount
	//
	// unit is cents
	// Required: true
	// Minimum: 1
	RequestedAmount *int64 `json:"requested_amount"`

	// Requested Date
	// Example: 2018-04-26
	// Format: date
	RequestedDate *strfmt.Date `json:"requested_date,omitempty"`

	// status
	Status *ReimbursementStatus `json:"status,omitempty"`
}

// Validate validates this reimbursement
func (m *Reimbursement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethodOfReceipt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Reimbursement) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Reimbursement) validateMethodOfReceipt(formats strfmt.Registry) error {

	if err := validate.Required("method_of_receipt", "body", m.MethodOfReceipt); err != nil {
		return err
	}

	if err := validate.Required("method_of_receipt", "body", m.MethodOfReceipt); err != nil {
		return err
	}

	if m.MethodOfReceipt != nil {
		if err := m.MethodOfReceipt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("method_of_receipt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("method_of_receipt")
			}
			return err
		}
	}

	return nil
}

func (m *Reimbursement) validateRequestedAmount(formats strfmt.Registry) error {

	if err := validate.Required("requested_amount", "body", m.RequestedAmount); err != nil {
		return err
	}

	if err := validate.MinimumInt("requested_amount", "body", *m.RequestedAmount, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Reimbursement) validateRequestedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requested_date", "body", "date", m.RequestedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Reimbursement) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this reimbursement based on the context it is used
func (m *Reimbursement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMethodOfReceipt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Reimbursement) contextValidateMethodOfReceipt(ctx context.Context, formats strfmt.Registry) error {

	if m.MethodOfReceipt != nil {

		if err := m.MethodOfReceipt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("method_of_receipt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("method_of_receipt")
			}
			return err
		}
	}

	return nil
}

func (m *Reimbursement) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Reimbursement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Reimbursement) UnmarshalBinary(b []byte) error {
	var res Reimbursement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
