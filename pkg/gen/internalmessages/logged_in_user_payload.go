// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoggedInUserPayload logged in user payload
//
// swagger:model LoggedInUserPayload
type LoggedInUserPayload struct {

	// email
	// Example: john_bob@example.com
	// Read Only: true
	// Pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
	Email string `json:"email,omitempty"`

	// first name
	// Example: John
	// Read Only: true
	FirstName string `json:"first_name,omitempty"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// office user
	OfficeUser *OfficeUser `json:"office_user,omitempty"`

	// permissions
	Permissions []string `json:"permissions"`

	// privileges
	Privileges []*Privilege `json:"privileges"`

	// roles
	Roles []*Role `json:"roles"`

	// service member
	ServiceMember *ServiceMemberPayload `json:"service_member,omitempty"`
}

// Validate validates this logged in user payload
func (m *LoggedInUserPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfficeUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivileges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoggedInUserPayload) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.Pattern("email", "body", m.Email, `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoggedInUserPayload) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LoggedInUserPayload) validateOfficeUser(formats strfmt.Registry) error {
	if swag.IsZero(m.OfficeUser) { // not required
		return nil
	}

	if m.OfficeUser != nil {
		if err := m.OfficeUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office_user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office_user")
			}
			return err
		}
	}

	return nil
}

func (m *LoggedInUserPayload) validatePrivileges(formats strfmt.Registry) error {
	if swag.IsZero(m.Privileges) { // not required
		return nil
	}

	for i := 0; i < len(m.Privileges); i++ {
		if swag.IsZero(m.Privileges[i]) { // not required
			continue
		}

		if m.Privileges[i] != nil {
			if err := m.Privileges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LoggedInUserPayload) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LoggedInUserPayload) validateServiceMember(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceMember) { // not required
		return nil
	}

	if m.ServiceMember != nil {
		if err := m.ServiceMember.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service_member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service_member")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this logged in user payload based on the context it is used
func (m *LoggedInUserPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirstName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfficeUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrivileges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoggedInUserPayload) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "email", "body", string(m.Email)); err != nil {
		return err
	}

	return nil
}

func (m *LoggedInUserPayload) contextValidateFirstName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "first_name", "body", string(m.FirstName)); err != nil {
		return err
	}

	return nil
}

func (m *LoggedInUserPayload) contextValidateOfficeUser(ctx context.Context, formats strfmt.Registry) error {

	if m.OfficeUser != nil {

		if swag.IsZero(m.OfficeUser) { // not required
			return nil
		}

		if err := m.OfficeUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office_user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office_user")
			}
			return err
		}
	}

	return nil
}

func (m *LoggedInUserPayload) contextValidatePrivileges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Privileges); i++ {

		if m.Privileges[i] != nil {

			if swag.IsZero(m.Privileges[i]) { // not required
				return nil
			}

			if err := m.Privileges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LoggedInUserPayload) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Roles); i++ {

		if m.Roles[i] != nil {

			if swag.IsZero(m.Roles[i]) { // not required
				return nil
			}

			if err := m.Roles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LoggedInUserPayload) contextValidateServiceMember(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceMember != nil {

		if swag.IsZero(m.ServiceMember) { // not required
			return nil
		}

		if err := m.ServiceMember.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service_member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service_member")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoggedInUserPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoggedInUserPayload) UnmarshalBinary(b []byte) error {
	var res LoggedInUserPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
