// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ZipCityLookup A postal code and city lookup
//
// swagger:model ZipCityLookup
type ZipCityLookup struct {

	// City
	// Example: Anytown
	City string `json:"city,omitempty"`

	// County
	// Example: LOS ANGELES
	County *string `json:"county,omitempty"`

	// ZIP
	// Example: 90210
	// Pattern: ^(\d{5}([\-]\d{4})?)$
	PostalCode string `json:"postalCode,omitempty"`

	// State
	// Enum: [AL AK AR AZ CA CO CT DC DE FL GA HI IA ID IL IN KS KY LA MA MD ME MI MN MO MS MT NC ND NE NH NJ NM NV NY OH OK OR PA RI SC SD TN TX UT VA VT WA WI WV WY]
	State string `json:"state,omitempty"`
}

// Validate validates this zip city lookup
func (m *ZipCityLookup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZipCityLookup) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("postalCode", "body", m.PostalCode, `^(\d{5}([\-]\d{4})?)$`); err != nil {
		return err
	}

	return nil
}

var zipCityLookupTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AL","AK","AR","AZ","CA","CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		zipCityLookupTypeStatePropEnum = append(zipCityLookupTypeStatePropEnum, v)
	}
}

const (

	// ZipCityLookupStateAL captures enum value "AL"
	ZipCityLookupStateAL string = "AL"

	// ZipCityLookupStateAK captures enum value "AK"
	ZipCityLookupStateAK string = "AK"

	// ZipCityLookupStateAR captures enum value "AR"
	ZipCityLookupStateAR string = "AR"

	// ZipCityLookupStateAZ captures enum value "AZ"
	ZipCityLookupStateAZ string = "AZ"

	// ZipCityLookupStateCA captures enum value "CA"
	ZipCityLookupStateCA string = "CA"

	// ZipCityLookupStateCO captures enum value "CO"
	ZipCityLookupStateCO string = "CO"

	// ZipCityLookupStateCT captures enum value "CT"
	ZipCityLookupStateCT string = "CT"

	// ZipCityLookupStateDC captures enum value "DC"
	ZipCityLookupStateDC string = "DC"

	// ZipCityLookupStateDE captures enum value "DE"
	ZipCityLookupStateDE string = "DE"

	// ZipCityLookupStateFL captures enum value "FL"
	ZipCityLookupStateFL string = "FL"

	// ZipCityLookupStateGA captures enum value "GA"
	ZipCityLookupStateGA string = "GA"

	// ZipCityLookupStateHI captures enum value "HI"
	ZipCityLookupStateHI string = "HI"

	// ZipCityLookupStateIA captures enum value "IA"
	ZipCityLookupStateIA string = "IA"

	// ZipCityLookupStateID captures enum value "ID"
	ZipCityLookupStateID string = "ID"

	// ZipCityLookupStateIL captures enum value "IL"
	ZipCityLookupStateIL string = "IL"

	// ZipCityLookupStateIN captures enum value "IN"
	ZipCityLookupStateIN string = "IN"

	// ZipCityLookupStateKS captures enum value "KS"
	ZipCityLookupStateKS string = "KS"

	// ZipCityLookupStateKY captures enum value "KY"
	ZipCityLookupStateKY string = "KY"

	// ZipCityLookupStateLA captures enum value "LA"
	ZipCityLookupStateLA string = "LA"

	// ZipCityLookupStateMA captures enum value "MA"
	ZipCityLookupStateMA string = "MA"

	// ZipCityLookupStateMD captures enum value "MD"
	ZipCityLookupStateMD string = "MD"

	// ZipCityLookupStateME captures enum value "ME"
	ZipCityLookupStateME string = "ME"

	// ZipCityLookupStateMI captures enum value "MI"
	ZipCityLookupStateMI string = "MI"

	// ZipCityLookupStateMN captures enum value "MN"
	ZipCityLookupStateMN string = "MN"

	// ZipCityLookupStateMO captures enum value "MO"
	ZipCityLookupStateMO string = "MO"

	// ZipCityLookupStateMS captures enum value "MS"
	ZipCityLookupStateMS string = "MS"

	// ZipCityLookupStateMT captures enum value "MT"
	ZipCityLookupStateMT string = "MT"

	// ZipCityLookupStateNC captures enum value "NC"
	ZipCityLookupStateNC string = "NC"

	// ZipCityLookupStateND captures enum value "ND"
	ZipCityLookupStateND string = "ND"

	// ZipCityLookupStateNE captures enum value "NE"
	ZipCityLookupStateNE string = "NE"

	// ZipCityLookupStateNH captures enum value "NH"
	ZipCityLookupStateNH string = "NH"

	// ZipCityLookupStateNJ captures enum value "NJ"
	ZipCityLookupStateNJ string = "NJ"

	// ZipCityLookupStateNM captures enum value "NM"
	ZipCityLookupStateNM string = "NM"

	// ZipCityLookupStateNV captures enum value "NV"
	ZipCityLookupStateNV string = "NV"

	// ZipCityLookupStateNY captures enum value "NY"
	ZipCityLookupStateNY string = "NY"

	// ZipCityLookupStateOH captures enum value "OH"
	ZipCityLookupStateOH string = "OH"

	// ZipCityLookupStateOK captures enum value "OK"
	ZipCityLookupStateOK string = "OK"

	// ZipCityLookupStateOR captures enum value "OR"
	ZipCityLookupStateOR string = "OR"

	// ZipCityLookupStatePA captures enum value "PA"
	ZipCityLookupStatePA string = "PA"

	// ZipCityLookupStateRI captures enum value "RI"
	ZipCityLookupStateRI string = "RI"

	// ZipCityLookupStateSC captures enum value "SC"
	ZipCityLookupStateSC string = "SC"

	// ZipCityLookupStateSD captures enum value "SD"
	ZipCityLookupStateSD string = "SD"

	// ZipCityLookupStateTN captures enum value "TN"
	ZipCityLookupStateTN string = "TN"

	// ZipCityLookupStateTX captures enum value "TX"
	ZipCityLookupStateTX string = "TX"

	// ZipCityLookupStateUT captures enum value "UT"
	ZipCityLookupStateUT string = "UT"

	// ZipCityLookupStateVA captures enum value "VA"
	ZipCityLookupStateVA string = "VA"

	// ZipCityLookupStateVT captures enum value "VT"
	ZipCityLookupStateVT string = "VT"

	// ZipCityLookupStateWA captures enum value "WA"
	ZipCityLookupStateWA string = "WA"

	// ZipCityLookupStateWI captures enum value "WI"
	ZipCityLookupStateWI string = "WI"

	// ZipCityLookupStateWV captures enum value "WV"
	ZipCityLookupStateWV string = "WV"

	// ZipCityLookupStateWY captures enum value "WY"
	ZipCityLookupStateWY string = "WY"
)

// prop value enum
func (m *ZipCityLookup) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, zipCityLookupTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ZipCityLookup) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this zip city lookup based on context it is used
func (m *ZipCityLookup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ZipCityLookup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZipCityLookup) UnmarshalBinary(b []byte) error {
	var res ZipCityLookup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
