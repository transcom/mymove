// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DutyLocationPayload duty location payload
//
// swagger:model DutyLocationPayload
type DutyLocationPayload struct {

	// address id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	AddressID *strfmt.UUID `json:"address_id"`

	// affiliation
	// Required: true
	Affiliation *Affiliation `json:"affiliation"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// name
	// Example: Fort Bragg North Station
	// Required: true
	Name *string `json:"name"`

	// transportation office id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	TransportationOfficeID *strfmt.UUID `json:"transportation_office_id,omitempty"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this duty location payload
func (m *DutyLocationPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportationOfficeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DutyLocationPayload) validateAddressID(formats strfmt.Registry) error {

	if err := validate.Required("address_id", "body", m.AddressID); err != nil {
		return err
	}

	if err := validate.FormatOf("address_id", "body", "uuid", m.AddressID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DutyLocationPayload) validateAffiliation(formats strfmt.Registry) error {

	if err := validate.Required("affiliation", "body", m.Affiliation); err != nil {
		return err
	}

	if err := validate.Required("affiliation", "body", m.Affiliation); err != nil {
		return err
	}

	if m.Affiliation != nil {
		if err := m.Affiliation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *DutyLocationPayload) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DutyLocationPayload) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DutyLocationPayload) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DutyLocationPayload) validateTransportationOfficeID(formats strfmt.Registry) error {
	if swag.IsZero(m.TransportationOfficeID) { // not required
		return nil
	}

	if err := validate.FormatOf("transportation_office_id", "body", "uuid", m.TransportationOfficeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DutyLocationPayload) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this duty location payload based on the context it is used
func (m *DutyLocationPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffiliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DutyLocationPayload) contextValidateAffiliation(ctx context.Context, formats strfmt.Registry) error {

	if m.Affiliation != nil {
		if err := m.Affiliation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DutyLocationPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DutyLocationPayload) UnmarshalBinary(b []byte) error {
	var res DutyLocationPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
