// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateUpdateOrders create update orders
//
// swagger:model CreateUpdateOrders
type CreateUpdateOrders struct {

	// department indicator
	DepartmentIndicator *DeptIndicator `json:"department_indicator,omitempty"`

	// grade
	Grade *OrderPayGrade `json:"grade,omitempty"`

	// Are dependents included in your orders?
	// Required: true
	HasDependents *bool `json:"has_dependents"`

	// Orders date
	//
	// The date and time that these orders were cut.
	// Example: 2018-04-26
	// Required: true
	// Format: date
	IssueDate *strfmt.Date `json:"issue_date"`

	// new duty location id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	NewDutyLocationID *strfmt.UUID `json:"new_duty_location_id"`

	// Orders Number
	// Example: 030-00362
	OrdersNumber *string `json:"orders_number,omitempty"`

	// orders type
	// Required: true
	OrdersType *OrdersType `json:"orders_type"`

	// orders type detail
	OrdersTypeDetail *OrdersTypeDetail `json:"orders_type_detail,omitempty"`

	// origin duty location id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	OriginDutyLocationID strfmt.UUID `json:"origin_duty_location_id,omitempty"`

	// Report-by date
	//
	// Report By Date
	// Example: 2018-04-26
	// Required: true
	// Format: date
	ReportByDate *strfmt.Date `json:"report_by_date"`

	// SAC
	// Example: N002214CSW32Y9
	Sac *string `json:"sac,omitempty"`

	// service member id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	ServiceMemberID *strfmt.UUID `json:"service_member_id"`

	// Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?
	// Required: true
	SpouseHasProGear *bool `json:"spouse_has_pro_gear"`

	// TAC
	// Example: F8J1
	Tac *string `json:"tac,omitempty"`
}

// Validate validates this create update orders
func (m *CreateUpdateOrders) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartmentIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasDependents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewDutyLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersTypeDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginDutyLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportByDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMemberID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpouseHasProGear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateUpdateOrders) validateDepartmentIndicator(formats strfmt.Registry) error {
	if swag.IsZero(m.DepartmentIndicator) { // not required
		return nil
	}

	if m.DepartmentIndicator != nil {
		if err := m.DepartmentIndicator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department_indicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("department_indicator")
			}
			return err
		}
	}

	return nil
}

func (m *CreateUpdateOrders) validateGrade(formats strfmt.Registry) error {
	if swag.IsZero(m.Grade) { // not required
		return nil
	}

	if m.Grade != nil {
		if err := m.Grade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grade")
			}
			return err
		}
	}

	return nil
}

func (m *CreateUpdateOrders) validateHasDependents(formats strfmt.Registry) error {

	if err := validate.Required("has_dependents", "body", m.HasDependents); err != nil {
		return err
	}

	return nil
}

func (m *CreateUpdateOrders) validateIssueDate(formats strfmt.Registry) error {

	if err := validate.Required("issue_date", "body", m.IssueDate); err != nil {
		return err
	}

	if err := validate.FormatOf("issue_date", "body", "date", m.IssueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateUpdateOrders) validateNewDutyLocationID(formats strfmt.Registry) error {

	if err := validate.Required("new_duty_location_id", "body", m.NewDutyLocationID); err != nil {
		return err
	}

	if err := validate.FormatOf("new_duty_location_id", "body", "uuid", m.NewDutyLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateUpdateOrders) validateOrdersType(formats strfmt.Registry) error {

	if err := validate.Required("orders_type", "body", m.OrdersType); err != nil {
		return err
	}

	if err := validate.Required("orders_type", "body", m.OrdersType); err != nil {
		return err
	}

	if m.OrdersType != nil {
		if err := m.OrdersType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orders_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orders_type")
			}
			return err
		}
	}

	return nil
}

func (m *CreateUpdateOrders) validateOrdersTypeDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdersTypeDetail) { // not required
		return nil
	}

	if m.OrdersTypeDetail != nil {
		if err := m.OrdersTypeDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orders_type_detail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orders_type_detail")
			}
			return err
		}
	}

	return nil
}

func (m *CreateUpdateOrders) validateOriginDutyLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginDutyLocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("origin_duty_location_id", "body", "uuid", m.OriginDutyLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateUpdateOrders) validateReportByDate(formats strfmt.Registry) error {

	if err := validate.Required("report_by_date", "body", m.ReportByDate); err != nil {
		return err
	}

	if err := validate.FormatOf("report_by_date", "body", "date", m.ReportByDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateUpdateOrders) validateServiceMemberID(formats strfmt.Registry) error {

	if err := validate.Required("service_member_id", "body", m.ServiceMemberID); err != nil {
		return err
	}

	if err := validate.FormatOf("service_member_id", "body", "uuid", m.ServiceMemberID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateUpdateOrders) validateSpouseHasProGear(formats strfmt.Registry) error {

	if err := validate.Required("spouse_has_pro_gear", "body", m.SpouseHasProGear); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create update orders based on the context it is used
func (m *CreateUpdateOrders) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDepartmentIndicator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrdersType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrdersTypeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateUpdateOrders) contextValidateDepartmentIndicator(ctx context.Context, formats strfmt.Registry) error {

	if m.DepartmentIndicator != nil {

		if swag.IsZero(m.DepartmentIndicator) { // not required
			return nil
		}

		if err := m.DepartmentIndicator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department_indicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("department_indicator")
			}
			return err
		}
	}

	return nil
}

func (m *CreateUpdateOrders) contextValidateGrade(ctx context.Context, formats strfmt.Registry) error {

	if m.Grade != nil {

		if swag.IsZero(m.Grade) { // not required
			return nil
		}

		if err := m.Grade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grade")
			}
			return err
		}
	}

	return nil
}

func (m *CreateUpdateOrders) contextValidateOrdersType(ctx context.Context, formats strfmt.Registry) error {

	if m.OrdersType != nil {

		if err := m.OrdersType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orders_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orders_type")
			}
			return err
		}
	}

	return nil
}

func (m *CreateUpdateOrders) contextValidateOrdersTypeDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.OrdersTypeDetail != nil {

		if swag.IsZero(m.OrdersTypeDetail) { // not required
			return nil
		}

		if err := m.OrdersTypeDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orders_type_detail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orders_type_detail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateUpdateOrders) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateUpdateOrders) UnmarshalBinary(b []byte) error {
	var res CreateUpdateOrders
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
