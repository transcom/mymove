// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessCode access code
//
// swagger:model AccessCode
type AccessCode struct {

	// when the access code was claimed or used
	// Example: 2018-04-12T23:20:50.52Z
	// Format: date-time
	ClaimedAt *strfmt.DateTime `json:"claimed_at,omitempty"`

	// code
	// Example: CODE456
	// Required: true
	Code *string `json:"code"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Selected Move Type
	// Required: true
	// Enum: [HHG PPM]
	MoveType *string `json:"move_type"`

	// service member id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	ServiceMemberID strfmt.UUID `json:"service_member_id,omitempty"`
}

// Validate validates this access code
func (m *AccessCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClaimedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMemberID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessCode) validateClaimedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ClaimedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("claimed_at", "body", "date-time", m.ClaimedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccessCode) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *AccessCode) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccessCode) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var accessCodeTypeMoveTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HHG","PPM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessCodeTypeMoveTypePropEnum = append(accessCodeTypeMoveTypePropEnum, v)
	}
}

const (

	// AccessCodeMoveTypeHHG captures enum value "HHG"
	AccessCodeMoveTypeHHG string = "HHG"

	// AccessCodeMoveTypePPM captures enum value "PPM"
	AccessCodeMoveTypePPM string = "PPM"
)

// prop value enum
func (m *AccessCode) validateMoveTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accessCodeTypeMoveTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccessCode) validateMoveType(formats strfmt.Registry) error {

	if err := validate.Required("move_type", "body", m.MoveType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMoveTypeEnum("move_type", "body", *m.MoveType); err != nil {
		return err
	}

	return nil
}

func (m *AccessCode) validateServiceMemberID(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceMemberID) { // not required
		return nil
	}

	if err := validate.FormatOf("service_member_id", "body", "uuid", m.ServiceMemberID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this access code based on context it is used
func (m *AccessCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccessCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessCode) UnmarshalBinary(b []byte) error {
	var res AccessCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
