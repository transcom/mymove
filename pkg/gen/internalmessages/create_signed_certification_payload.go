// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSignedCertificationPayload create signed certification payload
//
// swagger:model CreateSignedCertificationPayload
type CreateSignedCertificationPayload struct {

	// certification text
	// Required: true
	CertificationText *string `json:"certification_text"`

	// certification type
	CertificationType *SignedCertificationTypeCreate `json:"certification_type,omitempty"`

	// Date
	// Required: true
	// Format: date-time
	Date *strfmt.DateTime `json:"date"`

	// personally procured move id
	// Format: uuid
	PersonallyProcuredMoveID *strfmt.UUID `json:"personally_procured_move_id,omitempty"`

	// Signature
	// Required: true
	Signature *string `json:"signature"`
}

// Validate validates this create signed certification payload
func (m *CreateSignedCertificationPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificationText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonallyProcuredMoveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSignedCertificationPayload) validateCertificationText(formats strfmt.Registry) error {

	if err := validate.Required("certification_text", "body", m.CertificationText); err != nil {
		return err
	}

	return nil
}

func (m *CreateSignedCertificationPayload) validateCertificationType(formats strfmt.Registry) error {
	if swag.IsZero(m.CertificationType) { // not required
		return nil
	}

	if m.CertificationType != nil {
		if err := m.CertificationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certification_type")
			}
			return err
		}
	}

	return nil
}

func (m *CreateSignedCertificationPayload) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateSignedCertificationPayload) validatePersonallyProcuredMoveID(formats strfmt.Registry) error {
	if swag.IsZero(m.PersonallyProcuredMoveID) { // not required
		return nil
	}

	if err := validate.FormatOf("personally_procured_move_id", "body", "uuid", m.PersonallyProcuredMoveID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateSignedCertificationPayload) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create signed certification payload based on the context it is used
func (m *CreateSignedCertificationPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSignedCertificationPayload) contextValidateCertificationType(ctx context.Context, formats strfmt.Registry) error {

	if m.CertificationType != nil {
		if err := m.CertificationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certification_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateSignedCertificationPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSignedCertificationPayload) UnmarshalBinary(b []byte) error {
	var res CreateSignedCertificationPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
