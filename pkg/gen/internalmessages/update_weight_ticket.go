// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateWeightTicket update weight ticket
//
// swagger:model UpdateWeightTicket
type UpdateWeightTicket struct {

	// Indicates the adjusted net weight of the vehicle
	// Minimum: 0
	AdjustedNetWeight *int64 `json:"adjustedNetWeight,omitempty"`

	// Indicates the maximum reimbursable weight of the shipment
	// Minimum: 0
	AllowableWeight *int64 `json:"allowableWeight,omitempty"`

	// Weight of the vehicle when empty.
	// Minimum: 0
	EmptyWeight *int64 `json:"emptyWeight,omitempty"`

	// The weight of the vehicle when full.
	// Minimum: 0
	FullWeight *int64 `json:"fullWeight,omitempty"`

	// Indicates if the customer is missing a weight ticket for the vehicle weight when empty.
	MissingEmptyWeightTicket bool `json:"missingEmptyWeightTicket,omitempty"`

	// Indicates if the customer is missing a weight ticket for the vehicle weight when full.
	MissingFullWeightTicket bool `json:"missingFullWeightTicket,omitempty"`

	// Remarks explaining any edits made to the net weight
	NetWeightRemarks string `json:"netWeightRemarks,omitempty"`

	// Indicates if the customer used a trailer they own for the move.
	OwnsTrailer bool `json:"ownsTrailer,omitempty"`

	// Indicates if the trailer that the customer used meets all the criteria to be claimable.
	TrailerMeetsCriteria bool `json:"trailerMeetsCriteria,omitempty"`

	// Description of the vehicle used for the trip. E.g. make/model, type of truck/van, etc.
	VehicleDescription string `json:"vehicleDescription,omitempty"`
}

// Validate validates this update weight ticket
func (m *UpdateWeightTicket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustedNetWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllowableWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmptyWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateWeightTicket) validateAdjustedNetWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.AdjustedNetWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("adjustedNetWeight", "body", *m.AdjustedNetWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *UpdateWeightTicket) validateAllowableWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowableWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("allowableWeight", "body", *m.AllowableWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *UpdateWeightTicket) validateEmptyWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.EmptyWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("emptyWeight", "body", *m.EmptyWeight, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *UpdateWeightTicket) validateFullWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.FullWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("fullWeight", "body", *m.FullWeight, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update weight ticket based on context it is used
func (m *UpdateWeightTicket) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateWeightTicket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateWeightTicket) UnmarshalBinary(b []byte) error {
	var res UpdateWeightTicket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
