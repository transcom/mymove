// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExpenseSummaryPayload expense summary payload
//
// swagger:model ExpenseSummaryPayload
type ExpenseSummaryPayload struct {

	// categories
	Categories []*CategoryExpenseSummary `json:"categories"`

	// grand total
	GrandTotal *ExpenseSummaryPayloadGrandTotal `json:"grand_total,omitempty"`
}

// Validate validates this expense summary payload
func (m *ExpenseSummaryPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrandTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExpenseSummaryPayload) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	for i := 0; i < len(m.Categories); i++ {
		if swag.IsZero(m.Categories[i]) { // not required
			continue
		}

		if m.Categories[i] != nil {
			if err := m.Categories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExpenseSummaryPayload) validateGrandTotal(formats strfmt.Registry) error {

	if swag.IsZero(m.GrandTotal) { // not required
		return nil
	}

	if m.GrandTotal != nil {
		if err := m.GrandTotal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grand_total")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExpenseSummaryPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExpenseSummaryPayload) UnmarshalBinary(b []byte) error {
	var res ExpenseSummaryPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExpenseSummaryPayloadGrandTotal expense summary payload grand total
//
// swagger:model ExpenseSummaryPayloadGrandTotal
type ExpenseSummaryPayloadGrandTotal struct {

	// payment method totals
	PaymentMethodTotals *PaymentMethodsTotals `json:"payment_method_totals,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this expense summary payload grand total
func (m *ExpenseSummaryPayloadGrandTotal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentMethodTotals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExpenseSummaryPayloadGrandTotal) validatePaymentMethodTotals(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentMethodTotals) { // not required
		return nil
	}

	if m.PaymentMethodTotals != nil {
		if err := m.PaymentMethodTotals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grand_total" + "." + "payment_method_totals")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExpenseSummaryPayloadGrandTotal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExpenseSummaryPayloadGrandTotal) UnmarshalBinary(b []byte) error {
	var res ExpenseSummaryPayloadGrandTotal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
