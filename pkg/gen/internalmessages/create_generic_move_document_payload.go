// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateGenericMoveDocumentPayload create generic move document payload
//
// swagger:model CreateGenericMoveDocumentPayload
type CreateGenericMoveDocumentPayload struct {

	// move document type
	// Required: true
	MoveDocumentType *MoveDocumentType `json:"move_document_type"`

	// Notes
	// Example: This document is good to go!
	Notes *string `json:"notes,omitempty"`

	// personally procured move id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	PersonallyProcuredMoveID *strfmt.UUID `json:"personally_procured_move_id,omitempty"`

	// title
	// Example: very_useful_document.pdf
	// Required: true
	Title *string `json:"title"`

	// upload ids
	// Required: true
	UploadIds []strfmt.UUID `json:"upload_ids"`
}

// Validate validates this create generic move document payload
func (m *CreateGenericMoveDocumentPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMoveDocumentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonallyProcuredMoveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateGenericMoveDocumentPayload) validateMoveDocumentType(formats strfmt.Registry) error {

	if err := validate.Required("move_document_type", "body", m.MoveDocumentType); err != nil {
		return err
	}

	if err := validate.Required("move_document_type", "body", m.MoveDocumentType); err != nil {
		return err
	}

	if m.MoveDocumentType != nil {
		if err := m.MoveDocumentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("move_document_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("move_document_type")
			}
			return err
		}
	}

	return nil
}

func (m *CreateGenericMoveDocumentPayload) validatePersonallyProcuredMoveID(formats strfmt.Registry) error {
	if swag.IsZero(m.PersonallyProcuredMoveID) { // not required
		return nil
	}

	if err := validate.FormatOf("personally_procured_move_id", "body", "uuid", m.PersonallyProcuredMoveID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateGenericMoveDocumentPayload) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *CreateGenericMoveDocumentPayload) validateUploadIds(formats strfmt.Registry) error {

	if err := validate.Required("upload_ids", "body", m.UploadIds); err != nil {
		return err
	}

	for i := 0; i < len(m.UploadIds); i++ {

		if err := validate.FormatOf("upload_ids"+"."+strconv.Itoa(i), "body", "uuid", m.UploadIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this create generic move document payload based on the context it is used
func (m *CreateGenericMoveDocumentPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMoveDocumentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateGenericMoveDocumentPayload) contextValidateMoveDocumentType(ctx context.Context, formats strfmt.Registry) error {

	if m.MoveDocumentType != nil {

		if err := m.MoveDocumentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("move_document_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("move_document_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateGenericMoveDocumentPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateGenericMoveDocumentPayload) UnmarshalBinary(b []byte) error {
	var res CreateGenericMoveDocumentPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
