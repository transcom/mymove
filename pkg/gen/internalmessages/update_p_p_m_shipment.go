// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/transcom/mymove/pkg/swagger/nullable"
)

// UpdatePPMShipment update p p m shipment
//
// swagger:model UpdatePPMShipment
type UpdatePPMShipment struct {

	// ZIP
	//
	// The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.
	//
	// Example: 90210
	// Pattern: ^(\d{5})$
	ActualDestinationPostalCode *string `json:"actualDestinationPostalCode,omitempty"`

	// actual move date
	// Format: date
	ActualMoveDate *strfmt.Date `json:"actualMoveDate,omitempty"`

	// ZIP
	//
	// The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.
	//
	// Example: 90210
	// Pattern: ^(\d{5})$
	ActualPickupPostalCode *string `json:"actualPickupPostalCode,omitempty"`

	// The amount received for an advance, or null if no advance is received.
	//
	AdvanceAmountReceived *int64 `json:"advanceAmountReceived,omitempty"`

	// The amount requested for an advance, or null if no advance is requested
	//
	AdvanceAmountRequested *int64 `json:"advanceAmountRequested,omitempty"`

	// destination address
	DestinationAddress *Address `json:"destinationAddress,omitempty"`

	// ZIP
	// Example: 90210
	// Pattern: ^(\d{5})$
	DestinationPostalCode *string `json:"destinationPostalCode,omitempty"`

	// estimated weight
	// Example: 4200
	EstimatedWeight *int64 `json:"estimatedWeight,omitempty"`

	// Date the customer expects to move.
	//
	// Format: date
	ExpectedDepartureDate *strfmt.Date `json:"expectedDepartureDate,omitempty"`

	// The final calculated incentive for the PPM shipment. This does not include **SIT** as it is a reimbursement.
	//
	// Read Only: true
	FinalIncentive *int64 `json:"finalIncentive"`

	// Indicates whether PPM shipment has pro gear.
	//
	HasProGear *bool `json:"hasProGear,omitempty"`

	// Indicates whether an advance was received for the PPM shipment.
	//
	HasReceivedAdvance *bool `json:"hasReceivedAdvance,omitempty"`

	// Indicates whether an advance has been requested for the PPM shipment.
	//
	HasRequestedAdvance *bool `json:"hasRequestedAdvance,omitempty"`

	// has secondary destination address
	HasSecondaryDestinationAddress *bool `json:"hasSecondaryDestinationAddress"`

	// has secondary pickup address
	HasSecondaryPickupAddress *bool `json:"hasSecondaryPickupAddress"`

	// has tertiary destination address
	HasTertiaryDestinationAddress *bool `json:"hasTertiaryDestinationAddress"`

	// has tertiary pickup address
	HasTertiaryPickupAddress *bool `json:"hasTertiaryPickupAddress"`

	// pickup address
	PickupAddress *Address `json:"pickupAddress,omitempty"`

	// ZIP
	//
	// zip code
	// Example: 90210
	// Pattern: ^(\d{5})$
	PickupPostalCode *string `json:"pickupPostalCode,omitempty"`

	// pro gear weight
	ProGearWeight *int64 `json:"proGearWeight,omitempty"`

	// secondary destination address
	SecondaryDestinationAddress *Address `json:"secondaryDestinationAddress,omitempty"`

	// ZIP
	// Example: 90210
	SecondaryDestinationPostalCode nullable.String `json:"secondaryDestinationPostalCode,omitempty"`

	// secondary pickup address
	SecondaryPickupAddress *Address `json:"secondaryPickupAddress,omitempty"`

	// ZIP
	// Example: 90210
	SecondaryPickupPostalCode nullable.String `json:"secondaryPickupPostalCode,omitempty"`

	// sit expected
	SitExpected *bool `json:"sitExpected,omitempty"`

	// spouse pro gear weight
	SpouseProGearWeight *int64 `json:"spouseProGearWeight,omitempty"`

	// tertiary destination address
	TertiaryDestinationAddress *Address `json:"tertiaryDestinationAddress,omitempty"`

	// tertiary pickup address
	TertiaryPickupAddress *Address `json:"tertiaryPickupAddress,omitempty"`

	// w2 address
	W2Address *Address `json:"w2Address,omitempty"`
}

// Validate validates this update p p m shipment
func (m *UpdatePPMShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualDestinationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActualMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActualPickupPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDestinationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryPickupPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTertiaryDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTertiaryPickupAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateW2Address(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePPMShipment) validateActualDestinationPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualDestinationPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("actualDestinationPostalCode", "body", *m.ActualDestinationPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateActualMoveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualMoveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actualMoveDate", "body", "date", m.ActualMoveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateActualPickupPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualPickupPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("actualPickupPostalCode", "body", *m.ActualPickupPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	if m.DestinationAddress != nil {
		if err := m.DestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) validateDestinationPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("destinationPostalCode", "body", *m.DestinationPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateExpectedDepartureDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpectedDepartureDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expectedDepartureDate", "body", "date", m.ExpectedDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validatePickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupAddress) { // not required
		return nil
	}

	if m.PickupAddress != nil {
		if err := m.PickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) validatePickupPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("pickupPostalCode", "body", *m.PickupPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateSecondaryDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDestinationAddress) { // not required
		return nil
	}

	if m.SecondaryDestinationAddress != nil {
		if err := m.SecondaryDestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryDestinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryDestinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) validateSecondaryDestinationPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDestinationPostalCode) { // not required
		return nil
	}

	if err := m.SecondaryDestinationPostalCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secondaryDestinationPostalCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("secondaryDestinationPostalCode")
		}
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateSecondaryPickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryPickupAddress) { // not required
		return nil
	}

	if m.SecondaryPickupAddress != nil {
		if err := m.SecondaryPickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) validateSecondaryPickupPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryPickupPostalCode) { // not required
		return nil
	}

	if err := m.SecondaryPickupPostalCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secondaryPickupPostalCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("secondaryPickupPostalCode")
		}
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateTertiaryDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.TertiaryDestinationAddress) { // not required
		return nil
	}

	if m.TertiaryDestinationAddress != nil {
		if err := m.TertiaryDestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tertiaryDestinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tertiaryDestinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) validateTertiaryPickupAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.TertiaryPickupAddress) { // not required
		return nil
	}

	if m.TertiaryPickupAddress != nil {
		if err := m.TertiaryPickupAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tertiaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tertiaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) validateW2Address(formats strfmt.Registry) error {
	if swag.IsZero(m.W2Address) { // not required
		return nil
	}

	if m.W2Address != nil {
		if err := m.W2Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("w2Address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("w2Address")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update p p m shipment based on the context it is used
func (m *UpdatePPMShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFinalIncentive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryDestinationPostalCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryPickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryPickupPostalCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTertiaryDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTertiaryPickupAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateW2Address(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePPMShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationAddress != nil {

		if swag.IsZero(m.DestinationAddress) { // not required
			return nil
		}

		if err := m.DestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) contextValidateFinalIncentive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "finalIncentive", "body", m.FinalIncentive); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) contextValidatePickupAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.PickupAddress != nil {

		if swag.IsZero(m.PickupAddress) { // not required
			return nil
		}

		if err := m.PickupAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) contextValidateSecondaryDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryDestinationAddress != nil {

		if swag.IsZero(m.SecondaryDestinationAddress) { // not required
			return nil
		}

		if err := m.SecondaryDestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryDestinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryDestinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) contextValidateSecondaryDestinationPostalCode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SecondaryDestinationPostalCode) { // not required
		return nil
	}

	if err := m.SecondaryDestinationPostalCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secondaryDestinationPostalCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("secondaryDestinationPostalCode")
		}
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) contextValidateSecondaryPickupAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryPickupAddress != nil {

		if swag.IsZero(m.SecondaryPickupAddress) { // not required
			return nil
		}

		if err := m.SecondaryPickupAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) contextValidateSecondaryPickupPostalCode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SecondaryPickupPostalCode) { // not required
		return nil
	}

	if err := m.SecondaryPickupPostalCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secondaryPickupPostalCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("secondaryPickupPostalCode")
		}
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) contextValidateTertiaryDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.TertiaryDestinationAddress != nil {

		if swag.IsZero(m.TertiaryDestinationAddress) { // not required
			return nil
		}

		if err := m.TertiaryDestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tertiaryDestinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tertiaryDestinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) contextValidateTertiaryPickupAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.TertiaryPickupAddress != nil {

		if swag.IsZero(m.TertiaryPickupAddress) { // not required
			return nil
		}

		if err := m.TertiaryPickupAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tertiaryPickupAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tertiaryPickupAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePPMShipment) contextValidateW2Address(ctx context.Context, formats strfmt.Registry) error {

	if m.W2Address != nil {

		if swag.IsZero(m.W2Address) { // not required
			return nil
		}

		if err := m.W2Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("w2Address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("w2Address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdatePPMShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatePPMShipment) UnmarshalBinary(b []byte) error {
	var res UpdatePPMShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
