// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatePPMShipment update p p m shipment
//
// swagger:model UpdatePPMShipment
type UpdatePPMShipment struct {

	// ZIP
	//
	// The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.
	//
	// Example: 90210
	// Pattern: ^(\d{5})$
	ActualDestinationPostalCode *string `json:"actualDestinationPostalCode,omitempty"`

	// actual move date
	// Format: date
	ActualMoveDate *strfmt.Date `json:"actualMoveDate,omitempty"`

	// ZIP
	//
	// The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.
	//
	// Example: 90210
	// Pattern: ^(\d{5})$
	ActualPickupPostalCode *string `json:"actualPickupPostalCode,omitempty"`

	// The amount requested for an advance, or null if no advance is requested
	//
	Advance *int64 `json:"advance,omitempty"`

	// The amount received for an advance, or null if no advance is received.
	//
	AdvanceAmountReceived *int64 `json:"advanceAmountReceived,omitempty"`

	// Indicates whether an advance has been requested for the PPM shipment.
	//
	AdvanceRequested *bool `json:"advanceRequested,omitempty"`

	// ZIP
	// Example: 90210
	// Pattern: ^(\d{5})$
	DestinationPostalCode *string `json:"destinationPostalCode,omitempty"`

	// estimated incentive
	EstimatedIncentive *int64 `json:"estimatedIncentive,omitempty"`

	// estimated weight
	// Example: 4200
	EstimatedWeight *int64 `json:"estimatedWeight,omitempty"`

	// Date the customer expects to move.
	//
	// Format: date
	ExpectedDepartureDate *strfmt.Date `json:"expectedDepartureDate,omitempty"`

	// Indicates whether PPM shipment has pro gear.
	//
	HasProGear *bool `json:"hasProGear,omitempty"`

	// Indicates whether an advance was received for the PPM shipment.
	//
	HasReceivedAdvance *bool `json:"hasReceivedAdvance,omitempty"`

	// The net weight of the shipment once it has been weight
	//
	// Example: 4300
	NetWeight *int64 `json:"netWeight,omitempty"`

	// ZIP
	//
	// zip code
	// Example: 90210
	// Pattern: ^(\d{5})$
	PickupPostalCode *string `json:"pickupPostalCode,omitempty"`

	// pro gear weight
	ProGearWeight *int64 `json:"proGearWeight,omitempty"`

	// ZIP
	// Example: 90210
	// Pattern: ^(\d{5})$
	SecondaryDestinationPostalCode *string `json:"secondaryDestinationPostalCode,omitempty"`

	// ZIP
	// Example: 90210
	// Pattern: ^(\d{5})$
	SecondaryPickupPostalCode *string `json:"secondaryPickupPostalCode,omitempty"`

	// sit expected
	SitExpected *bool `json:"sitExpected,omitempty"`

	// spouse pro gear weight
	SpouseProGearWeight *int64 `json:"spouseProGearWeight,omitempty"`
}

// Validate validates this update p p m shipment
func (m *UpdatePPMShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualDestinationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActualMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActualPickupPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDestinationPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryPickupPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePPMShipment) validateActualDestinationPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualDestinationPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("actualDestinationPostalCode", "body", *m.ActualDestinationPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateActualMoveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualMoveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actualMoveDate", "body", "date", m.ActualMoveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateActualPickupPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualPickupPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("actualPickupPostalCode", "body", *m.ActualPickupPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateDestinationPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("destinationPostalCode", "body", *m.DestinationPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateExpectedDepartureDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpectedDepartureDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expectedDepartureDate", "body", "date", m.ExpectedDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validatePickupPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("pickupPostalCode", "body", *m.PickupPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateSecondaryDestinationPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDestinationPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("secondaryDestinationPostalCode", "body", *m.SecondaryDestinationPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateSecondaryPickupPostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryPickupPostalCode) { // not required
		return nil
	}

	if err := validate.Pattern("secondaryPickupPostalCode", "body", *m.SecondaryPickupPostalCode, `^(\d{5})$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update p p m shipment based on context it is used
func (m *UpdatePPMShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdatePPMShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatePPMShipment) UnmarshalBinary(b []byte) error {
	var res UpdatePPMShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
