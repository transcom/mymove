// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatePPMShipment update p p m shipment
//
// swagger:model UpdatePPMShipment
type UpdatePPMShipment struct {

	// actual move date
	// Format: date
	ActualMoveDate strfmt.Date `json:"actualMoveDate,omitempty"`

	// approved at
	// Format: date-time
	ApprovedAt strfmt.DateTime `json:"approvedAt,omitempty"`

	// ZIP
	// Example: '90210' or 'N15 3NL'
	DestinationPostalCode string `json:"destinationPostalCode,omitempty"`

	// estimated incentive
	EstimatedIncentive int64 `json:"estimatedIncentive,omitempty"`

	// estimated weight
	// Example: 4200
	EstimatedWeight int64 `json:"estimatedWeight,omitempty"`

	// Date the customer expects to move.
	//
	// Format: date
	ExpectedDepartureDate strfmt.Date `json:"expectedDepartureDate,omitempty"`

	// Indicates whether PPM shipment has pro gear.
	//
	HasProGear bool `json:"hasProGear,omitempty"`

	// id
	// Example: 1f2270c7-7166-40ae-981e-b200ebdf3054
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// The net weight of the shipment once it has been weight
	//
	// Example: 4300
	NetWeight int64 `json:"netWeight,omitempty"`

	// ZIP
	//
	// zip code, international allowed
	// Example: '90210' or 'N15 3NL'
	PickupPostalCode string `json:"pickupPostalCode,omitempty"`

	// pro gear weight
	ProGearWeight int64 `json:"proGearWeight,omitempty"`

	// reviewed at
	// Format: date-time
	ReviewedAt strfmt.DateTime `json:"reviewedAt,omitempty"`

	// ZIP
	// Example: '90210' or 'N15 3NL'
	SecondaryDestinationPostalCode string `json:"secondaryDestinationPostalCode,omitempty"`

	// ZIP
	// Example: '90210' or 'N15 3NL'
	SecondaryPickupPostalCode string `json:"secondaryPickupPostalCode,omitempty"`

	// sit expected
	SitExpected bool `json:"sitExpected,omitempty"`

	// spouse pro gear weight
	SpouseProGearWeight int64 `json:"spouseProGearWeight,omitempty"`

	// submitted at
	// Format: date-time
	SubmittedAt strfmt.DateTime `json:"submittedAt,omitempty"`
}

// Validate validates this update p p m shipment
func (m *UpdatePPMShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprovedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedDepartureDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReviewedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePPMShipment) validateActualMoveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualMoveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actualMoveDate", "body", "date", m.ActualMoveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateApprovedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("approvedAt", "body", "date-time", m.ApprovedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateExpectedDepartureDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpectedDepartureDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expectedDepartureDate", "body", "date", m.ExpectedDepartureDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateReviewedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ReviewedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("reviewedAt", "body", "date-time", m.ReviewedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePPMShipment) validateSubmittedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmittedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("submittedAt", "body", "date-time", m.SubmittedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update p p m shipment based on context it is used
func (m *UpdatePPMShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdatePPMShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatePPMShipment) UnmarshalBinary(b []byte) error {
	var res UpdatePPMShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
