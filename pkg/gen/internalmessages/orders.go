// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Orders orders
//
// swagger:model Orders
type Orders struct {

	// authorized weight
	// Example: 7000
	AuthorizedWeight *int64 `json:"authorizedWeight,omitempty"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// department indicator
	DepartmentIndicator *DeptIndicator `json:"department_indicator,omitempty"`

	// entitlement
	Entitlement *Entitlement `json:"entitlement,omitempty"`

	// grade
	Grade *OrderPayGrade `json:"grade,omitempty"`

	// Are dependents included in your orders?
	// Required: true
	HasDependents *bool `json:"has_dependents"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Date issued
	//
	// The date and time that these orders were cut.
	// Example: 2018-04-26
	// Required: true
	// Format: date
	IssueDate *strfmt.Date `json:"issue_date"`

	// moves
	Moves IndexMovesPayload `json:"moves,omitempty"`

	// new duty location
	// Required: true
	NewDutyLocation *DutyLocationPayload `json:"new_duty_location"`

	// Orders Number
	// Example: 030-00362
	OrdersNumber *string `json:"orders_number,omitempty"`

	// orders type
	// Required: true
	OrdersType *OrdersType `json:"orders_type"`

	// orders type detail
	OrdersTypeDetail *OrdersTypeDetail `json:"orders_type_detail,omitempty"`

	// From what GBLOC do your orders originate?
	OriginDutyLocationGbloc *string `json:"originDutyLocationGbloc,omitempty"`

	// origin duty location
	OriginDutyLocation *DutyLocationPayload `json:"origin_duty_location,omitempty"`

	// provides services counseling
	ProvidesServicesCounseling bool `json:"providesServicesCounseling"`

	// Report by
	//
	// Report By Date
	// Example: 2018-04-26
	// Required: true
	// Format: date
	ReportByDate *strfmt.Date `json:"report_by_date"`

	// SAC
	// Example: N002214CSW32Y9
	Sac *string `json:"sac,omitempty"`

	// service member id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	ServiceMemberID *strfmt.UUID `json:"service_member_id"`

	// Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?
	// Required: true
	SpouseHasProGear *bool `json:"spouse_has_pro_gear"`

	// status
	Status OrdersStatus `json:"status,omitempty"`

	// TAC
	// Example: F8J1
	Tac *string `json:"tac,omitempty"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// uploaded amended orders
	UploadedAmendedOrders *Document `json:"uploaded_amended_orders,omitempty"`

	// uploaded amended orders id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	UploadedAmendedOrdersID strfmt.UUID `json:"uploaded_amended_orders_id,omitempty"`

	// uploaded orders
	// Required: true
	UploadedOrders *Document `json:"uploaded_orders"`
}

// Validate validates this orders
func (m *Orders) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartmentIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntitlement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasDependents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoves(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewDutyLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersTypeDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginDutyLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportByDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMemberID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpouseHasProGear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadedAmendedOrders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadedAmendedOrdersID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadedOrders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Orders) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Orders) validateDepartmentIndicator(formats strfmt.Registry) error {
	if swag.IsZero(m.DepartmentIndicator) { // not required
		return nil
	}

	if m.DepartmentIndicator != nil {
		if err := m.DepartmentIndicator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department_indicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("department_indicator")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) validateEntitlement(formats strfmt.Registry) error {
	if swag.IsZero(m.Entitlement) { // not required
		return nil
	}

	if m.Entitlement != nil {
		if err := m.Entitlement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entitlement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entitlement")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) validateGrade(formats strfmt.Registry) error {
	if swag.IsZero(m.Grade) { // not required
		return nil
	}

	if m.Grade != nil {
		if err := m.Grade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grade")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) validateHasDependents(formats strfmt.Registry) error {

	if err := validate.Required("has_dependents", "body", m.HasDependents); err != nil {
		return err
	}

	return nil
}

func (m *Orders) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Orders) validateIssueDate(formats strfmt.Registry) error {

	if err := validate.Required("issue_date", "body", m.IssueDate); err != nil {
		return err
	}

	if err := validate.FormatOf("issue_date", "body", "date", m.IssueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Orders) validateMoves(formats strfmt.Registry) error {
	if swag.IsZero(m.Moves) { // not required
		return nil
	}

	if err := m.Moves.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("moves")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("moves")
		}
		return err
	}

	return nil
}

func (m *Orders) validateNewDutyLocation(formats strfmt.Registry) error {

	if err := validate.Required("new_duty_location", "body", m.NewDutyLocation); err != nil {
		return err
	}

	if m.NewDutyLocation != nil {
		if err := m.NewDutyLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_duty_location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("new_duty_location")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) validateOrdersType(formats strfmt.Registry) error {

	if err := validate.Required("orders_type", "body", m.OrdersType); err != nil {
		return err
	}

	if err := validate.Required("orders_type", "body", m.OrdersType); err != nil {
		return err
	}

	if m.OrdersType != nil {
		if err := m.OrdersType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orders_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orders_type")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) validateOrdersTypeDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdersTypeDetail) { // not required
		return nil
	}

	if m.OrdersTypeDetail != nil {
		if err := m.OrdersTypeDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orders_type_detail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orders_type_detail")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) validateOriginDutyLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginDutyLocation) { // not required
		return nil
	}

	if m.OriginDutyLocation != nil {
		if err := m.OriginDutyLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin_duty_location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin_duty_location")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) validateReportByDate(formats strfmt.Registry) error {

	if err := validate.Required("report_by_date", "body", m.ReportByDate); err != nil {
		return err
	}

	if err := validate.FormatOf("report_by_date", "body", "date", m.ReportByDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Orders) validateServiceMemberID(formats strfmt.Registry) error {

	if err := validate.Required("service_member_id", "body", m.ServiceMemberID); err != nil {
		return err
	}

	if err := validate.FormatOf("service_member_id", "body", "uuid", m.ServiceMemberID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Orders) validateSpouseHasProGear(formats strfmt.Registry) error {

	if err := validate.Required("spouse_has_pro_gear", "body", m.SpouseHasProGear); err != nil {
		return err
	}

	return nil
}

func (m *Orders) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *Orders) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Orders) validateUploadedAmendedOrders(formats strfmt.Registry) error {
	if swag.IsZero(m.UploadedAmendedOrders) { // not required
		return nil
	}

	if m.UploadedAmendedOrders != nil {
		if err := m.UploadedAmendedOrders.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uploaded_amended_orders")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uploaded_amended_orders")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) validateUploadedAmendedOrdersID(formats strfmt.Registry) error {
	if swag.IsZero(m.UploadedAmendedOrdersID) { // not required
		return nil
	}

	if err := validate.FormatOf("uploaded_amended_orders_id", "body", "uuid", m.UploadedAmendedOrdersID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Orders) validateUploadedOrders(formats strfmt.Registry) error {

	if err := validate.Required("uploaded_orders", "body", m.UploadedOrders); err != nil {
		return err
	}

	if m.UploadedOrders != nil {
		if err := m.UploadedOrders.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uploaded_orders")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uploaded_orders")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this orders based on the context it is used
func (m *Orders) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDepartmentIndicator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntitlement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMoves(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewDutyLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrdersType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrdersTypeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginDutyLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUploadedAmendedOrders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUploadedOrders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Orders) contextValidateDepartmentIndicator(ctx context.Context, formats strfmt.Registry) error {

	if m.DepartmentIndicator != nil {

		if swag.IsZero(m.DepartmentIndicator) { // not required
			return nil
		}

		if err := m.DepartmentIndicator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department_indicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("department_indicator")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) contextValidateEntitlement(ctx context.Context, formats strfmt.Registry) error {

	if m.Entitlement != nil {

		if swag.IsZero(m.Entitlement) { // not required
			return nil
		}

		if err := m.Entitlement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entitlement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entitlement")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) contextValidateGrade(ctx context.Context, formats strfmt.Registry) error {

	if m.Grade != nil {

		if swag.IsZero(m.Grade) { // not required
			return nil
		}

		if err := m.Grade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grade")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) contextValidateMoves(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Moves.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("moves")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("moves")
		}
		return err
	}

	return nil
}

func (m *Orders) contextValidateNewDutyLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.NewDutyLocation != nil {

		if err := m.NewDutyLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_duty_location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("new_duty_location")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) contextValidateOrdersType(ctx context.Context, formats strfmt.Registry) error {

	if m.OrdersType != nil {

		if err := m.OrdersType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orders_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orders_type")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) contextValidateOrdersTypeDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.OrdersTypeDetail != nil {

		if swag.IsZero(m.OrdersTypeDetail) { // not required
			return nil
		}

		if err := m.OrdersTypeDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orders_type_detail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orders_type_detail")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) contextValidateOriginDutyLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginDutyLocation != nil {

		if swag.IsZero(m.OriginDutyLocation) { // not required
			return nil
		}

		if err := m.OriginDutyLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin_duty_location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin_duty_location")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *Orders) contextValidateUploadedAmendedOrders(ctx context.Context, formats strfmt.Registry) error {

	if m.UploadedAmendedOrders != nil {

		if swag.IsZero(m.UploadedAmendedOrders) { // not required
			return nil
		}

		if err := m.UploadedAmendedOrders.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uploaded_amended_orders")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uploaded_amended_orders")
			}
			return err
		}
	}

	return nil
}

func (m *Orders) contextValidateUploadedOrders(ctx context.Context, formats strfmt.Registry) error {

	if m.UploadedOrders != nil {

		if err := m.UploadedOrders.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uploaded_orders")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uploaded_orders")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Orders) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Orders) UnmarshalBinary(b []byte) error {
	var res Orders
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
