// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMovingExpenseDocumentPayload create moving expense document payload
//
// swagger:model CreateMovingExpenseDocumentPayload
type CreateMovingExpenseDocumentPayload struct {

	// move document type
	// Required: true
	MoveDocumentType MoveDocumentType `json:"move_document_type"`

	// moving expense type
	// Required: true
	MovingExpenseType MovingExpenseType `json:"moving_expense_type"`

	// Notes
	Notes *string `json:"notes,omitempty"`

	// Method of Payment
	// Required: true
	// Enum: [OTHER GTCC]
	PaymentMethod *string `json:"payment_method"`

	// personally procured move id
	// Format: uuid
	PersonallyProcuredMoveID *strfmt.UUID `json:"personally_procured_move_id,omitempty"`

	// missing expense receipt
	ReceiptMissing bool `json:"receipt_missing,omitempty"`

	// Requested Amount
	//
	// unit is cents
	// Required: true
	// Minimum: 1
	RequestedAmountCents *int64 `json:"requested_amount_cents"`

	// End date of storage for storage expenses
	// Format: date
	StorageEndDate *strfmt.Date `json:"storage_end_date,omitempty"`

	// Start date of storage for storage expenses
	// Format: date
	StorageStartDate *strfmt.Date `json:"storage_start_date,omitempty"`

	// title
	// Required: true
	Title *string `json:"title"`

	// upload ids
	UploadIds []strfmt.UUID `json:"upload_ids"`
}

// Validate validates this create moving expense document payload
func (m *CreateMovingExpenseDocumentPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMoveDocumentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMovingExpenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonallyProcuredMoveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedAmountCents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMovingExpenseDocumentPayload) validateMoveDocumentType(formats strfmt.Registry) error {

	if err := m.MoveDocumentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("move_document_type")
		}
		return err
	}

	return nil
}

func (m *CreateMovingExpenseDocumentPayload) validateMovingExpenseType(formats strfmt.Registry) error {

	if err := m.MovingExpenseType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("moving_expense_type")
		}
		return err
	}

	return nil
}

var createMovingExpenseDocumentPayloadTypePaymentMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OTHER","GTCC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createMovingExpenseDocumentPayloadTypePaymentMethodPropEnum = append(createMovingExpenseDocumentPayloadTypePaymentMethodPropEnum, v)
	}
}

const (

	// CreateMovingExpenseDocumentPayloadPaymentMethodOTHER captures enum value "OTHER"
	CreateMovingExpenseDocumentPayloadPaymentMethodOTHER string = "OTHER"

	// CreateMovingExpenseDocumentPayloadPaymentMethodGTCC captures enum value "GTCC"
	CreateMovingExpenseDocumentPayloadPaymentMethodGTCC string = "GTCC"
)

// prop value enum
func (m *CreateMovingExpenseDocumentPayload) validatePaymentMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createMovingExpenseDocumentPayloadTypePaymentMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateMovingExpenseDocumentPayload) validatePaymentMethod(formats strfmt.Registry) error {

	if err := validate.Required("payment_method", "body", m.PaymentMethod); err != nil {
		return err
	}

	// value enum
	if err := m.validatePaymentMethodEnum("payment_method", "body", *m.PaymentMethod); err != nil {
		return err
	}

	return nil
}

func (m *CreateMovingExpenseDocumentPayload) validatePersonallyProcuredMoveID(formats strfmt.Registry) error {

	if swag.IsZero(m.PersonallyProcuredMoveID) { // not required
		return nil
	}

	if err := validate.FormatOf("personally_procured_move_id", "body", "uuid", m.PersonallyProcuredMoveID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateMovingExpenseDocumentPayload) validateRequestedAmountCents(formats strfmt.Registry) error {

	if err := validate.Required("requested_amount_cents", "body", m.RequestedAmountCents); err != nil {
		return err
	}

	if err := validate.MinimumInt("requested_amount_cents", "body", int64(*m.RequestedAmountCents), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateMovingExpenseDocumentPayload) validateStorageEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("storage_end_date", "body", "date", m.StorageEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateMovingExpenseDocumentPayload) validateStorageStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("storage_start_date", "body", "date", m.StorageStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateMovingExpenseDocumentPayload) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *CreateMovingExpenseDocumentPayload) validateUploadIds(formats strfmt.Registry) error {

	if swag.IsZero(m.UploadIds) { // not required
		return nil
	}

	for i := 0; i < len(m.UploadIds); i++ {

		if err := validate.FormatOf("upload_ids"+"."+strconv.Itoa(i), "body", "uuid", m.UploadIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMovingExpenseDocumentPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMovingExpenseDocumentPayload) UnmarshalBinary(b []byte) error {
	var res CreateMovingExpenseDocumentPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
