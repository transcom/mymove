// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReimbursementStatus Reimbursement
//
// swagger:model ReimbursementStatus
type ReimbursementStatus string

func NewReimbursementStatus(value ReimbursementStatus) *ReimbursementStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ReimbursementStatus.
func (m ReimbursementStatus) Pointer() *ReimbursementStatus {
	return &m
}

const (

	// ReimbursementStatusDRAFT captures enum value "DRAFT"
	ReimbursementStatusDRAFT ReimbursementStatus = "DRAFT"

	// ReimbursementStatusREQUESTED captures enum value "REQUESTED"
	ReimbursementStatusREQUESTED ReimbursementStatus = "REQUESTED"

	// ReimbursementStatusAPPROVED captures enum value "APPROVED"
	ReimbursementStatusAPPROVED ReimbursementStatus = "APPROVED"

	// ReimbursementStatusREJECTED captures enum value "REJECTED"
	ReimbursementStatusREJECTED ReimbursementStatus = "REJECTED"

	// ReimbursementStatusPAID captures enum value "PAID"
	ReimbursementStatusPAID ReimbursementStatus = "PAID"
)

// for schema
var reimbursementStatusEnum []interface{}

func init() {
	var res []ReimbursementStatus
	if err := json.Unmarshal([]byte(`["DRAFT","REQUESTED","APPROVED","REJECTED","PAID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reimbursementStatusEnum = append(reimbursementStatusEnum, v)
	}
}

func (m ReimbursementStatus) validateReimbursementStatusEnum(path, location string, value ReimbursementStatus) error {
	if err := validate.EnumCase(path, location, value, reimbursementStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this reimbursement status
func (m ReimbursementStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReimbursementStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this reimbursement status based on context it is used
func (m ReimbursementStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
