// Code generated by go-swagger; DO NOT EDIT.

package moves

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/pptasmessages"
)

// PptasReportsReader is a Reader for the PptasReports structure.
type PptasReportsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PptasReportsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPptasReportsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPptasReportsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPptasReportsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPptasReportsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /moves] pptasReports", response, response.Code())
	}
}

// NewPptasReportsOK creates a PptasReportsOK with default headers values
func NewPptasReportsOK() *PptasReportsOK {
	return &PptasReportsOK{}
}

/*
PptasReportsOK describes a response with status code 200, with default header values.

Successfully retrieved pptas reports. A successful fetch might still return zero pptas reports.
*/
type PptasReportsOK struct {
	Payload pptasmessages.PPTASReports
}

// IsSuccess returns true when this pptas reports o k response has a 2xx status code
func (o *PptasReportsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pptas reports o k response has a 3xx status code
func (o *PptasReportsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pptas reports o k response has a 4xx status code
func (o *PptasReportsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pptas reports o k response has a 5xx status code
func (o *PptasReportsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this pptas reports o k response a status code equal to that given
func (o *PptasReportsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the pptas reports o k response
func (o *PptasReportsOK) Code() int {
	return 200
}

func (o *PptasReportsOK) Error() string {
	return fmt.Sprintf("[GET /moves][%d] pptasReportsOK  %+v", 200, o.Payload)
}

func (o *PptasReportsOK) String() string {
	return fmt.Sprintf("[GET /moves][%d] pptasReportsOK  %+v", 200, o.Payload)
}

func (o *PptasReportsOK) GetPayload() pptasmessages.PPTASReports {
	return o.Payload
}

func (o *PptasReportsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPptasReportsUnauthorized creates a PptasReportsUnauthorized with default headers values
func NewPptasReportsUnauthorized() *PptasReportsUnauthorized {
	return &PptasReportsUnauthorized{}
}

/*
PptasReportsUnauthorized describes a response with status code 401, with default header values.

The request was denied.
*/
type PptasReportsUnauthorized struct {
	Payload *pptasmessages.ClientError
}

// IsSuccess returns true when this pptas reports unauthorized response has a 2xx status code
func (o *PptasReportsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pptas reports unauthorized response has a 3xx status code
func (o *PptasReportsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pptas reports unauthorized response has a 4xx status code
func (o *PptasReportsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this pptas reports unauthorized response has a 5xx status code
func (o *PptasReportsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this pptas reports unauthorized response a status code equal to that given
func (o *PptasReportsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the pptas reports unauthorized response
func (o *PptasReportsUnauthorized) Code() int {
	return 401
}

func (o *PptasReportsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /moves][%d] pptasReportsUnauthorized  %+v", 401, o.Payload)
}

func (o *PptasReportsUnauthorized) String() string {
	return fmt.Sprintf("[GET /moves][%d] pptasReportsUnauthorized  %+v", 401, o.Payload)
}

func (o *PptasReportsUnauthorized) GetPayload() *pptasmessages.ClientError {
	return o.Payload
}

func (o *PptasReportsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(pptasmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPptasReportsForbidden creates a PptasReportsForbidden with default headers values
func NewPptasReportsForbidden() *PptasReportsForbidden {
	return &PptasReportsForbidden{}
}

/*
PptasReportsForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type PptasReportsForbidden struct {
	Payload *pptasmessages.ClientError
}

// IsSuccess returns true when this pptas reports forbidden response has a 2xx status code
func (o *PptasReportsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pptas reports forbidden response has a 3xx status code
func (o *PptasReportsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pptas reports forbidden response has a 4xx status code
func (o *PptasReportsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this pptas reports forbidden response has a 5xx status code
func (o *PptasReportsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this pptas reports forbidden response a status code equal to that given
func (o *PptasReportsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the pptas reports forbidden response
func (o *PptasReportsForbidden) Code() int {
	return 403
}

func (o *PptasReportsForbidden) Error() string {
	return fmt.Sprintf("[GET /moves][%d] pptasReportsForbidden  %+v", 403, o.Payload)
}

func (o *PptasReportsForbidden) String() string {
	return fmt.Sprintf("[GET /moves][%d] pptasReportsForbidden  %+v", 403, o.Payload)
}

func (o *PptasReportsForbidden) GetPayload() *pptasmessages.ClientError {
	return o.Payload
}

func (o *PptasReportsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(pptasmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPptasReportsInternalServerError creates a PptasReportsInternalServerError with default headers values
func NewPptasReportsInternalServerError() *PptasReportsInternalServerError {
	return &PptasReportsInternalServerError{}
}

/*
PptasReportsInternalServerError describes a response with status code 500, with default header values.

An unexpected error has occurred in the server.
*/
type PptasReportsInternalServerError struct {
	Payload *pptasmessages.ClientError
}

// IsSuccess returns true when this pptas reports internal server error response has a 2xx status code
func (o *PptasReportsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pptas reports internal server error response has a 3xx status code
func (o *PptasReportsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pptas reports internal server error response has a 4xx status code
func (o *PptasReportsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this pptas reports internal server error response has a 5xx status code
func (o *PptasReportsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this pptas reports internal server error response a status code equal to that given
func (o *PptasReportsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the pptas reports internal server error response
func (o *PptasReportsInternalServerError) Code() int {
	return 500
}

func (o *PptasReportsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /moves][%d] pptasReportsInternalServerError  %+v", 500, o.Payload)
}

func (o *PptasReportsInternalServerError) String() string {
	return fmt.Sprintf("[GET /moves][%d] pptasReportsInternalServerError  %+v", 500, o.Payload)
}

func (o *PptasReportsInternalServerError) GetPayload() *pptasmessages.ClientError {
	return o.Payload
}

func (o *PptasReportsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(pptasmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
