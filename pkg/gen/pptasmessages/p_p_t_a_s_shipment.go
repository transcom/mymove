// Code generated by go-swagger; DO NOT EDIT.

package pptasmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PPTASShipment Shipment definition used for PPTAS reports.
//
// swagger:model PPTASShipment
type PPTASShipment struct {

	// LoaTrnsnID in lines_of_accounting
	Aaa *string `json:"aaa,omitempty"`

	// actual origin net weight
	ActualOriginNetWeight *float64 `json:"actualOriginNetWeight,omitempty"`

	// Appropriation
	Appro *string `json:"appro,omitempty"`

	// LoaSbaltmtRcpntID in lines_of_accounting
	Bcn *string `json:"bcn,omitempty"`

	// LoaPgmElmntID in lines_of_accounting
	CostCD *string `json:"costCD,omitempty"`

	// counseling fee total
	CounselingFeeTotal *float64 `json:"counselingFeeTotal,omitempty"`

	// crating dimensions
	CratingDimensions []*Crate `json:"cratingDimensions"`

	// crating total
	CratingTotal *float64 `json:"cratingTotal,omitempty"`

	// Counseling Date
	// Format: date
	Dd2278IssueDate strfmt.Date `json:"dd2278IssueDate,omitempty"`

	// LoaDptID in lines_of_accounting
	Ddcd *string `json:"ddcd,omitempty"`

	// delivery date
	// Format: date
	DeliveryDate strfmt.Date `json:"deliveryDate,omitempty"`

	// destination address
	DestinationAddress *Address `json:"destinationAddress,omitempty"`

	// destination price
	DestinationPrice *float64 `json:"destinationPrice,omitempty"`

	// destination reweigh net weight
	DestinationReweighNetWeight *float64 `json:"destinationReweighNetWeight,omitempty"`

	// financial review flag
	FinancialReviewFlag *bool `json:"financialReviewFlag,omitempty"`

	// fiscal year
	FiscalYear *string `json:"fiscalYear,omitempty"`

	// Invoice Paid Amounts
	InvoicePaidAmt *float64 `json:"invoicePaidAmt,omitempty"`

	// linehaul fuel total
	LinehaulFuelTotal *float64 `json:"linehaulFuelTotal,omitempty"`

	// linehaul total
	LinehaulTotal *float64 `json:"linehaulTotal,omitempty"`

	// Line of Accounting
	Loa *string `json:"loa,omitempty"`

	// miles
	Miles int64 `json:"miles,omitempty"`

	// move date
	// Format: date
	MoveDate *strfmt.Date `json:"moveDate,omitempty"`

	// move management fee total
	MoveManagementFeeTotal *float64 `json:"moveManagementFeeTotal,omitempty"`

	// net weight
	NetWeight *int64 `json:"netWeight,omitempty"`

	// LoaAlltSnID in lines_of_accounting
	ObjClass *string `json:"objClass,omitempty"`

	// origin address
	OriginAddress *Address `json:"originAddress,omitempty"`

	// origin price
	OriginPrice *float64 `json:"originPrice,omitempty"`

	// LoaDocID in lines_of_accounting
	Paa *string `json:"paa,omitempty"`

	// packing price
	PackingPrice *float64 `json:"packingPrice,omitempty"`

	// paid date
	// Format: date
	PaidDate *strfmt.Date `json:"paidDate,omitempty"`

	// Pro Gear
	PbpAnde *float64 `json:"pbpAnde,omitempty"`

	// pickup date
	// Format: date
	PickupDate strfmt.Date `json:"pickupDate,omitempty"`

	// ppm dest price
	PpmDestPrice *float64 `json:"ppmDestPrice,omitempty"`

	// Personally Procured Move Fuel Rate Adjusted total cost
	PpmFuelRateAdjTotal *float64 `json:"ppmFuelRateAdjTotal,omitempty"`

	// Personally Procured Move Linehaul total cost
	PpmLinehaul *float64 `json:"ppmLinehaul,omitempty"`

	// ppm origin price
	PpmOriginPrice *float64 `json:"ppmOriginPrice,omitempty"`

	// ppm packing
	PpmPacking *float64 `json:"ppmPacking,omitempty"`

	// ppm storage
	PpmStorage *float64 `json:"ppmStorage,omitempty"`

	// ppm total
	PpmTotal *float64 `json:"ppmTotal,omitempty"`

	// ppm unpacking
	PpmUnpacking *float64 `json:"ppmUnpacking,omitempty"`

	// shipment Id
	// Format: uuid
	ShipmentID strfmt.UUID `json:"shipmentId,omitempty"`

	// shipment type
	ShipmentType string `json:"shipmentType,omitempty"`

	// shuttle total
	ShuttleTotal *float64 `json:"shuttleTotal,omitempty"`

	// Storage in Transit delivery total cost
	SitDeliveryTotal *float64 `json:"sitDeliveryTotal,omitempty"`

	// Additional day of Destination Storage in Transit cost
	SitDestAddlDaysTotal *float64 `json:"sitDestAddlDaysTotal,omitempty"`

	// First day of Destination Storage in Transit cost
	SitDestFirstDayTotal *float64 `json:"sitDestFirstDayTotal,omitempty"`

	// Storage in Transit destination total cost
	SitDestFuelSurcharge *float64 `json:"sitDestFuelSurcharge,omitempty"`

	// Storage in Transit In Date
	// Format: date
	SitInDate *strfmt.Date `json:"sitInDate,omitempty"`

	// Additional day of Origin Storage in Transit cost
	SitOriginAddlDaysTotal *float64 `json:"sitOriginAddlDaysTotal,omitempty"`

	// First day of Origin Storage in Transit cost
	SitOriginFirstDayTotal *float64 `json:"sitOriginFirstDayTotal,omitempty"`

	// Storage in Transit origin fuel total cost
	SitOriginFuelSurcharge *float64 `json:"sitOriginFuelSurcharge,omitempty"`

	// Storage in Transit Out Date
	// Format: date
	SitOutDate *strfmt.Date `json:"sitOutDate,omitempty"`

	// Storage in Transit pickup total cost
	SitPickupTotal *float64 `json:"sitPickupTotal,omitempty"`

	// Storage in Transit type
	// Example: Destination
	SitType *string `json:"sitType,omitempty"`

	// LoaInstlAcntgActID in lines_of_accounting
	SubAllotCD *string `json:"subAllotCD,omitempty"`

	// LoaObjClsID in lines_of_accounting
	Subhead *string `json:"subhead,omitempty"`

	// travel advance
	TravelAdvance *float64 `json:"travelAdvance,omitempty"`

	// LoaJbOrdNm in lines_of_accounting
	TypeCD *string `json:"typeCD,omitempty"`

	// uncrating total
	UncratingTotal *float64 `json:"uncratingTotal,omitempty"`

	// unpacking price
	UnpackingPrice *float64 `json:"unpackingPrice,omitempty"`

	// Total weight estimate
	WeightEstimate *float64 `json:"weightEstimate,omitempty"`
}

// Validate validates this p p t a s shipment
func (m *PPTASShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCratingDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDd2278IssueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaidDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitInDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitOutDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPTASShipment) validateCratingDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.CratingDimensions) { // not required
		return nil
	}

	for i := 0; i < len(m.CratingDimensions); i++ {
		if swag.IsZero(m.CratingDimensions[i]) { // not required
			continue
		}

		if m.CratingDimensions[i] != nil {
			if err := m.CratingDimensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cratingDimensions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cratingDimensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PPTASShipment) validateDd2278IssueDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Dd2278IssueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("dd2278IssueDate", "body", "date", m.Dd2278IssueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPTASShipment) validateDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("deliveryDate", "body", "date", m.DeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPTASShipment) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	if m.DestinationAddress != nil {
		if err := m.DestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPTASShipment) validateMoveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.MoveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("moveDate", "body", "date", m.MoveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPTASShipment) validateOriginAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginAddress) { // not required
		return nil
	}

	if m.OriginAddress != nil {
		if err := m.OriginAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPTASShipment) validatePaidDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PaidDate) { // not required
		return nil
	}

	if err := validate.FormatOf("paidDate", "body", "date", m.PaidDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPTASShipment) validatePickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("pickupDate", "body", "date", m.PickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPTASShipment) validateShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("shipmentId", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPTASShipment) validateSitInDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitInDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitInDate", "body", "date", m.SitInDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPTASShipment) validateSitOutDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitOutDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitOutDate", "body", "date", m.SitOutDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p p t a s shipment based on the context it is used
func (m *PPTASShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCratingDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPTASShipment) contextValidateCratingDimensions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CratingDimensions); i++ {

		if m.CratingDimensions[i] != nil {

			if swag.IsZero(m.CratingDimensions[i]) { // not required
				return nil
			}

			if err := m.CratingDimensions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cratingDimensions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cratingDimensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PPTASShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationAddress != nil {

		if swag.IsZero(m.DestinationAddress) { // not required
			return nil
		}

		if err := m.DestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PPTASShipment) contextValidateOriginAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginAddress != nil {

		if swag.IsZero(m.OriginAddress) { // not required
			return nil
		}

		if err := m.OriginAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PPTASShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PPTASShipment) UnmarshalBinary(b []byte) error {
	var res PPTASShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
