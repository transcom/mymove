// Code generated by go-swagger; DO NOT EDIT.

package pptasmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PPTASReport Report for Navy PPTAS, contains information about Service Members, Orders, Move Task Orders, Shipments, and Payment Requests.
//
// swagger:model PPTASReport
type PPTASReport struct {

	// address
	Address *Address `json:"address,omitempty"`

	// affiliation
	Affiliation *Affiliation `json:"affiliation,omitempty"`

	// counseled date
	// Format: date
	CounseledDate strfmt.Date `json:"counseledDate,omitempty"`

	// Dependent Code
	DepCD *bool `json:"depCD,omitempty"`

	// destination gbloc
	// Pattern: ^[A-Z]{4}$
	DestinationGbloc *string `json:"destinationGbloc,omitempty"`

	// edipi
	Edipi string `json:"edipi,omitempty"`

	// email primary
	// Example: a@b.com
	EmailPrimary string `json:"emailPrimary,omitempty"`

	// email secondary
	EmailSecondary *string `json:"emailSecondary,omitempty"`

	// entitlement weight
	EntitlementWeight *int64 `json:"entitlementWeight,omitempty"`

	// financial review flag
	FinancialReviewFlag *bool `json:"financialReviewFlag,omitempty"`

	// financial review remarks
	FinancialReviewRemarks *string `json:"financialReviewRemarks,omitempty"`

	// first name
	// Example: Bob
	FirstName string `json:"firstName,omitempty"`

	// last name
	// Example: Job
	LastName string `json:"lastName,omitempty"`

	// middle initial
	// Example: G
	MiddleInitial *string `json:"middleInitial,omitempty"`

	// not to be confused with Orders Number
	// Example: 030-00362
	OrderNumber *string `json:"orderNumber,omitempty"`

	// orders date
	// Format: date-time
	OrdersDate strfmt.DateTime `json:"ordersDate,omitempty"`

	// orders number
	OrdersNumber string `json:"ordersNumber,omitempty"`

	// orders type
	OrdersType string `json:"ordersType,omitempty"`

	// origin gbloc
	// Pattern: ^[A-Z]{4}$
	OriginGbloc *string `json:"originGbloc,omitempty"`

	// grade
	// Enum: [E_1 E_2 E_3 E_4 E_5 E_6 E_7 E_8 E_9 E_9_SPECIAL_SENIOR_ENLISTED O_1_ACADEMY_GRADUATE O_2 O_3 O_4 O_5 O_6 O_7 O_8 O_9 O_10 W_1 W_2 W_3 W_4 W_5 AVIATION_CADET CIVILIAN_EMPLOYEE ACADEMY_CADET MIDSHIPMAN]
	PayGrade *string `json:"payGrade,omitempty"`

	// phone primary
	PhonePrimary string `json:"phonePrimary,omitempty"`

	// phone secondary
	PhoneSecondary *string `json:"phoneSecondary,omitempty"`

	// scac
	// Example: AGFM
	Scac *string `json:"scac,omitempty"`

	// Number of shipments
	ShipmentNum int64 `json:"shipmentNum,omitempty"`

	// shipments
	Shipments []*PPTASShipment `json:"shipments"`

	// Transportation Accounting Code
	Tac *string `json:"tac,omitempty"`

	// Transmit Code
	TransmitCD *string `json:"transmitCD,omitempty"`

	// travel class code
	// Example: PCS
	TravelClassCode string `json:"travelClassCode,omitempty"`

	// Travel Type
	// Example: Shipment of HHG Permitted
	TravelType string `json:"travelType,omitempty"`

	// weight authorized
	WeightAuthorized *float64 `json:"weightAuthorized,omitempty"`
}

// Validate validates this p p t a s report
func (m *PPTASReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounseledDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationGbloc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginGbloc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayGrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPTASReport) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *PPTASReport) validateAffiliation(formats strfmt.Registry) error {
	if swag.IsZero(m.Affiliation) { // not required
		return nil
	}

	if m.Affiliation != nil {
		if err := m.Affiliation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *PPTASReport) validateCounseledDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CounseledDate) { // not required
		return nil
	}

	if err := validate.FormatOf("counseledDate", "body", "date", m.CounseledDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPTASReport) validateDestinationGbloc(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationGbloc) { // not required
		return nil
	}

	if err := validate.Pattern("destinationGbloc", "body", *m.DestinationGbloc, `^[A-Z]{4}$`); err != nil {
		return err
	}

	return nil
}

func (m *PPTASReport) validateOrdersDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdersDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ordersDate", "body", "date-time", m.OrdersDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PPTASReport) validateOriginGbloc(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginGbloc) { // not required
		return nil
	}

	if err := validate.Pattern("originGbloc", "body", *m.OriginGbloc, `^[A-Z]{4}$`); err != nil {
		return err
	}

	return nil
}

var pPTASReportTypePayGradePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["E_1","E_2","E_3","E_4","E_5","E_6","E_7","E_8","E_9","E_9_SPECIAL_SENIOR_ENLISTED","O_1_ACADEMY_GRADUATE","O_2","O_3","O_4","O_5","O_6","O_7","O_8","O_9","O_10","W_1","W_2","W_3","W_4","W_5","AVIATION_CADET","CIVILIAN_EMPLOYEE","ACADEMY_CADET","MIDSHIPMAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pPTASReportTypePayGradePropEnum = append(pPTASReportTypePayGradePropEnum, v)
	}
}

const (

	// PPTASReportPayGradeE1 captures enum value "E_1"
	PPTASReportPayGradeE1 string = "E_1"

	// PPTASReportPayGradeE2 captures enum value "E_2"
	PPTASReportPayGradeE2 string = "E_2"

	// PPTASReportPayGradeE3 captures enum value "E_3"
	PPTASReportPayGradeE3 string = "E_3"

	// PPTASReportPayGradeE4 captures enum value "E_4"
	PPTASReportPayGradeE4 string = "E_4"

	// PPTASReportPayGradeE5 captures enum value "E_5"
	PPTASReportPayGradeE5 string = "E_5"

	// PPTASReportPayGradeE6 captures enum value "E_6"
	PPTASReportPayGradeE6 string = "E_6"

	// PPTASReportPayGradeE7 captures enum value "E_7"
	PPTASReportPayGradeE7 string = "E_7"

	// PPTASReportPayGradeE8 captures enum value "E_8"
	PPTASReportPayGradeE8 string = "E_8"

	// PPTASReportPayGradeE9 captures enum value "E_9"
	PPTASReportPayGradeE9 string = "E_9"

	// PPTASReportPayGradeE9SPECIALSENIORENLISTED captures enum value "E_9_SPECIAL_SENIOR_ENLISTED"
	PPTASReportPayGradeE9SPECIALSENIORENLISTED string = "E_9_SPECIAL_SENIOR_ENLISTED"

	// PPTASReportPayGradeO1ACADEMYGRADUATE captures enum value "O_1_ACADEMY_GRADUATE"
	PPTASReportPayGradeO1ACADEMYGRADUATE string = "O_1_ACADEMY_GRADUATE"

	// PPTASReportPayGradeO2 captures enum value "O_2"
	PPTASReportPayGradeO2 string = "O_2"

	// PPTASReportPayGradeO3 captures enum value "O_3"
	PPTASReportPayGradeO3 string = "O_3"

	// PPTASReportPayGradeO4 captures enum value "O_4"
	PPTASReportPayGradeO4 string = "O_4"

	// PPTASReportPayGradeO5 captures enum value "O_5"
	PPTASReportPayGradeO5 string = "O_5"

	// PPTASReportPayGradeO6 captures enum value "O_6"
	PPTASReportPayGradeO6 string = "O_6"

	// PPTASReportPayGradeO7 captures enum value "O_7"
	PPTASReportPayGradeO7 string = "O_7"

	// PPTASReportPayGradeO8 captures enum value "O_8"
	PPTASReportPayGradeO8 string = "O_8"

	// PPTASReportPayGradeO9 captures enum value "O_9"
	PPTASReportPayGradeO9 string = "O_9"

	// PPTASReportPayGradeO10 captures enum value "O_10"
	PPTASReportPayGradeO10 string = "O_10"

	// PPTASReportPayGradeW1 captures enum value "W_1"
	PPTASReportPayGradeW1 string = "W_1"

	// PPTASReportPayGradeW2 captures enum value "W_2"
	PPTASReportPayGradeW2 string = "W_2"

	// PPTASReportPayGradeW3 captures enum value "W_3"
	PPTASReportPayGradeW3 string = "W_3"

	// PPTASReportPayGradeW4 captures enum value "W_4"
	PPTASReportPayGradeW4 string = "W_4"

	// PPTASReportPayGradeW5 captures enum value "W_5"
	PPTASReportPayGradeW5 string = "W_5"

	// PPTASReportPayGradeAVIATIONCADET captures enum value "AVIATION_CADET"
	PPTASReportPayGradeAVIATIONCADET string = "AVIATION_CADET"

	// PPTASReportPayGradeCIVILIANEMPLOYEE captures enum value "CIVILIAN_EMPLOYEE"
	PPTASReportPayGradeCIVILIANEMPLOYEE string = "CIVILIAN_EMPLOYEE"

	// PPTASReportPayGradeACADEMYCADET captures enum value "ACADEMY_CADET"
	PPTASReportPayGradeACADEMYCADET string = "ACADEMY_CADET"

	// PPTASReportPayGradeMIDSHIPMAN captures enum value "MIDSHIPMAN"
	PPTASReportPayGradeMIDSHIPMAN string = "MIDSHIPMAN"
)

// prop value enum
func (m *PPTASReport) validatePayGradeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pPTASReportTypePayGradePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PPTASReport) validatePayGrade(formats strfmt.Registry) error {
	if swag.IsZero(m.PayGrade) { // not required
		return nil
	}

	// value enum
	if err := m.validatePayGradeEnum("payGrade", "body", *m.PayGrade); err != nil {
		return err
	}

	return nil
}

func (m *PPTASReport) validateShipments(formats strfmt.Registry) error {
	if swag.IsZero(m.Shipments) { // not required
		return nil
	}

	for i := 0; i < len(m.Shipments); i++ {
		if swag.IsZero(m.Shipments[i]) { // not required
			continue
		}

		if m.Shipments[i] != nil {
			if err := m.Shipments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shipments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shipments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this p p t a s report based on the context it is used
func (m *PPTASReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAffiliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PPTASReport) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {

		if swag.IsZero(m.Address) { // not required
			return nil
		}

		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *PPTASReport) contextValidateAffiliation(ctx context.Context, formats strfmt.Registry) error {

	if m.Affiliation != nil {

		if swag.IsZero(m.Affiliation) { // not required
			return nil
		}

		if err := m.Affiliation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *PPTASReport) contextValidateShipments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Shipments); i++ {

		if m.Shipments[i] != nil {

			if swag.IsZero(m.Shipments[i]) { // not required
				return nil
			}

			if err := m.Shipments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shipments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shipments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PPTASReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PPTASReport) UnmarshalBinary(b []byte) error {
	var res PPTASReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
