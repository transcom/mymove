// Code generated by go-swagger; DO NOT EDIT.

package pptasmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListReport An abbreviated definition for a report, without all the nested information (shipments, service items, etc). Used to fetch a list of reports more efficiently.
//
// swagger:model ListReport
type ListReport struct {

	// aaa
	Aaa *string `json:"aaa,omitempty"`

	// actual origin net weight
	ActualOriginNetWeight *float64 `json:"actualOriginNetWeight,omitempty"`

	// address
	Address *Address `json:"address,omitempty"`

	// affiliation
	Affiliation *Affiliation `json:"affiliation,omitempty"`

	// Appropriation
	Appro *string `json:"appro,omitempty"`

	// bcn
	Bcn *string `json:"bcn,omitempty"`

	// cost c d
	CostCD *string `json:"costCD,omitempty"`

	// counseled date
	// Format: date
	CounseledDate strfmt.Date `json:"counseledDate,omitempty"`

	// counseling fee total
	CounselingFeeTotal *float64 `json:"counselingFeeTotal,omitempty"`

	// crating dimensions
	CratingDimensions []*Crate `json:"cratingDimensions"`

	// crating total
	CratingTotal *float64 `json:"cratingTotal,omitempty"`

	// Counseling Date
	// Format: date
	Dd2278IssueDate strfmt.Date `json:"dd2278IssueDate,omitempty"`

	// ddcd
	Ddcd *string `json:"ddcd,omitempty"`

	// delivery date
	// Format: date
	DeliveryDate strfmt.Date `json:"deliveryDate,omitempty"`

	// Department Code
	DepCD *bool `json:"depCD,omitempty"`

	// destination address
	DestinationAddress *Address `json:"destinationAddress,omitempty"`

	// destination gbloc
	// Enum: [AGFM APAT BGAC BGNC BKAS CFMQ CLPK CNNQ DMAT GSAT HAFC HBAT JEAT JENQ KKFA LHNQ LKNQ MAPK MAPS MBFL MLNQ XXXX]
	DestinationGbloc *string `json:"destinationGbloc,omitempty"`

	// destination price
	DestinationPrice *float64 `json:"destinationPrice,omitempty"`

	// destination reweigh net weight
	DestinationReweighNetWeight *float64 `json:"destinationReweighNetWeight,omitempty"`

	// edipi
	Edipi string `json:"edipi,omitempty"`

	// email primary
	// Example: a@b.com
	EmailPrimary string `json:"emailPrimary,omitempty"`

	// email secondary
	EmailSecondary *string `json:"emailSecondary,omitempty"`

	// entitlement weight
	EntitlementWeight *int64 `json:"entitlementWeight,omitempty"`

	// first name
	// Example: Bob
	FirstName string `json:"firstName,omitempty"`

	// fiscal year
	FiscalYear *string `json:"fiscalYear,omitempty"`

	// invoice paid amt
	InvoicePaidAmt *float64 `json:"invoicePaidAmt,omitempty"`

	// last name
	// Example: Job
	LastName string `json:"lastName,omitempty"`

	// linehaul fuel total
	LinehaulFuelTotal *float64 `json:"linehaulFuelTotal,omitempty"`

	// linehaul total
	LinehaulTotal *float64 `json:"linehaulTotal,omitempty"`

	// loa
	Loa *string `json:"loa,omitempty"`

	// middle initial
	// Example: G
	MiddleInitial string `json:"middleInitial,omitempty"`

	// miles
	Miles int64 `json:"miles,omitempty"`

	// move date
	// Format: date
	MoveDate *strfmt.Date `json:"moveDate,omitempty"`

	// move management fee total
	MoveManagementFeeTotal *float64 `json:"moveManagementFeeTotal,omitempty"`

	// net weight
	NetWeight *int64 `json:"netWeight,omitempty"`

	// obj class
	ObjClass *string `json:"objClass,omitempty"`

	// not to be confused with Orders Number
	// Example: 030-00362
	OrderNumber *string `json:"orderNumber,omitempty"`

	// orders date
	// Format: date-time
	OrdersDate strfmt.DateTime `json:"ordersDate,omitempty"`

	// orders number
	OrdersNumber string `json:"ordersNumber,omitempty"`

	// orders type
	OrdersType string `json:"ordersType,omitempty"`

	// origin address
	OriginAddress *Address `json:"originAddress,omitempty"`

	// origin gbloc
	// Enum: [AGFM APAT BGAC BGNC BKAS CFMQ CLPK CNNQ DMAT GSAT HAFC HBAT JEAT JENQ KKFA LHNQ LKNQ MAPK MAPS MBFL MLNQ XXXX]
	OriginGbloc *string `json:"originGbloc,omitempty"`

	// origin price
	OriginPrice *float64 `json:"originPrice,omitempty"`

	// paa
	Paa *string `json:"paa,omitempty"`

	// packing price
	PackingPrice *float64 `json:"packingPrice,omitempty"`

	// paid date
	// Format: date
	PaidDate *strfmt.Date `json:"paidDate,omitempty"`

	// grade
	// Enum: [E_1 E_2 E_3 E_4 E_5 E_6 E_7 E_8 E_9 E_9_SPECIAL_SENIOR_ENLISTED O_1_ACADEMY_GRADUATE O_2 O_3 O_4 O_5 O_6 O_7 O_8 O_9 O_10 W_1 W_2 W_3 W_4 W_5 AVIATION_CADET CIVILIAN_EMPLOYEE ACADEMY_CADET MIDSHIPMAN]
	PayGrade *string `json:"payGrade,omitempty"`

	// Pro Gear
	PbpAnde *float64 `json:"pbpAnde,omitempty"`

	// phone primary
	PhonePrimary string `json:"phonePrimary,omitempty"`

	// phone secondary
	PhoneSecondary *string `json:"phoneSecondary,omitempty"`

	// pickup date
	// Format: date
	PickupDate strfmt.Date `json:"pickupDate,omitempty"`

	// ppm dest price
	PpmDestPrice *float64 `json:"ppmDestPrice,omitempty"`

	// ppm fuel rate adj total
	PpmFuelRateAdjTotal *float64 `json:"ppmFuelRateAdjTotal,omitempty"`

	// ppm linehaul
	PpmLinehaul *float64 `json:"ppmLinehaul,omitempty"`

	// ppm origin price
	PpmOriginPrice *float64 `json:"ppmOriginPrice,omitempty"`

	// ppm packing
	PpmPacking *float64 `json:"ppmPacking,omitempty"`

	// ppm storage
	PpmStorage *float64 `json:"ppmStorage,omitempty"`

	// ppm total
	PpmTotal *float64 `json:"ppmTotal,omitempty"`

	// ppm unpacking
	PpmUnpacking *float64 `json:"ppmUnpacking,omitempty"`

	// scac
	// Example: AGFM
	Scac *string `json:"scac,omitempty"`

	// shipment Id
	// Format: uuid
	ShipmentID strfmt.UUID `json:"shipmentId,omitempty"`

	// Number of shipments
	ShipmentNum int64 `json:"shipmentNum,omitempty"`

	// shipment type
	ShipmentType string `json:"shipmentType,omitempty"`

	// shuttle total
	ShuttleTotal *float64 `json:"shuttleTotal,omitempty"`

	// sit delivery total
	SitDeliveryTotal *float64 `json:"sitDeliveryTotal,omitempty"`

	// sit dest addl days total
	SitDestAddlDaysTotal *float64 `json:"sitDestAddlDaysTotal,omitempty"`

	// sit dest first day total
	SitDestFirstDayTotal *float64 `json:"sitDestFirstDayTotal,omitempty"`

	// sit dest fuel surcharge
	SitDestFuelSurcharge *float64 `json:"sitDestFuelSurcharge,omitempty"`

	// sit in date
	// Format: date
	SitInDate *strfmt.Date `json:"sitInDate,omitempty"`

	// sit origin addl days total
	SitOriginAddlDaysTotal *float64 `json:"sitOriginAddlDaysTotal,omitempty"`

	// sit origin first day total
	SitOriginFirstDayTotal *float64 `json:"sitOriginFirstDayTotal,omitempty"`

	// sit origin fuel surcharge
	SitOriginFuelSurcharge *float64 `json:"sitOriginFuelSurcharge,omitempty"`

	// sit out date
	// Format: date
	SitOutDate *strfmt.Date `json:"sitOutDate,omitempty"`

	// sit pickup total
	SitPickupTotal *float64 `json:"sitPickupTotal,omitempty"`

	// sit type
	// Example: Destination
	SitType *string `json:"sitType,omitempty"`

	// sub allot c d
	SubAllotCD *string `json:"subAllotCD,omitempty"`

	// subhead
	Subhead *string `json:"subhead,omitempty"`

	// Transportation Accounting Code
	Tac *string `json:"tac,omitempty"`

	// Transmit Code
	TransmitCD *string `json:"transmitCD,omitempty"`

	// travel advance
	TravelAdvance *float64 `json:"travelAdvance,omitempty"`

	// travel class code
	// Example: PCS
	TravelClassCode string `json:"travelClassCode,omitempty"`

	// Travel Type
	// Example: Shipment of HHG Permitted
	TravelType string `json:"travelType,omitempty"`

	// type c d
	TypeCD *string `json:"typeCD,omitempty"`

	// uncrating total
	UncratingTotal *float64 `json:"uncratingTotal,omitempty"`

	// unpacking price
	UnpackingPrice *float64 `json:"unpackingPrice,omitempty"`

	// weight authorized
	WeightAuthorized *float64 `json:"weightAuthorized,omitempty"`

	// Total weight estimate
	WeightEstimate *float64 `json:"weightEstimate,omitempty"`
}

// Validate validates this list report
func (m *ListReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounseledDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCratingDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDd2278IssueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationGbloc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginGbloc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaidDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayGrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitInDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitOutDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListReport) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *ListReport) validateAffiliation(formats strfmt.Registry) error {
	if swag.IsZero(m.Affiliation) { // not required
		return nil
	}

	if m.Affiliation != nil {
		if err := m.Affiliation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *ListReport) validateCounseledDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CounseledDate) { // not required
		return nil
	}

	if err := validate.FormatOf("counseledDate", "body", "date", m.CounseledDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListReport) validateCratingDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.CratingDimensions) { // not required
		return nil
	}

	for i := 0; i < len(m.CratingDimensions); i++ {
		if swag.IsZero(m.CratingDimensions[i]) { // not required
			continue
		}

		if m.CratingDimensions[i] != nil {
			if err := m.CratingDimensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cratingDimensions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cratingDimensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListReport) validateDd2278IssueDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Dd2278IssueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("dd2278IssueDate", "body", "date", m.Dd2278IssueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListReport) validateDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("deliveryDate", "body", "date", m.DeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListReport) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	if m.DestinationAddress != nil {
		if err := m.DestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

var listReportTypeDestinationGblocPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGFM","APAT","BGAC","BGNC","BKAS","CFMQ","CLPK","CNNQ","DMAT","GSAT","HAFC","HBAT","JEAT","JENQ","KKFA","LHNQ","LKNQ","MAPK","MAPS","MBFL","MLNQ","XXXX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listReportTypeDestinationGblocPropEnum = append(listReportTypeDestinationGblocPropEnum, v)
	}
}

const (

	// ListReportDestinationGblocAGFM captures enum value "AGFM"
	ListReportDestinationGblocAGFM string = "AGFM"

	// ListReportDestinationGblocAPAT captures enum value "APAT"
	ListReportDestinationGblocAPAT string = "APAT"

	// ListReportDestinationGblocBGAC captures enum value "BGAC"
	ListReportDestinationGblocBGAC string = "BGAC"

	// ListReportDestinationGblocBGNC captures enum value "BGNC"
	ListReportDestinationGblocBGNC string = "BGNC"

	// ListReportDestinationGblocBKAS captures enum value "BKAS"
	ListReportDestinationGblocBKAS string = "BKAS"

	// ListReportDestinationGblocCFMQ captures enum value "CFMQ"
	ListReportDestinationGblocCFMQ string = "CFMQ"

	// ListReportDestinationGblocCLPK captures enum value "CLPK"
	ListReportDestinationGblocCLPK string = "CLPK"

	// ListReportDestinationGblocCNNQ captures enum value "CNNQ"
	ListReportDestinationGblocCNNQ string = "CNNQ"

	// ListReportDestinationGblocDMAT captures enum value "DMAT"
	ListReportDestinationGblocDMAT string = "DMAT"

	// ListReportDestinationGblocGSAT captures enum value "GSAT"
	ListReportDestinationGblocGSAT string = "GSAT"

	// ListReportDestinationGblocHAFC captures enum value "HAFC"
	ListReportDestinationGblocHAFC string = "HAFC"

	// ListReportDestinationGblocHBAT captures enum value "HBAT"
	ListReportDestinationGblocHBAT string = "HBAT"

	// ListReportDestinationGblocJEAT captures enum value "JEAT"
	ListReportDestinationGblocJEAT string = "JEAT"

	// ListReportDestinationGblocJENQ captures enum value "JENQ"
	ListReportDestinationGblocJENQ string = "JENQ"

	// ListReportDestinationGblocKKFA captures enum value "KKFA"
	ListReportDestinationGblocKKFA string = "KKFA"

	// ListReportDestinationGblocLHNQ captures enum value "LHNQ"
	ListReportDestinationGblocLHNQ string = "LHNQ"

	// ListReportDestinationGblocLKNQ captures enum value "LKNQ"
	ListReportDestinationGblocLKNQ string = "LKNQ"

	// ListReportDestinationGblocMAPK captures enum value "MAPK"
	ListReportDestinationGblocMAPK string = "MAPK"

	// ListReportDestinationGblocMAPS captures enum value "MAPS"
	ListReportDestinationGblocMAPS string = "MAPS"

	// ListReportDestinationGblocMBFL captures enum value "MBFL"
	ListReportDestinationGblocMBFL string = "MBFL"

	// ListReportDestinationGblocMLNQ captures enum value "MLNQ"
	ListReportDestinationGblocMLNQ string = "MLNQ"

	// ListReportDestinationGblocXXXX captures enum value "XXXX"
	ListReportDestinationGblocXXXX string = "XXXX"
)

// prop value enum
func (m *ListReport) validateDestinationGblocEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listReportTypeDestinationGblocPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ListReport) validateDestinationGbloc(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationGbloc) { // not required
		return nil
	}

	// value enum
	if err := m.validateDestinationGblocEnum("destinationGbloc", "body", *m.DestinationGbloc); err != nil {
		return err
	}

	return nil
}

func (m *ListReport) validateMoveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.MoveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("moveDate", "body", "date", m.MoveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListReport) validateOrdersDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdersDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ordersDate", "body", "date-time", m.OrdersDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListReport) validateOriginAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginAddress) { // not required
		return nil
	}

	if m.OriginAddress != nil {
		if err := m.OriginAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originAddress")
			}
			return err
		}
	}

	return nil
}

var listReportTypeOriginGblocPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGFM","APAT","BGAC","BGNC","BKAS","CFMQ","CLPK","CNNQ","DMAT","GSAT","HAFC","HBAT","JEAT","JENQ","KKFA","LHNQ","LKNQ","MAPK","MAPS","MBFL","MLNQ","XXXX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listReportTypeOriginGblocPropEnum = append(listReportTypeOriginGblocPropEnum, v)
	}
}

const (

	// ListReportOriginGblocAGFM captures enum value "AGFM"
	ListReportOriginGblocAGFM string = "AGFM"

	// ListReportOriginGblocAPAT captures enum value "APAT"
	ListReportOriginGblocAPAT string = "APAT"

	// ListReportOriginGblocBGAC captures enum value "BGAC"
	ListReportOriginGblocBGAC string = "BGAC"

	// ListReportOriginGblocBGNC captures enum value "BGNC"
	ListReportOriginGblocBGNC string = "BGNC"

	// ListReportOriginGblocBKAS captures enum value "BKAS"
	ListReportOriginGblocBKAS string = "BKAS"

	// ListReportOriginGblocCFMQ captures enum value "CFMQ"
	ListReportOriginGblocCFMQ string = "CFMQ"

	// ListReportOriginGblocCLPK captures enum value "CLPK"
	ListReportOriginGblocCLPK string = "CLPK"

	// ListReportOriginGblocCNNQ captures enum value "CNNQ"
	ListReportOriginGblocCNNQ string = "CNNQ"

	// ListReportOriginGblocDMAT captures enum value "DMAT"
	ListReportOriginGblocDMAT string = "DMAT"

	// ListReportOriginGblocGSAT captures enum value "GSAT"
	ListReportOriginGblocGSAT string = "GSAT"

	// ListReportOriginGblocHAFC captures enum value "HAFC"
	ListReportOriginGblocHAFC string = "HAFC"

	// ListReportOriginGblocHBAT captures enum value "HBAT"
	ListReportOriginGblocHBAT string = "HBAT"

	// ListReportOriginGblocJEAT captures enum value "JEAT"
	ListReportOriginGblocJEAT string = "JEAT"

	// ListReportOriginGblocJENQ captures enum value "JENQ"
	ListReportOriginGblocJENQ string = "JENQ"

	// ListReportOriginGblocKKFA captures enum value "KKFA"
	ListReportOriginGblocKKFA string = "KKFA"

	// ListReportOriginGblocLHNQ captures enum value "LHNQ"
	ListReportOriginGblocLHNQ string = "LHNQ"

	// ListReportOriginGblocLKNQ captures enum value "LKNQ"
	ListReportOriginGblocLKNQ string = "LKNQ"

	// ListReportOriginGblocMAPK captures enum value "MAPK"
	ListReportOriginGblocMAPK string = "MAPK"

	// ListReportOriginGblocMAPS captures enum value "MAPS"
	ListReportOriginGblocMAPS string = "MAPS"

	// ListReportOriginGblocMBFL captures enum value "MBFL"
	ListReportOriginGblocMBFL string = "MBFL"

	// ListReportOriginGblocMLNQ captures enum value "MLNQ"
	ListReportOriginGblocMLNQ string = "MLNQ"

	// ListReportOriginGblocXXXX captures enum value "XXXX"
	ListReportOriginGblocXXXX string = "XXXX"
)

// prop value enum
func (m *ListReport) validateOriginGblocEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listReportTypeOriginGblocPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ListReport) validateOriginGbloc(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginGbloc) { // not required
		return nil
	}

	// value enum
	if err := m.validateOriginGblocEnum("originGbloc", "body", *m.OriginGbloc); err != nil {
		return err
	}

	return nil
}

func (m *ListReport) validatePaidDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PaidDate) { // not required
		return nil
	}

	if err := validate.FormatOf("paidDate", "body", "date", m.PaidDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var listReportTypePayGradePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["E_1","E_2","E_3","E_4","E_5","E_6","E_7","E_8","E_9","E_9_SPECIAL_SENIOR_ENLISTED","O_1_ACADEMY_GRADUATE","O_2","O_3","O_4","O_5","O_6","O_7","O_8","O_9","O_10","W_1","W_2","W_3","W_4","W_5","AVIATION_CADET","CIVILIAN_EMPLOYEE","ACADEMY_CADET","MIDSHIPMAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listReportTypePayGradePropEnum = append(listReportTypePayGradePropEnum, v)
	}
}

const (

	// ListReportPayGradeE1 captures enum value "E_1"
	ListReportPayGradeE1 string = "E_1"

	// ListReportPayGradeE2 captures enum value "E_2"
	ListReportPayGradeE2 string = "E_2"

	// ListReportPayGradeE3 captures enum value "E_3"
	ListReportPayGradeE3 string = "E_3"

	// ListReportPayGradeE4 captures enum value "E_4"
	ListReportPayGradeE4 string = "E_4"

	// ListReportPayGradeE5 captures enum value "E_5"
	ListReportPayGradeE5 string = "E_5"

	// ListReportPayGradeE6 captures enum value "E_6"
	ListReportPayGradeE6 string = "E_6"

	// ListReportPayGradeE7 captures enum value "E_7"
	ListReportPayGradeE7 string = "E_7"

	// ListReportPayGradeE8 captures enum value "E_8"
	ListReportPayGradeE8 string = "E_8"

	// ListReportPayGradeE9 captures enum value "E_9"
	ListReportPayGradeE9 string = "E_9"

	// ListReportPayGradeE9SPECIALSENIORENLISTED captures enum value "E_9_SPECIAL_SENIOR_ENLISTED"
	ListReportPayGradeE9SPECIALSENIORENLISTED string = "E_9_SPECIAL_SENIOR_ENLISTED"

	// ListReportPayGradeO1ACADEMYGRADUATE captures enum value "O_1_ACADEMY_GRADUATE"
	ListReportPayGradeO1ACADEMYGRADUATE string = "O_1_ACADEMY_GRADUATE"

	// ListReportPayGradeO2 captures enum value "O_2"
	ListReportPayGradeO2 string = "O_2"

	// ListReportPayGradeO3 captures enum value "O_3"
	ListReportPayGradeO3 string = "O_3"

	// ListReportPayGradeO4 captures enum value "O_4"
	ListReportPayGradeO4 string = "O_4"

	// ListReportPayGradeO5 captures enum value "O_5"
	ListReportPayGradeO5 string = "O_5"

	// ListReportPayGradeO6 captures enum value "O_6"
	ListReportPayGradeO6 string = "O_6"

	// ListReportPayGradeO7 captures enum value "O_7"
	ListReportPayGradeO7 string = "O_7"

	// ListReportPayGradeO8 captures enum value "O_8"
	ListReportPayGradeO8 string = "O_8"

	// ListReportPayGradeO9 captures enum value "O_9"
	ListReportPayGradeO9 string = "O_9"

	// ListReportPayGradeO10 captures enum value "O_10"
	ListReportPayGradeO10 string = "O_10"

	// ListReportPayGradeW1 captures enum value "W_1"
	ListReportPayGradeW1 string = "W_1"

	// ListReportPayGradeW2 captures enum value "W_2"
	ListReportPayGradeW2 string = "W_2"

	// ListReportPayGradeW3 captures enum value "W_3"
	ListReportPayGradeW3 string = "W_3"

	// ListReportPayGradeW4 captures enum value "W_4"
	ListReportPayGradeW4 string = "W_4"

	// ListReportPayGradeW5 captures enum value "W_5"
	ListReportPayGradeW5 string = "W_5"

	// ListReportPayGradeAVIATIONCADET captures enum value "AVIATION_CADET"
	ListReportPayGradeAVIATIONCADET string = "AVIATION_CADET"

	// ListReportPayGradeCIVILIANEMPLOYEE captures enum value "CIVILIAN_EMPLOYEE"
	ListReportPayGradeCIVILIANEMPLOYEE string = "CIVILIAN_EMPLOYEE"

	// ListReportPayGradeACADEMYCADET captures enum value "ACADEMY_CADET"
	ListReportPayGradeACADEMYCADET string = "ACADEMY_CADET"

	// ListReportPayGradeMIDSHIPMAN captures enum value "MIDSHIPMAN"
	ListReportPayGradeMIDSHIPMAN string = "MIDSHIPMAN"
)

// prop value enum
func (m *ListReport) validatePayGradeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listReportTypePayGradePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ListReport) validatePayGrade(formats strfmt.Registry) error {
	if swag.IsZero(m.PayGrade) { // not required
		return nil
	}

	// value enum
	if err := m.validatePayGradeEnum("payGrade", "body", *m.PayGrade); err != nil {
		return err
	}

	return nil
}

func (m *ListReport) validatePickupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("pickupDate", "body", "date", m.PickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListReport) validateShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("shipmentId", "body", "uuid", m.ShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListReport) validateSitInDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitInDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitInDate", "body", "date", m.SitInDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListReport) validateSitOutDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SitOutDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sitOutDate", "body", "date", m.SitOutDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list report based on the context it is used
func (m *ListReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAffiliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCratingDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListReport) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {

		if swag.IsZero(m.Address) { // not required
			return nil
		}

		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *ListReport) contextValidateAffiliation(ctx context.Context, formats strfmt.Registry) error {

	if m.Affiliation != nil {

		if swag.IsZero(m.Affiliation) { // not required
			return nil
		}

		if err := m.Affiliation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliation")
			}
			return err
		}
	}

	return nil
}

func (m *ListReport) contextValidateCratingDimensions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CratingDimensions); i++ {

		if m.CratingDimensions[i] != nil {

			if swag.IsZero(m.CratingDimensions[i]) { // not required
				return nil
			}

			if err := m.CratingDimensions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cratingDimensions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cratingDimensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListReport) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationAddress != nil {

		if swag.IsZero(m.DestinationAddress) { // not required
			return nil
		}

		if err := m.DestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ListReport) contextValidateOriginAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginAddress != nil {

		if swag.IsZero(m.OriginAddress) { // not required
			return nil
		}

		if err := m.OriginAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListReport) UnmarshalBinary(b []byte) error {
	var res ListReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
