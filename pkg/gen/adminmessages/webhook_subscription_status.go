// Code generated by go-swagger; DO NOT EDIT.

package adminmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WebhookSubscriptionStatus Webhook subscription status
//
// swagger:model WebhookSubscriptionStatus
type WebhookSubscriptionStatus string

func NewWebhookSubscriptionStatus(value WebhookSubscriptionStatus) *WebhookSubscriptionStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated WebhookSubscriptionStatus.
func (m WebhookSubscriptionStatus) Pointer() *WebhookSubscriptionStatus {
	return &m
}

const (

	// WebhookSubscriptionStatusACTIVE captures enum value "ACTIVE"
	WebhookSubscriptionStatusACTIVE WebhookSubscriptionStatus = "ACTIVE"

	// WebhookSubscriptionStatusFAILING captures enum value "FAILING"
	WebhookSubscriptionStatusFAILING WebhookSubscriptionStatus = "FAILING"

	// WebhookSubscriptionStatusDISABLED captures enum value "DISABLED"
	WebhookSubscriptionStatusDISABLED WebhookSubscriptionStatus = "DISABLED"
)

// for schema
var webhookSubscriptionStatusEnum []interface{}

func init() {
	var res []WebhookSubscriptionStatus
	if err := json.Unmarshal([]byte(`["ACTIVE","FAILING","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webhookSubscriptionStatusEnum = append(webhookSubscriptionStatusEnum, v)
	}
}

func (m WebhookSubscriptionStatus) validateWebhookSubscriptionStatusEnum(path, location string, value WebhookSubscriptionStatus) error {
	if err := validate.EnumCase(path, location, value, webhookSubscriptionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this webhook subscription status
func (m WebhookSubscriptionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWebhookSubscriptionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this webhook subscription status based on context it is used
func (m WebhookSubscriptionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
