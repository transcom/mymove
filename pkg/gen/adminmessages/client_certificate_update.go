// Code generated by go-swagger; DO NOT EDIT.

package adminmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClientCertificateUpdate client certificate update
//
// swagger:model ClientCertificateUpdate
type ClientCertificateUpdate struct {

	// allow air force orders read
	AllowAirForceOrdersRead *bool `json:"allowAirForceOrdersRead,omitempty"`

	// allow air force orders write
	AllowAirForceOrdersWrite *bool `json:"allowAirForceOrdersWrite,omitempty"`

	// allow army orders read
	AllowArmyOrdersRead *bool `json:"allowArmyOrdersRead,omitempty"`

	// allow army orders write
	AllowArmyOrdersWrite *bool `json:"allowArmyOrdersWrite,omitempty"`

	// allow coast guard orders read
	AllowCoastGuardOrdersRead *bool `json:"allowCoastGuardOrdersRead,omitempty"`

	// allow coast guard orders write
	AllowCoastGuardOrdersWrite *bool `json:"allowCoastGuardOrdersWrite,omitempty"`

	// allow dps auth API
	AllowDpsAuthAPI *bool `json:"allowDpsAuthAPI,omitempty"`

	// allow marine corps orders read
	AllowMarineCorpsOrdersRead *bool `json:"allowMarineCorpsOrdersRead,omitempty"`

	// allow marine corps orders write
	AllowMarineCorpsOrdersWrite *bool `json:"allowMarineCorpsOrdersWrite,omitempty"`

	// allow navy orders read
	AllowNavyOrdersRead *bool `json:"allowNavyOrdersRead,omitempty"`

	// allow navy orders write
	AllowNavyOrdersWrite *bool `json:"allowNavyOrdersWrite,omitempty"`

	// allow orders API
	AllowOrdersAPI *bool `json:"allowOrdersAPI,omitempty"`

	// allow p p t a s
	AllowPPTAS *bool `json:"allowPPTAS,omitempty"`

	// allow prime
	AllowPrime *bool `json:"allowPrime,omitempty"`

	// pptas branch
	PptasBranch *Affiliation `json:"pptasBranch,omitempty"`

	// sha256 digest
	// Example: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
	Sha256Digest string `json:"sha256Digest,omitempty"`

	// subject
	// Example: CN=example-user,OU=DoD+OU=PKI+OU=CONTRACTOR,O=U.S. Government,C=US
	Subject string `json:"subject,omitempty"`
}

// Validate validates this client certificate update
func (m *ClientCertificateUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePptasBranch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientCertificateUpdate) validatePptasBranch(formats strfmt.Registry) error {
	if swag.IsZero(m.PptasBranch) { // not required
		return nil
	}

	if m.PptasBranch != nil {
		if err := m.PptasBranch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pptasBranch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pptasBranch")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this client certificate update based on the context it is used
func (m *ClientCertificateUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePptasBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientCertificateUpdate) contextValidatePptasBranch(ctx context.Context, formats strfmt.Registry) error {

	if m.PptasBranch != nil {

		if swag.IsZero(m.PptasBranch) { // not required
			return nil
		}

		if err := m.PptasBranch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pptasBranch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pptasBranch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClientCertificateUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientCertificateUpdate) UnmarshalBinary(b []byte) error {
	var res ClientCertificateUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
