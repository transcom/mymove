// Code generated by go-swagger; DO NOT EDIT.

package adminmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RolePrivilege role privilege
//
// swagger:model RolePrivilege
type RolePrivilege struct {

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// id
	// Example: c56a4780-65aa-42ec-a945-5fd87dec0538
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// privilege Id
	// Example: 463c2034-d197-4d9a-897e-8bbe64893a31
	// Format: uuid
	PrivilegeID strfmt.UUID `json:"privilegeId,omitempty"`

	// privilege name
	// Example: Supervisor
	PrivilegeName string `json:"privilegeName,omitempty"`

	// privilege type
	// Example: supervisor
	PrivilegeType string `json:"privilegeType,omitempty"`

	// role Id
	// Example: c728caf3-5f9d-4db6-a9d1-7cd8ff013b2e
	// Format: uuid
	RoleID strfmt.UUID `json:"roleId,omitempty"`

	// role name
	// Example: Task Ordering Officer
	RoleName string `json:"roleName,omitempty"`

	// role type
	// Example: task_ordering_officer
	RoleType string `json:"roleType,omitempty"`

	// updated at
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this role privilege
func (m *RolePrivilege) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivilegeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RolePrivilege) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RolePrivilege) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RolePrivilege) validatePrivilegeID(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivilegeID) { // not required
		return nil
	}

	if err := validate.FormatOf("privilegeId", "body", "uuid", m.PrivilegeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RolePrivilege) validateRoleID(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleID) { // not required
		return nil
	}

	if err := validate.FormatOf("roleId", "body", "uuid", m.RoleID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RolePrivilege) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this role privilege based on the context it is used
func (m *RolePrivilege) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RolePrivilege) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *RolePrivilege) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RolePrivilege) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RolePrivilege) UnmarshalBinary(b []byte) error {
	var res RolePrivilege
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
