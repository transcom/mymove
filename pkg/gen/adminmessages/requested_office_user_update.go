// Code generated by go-swagger; DO NOT EDIT.

package adminmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestedOfficeUserUpdate requested office user update
//
// swagger:model RequestedOfficeUserUpdate
type RequestedOfficeUserUpdate struct {

	// edipi
	Edipi string `json:"edipi,omitempty"`

	// email
	// Example: user@userdomain.com
	Email string `json:"email,omitempty"`

	// First Name
	FirstName *string `json:"firstName,omitempty"`

	// Last Name
	LastName *string `json:"lastName,omitempty"`

	// Middle Initials
	// Example: Q.
	MiddleInitials *string `json:"middleInitials,omitempty"`

	// other unique Id
	OtherUniqueID string `json:"otherUniqueId,omitempty"`

	// rejection reason
	RejectionReason string `json:"rejectionReason,omitempty"`

	// roles
	Roles []*OfficeUserRole `json:"roles"`

	// status
	// Enum: [APPROVED REJECTED]
	Status string `json:"status,omitempty"`

	// telephone
	// Example: 212-555-5555
	// Pattern: ^[2-9]\d{2}-\d{3}-\d{4}$
	Telephone *string `json:"telephone,omitempty"`

	// transportation office Id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Format: uuid
	TransportationOfficeID *strfmt.UUID `json:"transportationOfficeId,omitempty"`
}

// Validate validates this requested office user update
func (m *RequestedOfficeUserUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelephone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportationOfficeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestedOfficeUserUpdate) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var requestedOfficeUserUpdateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APPROVED","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestedOfficeUserUpdateTypeStatusPropEnum = append(requestedOfficeUserUpdateTypeStatusPropEnum, v)
	}
}

const (

	// RequestedOfficeUserUpdateStatusAPPROVED captures enum value "APPROVED"
	RequestedOfficeUserUpdateStatusAPPROVED string = "APPROVED"

	// RequestedOfficeUserUpdateStatusREJECTED captures enum value "REJECTED"
	RequestedOfficeUserUpdateStatusREJECTED string = "REJECTED"
)

// prop value enum
func (m *RequestedOfficeUserUpdate) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestedOfficeUserUpdateTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RequestedOfficeUserUpdate) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *RequestedOfficeUserUpdate) validateTelephone(formats strfmt.Registry) error {
	if swag.IsZero(m.Telephone) { // not required
		return nil
	}

	if err := validate.Pattern("telephone", "body", *m.Telephone, `^[2-9]\d{2}-\d{3}-\d{4}$`); err != nil {
		return err
	}

	return nil
}

func (m *RequestedOfficeUserUpdate) validateTransportationOfficeID(formats strfmt.Registry) error {
	if swag.IsZero(m.TransportationOfficeID) { // not required
		return nil
	}

	if err := validate.FormatOf("transportationOfficeId", "body", "uuid", m.TransportationOfficeID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this requested office user update based on the context it is used
func (m *RequestedOfficeUserUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestedOfficeUserUpdate) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Roles); i++ {

		if m.Roles[i] != nil {

			if swag.IsZero(m.Roles[i]) { // not required
				return nil
			}

			if err := m.Roles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequestedOfficeUserUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestedOfficeUserUpdate) UnmarshalBinary(b []byte) error {
	var res RequestedOfficeUserUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
