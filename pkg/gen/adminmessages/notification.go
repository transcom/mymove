// Code generated by go-swagger; DO NOT EDIT.

package adminmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Notification notification
//
// swagger:model Notification
type Notification struct {

	// created at
	// Required: true
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt"`

	// email
	// Required: true
	Email *string `json:"email"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// notification type
	// Required: true
	// Enum: [MOVE_PAYMENT_REMINDER_EMAIL]
	NotificationType *string `json:"notificationType"`

	// service member Id
	// Required: true
	// Format: uuid
	ServiceMemberID *strfmt.UUID `json:"serviceMemberId"`

	// ses message Id
	// Required: true
	SesMessageID *string `json:"sesMessageId"`
}

// Validate validates this notification
func (m *Notification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMemberID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSesMessageID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Notification) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var notificationTypeNotificationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MOVE_PAYMENT_REMINDER_EMAIL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationTypeNotificationTypePropEnum = append(notificationTypeNotificationTypePropEnum, v)
	}
}

const (

	// NotificationNotificationTypeMOVEPAYMENTREMINDEREMAIL captures enum value "MOVE_PAYMENT_REMINDER_EMAIL"
	NotificationNotificationTypeMOVEPAYMENTREMINDEREMAIL string = "MOVE_PAYMENT_REMINDER_EMAIL"
)

// prop value enum
func (m *Notification) validateNotificationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationTypeNotificationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Notification) validateNotificationType(formats strfmt.Registry) error {

	if err := validate.Required("notificationType", "body", m.NotificationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateNotificationTypeEnum("notificationType", "body", *m.NotificationType); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateServiceMemberID(formats strfmt.Registry) error {

	if err := validate.Required("serviceMemberId", "body", m.ServiceMemberID); err != nil {
		return err
	}

	if err := validate.FormatOf("serviceMemberId", "body", "uuid", m.ServiceMemberID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateSesMessageID(formats strfmt.Registry) error {

	if err := validate.Required("sesMessageId", "body", m.SesMessageID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this notification based on the context it is used
func (m *Notification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Notification) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Notification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Notification) UnmarshalBinary(b []byte) error {
	var res Notification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
