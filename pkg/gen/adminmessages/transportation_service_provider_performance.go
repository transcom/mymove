// Code generated by go-swagger; DO NOT EDIT.

package adminmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportationServiceProviderPerformance transportation service provider performance
//
// swagger:model TransportationServiceProviderPerformance
type TransportationServiceProviderPerformance struct {

	// best value score
	// Example: 98.01
	// Required: true
	BestValueScore *float64 `json:"bestValueScore"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// linehaul rate
	// Example: 0.26085695149376986
	// Required: true
	LinehaulRate *float64 `json:"linehaulRate"`

	// offer count
	// Example: 1
	// Required: true
	OfferCount *int64 `json:"offerCount"`

	// performance period end
	// Required: true
	// Format: date-time
	PerformancePeriodEnd *strfmt.DateTime `json:"performancePeriodEnd"`

	// performance period start
	// Required: true
	// Format: date-time
	PerformancePeriodStart *strfmt.DateTime `json:"performancePeriodStart"`

	// quality band
	// Example: 29
	QualityBand *int64 `json:"qualityBand,omitempty"`

	// rate cycle end
	// Required: true
	// Format: date-time
	RateCycleEnd *strfmt.DateTime `json:"rateCycleEnd"`

	// rate cycle start
	// Required: true
	// Format: date-time
	RateCycleStart *strfmt.DateTime `json:"rateCycleStart"`

	// sit rate
	// Example: 0.26085695149376986
	// Required: true
	SitRate *float64 `json:"sitRate"`

	// traffic distribution list Id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	TrafficDistributionListID *strfmt.UUID `json:"trafficDistributionListId"`

	// transportation service provider Id
	// Example: c56a4180-65aa-42ec-a945-5fd21dec0538
	// Required: true
	// Format: uuid
	TransportationServiceProviderID *strfmt.UUID `json:"transportationServiceProviderId"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`
}

// Validate validates this transportation service provider performance
func (m *TransportationServiceProviderPerformance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBestValueScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinehaulRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformancePeriodEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformancePeriodStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateCycleEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateCycleStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficDistributionListID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportationServiceProviderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportationServiceProviderPerformance) validateBestValueScore(formats strfmt.Registry) error {

	if err := validate.Required("bestValueScore", "body", m.BestValueScore); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateLinehaulRate(formats strfmt.Registry) error {

	if err := validate.Required("linehaulRate", "body", m.LinehaulRate); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateOfferCount(formats strfmt.Registry) error {

	if err := validate.Required("offerCount", "body", m.OfferCount); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validatePerformancePeriodEnd(formats strfmt.Registry) error {

	if err := validate.Required("performancePeriodEnd", "body", m.PerformancePeriodEnd); err != nil {
		return err
	}

	if err := validate.FormatOf("performancePeriodEnd", "body", "date-time", m.PerformancePeriodEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validatePerformancePeriodStart(formats strfmt.Registry) error {

	if err := validate.Required("performancePeriodStart", "body", m.PerformancePeriodStart); err != nil {
		return err
	}

	if err := validate.FormatOf("performancePeriodStart", "body", "date-time", m.PerformancePeriodStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateRateCycleEnd(formats strfmt.Registry) error {

	if err := validate.Required("rateCycleEnd", "body", m.RateCycleEnd); err != nil {
		return err
	}

	if err := validate.FormatOf("rateCycleEnd", "body", "date-time", m.RateCycleEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateRateCycleStart(formats strfmt.Registry) error {

	if err := validate.Required("rateCycleStart", "body", m.RateCycleStart); err != nil {
		return err
	}

	if err := validate.FormatOf("rateCycleStart", "body", "date-time", m.RateCycleStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateSitRate(formats strfmt.Registry) error {

	if err := validate.Required("sitRate", "body", m.SitRate); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateTrafficDistributionListID(formats strfmt.Registry) error {

	if err := validate.Required("trafficDistributionListId", "body", m.TrafficDistributionListID); err != nil {
		return err
	}

	if err := validate.FormatOf("trafficDistributionListId", "body", "uuid", m.TrafficDistributionListID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateTransportationServiceProviderID(formats strfmt.Registry) error {

	if err := validate.Required("transportationServiceProviderId", "body", m.TransportationServiceProviderID); err != nil {
		return err
	}

	if err := validate.FormatOf("transportationServiceProviderId", "body", "uuid", m.TransportationServiceProviderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this transportation service provider performance based on context it is used
func (m *TransportationServiceProviderPerformance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TransportationServiceProviderPerformance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportationServiceProviderPerformance) UnmarshalBinary(b []byte) error {
	var res TransportationServiceProviderPerformance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
