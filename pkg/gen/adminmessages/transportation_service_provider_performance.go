// Code generated by go-swagger; DO NOT EDIT.

package adminmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportationServiceProviderPerformance transportation service provider performance
// swagger:model TransportationServiceProviderPerformance
type TransportationServiceProviderPerformance struct {

	// best value score
	// Required: true
	BestValueScore *float64 `json:"best_value_score"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// linehaul rate
	// Required: true
	LinehaulRate *float64 `json:"linehaul_rate"`

	// offer count
	// Required: true
	OfferCount *int64 `json:"offer_count"`

	// performance period end
	// Required: true
	// Format: date-time
	PerformancePeriodEnd *strfmt.DateTime `json:"performance_period_end"`

	// performance period start
	// Required: true
	// Format: date-time
	PerformancePeriodStart *strfmt.DateTime `json:"performance_period_start"`

	// quality band
	QualityBand *int64 `json:"quality_band,omitempty"`

	// rate cycle end
	// Required: true
	// Format: date-time
	RateCycleEnd *strfmt.DateTime `json:"rate_cycle_end"`

	// rate cycle start
	// Required: true
	// Format: date-time
	RateCycleStart *strfmt.DateTime `json:"rate_cycle_start"`

	// sit rate
	// Required: true
	SitRate *float64 `json:"sit_rate"`

	// traffic distribution list id
	// Required: true
	// Format: uuid
	TrafficDistributionListID *strfmt.UUID `json:"traffic_distribution_list_id"`

	// transportation service provider id
	// Required: true
	// Format: uuid
	TransportationServiceProviderID *strfmt.UUID `json:"transportation_service_provider_id"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this transportation service provider performance
func (m *TransportationServiceProviderPerformance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBestValueScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinehaulRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformancePeriodEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformancePeriodStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateCycleEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateCycleStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSitRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficDistributionListID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportationServiceProviderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportationServiceProviderPerformance) validateBestValueScore(formats strfmt.Registry) error {

	if err := validate.Required("best_value_score", "body", m.BestValueScore); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateLinehaulRate(formats strfmt.Registry) error {

	if err := validate.Required("linehaul_rate", "body", m.LinehaulRate); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateOfferCount(formats strfmt.Registry) error {

	if err := validate.Required("offer_count", "body", m.OfferCount); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validatePerformancePeriodEnd(formats strfmt.Registry) error {

	if err := validate.Required("performance_period_end", "body", m.PerformancePeriodEnd); err != nil {
		return err
	}

	if err := validate.FormatOf("performance_period_end", "body", "date-time", m.PerformancePeriodEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validatePerformancePeriodStart(formats strfmt.Registry) error {

	if err := validate.Required("performance_period_start", "body", m.PerformancePeriodStart); err != nil {
		return err
	}

	if err := validate.FormatOf("performance_period_start", "body", "date-time", m.PerformancePeriodStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateRateCycleEnd(formats strfmt.Registry) error {

	if err := validate.Required("rate_cycle_end", "body", m.RateCycleEnd); err != nil {
		return err
	}

	if err := validate.FormatOf("rate_cycle_end", "body", "date-time", m.RateCycleEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateRateCycleStart(formats strfmt.Registry) error {

	if err := validate.Required("rate_cycle_start", "body", m.RateCycleStart); err != nil {
		return err
	}

	if err := validate.FormatOf("rate_cycle_start", "body", "date-time", m.RateCycleStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateSitRate(formats strfmt.Registry) error {

	if err := validate.Required("sit_rate", "body", m.SitRate); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateTrafficDistributionListID(formats strfmt.Registry) error {

	if err := validate.Required("traffic_distribution_list_id", "body", m.TrafficDistributionListID); err != nil {
		return err
	}

	if err := validate.FormatOf("traffic_distribution_list_id", "body", "uuid", m.TrafficDistributionListID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateTransportationServiceProviderID(formats strfmt.Registry) error {

	if err := validate.Required("transportation_service_provider_id", "body", m.TransportationServiceProviderID); err != nil {
		return err
	}

	if err := validate.FormatOf("transportation_service_provider_id", "body", "uuid", m.TransportationServiceProviderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationServiceProviderPerformance) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransportationServiceProviderPerformance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportationServiceProviderPerformance) UnmarshalBinary(b []byte) error {
	var res TransportationServiceProviderPerformance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
