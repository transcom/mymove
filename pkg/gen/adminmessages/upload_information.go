// Code generated by go-swagger; DO NOT EDIT.

package adminmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UploadInformation upload information
// swagger:model UploadInformation
type UploadInformation struct {

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// move locator
	MoveLocator string `json:"move_locator,omitempty"`

	// upload
	Upload *Upload `json:"upload,omitempty"`
}

// Validate validates this upload information
func (m *UploadInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UploadInformation) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UploadInformation) validateUpload(formats strfmt.Registry) error {

	if swag.IsZero(m.Upload) { // not required
		return nil
	}

	if m.Upload != nil {
		if err := m.Upload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UploadInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UploadInformation) UnmarshalBinary(b []byte) error {
	var res UploadInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
