// Code generated by go-swagger; DO NOT EDIT.

package adminmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Upload upload
//
// swagger:model Upload
type Upload struct {

	// content type
	// Enum: [application/pdf image/jpeg image/png]
	ContentType string `json:"contentType,omitempty"`

	// Created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`

	// Size in Bytes
	Size int64 `json:"size,omitempty"`
}

// Validate validates this upload
func (m *Upload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var uploadTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["application/pdf","image/jpeg","image/png"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		uploadTypeContentTypePropEnum = append(uploadTypeContentTypePropEnum, v)
	}
}

const (

	// UploadContentTypeApplicationPdf captures enum value "application/pdf"
	UploadContentTypeApplicationPdf string = "application/pdf"

	// UploadContentTypeImageJpeg captures enum value "image/jpeg"
	UploadContentTypeImageJpeg string = "image/jpeg"

	// UploadContentTypeImagePng captures enum value "image/png"
	UploadContentTypeImagePng string = "image/png"
)

// prop value enum
func (m *Upload) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, uploadTypeContentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Upload) validateContentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateContentTypeEnum("contentType", "body", m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *Upload) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this upload based on the context it is used
func (m *Upload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Upload) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Upload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Upload) UnmarshalBinary(b []byte) error {
	var res Upload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
