// Code generated by go-swagger; DO NOT EDIT.

package ordersmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Revision revision
// swagger:model Revision
type Revision struct {

	// Free-form text that may or may not contain information relevant to moving.
	Comments *string `json:"comments,omitempty"`

	// The date and time that these orders were cut. If omitted, the current date and time will be used.
	// Format: date-time
	DateIssued *strfmt.DateTime `json:"dateIssued,omitempty"`

	// gaining unit
	// Required: true
	GainingUnit *Unit `json:"gainingUnit"`

	// True if the service member has any dependents (e.g., spouse, children, caring for an elderly parent, etc.), False otherwise.
	// When the member has dependents, it usually raises their weight entitlement.
	//
	// Required: true
	HasDependents *bool `json:"hasDependents"`

	// losing unit
	// Required: true
	LosingUnit *Unit `json:"losingUnit"`

	// member
	// Required: true
	Member *Member `json:"member"`

	// No Cost Move. If true, then these orders do not authorize any move expenses. If omitted or false, then these orders are a PCS and should authorize move expenses.
	// One scenario that leads to a no-cost move is a Permanent Change of Assignment without Permanent Change of Station. A PCA without PCS happens when a member is assigned to a new unit at the same duty station, or to a new duty station geographically close to the current duty station.
	// It is not unheard of for the initial revision of orders to have this set to false and then later to be amended to true and vice-versa.
	//
	NoCostMove bool `json:"noCostMove,omitempty"`

	// nts accounting
	NtsAccounting *Accounting `json:"ntsAccounting,omitempty"`

	// orders type
	// Required: true
	OrdersType OrdersType `json:"ordersType"`

	// pcs accounting
	PcsAccounting *Accounting `json:"pcsAccounting,omitempty"`

	// pov shipment accounting
	PovShipmentAccounting *Accounting `json:"povShipmentAccounting,omitempty"`

	// pov storage accounting
	PovStorageAccounting *Accounting `json:"povStorageAccounting,omitempty"`

	// Earliest date that the service member is allowed to report for duty at the new duty station. If omitted, the member is allowed to report as early as desired.
	// Format: date
	ReportNoEarlierThan *strfmt.Date `json:"reportNoEarlierThan,omitempty"`

	// Latest date that the service member is allowed to report for duty at the new duty station. Should be included for most Orders types, but can be missing for Separation / Retirement Orders.
	// Format: date
	ReportNoLaterThan *strfmt.Date `json:"reportNoLaterThan,omitempty"`

	// Sequence number. As Orders are amended, the Revision with the highest sequence number is considered the current, authoritative version of the Orders, even if its dateIssued is earlier.
	//
	// The sequence number is NOT required to increase monotonically or sequentially; in other words, if a set of orders is modified twice, the sequence numbers could be 1, 5858300, and 30.
	//
	// Required: true
	// Minimum: 0
	SeqNum *int64 `json:"seqNum"`

	// status
	// Required: true
	Status Status `json:"status"`

	// TDY (Temporary Duty Yonder) en-route. If omitted, assume false.
	TdyEnRoute bool `json:"tdyEnRoute,omitempty"`

	// tour type
	TourType TourType `json:"tourType,omitempty"`

	// ub accounting
	UbAccounting *Accounting `json:"ubAccounting,omitempty"`
}

// Validate validates this revision
func (m *Revision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGainingUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasDependents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLosingUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtsAccounting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePcsAccounting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePovShipmentAccounting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePovStorageAccounting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportNoEarlierThan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportNoLaterThan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeqNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTourType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUbAccounting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Revision) validateDateIssued(formats strfmt.Registry) error {

	if swag.IsZero(m.DateIssued) { // not required
		return nil
	}

	if err := validate.FormatOf("dateIssued", "body", "date-time", m.DateIssued.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Revision) validateGainingUnit(formats strfmt.Registry) error {

	if err := validate.Required("gainingUnit", "body", m.GainingUnit); err != nil {
		return err
	}

	if m.GainingUnit != nil {
		if err := m.GainingUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gainingUnit")
			}
			return err
		}
	}

	return nil
}

func (m *Revision) validateHasDependents(formats strfmt.Registry) error {

	if err := validate.Required("hasDependents", "body", m.HasDependents); err != nil {
		return err
	}

	return nil
}

func (m *Revision) validateLosingUnit(formats strfmt.Registry) error {

	if err := validate.Required("losingUnit", "body", m.LosingUnit); err != nil {
		return err
	}

	if m.LosingUnit != nil {
		if err := m.LosingUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("losingUnit")
			}
			return err
		}
	}

	return nil
}

func (m *Revision) validateMember(formats strfmt.Registry) error {

	if err := validate.Required("member", "body", m.Member); err != nil {
		return err
	}

	if m.Member != nil {
		if err := m.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member")
			}
			return err
		}
	}

	return nil
}

func (m *Revision) validateNtsAccounting(formats strfmt.Registry) error {

	if swag.IsZero(m.NtsAccounting) { // not required
		return nil
	}

	if m.NtsAccounting != nil {
		if err := m.NtsAccounting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntsAccounting")
			}
			return err
		}
	}

	return nil
}

func (m *Revision) validateOrdersType(formats strfmt.Registry) error {

	if err := m.OrdersType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ordersType")
		}
		return err
	}

	return nil
}

func (m *Revision) validatePcsAccounting(formats strfmt.Registry) error {

	if swag.IsZero(m.PcsAccounting) { // not required
		return nil
	}

	if m.PcsAccounting != nil {
		if err := m.PcsAccounting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pcsAccounting")
			}
			return err
		}
	}

	return nil
}

func (m *Revision) validatePovShipmentAccounting(formats strfmt.Registry) error {

	if swag.IsZero(m.PovShipmentAccounting) { // not required
		return nil
	}

	if m.PovShipmentAccounting != nil {
		if err := m.PovShipmentAccounting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("povShipmentAccounting")
			}
			return err
		}
	}

	return nil
}

func (m *Revision) validatePovStorageAccounting(formats strfmt.Registry) error {

	if swag.IsZero(m.PovStorageAccounting) { // not required
		return nil
	}

	if m.PovStorageAccounting != nil {
		if err := m.PovStorageAccounting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("povStorageAccounting")
			}
			return err
		}
	}

	return nil
}

func (m *Revision) validateReportNoEarlierThan(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportNoEarlierThan) { // not required
		return nil
	}

	if err := validate.FormatOf("reportNoEarlierThan", "body", "date", m.ReportNoEarlierThan.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Revision) validateReportNoLaterThan(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportNoLaterThan) { // not required
		return nil
	}

	if err := validate.FormatOf("reportNoLaterThan", "body", "date", m.ReportNoLaterThan.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Revision) validateSeqNum(formats strfmt.Registry) error {

	if err := validate.Required("seqNum", "body", m.SeqNum); err != nil {
		return err
	}

	if err := validate.MinimumInt("seqNum", "body", int64(*m.SeqNum), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Revision) validateStatus(formats strfmt.Registry) error {

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *Revision) validateTourType(formats strfmt.Registry) error {

	if swag.IsZero(m.TourType) { // not required
		return nil
	}

	if err := m.TourType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tourType")
		}
		return err
	}

	return nil
}

func (m *Revision) validateUbAccounting(formats strfmt.Registry) error {

	if swag.IsZero(m.UbAccounting) { // not required
		return nil
	}

	if m.UbAccounting != nil {
		if err := m.UbAccounting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ubAccounting")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Revision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Revision) UnmarshalBinary(b []byte) error {
	var res Revision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
