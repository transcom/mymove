// Code generated by go-swagger; DO NOT EDIT.

package ordersmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Rank DoD paygrade or rank of the service member. Some of these ranks will have identical entitlements.
//
// swagger:model Rank
type Rank string

func NewRank(value Rank) *Rank {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Rank.
func (m Rank) Pointer() *Rank {
	return &m
}

const (

	// RankAviationDashCadet captures enum value "aviation-cadet"
	RankAviationDashCadet Rank = "aviation-cadet"

	// RankCadet captures enum value "cadet"
	RankCadet Rank = "cadet"

	// RankCivilian captures enum value "civilian"
	RankCivilian Rank = "civilian"

	// RankEDash1 captures enum value "e-1"
	RankEDash1 Rank = "e-1"

	// RankEDash2 captures enum value "e-2"
	RankEDash2 Rank = "e-2"

	// RankEDash3 captures enum value "e-3"
	RankEDash3 Rank = "e-3"

	// RankEDash4 captures enum value "e-4"
	RankEDash4 Rank = "e-4"

	// RankEDash5 captures enum value "e-5"
	RankEDash5 Rank = "e-5"

	// RankEDash6 captures enum value "e-6"
	RankEDash6 Rank = "e-6"

	// RankEDash7 captures enum value "e-7"
	RankEDash7 Rank = "e-7"

	// RankEDash8 captures enum value "e-8"
	RankEDash8 Rank = "e-8"

	// RankEDash9 captures enum value "e-9"
	RankEDash9 Rank = "e-9"

	// RankEDash9DashSPECIALDashSENIORDashENLISTED captures enum value "E-9-SPECIAL-SENIOR-ENLISTED"
	RankEDash9DashSPECIALDashSENIORDashENLISTED Rank = "E-9-SPECIAL-SENIOR-ENLISTED"

	// RankMidshipman captures enum value "midshipman"
	RankMidshipman Rank = "midshipman"

	// RankODash1DashACADEMYDashGRADUATE captures enum value "o-1-ACADEMY-GRADUATE"
	RankODash1DashACADEMYDashGRADUATE Rank = "o-1-ACADEMY-GRADUATE"

	// RankODash2 captures enum value "o-2"
	RankODash2 Rank = "o-2"

	// RankODash3 captures enum value "o-3"
	RankODash3 Rank = "o-3"

	// RankODash4 captures enum value "o-4"
	RankODash4 Rank = "o-4"

	// RankODash5 captures enum value "o-5"
	RankODash5 Rank = "o-5"

	// RankODash6 captures enum value "o-6"
	RankODash6 Rank = "o-6"

	// RankODash7 captures enum value "o-7"
	RankODash7 Rank = "o-7"

	// RankODash8 captures enum value "o-8"
	RankODash8 Rank = "o-8"

	// RankODash9 captures enum value "o-9"
	RankODash9 Rank = "o-9"

	// RankODash10 captures enum value "o-10"
	RankODash10 Rank = "o-10"

	// RankWDash1 captures enum value "w-1"
	RankWDash1 Rank = "w-1"

	// RankWDash2 captures enum value "w-2"
	RankWDash2 Rank = "w-2"

	// RankWDash3 captures enum value "w-3"
	RankWDash3 Rank = "w-3"

	// RankWDash4 captures enum value "w-4"
	RankWDash4 Rank = "w-4"

	// RankWDash5 captures enum value "w-5"
	RankWDash5 Rank = "w-5"
)

// for schema
var rankEnum []interface{}

func init() {
	var res []Rank
	if err := json.Unmarshal([]byte(`["aviation-cadet","cadet","civilian","e-1","e-2","e-3","e-4","e-5","e-6","e-7","e-8","e-9","E-9-SPECIAL-SENIOR-ENLISTED","midshipman","o-1-ACADEMY-GRADUATE","o-2","o-3","o-4","o-5","o-6","o-7","o-8","o-9","o-10","w-1","w-2","w-3","w-4","w-5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rankEnum = append(rankEnum, v)
	}
}

func (m Rank) validateRankEnum(path, location string, value Rank) error {
	if err := validate.EnumCase(path, location, value, rankEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this rank
func (m Rank) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRankEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this rank based on context it is used
func (m Rank) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
