// Code generated by go-swagger; DO NOT EDIT.

package ordersmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Rank DoD paygrade or rank of the service member. Some of these ranks will have identical entitlements.
// swagger:model Rank
type Rank string

const (

	// RankAviationCadet captures enum value "aviation-cadet"
	RankAviationCadet Rank = "aviation-cadet"

	// RankCadet captures enum value "cadet"
	RankCadet Rank = "cadet"

	// RankCivilian captures enum value "civilian"
	RankCivilian Rank = "civilian"

	// RankE1 captures enum value "e-1"
	RankE1 Rank = "e-1"

	// RankE2 captures enum value "e-2"
	RankE2 Rank = "e-2"

	// RankE3 captures enum value "e-3"
	RankE3 Rank = "e-3"

	// RankE4 captures enum value "e-4"
	RankE4 Rank = "e-4"

	// RankE5 captures enum value "e-5"
	RankE5 Rank = "e-5"

	// RankE6 captures enum value "e-6"
	RankE6 Rank = "e-6"

	// RankE7 captures enum value "e-7"
	RankE7 Rank = "e-7"

	// RankE8 captures enum value "e-8"
	RankE8 Rank = "e-8"

	// RankE9 captures enum value "e-9"
	RankE9 Rank = "e-9"

	// RankMidshipman captures enum value "midshipman"
	RankMidshipman Rank = "midshipman"

	// RankO1 captures enum value "o-1"
	RankO1 Rank = "o-1"

	// RankO2 captures enum value "o-2"
	RankO2 Rank = "o-2"

	// RankO3 captures enum value "o-3"
	RankO3 Rank = "o-3"

	// RankO4 captures enum value "o-4"
	RankO4 Rank = "o-4"

	// RankO5 captures enum value "o-5"
	RankO5 Rank = "o-5"

	// RankO6 captures enum value "o-6"
	RankO6 Rank = "o-6"

	// RankO7 captures enum value "o-7"
	RankO7 Rank = "o-7"

	// RankO8 captures enum value "o-8"
	RankO8 Rank = "o-8"

	// RankO9 captures enum value "o-9"
	RankO9 Rank = "o-9"

	// RankO10 captures enum value "o-10"
	RankO10 Rank = "o-10"

	// RankW1 captures enum value "w-1"
	RankW1 Rank = "w-1"

	// RankW2 captures enum value "w-2"
	RankW2 Rank = "w-2"

	// RankW3 captures enum value "w-3"
	RankW3 Rank = "w-3"

	// RankW4 captures enum value "w-4"
	RankW4 Rank = "w-4"

	// RankW5 captures enum value "w-5"
	RankW5 Rank = "w-5"
)

// for schema
var rankEnum []interface{}

func init() {
	var res []Rank
	if err := json.Unmarshal([]byte(`["aviation-cadet","cadet","civilian","e-1","e-2","e-3","e-4","e-5","e-6","e-7","e-8","e-9","midshipman","o-1","o-2","o-3","o-4","o-5","o-6","o-7","o-8","o-9","o-10","w-1","w-2","w-3","w-4","w-5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rankEnum = append(rankEnum, v)
	}
}

func (m Rank) validateRankEnum(path, location string, value Rank) error {
	if err := validate.Enum(path, location, value, rankEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this rank
func (m Rank) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRankEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
