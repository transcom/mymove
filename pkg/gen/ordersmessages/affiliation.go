// Code generated by go-swagger; DO NOT EDIT.

package ordersmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Affiliation Military branch of service
//
// swagger:model Affiliation
type Affiliation string

func NewAffiliation(value Affiliation) *Affiliation {
	v := value
	return &v
}

const (

	// AffiliationAirDashForce captures enum value "air-force"
	AffiliationAirDashForce Affiliation = "air-force"

	// AffiliationArmy captures enum value "army"
	AffiliationArmy Affiliation = "army"

	// AffiliationCivilianDashAgency captures enum value "civilian-agency"
	AffiliationCivilianDashAgency Affiliation = "civilian-agency"

	// AffiliationCoastDashGuard captures enum value "coast-guard"
	AffiliationCoastDashGuard Affiliation = "coast-guard"

	// AffiliationMarineDashCorps captures enum value "marine-corps"
	AffiliationMarineDashCorps Affiliation = "marine-corps"

	// AffiliationNavy captures enum value "navy"
	AffiliationNavy Affiliation = "navy"
)

// for schema
var affiliationEnum []interface{}

func init() {
	var res []Affiliation
	if err := json.Unmarshal([]byte(`["air-force","army","civilian-agency","coast-guard","marine-corps","navy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		affiliationEnum = append(affiliationEnum, v)
	}
}

func (m Affiliation) validateAffiliationEnum(path, location string, value Affiliation) error {
	if err := validate.EnumCase(path, location, value, affiliationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this affiliation
func (m Affiliation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAffiliationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this affiliation based on context it is used
func (m Affiliation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
