// Code generated by go-swagger; DO NOT EDIT.

package ordersmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// OrdersType The common types fit into the acronym ASTRO-U.
//   * **A**ccession - Joining the military
//   * **S**eparation / Retirement - Leaving the military
//   * **T**raining
//   * **R**otational
//   * **O**perational
//   * **U**nit Move - When an entire unit is reassigned to another installation, often as a deployment
//
// As of this writing, none of the branches of service distinguish between
// separation and retirement Orders in their systems, even though the NTS
// entitlement lasts longer for retirement.
//
// Consequences of this field include
//   * NTS entitlements are different between Orders types.
//   * Deadlines to create a shipment associated with Orders differs by Orders type.
//   * Accession, separation, and retirement moves currently require the
//     member to go through in-person counseling at the TMO / PPPO.
//
// swagger:model OrdersType
type OrdersType string

const (

	// OrdersTypeAccession captures enum value "accession"
	OrdersTypeAccession OrdersType = "accession"

	// OrdersTypeBetweenDutyStations captures enum value "between-duty-stations"
	OrdersTypeBetweenDutyStations OrdersType = "between-duty-stations"

	// OrdersTypeBrac captures enum value "brac"
	OrdersTypeBrac OrdersType = "brac"

	// OrdersTypeCot captures enum value "cot"
	OrdersTypeCot OrdersType = "cot"

	// OrdersTypeEmergencyEvac captures enum value "emergency-evac"
	OrdersTypeEmergencyEvac OrdersType = "emergency-evac"

	// OrdersTypeIpcot captures enum value "ipcot"
	OrdersTypeIpcot OrdersType = "ipcot"

	// OrdersTypeLowCostTravel captures enum value "low-cost-travel"
	OrdersTypeLowCostTravel OrdersType = "low-cost-travel"

	// OrdersTypeOperational captures enum value "operational"
	OrdersTypeOperational OrdersType = "operational"

	// OrdersTypeOteip captures enum value "oteip"
	OrdersTypeOteip OrdersType = "oteip"

	// OrdersTypeRotational captures enum value "rotational"
	OrdersTypeRotational OrdersType = "rotational"

	// OrdersTypeSeparation captures enum value "separation"
	OrdersTypeSeparation OrdersType = "separation"

	// OrdersTypeSpecialPurpose captures enum value "special-purpose"
	OrdersTypeSpecialPurpose OrdersType = "special-purpose"

	// OrdersTypeTraining captures enum value "training"
	OrdersTypeTraining OrdersType = "training"

	// OrdersTypeUnitMove captures enum value "unit-move"
	OrdersTypeUnitMove OrdersType = "unit-move"
)

// for schema
var ordersTypeEnum []interface{}

func init() {
	var res []OrdersType
	if err := json.Unmarshal([]byte(`["accession","between-duty-stations","brac","cot","emergency-evac","ipcot","low-cost-travel","operational","oteip","rotational","separation","special-purpose","training","unit-move"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ordersTypeEnum = append(ordersTypeEnum, v)
	}
}

func (m OrdersType) validateOrdersTypeEnum(path, location string, value OrdersType) error {
	if err := validate.Enum(path, location, value, ordersTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this orders type
func (m OrdersType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrdersTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
