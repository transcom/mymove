// Code generated by go-swagger; DO NOT EDIT.

package ordersmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TourType Accompanied or Unaccompanied; i.e., are dependents authorized to accompany the service member on the move. For certain OCONUS destinations, the tour type affects the member's entitlement. Otherwise, it doesn't matter.
//
// If omitted, assume accompanied.
//
// swagger:model TourType
type TourType string

func NewTourType(value TourType) *TourType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TourType.
func (m TourType) Pointer() *TourType {
	return &m
}

const (

	// TourTypeAccompanied captures enum value "accompanied"
	TourTypeAccompanied TourType = "accompanied"

	// TourTypeUnaccompanied captures enum value "unaccompanied"
	TourTypeUnaccompanied TourType = "unaccompanied"

	// TourTypeUnaccompaniedDashDependentsDashRestricted captures enum value "unaccompanied-dependents-restricted"
	TourTypeUnaccompaniedDashDependentsDashRestricted TourType = "unaccompanied-dependents-restricted"
)

// for schema
var tourTypeEnum []interface{}

func init() {
	var res []TourType
	if err := json.Unmarshal([]byte(`["accompanied","unaccompanied","unaccompanied-dependents-restricted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tourTypeEnum = append(tourTypeEnum, v)
	}
}

func (m TourType) validateTourTypeEnum(path, location string, value TourType) error {
	if err := validate.EnumCase(path, location, value, tourTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tour type
func (m TourType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTourTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tour type based on context it is used
func (m TourType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
