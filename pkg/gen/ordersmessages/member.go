// Code generated by go-swagger; DO NOT EDIT.

package ordersmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Member member
// swagger:model Member
type Member struct {

	// affiliation
	// Required: true
	Affiliation Affiliation `json:"affiliation"`

	// In languages that use Western order, like English, this is the last name.
	// Required: true
	FamilyName string `json:"familyName"`

	// In languages that use Western order, like English, this is the first name.
	// Required: true
	GivenName string `json:"givenName"`

	// Middle name or middle initial
	MiddleName *string `json:"middleName,omitempty"`

	// rank
	// Required: true
	Rank Rank `json:"rank"`

	// Jr., Sr., III, etc.
	Suffix *string `json:"suffix,omitempty"`

	// If supplied, this is the preferred form of address or preferred human-readable title. This is especially useful when a rank has multiple possible titles. For example, in the Army, an E-4 can be either a Specialist or a Corporal. In the Navy, there are dozens of possible job titles and ratings for enlisted sailors. In the Marine Corps, an E-8 can be either a Master Sergeant or a First Sergeant, and they do care about the distinction.
	//
	// If omitted, my.move.mil will show the member the default name for the provided rank and affiliation.
	//
	Title *string `json:"title,omitempty"`
}

// Validate validates this member
func (m *Member) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFamilyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGivenName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRank(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Member) validateAffiliation(formats strfmt.Registry) error {

	if err := m.Affiliation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("affiliation")
		}
		return err
	}

	return nil
}

func (m *Member) validateFamilyName(formats strfmt.Registry) error {

	if err := validate.RequiredString("familyName", "body", string(m.FamilyName)); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateGivenName(formats strfmt.Registry) error {

	if err := validate.RequiredString("givenName", "body", string(m.GivenName)); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateRank(formats strfmt.Registry) error {

	if err := m.Rank.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rank")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Member) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Member) UnmarshalBinary(b []byte) error {
	var res Member
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
