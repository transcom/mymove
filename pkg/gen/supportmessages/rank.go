// Code generated by go-swagger; DO NOT EDIT.

package supportmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Rank Rank of the service member, must match specific list of available ranks.
//
// swagger:model Rank
type Rank string

func NewRank(value Rank) *Rank {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Rank.
func (m Rank) Pointer() *Rank {
	return &m
}

const (

	// RankE1 captures enum value "E_1"
	RankE1 Rank = "E_1"

	// RankE2 captures enum value "E_2"
	RankE2 Rank = "E_2"

	// RankE3 captures enum value "E_3"
	RankE3 Rank = "E_3"

	// RankE4 captures enum value "E_4"
	RankE4 Rank = "E_4"

	// RankE5 captures enum value "E_5"
	RankE5 Rank = "E_5"

	// RankE6 captures enum value "E_6"
	RankE6 Rank = "E_6"

	// RankE7 captures enum value "E_7"
	RankE7 Rank = "E_7"

	// RankE8 captures enum value "E_8"
	RankE8 Rank = "E_8"

	// RankE9 captures enum value "E_9"
	RankE9 Rank = "E_9"

	// RankE9SPECIALSENIORENLISTED captures enum value "E_9_SPECIAL_SENIOR_ENLISTED"
	RankE9SPECIALSENIORENLISTED Rank = "E_9_SPECIAL_SENIOR_ENLISTED"

	// RankO1ACADEMYGRADUATE captures enum value "O_1_ACADEMY_GRADUATE"
	RankO1ACADEMYGRADUATE Rank = "O_1_ACADEMY_GRADUATE"

	// RankO2 captures enum value "O_2"
	RankO2 Rank = "O_2"

	// RankO3 captures enum value "O_3"
	RankO3 Rank = "O_3"

	// RankO4 captures enum value "O_4"
	RankO4 Rank = "O_4"

	// RankO5 captures enum value "O_5"
	RankO5 Rank = "O_5"

	// RankO6 captures enum value "O_6"
	RankO6 Rank = "O_6"

	// RankO7 captures enum value "O_7"
	RankO7 Rank = "O_7"

	// RankO8 captures enum value "O_8"
	RankO8 Rank = "O_8"

	// RankO9 captures enum value "O_9"
	RankO9 Rank = "O_9"

	// RankO10 captures enum value "O_10"
	RankO10 Rank = "O_10"

	// RankW1 captures enum value "W_1"
	RankW1 Rank = "W_1"

	// RankW2 captures enum value "W_2"
	RankW2 Rank = "W_2"

	// RankW3 captures enum value "W_3"
	RankW3 Rank = "W_3"

	// RankW4 captures enum value "W_4"
	RankW4 Rank = "W_4"

	// RankW5 captures enum value "W_5"
	RankW5 Rank = "W_5"

	// RankAVIATIONCADET captures enum value "AVIATION_CADET"
	RankAVIATIONCADET Rank = "AVIATION_CADET"

	// RankCIVILIANEMPLOYEE captures enum value "CIVILIAN_EMPLOYEE"
	RankCIVILIANEMPLOYEE Rank = "CIVILIAN_EMPLOYEE"

	// RankACADEMYCADET captures enum value "ACADEMY_CADET"
	RankACADEMYCADET Rank = "ACADEMY_CADET"

	// RankMIDSHIPMAN captures enum value "MIDSHIPMAN"
	RankMIDSHIPMAN Rank = "MIDSHIPMAN"
)

// for schema
var rankEnum []interface{}

func init() {
	var res []Rank
	if err := json.Unmarshal([]byte(`["E_1","E_2","E_3","E_4","E_5","E_6","E_7","E_8","E_9","E_9_SPECIAL_SENIOR_ENLISTED","O_1_ACADEMY_GRADUATE","O_2","O_3","O_4","O_5","O_6","O_7","O_8","O_9","O_10","W_1","W_2","W_3","W_4","W_5","AVIATION_CADET","CIVILIAN_EMPLOYEE","ACADEMY_CADET","MIDSHIPMAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rankEnum = append(rankEnum, v)
	}
}

func (m Rank) validateRankEnum(path, location string, value Rank) error {
	if err := validate.EnumCase(path, location, value, rankEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this rank
func (m Rank) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRankEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this rank based on context it is used
func (m Rank) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
