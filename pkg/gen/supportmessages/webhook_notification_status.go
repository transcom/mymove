// Code generated by go-swagger; DO NOT EDIT.

package supportmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WebhookNotificationStatus Statuses available for a Webhook Notification
//
// swagger:model WebhookNotificationStatus
type WebhookNotificationStatus string

const (

	// WebhookNotificationStatusPENDING captures enum value "PENDING"
	WebhookNotificationStatusPENDING WebhookNotificationStatus = "PENDING"

	// WebhookNotificationStatusSENT captures enum value "SENT"
	WebhookNotificationStatusSENT WebhookNotificationStatus = "SENT"

	// WebhookNotificationStatusSKIPPED captures enum value "SKIPPED"
	WebhookNotificationStatusSKIPPED WebhookNotificationStatus = "SKIPPED"

	// WebhookNotificationStatusFAILING captures enum value "FAILING"
	WebhookNotificationStatusFAILING WebhookNotificationStatus = "FAILING"

	// WebhookNotificationStatusFAILED captures enum value "FAILED"
	WebhookNotificationStatusFAILED WebhookNotificationStatus = "FAILED"
)

// for schema
var webhookNotificationStatusEnum []interface{}

func init() {
	var res []WebhookNotificationStatus
	if err := json.Unmarshal([]byte(`["PENDING","SENT","SKIPPED","FAILING","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webhookNotificationStatusEnum = append(webhookNotificationStatusEnum, v)
	}
}

func (m WebhookNotificationStatus) validateWebhookNotificationStatusEnum(path, location string, value WebhookNotificationStatus) error {
	if err := validate.EnumCase(path, location, value, webhookNotificationStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this webhook notification status
func (m WebhookNotificationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWebhookNotificationStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
