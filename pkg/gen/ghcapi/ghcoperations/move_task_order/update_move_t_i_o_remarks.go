// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateMoveTIORemarksHandlerFunc turns a function with the right signature into a update move t i o remarks handler
type UpdateMoveTIORemarksHandlerFunc func(UpdateMoveTIORemarksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMoveTIORemarksHandlerFunc) Handle(params UpdateMoveTIORemarksParams) middleware.Responder {
	return fn(params)
}

// UpdateMoveTIORemarksHandler interface for that can handle valid update move t i o remarks params
type UpdateMoveTIORemarksHandler interface {
	Handle(UpdateMoveTIORemarksParams) middleware.Responder
}

// NewUpdateMoveTIORemarks creates a new http.Handler for the update move t i o remarks operation
func NewUpdateMoveTIORemarks(ctx *middleware.Context, handler UpdateMoveTIORemarksHandler) *UpdateMoveTIORemarks {
	return &UpdateMoveTIORemarks{Context: ctx, Handler: handler}
}

/*
	UpdateMoveTIORemarks swagger:route PATCH /move-task-orders/{moveTaskOrderID}/tio-remarks moveTaskOrder updateMoveTIORemarks

Changes move (move task order) billableWeightsReviewedAt field to a timestamp
*/
type UpdateMoveTIORemarks struct {
	Context *middleware.Context
	Handler UpdateMoveTIORemarksHandler
}

func (o *UpdateMoveTIORemarks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateMoveTIORemarksParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
