// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateMTOReviewedBillableWeightsAtHandlerFunc turns a function with the right signature into a update m t o reviewed billable weights at handler
type UpdateMTOReviewedBillableWeightsAtHandlerFunc func(UpdateMTOReviewedBillableWeightsAtParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMTOReviewedBillableWeightsAtHandlerFunc) Handle(params UpdateMTOReviewedBillableWeightsAtParams) middleware.Responder {
	return fn(params)
}

// UpdateMTOReviewedBillableWeightsAtHandler interface for that can handle valid update m t o reviewed billable weights at params
type UpdateMTOReviewedBillableWeightsAtHandler interface {
	Handle(UpdateMTOReviewedBillableWeightsAtParams) middleware.Responder
}

// NewUpdateMTOReviewedBillableWeightsAt creates a new http.Handler for the update m t o reviewed billable weights at operation
func NewUpdateMTOReviewedBillableWeightsAt(ctx *middleware.Context, handler UpdateMTOReviewedBillableWeightsAtHandler) *UpdateMTOReviewedBillableWeightsAt {
	return &UpdateMTOReviewedBillableWeightsAt{Context: ctx, Handler: handler}
}

/*
	UpdateMTOReviewedBillableWeightsAt swagger:route PATCH /move-task-orders/{moveTaskOrderID}/billable-weights-reviewed-at moveTaskOrder updateMTOReviewedBillableWeightsAt

Changes move (move task order) billableWeightsReviewedAt field to a timestamp
*/
type UpdateMTOReviewedBillableWeightsAt struct {
	Context *middleware.Context
	Handler UpdateMTOReviewedBillableWeightsAtHandler
}

func (o *UpdateMTOReviewedBillableWeightsAt) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateMTOReviewedBillableWeightsAtParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
