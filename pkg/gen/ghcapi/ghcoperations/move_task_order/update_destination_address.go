// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	ghcmessages "github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// UpdateDestinationAddressHandlerFunc turns a function with the right signature into a update destination address handler
type UpdateDestinationAddressHandlerFunc func(UpdateDestinationAddressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateDestinationAddressHandlerFunc) Handle(params UpdateDestinationAddressParams) middleware.Responder {
	return fn(params)
}

// UpdateDestinationAddressHandler interface for that can handle valid update destination address params
type UpdateDestinationAddressHandler interface {
	Handle(UpdateDestinationAddressParams) middleware.Responder
}

// NewUpdateDestinationAddress creates a new http.Handler for the update destination address operation
func NewUpdateDestinationAddress(ctx *middleware.Context, handler UpdateDestinationAddressHandler) *UpdateDestinationAddress {
	return &UpdateDestinationAddress{Context: ctx, Handler: handler}
}

/*UpdateDestinationAddress swagger:route PATCH /move-task-orders/{moveTaskOrderID}/destination-address moveTaskOrder prime updateDestinationAddress

Updates a move task order's destination address

Updates a move task order's destination address by ID

*/
type UpdateDestinationAddress struct {
	Context *middleware.Context
	Handler UpdateDestinationAddressHandler
}

func (o *UpdateDestinationAddress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateDestinationAddressParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateDestinationAddressBody update destination address body
// swagger:model UpdateDestinationAddressBody
type UpdateDestinationAddressBody struct {

	// destination address
	DestinationAddress *ghcmessages.Address `json:"destinationAddress,omitempty"`
}

// Validate validates this update destination address body
func (o *UpdateDestinationAddressBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDestinationAddressBody) validateDestinationAddress(formats strfmt.Registry) error {

	if swag.IsZero(o.DestinationAddress) { // not required
		return nil
	}

	if o.DestinationAddress != nil {
		if err := o.DestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "destinationAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDestinationAddressBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDestinationAddressBody) UnmarshalBinary(b []byte) error {
	var res UpdateDestinationAddressBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
