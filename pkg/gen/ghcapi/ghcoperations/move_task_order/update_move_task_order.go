// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateMoveTaskOrderHandlerFunc turns a function with the right signature into a update move task order handler
type UpdateMoveTaskOrderHandlerFunc func(UpdateMoveTaskOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMoveTaskOrderHandlerFunc) Handle(params UpdateMoveTaskOrderParams) middleware.Responder {
	return fn(params)
}

// UpdateMoveTaskOrderHandler interface for that can handle valid update move task order params
type UpdateMoveTaskOrderHandler interface {
	Handle(UpdateMoveTaskOrderParams) middleware.Responder
}

// NewUpdateMoveTaskOrder creates a new http.Handler for the update move task order operation
func NewUpdateMoveTaskOrder(ctx *middleware.Context, handler UpdateMoveTaskOrderHandler) *UpdateMoveTaskOrder {
	return &UpdateMoveTaskOrder{Context: ctx, Handler: handler}
}

/*UpdateMoveTaskOrder swagger:route PATCH /move-task-orders/{moveTaskOrderID} moveTaskOrder updateMoveTaskOrder

Updates a move by ID

Updates a move by ID

*/
type UpdateMoveTaskOrder struct {
	Context *middleware.Context
	Handler UpdateMoveTaskOrderHandler
}

func (o *UpdateMoveTaskOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateMoveTaskOrderParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
