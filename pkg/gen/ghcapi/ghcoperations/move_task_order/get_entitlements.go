// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetEntitlementsHandlerFunc turns a function with the right signature into a get entitlements handler
type GetEntitlementsHandlerFunc func(GetEntitlementsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEntitlementsHandlerFunc) Handle(params GetEntitlementsParams) middleware.Responder {
	return fn(params)
}

// GetEntitlementsHandler interface for that can handle valid get entitlements params
type GetEntitlementsHandler interface {
	Handle(GetEntitlementsParams) middleware.Responder
}

// NewGetEntitlements creates a new http.Handler for the get entitlements operation
func NewGetEntitlements(ctx *middleware.Context, handler GetEntitlementsHandler) *GetEntitlements {
	return &GetEntitlements{Context: ctx, Handler: handler}
}

/*GetEntitlements swagger:route GET /move-task-orders/{moveTaskOrderID}/entitlements moveTaskOrder getEntitlements

Gets entitlements for a move by ID

Gets entitlements

*/
type GetEntitlements struct {
	Context *middleware.Context
	Handler GetEntitlementsHandler
}

func (o *GetEntitlements) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetEntitlementsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
