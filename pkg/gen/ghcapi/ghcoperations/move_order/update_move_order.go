// Code generated by go-swagger; DO NOT EDIT.

package move_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateMoveOrderHandlerFunc turns a function with the right signature into a update move order handler
type UpdateMoveOrderHandlerFunc func(UpdateMoveOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMoveOrderHandlerFunc) Handle(params UpdateMoveOrderParams) middleware.Responder {
	return fn(params)
}

// UpdateMoveOrderHandler interface for that can handle valid update move order params
type UpdateMoveOrderHandler interface {
	Handle(UpdateMoveOrderParams) middleware.Responder
}

// NewUpdateMoveOrder creates a new http.Handler for the update move order operation
func NewUpdateMoveOrder(ctx *middleware.Context, handler UpdateMoveOrderHandler) *UpdateMoveOrder {
	return &UpdateMoveOrder{Context: ctx, Handler: handler}
}

/*UpdateMoveOrder swagger:route PATCH /move-orders/{moveOrderID} moveOrder updateMoveOrder

Updates a move order

All fields sent in this request will be set on the move order referenced

*/
type UpdateMoveOrder struct {
	Context *middleware.Context
	Handler UpdateMoveOrderHandler
}

func (o *UpdateMoveOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateMoveOrderParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
