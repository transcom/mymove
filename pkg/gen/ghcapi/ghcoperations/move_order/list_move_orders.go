// Code generated by go-swagger; DO NOT EDIT.

package move_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListMoveOrdersHandlerFunc turns a function with the right signature into a list move orders handler
type ListMoveOrdersHandlerFunc func(ListMoveOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListMoveOrdersHandlerFunc) Handle(params ListMoveOrdersParams) middleware.Responder {
	return fn(params)
}

// ListMoveOrdersHandler interface for that can handle valid list move orders params
type ListMoveOrdersHandler interface {
	Handle(ListMoveOrdersParams) middleware.Responder
}

// NewListMoveOrders creates a new http.Handler for the list move orders operation
func NewListMoveOrders(ctx *middleware.Context, handler ListMoveOrdersHandler) *ListMoveOrders {
	return &ListMoveOrders{Context: ctx, Handler: handler}
}

/*ListMoveOrders swagger:route GET /move-orders moveOrder listMoveOrders

Gets all move orders

Gets all move orders

*/
type ListMoveOrders struct {
	Context *middleware.Context
	Handler ListMoveOrdersHandler
}

func (o *ListMoveOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListMoveOrdersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
