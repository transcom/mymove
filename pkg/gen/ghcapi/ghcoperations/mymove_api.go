// Code generated by go-swagger; DO NOT EDIT.

package ghcoperations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/application_parameters"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/customer"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/customer_support_remarks"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/evaluation_reports"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/ghc_documents"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/lines_of_accounting"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/move"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/move_task_order"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/mto_agent"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/mto_service_item"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/mto_shipment"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/office_users"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/order"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/payment_requests"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/payment_service_item"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/ppm"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/pws_violations"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/queues"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/report_violations"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/shipment"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/tac"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/transportation_office"
	"github.com/transcom/mymove/pkg/gen/ghcapi/ghcoperations/uploads"
)

// NewMymoveAPI creates a new Mymove instance
func NewMymoveAPI(spec *loads.Document) *MymoveAPI {
	return &MymoveAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),

		OrderAcknowledgeExcessWeightRiskHandler: order.AcknowledgeExcessWeightRiskHandlerFunc(func(params order.AcknowledgeExcessWeightRiskParams) middleware.Responder {
			return middleware.NotImplemented("operation order.AcknowledgeExcessWeightRisk has not yet been implemented")
		}),
		ShipmentApproveSITExtensionHandler: shipment.ApproveSITExtensionHandlerFunc(func(params shipment.ApproveSITExtensionParams) middleware.Responder {
			return middleware.NotImplemented("operation shipment.ApproveSITExtension has not yet been implemented")
		}),
		ShipmentApproveShipmentHandler: shipment.ApproveShipmentHandlerFunc(func(params shipment.ApproveShipmentParams) middleware.Responder {
			return middleware.NotImplemented("operation shipment.ApproveShipment has not yet been implemented")
		}),
		ShipmentApproveShipmentDiversionHandler: shipment.ApproveShipmentDiversionHandlerFunc(func(params shipment.ApproveShipmentDiversionParams) middleware.Responder {
			return middleware.NotImplemented("operation shipment.ApproveShipmentDiversion has not yet been implemented")
		}),
		ReportViolationsAssociateReportViolationsHandler: report_violations.AssociateReportViolationsHandlerFunc(func(params report_violations.AssociateReportViolationsParams) middleware.Responder {
			return middleware.NotImplemented("operation report_violations.AssociateReportViolations has not yet been implemented")
		}),
		OrderCounselingUpdateAllowanceHandler: order.CounselingUpdateAllowanceHandlerFunc(func(params order.CounselingUpdateAllowanceParams) middleware.Responder {
			return middleware.NotImplemented("operation order.CounselingUpdateAllowance has not yet been implemented")
		}),
		OrderCounselingUpdateOrderHandler: order.CounselingUpdateOrderHandlerFunc(func(params order.CounselingUpdateOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation order.CounselingUpdateOrder has not yet been implemented")
		}),
		ShipmentCreateApprovedSITDurationUpdateHandler: shipment.CreateApprovedSITDurationUpdateHandlerFunc(func(params shipment.CreateApprovedSITDurationUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation shipment.CreateApprovedSITDurationUpdate has not yet been implemented")
		}),
		CustomerSupportRemarksCreateCustomerSupportRemarkForMoveHandler: customer_support_remarks.CreateCustomerSupportRemarkForMoveHandlerFunc(func(params customer_support_remarks.CreateCustomerSupportRemarkForMoveParams) middleware.Responder {
			return middleware.NotImplemented("operation customer_support_remarks.CreateCustomerSupportRemarkForMove has not yet been implemented")
		}),
		CustomerCreateCustomerWithOktaOptionHandler: customer.CreateCustomerWithOktaOptionHandlerFunc(func(params customer.CreateCustomerWithOktaOptionParams) middleware.Responder {
			return middleware.NotImplemented("operation customer.CreateCustomerWithOktaOption has not yet been implemented")
		}),
		EvaluationReportsCreateEvaluationReportHandler: evaluation_reports.CreateEvaluationReportHandlerFunc(func(params evaluation_reports.CreateEvaluationReportParams) middleware.Responder {
			return middleware.NotImplemented("operation evaluation_reports.CreateEvaluationReport has not yet been implemented")
		}),
		MtoShipmentCreateMTOShipmentHandler: mto_shipment.CreateMTOShipmentHandlerFunc(func(params mto_shipment.CreateMTOShipmentParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_shipment.CreateMTOShipment has not yet been implemented")
		}),
		OrderCreateOrderHandler: order.CreateOrderHandlerFunc(func(params order.CreateOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation order.CreateOrder has not yet been implemented")
		}),
		OfficeUsersCreateRequestedOfficeUserHandler: office_users.CreateRequestedOfficeUserHandlerFunc(func(params office_users.CreateRequestedOfficeUserParams) middleware.Responder {
			return middleware.NotImplemented("operation office_users.CreateRequestedOfficeUser has not yet been implemented")
		}),
		UploadsCreateUploadHandler: uploads.CreateUploadHandlerFunc(func(params uploads.CreateUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation uploads.CreateUpload has not yet been implemented")
		}),
		CustomerSupportRemarksDeleteCustomerSupportRemarkHandler: customer_support_remarks.DeleteCustomerSupportRemarkHandlerFunc(func(params customer_support_remarks.DeleteCustomerSupportRemarkParams) middleware.Responder {
			return middleware.NotImplemented("operation customer_support_remarks.DeleteCustomerSupportRemark has not yet been implemented")
		}),
		EvaluationReportsDeleteEvaluationReportHandler: evaluation_reports.DeleteEvaluationReportHandlerFunc(func(params evaluation_reports.DeleteEvaluationReportParams) middleware.Responder {
			return middleware.NotImplemented("operation evaluation_reports.DeleteEvaluationReport has not yet been implemented")
		}),
		ShipmentDeleteShipmentHandler: shipment.DeleteShipmentHandlerFunc(func(params shipment.DeleteShipmentParams) middleware.Responder {
			return middleware.NotImplemented("operation shipment.DeleteShipment has not yet been implemented")
		}),
		ShipmentDenySITExtensionHandler: shipment.DenySITExtensionHandlerFunc(func(params shipment.DenySITExtensionParams) middleware.Responder {
			return middleware.NotImplemented("operation shipment.DenySITExtension has not yet been implemented")
		}),
		EvaluationReportsDownloadEvaluationReportHandler: evaluation_reports.DownloadEvaluationReportHandlerFunc(func(params evaluation_reports.DownloadEvaluationReportParams) middleware.Responder {
			return middleware.NotImplemented("operation evaluation_reports.DownloadEvaluationReport has not yet been implemented")
		}),
		MtoAgentFetchMTOAgentListHandler: mto_agent.FetchMTOAgentListHandlerFunc(func(params mto_agent.FetchMTOAgentListParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_agent.FetchMTOAgentList has not yet been implemented")
		}),
		PpmFinishDocumentReviewHandler: ppm.FinishDocumentReviewHandlerFunc(func(params ppm.FinishDocumentReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.FinishDocumentReview has not yet been implemented")
		}),
		CustomerGetCustomerHandler: customer.GetCustomerHandlerFunc(func(params customer.GetCustomerParams) middleware.Responder {
			return middleware.NotImplemented("operation customer.GetCustomer has not yet been implemented")
		}),
		CustomerSupportRemarksGetCustomerSupportRemarksForMoveHandler: customer_support_remarks.GetCustomerSupportRemarksForMoveHandlerFunc(func(params customer_support_remarks.GetCustomerSupportRemarksForMoveParams) middleware.Responder {
			return middleware.NotImplemented("operation customer_support_remarks.GetCustomerSupportRemarksForMove has not yet been implemented")
		}),
		GhcDocumentsGetDocumentHandler: ghc_documents.GetDocumentHandlerFunc(func(params ghc_documents.GetDocumentParams) middleware.Responder {
			return middleware.NotImplemented("operation ghc_documents.GetDocument has not yet been implemented")
		}),
		MoveTaskOrderGetEntitlementsHandler: move_task_order.GetEntitlementsHandlerFunc(func(params move_task_order.GetEntitlementsParams) middleware.Responder {
			return middleware.NotImplemented("operation move_task_order.GetEntitlements has not yet been implemented")
		}),
		EvaluationReportsGetEvaluationReportHandler: evaluation_reports.GetEvaluationReportHandlerFunc(func(params evaluation_reports.GetEvaluationReportParams) middleware.Responder {
			return middleware.NotImplemented("operation evaluation_reports.GetEvaluationReport has not yet been implemented")
		}),
		MtoServiceItemGetMTOServiceItemHandler: mto_service_item.GetMTOServiceItemHandlerFunc(func(params mto_service_item.GetMTOServiceItemParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_service_item.GetMTOServiceItem has not yet been implemented")
		}),
		MoveGetMoveHandler: move.GetMoveHandlerFunc(func(params move.GetMoveParams) middleware.Responder {
			return middleware.NotImplemented("operation move.GetMove has not yet been implemented")
		}),
		MoveGetMoveCounselingEvaluationReportsListHandler: move.GetMoveCounselingEvaluationReportsListHandlerFunc(func(params move.GetMoveCounselingEvaluationReportsListParams) middleware.Responder {
			return middleware.NotImplemented("operation move.GetMoveCounselingEvaluationReportsList has not yet been implemented")
		}),
		MoveGetMoveHistoryHandler: move.GetMoveHistoryHandlerFunc(func(params move.GetMoveHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation move.GetMoveHistory has not yet been implemented")
		}),
		MoveGetMoveShipmentEvaluationReportsListHandler: move.GetMoveShipmentEvaluationReportsListHandlerFunc(func(params move.GetMoveShipmentEvaluationReportsListParams) middleware.Responder {
			return middleware.NotImplemented("operation move.GetMoveShipmentEvaluationReportsList has not yet been implemented")
		}),
		MoveTaskOrderGetMoveTaskOrderHandler: move_task_order.GetMoveTaskOrderHandlerFunc(func(params move_task_order.GetMoveTaskOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation move_task_order.GetMoveTaskOrder has not yet been implemented")
		}),
		QueuesGetMovesQueueHandler: queues.GetMovesQueueHandlerFunc(func(params queues.GetMovesQueueParams) middleware.Responder {
			return middleware.NotImplemented("operation queues.GetMovesQueue has not yet been implemented")
		}),
		OrderGetOrderHandler: order.GetOrderHandlerFunc(func(params order.GetOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation order.GetOrder has not yet been implemented")
		}),
		PpmGetPPMActualWeightHandler: ppm.GetPPMActualWeightHandlerFunc(func(params ppm.GetPPMActualWeightParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.GetPPMActualWeight has not yet been implemented")
		}),
		PpmGetPPMCloseoutHandler: ppm.GetPPMCloseoutHandlerFunc(func(params ppm.GetPPMCloseoutParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.GetPPMCloseout has not yet been implemented")
		}),
		PpmGetPPMDocumentsHandler: ppm.GetPPMDocumentsHandlerFunc(func(params ppm.GetPPMDocumentsParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.GetPPMDocuments has not yet been implemented")
		}),
		PwsViolationsGetPWSViolationsHandler: pws_violations.GetPWSViolationsHandlerFunc(func(params pws_violations.GetPWSViolationsParams) middleware.Responder {
			return middleware.NotImplemented("operation pws_violations.GetPWSViolations has not yet been implemented")
		}),
		ApplicationParametersGetParamHandler: application_parameters.GetParamHandlerFunc(func(params application_parameters.GetParamParams) middleware.Responder {
			return middleware.NotImplemented("operation application_parameters.GetParam has not yet been implemented")
		}),
		PaymentRequestsGetPaymentRequestHandler: payment_requests.GetPaymentRequestHandlerFunc(func(params payment_requests.GetPaymentRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation payment_requests.GetPaymentRequest has not yet been implemented")
		}),
		PaymentRequestsGetPaymentRequestsForMoveHandler: payment_requests.GetPaymentRequestsForMoveHandlerFunc(func(params payment_requests.GetPaymentRequestsForMoveParams) middleware.Responder {
			return middleware.NotImplemented("operation payment_requests.GetPaymentRequestsForMove has not yet been implemented")
		}),
		QueuesGetPaymentRequestsQueueHandler: queues.GetPaymentRequestsQueueHandlerFunc(func(params queues.GetPaymentRequestsQueueParams) middleware.Responder {
			return middleware.NotImplemented("operation queues.GetPaymentRequestsQueue has not yet been implemented")
		}),
		ReportViolationsGetReportViolationsByReportIDHandler: report_violations.GetReportViolationsByReportIDHandlerFunc(func(params report_violations.GetReportViolationsByReportIDParams) middleware.Responder {
			return middleware.NotImplemented("operation report_violations.GetReportViolationsByReportID has not yet been implemented")
		}),
		QueuesGetServicesCounselingQueueHandler: queues.GetServicesCounselingQueueHandlerFunc(func(params queues.GetServicesCounselingQueueParams) middleware.Responder {
			return middleware.NotImplemented("operation queues.GetServicesCounselingQueue has not yet been implemented")
		}),
		MtoShipmentGetShipmentHandler: mto_shipment.GetShipmentHandlerFunc(func(params mto_shipment.GetShipmentParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_shipment.GetShipment has not yet been implemented")
		}),
		PaymentRequestsGetShipmentsPaymentSITBalanceHandler: payment_requests.GetShipmentsPaymentSITBalanceHandlerFunc(func(params payment_requests.GetShipmentsPaymentSITBalanceParams) middleware.Responder {
			return middleware.NotImplemented("operation payment_requests.GetShipmentsPaymentSITBalance has not yet been implemented")
		}),
		TransportationOfficeGetTransportationOfficesHandler: transportation_office.GetTransportationOfficesHandlerFunc(func(params transportation_office.GetTransportationOfficesParams) middleware.Responder {
			return middleware.NotImplemented("operation transportation_office.GetTransportationOffices has not yet been implemented")
		}),
		TransportationOfficeGetTransportationOfficesOpenHandler: transportation_office.GetTransportationOfficesOpenHandlerFunc(func(params transportation_office.GetTransportationOfficesOpenParams) middleware.Responder {
			return middleware.NotImplemented("operation transportation_office.GetTransportationOfficesOpen has not yet been implemented")
		}),
		MtoServiceItemListMTOServiceItemsHandler: mto_service_item.ListMTOServiceItemsHandlerFunc(func(params mto_service_item.ListMTOServiceItemsParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_service_item.ListMTOServiceItems has not yet been implemented")
		}),
		MtoShipmentListMTOShipmentsHandler: mto_shipment.ListMTOShipmentsHandlerFunc(func(params mto_shipment.ListMTOShipmentsParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_shipment.ListMTOShipments has not yet been implemented")
		}),
		QueuesListPrimeMovesHandler: queues.ListPrimeMovesHandlerFunc(func(params queues.ListPrimeMovesParams) middleware.Responder {
			return middleware.NotImplemented("operation queues.ListPrimeMoves has not yet been implemented")
		}),
		ShipmentRejectShipmentHandler: shipment.RejectShipmentHandlerFunc(func(params shipment.RejectShipmentParams) middleware.Responder {
			return middleware.NotImplemented("operation shipment.RejectShipment has not yet been implemented")
		}),
		LinesOfAccountingRequestLineOfAccountingHandler: lines_of_accounting.RequestLineOfAccountingHandlerFunc(func(params lines_of_accounting.RequestLineOfAccountingParams) middleware.Responder {
			return middleware.NotImplemented("operation lines_of_accounting.RequestLineOfAccounting has not yet been implemented")
		}),
		ShipmentRequestShipmentCancellationHandler: shipment.RequestShipmentCancellationHandlerFunc(func(params shipment.RequestShipmentCancellationParams) middleware.Responder {
			return middleware.NotImplemented("operation shipment.RequestShipmentCancellation has not yet been implemented")
		}),
		ShipmentRequestShipmentDiversionHandler: shipment.RequestShipmentDiversionHandlerFunc(func(params shipment.RequestShipmentDiversionParams) middleware.Responder {
			return middleware.NotImplemented("operation shipment.RequestShipmentDiversion has not yet been implemented")
		}),
		ShipmentRequestShipmentReweighHandler: shipment.RequestShipmentReweighHandlerFunc(func(params shipment.RequestShipmentReweighParams) middleware.Responder {
			return middleware.NotImplemented("operation shipment.RequestShipmentReweigh has not yet been implemented")
		}),
		ShipmentReviewShipmentAddressUpdateHandler: shipment.ReviewShipmentAddressUpdateHandlerFunc(func(params shipment.ReviewShipmentAddressUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation shipment.ReviewShipmentAddressUpdate has not yet been implemented")
		}),
		EvaluationReportsSaveEvaluationReportHandler: evaluation_reports.SaveEvaluationReportHandlerFunc(func(params evaluation_reports.SaveEvaluationReportParams) middleware.Responder {
			return middleware.NotImplemented("operation evaluation_reports.SaveEvaluationReport has not yet been implemented")
		}),
		CustomerSearchCustomersHandler: customer.SearchCustomersHandlerFunc(func(params customer.SearchCustomersParams) middleware.Responder {
			return middleware.NotImplemented("operation customer.SearchCustomers has not yet been implemented")
		}),
		MoveSearchMovesHandler: move.SearchMovesHandlerFunc(func(params move.SearchMovesParams) middleware.Responder {
			return middleware.NotImplemented("operation move.SearchMoves has not yet been implemented")
		}),
		MoveSetFinancialReviewFlagHandler: move.SetFinancialReviewFlagHandlerFunc(func(params move.SetFinancialReviewFlagParams) middleware.Responder {
			return middleware.NotImplemented("operation move.SetFinancialReviewFlag has not yet been implemented")
		}),
		PpmShowAOAPacketHandler: ppm.ShowAOAPacketHandlerFunc(func(params ppm.ShowAOAPacketParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.ShowAOAPacket has not yet been implemented")
		}),
		PpmShowPaymentPacketHandler: ppm.ShowPaymentPacketHandlerFunc(func(params ppm.ShowPaymentPacketParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.ShowPaymentPacket has not yet been implemented")
		}),
		EvaluationReportsSubmitEvaluationReportHandler: evaluation_reports.SubmitEvaluationReportHandlerFunc(func(params evaluation_reports.SubmitEvaluationReportParams) middleware.Responder {
			return middleware.NotImplemented("operation evaluation_reports.SubmitEvaluationReport has not yet been implemented")
		}),
		TacTacValidationHandler: tac.TacValidationHandlerFunc(func(params tac.TacValidationParams) middleware.Responder {
			return middleware.NotImplemented("operation tac.TacValidation has not yet been implemented")
		}),
		OrderUpdateAllowanceHandler: order.UpdateAllowanceHandlerFunc(func(params order.UpdateAllowanceParams) middleware.Responder {
			return middleware.NotImplemented("operation order.UpdateAllowance has not yet been implemented")
		}),
		OrderUpdateBillableWeightHandler: order.UpdateBillableWeightHandlerFunc(func(params order.UpdateBillableWeightParams) middleware.Responder {
			return middleware.NotImplemented("operation order.UpdateBillableWeight has not yet been implemented")
		}),
		MoveUpdateCloseoutOfficeHandler: move.UpdateCloseoutOfficeHandlerFunc(func(params move.UpdateCloseoutOfficeParams) middleware.Responder {
			return middleware.NotImplemented("operation move.UpdateCloseoutOffice has not yet been implemented")
		}),
		CustomerUpdateCustomerHandler: customer.UpdateCustomerHandlerFunc(func(params customer.UpdateCustomerParams) middleware.Responder {
			return middleware.NotImplemented("operation customer.UpdateCustomer has not yet been implemented")
		}),
		CustomerSupportRemarksUpdateCustomerSupportRemarkForMoveHandler: customer_support_remarks.UpdateCustomerSupportRemarkForMoveHandlerFunc(func(params customer_support_remarks.UpdateCustomerSupportRemarkForMoveParams) middleware.Responder {
			return middleware.NotImplemented("operation customer_support_remarks.UpdateCustomerSupportRemarkForMove has not yet been implemented")
		}),
		MoveTaskOrderUpdateMTOReviewedBillableWeightsAtHandler: move_task_order.UpdateMTOReviewedBillableWeightsAtHandlerFunc(func(params move_task_order.UpdateMTOReviewedBillableWeightsAtParams) middleware.Responder {
			return middleware.NotImplemented("operation move_task_order.UpdateMTOReviewedBillableWeightsAt has not yet been implemented")
		}),
		MtoServiceItemUpdateMTOServiceItemStatusHandler: mto_service_item.UpdateMTOServiceItemStatusHandlerFunc(func(params mto_service_item.UpdateMTOServiceItemStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_service_item.UpdateMTOServiceItemStatus has not yet been implemented")
		}),
		MtoShipmentUpdateMTOShipmentHandler: mto_shipment.UpdateMTOShipmentHandlerFunc(func(params mto_shipment.UpdateMTOShipmentParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_shipment.UpdateMTOShipment has not yet been implemented")
		}),
		MoveTaskOrderUpdateMTOStatusServiceCounselingCompletedHandler: move_task_order.UpdateMTOStatusServiceCounselingCompletedHandlerFunc(func(params move_task_order.UpdateMTOStatusServiceCounselingCompletedParams) middleware.Responder {
			return middleware.NotImplemented("operation move_task_order.UpdateMTOStatusServiceCounselingCompleted has not yet been implemented")
		}),
		OrderUpdateMaxBillableWeightAsTIOHandler: order.UpdateMaxBillableWeightAsTIOHandlerFunc(func(params order.UpdateMaxBillableWeightAsTIOParams) middleware.Responder {
			return middleware.NotImplemented("operation order.UpdateMaxBillableWeightAsTIO has not yet been implemented")
		}),
		MoveTaskOrderUpdateMoveTIORemarksHandler: move_task_order.UpdateMoveTIORemarksHandlerFunc(func(params move_task_order.UpdateMoveTIORemarksParams) middleware.Responder {
			return middleware.NotImplemented("operation move_task_order.UpdateMoveTIORemarks has not yet been implemented")
		}),
		MoveTaskOrderUpdateMoveTaskOrderStatusHandler: move_task_order.UpdateMoveTaskOrderStatusHandlerFunc(func(params move_task_order.UpdateMoveTaskOrderStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation move_task_order.UpdateMoveTaskOrderStatus has not yet been implemented")
		}),
		PpmUpdateMovingExpenseHandler: ppm.UpdateMovingExpenseHandlerFunc(func(params ppm.UpdateMovingExpenseParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.UpdateMovingExpense has not yet been implemented")
		}),
		OrderUpdateOrderHandler: order.UpdateOrderHandlerFunc(func(params order.UpdateOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation order.UpdateOrder has not yet been implemented")
		}),
		PaymentRequestsUpdatePaymentRequestStatusHandler: payment_requests.UpdatePaymentRequestStatusHandlerFunc(func(params payment_requests.UpdatePaymentRequestStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation payment_requests.UpdatePaymentRequestStatus has not yet been implemented")
		}),
		PaymentServiceItemUpdatePaymentServiceItemStatusHandler: payment_service_item.UpdatePaymentServiceItemStatusHandlerFunc(func(params payment_service_item.UpdatePaymentServiceItemStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation payment_service_item.UpdatePaymentServiceItemStatus has not yet been implemented")
		}),
		PpmUpdateProGearWeightTicketHandler: ppm.UpdateProGearWeightTicketHandlerFunc(func(params ppm.UpdateProGearWeightTicketParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.UpdateProGearWeightTicket has not yet been implemented")
		}),
		ShipmentUpdateSITServiceItemCustomerExpenseHandler: shipment.UpdateSITServiceItemCustomerExpenseHandlerFunc(func(params shipment.UpdateSITServiceItemCustomerExpenseParams) middleware.Responder {
			return middleware.NotImplemented("operation shipment.UpdateSITServiceItemCustomerExpense has not yet been implemented")
		}),
		MtoServiceItemUpdateServiceItemSitEntryDateHandler: mto_service_item.UpdateServiceItemSitEntryDateHandlerFunc(func(params mto_service_item.UpdateServiceItemSitEntryDateParams) middleware.Responder {
			return middleware.NotImplemented("operation mto_service_item.UpdateServiceItemSitEntryDate has not yet been implemented")
		}),
		PpmUpdateWeightTicketHandler: ppm.UpdateWeightTicketHandlerFunc(func(params ppm.UpdateWeightTicketParams) middleware.Responder {
			return middleware.NotImplemented("operation ppm.UpdateWeightTicket has not yet been implemented")
		}),
	}
}

/*
MymoveAPI The GHC API is a RESTful API that enables the Office application for MilMove.

All endpoints are located under `/ghc/v1`.
*/
type MymoveAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	// BinProducer registers a producer for the following mime types:
	//   - application/pdf
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// OrderAcknowledgeExcessWeightRiskHandler sets the operation handler for the acknowledge excess weight risk operation
	OrderAcknowledgeExcessWeightRiskHandler order.AcknowledgeExcessWeightRiskHandler
	// ShipmentApproveSITExtensionHandler sets the operation handler for the approve s i t extension operation
	ShipmentApproveSITExtensionHandler shipment.ApproveSITExtensionHandler
	// ShipmentApproveShipmentHandler sets the operation handler for the approve shipment operation
	ShipmentApproveShipmentHandler shipment.ApproveShipmentHandler
	// ShipmentApproveShipmentDiversionHandler sets the operation handler for the approve shipment diversion operation
	ShipmentApproveShipmentDiversionHandler shipment.ApproveShipmentDiversionHandler
	// ReportViolationsAssociateReportViolationsHandler sets the operation handler for the associate report violations operation
	ReportViolationsAssociateReportViolationsHandler report_violations.AssociateReportViolationsHandler
	// OrderCounselingUpdateAllowanceHandler sets the operation handler for the counseling update allowance operation
	OrderCounselingUpdateAllowanceHandler order.CounselingUpdateAllowanceHandler
	// OrderCounselingUpdateOrderHandler sets the operation handler for the counseling update order operation
	OrderCounselingUpdateOrderHandler order.CounselingUpdateOrderHandler
	// ShipmentCreateApprovedSITDurationUpdateHandler sets the operation handler for the create approved s i t duration update operation
	ShipmentCreateApprovedSITDurationUpdateHandler shipment.CreateApprovedSITDurationUpdateHandler
	// CustomerSupportRemarksCreateCustomerSupportRemarkForMoveHandler sets the operation handler for the create customer support remark for move operation
	CustomerSupportRemarksCreateCustomerSupportRemarkForMoveHandler customer_support_remarks.CreateCustomerSupportRemarkForMoveHandler
	// CustomerCreateCustomerWithOktaOptionHandler sets the operation handler for the create customer with okta option operation
	CustomerCreateCustomerWithOktaOptionHandler customer.CreateCustomerWithOktaOptionHandler
	// EvaluationReportsCreateEvaluationReportHandler sets the operation handler for the create evaluation report operation
	EvaluationReportsCreateEvaluationReportHandler evaluation_reports.CreateEvaluationReportHandler
	// MtoShipmentCreateMTOShipmentHandler sets the operation handler for the create m t o shipment operation
	MtoShipmentCreateMTOShipmentHandler mto_shipment.CreateMTOShipmentHandler
	// OrderCreateOrderHandler sets the operation handler for the create order operation
	OrderCreateOrderHandler order.CreateOrderHandler
	// OfficeUsersCreateRequestedOfficeUserHandler sets the operation handler for the create requested office user operation
	OfficeUsersCreateRequestedOfficeUserHandler office_users.CreateRequestedOfficeUserHandler
	// UploadsCreateUploadHandler sets the operation handler for the create upload operation
	UploadsCreateUploadHandler uploads.CreateUploadHandler
	// CustomerSupportRemarksDeleteCustomerSupportRemarkHandler sets the operation handler for the delete customer support remark operation
	CustomerSupportRemarksDeleteCustomerSupportRemarkHandler customer_support_remarks.DeleteCustomerSupportRemarkHandler
	// EvaluationReportsDeleteEvaluationReportHandler sets the operation handler for the delete evaluation report operation
	EvaluationReportsDeleteEvaluationReportHandler evaluation_reports.DeleteEvaluationReportHandler
	// ShipmentDeleteShipmentHandler sets the operation handler for the delete shipment operation
	ShipmentDeleteShipmentHandler shipment.DeleteShipmentHandler
	// ShipmentDenySITExtensionHandler sets the operation handler for the deny s i t extension operation
	ShipmentDenySITExtensionHandler shipment.DenySITExtensionHandler
	// EvaluationReportsDownloadEvaluationReportHandler sets the operation handler for the download evaluation report operation
	EvaluationReportsDownloadEvaluationReportHandler evaluation_reports.DownloadEvaluationReportHandler
	// MtoAgentFetchMTOAgentListHandler sets the operation handler for the fetch m t o agent list operation
	MtoAgentFetchMTOAgentListHandler mto_agent.FetchMTOAgentListHandler
	// PpmFinishDocumentReviewHandler sets the operation handler for the finish document review operation
	PpmFinishDocumentReviewHandler ppm.FinishDocumentReviewHandler
	// CustomerGetCustomerHandler sets the operation handler for the get customer operation
	CustomerGetCustomerHandler customer.GetCustomerHandler
	// CustomerSupportRemarksGetCustomerSupportRemarksForMoveHandler sets the operation handler for the get customer support remarks for move operation
	CustomerSupportRemarksGetCustomerSupportRemarksForMoveHandler customer_support_remarks.GetCustomerSupportRemarksForMoveHandler
	// GhcDocumentsGetDocumentHandler sets the operation handler for the get document operation
	GhcDocumentsGetDocumentHandler ghc_documents.GetDocumentHandler
	// MoveTaskOrderGetEntitlementsHandler sets the operation handler for the get entitlements operation
	MoveTaskOrderGetEntitlementsHandler move_task_order.GetEntitlementsHandler
	// EvaluationReportsGetEvaluationReportHandler sets the operation handler for the get evaluation report operation
	EvaluationReportsGetEvaluationReportHandler evaluation_reports.GetEvaluationReportHandler
	// MtoServiceItemGetMTOServiceItemHandler sets the operation handler for the get m t o service item operation
	MtoServiceItemGetMTOServiceItemHandler mto_service_item.GetMTOServiceItemHandler
	// MoveGetMoveHandler sets the operation handler for the get move operation
	MoveGetMoveHandler move.GetMoveHandler
	// MoveGetMoveCounselingEvaluationReportsListHandler sets the operation handler for the get move counseling evaluation reports list operation
	MoveGetMoveCounselingEvaluationReportsListHandler move.GetMoveCounselingEvaluationReportsListHandler
	// MoveGetMoveHistoryHandler sets the operation handler for the get move history operation
	MoveGetMoveHistoryHandler move.GetMoveHistoryHandler
	// MoveGetMoveShipmentEvaluationReportsListHandler sets the operation handler for the get move shipment evaluation reports list operation
	MoveGetMoveShipmentEvaluationReportsListHandler move.GetMoveShipmentEvaluationReportsListHandler
	// MoveTaskOrderGetMoveTaskOrderHandler sets the operation handler for the get move task order operation
	MoveTaskOrderGetMoveTaskOrderHandler move_task_order.GetMoveTaskOrderHandler
	// QueuesGetMovesQueueHandler sets the operation handler for the get moves queue operation
	QueuesGetMovesQueueHandler queues.GetMovesQueueHandler
	// OrderGetOrderHandler sets the operation handler for the get order operation
	OrderGetOrderHandler order.GetOrderHandler
	// PpmGetPPMActualWeightHandler sets the operation handler for the get p p m actual weight operation
	PpmGetPPMActualWeightHandler ppm.GetPPMActualWeightHandler
	// PpmGetPPMCloseoutHandler sets the operation handler for the get p p m closeout operation
	PpmGetPPMCloseoutHandler ppm.GetPPMCloseoutHandler
	// PpmGetPPMDocumentsHandler sets the operation handler for the get p p m documents operation
	PpmGetPPMDocumentsHandler ppm.GetPPMDocumentsHandler
	// PwsViolationsGetPWSViolationsHandler sets the operation handler for the get p w s violations operation
	PwsViolationsGetPWSViolationsHandler pws_violations.GetPWSViolationsHandler
	// ApplicationParametersGetParamHandler sets the operation handler for the get param operation
	ApplicationParametersGetParamHandler application_parameters.GetParamHandler
	// PaymentRequestsGetPaymentRequestHandler sets the operation handler for the get payment request operation
	PaymentRequestsGetPaymentRequestHandler payment_requests.GetPaymentRequestHandler
	// PaymentRequestsGetPaymentRequestsForMoveHandler sets the operation handler for the get payment requests for move operation
	PaymentRequestsGetPaymentRequestsForMoveHandler payment_requests.GetPaymentRequestsForMoveHandler
	// QueuesGetPaymentRequestsQueueHandler sets the operation handler for the get payment requests queue operation
	QueuesGetPaymentRequestsQueueHandler queues.GetPaymentRequestsQueueHandler
	// ReportViolationsGetReportViolationsByReportIDHandler sets the operation handler for the get report violations by report ID operation
	ReportViolationsGetReportViolationsByReportIDHandler report_violations.GetReportViolationsByReportIDHandler
	// QueuesGetServicesCounselingQueueHandler sets the operation handler for the get services counseling queue operation
	QueuesGetServicesCounselingQueueHandler queues.GetServicesCounselingQueueHandler
	// MtoShipmentGetShipmentHandler sets the operation handler for the get shipment operation
	MtoShipmentGetShipmentHandler mto_shipment.GetShipmentHandler
	// PaymentRequestsGetShipmentsPaymentSITBalanceHandler sets the operation handler for the get shipments payment s i t balance operation
	PaymentRequestsGetShipmentsPaymentSITBalanceHandler payment_requests.GetShipmentsPaymentSITBalanceHandler
	// TransportationOfficeGetTransportationOfficesHandler sets the operation handler for the get transportation offices operation
	TransportationOfficeGetTransportationOfficesHandler transportation_office.GetTransportationOfficesHandler
	// TransportationOfficeGetTransportationOfficesOpenHandler sets the operation handler for the get transportation offices open operation
	TransportationOfficeGetTransportationOfficesOpenHandler transportation_office.GetTransportationOfficesOpenHandler
	// MtoServiceItemListMTOServiceItemsHandler sets the operation handler for the list m t o service items operation
	MtoServiceItemListMTOServiceItemsHandler mto_service_item.ListMTOServiceItemsHandler
	// MtoShipmentListMTOShipmentsHandler sets the operation handler for the list m t o shipments operation
	MtoShipmentListMTOShipmentsHandler mto_shipment.ListMTOShipmentsHandler
	// QueuesListPrimeMovesHandler sets the operation handler for the list prime moves operation
	QueuesListPrimeMovesHandler queues.ListPrimeMovesHandler
	// ShipmentRejectShipmentHandler sets the operation handler for the reject shipment operation
	ShipmentRejectShipmentHandler shipment.RejectShipmentHandler
	// LinesOfAccountingRequestLineOfAccountingHandler sets the operation handler for the request line of accounting operation
	LinesOfAccountingRequestLineOfAccountingHandler lines_of_accounting.RequestLineOfAccountingHandler
	// ShipmentRequestShipmentCancellationHandler sets the operation handler for the request shipment cancellation operation
	ShipmentRequestShipmentCancellationHandler shipment.RequestShipmentCancellationHandler
	// ShipmentRequestShipmentDiversionHandler sets the operation handler for the request shipment diversion operation
	ShipmentRequestShipmentDiversionHandler shipment.RequestShipmentDiversionHandler
	// ShipmentRequestShipmentReweighHandler sets the operation handler for the request shipment reweigh operation
	ShipmentRequestShipmentReweighHandler shipment.RequestShipmentReweighHandler
	// ShipmentReviewShipmentAddressUpdateHandler sets the operation handler for the review shipment address update operation
	ShipmentReviewShipmentAddressUpdateHandler shipment.ReviewShipmentAddressUpdateHandler
	// EvaluationReportsSaveEvaluationReportHandler sets the operation handler for the save evaluation report operation
	EvaluationReportsSaveEvaluationReportHandler evaluation_reports.SaveEvaluationReportHandler
	// CustomerSearchCustomersHandler sets the operation handler for the search customers operation
	CustomerSearchCustomersHandler customer.SearchCustomersHandler
	// MoveSearchMovesHandler sets the operation handler for the search moves operation
	MoveSearchMovesHandler move.SearchMovesHandler
	// MoveSetFinancialReviewFlagHandler sets the operation handler for the set financial review flag operation
	MoveSetFinancialReviewFlagHandler move.SetFinancialReviewFlagHandler
	// PpmShowAOAPacketHandler sets the operation handler for the show a o a packet operation
	PpmShowAOAPacketHandler ppm.ShowAOAPacketHandler
	// PpmShowPaymentPacketHandler sets the operation handler for the show payment packet operation
	PpmShowPaymentPacketHandler ppm.ShowPaymentPacketHandler
	// EvaluationReportsSubmitEvaluationReportHandler sets the operation handler for the submit evaluation report operation
	EvaluationReportsSubmitEvaluationReportHandler evaluation_reports.SubmitEvaluationReportHandler
	// TacTacValidationHandler sets the operation handler for the tac validation operation
	TacTacValidationHandler tac.TacValidationHandler
	// OrderUpdateAllowanceHandler sets the operation handler for the update allowance operation
	OrderUpdateAllowanceHandler order.UpdateAllowanceHandler
	// OrderUpdateBillableWeightHandler sets the operation handler for the update billable weight operation
	OrderUpdateBillableWeightHandler order.UpdateBillableWeightHandler
	// MoveUpdateCloseoutOfficeHandler sets the operation handler for the update closeout office operation
	MoveUpdateCloseoutOfficeHandler move.UpdateCloseoutOfficeHandler
	// CustomerUpdateCustomerHandler sets the operation handler for the update customer operation
	CustomerUpdateCustomerHandler customer.UpdateCustomerHandler
	// CustomerSupportRemarksUpdateCustomerSupportRemarkForMoveHandler sets the operation handler for the update customer support remark for move operation
	CustomerSupportRemarksUpdateCustomerSupportRemarkForMoveHandler customer_support_remarks.UpdateCustomerSupportRemarkForMoveHandler
	// MoveTaskOrderUpdateMTOReviewedBillableWeightsAtHandler sets the operation handler for the update m t o reviewed billable weights at operation
	MoveTaskOrderUpdateMTOReviewedBillableWeightsAtHandler move_task_order.UpdateMTOReviewedBillableWeightsAtHandler
	// MtoServiceItemUpdateMTOServiceItemStatusHandler sets the operation handler for the update m t o service item status operation
	MtoServiceItemUpdateMTOServiceItemStatusHandler mto_service_item.UpdateMTOServiceItemStatusHandler
	// MtoShipmentUpdateMTOShipmentHandler sets the operation handler for the update m t o shipment operation
	MtoShipmentUpdateMTOShipmentHandler mto_shipment.UpdateMTOShipmentHandler
	// MoveTaskOrderUpdateMTOStatusServiceCounselingCompletedHandler sets the operation handler for the update m t o status service counseling completed operation
	MoveTaskOrderUpdateMTOStatusServiceCounselingCompletedHandler move_task_order.UpdateMTOStatusServiceCounselingCompletedHandler
	// OrderUpdateMaxBillableWeightAsTIOHandler sets the operation handler for the update max billable weight as t i o operation
	OrderUpdateMaxBillableWeightAsTIOHandler order.UpdateMaxBillableWeightAsTIOHandler
	// MoveTaskOrderUpdateMoveTIORemarksHandler sets the operation handler for the update move t i o remarks operation
	MoveTaskOrderUpdateMoveTIORemarksHandler move_task_order.UpdateMoveTIORemarksHandler
	// MoveTaskOrderUpdateMoveTaskOrderStatusHandler sets the operation handler for the update move task order status operation
	MoveTaskOrderUpdateMoveTaskOrderStatusHandler move_task_order.UpdateMoveTaskOrderStatusHandler
	// PpmUpdateMovingExpenseHandler sets the operation handler for the update moving expense operation
	PpmUpdateMovingExpenseHandler ppm.UpdateMovingExpenseHandler
	// OrderUpdateOrderHandler sets the operation handler for the update order operation
	OrderUpdateOrderHandler order.UpdateOrderHandler
	// PaymentRequestsUpdatePaymentRequestStatusHandler sets the operation handler for the update payment request status operation
	PaymentRequestsUpdatePaymentRequestStatusHandler payment_requests.UpdatePaymentRequestStatusHandler
	// PaymentServiceItemUpdatePaymentServiceItemStatusHandler sets the operation handler for the update payment service item status operation
	PaymentServiceItemUpdatePaymentServiceItemStatusHandler payment_service_item.UpdatePaymentServiceItemStatusHandler
	// PpmUpdateProGearWeightTicketHandler sets the operation handler for the update pro gear weight ticket operation
	PpmUpdateProGearWeightTicketHandler ppm.UpdateProGearWeightTicketHandler
	// ShipmentUpdateSITServiceItemCustomerExpenseHandler sets the operation handler for the update s i t service item customer expense operation
	ShipmentUpdateSITServiceItemCustomerExpenseHandler shipment.UpdateSITServiceItemCustomerExpenseHandler
	// MtoServiceItemUpdateServiceItemSitEntryDateHandler sets the operation handler for the update service item sit entry date operation
	MtoServiceItemUpdateServiceItemSitEntryDateHandler mto_service_item.UpdateServiceItemSitEntryDateHandler
	// PpmUpdateWeightTicketHandler sets the operation handler for the update weight ticket operation
	PpmUpdateWeightTicketHandler ppm.UpdateWeightTicketHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *MymoveAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *MymoveAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *MymoveAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *MymoveAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *MymoveAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *MymoveAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *MymoveAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *MymoveAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *MymoveAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the MymoveAPI
func (o *MymoveAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.OrderAcknowledgeExcessWeightRiskHandler == nil {
		unregistered = append(unregistered, "order.AcknowledgeExcessWeightRiskHandler")
	}
	if o.ShipmentApproveSITExtensionHandler == nil {
		unregistered = append(unregistered, "shipment.ApproveSITExtensionHandler")
	}
	if o.ShipmentApproveShipmentHandler == nil {
		unregistered = append(unregistered, "shipment.ApproveShipmentHandler")
	}
	if o.ShipmentApproveShipmentDiversionHandler == nil {
		unregistered = append(unregistered, "shipment.ApproveShipmentDiversionHandler")
	}
	if o.ReportViolationsAssociateReportViolationsHandler == nil {
		unregistered = append(unregistered, "report_violations.AssociateReportViolationsHandler")
	}
	if o.OrderCounselingUpdateAllowanceHandler == nil {
		unregistered = append(unregistered, "order.CounselingUpdateAllowanceHandler")
	}
	if o.OrderCounselingUpdateOrderHandler == nil {
		unregistered = append(unregistered, "order.CounselingUpdateOrderHandler")
	}
	if o.ShipmentCreateApprovedSITDurationUpdateHandler == nil {
		unregistered = append(unregistered, "shipment.CreateApprovedSITDurationUpdateHandler")
	}
	if o.CustomerSupportRemarksCreateCustomerSupportRemarkForMoveHandler == nil {
		unregistered = append(unregistered, "customer_support_remarks.CreateCustomerSupportRemarkForMoveHandler")
	}
	if o.CustomerCreateCustomerWithOktaOptionHandler == nil {
		unregistered = append(unregistered, "customer.CreateCustomerWithOktaOptionHandler")
	}
	if o.EvaluationReportsCreateEvaluationReportHandler == nil {
		unregistered = append(unregistered, "evaluation_reports.CreateEvaluationReportHandler")
	}
	if o.MtoShipmentCreateMTOShipmentHandler == nil {
		unregistered = append(unregistered, "mto_shipment.CreateMTOShipmentHandler")
	}
	if o.OrderCreateOrderHandler == nil {
		unregistered = append(unregistered, "order.CreateOrderHandler")
	}
	if o.OfficeUsersCreateRequestedOfficeUserHandler == nil {
		unregistered = append(unregistered, "office_users.CreateRequestedOfficeUserHandler")
	}
	if o.UploadsCreateUploadHandler == nil {
		unregistered = append(unregistered, "uploads.CreateUploadHandler")
	}
	if o.CustomerSupportRemarksDeleteCustomerSupportRemarkHandler == nil {
		unregistered = append(unregistered, "customer_support_remarks.DeleteCustomerSupportRemarkHandler")
	}
	if o.EvaluationReportsDeleteEvaluationReportHandler == nil {
		unregistered = append(unregistered, "evaluation_reports.DeleteEvaluationReportHandler")
	}
	if o.ShipmentDeleteShipmentHandler == nil {
		unregistered = append(unregistered, "shipment.DeleteShipmentHandler")
	}
	if o.ShipmentDenySITExtensionHandler == nil {
		unregistered = append(unregistered, "shipment.DenySITExtensionHandler")
	}
	if o.EvaluationReportsDownloadEvaluationReportHandler == nil {
		unregistered = append(unregistered, "evaluation_reports.DownloadEvaluationReportHandler")
	}
	if o.MtoAgentFetchMTOAgentListHandler == nil {
		unregistered = append(unregistered, "mto_agent.FetchMTOAgentListHandler")
	}
	if o.PpmFinishDocumentReviewHandler == nil {
		unregistered = append(unregistered, "ppm.FinishDocumentReviewHandler")
	}
	if o.CustomerGetCustomerHandler == nil {
		unregistered = append(unregistered, "customer.GetCustomerHandler")
	}
	if o.CustomerSupportRemarksGetCustomerSupportRemarksForMoveHandler == nil {
		unregistered = append(unregistered, "customer_support_remarks.GetCustomerSupportRemarksForMoveHandler")
	}
	if o.GhcDocumentsGetDocumentHandler == nil {
		unregistered = append(unregistered, "ghc_documents.GetDocumentHandler")
	}
	if o.MoveTaskOrderGetEntitlementsHandler == nil {
		unregistered = append(unregistered, "move_task_order.GetEntitlementsHandler")
	}
	if o.EvaluationReportsGetEvaluationReportHandler == nil {
		unregistered = append(unregistered, "evaluation_reports.GetEvaluationReportHandler")
	}
	if o.MtoServiceItemGetMTOServiceItemHandler == nil {
		unregistered = append(unregistered, "mto_service_item.GetMTOServiceItemHandler")
	}
	if o.MoveGetMoveHandler == nil {
		unregistered = append(unregistered, "move.GetMoveHandler")
	}
	if o.MoveGetMoveCounselingEvaluationReportsListHandler == nil {
		unregistered = append(unregistered, "move.GetMoveCounselingEvaluationReportsListHandler")
	}
	if o.MoveGetMoveHistoryHandler == nil {
		unregistered = append(unregistered, "move.GetMoveHistoryHandler")
	}
	if o.MoveGetMoveShipmentEvaluationReportsListHandler == nil {
		unregistered = append(unregistered, "move.GetMoveShipmentEvaluationReportsListHandler")
	}
	if o.MoveTaskOrderGetMoveTaskOrderHandler == nil {
		unregistered = append(unregistered, "move_task_order.GetMoveTaskOrderHandler")
	}
	if o.QueuesGetMovesQueueHandler == nil {
		unregistered = append(unregistered, "queues.GetMovesQueueHandler")
	}
	if o.OrderGetOrderHandler == nil {
		unregistered = append(unregistered, "order.GetOrderHandler")
	}
	if o.PpmGetPPMActualWeightHandler == nil {
		unregistered = append(unregistered, "ppm.GetPPMActualWeightHandler")
	}
	if o.PpmGetPPMCloseoutHandler == nil {
		unregistered = append(unregistered, "ppm.GetPPMCloseoutHandler")
	}
	if o.PpmGetPPMDocumentsHandler == nil {
		unregistered = append(unregistered, "ppm.GetPPMDocumentsHandler")
	}
	if o.PwsViolationsGetPWSViolationsHandler == nil {
		unregistered = append(unregistered, "pws_violations.GetPWSViolationsHandler")
	}
	if o.ApplicationParametersGetParamHandler == nil {
		unregistered = append(unregistered, "application_parameters.GetParamHandler")
	}
	if o.PaymentRequestsGetPaymentRequestHandler == nil {
		unregistered = append(unregistered, "payment_requests.GetPaymentRequestHandler")
	}
	if o.PaymentRequestsGetPaymentRequestsForMoveHandler == nil {
		unregistered = append(unregistered, "payment_requests.GetPaymentRequestsForMoveHandler")
	}
	if o.QueuesGetPaymentRequestsQueueHandler == nil {
		unregistered = append(unregistered, "queues.GetPaymentRequestsQueueHandler")
	}
	if o.ReportViolationsGetReportViolationsByReportIDHandler == nil {
		unregistered = append(unregistered, "report_violations.GetReportViolationsByReportIDHandler")
	}
	if o.QueuesGetServicesCounselingQueueHandler == nil {
		unregistered = append(unregistered, "queues.GetServicesCounselingQueueHandler")
	}
	if o.MtoShipmentGetShipmentHandler == nil {
		unregistered = append(unregistered, "mto_shipment.GetShipmentHandler")
	}
	if o.PaymentRequestsGetShipmentsPaymentSITBalanceHandler == nil {
		unregistered = append(unregistered, "payment_requests.GetShipmentsPaymentSITBalanceHandler")
	}
	if o.TransportationOfficeGetTransportationOfficesHandler == nil {
		unregistered = append(unregistered, "transportation_office.GetTransportationOfficesHandler")
	}
	if o.TransportationOfficeGetTransportationOfficesOpenHandler == nil {
		unregistered = append(unregistered, "transportation_office.GetTransportationOfficesOpenHandler")
	}
	if o.MtoServiceItemListMTOServiceItemsHandler == nil {
		unregistered = append(unregistered, "mto_service_item.ListMTOServiceItemsHandler")
	}
	if o.MtoShipmentListMTOShipmentsHandler == nil {
		unregistered = append(unregistered, "mto_shipment.ListMTOShipmentsHandler")
	}
	if o.QueuesListPrimeMovesHandler == nil {
		unregistered = append(unregistered, "queues.ListPrimeMovesHandler")
	}
	if o.ShipmentRejectShipmentHandler == nil {
		unregistered = append(unregistered, "shipment.RejectShipmentHandler")
	}
	if o.LinesOfAccountingRequestLineOfAccountingHandler == nil {
		unregistered = append(unregistered, "lines_of_accounting.RequestLineOfAccountingHandler")
	}
	if o.ShipmentRequestShipmentCancellationHandler == nil {
		unregistered = append(unregistered, "shipment.RequestShipmentCancellationHandler")
	}
	if o.ShipmentRequestShipmentDiversionHandler == nil {
		unregistered = append(unregistered, "shipment.RequestShipmentDiversionHandler")
	}
	if o.ShipmentRequestShipmentReweighHandler == nil {
		unregistered = append(unregistered, "shipment.RequestShipmentReweighHandler")
	}
	if o.ShipmentReviewShipmentAddressUpdateHandler == nil {
		unregistered = append(unregistered, "shipment.ReviewShipmentAddressUpdateHandler")
	}
	if o.EvaluationReportsSaveEvaluationReportHandler == nil {
		unregistered = append(unregistered, "evaluation_reports.SaveEvaluationReportHandler")
	}
	if o.CustomerSearchCustomersHandler == nil {
		unregistered = append(unregistered, "customer.SearchCustomersHandler")
	}
	if o.MoveSearchMovesHandler == nil {
		unregistered = append(unregistered, "move.SearchMovesHandler")
	}
	if o.MoveSetFinancialReviewFlagHandler == nil {
		unregistered = append(unregistered, "move.SetFinancialReviewFlagHandler")
	}
	if o.PpmShowAOAPacketHandler == nil {
		unregistered = append(unregistered, "ppm.ShowAOAPacketHandler")
	}
	if o.PpmShowPaymentPacketHandler == nil {
		unregistered = append(unregistered, "ppm.ShowPaymentPacketHandler")
	}
	if o.EvaluationReportsSubmitEvaluationReportHandler == nil {
		unregistered = append(unregistered, "evaluation_reports.SubmitEvaluationReportHandler")
	}
	if o.TacTacValidationHandler == nil {
		unregistered = append(unregistered, "tac.TacValidationHandler")
	}
	if o.OrderUpdateAllowanceHandler == nil {
		unregistered = append(unregistered, "order.UpdateAllowanceHandler")
	}
	if o.OrderUpdateBillableWeightHandler == nil {
		unregistered = append(unregistered, "order.UpdateBillableWeightHandler")
	}
	if o.MoveUpdateCloseoutOfficeHandler == nil {
		unregistered = append(unregistered, "move.UpdateCloseoutOfficeHandler")
	}
	if o.CustomerUpdateCustomerHandler == nil {
		unregistered = append(unregistered, "customer.UpdateCustomerHandler")
	}
	if o.CustomerSupportRemarksUpdateCustomerSupportRemarkForMoveHandler == nil {
		unregistered = append(unregistered, "customer_support_remarks.UpdateCustomerSupportRemarkForMoveHandler")
	}
	if o.MoveTaskOrderUpdateMTOReviewedBillableWeightsAtHandler == nil {
		unregistered = append(unregistered, "move_task_order.UpdateMTOReviewedBillableWeightsAtHandler")
	}
	if o.MtoServiceItemUpdateMTOServiceItemStatusHandler == nil {
		unregistered = append(unregistered, "mto_service_item.UpdateMTOServiceItemStatusHandler")
	}
	if o.MtoShipmentUpdateMTOShipmentHandler == nil {
		unregistered = append(unregistered, "mto_shipment.UpdateMTOShipmentHandler")
	}
	if o.MoveTaskOrderUpdateMTOStatusServiceCounselingCompletedHandler == nil {
		unregistered = append(unregistered, "move_task_order.UpdateMTOStatusServiceCounselingCompletedHandler")
	}
	if o.OrderUpdateMaxBillableWeightAsTIOHandler == nil {
		unregistered = append(unregistered, "order.UpdateMaxBillableWeightAsTIOHandler")
	}
	if o.MoveTaskOrderUpdateMoveTIORemarksHandler == nil {
		unregistered = append(unregistered, "move_task_order.UpdateMoveTIORemarksHandler")
	}
	if o.MoveTaskOrderUpdateMoveTaskOrderStatusHandler == nil {
		unregistered = append(unregistered, "move_task_order.UpdateMoveTaskOrderStatusHandler")
	}
	if o.PpmUpdateMovingExpenseHandler == nil {
		unregistered = append(unregistered, "ppm.UpdateMovingExpenseHandler")
	}
	if o.OrderUpdateOrderHandler == nil {
		unregistered = append(unregistered, "order.UpdateOrderHandler")
	}
	if o.PaymentRequestsUpdatePaymentRequestStatusHandler == nil {
		unregistered = append(unregistered, "payment_requests.UpdatePaymentRequestStatusHandler")
	}
	if o.PaymentServiceItemUpdatePaymentServiceItemStatusHandler == nil {
		unregistered = append(unregistered, "payment_service_item.UpdatePaymentServiceItemStatusHandler")
	}
	if o.PpmUpdateProGearWeightTicketHandler == nil {
		unregistered = append(unregistered, "ppm.UpdateProGearWeightTicketHandler")
	}
	if o.ShipmentUpdateSITServiceItemCustomerExpenseHandler == nil {
		unregistered = append(unregistered, "shipment.UpdateSITServiceItemCustomerExpenseHandler")
	}
	if o.MtoServiceItemUpdateServiceItemSitEntryDateHandler == nil {
		unregistered = append(unregistered, "mto_service_item.UpdateServiceItemSitEntryDateHandler")
	}
	if o.PpmUpdateWeightTicketHandler == nil {
		unregistered = append(unregistered, "ppm.UpdateWeightTicketHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *MymoveAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *MymoveAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *MymoveAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *MymoveAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *MymoveAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/pdf":
			result["application/pdf"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *MymoveAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the mymove API
func (o *MymoveAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *MymoveAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orders/{orderID}/acknowledge-excess-weight-risk"] = order.NewAcknowledgeExcessWeightRisk(o.context, o.OrderAcknowledgeExcessWeightRiskHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/shipments/{shipmentID}/sit-extensions/{sitExtensionID}/approve"] = shipment.NewApproveSITExtension(o.context, o.ShipmentApproveSITExtensionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shipments/{shipmentID}/approve"] = shipment.NewApproveShipment(o.context, o.ShipmentApproveShipmentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shipments/{shipmentID}/approve-diversion"] = shipment.NewApproveShipmentDiversion(o.context, o.ShipmentApproveShipmentDiversionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/report-violations/{reportID}"] = report_violations.NewAssociateReportViolations(o.context, o.ReportViolationsAssociateReportViolationsHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/counseling/orders/{orderID}/allowances"] = order.NewCounselingUpdateAllowance(o.context, o.OrderCounselingUpdateAllowanceHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/counseling/orders/{orderID}"] = order.NewCounselingUpdateOrder(o.context, o.OrderCounselingUpdateOrderHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shipments/{shipmentID}/sit-extensions"] = shipment.NewCreateApprovedSITDurationUpdate(o.context, o.ShipmentCreateApprovedSITDurationUpdateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/moves/{locator}/customer-support-remarks"] = customer_support_remarks.NewCreateCustomerSupportRemarkForMove(o.context, o.CustomerSupportRemarksCreateCustomerSupportRemarkForMoveHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer"] = customer.NewCreateCustomerWithOktaOption(o.context, o.CustomerCreateCustomerWithOktaOptionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/moves/{locator}/evaluation-reports"] = evaluation_reports.NewCreateEvaluationReport(o.context, o.EvaluationReportsCreateEvaluationReportHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mto-shipments"] = mto_shipment.NewCreateMTOShipment(o.context, o.MtoShipmentCreateMTOShipmentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orders"] = order.NewCreateOrder(o.context, o.OrderCreateOrderHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/open/requested-office-users"] = office_users.NewCreateRequestedOfficeUser(o.context, o.OfficeUsersCreateRequestedOfficeUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/uploads"] = uploads.NewCreateUpload(o.context, o.UploadsCreateUploadHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/customer-support-remarks/{customerSupportRemarkID}"] = customer_support_remarks.NewDeleteCustomerSupportRemark(o.context, o.CustomerSupportRemarksDeleteCustomerSupportRemarkHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/evaluation-reports/{reportID}"] = evaluation_reports.NewDeleteEvaluationReport(o.context, o.EvaluationReportsDeleteEvaluationReportHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/shipments/{shipmentID}"] = shipment.NewDeleteShipment(o.context, o.ShipmentDeleteShipmentHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/shipments/{shipmentID}/sit-extensions/{sitExtensionID}/deny"] = shipment.NewDenySITExtension(o.context, o.ShipmentDenySITExtensionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/evaluation-reports/{reportID}/download"] = evaluation_reports.NewDownloadEvaluationReport(o.context, o.EvaluationReportsDownloadEvaluationReportHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}/mto-agents"] = mto_agent.NewFetchMTOAgentList(o.context, o.MtoAgentFetchMTOAgentListHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/ppm-shipments/{ppmShipmentId}/finish-document-review"] = ppm.NewFinishDocumentReview(o.context, o.PpmFinishDocumentReviewHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerID}"] = customer.NewGetCustomer(o.context, o.CustomerGetCustomerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/moves/{locator}/customer-support-remarks"] = customer_support_remarks.NewGetCustomerSupportRemarksForMove(o.context, o.CustomerSupportRemarksGetCustomerSupportRemarksForMoveHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/documents/{documentId}"] = ghc_documents.NewGetDocument(o.context, o.GhcDocumentsGetDocumentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/move-task-orders/{moveTaskOrderID}/entitlements"] = move_task_order.NewGetEntitlements(o.context, o.MoveTaskOrderGetEntitlementsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/evaluation-reports/{reportID}"] = evaluation_reports.NewGetEvaluationReport(o.context, o.EvaluationReportsGetEvaluationReportHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}"] = mto_service_item.NewGetMTOServiceItem(o.context, o.MtoServiceItemGetMTOServiceItemHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/move/{locator}"] = move.NewGetMove(o.context, o.MoveGetMoveHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/moves/{moveID}/counseling-evaluation-reports-list"] = move.NewGetMoveCounselingEvaluationReportsList(o.context, o.MoveGetMoveCounselingEvaluationReportsListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/move/{locator}/history"] = move.NewGetMoveHistory(o.context, o.MoveGetMoveHistoryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/moves/{moveID}/shipment-evaluation-reports-list"] = move.NewGetMoveShipmentEvaluationReportsList(o.context, o.MoveGetMoveShipmentEvaluationReportsListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/move-task-orders/{moveTaskOrderID}"] = move_task_order.NewGetMoveTaskOrder(o.context, o.MoveTaskOrderGetMoveTaskOrderHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/queues/moves"] = queues.NewGetMovesQueue(o.context, o.QueuesGetMovesQueueHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orders/{orderID}"] = order.NewGetOrder(o.context, o.OrderGetOrderHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ppm-shipments/{ppmShipmentId}/actual-weight"] = ppm.NewGetPPMActualWeight(o.context, o.PpmGetPPMActualWeightHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ppm-shipments/{ppmShipmentId}/closeout"] = ppm.NewGetPPMCloseout(o.context, o.PpmGetPPMCloseoutHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/shipments/{shipmentID}/ppm-documents"] = ppm.NewGetPPMDocuments(o.context, o.PpmGetPPMDocumentsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pws-violations"] = pws_violations.NewGetPWSViolations(o.context, o.PwsViolationsGetPWSViolationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/application_parameters/{parameterName}"] = application_parameters.NewGetParam(o.context, o.ApplicationParametersGetParamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/payment-requests/{paymentRequestID}"] = payment_requests.NewGetPaymentRequest(o.context, o.PaymentRequestsGetPaymentRequestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/moves/{locator}/payment-requests"] = payment_requests.NewGetPaymentRequestsForMove(o.context, o.PaymentRequestsGetPaymentRequestsForMoveHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/queues/payment-requests"] = queues.NewGetPaymentRequestsQueue(o.context, o.QueuesGetPaymentRequestsQueueHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/report-violations/{reportID}"] = report_violations.NewGetReportViolationsByReportID(o.context, o.ReportViolationsGetReportViolationsByReportIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/queues/counseling"] = queues.NewGetServicesCounselingQueue(o.context, o.QueuesGetServicesCounselingQueueHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/shipments/{shipmentID}"] = mto_shipment.NewGetShipment(o.context, o.MtoShipmentGetShipmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/payment-requests/{paymentRequestID}/shipments-payment-sit-balance"] = payment_requests.NewGetShipmentsPaymentSITBalance(o.context, o.PaymentRequestsGetShipmentsPaymentSITBalanceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/transportation-offices"] = transportation_office.NewGetTransportationOffices(o.context, o.TransportationOfficeGetTransportationOfficesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/open/transportation-offices"] = transportation_office.NewGetTransportationOfficesOpen(o.context, o.TransportationOfficeGetTransportationOfficesOpenHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/move_task_orders/{moveTaskOrderID}/mto_service_items"] = mto_service_item.NewListMTOServiceItems(o.context, o.MtoServiceItemListMTOServiceItemsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/move_task_orders/{moveTaskOrderID}/mto_shipments"] = mto_shipment.NewListMTOShipments(o.context, o.MtoShipmentListMTOShipmentsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/queues/prime-moves"] = queues.NewListPrimeMoves(o.context, o.QueuesListPrimeMovesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shipments/{shipmentID}/reject"] = shipment.NewRejectShipment(o.context, o.ShipmentRejectShipmentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/lines-of-accounting"] = lines_of_accounting.NewRequestLineOfAccounting(o.context, o.LinesOfAccountingRequestLineOfAccountingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shipments/{shipmentID}/request-cancellation"] = shipment.NewRequestShipmentCancellation(o.context, o.ShipmentRequestShipmentCancellationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shipments/{shipmentID}/request-diversion"] = shipment.NewRequestShipmentDiversion(o.context, o.ShipmentRequestShipmentDiversionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shipments/{shipmentID}/request-reweigh"] = shipment.NewRequestShipmentReweigh(o.context, o.ShipmentRequestShipmentReweighHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/shipments/{shipmentID}/review-shipment-address-update"] = shipment.NewReviewShipmentAddressUpdate(o.context, o.ShipmentReviewShipmentAddressUpdateHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/evaluation-reports/{reportID}"] = evaluation_reports.NewSaveEvaluationReport(o.context, o.EvaluationReportsSaveEvaluationReportHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/search"] = customer.NewSearchCustomers(o.context, o.CustomerSearchCustomersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/moves/search"] = move.NewSearchMoves(o.context, o.MoveSearchMovesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/moves/{moveID}/financial-review-flag"] = move.NewSetFinancialReviewFlag(o.context, o.MoveSetFinancialReviewFlagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ppm-shipments/{ppmShipmentId}/aoa-packet"] = ppm.NewShowAOAPacket(o.context, o.PpmShowAOAPacketHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ppm-shipments/{ppmShipmentId}/payment-packet"] = ppm.NewShowPaymentPacket(o.context, o.PpmShowPaymentPacketHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/evaluation-reports/{reportID}/submit"] = evaluation_reports.NewSubmitEvaluationReport(o.context, o.EvaluationReportsSubmitEvaluationReportHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tac/valid"] = tac.NewTacValidation(o.context, o.TacTacValidationHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/orders/{orderID}/allowances"] = order.NewUpdateAllowance(o.context, o.OrderUpdateAllowanceHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/orders/{orderID}/update-billable-weight"] = order.NewUpdateBillableWeight(o.context, o.OrderUpdateBillableWeightHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/moves/{locator}/closeout-office"] = move.NewUpdateCloseoutOffice(o.context, o.MoveUpdateCloseoutOfficeHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/customer/{customerID}"] = customer.NewUpdateCustomer(o.context, o.CustomerUpdateCustomerHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/customer-support-remarks/{customerSupportRemarkID}"] = customer_support_remarks.NewUpdateCustomerSupportRemarkForMove(o.context, o.CustomerSupportRemarksUpdateCustomerSupportRemarkForMoveHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/move-task-orders/{moveTaskOrderID}/billable-weights-reviewed-at"] = move_task_order.NewUpdateMTOReviewedBillableWeightsAt(o.context, o.MoveTaskOrderUpdateMTOReviewedBillableWeightsAtHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}/status"] = mto_service_item.NewUpdateMTOServiceItemStatus(o.context, o.MtoServiceItemUpdateMTOServiceItemStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}"] = mto_shipment.NewUpdateMTOShipment(o.context, o.MtoShipmentUpdateMTOShipmentHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/move-task-orders/{moveTaskOrderID}/status/service-counseling-completed"] = move_task_order.NewUpdateMTOStatusServiceCounselingCompleted(o.context, o.MoveTaskOrderUpdateMTOStatusServiceCounselingCompletedHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/orders/{orderID}/update-max-billable-weight/tio"] = order.NewUpdateMaxBillableWeightAsTIO(o.context, o.OrderUpdateMaxBillableWeightAsTIOHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/move-task-orders/{moveTaskOrderID}/tio-remarks"] = move_task_order.NewUpdateMoveTIORemarks(o.context, o.MoveTaskOrderUpdateMoveTIORemarksHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/move-task-orders/{moveTaskOrderID}/status"] = move_task_order.NewUpdateMoveTaskOrderStatus(o.context, o.MoveTaskOrderUpdateMoveTaskOrderStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/ppm-shipments/{ppmShipmentId}/moving-expenses/{movingExpenseId}"] = ppm.NewUpdateMovingExpense(o.context, o.PpmUpdateMovingExpenseHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/orders/{orderID}"] = order.NewUpdateOrder(o.context, o.OrderUpdateOrderHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/payment-requests/{paymentRequestID}/status"] = payment_requests.NewUpdatePaymentRequestStatus(o.context, o.PaymentRequestsUpdatePaymentRequestStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/move-task-orders/{moveTaskOrderID}/payment-service-items/{paymentServiceItemID}/status"] = payment_service_item.NewUpdatePaymentServiceItemStatus(o.context, o.PaymentServiceItemUpdatePaymentServiceItemStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets/{proGearWeightTicketId}"] = ppm.NewUpdateProGearWeightTicket(o.context, o.PpmUpdateProGearWeightTicketHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/shipments/{shipmentID}/sit-service-item/convert-to-customer-expense"] = shipment.NewUpdateSITServiceItemCustomerExpense(o.context, o.ShipmentUpdateSITServiceItemCustomerExpenseHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/service-item/{mtoServiceItemID}/entry-date-update"] = mto_service_item.NewUpdateServiceItemSitEntryDate(o.context, o.MtoServiceItemUpdateServiceItemSitEntryDateHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/ppm-shipments/{ppmShipmentId}/weight-ticket/{weightTicketId}"] = ppm.NewUpdateWeightTicket(o.context, o.PpmUpdateWeightTicketHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *MymoveAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *MymoveAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *MymoveAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *MymoveAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *MymoveAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
