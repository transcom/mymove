// Code generated by go-swagger; DO NOT EDIT.

package evaluation_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateEvaluationReportForShipmentHandlerFunc turns a function with the right signature into a create evaluation report for shipment handler
type CreateEvaluationReportForShipmentHandlerFunc func(CreateEvaluationReportForShipmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateEvaluationReportForShipmentHandlerFunc) Handle(params CreateEvaluationReportForShipmentParams) middleware.Responder {
	return fn(params)
}

// CreateEvaluationReportForShipmentHandler interface for that can handle valid create evaluation report for shipment params
type CreateEvaluationReportForShipmentHandler interface {
	Handle(CreateEvaluationReportForShipmentParams) middleware.Responder
}

// NewCreateEvaluationReportForShipment creates a new http.Handler for the create evaluation report for shipment operation
func NewCreateEvaluationReportForShipment(ctx *middleware.Context, handler CreateEvaluationReportForShipmentHandler) *CreateEvaluationReportForShipment {
	return &CreateEvaluationReportForShipment{Context: ctx, Handler: handler}
}

/* CreateEvaluationReportForShipment swagger:route POST /moves/shipment-evaluation-reports evaluationReports createEvaluationReportForShipment

Creates a shipment evaluation report

Creates a shipment evaluation report

*/
type CreateEvaluationReportForShipment struct {
	Context *middleware.Context
	Handler CreateEvaluationReportForShipmentHandler
}

func (o *CreateEvaluationReportForShipment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateEvaluationReportForShipmentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
