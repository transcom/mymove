// Code generated by go-swagger; DO NOT EDIT.

package evaluation_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddAppealToSeriousIncidentHandlerFunc turns a function with the right signature into a add appeal to serious incident handler
type AddAppealToSeriousIncidentHandlerFunc func(AddAppealToSeriousIncidentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddAppealToSeriousIncidentHandlerFunc) Handle(params AddAppealToSeriousIncidentParams) middleware.Responder {
	return fn(params)
}

// AddAppealToSeriousIncidentHandler interface for that can handle valid add appeal to serious incident params
type AddAppealToSeriousIncidentHandler interface {
	Handle(AddAppealToSeriousIncidentParams) middleware.Responder
}

// NewAddAppealToSeriousIncident creates a new http.Handler for the add appeal to serious incident operation
func NewAddAppealToSeriousIncident(ctx *middleware.Context, handler AddAppealToSeriousIncidentHandler) *AddAppealToSeriousIncident {
	return &AddAppealToSeriousIncident{Context: ctx, Handler: handler}
}

/*
	AddAppealToSeriousIncident swagger:route POST /evaluation-reports/{reportID}/appeal/add evaluationReports addAppealToSeriousIncident

# Adds an appeal to a serious incident on an evaluation report

Adds an appeal to a serious incident on an evaluation report
*/
type AddAppealToSeriousIncident struct {
	Context *middleware.Context
	Handler AddAppealToSeriousIncidentHandler
}

func (o *AddAppealToSeriousIncident) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddAppealToSeriousIncidentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
