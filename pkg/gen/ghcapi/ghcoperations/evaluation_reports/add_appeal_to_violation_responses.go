// Code generated by go-swagger; DO NOT EDIT.

package evaluation_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// AddAppealToViolationOKCode is the HTTP code returned for type AddAppealToViolationOK
const AddAppealToViolationOKCode int = 200

/*
AddAppealToViolationOK Successfully got the report

swagger:response addAppealToViolationOK
*/
type AddAppealToViolationOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.EvaluationReport `json:"body,omitempty"`
}

// NewAddAppealToViolationOK creates AddAppealToViolationOK with default headers values
func NewAddAppealToViolationOK() *AddAppealToViolationOK {

	return &AddAppealToViolationOK{}
}

// WithPayload adds the payload to the add appeal to violation o k response
func (o *AddAppealToViolationOK) WithPayload(payload *ghcmessages.EvaluationReport) *AddAppealToViolationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add appeal to violation o k response
func (o *AddAppealToViolationOK) SetPayload(payload *ghcmessages.EvaluationReport) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddAppealToViolationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddAppealToViolationForbiddenCode is the HTTP code returned for type AddAppealToViolationForbidden
const AddAppealToViolationForbiddenCode int = 403

/*
AddAppealToViolationForbidden The request was denied

swagger:response addAppealToViolationForbidden
*/
type AddAppealToViolationForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewAddAppealToViolationForbidden creates AddAppealToViolationForbidden with default headers values
func NewAddAppealToViolationForbidden() *AddAppealToViolationForbidden {

	return &AddAppealToViolationForbidden{}
}

// WithPayload adds the payload to the add appeal to violation forbidden response
func (o *AddAppealToViolationForbidden) WithPayload(payload *ghcmessages.Error) *AddAppealToViolationForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add appeal to violation forbidden response
func (o *AddAppealToViolationForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddAppealToViolationForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddAppealToViolationNotFoundCode is the HTTP code returned for type AddAppealToViolationNotFound
const AddAppealToViolationNotFoundCode int = 404

/*
AddAppealToViolationNotFound The requested resource wasn't found

swagger:response addAppealToViolationNotFound
*/
type AddAppealToViolationNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewAddAppealToViolationNotFound creates AddAppealToViolationNotFound with default headers values
func NewAddAppealToViolationNotFound() *AddAppealToViolationNotFound {

	return &AddAppealToViolationNotFound{}
}

// WithPayload adds the payload to the add appeal to violation not found response
func (o *AddAppealToViolationNotFound) WithPayload(payload *ghcmessages.Error) *AddAppealToViolationNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add appeal to violation not found response
func (o *AddAppealToViolationNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddAppealToViolationNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddAppealToViolationPreconditionFailedCode is the HTTP code returned for type AddAppealToViolationPreconditionFailed
const AddAppealToViolationPreconditionFailedCode int = 412

/*
AddAppealToViolationPreconditionFailed Precondition failed

swagger:response addAppealToViolationPreconditionFailed
*/
type AddAppealToViolationPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewAddAppealToViolationPreconditionFailed creates AddAppealToViolationPreconditionFailed with default headers values
func NewAddAppealToViolationPreconditionFailed() *AddAppealToViolationPreconditionFailed {

	return &AddAppealToViolationPreconditionFailed{}
}

// WithPayload adds the payload to the add appeal to violation precondition failed response
func (o *AddAppealToViolationPreconditionFailed) WithPayload(payload *ghcmessages.Error) *AddAppealToViolationPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add appeal to violation precondition failed response
func (o *AddAppealToViolationPreconditionFailed) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddAppealToViolationPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddAppealToViolationUnprocessableEntityCode is the HTTP code returned for type AddAppealToViolationUnprocessableEntity
const AddAppealToViolationUnprocessableEntityCode int = 422

/*
AddAppealToViolationUnprocessableEntity The payload was unprocessable.

swagger:response addAppealToViolationUnprocessableEntity
*/
type AddAppealToViolationUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewAddAppealToViolationUnprocessableEntity creates AddAppealToViolationUnprocessableEntity with default headers values
func NewAddAppealToViolationUnprocessableEntity() *AddAppealToViolationUnprocessableEntity {

	return &AddAppealToViolationUnprocessableEntity{}
}

// WithPayload adds the payload to the add appeal to violation unprocessable entity response
func (o *AddAppealToViolationUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *AddAppealToViolationUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add appeal to violation unprocessable entity response
func (o *AddAppealToViolationUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddAppealToViolationUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddAppealToViolationInternalServerErrorCode is the HTTP code returned for type AddAppealToViolationInternalServerError
const AddAppealToViolationInternalServerErrorCode int = 500

/*
AddAppealToViolationInternalServerError A server error occurred

swagger:response addAppealToViolationInternalServerError
*/
type AddAppealToViolationInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewAddAppealToViolationInternalServerError creates AddAppealToViolationInternalServerError with default headers values
func NewAddAppealToViolationInternalServerError() *AddAppealToViolationInternalServerError {

	return &AddAppealToViolationInternalServerError{}
}

// WithPayload adds the payload to the add appeal to violation internal server error response
func (o *AddAppealToViolationInternalServerError) WithPayload(payload *ghcmessages.Error) *AddAppealToViolationInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add appeal to violation internal server error response
func (o *AddAppealToViolationInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddAppealToViolationInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
