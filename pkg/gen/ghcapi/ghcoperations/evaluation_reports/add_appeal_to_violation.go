// Code generated by go-swagger; DO NOT EDIT.

package evaluation_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddAppealToViolationHandlerFunc turns a function with the right signature into a add appeal to violation handler
type AddAppealToViolationHandlerFunc func(AddAppealToViolationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddAppealToViolationHandlerFunc) Handle(params AddAppealToViolationParams) middleware.Responder {
	return fn(params)
}

// AddAppealToViolationHandler interface for that can handle valid add appeal to violation params
type AddAppealToViolationHandler interface {
	Handle(AddAppealToViolationParams) middleware.Responder
}

// NewAddAppealToViolation creates a new http.Handler for the add appeal to violation operation
func NewAddAppealToViolation(ctx *middleware.Context, handler AddAppealToViolationHandler) *AddAppealToViolation {
	return &AddAppealToViolation{Context: ctx, Handler: handler}
}

/*
	AddAppealToViolation swagger:route POST /evaluation-reports/{reportID}/{reportViolationID}/appeal/add evaluationReports addAppealToViolation

# Adds an appeal to a violation

Adds an appeal to a violation
*/
type AddAppealToViolation struct {
	Context *middleware.Context
	Handler AddAppealToViolationHandler
}

func (o *AddAppealToViolation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddAppealToViolationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
