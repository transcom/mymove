// Code generated by go-swagger; DO NOT EDIT.

package evaluation_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SubmitEvaluationReportHandlerFunc turns a function with the right signature into a submit evaluation report handler
type SubmitEvaluationReportHandlerFunc func(SubmitEvaluationReportParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SubmitEvaluationReportHandlerFunc) Handle(params SubmitEvaluationReportParams) middleware.Responder {
	return fn(params)
}

// SubmitEvaluationReportHandler interface for that can handle valid submit evaluation report params
type SubmitEvaluationReportHandler interface {
	Handle(SubmitEvaluationReportParams) middleware.Responder
}

// NewSubmitEvaluationReport creates a new http.Handler for the submit evaluation report operation
func NewSubmitEvaluationReport(ctx *middleware.Context, handler SubmitEvaluationReportHandler) *SubmitEvaluationReport {
	return &SubmitEvaluationReport{Context: ctx, Handler: handler}
}

/*
	SubmitEvaluationReport swagger:route POST /evaluation-reports/{reportID}/submit evaluationReports submitEvaluationReport

# Submits an evaluation report

Submits an evaluation report
*/
type SubmitEvaluationReport struct {
	Context *middleware.Context
	Handler SubmitEvaluationReportHandler
}

func (o *SubmitEvaluationReport) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSubmitEvaluationReportParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
