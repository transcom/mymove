// Code generated by go-swagger; DO NOT EDIT.

package evaluation_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetEvaluationReportHandlerFunc turns a function with the right signature into a get evaluation report handler
type GetEvaluationReportHandlerFunc func(GetEvaluationReportParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEvaluationReportHandlerFunc) Handle(params GetEvaluationReportParams) middleware.Responder {
	return fn(params)
}

// GetEvaluationReportHandler interface for that can handle valid get evaluation report params
type GetEvaluationReportHandler interface {
	Handle(GetEvaluationReportParams) middleware.Responder
}

// NewGetEvaluationReport creates a new http.Handler for the get evaluation report operation
func NewGetEvaluationReport(ctx *middleware.Context, handler GetEvaluationReportHandler) *GetEvaluationReport {
	return &GetEvaluationReport{Context: ctx, Handler: handler}
}

/*
	GetEvaluationReport swagger:route GET /evaluation-reports/{reportID} evaluationReports getEvaluationReport

# Gets an evaluation report by ID

Gets an evaluation report by ID
*/
type GetEvaluationReport struct {
	Context *middleware.Context
	Handler GetEvaluationReportHandler
}

func (o *GetEvaluationReport) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetEvaluationReportParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
