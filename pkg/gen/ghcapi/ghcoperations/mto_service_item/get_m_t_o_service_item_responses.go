// Code generated by go-swagger; DO NOT EDIT.

package mto_service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// GetMTOServiceItemOKCode is the HTTP code returned for type GetMTOServiceItemOK
const GetMTOServiceItemOKCode int = 200

/*
GetMTOServiceItemOK Successfully retrieved a line item for a move task order by ID

swagger:response getMTOServiceItemOK
*/
type GetMTOServiceItemOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.MTOServiceItemSingle `json:"body,omitempty"`
}

// NewGetMTOServiceItemOK creates GetMTOServiceItemOK with default headers values
func NewGetMTOServiceItemOK() *GetMTOServiceItemOK {

	return &GetMTOServiceItemOK{}
}

// WithPayload adds the payload to the get m t o service item o k response
func (o *GetMTOServiceItemOK) WithPayload(payload *ghcmessages.MTOServiceItemSingle) *GetMTOServiceItemOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get m t o service item o k response
func (o *GetMTOServiceItemOK) SetPayload(payload *ghcmessages.MTOServiceItemSingle) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMTOServiceItemOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMTOServiceItemBadRequestCode is the HTTP code returned for type GetMTOServiceItemBadRequest
const GetMTOServiceItemBadRequestCode int = 400

/*
GetMTOServiceItemBadRequest The request payload is invalid

swagger:response getMTOServiceItemBadRequest
*/
type GetMTOServiceItemBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetMTOServiceItemBadRequest creates GetMTOServiceItemBadRequest with default headers values
func NewGetMTOServiceItemBadRequest() *GetMTOServiceItemBadRequest {

	return &GetMTOServiceItemBadRequest{}
}

// WithPayload adds the payload to the get m t o service item bad request response
func (o *GetMTOServiceItemBadRequest) WithPayload(payload *ghcmessages.Error) *GetMTOServiceItemBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get m t o service item bad request response
func (o *GetMTOServiceItemBadRequest) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMTOServiceItemBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMTOServiceItemUnauthorizedCode is the HTTP code returned for type GetMTOServiceItemUnauthorized
const GetMTOServiceItemUnauthorizedCode int = 401

/*
GetMTOServiceItemUnauthorized The request was denied

swagger:response getMTOServiceItemUnauthorized
*/
type GetMTOServiceItemUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetMTOServiceItemUnauthorized creates GetMTOServiceItemUnauthorized with default headers values
func NewGetMTOServiceItemUnauthorized() *GetMTOServiceItemUnauthorized {

	return &GetMTOServiceItemUnauthorized{}
}

// WithPayload adds the payload to the get m t o service item unauthorized response
func (o *GetMTOServiceItemUnauthorized) WithPayload(payload *ghcmessages.Error) *GetMTOServiceItemUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get m t o service item unauthorized response
func (o *GetMTOServiceItemUnauthorized) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMTOServiceItemUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMTOServiceItemForbiddenCode is the HTTP code returned for type GetMTOServiceItemForbidden
const GetMTOServiceItemForbiddenCode int = 403

/*
GetMTOServiceItemForbidden The request was denied

swagger:response getMTOServiceItemForbidden
*/
type GetMTOServiceItemForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetMTOServiceItemForbidden creates GetMTOServiceItemForbidden with default headers values
func NewGetMTOServiceItemForbidden() *GetMTOServiceItemForbidden {

	return &GetMTOServiceItemForbidden{}
}

// WithPayload adds the payload to the get m t o service item forbidden response
func (o *GetMTOServiceItemForbidden) WithPayload(payload *ghcmessages.Error) *GetMTOServiceItemForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get m t o service item forbidden response
func (o *GetMTOServiceItemForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMTOServiceItemForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMTOServiceItemNotFoundCode is the HTTP code returned for type GetMTOServiceItemNotFound
const GetMTOServiceItemNotFoundCode int = 404

/*
GetMTOServiceItemNotFound The requested resource wasn't found

swagger:response getMTOServiceItemNotFound
*/
type GetMTOServiceItemNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetMTOServiceItemNotFound creates GetMTOServiceItemNotFound with default headers values
func NewGetMTOServiceItemNotFound() *GetMTOServiceItemNotFound {

	return &GetMTOServiceItemNotFound{}
}

// WithPayload adds the payload to the get m t o service item not found response
func (o *GetMTOServiceItemNotFound) WithPayload(payload *ghcmessages.Error) *GetMTOServiceItemNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get m t o service item not found response
func (o *GetMTOServiceItemNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMTOServiceItemNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMTOServiceItemInternalServerErrorCode is the HTTP code returned for type GetMTOServiceItemInternalServerError
const GetMTOServiceItemInternalServerErrorCode int = 500

/*
GetMTOServiceItemInternalServerError A server error occurred

swagger:response getMTOServiceItemInternalServerError
*/
type GetMTOServiceItemInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetMTOServiceItemInternalServerError creates GetMTOServiceItemInternalServerError with default headers values
func NewGetMTOServiceItemInternalServerError() *GetMTOServiceItemInternalServerError {

	return &GetMTOServiceItemInternalServerError{}
}

// WithPayload adds the payload to the get m t o service item internal server error response
func (o *GetMTOServiceItemInternalServerError) WithPayload(payload *ghcmessages.Error) *GetMTOServiceItemInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get m t o service item internal server error response
func (o *GetMTOServiceItemInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMTOServiceItemInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
