// Code generated by go-swagger; DO NOT EDIT.

package mto_service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateServiceItemSitEntryDateHandlerFunc turns a function with the right signature into a update service item sit entry date handler
type UpdateServiceItemSitEntryDateHandlerFunc func(UpdateServiceItemSitEntryDateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateServiceItemSitEntryDateHandlerFunc) Handle(params UpdateServiceItemSitEntryDateParams) middleware.Responder {
	return fn(params)
}

// UpdateServiceItemSitEntryDateHandler interface for that can handle valid update service item sit entry date params
type UpdateServiceItemSitEntryDateHandler interface {
	Handle(UpdateServiceItemSitEntryDateParams) middleware.Responder
}

// NewUpdateServiceItemSitEntryDate creates a new http.Handler for the update service item sit entry date operation
func NewUpdateServiceItemSitEntryDate(ctx *middleware.Context, handler UpdateServiceItemSitEntryDateHandler) *UpdateServiceItemSitEntryDate {
	return &UpdateServiceItemSitEntryDate{Context: ctx, Handler: handler}
}

/*
	UpdateServiceItemSitEntryDate swagger:route PATCH /service-item/{mtoServiceItemID}/entry-date-update mtoServiceItem updateServiceItemSitEntryDate

# Updates a service item's SIT entry date by ID

Locates the service item in the database and updates the SIT entry date for the selected service item and returns the service item
*/
type UpdateServiceItemSitEntryDate struct {
	Context *middleware.Context
	Handler UpdateServiceItemSitEntryDateHandler
}

func (o *UpdateServiceItemSitEntryDate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateServiceItemSitEntryDateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
