// Code generated by go-swagger; DO NOT EDIT.

package mto_service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RejectSITAddressUpdateHandlerFunc turns a function with the right signature into a reject s i t address update handler
type RejectSITAddressUpdateHandlerFunc func(RejectSITAddressUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RejectSITAddressUpdateHandlerFunc) Handle(params RejectSITAddressUpdateParams) middleware.Responder {
	return fn(params)
}

// RejectSITAddressUpdateHandler interface for that can handle valid reject s i t address update params
type RejectSITAddressUpdateHandler interface {
	Handle(RejectSITAddressUpdateParams) middleware.Responder
}

// NewRejectSITAddressUpdate creates a new http.Handler for the reject s i t address update operation
func NewRejectSITAddressUpdate(ctx *middleware.Context, handler RejectSITAddressUpdateHandler) *RejectSITAddressUpdate {
	return &RejectSITAddressUpdate{Context: ctx, Handler: handler}
}

/*
	RejectSITAddressUpdate swagger:route PATCH /sit-address-update/{sitAddressUpdateID}/reject mtoServiceItem rejectSITAddressUpdate

# Rejects a SIT Address Update

This endpoint is used to reject a requested SIT address update. Office remarks are required. Rejecting the SIT address update will not update the SIT Destination Final Address.
*/
type RejectSITAddressUpdate struct {
	Context *middleware.Context
	Handler RejectSITAddressUpdateHandler
}

func (o *RejectSITAddressUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRejectSITAddressUpdateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
