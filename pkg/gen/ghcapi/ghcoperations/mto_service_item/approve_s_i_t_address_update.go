// Code generated by go-swagger; DO NOT EDIT.

package mto_service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ApproveSITAddressUpdateHandlerFunc turns a function with the right signature into a approve s i t address update handler
type ApproveSITAddressUpdateHandlerFunc func(ApproveSITAddressUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ApproveSITAddressUpdateHandlerFunc) Handle(params ApproveSITAddressUpdateParams) middleware.Responder {
	return fn(params)
}

// ApproveSITAddressUpdateHandler interface for that can handle valid approve s i t address update params
type ApproveSITAddressUpdateHandler interface {
	Handle(ApproveSITAddressUpdateParams) middleware.Responder
}

// NewApproveSITAddressUpdate creates a new http.Handler for the approve s i t address update operation
func NewApproveSITAddressUpdate(ctx *middleware.Context, handler ApproveSITAddressUpdateHandler) *ApproveSITAddressUpdate {
	return &ApproveSITAddressUpdate{Context: ctx, Handler: handler}
}

/*
	ApproveSITAddressUpdate swagger:route PATCH /sit-address-update/{sitAddressUpdateID}/approve mtoServiceItem approveSITAddressUpdate

# Approves a SIT Address Update

This endpoint is used to approve a SIT address update. Office remarks are required. Approving the SIT address update will update the SIT Destination Final Address of the associated service item
*/
type ApproveSITAddressUpdate struct {
	Context *middleware.Context
	Handler ApproveSITAddressUpdateHandler
}

func (o *ApproveSITAddressUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewApproveSITAddressUpdateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
