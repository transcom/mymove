// Code generated by go-swagger; DO NOT EDIT.

package mto_service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	ghcmessages "github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// ListMTOServiceItemsOKCode is the HTTP code returned for type ListMTOServiceItemsOK
const ListMTOServiceItemsOKCode int = 200

/*ListMTOServiceItemsOK Successfully retrieved all line items for a move task order

swagger:response listMTOServiceItemsOK
*/
type ListMTOServiceItemsOK struct {

	/*
	  In: Body
	*/
	Payload ghcmessages.MTOServiceItems `json:"body,omitempty"`
}

// NewListMTOServiceItemsOK creates ListMTOServiceItemsOK with default headers values
func NewListMTOServiceItemsOK() *ListMTOServiceItemsOK {

	return &ListMTOServiceItemsOK{}
}

// WithPayload adds the payload to the list m t o service items o k response
func (o *ListMTOServiceItemsOK) WithPayload(payload ghcmessages.MTOServiceItems) *ListMTOServiceItemsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list m t o service items o k response
func (o *ListMTOServiceItemsOK) SetPayload(payload ghcmessages.MTOServiceItems) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListMTOServiceItemsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = ghcmessages.MTOServiceItems{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListMTOServiceItemsBadRequestCode is the HTTP code returned for type ListMTOServiceItemsBadRequest
const ListMTOServiceItemsBadRequestCode int = 400

/*ListMTOServiceItemsBadRequest The request payload is invalid

swagger:response listMTOServiceItemsBadRequest
*/
type ListMTOServiceItemsBadRequest struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListMTOServiceItemsBadRequest creates ListMTOServiceItemsBadRequest with default headers values
func NewListMTOServiceItemsBadRequest() *ListMTOServiceItemsBadRequest {

	return &ListMTOServiceItemsBadRequest{}
}

// WithPayload adds the payload to the list m t o service items bad request response
func (o *ListMTOServiceItemsBadRequest) WithPayload(payload interface{}) *ListMTOServiceItemsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list m t o service items bad request response
func (o *ListMTOServiceItemsBadRequest) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListMTOServiceItemsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListMTOServiceItemsUnauthorizedCode is the HTTP code returned for type ListMTOServiceItemsUnauthorized
const ListMTOServiceItemsUnauthorizedCode int = 401

/*ListMTOServiceItemsUnauthorized The request was denied

swagger:response listMTOServiceItemsUnauthorized
*/
type ListMTOServiceItemsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListMTOServiceItemsUnauthorized creates ListMTOServiceItemsUnauthorized with default headers values
func NewListMTOServiceItemsUnauthorized() *ListMTOServiceItemsUnauthorized {

	return &ListMTOServiceItemsUnauthorized{}
}

// WithPayload adds the payload to the list m t o service items unauthorized response
func (o *ListMTOServiceItemsUnauthorized) WithPayload(payload interface{}) *ListMTOServiceItemsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list m t o service items unauthorized response
func (o *ListMTOServiceItemsUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListMTOServiceItemsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListMTOServiceItemsForbiddenCode is the HTTP code returned for type ListMTOServiceItemsForbidden
const ListMTOServiceItemsForbiddenCode int = 403

/*ListMTOServiceItemsForbidden The request was denied

swagger:response listMTOServiceItemsForbidden
*/
type ListMTOServiceItemsForbidden struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListMTOServiceItemsForbidden creates ListMTOServiceItemsForbidden with default headers values
func NewListMTOServiceItemsForbidden() *ListMTOServiceItemsForbidden {

	return &ListMTOServiceItemsForbidden{}
}

// WithPayload adds the payload to the list m t o service items forbidden response
func (o *ListMTOServiceItemsForbidden) WithPayload(payload interface{}) *ListMTOServiceItemsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list m t o service items forbidden response
func (o *ListMTOServiceItemsForbidden) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListMTOServiceItemsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListMTOServiceItemsNotFoundCode is the HTTP code returned for type ListMTOServiceItemsNotFound
const ListMTOServiceItemsNotFoundCode int = 404

/*ListMTOServiceItemsNotFound The requested resource wasn't found

swagger:response listMTOServiceItemsNotFound
*/
type ListMTOServiceItemsNotFound struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListMTOServiceItemsNotFound creates ListMTOServiceItemsNotFound with default headers values
func NewListMTOServiceItemsNotFound() *ListMTOServiceItemsNotFound {

	return &ListMTOServiceItemsNotFound{}
}

// WithPayload adds the payload to the list m t o service items not found response
func (o *ListMTOServiceItemsNotFound) WithPayload(payload interface{}) *ListMTOServiceItemsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list m t o service items not found response
func (o *ListMTOServiceItemsNotFound) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListMTOServiceItemsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListMTOServiceItemsInternalServerErrorCode is the HTTP code returned for type ListMTOServiceItemsInternalServerError
const ListMTOServiceItemsInternalServerErrorCode int = 500

/*ListMTOServiceItemsInternalServerError A server error occurred

swagger:response listMTOServiceItemsInternalServerError
*/
type ListMTOServiceItemsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListMTOServiceItemsInternalServerError creates ListMTOServiceItemsInternalServerError with default headers values
func NewListMTOServiceItemsInternalServerError() *ListMTOServiceItemsInternalServerError {

	return &ListMTOServiceItemsInternalServerError{}
}

// WithPayload adds the payload to the list m t o service items internal server error response
func (o *ListMTOServiceItemsInternalServerError) WithPayload(payload interface{}) *ListMTOServiceItemsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list m t o service items internal server error response
func (o *ListMTOServiceItemsInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListMTOServiceItemsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
