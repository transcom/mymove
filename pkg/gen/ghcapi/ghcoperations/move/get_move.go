// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMoveHandlerFunc turns a function with the right signature into a get move handler
type GetMoveHandlerFunc func(GetMoveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMoveHandlerFunc) Handle(params GetMoveParams) middleware.Responder {
	return fn(params)
}

// GetMoveHandler interface for that can handle valid get move params
type GetMoveHandler interface {
	Handle(GetMoveParams) middleware.Responder
}

// NewGetMove creates a new http.Handler for the get move operation
func NewGetMove(ctx *middleware.Context, handler GetMoveHandler) *GetMove {
	return &GetMove{Context: ctx, Handler: handler}
}

/*
	GetMove swagger:route GET /move/{locator} move getMove

# Returns a given move

Returns a given move for a unique alphanumeric locator string
*/
type GetMove struct {
	Context *middleware.Context
	Handler GetMoveHandler
}

func (o *GetMove) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMoveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
