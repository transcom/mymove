// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// MoveCancelationOKCode is the HTTP code returned for type MoveCancelationOK
const MoveCancelationOKCode int = 200

/*
MoveCancelationOK Successfully cancelled move

swagger:response moveCancelationOK
*/
type MoveCancelationOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Move `json:"body,omitempty"`
}

// NewMoveCancelationOK creates MoveCancelationOK with default headers values
func NewMoveCancelationOK() *MoveCancelationOK {

	return &MoveCancelationOK{}
}

// WithPayload adds the payload to the move cancelation o k response
func (o *MoveCancelationOK) WithPayload(payload *ghcmessages.Move) *MoveCancelationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move cancelation o k response
func (o *MoveCancelationOK) SetPayload(payload *ghcmessages.Move) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveCancelationForbiddenCode is the HTTP code returned for type MoveCancelationForbidden
const MoveCancelationForbiddenCode int = 403

/*
MoveCancelationForbidden The request was denied

swagger:response moveCancelationForbidden
*/
type MoveCancelationForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewMoveCancelationForbidden creates MoveCancelationForbidden with default headers values
func NewMoveCancelationForbidden() *MoveCancelationForbidden {

	return &MoveCancelationForbidden{}
}

// WithPayload adds the payload to the move cancelation forbidden response
func (o *MoveCancelationForbidden) WithPayload(payload *ghcmessages.Error) *MoveCancelationForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move cancelation forbidden response
func (o *MoveCancelationForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelationForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveCancelationNotFoundCode is the HTTP code returned for type MoveCancelationNotFound
const MoveCancelationNotFoundCode int = 404

/*
MoveCancelationNotFound The requested resource wasn't found

swagger:response moveCancelationNotFound
*/
type MoveCancelationNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewMoveCancelationNotFound creates MoveCancelationNotFound with default headers values
func NewMoveCancelationNotFound() *MoveCancelationNotFound {

	return &MoveCancelationNotFound{}
}

// WithPayload adds the payload to the move cancelation not found response
func (o *MoveCancelationNotFound) WithPayload(payload *ghcmessages.Error) *MoveCancelationNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move cancelation not found response
func (o *MoveCancelationNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelationNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveCancelationConflictCode is the HTTP code returned for type MoveCancelationConflict
const MoveCancelationConflictCode int = 409

/*
MoveCancelationConflict Conflict error

swagger:response moveCancelationConflict
*/
type MoveCancelationConflict struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewMoveCancelationConflict creates MoveCancelationConflict with default headers values
func NewMoveCancelationConflict() *MoveCancelationConflict {

	return &MoveCancelationConflict{}
}

// WithPayload adds the payload to the move cancelation conflict response
func (o *MoveCancelationConflict) WithPayload(payload *ghcmessages.Error) *MoveCancelationConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move cancelation conflict response
func (o *MoveCancelationConflict) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelationConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveCancelationPreconditionFailedCode is the HTTP code returned for type MoveCancelationPreconditionFailed
const MoveCancelationPreconditionFailedCode int = 412

/*
MoveCancelationPreconditionFailed Precondition failed

swagger:response moveCancelationPreconditionFailed
*/
type MoveCancelationPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewMoveCancelationPreconditionFailed creates MoveCancelationPreconditionFailed with default headers values
func NewMoveCancelationPreconditionFailed() *MoveCancelationPreconditionFailed {

	return &MoveCancelationPreconditionFailed{}
}

// WithPayload adds the payload to the move cancelation precondition failed response
func (o *MoveCancelationPreconditionFailed) WithPayload(payload *ghcmessages.Error) *MoveCancelationPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move cancelation precondition failed response
func (o *MoveCancelationPreconditionFailed) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelationPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveCancelationUnprocessableEntityCode is the HTTP code returned for type MoveCancelationUnprocessableEntity
const MoveCancelationUnprocessableEntityCode int = 422

/*
MoveCancelationUnprocessableEntity The payload was unprocessable.

swagger:response moveCancelationUnprocessableEntity
*/
type MoveCancelationUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewMoveCancelationUnprocessableEntity creates MoveCancelationUnprocessableEntity with default headers values
func NewMoveCancelationUnprocessableEntity() *MoveCancelationUnprocessableEntity {

	return &MoveCancelationUnprocessableEntity{}
}

// WithPayload adds the payload to the move cancelation unprocessable entity response
func (o *MoveCancelationUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *MoveCancelationUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move cancelation unprocessable entity response
func (o *MoveCancelationUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelationUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveCancelationInternalServerErrorCode is the HTTP code returned for type MoveCancelationInternalServerError
const MoveCancelationInternalServerErrorCode int = 500

/*
MoveCancelationInternalServerError A server error occurred

swagger:response moveCancelationInternalServerError
*/
type MoveCancelationInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewMoveCancelationInternalServerError creates MoveCancelationInternalServerError with default headers values
func NewMoveCancelationInternalServerError() *MoveCancelationInternalServerError {

	return &MoveCancelationInternalServerError{}
}

// WithPayload adds the payload to the move cancelation internal server error response
func (o *MoveCancelationInternalServerError) WithPayload(payload *ghcmessages.Error) *MoveCancelationInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move cancelation internal server error response
func (o *MoveCancelationInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelationInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
