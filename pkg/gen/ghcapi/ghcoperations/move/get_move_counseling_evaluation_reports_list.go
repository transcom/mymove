// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMoveCounselingEvaluationReportsListHandlerFunc turns a function with the right signature into a get move counseling evaluation reports list handler
type GetMoveCounselingEvaluationReportsListHandlerFunc func(GetMoveCounselingEvaluationReportsListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMoveCounselingEvaluationReportsListHandlerFunc) Handle(params GetMoveCounselingEvaluationReportsListParams) middleware.Responder {
	return fn(params)
}

// GetMoveCounselingEvaluationReportsListHandler interface for that can handle valid get move counseling evaluation reports list params
type GetMoveCounselingEvaluationReportsListHandler interface {
	Handle(GetMoveCounselingEvaluationReportsListParams) middleware.Responder
}

// NewGetMoveCounselingEvaluationReportsList creates a new http.Handler for the get move counseling evaluation reports list operation
func NewGetMoveCounselingEvaluationReportsList(ctx *middleware.Context, handler GetMoveCounselingEvaluationReportsListHandler) *GetMoveCounselingEvaluationReportsList {
	return &GetMoveCounselingEvaluationReportsList{Context: ctx, Handler: handler}
}

/*
	GetMoveCounselingEvaluationReportsList swagger:route GET /moves/{moveID}/counseling-evaluation-reports-list move getMoveCounselingEvaluationReportsList

# Returns counseling evaluation reports for the specified move that are visible to the current office user

Returns counseling evaluation reports for the specified move that are visible to the current office user
*/
type GetMoveCounselingEvaluationReportsList struct {
	Context *middleware.Context
	Handler GetMoveCounselingEvaluationReportsListHandler
}

func (o *GetMoveCounselingEvaluationReportsList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMoveCounselingEvaluationReportsListParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
