// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMoveHistoryHandlerFunc turns a function with the right signature into a get move history handler
type GetMoveHistoryHandlerFunc func(GetMoveHistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMoveHistoryHandlerFunc) Handle(params GetMoveHistoryParams) middleware.Responder {
	return fn(params)
}

// GetMoveHistoryHandler interface for that can handle valid get move history params
type GetMoveHistoryHandler interface {
	Handle(GetMoveHistoryParams) middleware.Responder
}

// NewGetMoveHistory creates a new http.Handler for the get move history operation
func NewGetMoveHistory(ctx *middleware.Context, handler GetMoveHistoryHandler) *GetMoveHistory {
	return &GetMoveHistory{Context: ctx, Handler: handler}
}

/*
	GetMoveHistory swagger:route GET /move/{locator}/history move getMoveHistory

# Returns the history of an identified move

Returns the history for a given move for a unique alphanumeric locator string
*/
type GetMoveHistory struct {
	Context *middleware.Context
	Handler GetMoveHistoryHandler
}

func (o *GetMoveHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMoveHistoryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
