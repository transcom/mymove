// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateAssignedOfficeUserHandlerFunc turns a function with the right signature into a update assigned office user handler
type UpdateAssignedOfficeUserHandlerFunc func(UpdateAssignedOfficeUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateAssignedOfficeUserHandlerFunc) Handle(params UpdateAssignedOfficeUserParams) middleware.Responder {
	return fn(params)
}

// UpdateAssignedOfficeUserHandler interface for that can handle valid update assigned office user params
type UpdateAssignedOfficeUserHandler interface {
	Handle(UpdateAssignedOfficeUserParams) middleware.Responder
}

// NewUpdateAssignedOfficeUser creates a new http.Handler for the update assigned office user operation
func NewUpdateAssignedOfficeUser(ctx *middleware.Context, handler UpdateAssignedOfficeUserHandler) *UpdateAssignedOfficeUser {
	return &UpdateAssignedOfficeUser{Context: ctx, Handler: handler}
}

/*
	UpdateAssignedOfficeUser swagger:route PATCH /moves/{moveID}/assignOfficeUser move updateAssignedOfficeUser

updates a move by assigning either a services counselor, task ordering officer, or task invoicing officer
*/
type UpdateAssignedOfficeUser struct {
	Context *middleware.Context
	Handler UpdateAssignedOfficeUserHandler
}

func (o *UpdateAssignedOfficeUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateAssignedOfficeUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
