// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateCloseoutOfficeHandlerFunc turns a function with the right signature into a update closeout office handler
type UpdateCloseoutOfficeHandlerFunc func(UpdateCloseoutOfficeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateCloseoutOfficeHandlerFunc) Handle(params UpdateCloseoutOfficeParams) middleware.Responder {
	return fn(params)
}

// UpdateCloseoutOfficeHandler interface for that can handle valid update closeout office params
type UpdateCloseoutOfficeHandler interface {
	Handle(UpdateCloseoutOfficeParams) middleware.Responder
}

// NewUpdateCloseoutOffice creates a new http.Handler for the update closeout office operation
func NewUpdateCloseoutOffice(ctx *middleware.Context, handler UpdateCloseoutOfficeHandler) *UpdateCloseoutOffice {
	return &UpdateCloseoutOffice{Context: ctx, Handler: handler}
}

/*
	UpdateCloseoutOffice swagger:route PATCH /moves/{locator}/closeout-office move updateCloseoutOffice

# Updates a Move's PPM closeout office for Army and Air Force customers

Sets the transportation office closeout location for where the Move's PPM Shipment documentation will be reviewed by
*/
type UpdateCloseoutOffice struct {
	Context *middleware.Context
	Handler UpdateCloseoutOfficeHandler
}

func (o *UpdateCloseoutOffice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateCloseoutOfficeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateCloseoutOfficeBody update closeout office body
//
// swagger:model UpdateCloseoutOfficeBody
type UpdateCloseoutOfficeBody struct {

	// closeout office Id
	// Required: true
	// Format: uuid
	CloseoutOfficeID *strfmt.UUID `json:"closeoutOfficeId"`
}

// Validate validates this update closeout office body
func (o *UpdateCloseoutOfficeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCloseoutOfficeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCloseoutOfficeBody) validateCloseoutOfficeID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"closeoutOfficeId", "body", o.CloseoutOfficeID); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"closeoutOfficeId", "body", "uuid", o.CloseoutOfficeID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update closeout office body based on context it is used
func (o *UpdateCloseoutOfficeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCloseoutOfficeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCloseoutOfficeBody) UnmarshalBinary(b []byte) error {
	var res UpdateCloseoutOfficeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
