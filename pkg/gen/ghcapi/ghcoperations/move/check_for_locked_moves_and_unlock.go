// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CheckForLockedMovesAndUnlockHandlerFunc turns a function with the right signature into a check for locked moves and unlock handler
type CheckForLockedMovesAndUnlockHandlerFunc func(CheckForLockedMovesAndUnlockParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckForLockedMovesAndUnlockHandlerFunc) Handle(params CheckForLockedMovesAndUnlockParams) middleware.Responder {
	return fn(params)
}

// CheckForLockedMovesAndUnlockHandler interface for that can handle valid check for locked moves and unlock params
type CheckForLockedMovesAndUnlockHandler interface {
	Handle(CheckForLockedMovesAndUnlockParams) middleware.Responder
}

// NewCheckForLockedMovesAndUnlock creates a new http.Handler for the check for locked moves and unlock operation
func NewCheckForLockedMovesAndUnlock(ctx *middleware.Context, handler CheckForLockedMovesAndUnlockHandler) *CheckForLockedMovesAndUnlock {
	return &CheckForLockedMovesAndUnlock{Context: ctx, Handler: handler}
}

/*
	CheckForLockedMovesAndUnlock swagger:route PATCH /moves/{officeUserID}/CheckForLockedMovesAndUnlock move checkForLockedMovesAndUnlock

Finds and unlocks any locked moves by QAE,GSR, and headquarter officers
*/
type CheckForLockedMovesAndUnlock struct {
	Context *middleware.Context
	Handler CheckForLockedMovesAndUnlockHandler
}

func (o *CheckForLockedMovesAndUnlock) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCheckForLockedMovesAndUnlockParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
