// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SetFinancialReviewFlagHandlerFunc turns a function with the right signature into a set financial review flag handler
type SetFinancialReviewFlagHandlerFunc func(SetFinancialReviewFlagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SetFinancialReviewFlagHandlerFunc) Handle(params SetFinancialReviewFlagParams) middleware.Responder {
	return fn(params)
}

// SetFinancialReviewFlagHandler interface for that can handle valid set financial review flag params
type SetFinancialReviewFlagHandler interface {
	Handle(SetFinancialReviewFlagParams) middleware.Responder
}

// NewSetFinancialReviewFlag creates a new http.Handler for the set financial review flag operation
func NewSetFinancialReviewFlag(ctx *middleware.Context, handler SetFinancialReviewFlagHandler) *SetFinancialReviewFlag {
	return &SetFinancialReviewFlag{Context: ctx, Handler: handler}
}

/*
	SetFinancialReviewFlag swagger:route POST /moves/{moveID}/financial-review-flag move setFinancialReviewFlag

# Flags a move for financial office review

This sets a flag which indicates that the move should be reviewed by a fincancial office. For example, if the origin or destination address of a shipment is far from the duty location and may incur excess costs to the customer.
*/
type SetFinancialReviewFlag struct {
	Context *middleware.Context
	Handler SetFinancialReviewFlagHandler
}

func (o *SetFinancialReviewFlag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSetFinancialReviewFlagParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SetFinancialReviewFlagBody set financial review flag body
//
// swagger:model SetFinancialReviewFlagBody
type SetFinancialReviewFlagBody struct {

	// boolean value representing whether we should flag a move for financial review
	// Example: false
	// Required: true
	FlagForReview *bool `json:"flagForReview"`

	// explanation of why the move is being flagged for financial review
	// Example: this address is way too far away
	Remarks *string `json:"remarks,omitempty"`
}

// Validate validates this set financial review flag body
func (o *SetFinancialReviewFlagBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFlagForReview(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetFinancialReviewFlagBody) validateFlagForReview(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"flagForReview", "body", o.FlagForReview); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this set financial review flag body based on context it is used
func (o *SetFinancialReviewFlagBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetFinancialReviewFlagBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetFinancialReviewFlagBody) UnmarshalBinary(b []byte) error {
	var res SetFinancialReviewFlagBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
