// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// MoveCancelerOKCode is the HTTP code returned for type MoveCancelerOK
const MoveCancelerOKCode int = 200

/*
MoveCancelerOK Successfully cancelled move

swagger:response moveCancelerOK
*/
type MoveCancelerOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Move `json:"body,omitempty"`
}

// NewMoveCancelerOK creates MoveCancelerOK with default headers values
func NewMoveCancelerOK() *MoveCancelerOK {

	return &MoveCancelerOK{}
}

// WithPayload adds the payload to the move canceler o k response
func (o *MoveCancelerOK) WithPayload(payload *ghcmessages.Move) *MoveCancelerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move canceler o k response
func (o *MoveCancelerOK) SetPayload(payload *ghcmessages.Move) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveCancelerForbiddenCode is the HTTP code returned for type MoveCancelerForbidden
const MoveCancelerForbiddenCode int = 403

/*
MoveCancelerForbidden The request was denied

swagger:response moveCancelerForbidden
*/
type MoveCancelerForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewMoveCancelerForbidden creates MoveCancelerForbidden with default headers values
func NewMoveCancelerForbidden() *MoveCancelerForbidden {

	return &MoveCancelerForbidden{}
}

// WithPayload adds the payload to the move canceler forbidden response
func (o *MoveCancelerForbidden) WithPayload(payload *ghcmessages.Error) *MoveCancelerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move canceler forbidden response
func (o *MoveCancelerForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveCancelerNotFoundCode is the HTTP code returned for type MoveCancelerNotFound
const MoveCancelerNotFoundCode int = 404

/*
MoveCancelerNotFound The requested resource wasn't found

swagger:response moveCancelerNotFound
*/
type MoveCancelerNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewMoveCancelerNotFound creates MoveCancelerNotFound with default headers values
func NewMoveCancelerNotFound() *MoveCancelerNotFound {

	return &MoveCancelerNotFound{}
}

// WithPayload adds the payload to the move canceler not found response
func (o *MoveCancelerNotFound) WithPayload(payload *ghcmessages.Error) *MoveCancelerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move canceler not found response
func (o *MoveCancelerNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveCancelerConflictCode is the HTTP code returned for type MoveCancelerConflict
const MoveCancelerConflictCode int = 409

/*
MoveCancelerConflict Conflict error

swagger:response moveCancelerConflict
*/
type MoveCancelerConflict struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewMoveCancelerConflict creates MoveCancelerConflict with default headers values
func NewMoveCancelerConflict() *MoveCancelerConflict {

	return &MoveCancelerConflict{}
}

// WithPayload adds the payload to the move canceler conflict response
func (o *MoveCancelerConflict) WithPayload(payload *ghcmessages.Error) *MoveCancelerConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move canceler conflict response
func (o *MoveCancelerConflict) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelerConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveCancelerPreconditionFailedCode is the HTTP code returned for type MoveCancelerPreconditionFailed
const MoveCancelerPreconditionFailedCode int = 412

/*
MoveCancelerPreconditionFailed Precondition failed

swagger:response moveCancelerPreconditionFailed
*/
type MoveCancelerPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewMoveCancelerPreconditionFailed creates MoveCancelerPreconditionFailed with default headers values
func NewMoveCancelerPreconditionFailed() *MoveCancelerPreconditionFailed {

	return &MoveCancelerPreconditionFailed{}
}

// WithPayload adds the payload to the move canceler precondition failed response
func (o *MoveCancelerPreconditionFailed) WithPayload(payload *ghcmessages.Error) *MoveCancelerPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move canceler precondition failed response
func (o *MoveCancelerPreconditionFailed) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelerPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveCancelerUnprocessableEntityCode is the HTTP code returned for type MoveCancelerUnprocessableEntity
const MoveCancelerUnprocessableEntityCode int = 422

/*
MoveCancelerUnprocessableEntity The payload was unprocessable.

swagger:response moveCancelerUnprocessableEntity
*/
type MoveCancelerUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewMoveCancelerUnprocessableEntity creates MoveCancelerUnprocessableEntity with default headers values
func NewMoveCancelerUnprocessableEntity() *MoveCancelerUnprocessableEntity {

	return &MoveCancelerUnprocessableEntity{}
}

// WithPayload adds the payload to the move canceler unprocessable entity response
func (o *MoveCancelerUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *MoveCancelerUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move canceler unprocessable entity response
func (o *MoveCancelerUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelerUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveCancelerInternalServerErrorCode is the HTTP code returned for type MoveCancelerInternalServerError
const MoveCancelerInternalServerErrorCode int = 500

/*
MoveCancelerInternalServerError A server error occurred

swagger:response moveCancelerInternalServerError
*/
type MoveCancelerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewMoveCancelerInternalServerError creates MoveCancelerInternalServerError with default headers values
func NewMoveCancelerInternalServerError() *MoveCancelerInternalServerError {

	return &MoveCancelerInternalServerError{}
}

// WithPayload adds the payload to the move canceler internal server error response
func (o *MoveCancelerInternalServerError) WithPayload(payload *ghcmessages.Error) *MoveCancelerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move canceler internal server error response
func (o *MoveCancelerInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveCancelerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
