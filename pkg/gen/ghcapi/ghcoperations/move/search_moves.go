// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchMovesHandlerFunc turns a function with the right signature into a search moves handler
type SearchMovesHandlerFunc func(SearchMovesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchMovesHandlerFunc) Handle(params SearchMovesParams) middleware.Responder {
	return fn(params)
}

// SearchMovesHandler interface for that can handle valid search moves params
type SearchMovesHandler interface {
	Handle(SearchMovesParams) middleware.Responder
}

// NewSearchMoves creates a new http.Handler for the search moves operation
func NewSearchMoves(ctx *middleware.Context, handler SearchMovesHandler) *SearchMoves {
	return &SearchMoves{Context: ctx, Handler: handler}
}

/*
	SearchMoves swagger:route POST /moves/search move searchMoves

# Search moves by locator, DOD ID, or customer name

Search moves by locator, DOD ID, or customer name. Used by QAE and CSR users.
*/
type SearchMoves struct {
	Context *middleware.Context
	Handler SearchMovesHandler
}

func (o *SearchMoves) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSearchMovesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SearchMovesBody search moves body
//
// swagger:model SearchMovesBody
type SearchMovesBody struct {

	// branch
	Branch *string `json:"branch,omitempty"`

	// Customer Name
	// Min Length: 1
	CustomerName *string `json:"customerName,omitempty"`

	// delivery date
	// Format: date-time
	DeliveryDate *strfmt.DateTime `json:"deliveryDate,omitempty"`

	// destination postal code
	DestinationPostalCode *string `json:"destinationPostalCode,omitempty"`

	// DOD ID
	// Max Length: 10
	// Min Length: 10
	DodID *string `json:"dodID,omitempty"`

	// EMPLID
	// Max Length: 7
	// Min Length: 7
	Emplid *string `json:"emplid,omitempty"`

	// Move locator
	// Max Length: 6
	// Min Length: 6
	Locator *string `json:"locator,omitempty"`

	// order
	// Enum: [asc desc]
	Order *string `json:"order,omitempty"`

	// origin postal code
	OriginPostalCode *string `json:"originPostalCode,omitempty"`

	// requested page of results
	Page int64 `json:"page,omitempty"`

	// payment request code
	// Example: 9551-6199-2
	PaymentRequestCode *string `json:"paymentRequestCode,omitempty"`

	// per page
	PerPage int64 `json:"perPage,omitempty"`

	// pickup date
	// Format: date-time
	PickupDate *strfmt.DateTime `json:"pickupDate,omitempty"`

	// shipments count
	ShipmentsCount *int64 `json:"shipmentsCount,omitempty"`

	// sort
	// Enum: [customerName dodID emplid branch locator status originPostalCode destinationPostalCode shipmentsCount]
	Sort *string `json:"sort,omitempty"`

	// Filtering for the status.
	// Unique: true
	Status []string `json:"status"`
}

// Validate validates this search moves body
func (o *SearchMovesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomerName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDodID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmplid(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchMovesBody) validateCustomerName(formats strfmt.Registry) error {
	if swag.IsZero(o.CustomerName) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"customerName", "body", *o.CustomerName, 1); err != nil {
		return err
	}

	return nil
}

func (o *SearchMovesBody) validateDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(o.DeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"deliveryDate", "body", "date-time", o.DeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *SearchMovesBody) validateDodID(formats strfmt.Registry) error {
	if swag.IsZero(o.DodID) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"dodID", "body", *o.DodID, 10); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"dodID", "body", *o.DodID, 10); err != nil {
		return err
	}

	return nil
}

func (o *SearchMovesBody) validateEmplid(formats strfmt.Registry) error {
	if swag.IsZero(o.Emplid) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"emplid", "body", *o.Emplid, 7); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"emplid", "body", *o.Emplid, 7); err != nil {
		return err
	}

	return nil
}

func (o *SearchMovesBody) validateLocator(formats strfmt.Registry) error {
	if swag.IsZero(o.Locator) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"locator", "body", *o.Locator, 6); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"locator", "body", *o.Locator, 6); err != nil {
		return err
	}

	return nil
}

var searchMovesBodyTypeOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["asc","desc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchMovesBodyTypeOrderPropEnum = append(searchMovesBodyTypeOrderPropEnum, v)
	}
}

const (

	// SearchMovesBodyOrderAsc captures enum value "asc"
	SearchMovesBodyOrderAsc string = "asc"

	// SearchMovesBodyOrderDesc captures enum value "desc"
	SearchMovesBodyOrderDesc string = "desc"
)

// prop value enum
func (o *SearchMovesBody) validateOrderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchMovesBodyTypeOrderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *SearchMovesBody) validateOrder(formats strfmt.Registry) error {
	if swag.IsZero(o.Order) { // not required
		return nil
	}

	// value enum
	if err := o.validateOrderEnum("body"+"."+"order", "body", *o.Order); err != nil {
		return err
	}

	return nil
}

func (o *SearchMovesBody) validatePickupDate(formats strfmt.Registry) error {
	if swag.IsZero(o.PickupDate) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"pickupDate", "body", "date-time", o.PickupDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var searchMovesBodyTypeSortPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["customerName","dodID","emplid","branch","locator","status","originPostalCode","destinationPostalCode","shipmentsCount"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchMovesBodyTypeSortPropEnum = append(searchMovesBodyTypeSortPropEnum, v)
	}
}

const (

	// SearchMovesBodySortCustomerName captures enum value "customerName"
	SearchMovesBodySortCustomerName string = "customerName"

	// SearchMovesBodySortDodID captures enum value "dodID"
	SearchMovesBodySortDodID string = "dodID"

	// SearchMovesBodySortEmplid captures enum value "emplid"
	SearchMovesBodySortEmplid string = "emplid"

	// SearchMovesBodySortBranch captures enum value "branch"
	SearchMovesBodySortBranch string = "branch"

	// SearchMovesBodySortLocator captures enum value "locator"
	SearchMovesBodySortLocator string = "locator"

	// SearchMovesBodySortStatus captures enum value "status"
	SearchMovesBodySortStatus string = "status"

	// SearchMovesBodySortOriginPostalCode captures enum value "originPostalCode"
	SearchMovesBodySortOriginPostalCode string = "originPostalCode"

	// SearchMovesBodySortDestinationPostalCode captures enum value "destinationPostalCode"
	SearchMovesBodySortDestinationPostalCode string = "destinationPostalCode"

	// SearchMovesBodySortShipmentsCount captures enum value "shipmentsCount"
	SearchMovesBodySortShipmentsCount string = "shipmentsCount"
)

// prop value enum
func (o *SearchMovesBody) validateSortEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchMovesBodyTypeSortPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *SearchMovesBody) validateSort(formats strfmt.Registry) error {
	if swag.IsZero(o.Sort) { // not required
		return nil
	}

	// value enum
	if err := o.validateSortEnum("body"+"."+"sort", "body", *o.Sort); err != nil {
		return err
	}

	return nil
}

var searchMovesBodyStatusItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DRAFT","SUBMITTED","APPROVALS REQUESTED","APPROVED","NEEDS SERVICE COUNSELING","SERVICE COUNSELING COMPLETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchMovesBodyStatusItemsEnum = append(searchMovesBodyStatusItemsEnum, v)
	}
}

func (o *SearchMovesBody) validateStatusItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchMovesBodyStatusItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *SearchMovesBody) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	if err := validate.UniqueItems("body"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	for i := 0; i < len(o.Status); i++ {

		// value enum
		if err := o.validateStatusItemsEnum("body"+"."+"status"+"."+strconv.Itoa(i), "body", o.Status[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this search moves body based on context it is used
func (o *SearchMovesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchMovesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchMovesBody) UnmarshalBinary(b []byte) error {
	var res SearchMovesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
