// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// MoveCancelationHandlerFunc turns a function with the right signature into a move cancelation handler
type MoveCancelationHandlerFunc func(MoveCancelationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MoveCancelationHandlerFunc) Handle(params MoveCancelationParams) middleware.Responder {
	return fn(params)
}

// MoveCancelationHandler interface for that can handle valid move cancelation params
type MoveCancelationHandler interface {
	Handle(MoveCancelationParams) middleware.Responder
}

// NewMoveCancelation creates a new http.Handler for the move cancelation operation
func NewMoveCancelation(ctx *middleware.Context, handler MoveCancelationHandler) *MoveCancelation {
	return &MoveCancelation{Context: ctx, Handler: handler}
}

/*
	MoveCancelation swagger:route POST /moves/{moveID}/cancel move moveCancelation

# Cancels a move

cancels a move
*/
type MoveCancelation struct {
	Context *middleware.Context
	Handler MoveCancelationHandler
}

func (o *MoveCancelation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMoveCancelationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
