// Code generated by go-swagger; DO NOT EDIT.

package move

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// MoveCancelerHandlerFunc turns a function with the right signature into a move canceler handler
type MoveCancelerHandlerFunc func(MoveCancelerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MoveCancelerHandlerFunc) Handle(params MoveCancelerParams) middleware.Responder {
	return fn(params)
}

// MoveCancelerHandler interface for that can handle valid move canceler params
type MoveCancelerHandler interface {
	Handle(MoveCancelerParams) middleware.Responder
}

// NewMoveCanceler creates a new http.Handler for the move canceler operation
func NewMoveCanceler(ctx *middleware.Context, handler MoveCancelerHandler) *MoveCanceler {
	return &MoveCanceler{Context: ctx, Handler: handler}
}

/*
	MoveCanceler swagger:route POST /moves/{moveID}/cancel move moveCanceler

# Cancels a move

cancels a move
*/
type MoveCanceler struct {
	Context *middleware.Context
	Handler MoveCancelerHandler
}

func (o *MoveCanceler) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMoveCancelerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
