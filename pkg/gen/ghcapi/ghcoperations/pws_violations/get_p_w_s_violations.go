// Code generated by go-swagger; DO NOT EDIT.

package pws_violations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPWSViolationsHandlerFunc turns a function with the right signature into a get p w s violations handler
type GetPWSViolationsHandlerFunc func(GetPWSViolationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPWSViolationsHandlerFunc) Handle(params GetPWSViolationsParams) middleware.Responder {
	return fn(params)
}

// GetPWSViolationsHandler interface for that can handle valid get p w s violations params
type GetPWSViolationsHandler interface {
	Handle(GetPWSViolationsParams) middleware.Responder
}

// NewGetPWSViolations creates a new http.Handler for the get p w s violations operation
func NewGetPWSViolations(ctx *middleware.Context, handler GetPWSViolationsHandler) *GetPWSViolations {
	return &GetPWSViolations{Context: ctx, Handler: handler}
}

/*
	GetPWSViolations swagger:route GET /pws-violations pwsViolations getPWSViolations

# Fetch the possible PWS violations for an evaluation report

Fetch the possible PWS violations for an evaluation report
*/
type GetPWSViolations struct {
	Context *middleware.Context
	Handler GetPWSViolationsHandler
}

func (o *GetPWSViolations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPWSViolationsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
