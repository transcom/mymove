// Code generated by go-swagger; DO NOT EDIT.

package addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetOconusLocationHandlerFunc turns a function with the right signature into a get oconus location handler
type GetOconusLocationHandlerFunc func(GetOconusLocationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOconusLocationHandlerFunc) Handle(params GetOconusLocationParams) middleware.Responder {
	return fn(params)
}

// GetOconusLocationHandler interface for that can handle valid get oconus location params
type GetOconusLocationHandler interface {
	Handle(GetOconusLocationParams) middleware.Responder
}

// NewGetOconusLocation creates a new http.Handler for the get oconus location operation
func NewGetOconusLocation(ctx *middleware.Context, handler GetOconusLocationHandler) *GetOconusLocation {
	return &GetOconusLocation{Context: ctx, Handler: handler}
}

/*
	GetOconusLocation swagger:route GET /addresses/oconus-lookup/{country}/{search} addresses getOconusLocation

Returns Oconus cities and principal divisions associated with the specified full/partial city and principal division search string for the specified country.

Find by API using full/partial city name, principal division that returns an VIntlLocations object containing city name and principal division for a specific country.
*/
type GetOconusLocation struct {
	Context *middleware.Context
	Handler GetOconusLocationHandler
}

func (o *GetOconusLocation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetOconusLocationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
