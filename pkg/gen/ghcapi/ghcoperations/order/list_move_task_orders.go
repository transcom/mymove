// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListMoveTaskOrdersHandlerFunc turns a function with the right signature into a list move task orders handler
type ListMoveTaskOrdersHandlerFunc func(ListMoveTaskOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListMoveTaskOrdersHandlerFunc) Handle(params ListMoveTaskOrdersParams) middleware.Responder {
	return fn(params)
}

// ListMoveTaskOrdersHandler interface for that can handle valid list move task orders params
type ListMoveTaskOrdersHandler interface {
	Handle(ListMoveTaskOrdersParams) middleware.Responder
}

// NewListMoveTaskOrders creates a new http.Handler for the list move task orders operation
func NewListMoveTaskOrders(ctx *middleware.Context, handler ListMoveTaskOrdersHandler) *ListMoveTaskOrders {
	return &ListMoveTaskOrders{Context: ctx, Handler: handler}
}

/*ListMoveTaskOrders swagger:route GET /orders/{orderID}/move-task-orders order listMoveTaskOrders

Gets move task orders associated with an order

Gets move task orders associated with an order

*/
type ListMoveTaskOrders struct {
	Context *middleware.Context
	Handler ListMoveTaskOrdersHandler
}

func (o *ListMoveTaskOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListMoveTaskOrdersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
