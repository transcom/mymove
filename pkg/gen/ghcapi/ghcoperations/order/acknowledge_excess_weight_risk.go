// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AcknowledgeExcessWeightRiskHandlerFunc turns a function with the right signature into a acknowledge excess weight risk handler
type AcknowledgeExcessWeightRiskHandlerFunc func(AcknowledgeExcessWeightRiskParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AcknowledgeExcessWeightRiskHandlerFunc) Handle(params AcknowledgeExcessWeightRiskParams) middleware.Responder {
	return fn(params)
}

// AcknowledgeExcessWeightRiskHandler interface for that can handle valid acknowledge excess weight risk params
type AcknowledgeExcessWeightRiskHandler interface {
	Handle(AcknowledgeExcessWeightRiskParams) middleware.Responder
}

// NewAcknowledgeExcessWeightRisk creates a new http.Handler for the acknowledge excess weight risk operation
func NewAcknowledgeExcessWeightRisk(ctx *middleware.Context, handler AcknowledgeExcessWeightRiskHandler) *AcknowledgeExcessWeightRisk {
	return &AcknowledgeExcessWeightRisk{Context: ctx, Handler: handler}
}

/*
	AcknowledgeExcessWeightRisk swagger:route POST /orders/{orderID}/acknowledge-excess-weight-risk order acknowledgeExcessWeightRisk

# Saves the date and time a TOO acknowledged the excess weight risk by dismissing the alert

Saves the date and time a TOO acknowledged the excess weight risk by dismissing the alert
*/
type AcknowledgeExcessWeightRisk struct {
	Context *middleware.Context
	Handler AcknowledgeExcessWeightRiskHandler
}

func (o *AcknowledgeExcessWeightRisk) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAcknowledgeExcessWeightRiskParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
