// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateMaxBillableWeightAsTIOHandlerFunc turns a function with the right signature into a update max billable weight as t i o handler
type UpdateMaxBillableWeightAsTIOHandlerFunc func(UpdateMaxBillableWeightAsTIOParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMaxBillableWeightAsTIOHandlerFunc) Handle(params UpdateMaxBillableWeightAsTIOParams) middleware.Responder {
	return fn(params)
}

// UpdateMaxBillableWeightAsTIOHandler interface for that can handle valid update max billable weight as t i o params
type UpdateMaxBillableWeightAsTIOHandler interface {
	Handle(UpdateMaxBillableWeightAsTIOParams) middleware.Responder
}

// NewUpdateMaxBillableWeightAsTIO creates a new http.Handler for the update max billable weight as t i o operation
func NewUpdateMaxBillableWeightAsTIO(ctx *middleware.Context, handler UpdateMaxBillableWeightAsTIOHandler) *UpdateMaxBillableWeightAsTIO {
	return &UpdateMaxBillableWeightAsTIO{Context: ctx, Handler: handler}
}

/*
	UpdateMaxBillableWeightAsTIO swagger:route PATCH /orders/{orderID}/update-max-billable-weight/tio order updateMaxBillableWeightAsTIO

# Updates the max billable weight with TIO remarks

Updates the DBAuthorizedWeight attribute for the Order Entitlements and move TIO remarks
*/
type UpdateMaxBillableWeightAsTIO struct {
	Context *middleware.Context
	Handler UpdateMaxBillableWeightAsTIOHandler
}

func (o *UpdateMaxBillableWeightAsTIO) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateMaxBillableWeightAsTIOParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
