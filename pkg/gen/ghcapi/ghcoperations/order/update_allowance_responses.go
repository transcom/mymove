// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// UpdateAllowanceOKCode is the HTTP code returned for type UpdateAllowanceOK
const UpdateAllowanceOKCode int = 200

/*
UpdateAllowanceOK updated instance of allowance

swagger:response updateAllowanceOK
*/
type UpdateAllowanceOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Order `json:"body,omitempty"`
}

// NewUpdateAllowanceOK creates UpdateAllowanceOK with default headers values
func NewUpdateAllowanceOK() *UpdateAllowanceOK {

	return &UpdateAllowanceOK{}
}

// WithPayload adds the payload to the update allowance o k response
func (o *UpdateAllowanceOK) WithPayload(payload *ghcmessages.Order) *UpdateAllowanceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update allowance o k response
func (o *UpdateAllowanceOK) SetPayload(payload *ghcmessages.Order) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAllowanceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAllowanceForbiddenCode is the HTTP code returned for type UpdateAllowanceForbidden
const UpdateAllowanceForbiddenCode int = 403

/*
UpdateAllowanceForbidden The request was denied

swagger:response updateAllowanceForbidden
*/
type UpdateAllowanceForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewUpdateAllowanceForbidden creates UpdateAllowanceForbidden with default headers values
func NewUpdateAllowanceForbidden() *UpdateAllowanceForbidden {

	return &UpdateAllowanceForbidden{}
}

// WithPayload adds the payload to the update allowance forbidden response
func (o *UpdateAllowanceForbidden) WithPayload(payload *ghcmessages.Error) *UpdateAllowanceForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update allowance forbidden response
func (o *UpdateAllowanceForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAllowanceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAllowanceNotFoundCode is the HTTP code returned for type UpdateAllowanceNotFound
const UpdateAllowanceNotFoundCode int = 404

/*
UpdateAllowanceNotFound The requested resource wasn't found

swagger:response updateAllowanceNotFound
*/
type UpdateAllowanceNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewUpdateAllowanceNotFound creates UpdateAllowanceNotFound with default headers values
func NewUpdateAllowanceNotFound() *UpdateAllowanceNotFound {

	return &UpdateAllowanceNotFound{}
}

// WithPayload adds the payload to the update allowance not found response
func (o *UpdateAllowanceNotFound) WithPayload(payload *ghcmessages.Error) *UpdateAllowanceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update allowance not found response
func (o *UpdateAllowanceNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAllowanceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAllowancePreconditionFailedCode is the HTTP code returned for type UpdateAllowancePreconditionFailed
const UpdateAllowancePreconditionFailedCode int = 412

/*
UpdateAllowancePreconditionFailed Precondition failed

swagger:response updateAllowancePreconditionFailed
*/
type UpdateAllowancePreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewUpdateAllowancePreconditionFailed creates UpdateAllowancePreconditionFailed with default headers values
func NewUpdateAllowancePreconditionFailed() *UpdateAllowancePreconditionFailed {

	return &UpdateAllowancePreconditionFailed{}
}

// WithPayload adds the payload to the update allowance precondition failed response
func (o *UpdateAllowancePreconditionFailed) WithPayload(payload *ghcmessages.Error) *UpdateAllowancePreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update allowance precondition failed response
func (o *UpdateAllowancePreconditionFailed) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAllowancePreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAllowanceUnprocessableEntityCode is the HTTP code returned for type UpdateAllowanceUnprocessableEntity
const UpdateAllowanceUnprocessableEntityCode int = 422

/*
UpdateAllowanceUnprocessableEntity The payload was unprocessable.

swagger:response updateAllowanceUnprocessableEntity
*/
type UpdateAllowanceUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewUpdateAllowanceUnprocessableEntity creates UpdateAllowanceUnprocessableEntity with default headers values
func NewUpdateAllowanceUnprocessableEntity() *UpdateAllowanceUnprocessableEntity {

	return &UpdateAllowanceUnprocessableEntity{}
}

// WithPayload adds the payload to the update allowance unprocessable entity response
func (o *UpdateAllowanceUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *UpdateAllowanceUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update allowance unprocessable entity response
func (o *UpdateAllowanceUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAllowanceUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAllowanceInternalServerErrorCode is the HTTP code returned for type UpdateAllowanceInternalServerError
const UpdateAllowanceInternalServerErrorCode int = 500

/*
UpdateAllowanceInternalServerError A server error occurred

swagger:response updateAllowanceInternalServerError
*/
type UpdateAllowanceInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewUpdateAllowanceInternalServerError creates UpdateAllowanceInternalServerError with default headers values
func NewUpdateAllowanceInternalServerError() *UpdateAllowanceInternalServerError {

	return &UpdateAllowanceInternalServerError{}
}

// WithPayload adds the payload to the update allowance internal server error response
func (o *UpdateAllowanceInternalServerError) WithPayload(payload *ghcmessages.Error) *UpdateAllowanceInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update allowance internal server error response
func (o *UpdateAllowanceInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAllowanceInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
