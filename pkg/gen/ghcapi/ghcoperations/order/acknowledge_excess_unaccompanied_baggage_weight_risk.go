// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AcknowledgeExcessUnaccompaniedBaggageWeightRiskHandlerFunc turns a function with the right signature into a acknowledge excess unaccompanied baggage weight risk handler
type AcknowledgeExcessUnaccompaniedBaggageWeightRiskHandlerFunc func(AcknowledgeExcessUnaccompaniedBaggageWeightRiskParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AcknowledgeExcessUnaccompaniedBaggageWeightRiskHandlerFunc) Handle(params AcknowledgeExcessUnaccompaniedBaggageWeightRiskParams) middleware.Responder {
	return fn(params)
}

// AcknowledgeExcessUnaccompaniedBaggageWeightRiskHandler interface for that can handle valid acknowledge excess unaccompanied baggage weight risk params
type AcknowledgeExcessUnaccompaniedBaggageWeightRiskHandler interface {
	Handle(AcknowledgeExcessUnaccompaniedBaggageWeightRiskParams) middleware.Responder
}

// NewAcknowledgeExcessUnaccompaniedBaggageWeightRisk creates a new http.Handler for the acknowledge excess unaccompanied baggage weight risk operation
func NewAcknowledgeExcessUnaccompaniedBaggageWeightRisk(ctx *middleware.Context, handler AcknowledgeExcessUnaccompaniedBaggageWeightRiskHandler) *AcknowledgeExcessUnaccompaniedBaggageWeightRisk {
	return &AcknowledgeExcessUnaccompaniedBaggageWeightRisk{Context: ctx, Handler: handler}
}

/*
	AcknowledgeExcessUnaccompaniedBaggageWeightRisk swagger:route POST /orders/{orderID}/acknowledge-excess-unaccompanied-baggage-weight-risk order acknowledgeExcessUnaccompaniedBaggageWeightRisk

# Saves the date and time a TOO acknowledged the excess unaccompanied baggage weight risk by dismissing the alert

Saves the date and time a TOO acknowledged the excess unaccompanied baggage weight risk by dismissing the alert
*/
type AcknowledgeExcessUnaccompaniedBaggageWeightRisk struct {
	Context *middleware.Context
	Handler AcknowledgeExcessUnaccompaniedBaggageWeightRiskHandler
}

func (o *AcknowledgeExcessUnaccompaniedBaggageWeightRisk) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAcknowledgeExcessUnaccompaniedBaggageWeightRiskParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
