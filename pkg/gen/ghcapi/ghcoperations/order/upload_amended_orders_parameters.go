// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UploadAmendedOrdersMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var UploadAmendedOrdersMaxParseMemory int64 = 32 << 20

// NewUploadAmendedOrdersParams creates a new UploadAmendedOrdersParams object
//
// There are no default values defined in the spec.
func NewUploadAmendedOrdersParams() UploadAmendedOrdersParams {

	return UploadAmendedOrdersParams{}
}

// UploadAmendedOrdersParams contains all the bound params for the upload amended orders operation
// typically these are obtained from a http.Request
//
// swagger:parameters uploadAmendedOrders
type UploadAmendedOrdersParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The file to upload.
	  Required: true
	  In: formData
	*/
	File io.ReadCloser
	/*UUID of the order
	  Required: true
	  In: path
	*/
	OrderID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUploadAmendedOrdersParams() beforehand.
func (o *UploadAmendedOrdersParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(UploadAmendedOrdersMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}

	file, fileHeader, err := r.FormFile("file")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "file", err))
	} else if err := o.bindFile(file, fileHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.File = &runtime.File{Data: file, Header: fileHeader}
	}

	rOrderID, rhkOrderID, _ := route.Params.GetOK("orderID")
	if err := o.bindOrderID(rOrderID, rhkOrderID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFile binds file parameter File.
//
// The only supported validations on files are MinLength and MaxLength
func (o *UploadAmendedOrdersParams) bindFile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindOrderID binds and validates parameter OrderID from path.
func (o *UploadAmendedOrdersParams) bindOrderID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("orderID", "path", "strfmt.UUID", raw)
	}
	o.OrderID = *(value.(*strfmt.UUID))

	if err := o.validateOrderID(formats); err != nil {
		return err
	}

	return nil
}

// validateOrderID carries on validations for parameter OrderID
func (o *UploadAmendedOrdersParams) validateOrderID(formats strfmt.Registry) error {

	if err := validate.FormatOf("orderID", "path", "uuid", o.OrderID.String(), formats); err != nil {
		return err
	}
	return nil
}
