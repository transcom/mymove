// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CounselingUpdateOrderHandlerFunc turns a function with the right signature into a counseling update order handler
type CounselingUpdateOrderHandlerFunc func(CounselingUpdateOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CounselingUpdateOrderHandlerFunc) Handle(params CounselingUpdateOrderParams) middleware.Responder {
	return fn(params)
}

// CounselingUpdateOrderHandler interface for that can handle valid counseling update order params
type CounselingUpdateOrderHandler interface {
	Handle(CounselingUpdateOrderParams) middleware.Responder
}

// NewCounselingUpdateOrder creates a new http.Handler for the counseling update order operation
func NewCounselingUpdateOrder(ctx *middleware.Context, handler CounselingUpdateOrderHandler) *CounselingUpdateOrder {
	return &CounselingUpdateOrder{Context: ctx, Handler: handler}
}

/*
	CounselingUpdateOrder swagger:route PATCH /counseling/orders/{orderID} order counselingUpdateOrder

Updates an order (performed by a services counselor)

All fields sent in this request will be set on the order referenced
*/
type CounselingUpdateOrder struct {
	Context *middleware.Context
	Handler CounselingUpdateOrderHandler
}

func (o *CounselingUpdateOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCounselingUpdateOrderParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
