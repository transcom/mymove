// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateAllowanceHandlerFunc turns a function with the right signature into a update allowance handler
type UpdateAllowanceHandlerFunc func(UpdateAllowanceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateAllowanceHandlerFunc) Handle(params UpdateAllowanceParams) middleware.Responder {
	return fn(params)
}

// UpdateAllowanceHandler interface for that can handle valid update allowance params
type UpdateAllowanceHandler interface {
	Handle(UpdateAllowanceParams) middleware.Responder
}

// NewUpdateAllowance creates a new http.Handler for the update allowance operation
func NewUpdateAllowance(ctx *middleware.Context, handler UpdateAllowanceHandler) *UpdateAllowance {
	return &UpdateAllowance{Context: ctx, Handler: handler}
}

/*
	UpdateAllowance swagger:route PATCH /orders/{orderID}/allowances order updateAllowance

Updates an allowance (Orders with Entitlements)

All fields sent in this request will be set on the order referenced
*/
type UpdateAllowance struct {
	Context *middleware.Context
	Handler UpdateAllowanceHandler
}

func (o *UpdateAllowance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateAllowanceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
