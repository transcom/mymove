// Code generated by go-swagger; DO NOT EDIT.

package uploads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateUploadHandlerFunc turns a function with the right signature into a update upload handler
type UpdateUploadHandlerFunc func(UpdateUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateUploadHandlerFunc) Handle(params UpdateUploadParams) middleware.Responder {
	return fn(params)
}

// UpdateUploadHandler interface for that can handle valid update upload params
type UpdateUploadHandler interface {
	Handle(UpdateUploadParams) middleware.Responder
}

// NewUpdateUpload creates a new http.Handler for the update upload operation
func NewUpdateUpload(ctx *middleware.Context, handler UpdateUploadHandler) *UpdateUpload {
	return &UpdateUpload{Context: ctx, Handler: handler}
}

/*
	UpdateUpload swagger:route PATCH /uploads/{uploadID}/update uploads updateUpload

Update an existing upload. This is only needed currently for updating the image rotation.

Uploads represent a single digital file, such as a JPEG or PDF. The rotation is relevant to how it is displayed on the page.
*/
type UpdateUpload struct {
	Context *middleware.Context
	Handler UpdateUploadHandler
}

func (o *UpdateUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateUploadParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateUploadBody update upload body
//
// swagger:model UpdateUploadBody
type UpdateUploadBody struct {

	// The rotation of the image
	// Maximum: 3
	// Minimum: 0
	Rotation *int64 `json:"rotation,omitempty"`
}

// Validate validates this update upload body
func (o *UpdateUploadBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRotation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUploadBody) validateRotation(formats strfmt.Registry) error {
	if swag.IsZero(o.Rotation) { // not required
		return nil
	}

	if err := validate.MinimumInt("body"+"."+"rotation", "body", *o.Rotation, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("body"+"."+"rotation", "body", *o.Rotation, 3, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update upload body based on context it is used
func (o *UpdateUploadBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUploadBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUploadBody) UnmarshalBinary(b []byte) error {
	var res UpdateUploadBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
