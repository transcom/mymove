// Code generated by go-swagger; DO NOT EDIT.

package report_violations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetReportViolationsByReportIDHandlerFunc turns a function with the right signature into a get report violations by report ID handler
type GetReportViolationsByReportIDHandlerFunc func(GetReportViolationsByReportIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReportViolationsByReportIDHandlerFunc) Handle(params GetReportViolationsByReportIDParams) middleware.Responder {
	return fn(params)
}

// GetReportViolationsByReportIDHandler interface for that can handle valid get report violations by report ID params
type GetReportViolationsByReportIDHandler interface {
	Handle(GetReportViolationsByReportIDParams) middleware.Responder
}

// NewGetReportViolationsByReportID creates a new http.Handler for the get report violations by report ID operation
func NewGetReportViolationsByReportID(ctx *middleware.Context, handler GetReportViolationsByReportIDHandler) *GetReportViolationsByReportID {
	return &GetReportViolationsByReportID{Context: ctx, Handler: handler}
}

/*
	GetReportViolationsByReportID swagger:route GET /report-violations/{reportID} reportViolations getReportViolationsByReportId

# Fetch the report violations for an evaluation report

Fetch the report violations for an evaluation report
*/
type GetReportViolationsByReportID struct {
	Context *middleware.Context
	Handler GetReportViolationsByReportIDHandler
}

func (o *GetReportViolationsByReportID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetReportViolationsByReportIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
