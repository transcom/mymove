// Code generated by go-swagger; DO NOT EDIT.

package report_violations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AssociateReportViolationsHandlerFunc turns a function with the right signature into a associate report violations handler
type AssociateReportViolationsHandlerFunc func(AssociateReportViolationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AssociateReportViolationsHandlerFunc) Handle(params AssociateReportViolationsParams) middleware.Responder {
	return fn(params)
}

// AssociateReportViolationsHandler interface for that can handle valid associate report violations params
type AssociateReportViolationsHandler interface {
	Handle(AssociateReportViolationsParams) middleware.Responder
}

// NewAssociateReportViolations creates a new http.Handler for the associate report violations operation
func NewAssociateReportViolations(ctx *middleware.Context, handler AssociateReportViolationsHandler) *AssociateReportViolations {
	return &AssociateReportViolations{Context: ctx, Handler: handler}
}

/*
	AssociateReportViolations swagger:route POST /report-violations/{reportID} reportViolations associateReportViolations

# Associate violations with an evaluation report

Associate violations with an evaluation report. This will overwrite any existing report-violations associations for the report and replace them with the newly provided ones.  An empty array will remove all violation associations for a given report.
*/
type AssociateReportViolations struct {
	Context *middleware.Context
	Handler AssociateReportViolationsHandler
}

func (o *AssociateReportViolations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAssociateReportViolationsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
