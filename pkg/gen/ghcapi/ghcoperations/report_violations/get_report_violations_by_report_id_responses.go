// Code generated by go-swagger; DO NOT EDIT.

package report_violations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// GetReportViolationsByReportIDOKCode is the HTTP code returned for type GetReportViolationsByReportIDOK
const GetReportViolationsByReportIDOKCode int = 200

/*
GetReportViolationsByReportIDOK Successfully retrieved the report violations

swagger:response getReportViolationsByReportIdOK
*/
type GetReportViolationsByReportIDOK struct {

	/*
	  In: Body
	*/
	Payload ghcmessages.ReportViolations `json:"body,omitempty"`
}

// NewGetReportViolationsByReportIDOK creates GetReportViolationsByReportIDOK with default headers values
func NewGetReportViolationsByReportIDOK() *GetReportViolationsByReportIDOK {

	return &GetReportViolationsByReportIDOK{}
}

// WithPayload adds the payload to the get report violations by report Id o k response
func (o *GetReportViolationsByReportIDOK) WithPayload(payload ghcmessages.ReportViolations) *GetReportViolationsByReportIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get report violations by report Id o k response
func (o *GetReportViolationsByReportIDOK) SetPayload(payload ghcmessages.ReportViolations) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReportViolationsByReportIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = ghcmessages.ReportViolations{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetReportViolationsByReportIDBadRequestCode is the HTTP code returned for type GetReportViolationsByReportIDBadRequest
const GetReportViolationsByReportIDBadRequestCode int = 400

/*
GetReportViolationsByReportIDBadRequest The request payload is invalid

swagger:response getReportViolationsByReportIdBadRequest
*/
type GetReportViolationsByReportIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetReportViolationsByReportIDBadRequest creates GetReportViolationsByReportIDBadRequest with default headers values
func NewGetReportViolationsByReportIDBadRequest() *GetReportViolationsByReportIDBadRequest {

	return &GetReportViolationsByReportIDBadRequest{}
}

// WithPayload adds the payload to the get report violations by report Id bad request response
func (o *GetReportViolationsByReportIDBadRequest) WithPayload(payload *ghcmessages.Error) *GetReportViolationsByReportIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get report violations by report Id bad request response
func (o *GetReportViolationsByReportIDBadRequest) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReportViolationsByReportIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReportViolationsByReportIDForbiddenCode is the HTTP code returned for type GetReportViolationsByReportIDForbidden
const GetReportViolationsByReportIDForbiddenCode int = 403

/*
GetReportViolationsByReportIDForbidden The request was denied

swagger:response getReportViolationsByReportIdForbidden
*/
type GetReportViolationsByReportIDForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetReportViolationsByReportIDForbidden creates GetReportViolationsByReportIDForbidden with default headers values
func NewGetReportViolationsByReportIDForbidden() *GetReportViolationsByReportIDForbidden {

	return &GetReportViolationsByReportIDForbidden{}
}

// WithPayload adds the payload to the get report violations by report Id forbidden response
func (o *GetReportViolationsByReportIDForbidden) WithPayload(payload *ghcmessages.Error) *GetReportViolationsByReportIDForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get report violations by report Id forbidden response
func (o *GetReportViolationsByReportIDForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReportViolationsByReportIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReportViolationsByReportIDNotFoundCode is the HTTP code returned for type GetReportViolationsByReportIDNotFound
const GetReportViolationsByReportIDNotFoundCode int = 404

/*
GetReportViolationsByReportIDNotFound The requested resource wasn't found

swagger:response getReportViolationsByReportIdNotFound
*/
type GetReportViolationsByReportIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetReportViolationsByReportIDNotFound creates GetReportViolationsByReportIDNotFound with default headers values
func NewGetReportViolationsByReportIDNotFound() *GetReportViolationsByReportIDNotFound {

	return &GetReportViolationsByReportIDNotFound{}
}

// WithPayload adds the payload to the get report violations by report Id not found response
func (o *GetReportViolationsByReportIDNotFound) WithPayload(payload *ghcmessages.Error) *GetReportViolationsByReportIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get report violations by report Id not found response
func (o *GetReportViolationsByReportIDNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReportViolationsByReportIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReportViolationsByReportIDInternalServerErrorCode is the HTTP code returned for type GetReportViolationsByReportIDInternalServerError
const GetReportViolationsByReportIDInternalServerErrorCode int = 500

/*
GetReportViolationsByReportIDInternalServerError A server error occurred

swagger:response getReportViolationsByReportIdInternalServerError
*/
type GetReportViolationsByReportIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetReportViolationsByReportIDInternalServerError creates GetReportViolationsByReportIDInternalServerError with default headers values
func NewGetReportViolationsByReportIDInternalServerError() *GetReportViolationsByReportIDInternalServerError {

	return &GetReportViolationsByReportIDInternalServerError{}
}

// WithPayload adds the payload to the get report violations by report Id internal server error response
func (o *GetReportViolationsByReportIDInternalServerError) WithPayload(payload *ghcmessages.Error) *GetReportViolationsByReportIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get report violations by report Id internal server error response
func (o *GetReportViolationsByReportIDInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReportViolationsByReportIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
