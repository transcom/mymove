// Code generated by go-swagger; DO NOT EDIT.

package payment_service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdatePaymentServiceItemStatusHandlerFunc turns a function with the right signature into a update payment service item status handler
type UpdatePaymentServiceItemStatusHandlerFunc func(UpdatePaymentServiceItemStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdatePaymentServiceItemStatusHandlerFunc) Handle(params UpdatePaymentServiceItemStatusParams) middleware.Responder {
	return fn(params)
}

// UpdatePaymentServiceItemStatusHandler interface for that can handle valid update payment service item status params
type UpdatePaymentServiceItemStatusHandler interface {
	Handle(UpdatePaymentServiceItemStatusParams) middleware.Responder
}

// NewUpdatePaymentServiceItemStatus creates a new http.Handler for the update payment service item status operation
func NewUpdatePaymentServiceItemStatus(ctx *middleware.Context, handler UpdatePaymentServiceItemStatusHandler) *UpdatePaymentServiceItemStatus {
	return &UpdatePaymentServiceItemStatus{Context: ctx, Handler: handler}
}

/*UpdatePaymentServiceItemStatus swagger:route PATCH /move-task-orders/{moveTaskOrderID}/payment-service-items/{paymentServiceItemID}/status paymentServiceItem updatePaymentServiceItemStatus

Change the status of a payment service item for a move by ID

Changes the status of a line item for a move by ID

*/
type UpdatePaymentServiceItemStatus struct {
	Context *middleware.Context
	Handler UpdatePaymentServiceItemStatusHandler
}

func (o *UpdatePaymentServiceItemStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdatePaymentServiceItemStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
