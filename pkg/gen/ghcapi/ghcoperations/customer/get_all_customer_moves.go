// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAllCustomerMovesHandlerFunc turns a function with the right signature into a get all customer moves handler
type GetAllCustomerMovesHandlerFunc func(GetAllCustomerMovesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllCustomerMovesHandlerFunc) Handle(params GetAllCustomerMovesParams) middleware.Responder {
	return fn(params)
}

// GetAllCustomerMovesHandler interface for that can handle valid get all customer moves params
type GetAllCustomerMovesHandler interface {
	Handle(GetAllCustomerMovesParams) middleware.Responder
}

// NewGetAllCustomerMoves creates a new http.Handler for the get all customer moves operation
func NewGetAllCustomerMoves(ctx *middleware.Context, handler GetAllCustomerMovesHandler) *GetAllCustomerMoves {
	return &GetAllCustomerMoves{Context: ctx, Handler: handler}
}

/*GetAllCustomerMoves swagger:route GET /customer Customer getAllCustomerMoves

Gets all customers

Gets all customers

*/
type GetAllCustomerMoves struct {
	Context *middleware.Context
	Handler GetAllCustomerMovesHandler
}

func (o *GetAllCustomerMoves) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAllCustomerMovesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
