// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchCustomersHandlerFunc turns a function with the right signature into a search customers handler
type SearchCustomersHandlerFunc func(SearchCustomersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchCustomersHandlerFunc) Handle(params SearchCustomersParams) middleware.Responder {
	return fn(params)
}

// SearchCustomersHandler interface for that can handle valid search customers params
type SearchCustomersHandler interface {
	Handle(SearchCustomersParams) middleware.Responder
}

// NewSearchCustomers creates a new http.Handler for the search customers operation
func NewSearchCustomers(ctx *middleware.Context, handler SearchCustomersHandler) *SearchCustomers {
	return &SearchCustomers{Context: ctx, Handler: handler}
}

/*
	SearchCustomers swagger:route POST /customer/search customer searchCustomers

# Search customers by DOD ID or customer name

Search customers by DOD ID or customer name. Used by services counselors to locate profiles to update, find attached moves, and to create new moves.
*/
type SearchCustomers struct {
	Context *middleware.Context
	Handler SearchCustomersHandler
}

func (o *SearchCustomers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSearchCustomersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SearchCustomersBody search customers body
//
// swagger:model SearchCustomersBody
type SearchCustomersBody struct {

	// Branch
	// Min Length: 1
	Branch string `json:"branch,omitempty"`

	// Customer Name
	// Min Length: 1
	CustomerName *string `json:"customerName,omitempty"`

	// DOD ID
	// Max Length: 10
	// Min Length: 10
	DodID *string `json:"dodID,omitempty"`

	// EMPLID
	// Max Length: 7
	// Min Length: 7
	Emplid *string `json:"emplid,omitempty"`

	// order
	// Enum: [asc desc]
	Order *string `json:"order,omitempty"`

	// requested page of results
	Page int64 `json:"page,omitempty"`

	// per page
	PerPage int64 `json:"perPage,omitempty"`

	// sort
	// Enum: [customerName dodID emplid branch personalEmail telephone]
	Sort *string `json:"sort,omitempty"`
}

// Validate validates this search customers body
func (o *SearchCustomersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomerName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDodID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmplid(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchCustomersBody) validateBranch(formats strfmt.Registry) error {
	if swag.IsZero(o.Branch) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"branch", "body", o.Branch, 1); err != nil {
		return err
	}

	return nil
}

func (o *SearchCustomersBody) validateCustomerName(formats strfmt.Registry) error {
	if swag.IsZero(o.CustomerName) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"customerName", "body", *o.CustomerName, 1); err != nil {
		return err
	}

	return nil
}

func (o *SearchCustomersBody) validateDodID(formats strfmt.Registry) error {
	if swag.IsZero(o.DodID) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"dodID", "body", *o.DodID, 10); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"dodID", "body", *o.DodID, 10); err != nil {
		return err
	}

	return nil
}

func (o *SearchCustomersBody) validateEmplid(formats strfmt.Registry) error {
	if swag.IsZero(o.Emplid) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"emplid", "body", *o.Emplid, 7); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"emplid", "body", *o.Emplid, 7); err != nil {
		return err
	}

	return nil
}

var searchCustomersBodyTypeOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["asc","desc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchCustomersBodyTypeOrderPropEnum = append(searchCustomersBodyTypeOrderPropEnum, v)
	}
}

const (

	// SearchCustomersBodyOrderAsc captures enum value "asc"
	SearchCustomersBodyOrderAsc string = "asc"

	// SearchCustomersBodyOrderDesc captures enum value "desc"
	SearchCustomersBodyOrderDesc string = "desc"
)

// prop value enum
func (o *SearchCustomersBody) validateOrderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchCustomersBodyTypeOrderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *SearchCustomersBody) validateOrder(formats strfmt.Registry) error {
	if swag.IsZero(o.Order) { // not required
		return nil
	}

	// value enum
	if err := o.validateOrderEnum("body"+"."+"order", "body", *o.Order); err != nil {
		return err
	}

	return nil
}

var searchCustomersBodyTypeSortPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["customerName","dodID","emplid","branch","personalEmail","telephone"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchCustomersBodyTypeSortPropEnum = append(searchCustomersBodyTypeSortPropEnum, v)
	}
}

const (

	// SearchCustomersBodySortCustomerName captures enum value "customerName"
	SearchCustomersBodySortCustomerName string = "customerName"

	// SearchCustomersBodySortDodID captures enum value "dodID"
	SearchCustomersBodySortDodID string = "dodID"

	// SearchCustomersBodySortEmplid captures enum value "emplid"
	SearchCustomersBodySortEmplid string = "emplid"

	// SearchCustomersBodySortBranch captures enum value "branch"
	SearchCustomersBodySortBranch string = "branch"

	// SearchCustomersBodySortPersonalEmail captures enum value "personalEmail"
	SearchCustomersBodySortPersonalEmail string = "personalEmail"

	// SearchCustomersBodySortTelephone captures enum value "telephone"
	SearchCustomersBodySortTelephone string = "telephone"
)

// prop value enum
func (o *SearchCustomersBody) validateSortEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchCustomersBodyTypeSortPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *SearchCustomersBody) validateSort(formats strfmt.Registry) error {
	if swag.IsZero(o.Sort) { // not required
		return nil
	}

	// value enum
	if err := o.validateSortEnum("body"+"."+"sort", "body", *o.Sort); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search customers body based on context it is used
func (o *SearchCustomersBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchCustomersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchCustomersBody) UnmarshalBinary(b []byte) error {
	var res SearchCustomersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
