// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateCustomerWithOktaOptionHandlerFunc turns a function with the right signature into a create customer with okta option handler
type CreateCustomerWithOktaOptionHandlerFunc func(CreateCustomerWithOktaOptionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCustomerWithOktaOptionHandlerFunc) Handle(params CreateCustomerWithOktaOptionParams) middleware.Responder {
	return fn(params)
}

// CreateCustomerWithOktaOptionHandler interface for that can handle valid create customer with okta option params
type CreateCustomerWithOktaOptionHandler interface {
	Handle(CreateCustomerWithOktaOptionParams) middleware.Responder
}

// NewCreateCustomerWithOktaOption creates a new http.Handler for the create customer with okta option operation
func NewCreateCustomerWithOktaOption(ctx *middleware.Context, handler CreateCustomerWithOktaOptionHandler) *CreateCustomerWithOktaOption {
	return &CreateCustomerWithOktaOption{Context: ctx, Handler: handler}
}

/*
	CreateCustomerWithOktaOption swagger:route POST /customer customer createCustomerWithOktaOption

# Creates a customer with Okta option

Creates a customer with option to also create an Okta profile account based on the office user's input when completing the UI form and submitting.
*/
type CreateCustomerWithOktaOption struct {
	Context *middleware.Context
	Handler CreateCustomerWithOktaOptionHandler
}

func (o *CreateCustomerWithOktaOption) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateCustomerWithOktaOptionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
