// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// SearchCustomersOKCode is the HTTP code returned for type SearchCustomersOK
const SearchCustomersOKCode int = 200

/*
SearchCustomersOK Successfully returned all customers matching the criteria

swagger:response searchCustomersOK
*/
type SearchCustomersOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.SearchCustomersResult `json:"body,omitempty"`
}

// NewSearchCustomersOK creates SearchCustomersOK with default headers values
func NewSearchCustomersOK() *SearchCustomersOK {

	return &SearchCustomersOK{}
}

// WithPayload adds the payload to the search customers o k response
func (o *SearchCustomersOK) WithPayload(payload *ghcmessages.SearchCustomersResult) *SearchCustomersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search customers o k response
func (o *SearchCustomersOK) SetPayload(payload *ghcmessages.SearchCustomersResult) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchCustomersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchCustomersForbiddenCode is the HTTP code returned for type SearchCustomersForbidden
const SearchCustomersForbiddenCode int = 403

/*
SearchCustomersForbidden The request was denied

swagger:response searchCustomersForbidden
*/
type SearchCustomersForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewSearchCustomersForbidden creates SearchCustomersForbidden with default headers values
func NewSearchCustomersForbidden() *SearchCustomersForbidden {

	return &SearchCustomersForbidden{}
}

// WithPayload adds the payload to the search customers forbidden response
func (o *SearchCustomersForbidden) WithPayload(payload *ghcmessages.Error) *SearchCustomersForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search customers forbidden response
func (o *SearchCustomersForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchCustomersForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchCustomersInternalServerErrorCode is the HTTP code returned for type SearchCustomersInternalServerError
const SearchCustomersInternalServerErrorCode int = 500

/*
SearchCustomersInternalServerError A server error occurred

swagger:response searchCustomersInternalServerError
*/
type SearchCustomersInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewSearchCustomersInternalServerError creates SearchCustomersInternalServerError with default headers values
func NewSearchCustomersInternalServerError() *SearchCustomersInternalServerError {

	return &SearchCustomersInternalServerError{}
}

// WithPayload adds the payload to the search customers internal server error response
func (o *SearchCustomersInternalServerError) WithPayload(payload *ghcmessages.Error) *SearchCustomersInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search customers internal server error response
func (o *SearchCustomersInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchCustomersInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
