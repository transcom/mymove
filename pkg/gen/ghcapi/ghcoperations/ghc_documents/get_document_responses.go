// Code generated by go-swagger; DO NOT EDIT.

package ghc_documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// GetDocumentOKCode is the HTTP code returned for type GetDocumentOK
const GetDocumentOKCode int = 200

/*
GetDocumentOK the requested document

swagger:response getDocumentOK
*/
type GetDocumentOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Document `json:"body,omitempty"`
}

// NewGetDocumentOK creates GetDocumentOK with default headers values
func NewGetDocumentOK() *GetDocumentOK {

	return &GetDocumentOK{}
}

// WithPayload adds the payload to the get document o k response
func (o *GetDocumentOK) WithPayload(payload *ghcmessages.Document) *GetDocumentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get document o k response
func (o *GetDocumentOK) SetPayload(payload *ghcmessages.Document) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDocumentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDocumentBadRequestCode is the HTTP code returned for type GetDocumentBadRequest
const GetDocumentBadRequestCode int = 400

/*
GetDocumentBadRequest The request payload is invalid

swagger:response getDocumentBadRequest
*/
type GetDocumentBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetDocumentBadRequest creates GetDocumentBadRequest with default headers values
func NewGetDocumentBadRequest() *GetDocumentBadRequest {

	return &GetDocumentBadRequest{}
}

// WithPayload adds the payload to the get document bad request response
func (o *GetDocumentBadRequest) WithPayload(payload *ghcmessages.Error) *GetDocumentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get document bad request response
func (o *GetDocumentBadRequest) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDocumentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDocumentUnauthorizedCode is the HTTP code returned for type GetDocumentUnauthorized
const GetDocumentUnauthorizedCode int = 401

/*
GetDocumentUnauthorized The request was denied

swagger:response getDocumentUnauthorized
*/
type GetDocumentUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetDocumentUnauthorized creates GetDocumentUnauthorized with default headers values
func NewGetDocumentUnauthorized() *GetDocumentUnauthorized {

	return &GetDocumentUnauthorized{}
}

// WithPayload adds the payload to the get document unauthorized response
func (o *GetDocumentUnauthorized) WithPayload(payload *ghcmessages.Error) *GetDocumentUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get document unauthorized response
func (o *GetDocumentUnauthorized) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDocumentUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDocumentForbiddenCode is the HTTP code returned for type GetDocumentForbidden
const GetDocumentForbiddenCode int = 403

/*
GetDocumentForbidden The request was denied

swagger:response getDocumentForbidden
*/
type GetDocumentForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetDocumentForbidden creates GetDocumentForbidden with default headers values
func NewGetDocumentForbidden() *GetDocumentForbidden {

	return &GetDocumentForbidden{}
}

// WithPayload adds the payload to the get document forbidden response
func (o *GetDocumentForbidden) WithPayload(payload *ghcmessages.Error) *GetDocumentForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get document forbidden response
func (o *GetDocumentForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDocumentForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDocumentNotFoundCode is the HTTP code returned for type GetDocumentNotFound
const GetDocumentNotFoundCode int = 404

/*
GetDocumentNotFound The requested resource wasn't found

swagger:response getDocumentNotFound
*/
type GetDocumentNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetDocumentNotFound creates GetDocumentNotFound with default headers values
func NewGetDocumentNotFound() *GetDocumentNotFound {

	return &GetDocumentNotFound{}
}

// WithPayload adds the payload to the get document not found response
func (o *GetDocumentNotFound) WithPayload(payload *ghcmessages.Error) *GetDocumentNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get document not found response
func (o *GetDocumentNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDocumentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDocumentPreconditionFailedCode is the HTTP code returned for type GetDocumentPreconditionFailed
const GetDocumentPreconditionFailedCode int = 412

/*
GetDocumentPreconditionFailed Precondition failed

swagger:response getDocumentPreconditionFailed
*/
type GetDocumentPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetDocumentPreconditionFailed creates GetDocumentPreconditionFailed with default headers values
func NewGetDocumentPreconditionFailed() *GetDocumentPreconditionFailed {

	return &GetDocumentPreconditionFailed{}
}

// WithPayload adds the payload to the get document precondition failed response
func (o *GetDocumentPreconditionFailed) WithPayload(payload *ghcmessages.Error) *GetDocumentPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get document precondition failed response
func (o *GetDocumentPreconditionFailed) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDocumentPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDocumentUnprocessableEntityCode is the HTTP code returned for type GetDocumentUnprocessableEntity
const GetDocumentUnprocessableEntityCode int = 422

/*
GetDocumentUnprocessableEntity The payload was unprocessable.

swagger:response getDocumentUnprocessableEntity
*/
type GetDocumentUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewGetDocumentUnprocessableEntity creates GetDocumentUnprocessableEntity with default headers values
func NewGetDocumentUnprocessableEntity() *GetDocumentUnprocessableEntity {

	return &GetDocumentUnprocessableEntity{}
}

// WithPayload adds the payload to the get document unprocessable entity response
func (o *GetDocumentUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *GetDocumentUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get document unprocessable entity response
func (o *GetDocumentUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDocumentUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDocumentInternalServerErrorCode is the HTTP code returned for type GetDocumentInternalServerError
const GetDocumentInternalServerErrorCode int = 500

/*
GetDocumentInternalServerError A server error occurred

swagger:response getDocumentInternalServerError
*/
type GetDocumentInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetDocumentInternalServerError creates GetDocumentInternalServerError with default headers values
func NewGetDocumentInternalServerError() *GetDocumentInternalServerError {

	return &GetDocumentInternalServerError{}
}

// WithPayload adds the payload to the get document internal server error response
func (o *GetDocumentInternalServerError) WithPayload(payload *ghcmessages.Error) *GetDocumentInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get document internal server error response
func (o *GetDocumentInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDocumentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
