// Code generated by go-swagger; DO NOT EDIT.

package lines_of_accounting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RequestLineOfAccountingHandlerFunc turns a function with the right signature into a request line of accounting handler
type RequestLineOfAccountingHandlerFunc func(RequestLineOfAccountingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RequestLineOfAccountingHandlerFunc) Handle(params RequestLineOfAccountingParams) middleware.Responder {
	return fn(params)
}

// RequestLineOfAccountingHandler interface for that can handle valid request line of accounting params
type RequestLineOfAccountingHandler interface {
	Handle(RequestLineOfAccountingParams) middleware.Responder
}

// NewRequestLineOfAccounting creates a new http.Handler for the request line of accounting operation
func NewRequestLineOfAccounting(ctx *middleware.Context, handler RequestLineOfAccountingHandler) *RequestLineOfAccounting {
	return &RequestLineOfAccounting{Context: ctx, Handler: handler}
}

/*
	RequestLineOfAccounting swagger:route POST /lines-of-accounting linesOfAccounting requestLineOfAccounting

# Fetch line of accounting

Fetches a line of accounting based on provided service member affiliation, effective date, and Transportation Accounting Code (TAC). It uses these parameters to filter the correct Line of Accounting for the provided TAC. It does this by filtering through both TAC and LOAs based on the provided code and effective date. The 'Effective Date' is the date that can be either the orders issued date (For HHG shipments), MTO approval date (For NTS shipments), or even the current date for NTS shipments with no approval yet (Just providing a preview to the office users per customer request). Effective date is used to find "Active" TGET data by searching for the TACs and LOAs with begin and end dates containing this date.
*/
type RequestLineOfAccounting struct {
	Context *middleware.Context
	Handler RequestLineOfAccountingHandler
}

func (o *RequestLineOfAccounting) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRequestLineOfAccountingParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
