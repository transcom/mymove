// Code generated by go-swagger; DO NOT EDIT.

package lines_of_accounting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// RequestLineOfAccountingOKCode is the HTTP code returned for type RequestLineOfAccountingOK
const RequestLineOfAccountingOKCode int = 200

/*
RequestLineOfAccountingOK Successfully retrieved line of accounting

swagger:response requestLineOfAccountingOK
*/
type RequestLineOfAccountingOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.LineOfAccounting `json:"body,omitempty"`
}

// NewRequestLineOfAccountingOK creates RequestLineOfAccountingOK with default headers values
func NewRequestLineOfAccountingOK() *RequestLineOfAccountingOK {

	return &RequestLineOfAccountingOK{}
}

// WithPayload adds the payload to the request line of accounting o k response
func (o *RequestLineOfAccountingOK) WithPayload(payload *ghcmessages.LineOfAccounting) *RequestLineOfAccountingOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request line of accounting o k response
func (o *RequestLineOfAccountingOK) SetPayload(payload *ghcmessages.LineOfAccounting) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestLineOfAccountingOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestLineOfAccountingBadRequestCode is the HTTP code returned for type RequestLineOfAccountingBadRequest
const RequestLineOfAccountingBadRequestCode int = 400

/*
RequestLineOfAccountingBadRequest The request payload is invalid

swagger:response requestLineOfAccountingBadRequest
*/
type RequestLineOfAccountingBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestLineOfAccountingBadRequest creates RequestLineOfAccountingBadRequest with default headers values
func NewRequestLineOfAccountingBadRequest() *RequestLineOfAccountingBadRequest {

	return &RequestLineOfAccountingBadRequest{}
}

// WithPayload adds the payload to the request line of accounting bad request response
func (o *RequestLineOfAccountingBadRequest) WithPayload(payload *ghcmessages.Error) *RequestLineOfAccountingBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request line of accounting bad request response
func (o *RequestLineOfAccountingBadRequest) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestLineOfAccountingBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestLineOfAccountingUnauthorizedCode is the HTTP code returned for type RequestLineOfAccountingUnauthorized
const RequestLineOfAccountingUnauthorizedCode int = 401

/*
RequestLineOfAccountingUnauthorized The request was denied

swagger:response requestLineOfAccountingUnauthorized
*/
type RequestLineOfAccountingUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestLineOfAccountingUnauthorized creates RequestLineOfAccountingUnauthorized with default headers values
func NewRequestLineOfAccountingUnauthorized() *RequestLineOfAccountingUnauthorized {

	return &RequestLineOfAccountingUnauthorized{}
}

// WithPayload adds the payload to the request line of accounting unauthorized response
func (o *RequestLineOfAccountingUnauthorized) WithPayload(payload *ghcmessages.Error) *RequestLineOfAccountingUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request line of accounting unauthorized response
func (o *RequestLineOfAccountingUnauthorized) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestLineOfAccountingUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestLineOfAccountingForbiddenCode is the HTTP code returned for type RequestLineOfAccountingForbidden
const RequestLineOfAccountingForbiddenCode int = 403

/*
RequestLineOfAccountingForbidden The request was denied

swagger:response requestLineOfAccountingForbidden
*/
type RequestLineOfAccountingForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestLineOfAccountingForbidden creates RequestLineOfAccountingForbidden with default headers values
func NewRequestLineOfAccountingForbidden() *RequestLineOfAccountingForbidden {

	return &RequestLineOfAccountingForbidden{}
}

// WithPayload adds the payload to the request line of accounting forbidden response
func (o *RequestLineOfAccountingForbidden) WithPayload(payload *ghcmessages.Error) *RequestLineOfAccountingForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request line of accounting forbidden response
func (o *RequestLineOfAccountingForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestLineOfAccountingForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestLineOfAccountingNotFoundCode is the HTTP code returned for type RequestLineOfAccountingNotFound
const RequestLineOfAccountingNotFoundCode int = 404

/*
RequestLineOfAccountingNotFound The requested resource wasn't found

swagger:response requestLineOfAccountingNotFound
*/
type RequestLineOfAccountingNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestLineOfAccountingNotFound creates RequestLineOfAccountingNotFound with default headers values
func NewRequestLineOfAccountingNotFound() *RequestLineOfAccountingNotFound {

	return &RequestLineOfAccountingNotFound{}
}

// WithPayload adds the payload to the request line of accounting not found response
func (o *RequestLineOfAccountingNotFound) WithPayload(payload *ghcmessages.Error) *RequestLineOfAccountingNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request line of accounting not found response
func (o *RequestLineOfAccountingNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestLineOfAccountingNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestLineOfAccountingUnprocessableEntityCode is the HTTP code returned for type RequestLineOfAccountingUnprocessableEntity
const RequestLineOfAccountingUnprocessableEntityCode int = 422

/*
RequestLineOfAccountingUnprocessableEntity The payload was unprocessable.

swagger:response requestLineOfAccountingUnprocessableEntity
*/
type RequestLineOfAccountingUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewRequestLineOfAccountingUnprocessableEntity creates RequestLineOfAccountingUnprocessableEntity with default headers values
func NewRequestLineOfAccountingUnprocessableEntity() *RequestLineOfAccountingUnprocessableEntity {

	return &RequestLineOfAccountingUnprocessableEntity{}
}

// WithPayload adds the payload to the request line of accounting unprocessable entity response
func (o *RequestLineOfAccountingUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *RequestLineOfAccountingUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request line of accounting unprocessable entity response
func (o *RequestLineOfAccountingUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestLineOfAccountingUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestLineOfAccountingInternalServerErrorCode is the HTTP code returned for type RequestLineOfAccountingInternalServerError
const RequestLineOfAccountingInternalServerErrorCode int = 500

/*
RequestLineOfAccountingInternalServerError A server error occurred

swagger:response requestLineOfAccountingInternalServerError
*/
type RequestLineOfAccountingInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestLineOfAccountingInternalServerError creates RequestLineOfAccountingInternalServerError with default headers values
func NewRequestLineOfAccountingInternalServerError() *RequestLineOfAccountingInternalServerError {

	return &RequestLineOfAccountingInternalServerError{}
}

// WithPayload adds the payload to the request line of accounting internal server error response
func (o *RequestLineOfAccountingInternalServerError) WithPayload(payload *ghcmessages.Error) *RequestLineOfAccountingInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request line of accounting internal server error response
func (o *RequestLineOfAccountingInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestLineOfAccountingInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
