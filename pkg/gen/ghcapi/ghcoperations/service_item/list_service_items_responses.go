// Code generated by go-swagger; DO NOT EDIT.

package service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	ghcmessages "github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// ListServiceItemsOKCode is the HTTP code returned for type ListServiceItemsOK
const ListServiceItemsOKCode int = 200

/*ListServiceItemsOK Successfully retrieved all service items for a move task order

swagger:response listServiceItemsOK
*/
type ListServiceItemsOK struct {

	/*
	  In: Body
	*/
	Payload ghcmessages.ServiceItems `json:"body,omitempty"`
}

// NewListServiceItemsOK creates ListServiceItemsOK with default headers values
func NewListServiceItemsOK() *ListServiceItemsOK {

	return &ListServiceItemsOK{}
}

// WithPayload adds the payload to the list service items o k response
func (o *ListServiceItemsOK) WithPayload(payload ghcmessages.ServiceItems) *ListServiceItemsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service items o k response
func (o *ListServiceItemsOK) SetPayload(payload ghcmessages.ServiceItems) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceItemsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = ghcmessages.ServiceItems{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListServiceItemsBadRequestCode is the HTTP code returned for type ListServiceItemsBadRequest
const ListServiceItemsBadRequestCode int = 400

/*ListServiceItemsBadRequest The request payload is invalid

swagger:response listServiceItemsBadRequest
*/
type ListServiceItemsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.InvalidRequest `json:"body,omitempty"`
}

// NewListServiceItemsBadRequest creates ListServiceItemsBadRequest with default headers values
func NewListServiceItemsBadRequest() *ListServiceItemsBadRequest {

	return &ListServiceItemsBadRequest{}
}

// WithPayload adds the payload to the list service items bad request response
func (o *ListServiceItemsBadRequest) WithPayload(payload *ghcmessages.InvalidRequest) *ListServiceItemsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service items bad request response
func (o *ListServiceItemsBadRequest) SetPayload(payload *ghcmessages.InvalidRequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceItemsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListServiceItemsUnauthorizedCode is the HTTP code returned for type ListServiceItemsUnauthorized
const ListServiceItemsUnauthorizedCode int = 401

/*ListServiceItemsUnauthorized The request was denied

swagger:response listServiceItemsUnauthorized
*/
type ListServiceItemsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.PermissionDenied `json:"body,omitempty"`
}

// NewListServiceItemsUnauthorized creates ListServiceItemsUnauthorized with default headers values
func NewListServiceItemsUnauthorized() *ListServiceItemsUnauthorized {

	return &ListServiceItemsUnauthorized{}
}

// WithPayload adds the payload to the list service items unauthorized response
func (o *ListServiceItemsUnauthorized) WithPayload(payload *ghcmessages.PermissionDenied) *ListServiceItemsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service items unauthorized response
func (o *ListServiceItemsUnauthorized) SetPayload(payload *ghcmessages.PermissionDenied) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceItemsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListServiceItemsForbiddenCode is the HTTP code returned for type ListServiceItemsForbidden
const ListServiceItemsForbiddenCode int = 403

/*ListServiceItemsForbidden The request was denied

swagger:response listServiceItemsForbidden
*/
type ListServiceItemsForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.PermissionDenied `json:"body,omitempty"`
}

// NewListServiceItemsForbidden creates ListServiceItemsForbidden with default headers values
func NewListServiceItemsForbidden() *ListServiceItemsForbidden {

	return &ListServiceItemsForbidden{}
}

// WithPayload adds the payload to the list service items forbidden response
func (o *ListServiceItemsForbidden) WithPayload(payload *ghcmessages.PermissionDenied) *ListServiceItemsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service items forbidden response
func (o *ListServiceItemsForbidden) SetPayload(payload *ghcmessages.PermissionDenied) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceItemsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListServiceItemsNotFoundCode is the HTTP code returned for type ListServiceItemsNotFound
const ListServiceItemsNotFoundCode int = 404

/*ListServiceItemsNotFound The requested resource wasn't found

swagger:response listServiceItemsNotFound
*/
type ListServiceItemsNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.NotFound `json:"body,omitempty"`
}

// NewListServiceItemsNotFound creates ListServiceItemsNotFound with default headers values
func NewListServiceItemsNotFound() *ListServiceItemsNotFound {

	return &ListServiceItemsNotFound{}
}

// WithPayload adds the payload to the list service items not found response
func (o *ListServiceItemsNotFound) WithPayload(payload *ghcmessages.NotFound) *ListServiceItemsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service items not found response
func (o *ListServiceItemsNotFound) SetPayload(payload *ghcmessages.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceItemsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListServiceItemsInternalServerErrorCode is the HTTP code returned for type ListServiceItemsInternalServerError
const ListServiceItemsInternalServerErrorCode int = 500

/*ListServiceItemsInternalServerError A server error occurred

swagger:response listServiceItemsInternalServerError
*/
type ListServiceItemsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ServerError `json:"body,omitempty"`
}

// NewListServiceItemsInternalServerError creates ListServiceItemsInternalServerError with default headers values
func NewListServiceItemsInternalServerError() *ListServiceItemsInternalServerError {

	return &ListServiceItemsInternalServerError{}
}

// WithPayload adds the payload to the list service items internal server error response
func (o *ListServiceItemsInternalServerError) WithPayload(payload *ghcmessages.ServerError) *ListServiceItemsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service items internal server error response
func (o *ListServiceItemsInternalServerError) SetPayload(payload *ghcmessages.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceItemsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
