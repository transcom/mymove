// Code generated by go-swagger; DO NOT EDIT.

package service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateServiceItemStatusHandlerFunc turns a function with the right signature into a update service item status handler
type UpdateServiceItemStatusHandlerFunc func(UpdateServiceItemStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateServiceItemStatusHandlerFunc) Handle(params UpdateServiceItemStatusParams) middleware.Responder {
	return fn(params)
}

// UpdateServiceItemStatusHandler interface for that can handle valid update service item status params
type UpdateServiceItemStatusHandler interface {
	Handle(UpdateServiceItemStatusParams) middleware.Responder
}

// NewUpdateServiceItemStatus creates a new http.Handler for the update service item status operation
func NewUpdateServiceItemStatus(ctx *middleware.Context, handler UpdateServiceItemStatusHandler) *UpdateServiceItemStatus {
	return &UpdateServiceItemStatus{Context: ctx, Handler: handler}
}

/*UpdateServiceItemStatus swagger:route PATCH /move-task-orders/{moveTaskOrderID}/service-items/{serviceItemID}/status serviceItem updateServiceItemStatus

Change the status of a line item for a move order by ID

Changes the status of a line item for a move order by ID

*/
type UpdateServiceItemStatus struct {
	Context *middleware.Context
	Handler UpdateServiceItemStatusHandler
}

func (o *UpdateServiceItemStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateServiceItemStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
