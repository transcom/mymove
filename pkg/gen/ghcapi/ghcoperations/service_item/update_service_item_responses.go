// Code generated by go-swagger; DO NOT EDIT.

package service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	ghcmessages "github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// UpdateServiceItemOKCode is the HTTP code returned for type UpdateServiceItemOK
const UpdateServiceItemOKCode int = 200

/*UpdateServiceItemOK Successfully updated move task order status

swagger:response updateServiceItemOK
*/
type UpdateServiceItemOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.MoveTaskOrder `json:"body,omitempty"`
}

// NewUpdateServiceItemOK creates UpdateServiceItemOK with default headers values
func NewUpdateServiceItemOK() *UpdateServiceItemOK {

	return &UpdateServiceItemOK{}
}

// WithPayload adds the payload to the update service item o k response
func (o *UpdateServiceItemOK) WithPayload(payload *ghcmessages.MoveTaskOrder) *UpdateServiceItemOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update service item o k response
func (o *UpdateServiceItemOK) SetPayload(payload *ghcmessages.MoveTaskOrder) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateServiceItemOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateServiceItemBadRequestCode is the HTTP code returned for type UpdateServiceItemBadRequest
const UpdateServiceItemBadRequestCode int = 400

/*UpdateServiceItemBadRequest The request payload is invalid

swagger:response updateServiceItemBadRequest
*/
type UpdateServiceItemBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.InvalidRequest `json:"body,omitempty"`
}

// NewUpdateServiceItemBadRequest creates UpdateServiceItemBadRequest with default headers values
func NewUpdateServiceItemBadRequest() *UpdateServiceItemBadRequest {

	return &UpdateServiceItemBadRequest{}
}

// WithPayload adds the payload to the update service item bad request response
func (o *UpdateServiceItemBadRequest) WithPayload(payload *ghcmessages.InvalidRequest) *UpdateServiceItemBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update service item bad request response
func (o *UpdateServiceItemBadRequest) SetPayload(payload *ghcmessages.InvalidRequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateServiceItemBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateServiceItemUnauthorizedCode is the HTTP code returned for type UpdateServiceItemUnauthorized
const UpdateServiceItemUnauthorizedCode int = 401

/*UpdateServiceItemUnauthorized The request was denied

swagger:response updateServiceItemUnauthorized
*/
type UpdateServiceItemUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.PermissionDenied `json:"body,omitempty"`
}

// NewUpdateServiceItemUnauthorized creates UpdateServiceItemUnauthorized with default headers values
func NewUpdateServiceItemUnauthorized() *UpdateServiceItemUnauthorized {

	return &UpdateServiceItemUnauthorized{}
}

// WithPayload adds the payload to the update service item unauthorized response
func (o *UpdateServiceItemUnauthorized) WithPayload(payload *ghcmessages.PermissionDenied) *UpdateServiceItemUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update service item unauthorized response
func (o *UpdateServiceItemUnauthorized) SetPayload(payload *ghcmessages.PermissionDenied) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateServiceItemUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateServiceItemForbiddenCode is the HTTP code returned for type UpdateServiceItemForbidden
const UpdateServiceItemForbiddenCode int = 403

/*UpdateServiceItemForbidden The request was denied

swagger:response updateServiceItemForbidden
*/
type UpdateServiceItemForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.PermissionDenied `json:"body,omitempty"`
}

// NewUpdateServiceItemForbidden creates UpdateServiceItemForbidden with default headers values
func NewUpdateServiceItemForbidden() *UpdateServiceItemForbidden {

	return &UpdateServiceItemForbidden{}
}

// WithPayload adds the payload to the update service item forbidden response
func (o *UpdateServiceItemForbidden) WithPayload(payload *ghcmessages.PermissionDenied) *UpdateServiceItemForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update service item forbidden response
func (o *UpdateServiceItemForbidden) SetPayload(payload *ghcmessages.PermissionDenied) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateServiceItemForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateServiceItemNotFoundCode is the HTTP code returned for type UpdateServiceItemNotFound
const UpdateServiceItemNotFoundCode int = 404

/*UpdateServiceItemNotFound The requested resource wasn't found

swagger:response updateServiceItemNotFound
*/
type UpdateServiceItemNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.NotFound `json:"body,omitempty"`
}

// NewUpdateServiceItemNotFound creates UpdateServiceItemNotFound with default headers values
func NewUpdateServiceItemNotFound() *UpdateServiceItemNotFound {

	return &UpdateServiceItemNotFound{}
}

// WithPayload adds the payload to the update service item not found response
func (o *UpdateServiceItemNotFound) WithPayload(payload *ghcmessages.NotFound) *UpdateServiceItemNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update service item not found response
func (o *UpdateServiceItemNotFound) SetPayload(payload *ghcmessages.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateServiceItemNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateServiceItemInternalServerErrorCode is the HTTP code returned for type UpdateServiceItemInternalServerError
const UpdateServiceItemInternalServerErrorCode int = 500

/*UpdateServiceItemInternalServerError A server error occurred

swagger:response updateServiceItemInternalServerError
*/
type UpdateServiceItemInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ServerError `json:"body,omitempty"`
}

// NewUpdateServiceItemInternalServerError creates UpdateServiceItemInternalServerError with default headers values
func NewUpdateServiceItemInternalServerError() *UpdateServiceItemInternalServerError {

	return &UpdateServiceItemInternalServerError{}
}

// WithPayload adds the payload to the update service item internal server error response
func (o *UpdateServiceItemInternalServerError) WithPayload(payload *ghcmessages.ServerError) *UpdateServiceItemInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update service item internal server error response
func (o *UpdateServiceItemInternalServerError) SetPayload(payload *ghcmessages.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateServiceItemInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
