// Code generated by go-swagger; DO NOT EDIT.

package service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	ghcmessages "github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// CreateServiceItemCreatedCode is the HTTP code returned for type CreateServiceItemCreated
const CreateServiceItemCreatedCode int = 201

/*CreateServiceItemCreated Successfully created service item for move task order

swagger:response createServiceItemCreated
*/
type CreateServiceItemCreated struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ServiceItem `json:"body,omitempty"`
}

// NewCreateServiceItemCreated creates CreateServiceItemCreated with default headers values
func NewCreateServiceItemCreated() *CreateServiceItemCreated {

	return &CreateServiceItemCreated{}
}

// WithPayload adds the payload to the create service item created response
func (o *CreateServiceItemCreated) WithPayload(payload *ghcmessages.ServiceItem) *CreateServiceItemCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service item created response
func (o *CreateServiceItemCreated) SetPayload(payload *ghcmessages.ServiceItem) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceItemCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateServiceItemBadRequestCode is the HTTP code returned for type CreateServiceItemBadRequest
const CreateServiceItemBadRequestCode int = 400

/*CreateServiceItemBadRequest The request payload is invalid

swagger:response createServiceItemBadRequest
*/
type CreateServiceItemBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.InvalidRequest `json:"body,omitempty"`
}

// NewCreateServiceItemBadRequest creates CreateServiceItemBadRequest with default headers values
func NewCreateServiceItemBadRequest() *CreateServiceItemBadRequest {

	return &CreateServiceItemBadRequest{}
}

// WithPayload adds the payload to the create service item bad request response
func (o *CreateServiceItemBadRequest) WithPayload(payload *ghcmessages.InvalidRequest) *CreateServiceItemBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service item bad request response
func (o *CreateServiceItemBadRequest) SetPayload(payload *ghcmessages.InvalidRequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceItemBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateServiceItemUnauthorizedCode is the HTTP code returned for type CreateServiceItemUnauthorized
const CreateServiceItemUnauthorizedCode int = 401

/*CreateServiceItemUnauthorized The request was denied

swagger:response createServiceItemUnauthorized
*/
type CreateServiceItemUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.PermissionDenied `json:"body,omitempty"`
}

// NewCreateServiceItemUnauthorized creates CreateServiceItemUnauthorized with default headers values
func NewCreateServiceItemUnauthorized() *CreateServiceItemUnauthorized {

	return &CreateServiceItemUnauthorized{}
}

// WithPayload adds the payload to the create service item unauthorized response
func (o *CreateServiceItemUnauthorized) WithPayload(payload *ghcmessages.PermissionDenied) *CreateServiceItemUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service item unauthorized response
func (o *CreateServiceItemUnauthorized) SetPayload(payload *ghcmessages.PermissionDenied) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceItemUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateServiceItemForbiddenCode is the HTTP code returned for type CreateServiceItemForbidden
const CreateServiceItemForbiddenCode int = 403

/*CreateServiceItemForbidden The request was denied

swagger:response createServiceItemForbidden
*/
type CreateServiceItemForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.PermissionDenied `json:"body,omitempty"`
}

// NewCreateServiceItemForbidden creates CreateServiceItemForbidden with default headers values
func NewCreateServiceItemForbidden() *CreateServiceItemForbidden {

	return &CreateServiceItemForbidden{}
}

// WithPayload adds the payload to the create service item forbidden response
func (o *CreateServiceItemForbidden) WithPayload(payload *ghcmessages.PermissionDenied) *CreateServiceItemForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service item forbidden response
func (o *CreateServiceItemForbidden) SetPayload(payload *ghcmessages.PermissionDenied) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceItemForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateServiceItemNotFoundCode is the HTTP code returned for type CreateServiceItemNotFound
const CreateServiceItemNotFoundCode int = 404

/*CreateServiceItemNotFound The requested resource wasn't found

swagger:response createServiceItemNotFound
*/
type CreateServiceItemNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.NotFound `json:"body,omitempty"`
}

// NewCreateServiceItemNotFound creates CreateServiceItemNotFound with default headers values
func NewCreateServiceItemNotFound() *CreateServiceItemNotFound {

	return &CreateServiceItemNotFound{}
}

// WithPayload adds the payload to the create service item not found response
func (o *CreateServiceItemNotFound) WithPayload(payload *ghcmessages.NotFound) *CreateServiceItemNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service item not found response
func (o *CreateServiceItemNotFound) SetPayload(payload *ghcmessages.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceItemNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateServiceItemInternalServerErrorCode is the HTTP code returned for type CreateServiceItemInternalServerError
const CreateServiceItemInternalServerErrorCode int = 500

/*CreateServiceItemInternalServerError A server error occurred

swagger:response createServiceItemInternalServerError
*/
type CreateServiceItemInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ServerError `json:"body,omitempty"`
}

// NewCreateServiceItemInternalServerError creates CreateServiceItemInternalServerError with default headers values
func NewCreateServiceItemInternalServerError() *CreateServiceItemInternalServerError {

	return &CreateServiceItemInternalServerError{}
}

// WithPayload adds the payload to the create service item internal server error response
func (o *CreateServiceItemInternalServerError) WithPayload(payload *ghcmessages.ServerError) *CreateServiceItemInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service item internal server error response
func (o *CreateServiceItemInternalServerError) SetPayload(payload *ghcmessages.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceItemInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
