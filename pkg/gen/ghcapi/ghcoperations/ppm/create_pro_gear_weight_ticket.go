// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateProGearWeightTicketHandlerFunc turns a function with the right signature into a create pro gear weight ticket handler
type CreateProGearWeightTicketHandlerFunc func(CreateProGearWeightTicketParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateProGearWeightTicketHandlerFunc) Handle(params CreateProGearWeightTicketParams) middleware.Responder {
	return fn(params)
}

// CreateProGearWeightTicketHandler interface for that can handle valid create pro gear weight ticket params
type CreateProGearWeightTicketHandler interface {
	Handle(CreateProGearWeightTicketParams) middleware.Responder
}

// NewCreateProGearWeightTicket creates a new http.Handler for the create pro gear weight ticket operation
func NewCreateProGearWeightTicket(ctx *middleware.Context, handler CreateProGearWeightTicketHandler) *CreateProGearWeightTicket {
	return &CreateProGearWeightTicket{Context: ctx, Handler: handler}
}

/*
	CreateProGearWeightTicket swagger:route POST /ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets ppm createProGearWeightTicket

# Creates a pro-gear weight ticket

Creates a PPM shipment's pro-gear weight ticket. This will only contain the minimum necessary fields for a
pro-gear weight ticket. Data should be filled in using the patch endpoint.
*/
type CreateProGearWeightTicket struct {
	Context *middleware.Context
	Handler CreateProGearWeightTicketHandler
}

func (o *CreateProGearWeightTicket) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateProGearWeightTicketParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
