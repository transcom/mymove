// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FetchCloseoutCalculationsHandlerFunc turns a function with the right signature into a fetch closeout calculations handler
type FetchCloseoutCalculationsHandlerFunc func(FetchCloseoutCalculationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FetchCloseoutCalculationsHandlerFunc) Handle(params FetchCloseoutCalculationsParams) middleware.Responder {
	return fn(params)
}

// FetchCloseoutCalculationsHandler interface for that can handle valid fetch closeout calculations params
type FetchCloseoutCalculationsHandler interface {
	Handle(FetchCloseoutCalculationsParams) middleware.Responder
}

// NewFetchCloseoutCalculations creates a new http.Handler for the fetch closeout calculations operation
func NewFetchCloseoutCalculations(ctx *middleware.Context, handler FetchCloseoutCalculationsHandler) *FetchCloseoutCalculations {
	return &FetchCloseoutCalculations{Context: ctx, Handler: handler}
}

/*
	FetchCloseoutCalculations swagger:route GET /ppm-shipments/closeout ppm fetchCloseoutCalculations

Fetch PPM closeout calculations.

Fetches a list of all expense/reimbursement calculations needed in the "Review Documents" section of a PPM closeout shipment.
*/
type FetchCloseoutCalculations struct {
	Context *middleware.Context
	Handler FetchCloseoutCalculationsHandler
}

func (o *FetchCloseoutCalculations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFetchCloseoutCalculationsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
