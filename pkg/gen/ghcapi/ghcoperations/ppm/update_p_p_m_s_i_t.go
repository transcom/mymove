// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdatePPMSITHandlerFunc turns a function with the right signature into a update p p m s i t handler
type UpdatePPMSITHandlerFunc func(UpdatePPMSITParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdatePPMSITHandlerFunc) Handle(params UpdatePPMSITParams) middleware.Responder {
	return fn(params)
}

// UpdatePPMSITHandler interface for that can handle valid update p p m s i t params
type UpdatePPMSITHandler interface {
	Handle(UpdatePPMSITParams) middleware.Responder
}

// NewUpdatePPMSIT creates a new http.Handler for the update p p m s i t operation
func NewUpdatePPMSIT(ctx *middleware.Context, handler UpdatePPMSITHandler) *UpdatePPMSIT {
	return &UpdatePPMSIT{Context: ctx, Handler: handler}
}

/*
	UpdatePPMSIT swagger:route PATCH /ppm-shipments/{ppmShipmentId}/ppm-sit ppm updatePPMSIT

# Updates a PPM shipment's SIT values

Updates a PPM shipment's SIT values
*/
type UpdatePPMSIT struct {
	Context *middleware.Context
	Handler UpdatePPMSITHandler
}

func (o *UpdatePPMSIT) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdatePPMSITParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
