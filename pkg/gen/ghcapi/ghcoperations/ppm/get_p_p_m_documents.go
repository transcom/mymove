// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPPMDocumentsHandlerFunc turns a function with the right signature into a get p p m documents handler
type GetPPMDocumentsHandlerFunc func(GetPPMDocumentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPPMDocumentsHandlerFunc) Handle(params GetPPMDocumentsParams) middleware.Responder {
	return fn(params)
}

// GetPPMDocumentsHandler interface for that can handle valid get p p m documents params
type GetPPMDocumentsHandler interface {
	Handle(GetPPMDocumentsParams) middleware.Responder
}

// NewGetPPMDocuments creates a new http.Handler for the get p p m documents operation
func NewGetPPMDocuments(ctx *middleware.Context, handler GetPPMDocumentsHandler) *GetPPMDocuments {
	return &GetPPMDocuments{Context: ctx, Handler: handler}
}

/*
	GetPPMDocuments swagger:route GET /shipments/{shipmentID}/ppm-documents ppm getPPMDocuments

# Gets all the PPM documents for a PPM shipment

Retrieves all of the documents and associated uploads for each ppm document type connected to a PPM shipment. This
excludes any deleted PPM documents.
*/
type GetPPMDocuments struct {
	Context *middleware.Context
	Handler GetPPMDocumentsHandler
}

func (o *GetPPMDocuments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPPMDocumentsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
