// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateProGearWeightTicketHandlerFunc turns a function with the right signature into a update pro gear weight ticket handler
type UpdateProGearWeightTicketHandlerFunc func(UpdateProGearWeightTicketParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateProGearWeightTicketHandlerFunc) Handle(params UpdateProGearWeightTicketParams) middleware.Responder {
	return fn(params)
}

// UpdateProGearWeightTicketHandler interface for that can handle valid update pro gear weight ticket params
type UpdateProGearWeightTicketHandler interface {
	Handle(UpdateProGearWeightTicketParams) middleware.Responder
}

// NewUpdateProGearWeightTicket creates a new http.Handler for the update pro gear weight ticket operation
func NewUpdateProGearWeightTicket(ctx *middleware.Context, handler UpdateProGearWeightTicketHandler) *UpdateProGearWeightTicket {
	return &UpdateProGearWeightTicket{Context: ctx, Handler: handler}
}

/*
	UpdateProGearWeightTicket swagger:route PATCH /ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets/{proGearWeightTicketId} ppm updateProGearWeightTicket

# Updates a pro-gear weight ticket

Updates a PPM shipment's pro-gear weight ticket with new information. Only some of the fields are editable
because some have to be set by the customer, e.g. the description.
*/
type UpdateProGearWeightTicket struct {
	Context *middleware.Context
	Handler UpdateProGearWeightTicketHandler
}

func (o *UpdateProGearWeightTicket) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateProGearWeightTicketParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
