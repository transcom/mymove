// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateMovingExpenseHandlerFunc turns a function with the right signature into a create moving expense handler
type CreateMovingExpenseHandlerFunc func(CreateMovingExpenseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateMovingExpenseHandlerFunc) Handle(params CreateMovingExpenseParams) middleware.Responder {
	return fn(params)
}

// CreateMovingExpenseHandler interface for that can handle valid create moving expense params
type CreateMovingExpenseHandler interface {
	Handle(CreateMovingExpenseParams) middleware.Responder
}

// NewCreateMovingExpense creates a new http.Handler for the create moving expense operation
func NewCreateMovingExpense(ctx *middleware.Context, handler CreateMovingExpenseHandler) *CreateMovingExpense {
	return &CreateMovingExpense{Context: ctx, Handler: handler}
}

/*
	CreateMovingExpense swagger:route POST /ppm-shipments/{ppmShipmentId}/moving-expenses ppm createMovingExpense

# Creates moving expense document

Creates a moving expense document for the PPM shipment
*/
type CreateMovingExpense struct {
	Context *middleware.Context
	Handler CreateMovingExpenseHandler
}

func (o *CreateMovingExpense) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateMovingExpenseParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
