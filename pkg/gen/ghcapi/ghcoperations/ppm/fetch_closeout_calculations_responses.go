// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// FetchCloseoutCalculationsOKCode is the HTTP code returned for type FetchCloseoutCalculationsOK
const FetchCloseoutCalculationsOKCode int = 200

/*
FetchCloseoutCalculationsOK Successfully retrieved all PPM closeout calculations.

swagger:response fetchCloseoutCalculationsOK
*/
type FetchCloseoutCalculationsOK struct {

	/*
	  In: Body
	*/
	Payload ghcmessages.MTOAgents `json:"body,omitempty"`
}

// NewFetchCloseoutCalculationsOK creates FetchCloseoutCalculationsOK with default headers values
func NewFetchCloseoutCalculationsOK() *FetchCloseoutCalculationsOK {

	return &FetchCloseoutCalculationsOK{}
}

// WithPayload adds the payload to the fetch closeout calculations o k response
func (o *FetchCloseoutCalculationsOK) WithPayload(payload ghcmessages.MTOAgents) *FetchCloseoutCalculationsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the fetch closeout calculations o k response
func (o *FetchCloseoutCalculationsOK) SetPayload(payload ghcmessages.MTOAgents) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FetchCloseoutCalculationsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = ghcmessages.MTOAgents{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// FetchCloseoutCalculationsNotFoundCode is the HTTP code returned for type FetchCloseoutCalculationsNotFound
const FetchCloseoutCalculationsNotFoundCode int = 404

/*
FetchCloseoutCalculationsNotFound The requested resource wasn't found

swagger:response fetchCloseoutCalculationsNotFound
*/
type FetchCloseoutCalculationsNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewFetchCloseoutCalculationsNotFound creates FetchCloseoutCalculationsNotFound with default headers values
func NewFetchCloseoutCalculationsNotFound() *FetchCloseoutCalculationsNotFound {

	return &FetchCloseoutCalculationsNotFound{}
}

// WithPayload adds the payload to the fetch closeout calculations not found response
func (o *FetchCloseoutCalculationsNotFound) WithPayload(payload *ghcmessages.Error) *FetchCloseoutCalculationsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the fetch closeout calculations not found response
func (o *FetchCloseoutCalculationsNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FetchCloseoutCalculationsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// FetchCloseoutCalculationsUnprocessableEntityCode is the HTTP code returned for type FetchCloseoutCalculationsUnprocessableEntity
const FetchCloseoutCalculationsUnprocessableEntityCode int = 422

/*
FetchCloseoutCalculationsUnprocessableEntity The payload was unprocessable.

swagger:response fetchCloseoutCalculationsUnprocessableEntity
*/
type FetchCloseoutCalculationsUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewFetchCloseoutCalculationsUnprocessableEntity creates FetchCloseoutCalculationsUnprocessableEntity with default headers values
func NewFetchCloseoutCalculationsUnprocessableEntity() *FetchCloseoutCalculationsUnprocessableEntity {

	return &FetchCloseoutCalculationsUnprocessableEntity{}
}

// WithPayload adds the payload to the fetch closeout calculations unprocessable entity response
func (o *FetchCloseoutCalculationsUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *FetchCloseoutCalculationsUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the fetch closeout calculations unprocessable entity response
func (o *FetchCloseoutCalculationsUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FetchCloseoutCalculationsUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// FetchCloseoutCalculationsInternalServerErrorCode is the HTTP code returned for type FetchCloseoutCalculationsInternalServerError
const FetchCloseoutCalculationsInternalServerErrorCode int = 500

/*
FetchCloseoutCalculationsInternalServerError A server error occurred

swagger:response fetchCloseoutCalculationsInternalServerError
*/
type FetchCloseoutCalculationsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewFetchCloseoutCalculationsInternalServerError creates FetchCloseoutCalculationsInternalServerError with default headers values
func NewFetchCloseoutCalculationsInternalServerError() *FetchCloseoutCalculationsInternalServerError {

	return &FetchCloseoutCalculationsInternalServerError{}
}

// WithPayload adds the payload to the fetch closeout calculations internal server error response
func (o *FetchCloseoutCalculationsInternalServerError) WithPayload(payload *ghcmessages.Error) *FetchCloseoutCalculationsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the fetch closeout calculations internal server error response
func (o *FetchCloseoutCalculationsInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FetchCloseoutCalculationsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
