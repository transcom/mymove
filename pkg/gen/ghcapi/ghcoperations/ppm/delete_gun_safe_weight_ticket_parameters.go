// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewDeleteGunSafeWeightTicketParams creates a new DeleteGunSafeWeightTicketParams object
//
// There are no default values defined in the spec.
func NewDeleteGunSafeWeightTicketParams() DeleteGunSafeWeightTicketParams {

	return DeleteGunSafeWeightTicketParams{}
}

// DeleteGunSafeWeightTicketParams contains all the bound params for the delete gun safe weight ticket operation
// typically these are obtained from a http.Request
//
// swagger:parameters deleteGunSafeWeightTicket
type DeleteGunSafeWeightTicketParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*ID of the gun safe weight ticket to be deleted
	  Required: true
	  In: path
	*/
	GunSafeWeightTicketID strfmt.UUID
	/*UUID of the PPM shipment
	  Required: true
	  In: path
	*/
	PpmShipmentID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteGunSafeWeightTicketParams() beforehand.
func (o *DeleteGunSafeWeightTicketParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rGunSafeWeightTicketID, rhkGunSafeWeightTicketID, _ := route.Params.GetOK("gunSafeWeightTicketId")
	if err := o.bindGunSafeWeightTicketID(rGunSafeWeightTicketID, rhkGunSafeWeightTicketID, route.Formats); err != nil {
		res = append(res, err)
	}

	rPpmShipmentID, rhkPpmShipmentID, _ := route.Params.GetOK("ppmShipmentId")
	if err := o.bindPpmShipmentID(rPpmShipmentID, rhkPpmShipmentID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindGunSafeWeightTicketID binds and validates parameter GunSafeWeightTicketID from path.
func (o *DeleteGunSafeWeightTicketParams) bindGunSafeWeightTicketID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("gunSafeWeightTicketId", "path", "strfmt.UUID", raw)
	}
	o.GunSafeWeightTicketID = *(value.(*strfmt.UUID))

	if err := o.validateGunSafeWeightTicketID(formats); err != nil {
		return err
	}

	return nil
}

// validateGunSafeWeightTicketID carries on validations for parameter GunSafeWeightTicketID
func (o *DeleteGunSafeWeightTicketParams) validateGunSafeWeightTicketID(formats strfmt.Registry) error {

	if err := validate.FormatOf("gunSafeWeightTicketId", "path", "uuid", o.GunSafeWeightTicketID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindPpmShipmentID binds and validates parameter PpmShipmentID from path.
func (o *DeleteGunSafeWeightTicketParams) bindPpmShipmentID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("ppmShipmentId", "path", "strfmt.UUID", raw)
	}
	o.PpmShipmentID = *(value.(*strfmt.UUID))

	if err := o.validatePpmShipmentID(formats); err != nil {
		return err
	}

	return nil
}

// validatePpmShipmentID carries on validations for parameter PpmShipmentID
func (o *DeleteGunSafeWeightTicketParams) validatePpmShipmentID(formats strfmt.Registry) error {

	if err := validate.FormatOf("ppmShipmentId", "path", "uuid", o.PpmShipmentID.String(), formats); err != nil {
		return err
	}
	return nil
}
