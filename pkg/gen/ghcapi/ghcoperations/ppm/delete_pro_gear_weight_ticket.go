// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteProGearWeightTicketHandlerFunc turns a function with the right signature into a delete pro gear weight ticket handler
type DeleteProGearWeightTicketHandlerFunc func(DeleteProGearWeightTicketParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteProGearWeightTicketHandlerFunc) Handle(params DeleteProGearWeightTicketParams) middleware.Responder {
	return fn(params)
}

// DeleteProGearWeightTicketHandler interface for that can handle valid delete pro gear weight ticket params
type DeleteProGearWeightTicketHandler interface {
	Handle(DeleteProGearWeightTicketParams) middleware.Responder
}

// NewDeleteProGearWeightTicket creates a new http.Handler for the delete pro gear weight ticket operation
func NewDeleteProGearWeightTicket(ctx *middleware.Context, handler DeleteProGearWeightTicketHandler) *DeleteProGearWeightTicket {
	return &DeleteProGearWeightTicket{Context: ctx, Handler: handler}
}

/*
	DeleteProGearWeightTicket swagger:route DELETE /ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets/{proGearWeightTicketId} ppm deleteProGearWeightTicket

# Soft deletes a pro-gear weight line item by ID

Removes a single pro-gear weight ticket set from the closeout line items for a PPM shipment. Soft deleted
records are not visible in milmove, but are kept in the database.
*/
type DeleteProGearWeightTicket struct {
	Context *middleware.Context
	Handler DeleteProGearWeightTicketHandler
}

func (o *DeleteProGearWeightTicket) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteProGearWeightTicketParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
