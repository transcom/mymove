// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SendPPMToCustomerHandlerFunc turns a function with the right signature into a send p p m to customer handler
type SendPPMToCustomerHandlerFunc func(SendPPMToCustomerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SendPPMToCustomerHandlerFunc) Handle(params SendPPMToCustomerParams) middleware.Responder {
	return fn(params)
}

// SendPPMToCustomerHandler interface for that can handle valid send p p m to customer params
type SendPPMToCustomerHandler interface {
	Handle(SendPPMToCustomerParams) middleware.Responder
}

// NewSendPPMToCustomer creates a new http.Handler for the send p p m to customer operation
func NewSendPPMToCustomer(ctx *middleware.Context, handler SendPPMToCustomerHandler) *SendPPMToCustomer {
	return &SendPPMToCustomer{Context: ctx, Handler: handler}
}

/*
	SendPPMToCustomer swagger:route PATCH /ppm-shipments/{ppmShipmentId}/send-to-customer ppm sendPPMToCustomer

# Updates a PPM shipment's status after a Service Counselor sends it to customer for moving

Updates a PPM shipment's status once a Service Counselor has reviewed the submitted PPM. Status is updated to waiting on customer so the customer may move the shipment.
*/
type SendPPMToCustomer struct {
	Context *middleware.Context
	Handler SendPPMToCustomerHandler
}

func (o *SendPPMToCustomer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSendPPMToCustomerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
