// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// SendPPMToCustomerOKCode is the HTTP code returned for type SendPPMToCustomerOK
const SendPPMToCustomerOKCode int = 200

/*
SendPPMToCustomerOK Successfully sent PPM to customer

swagger:response sendPPMToCustomerOK
*/
type SendPPMToCustomerOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.PPMShipment `json:"body,omitempty"`
}

// NewSendPPMToCustomerOK creates SendPPMToCustomerOK with default headers values
func NewSendPPMToCustomerOK() *SendPPMToCustomerOK {

	return &SendPPMToCustomerOK{}
}

// WithPayload adds the payload to the send p p m to customer o k response
func (o *SendPPMToCustomerOK) WithPayload(payload *ghcmessages.PPMShipment) *SendPPMToCustomerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send p p m to customer o k response
func (o *SendPPMToCustomerOK) SetPayload(payload *ghcmessages.PPMShipment) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendPPMToCustomerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SendPPMToCustomerBadRequestCode is the HTTP code returned for type SendPPMToCustomerBadRequest
const SendPPMToCustomerBadRequestCode int = 400

/*
SendPPMToCustomerBadRequest The request payload is invalid

swagger:response sendPPMToCustomerBadRequest
*/
type SendPPMToCustomerBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewSendPPMToCustomerBadRequest creates SendPPMToCustomerBadRequest with default headers values
func NewSendPPMToCustomerBadRequest() *SendPPMToCustomerBadRequest {

	return &SendPPMToCustomerBadRequest{}
}

// WithPayload adds the payload to the send p p m to customer bad request response
func (o *SendPPMToCustomerBadRequest) WithPayload(payload *ghcmessages.Error) *SendPPMToCustomerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send p p m to customer bad request response
func (o *SendPPMToCustomerBadRequest) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendPPMToCustomerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SendPPMToCustomerUnauthorizedCode is the HTTP code returned for type SendPPMToCustomerUnauthorized
const SendPPMToCustomerUnauthorizedCode int = 401

/*
SendPPMToCustomerUnauthorized The request was denied

swagger:response sendPPMToCustomerUnauthorized
*/
type SendPPMToCustomerUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewSendPPMToCustomerUnauthorized creates SendPPMToCustomerUnauthorized with default headers values
func NewSendPPMToCustomerUnauthorized() *SendPPMToCustomerUnauthorized {

	return &SendPPMToCustomerUnauthorized{}
}

// WithPayload adds the payload to the send p p m to customer unauthorized response
func (o *SendPPMToCustomerUnauthorized) WithPayload(payload *ghcmessages.Error) *SendPPMToCustomerUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send p p m to customer unauthorized response
func (o *SendPPMToCustomerUnauthorized) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendPPMToCustomerUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SendPPMToCustomerForbiddenCode is the HTTP code returned for type SendPPMToCustomerForbidden
const SendPPMToCustomerForbiddenCode int = 403

/*
SendPPMToCustomerForbidden The request was denied

swagger:response sendPPMToCustomerForbidden
*/
type SendPPMToCustomerForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewSendPPMToCustomerForbidden creates SendPPMToCustomerForbidden with default headers values
func NewSendPPMToCustomerForbidden() *SendPPMToCustomerForbidden {

	return &SendPPMToCustomerForbidden{}
}

// WithPayload adds the payload to the send p p m to customer forbidden response
func (o *SendPPMToCustomerForbidden) WithPayload(payload *ghcmessages.Error) *SendPPMToCustomerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send p p m to customer forbidden response
func (o *SendPPMToCustomerForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendPPMToCustomerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SendPPMToCustomerNotFoundCode is the HTTP code returned for type SendPPMToCustomerNotFound
const SendPPMToCustomerNotFoundCode int = 404

/*
SendPPMToCustomerNotFound The requested resource wasn't found

swagger:response sendPPMToCustomerNotFound
*/
type SendPPMToCustomerNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewSendPPMToCustomerNotFound creates SendPPMToCustomerNotFound with default headers values
func NewSendPPMToCustomerNotFound() *SendPPMToCustomerNotFound {

	return &SendPPMToCustomerNotFound{}
}

// WithPayload adds the payload to the send p p m to customer not found response
func (o *SendPPMToCustomerNotFound) WithPayload(payload *ghcmessages.Error) *SendPPMToCustomerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send p p m to customer not found response
func (o *SendPPMToCustomerNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendPPMToCustomerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SendPPMToCustomerPreconditionFailedCode is the HTTP code returned for type SendPPMToCustomerPreconditionFailed
const SendPPMToCustomerPreconditionFailedCode int = 412

/*
SendPPMToCustomerPreconditionFailed Precondition failed

swagger:response sendPPMToCustomerPreconditionFailed
*/
type SendPPMToCustomerPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewSendPPMToCustomerPreconditionFailed creates SendPPMToCustomerPreconditionFailed with default headers values
func NewSendPPMToCustomerPreconditionFailed() *SendPPMToCustomerPreconditionFailed {

	return &SendPPMToCustomerPreconditionFailed{}
}

// WithPayload adds the payload to the send p p m to customer precondition failed response
func (o *SendPPMToCustomerPreconditionFailed) WithPayload(payload *ghcmessages.Error) *SendPPMToCustomerPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send p p m to customer precondition failed response
func (o *SendPPMToCustomerPreconditionFailed) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendPPMToCustomerPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SendPPMToCustomerUnprocessableEntityCode is the HTTP code returned for type SendPPMToCustomerUnprocessableEntity
const SendPPMToCustomerUnprocessableEntityCode int = 422

/*
SendPPMToCustomerUnprocessableEntity The payload was unprocessable.

swagger:response sendPPMToCustomerUnprocessableEntity
*/
type SendPPMToCustomerUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewSendPPMToCustomerUnprocessableEntity creates SendPPMToCustomerUnprocessableEntity with default headers values
func NewSendPPMToCustomerUnprocessableEntity() *SendPPMToCustomerUnprocessableEntity {

	return &SendPPMToCustomerUnprocessableEntity{}
}

// WithPayload adds the payload to the send p p m to customer unprocessable entity response
func (o *SendPPMToCustomerUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *SendPPMToCustomerUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send p p m to customer unprocessable entity response
func (o *SendPPMToCustomerUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendPPMToCustomerUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SendPPMToCustomerInternalServerErrorCode is the HTTP code returned for type SendPPMToCustomerInternalServerError
const SendPPMToCustomerInternalServerErrorCode int = 500

/*
SendPPMToCustomerInternalServerError A server error occurred

swagger:response sendPPMToCustomerInternalServerError
*/
type SendPPMToCustomerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewSendPPMToCustomerInternalServerError creates SendPPMToCustomerInternalServerError with default headers values
func NewSendPPMToCustomerInternalServerError() *SendPPMToCustomerInternalServerError {

	return &SendPPMToCustomerInternalServerError{}
}

// WithPayload adds the payload to the send p p m to customer internal server error response
func (o *SendPPMToCustomerInternalServerError) WithPayload(payload *ghcmessages.Error) *SendPPMToCustomerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send p p m to customer internal server error response
func (o *SendPPMToCustomerInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendPPMToCustomerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
