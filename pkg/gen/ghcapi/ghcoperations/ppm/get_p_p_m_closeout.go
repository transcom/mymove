// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPPMCloseoutHandlerFunc turns a function with the right signature into a get p p m closeout handler
type GetPPMCloseoutHandlerFunc func(GetPPMCloseoutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPPMCloseoutHandlerFunc) Handle(params GetPPMCloseoutParams) middleware.Responder {
	return fn(params)
}

// GetPPMCloseoutHandler interface for that can handle valid get p p m closeout params
type GetPPMCloseoutHandler interface {
	Handle(GetPPMCloseoutParams) middleware.Responder
}

// NewGetPPMCloseout creates a new http.Handler for the get p p m closeout operation
func NewGetPPMCloseout(ctx *middleware.Context, handler GetPPMCloseoutHandler) *GetPPMCloseout {
	return &GetPPMCloseout{Context: ctx, Handler: handler}
}

/*
	GetPPMCloseout swagger:route GET /ppm-shipments/{ppmShipmentId}/closeout ppm getPPMCloseout

# Get the closeout calcuations for the specified PPM shipment

Retrieves the closeout calculations for the specified PPM shipment.
*/
type GetPPMCloseout struct {
	Context *middleware.Context
	Handler GetPPMCloseoutHandler
}

func (o *GetPPMCloseout) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPPMCloseoutParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
