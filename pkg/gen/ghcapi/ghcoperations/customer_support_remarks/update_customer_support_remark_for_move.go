// Code generated by go-swagger; DO NOT EDIT.

package customer_support_remarks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateCustomerSupportRemarkForMoveHandlerFunc turns a function with the right signature into a update customer support remark for move handler
type UpdateCustomerSupportRemarkForMoveHandlerFunc func(UpdateCustomerSupportRemarkForMoveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateCustomerSupportRemarkForMoveHandlerFunc) Handle(params UpdateCustomerSupportRemarkForMoveParams) middleware.Responder {
	return fn(params)
}

// UpdateCustomerSupportRemarkForMoveHandler interface for that can handle valid update customer support remark for move params
type UpdateCustomerSupportRemarkForMoveHandler interface {
	Handle(UpdateCustomerSupportRemarkForMoveParams) middleware.Responder
}

// NewUpdateCustomerSupportRemarkForMove creates a new http.Handler for the update customer support remark for move operation
func NewUpdateCustomerSupportRemarkForMove(ctx *middleware.Context, handler UpdateCustomerSupportRemarkForMoveHandler) *UpdateCustomerSupportRemarkForMove {
	return &UpdateCustomerSupportRemarkForMove{Context: ctx, Handler: handler}
}

/*
	UpdateCustomerSupportRemarkForMove swagger:route PATCH /customer-support-remarks/{customerSupportRemarkID} customerSupportRemarks updateCustomerSupportRemarkForMove

# Updates a customer support remark for a move

Updates a customer support remark for a move
*/
type UpdateCustomerSupportRemarkForMove struct {
	Context *middleware.Context
	Handler UpdateCustomerSupportRemarkForMoveHandler
}

func (o *UpdateCustomerSupportRemarkForMove) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateCustomerSupportRemarkForMoveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
