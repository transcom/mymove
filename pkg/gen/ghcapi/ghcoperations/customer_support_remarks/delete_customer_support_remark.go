// Code generated by go-swagger; DO NOT EDIT.

package customer_support_remarks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteCustomerSupportRemarkHandlerFunc turns a function with the right signature into a delete customer support remark handler
type DeleteCustomerSupportRemarkHandlerFunc func(DeleteCustomerSupportRemarkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCustomerSupportRemarkHandlerFunc) Handle(params DeleteCustomerSupportRemarkParams) middleware.Responder {
	return fn(params)
}

// DeleteCustomerSupportRemarkHandler interface for that can handle valid delete customer support remark params
type DeleteCustomerSupportRemarkHandler interface {
	Handle(DeleteCustomerSupportRemarkParams) middleware.Responder
}

// NewDeleteCustomerSupportRemark creates a new http.Handler for the delete customer support remark operation
func NewDeleteCustomerSupportRemark(ctx *middleware.Context, handler DeleteCustomerSupportRemarkHandler) *DeleteCustomerSupportRemark {
	return &DeleteCustomerSupportRemark{Context: ctx, Handler: handler}
}

/*
	DeleteCustomerSupportRemark swagger:route DELETE /customer-support-remarks/{customerSupportRemarkID} customerSupportRemarks deleteCustomerSupportRemark

# Soft deletes a customer support remark by ID

Soft deletes a customer support remark by ID
*/
type DeleteCustomerSupportRemark struct {
	Context *middleware.Context
	Handler DeleteCustomerSupportRemarkHandler
}

func (o *DeleteCustomerSupportRemark) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteCustomerSupportRemarkParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
