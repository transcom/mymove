// Code generated by go-swagger; DO NOT EDIT.

package customer_support_remarks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateCustomerSupportRemarkForMoveHandlerFunc turns a function with the right signature into a create customer support remark for move handler
type CreateCustomerSupportRemarkForMoveHandlerFunc func(CreateCustomerSupportRemarkForMoveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCustomerSupportRemarkForMoveHandlerFunc) Handle(params CreateCustomerSupportRemarkForMoveParams) middleware.Responder {
	return fn(params)
}

// CreateCustomerSupportRemarkForMoveHandler interface for that can handle valid create customer support remark for move params
type CreateCustomerSupportRemarkForMoveHandler interface {
	Handle(CreateCustomerSupportRemarkForMoveParams) middleware.Responder
}

// NewCreateCustomerSupportRemarkForMove creates a new http.Handler for the create customer support remark for move operation
func NewCreateCustomerSupportRemarkForMove(ctx *middleware.Context, handler CreateCustomerSupportRemarkForMoveHandler) *CreateCustomerSupportRemarkForMove {
	return &CreateCustomerSupportRemarkForMove{Context: ctx, Handler: handler}
}

/*
	CreateCustomerSupportRemarkForMove swagger:route POST /moves/{locator}/customer-support-remarks customerSupportRemarks createCustomerSupportRemarkForMove

# Creates a customer support remark for a move

Creates a customer support remark for a move
*/
type CreateCustomerSupportRemarkForMove struct {
	Context *middleware.Context
	Handler CreateCustomerSupportRemarkForMoveHandler
}

func (o *CreateCustomerSupportRemarkForMove) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateCustomerSupportRemarkForMoveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
