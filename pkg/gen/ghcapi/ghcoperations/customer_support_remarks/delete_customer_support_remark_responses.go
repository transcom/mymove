// Code generated by go-swagger; DO NOT EDIT.

package customer_support_remarks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// DeleteCustomerSupportRemarkNoContentCode is the HTTP code returned for type DeleteCustomerSupportRemarkNoContent
const DeleteCustomerSupportRemarkNoContentCode int = 204

/*
DeleteCustomerSupportRemarkNoContent Successfully soft deleted the shipment

swagger:response deleteCustomerSupportRemarkNoContent
*/
type DeleteCustomerSupportRemarkNoContent struct {
}

// NewDeleteCustomerSupportRemarkNoContent creates DeleteCustomerSupportRemarkNoContent with default headers values
func NewDeleteCustomerSupportRemarkNoContent() *DeleteCustomerSupportRemarkNoContent {

	return &DeleteCustomerSupportRemarkNoContent{}
}

// WriteResponse to the client
func (o *DeleteCustomerSupportRemarkNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteCustomerSupportRemarkBadRequestCode is the HTTP code returned for type DeleteCustomerSupportRemarkBadRequest
const DeleteCustomerSupportRemarkBadRequestCode int = 400

/*
DeleteCustomerSupportRemarkBadRequest The request payload is invalid

swagger:response deleteCustomerSupportRemarkBadRequest
*/
type DeleteCustomerSupportRemarkBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewDeleteCustomerSupportRemarkBadRequest creates DeleteCustomerSupportRemarkBadRequest with default headers values
func NewDeleteCustomerSupportRemarkBadRequest() *DeleteCustomerSupportRemarkBadRequest {

	return &DeleteCustomerSupportRemarkBadRequest{}
}

// WithPayload adds the payload to the delete customer support remark bad request response
func (o *DeleteCustomerSupportRemarkBadRequest) WithPayload(payload *ghcmessages.Error) *DeleteCustomerSupportRemarkBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete customer support remark bad request response
func (o *DeleteCustomerSupportRemarkBadRequest) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCustomerSupportRemarkBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteCustomerSupportRemarkForbiddenCode is the HTTP code returned for type DeleteCustomerSupportRemarkForbidden
const DeleteCustomerSupportRemarkForbiddenCode int = 403

/*
DeleteCustomerSupportRemarkForbidden The request was denied

swagger:response deleteCustomerSupportRemarkForbidden
*/
type DeleteCustomerSupportRemarkForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewDeleteCustomerSupportRemarkForbidden creates DeleteCustomerSupportRemarkForbidden with default headers values
func NewDeleteCustomerSupportRemarkForbidden() *DeleteCustomerSupportRemarkForbidden {

	return &DeleteCustomerSupportRemarkForbidden{}
}

// WithPayload adds the payload to the delete customer support remark forbidden response
func (o *DeleteCustomerSupportRemarkForbidden) WithPayload(payload *ghcmessages.Error) *DeleteCustomerSupportRemarkForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete customer support remark forbidden response
func (o *DeleteCustomerSupportRemarkForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCustomerSupportRemarkForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteCustomerSupportRemarkNotFoundCode is the HTTP code returned for type DeleteCustomerSupportRemarkNotFound
const DeleteCustomerSupportRemarkNotFoundCode int = 404

/*
DeleteCustomerSupportRemarkNotFound The requested resource wasn't found

swagger:response deleteCustomerSupportRemarkNotFound
*/
type DeleteCustomerSupportRemarkNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewDeleteCustomerSupportRemarkNotFound creates DeleteCustomerSupportRemarkNotFound with default headers values
func NewDeleteCustomerSupportRemarkNotFound() *DeleteCustomerSupportRemarkNotFound {

	return &DeleteCustomerSupportRemarkNotFound{}
}

// WithPayload adds the payload to the delete customer support remark not found response
func (o *DeleteCustomerSupportRemarkNotFound) WithPayload(payload *ghcmessages.Error) *DeleteCustomerSupportRemarkNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete customer support remark not found response
func (o *DeleteCustomerSupportRemarkNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCustomerSupportRemarkNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteCustomerSupportRemarkConflictCode is the HTTP code returned for type DeleteCustomerSupportRemarkConflict
const DeleteCustomerSupportRemarkConflictCode int = 409

/*
DeleteCustomerSupportRemarkConflict Conflict error

swagger:response deleteCustomerSupportRemarkConflict
*/
type DeleteCustomerSupportRemarkConflict struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewDeleteCustomerSupportRemarkConflict creates DeleteCustomerSupportRemarkConflict with default headers values
func NewDeleteCustomerSupportRemarkConflict() *DeleteCustomerSupportRemarkConflict {

	return &DeleteCustomerSupportRemarkConflict{}
}

// WithPayload adds the payload to the delete customer support remark conflict response
func (o *DeleteCustomerSupportRemarkConflict) WithPayload(payload *ghcmessages.Error) *DeleteCustomerSupportRemarkConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete customer support remark conflict response
func (o *DeleteCustomerSupportRemarkConflict) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCustomerSupportRemarkConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteCustomerSupportRemarkUnprocessableEntityCode is the HTTP code returned for type DeleteCustomerSupportRemarkUnprocessableEntity
const DeleteCustomerSupportRemarkUnprocessableEntityCode int = 422

/*
DeleteCustomerSupportRemarkUnprocessableEntity The payload was unprocessable.

swagger:response deleteCustomerSupportRemarkUnprocessableEntity
*/
type DeleteCustomerSupportRemarkUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewDeleteCustomerSupportRemarkUnprocessableEntity creates DeleteCustomerSupportRemarkUnprocessableEntity with default headers values
func NewDeleteCustomerSupportRemarkUnprocessableEntity() *DeleteCustomerSupportRemarkUnprocessableEntity {

	return &DeleteCustomerSupportRemarkUnprocessableEntity{}
}

// WithPayload adds the payload to the delete customer support remark unprocessable entity response
func (o *DeleteCustomerSupportRemarkUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *DeleteCustomerSupportRemarkUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete customer support remark unprocessable entity response
func (o *DeleteCustomerSupportRemarkUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCustomerSupportRemarkUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteCustomerSupportRemarkInternalServerErrorCode is the HTTP code returned for type DeleteCustomerSupportRemarkInternalServerError
const DeleteCustomerSupportRemarkInternalServerErrorCode int = 500

/*
DeleteCustomerSupportRemarkInternalServerError A server error occurred

swagger:response deleteCustomerSupportRemarkInternalServerError
*/
type DeleteCustomerSupportRemarkInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewDeleteCustomerSupportRemarkInternalServerError creates DeleteCustomerSupportRemarkInternalServerError with default headers values
func NewDeleteCustomerSupportRemarkInternalServerError() *DeleteCustomerSupportRemarkInternalServerError {

	return &DeleteCustomerSupportRemarkInternalServerError{}
}

// WithPayload adds the payload to the delete customer support remark internal server error response
func (o *DeleteCustomerSupportRemarkInternalServerError) WithPayload(payload *ghcmessages.Error) *DeleteCustomerSupportRemarkInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete customer support remark internal server error response
func (o *DeleteCustomerSupportRemarkInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCustomerSupportRemarkInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
