// Code generated by go-swagger; DO NOT EDIT.

package customer_support_remarks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetCustomerSupportRemarksForMoveHandlerFunc turns a function with the right signature into a get customer support remarks for move handler
type GetCustomerSupportRemarksForMoveHandlerFunc func(GetCustomerSupportRemarksForMoveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCustomerSupportRemarksForMoveHandlerFunc) Handle(params GetCustomerSupportRemarksForMoveParams) middleware.Responder {
	return fn(params)
}

// GetCustomerSupportRemarksForMoveHandler interface for that can handle valid get customer support remarks for move params
type GetCustomerSupportRemarksForMoveHandler interface {
	Handle(GetCustomerSupportRemarksForMoveParams) middleware.Responder
}

// NewGetCustomerSupportRemarksForMove creates a new http.Handler for the get customer support remarks for move operation
func NewGetCustomerSupportRemarksForMove(ctx *middleware.Context, handler GetCustomerSupportRemarksForMoveHandler) *GetCustomerSupportRemarksForMove {
	return &GetCustomerSupportRemarksForMove{Context: ctx, Handler: handler}
}

/*
	GetCustomerSupportRemarksForMove swagger:route GET /moves/{locator}/customer-support-remarks customerSupportRemarks getCustomerSupportRemarksForMove

Fetches customer support remarks using the move code (locator).

Fetches customer support remarks for a move
*/
type GetCustomerSupportRemarksForMove struct {
	Context *middleware.Context
	Handler GetCustomerSupportRemarksForMoveHandler
}

func (o *GetCustomerSupportRemarksForMove) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCustomerSupportRemarksForMoveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
