// Code generated by go-swagger; DO NOT EDIT.

package re_service_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAllReServiceItemsHandlerFunc turns a function with the right signature into a get all re service items handler
type GetAllReServiceItemsHandlerFunc func(GetAllReServiceItemsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllReServiceItemsHandlerFunc) Handle(params GetAllReServiceItemsParams) middleware.Responder {
	return fn(params)
}

// GetAllReServiceItemsHandler interface for that can handle valid get all re service items params
type GetAllReServiceItemsHandler interface {
	Handle(GetAllReServiceItemsParams) middleware.Responder
}

// NewGetAllReServiceItems creates a new http.Handler for the get all re service items operation
func NewGetAllReServiceItems(ctx *middleware.Context, handler GetAllReServiceItemsHandler) *GetAllReServiceItems {
	return &GetAllReServiceItems{Context: ctx, Handler: handler}
}

/*
	GetAllReServiceItems swagger:route GET /re-service-items reServiceItems getAllReServiceItems

Returns all ReServiceItems (Service Code, Service Name, Market, Shipment Type, Auto Approved)

Get ReServiceItems
*/
type GetAllReServiceItems struct {
	Context *middleware.Context
	Handler GetAllReServiceItemsHandler
}

func (o *GetAllReServiceItems) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAllReServiceItemsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
