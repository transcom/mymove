// Code generated by go-swagger; DO NOT EDIT.

package transportation_office

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTransportationOfficesOpenHandlerFunc turns a function with the right signature into a get transportation offices open handler
type GetTransportationOfficesOpenHandlerFunc func(GetTransportationOfficesOpenParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTransportationOfficesOpenHandlerFunc) Handle(params GetTransportationOfficesOpenParams) middleware.Responder {
	return fn(params)
}

// GetTransportationOfficesOpenHandler interface for that can handle valid get transportation offices open params
type GetTransportationOfficesOpenHandler interface {
	Handle(GetTransportationOfficesOpenParams) middleware.Responder
}

// NewGetTransportationOfficesOpen creates a new http.Handler for the get transportation offices open operation
func NewGetTransportationOfficesOpen(ctx *middleware.Context, handler GetTransportationOfficesOpenHandler) *GetTransportationOfficesOpen {
	return &GetTransportationOfficesOpen{Context: ctx, Handler: handler}
}

/*
	GetTransportationOfficesOpen swagger:route GET /open/transportation-offices transportationOffice getTransportationOfficesOpen

# Returns the transportation offices matching the search query

This endpoint is publicly accessible as it is utilized to access transportation office information without having an office account.Returns the transportation offices matching the search query.
*/
type GetTransportationOfficesOpen struct {
	Context *middleware.Context
	Handler GetTransportationOfficesOpenHandler
}

func (o *GetTransportationOfficesOpen) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTransportationOfficesOpenParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
