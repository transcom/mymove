// Code generated by go-swagger; DO NOT EDIT.

package office_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateRequestedOfficeUserHandlerFunc turns a function with the right signature into a create requested office user handler
type CreateRequestedOfficeUserHandlerFunc func(CreateRequestedOfficeUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateRequestedOfficeUserHandlerFunc) Handle(params CreateRequestedOfficeUserParams) middleware.Responder {
	return fn(params)
}

// CreateRequestedOfficeUserHandler interface for that can handle valid create requested office user params
type CreateRequestedOfficeUserHandler interface {
	Handle(CreateRequestedOfficeUserParams) middleware.Responder
}

// NewCreateRequestedOfficeUser creates a new http.Handler for the create requested office user operation
func NewCreateRequestedOfficeUser(ctx *middleware.Context, handler CreateRequestedOfficeUserHandler) *CreateRequestedOfficeUser {
	return &CreateRequestedOfficeUser{Context: ctx, Handler: handler}
}

/*
	CreateRequestedOfficeUser swagger:route POST /open/requested-office-users officeUsers createRequestedOfficeUser

# Create an Office User

This endpoint is publicly accessible as it is utilized for individuals who do not have an office account to request the creation of an office account.
Request the creation of an office user. An administrator will need to approve them after creation. Note on requirements: An identification method must be present. The following 2 fields have an "OR" requirement. - edipi - other_unique_id One of these two fields MUST be present to serve as identification for the office user being created. This logic is handled at the application level.
*/
type CreateRequestedOfficeUser struct {
	Context *middleware.Context
	Handler CreateRequestedOfficeUserHandler
}

func (o *CreateRequestedOfficeUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateRequestedOfficeUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
