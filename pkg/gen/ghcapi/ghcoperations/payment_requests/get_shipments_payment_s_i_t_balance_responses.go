// Code generated by go-swagger; DO NOT EDIT.

package payment_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// GetShipmentsPaymentSITBalanceOKCode is the HTTP code returned for type GetShipmentsPaymentSITBalanceOK
const GetShipmentsPaymentSITBalanceOKCode int = 200

/*
GetShipmentsPaymentSITBalanceOK Successfully retrieved shipments and their SIT days balance from all payment requests on the move

swagger:response getShipmentsPaymentSITBalanceOK
*/
type GetShipmentsPaymentSITBalanceOK struct {

	/*
	  In: Body
	*/
	Payload ghcmessages.ShipmentsPaymentSITBalance `json:"body,omitempty"`
}

// NewGetShipmentsPaymentSITBalanceOK creates GetShipmentsPaymentSITBalanceOK with default headers values
func NewGetShipmentsPaymentSITBalanceOK() *GetShipmentsPaymentSITBalanceOK {

	return &GetShipmentsPaymentSITBalanceOK{}
}

// WithPayload adds the payload to the get shipments payment s i t balance o k response
func (o *GetShipmentsPaymentSITBalanceOK) WithPayload(payload ghcmessages.ShipmentsPaymentSITBalance) *GetShipmentsPaymentSITBalanceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shipments payment s i t balance o k response
func (o *GetShipmentsPaymentSITBalanceOK) SetPayload(payload ghcmessages.ShipmentsPaymentSITBalance) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShipmentsPaymentSITBalanceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = ghcmessages.ShipmentsPaymentSITBalance{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetShipmentsPaymentSITBalanceForbiddenCode is the HTTP code returned for type GetShipmentsPaymentSITBalanceForbidden
const GetShipmentsPaymentSITBalanceForbiddenCode int = 403

/*
GetShipmentsPaymentSITBalanceForbidden The request was denied

swagger:response getShipmentsPaymentSITBalanceForbidden
*/
type GetShipmentsPaymentSITBalanceForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetShipmentsPaymentSITBalanceForbidden creates GetShipmentsPaymentSITBalanceForbidden with default headers values
func NewGetShipmentsPaymentSITBalanceForbidden() *GetShipmentsPaymentSITBalanceForbidden {

	return &GetShipmentsPaymentSITBalanceForbidden{}
}

// WithPayload adds the payload to the get shipments payment s i t balance forbidden response
func (o *GetShipmentsPaymentSITBalanceForbidden) WithPayload(payload *ghcmessages.Error) *GetShipmentsPaymentSITBalanceForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shipments payment s i t balance forbidden response
func (o *GetShipmentsPaymentSITBalanceForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShipmentsPaymentSITBalanceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetShipmentsPaymentSITBalanceNotFoundCode is the HTTP code returned for type GetShipmentsPaymentSITBalanceNotFound
const GetShipmentsPaymentSITBalanceNotFoundCode int = 404

/*
GetShipmentsPaymentSITBalanceNotFound The requested resource wasn't found

swagger:response getShipmentsPaymentSITBalanceNotFound
*/
type GetShipmentsPaymentSITBalanceNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetShipmentsPaymentSITBalanceNotFound creates GetShipmentsPaymentSITBalanceNotFound with default headers values
func NewGetShipmentsPaymentSITBalanceNotFound() *GetShipmentsPaymentSITBalanceNotFound {

	return &GetShipmentsPaymentSITBalanceNotFound{}
}

// WithPayload adds the payload to the get shipments payment s i t balance not found response
func (o *GetShipmentsPaymentSITBalanceNotFound) WithPayload(payload *ghcmessages.Error) *GetShipmentsPaymentSITBalanceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shipments payment s i t balance not found response
func (o *GetShipmentsPaymentSITBalanceNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShipmentsPaymentSITBalanceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetShipmentsPaymentSITBalanceUnprocessableEntityCode is the HTTP code returned for type GetShipmentsPaymentSITBalanceUnprocessableEntity
const GetShipmentsPaymentSITBalanceUnprocessableEntityCode int = 422

/*
GetShipmentsPaymentSITBalanceUnprocessableEntity The payload was unprocessable.

swagger:response getShipmentsPaymentSITBalanceUnprocessableEntity
*/
type GetShipmentsPaymentSITBalanceUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewGetShipmentsPaymentSITBalanceUnprocessableEntity creates GetShipmentsPaymentSITBalanceUnprocessableEntity with default headers values
func NewGetShipmentsPaymentSITBalanceUnprocessableEntity() *GetShipmentsPaymentSITBalanceUnprocessableEntity {

	return &GetShipmentsPaymentSITBalanceUnprocessableEntity{}
}

// WithPayload adds the payload to the get shipments payment s i t balance unprocessable entity response
func (o *GetShipmentsPaymentSITBalanceUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *GetShipmentsPaymentSITBalanceUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shipments payment s i t balance unprocessable entity response
func (o *GetShipmentsPaymentSITBalanceUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShipmentsPaymentSITBalanceUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetShipmentsPaymentSITBalanceInternalServerErrorCode is the HTTP code returned for type GetShipmentsPaymentSITBalanceInternalServerError
const GetShipmentsPaymentSITBalanceInternalServerErrorCode int = 500

/*
GetShipmentsPaymentSITBalanceInternalServerError A server error occurred

swagger:response getShipmentsPaymentSITBalanceInternalServerError
*/
type GetShipmentsPaymentSITBalanceInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetShipmentsPaymentSITBalanceInternalServerError creates GetShipmentsPaymentSITBalanceInternalServerError with default headers values
func NewGetShipmentsPaymentSITBalanceInternalServerError() *GetShipmentsPaymentSITBalanceInternalServerError {

	return &GetShipmentsPaymentSITBalanceInternalServerError{}
}

// WithPayload adds the payload to the get shipments payment s i t balance internal server error response
func (o *GetShipmentsPaymentSITBalanceInternalServerError) WithPayload(payload *ghcmessages.Error) *GetShipmentsPaymentSITBalanceInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shipments payment s i t balance internal server error response
func (o *GetShipmentsPaymentSITBalanceInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShipmentsPaymentSITBalanceInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
