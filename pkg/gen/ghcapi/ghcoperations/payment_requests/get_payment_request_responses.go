// Code generated by go-swagger; DO NOT EDIT.

package payment_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// GetPaymentRequestOKCode is the HTTP code returned for type GetPaymentRequestOK
const GetPaymentRequestOKCode int = 200

/*
GetPaymentRequestOK fetched instance of payment request

swagger:response getPaymentRequestOK
*/
type GetPaymentRequestOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.PaymentRequest `json:"body,omitempty"`
}

// NewGetPaymentRequestOK creates GetPaymentRequestOK with default headers values
func NewGetPaymentRequestOK() *GetPaymentRequestOK {

	return &GetPaymentRequestOK{}
}

// WithPayload adds the payload to the get payment request o k response
func (o *GetPaymentRequestOK) WithPayload(payload *ghcmessages.PaymentRequest) *GetPaymentRequestOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get payment request o k response
func (o *GetPaymentRequestOK) SetPayload(payload *ghcmessages.PaymentRequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPaymentRequestOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPaymentRequestBadRequestCode is the HTTP code returned for type GetPaymentRequestBadRequest
const GetPaymentRequestBadRequestCode int = 400

/*
GetPaymentRequestBadRequest The request payload is invalid

swagger:response getPaymentRequestBadRequest
*/
type GetPaymentRequestBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetPaymentRequestBadRequest creates GetPaymentRequestBadRequest with default headers values
func NewGetPaymentRequestBadRequest() *GetPaymentRequestBadRequest {

	return &GetPaymentRequestBadRequest{}
}

// WithPayload adds the payload to the get payment request bad request response
func (o *GetPaymentRequestBadRequest) WithPayload(payload *ghcmessages.Error) *GetPaymentRequestBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get payment request bad request response
func (o *GetPaymentRequestBadRequest) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPaymentRequestBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPaymentRequestUnauthorizedCode is the HTTP code returned for type GetPaymentRequestUnauthorized
const GetPaymentRequestUnauthorizedCode int = 401

/*
GetPaymentRequestUnauthorized The request was denied

swagger:response getPaymentRequestUnauthorized
*/
type GetPaymentRequestUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetPaymentRequestUnauthorized creates GetPaymentRequestUnauthorized with default headers values
func NewGetPaymentRequestUnauthorized() *GetPaymentRequestUnauthorized {

	return &GetPaymentRequestUnauthorized{}
}

// WithPayload adds the payload to the get payment request unauthorized response
func (o *GetPaymentRequestUnauthorized) WithPayload(payload *ghcmessages.Error) *GetPaymentRequestUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get payment request unauthorized response
func (o *GetPaymentRequestUnauthorized) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPaymentRequestUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPaymentRequestForbiddenCode is the HTTP code returned for type GetPaymentRequestForbidden
const GetPaymentRequestForbiddenCode int = 403

/*
GetPaymentRequestForbidden The request was denied

swagger:response getPaymentRequestForbidden
*/
type GetPaymentRequestForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetPaymentRequestForbidden creates GetPaymentRequestForbidden with default headers values
func NewGetPaymentRequestForbidden() *GetPaymentRequestForbidden {

	return &GetPaymentRequestForbidden{}
}

// WithPayload adds the payload to the get payment request forbidden response
func (o *GetPaymentRequestForbidden) WithPayload(payload *ghcmessages.Error) *GetPaymentRequestForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get payment request forbidden response
func (o *GetPaymentRequestForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPaymentRequestForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPaymentRequestNotFoundCode is the HTTP code returned for type GetPaymentRequestNotFound
const GetPaymentRequestNotFoundCode int = 404

/*
GetPaymentRequestNotFound The requested resource wasn't found

swagger:response getPaymentRequestNotFound
*/
type GetPaymentRequestNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetPaymentRequestNotFound creates GetPaymentRequestNotFound with default headers values
func NewGetPaymentRequestNotFound() *GetPaymentRequestNotFound {

	return &GetPaymentRequestNotFound{}
}

// WithPayload adds the payload to the get payment request not found response
func (o *GetPaymentRequestNotFound) WithPayload(payload *ghcmessages.Error) *GetPaymentRequestNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get payment request not found response
func (o *GetPaymentRequestNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPaymentRequestNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPaymentRequestInternalServerErrorCode is the HTTP code returned for type GetPaymentRequestInternalServerError
const GetPaymentRequestInternalServerErrorCode int = 500

/*
GetPaymentRequestInternalServerError A server error occurred

swagger:response getPaymentRequestInternalServerError
*/
type GetPaymentRequestInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetPaymentRequestInternalServerError creates GetPaymentRequestInternalServerError with default headers values
func NewGetPaymentRequestInternalServerError() *GetPaymentRequestInternalServerError {

	return &GetPaymentRequestInternalServerError{}
}

// WithPayload adds the payload to the get payment request internal server error response
func (o *GetPaymentRequestInternalServerError) WithPayload(payload *ghcmessages.Error) *GetPaymentRequestInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get payment request internal server error response
func (o *GetPaymentRequestInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPaymentRequestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
