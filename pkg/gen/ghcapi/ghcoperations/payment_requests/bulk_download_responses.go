// Code generated by go-swagger; DO NOT EDIT.

package payment_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// BulkDownloadOKCode is the HTTP code returned for type BulkDownloadOK
const BulkDownloadOKCode int = 200

/*
BulkDownloadOK Payment Request Files PDF

swagger:response bulkDownloadOK
*/
type BulkDownloadOK struct {
	/*File name to download

	 */
	ContentDisposition string `json:"Content-Disposition"`

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewBulkDownloadOK creates BulkDownloadOK with default headers values
func NewBulkDownloadOK() *BulkDownloadOK {

	return &BulkDownloadOK{}
}

// WithContentDisposition adds the contentDisposition to the bulk download o k response
func (o *BulkDownloadOK) WithContentDisposition(contentDisposition string) *BulkDownloadOK {
	o.ContentDisposition = contentDisposition
	return o
}

// SetContentDisposition sets the contentDisposition to the bulk download o k response
func (o *BulkDownloadOK) SetContentDisposition(contentDisposition string) {
	o.ContentDisposition = contentDisposition
}

// WithPayload adds the payload to the bulk download o k response
func (o *BulkDownloadOK) WithPayload(payload io.ReadCloser) *BulkDownloadOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk download o k response
func (o *BulkDownloadOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkDownloadOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Disposition

	contentDisposition := o.ContentDisposition
	if contentDisposition != "" {
		rw.Header().Set("Content-Disposition", contentDisposition)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// BulkDownloadBadRequestCode is the HTTP code returned for type BulkDownloadBadRequest
const BulkDownloadBadRequestCode int = 400

/*
BulkDownloadBadRequest The request payload is invalid

swagger:response bulkDownloadBadRequest
*/
type BulkDownloadBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewBulkDownloadBadRequest creates BulkDownloadBadRequest with default headers values
func NewBulkDownloadBadRequest() *BulkDownloadBadRequest {

	return &BulkDownloadBadRequest{}
}

// WithPayload adds the payload to the bulk download bad request response
func (o *BulkDownloadBadRequest) WithPayload(payload *ghcmessages.Error) *BulkDownloadBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk download bad request response
func (o *BulkDownloadBadRequest) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkDownloadBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// BulkDownloadInternalServerErrorCode is the HTTP code returned for type BulkDownloadInternalServerError
const BulkDownloadInternalServerErrorCode int = 500

/*
BulkDownloadInternalServerError A server error occurred

swagger:response bulkDownloadInternalServerError
*/
type BulkDownloadInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewBulkDownloadInternalServerError creates BulkDownloadInternalServerError with default headers values
func NewBulkDownloadInternalServerError() *BulkDownloadInternalServerError {

	return &BulkDownloadInternalServerError{}
}

// WithPayload adds the payload to the bulk download internal server error response
func (o *BulkDownloadInternalServerError) WithPayload(payload *ghcmessages.Error) *BulkDownloadInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk download internal server error response
func (o *BulkDownloadInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkDownloadInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
