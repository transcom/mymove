// Code generated by go-swagger; DO NOT EDIT.

package payment_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetShipmentsPaymentSITBalanceHandlerFunc turns a function with the right signature into a get shipments payment s i t balance handler
type GetShipmentsPaymentSITBalanceHandlerFunc func(GetShipmentsPaymentSITBalanceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetShipmentsPaymentSITBalanceHandlerFunc) Handle(params GetShipmentsPaymentSITBalanceParams) middleware.Responder {
	return fn(params)
}

// GetShipmentsPaymentSITBalanceHandler interface for that can handle valid get shipments payment s i t balance params
type GetShipmentsPaymentSITBalanceHandler interface {
	Handle(GetShipmentsPaymentSITBalanceParams) middleware.Responder
}

// NewGetShipmentsPaymentSITBalance creates a new http.Handler for the get shipments payment s i t balance operation
func NewGetShipmentsPaymentSITBalance(ctx *middleware.Context, handler GetShipmentsPaymentSITBalanceHandler) *GetShipmentsPaymentSITBalance {
	return &GetShipmentsPaymentSITBalance{Context: ctx, Handler: handler}
}

/*
	GetShipmentsPaymentSITBalance swagger:route GET /payment-requests/{paymentRequestID}/shipments-payment-sit-balance paymentRequests getShipmentsPaymentSITBalance

# Returns all shipment payment request SIT usage to support partial SIT invoicing

Returns all shipment payment request SIT usage to support partial SIT invoicing
*/
type GetShipmentsPaymentSITBalance struct {
	Context *middleware.Context
	Handler GetShipmentsPaymentSITBalanceHandler
}

func (o *GetShipmentsPaymentSITBalance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetShipmentsPaymentSITBalanceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
