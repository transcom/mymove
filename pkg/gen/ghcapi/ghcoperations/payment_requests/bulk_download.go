// Code generated by go-swagger; DO NOT EDIT.

package payment_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// BulkDownloadHandlerFunc turns a function with the right signature into a bulk download handler
type BulkDownloadHandlerFunc func(BulkDownloadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BulkDownloadHandlerFunc) Handle(params BulkDownloadParams) middleware.Responder {
	return fn(params)
}

// BulkDownloadHandler interface for that can handle valid bulk download params
type BulkDownloadHandler interface {
	Handle(BulkDownloadParams) middleware.Responder
}

// NewBulkDownload creates a new http.Handler for the bulk download operation
func NewBulkDownload(ctx *middleware.Context, handler BulkDownloadHandler) *BulkDownload {
	return &BulkDownload{Context: ctx, Handler: handler}
}

/*
	BulkDownload swagger:route GET /payment-requests/{paymentRequestID}/bulkDownload paymentRequests bulkDownload

# Downloads all Payment Request documents as a PDF

This endpoint downloads all uploaded payment request documentation combined into a single PDF.
*/
type BulkDownload struct {
	Context *middleware.Context
	Handler BulkDownloadHandler
}

func (o *BulkDownload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewBulkDownloadParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
