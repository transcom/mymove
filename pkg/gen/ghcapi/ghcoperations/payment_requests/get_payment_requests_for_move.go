// Code generated by go-swagger; DO NOT EDIT.

package payment_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPaymentRequestsForMoveHandlerFunc turns a function with the right signature into a get payment requests for move handler
type GetPaymentRequestsForMoveHandlerFunc func(GetPaymentRequestsForMoveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPaymentRequestsForMoveHandlerFunc) Handle(params GetPaymentRequestsForMoveParams) middleware.Responder {
	return fn(params)
}

// GetPaymentRequestsForMoveHandler interface for that can handle valid get payment requests for move params
type GetPaymentRequestsForMoveHandler interface {
	Handle(GetPaymentRequestsForMoveParams) middleware.Responder
}

// NewGetPaymentRequestsForMove creates a new http.Handler for the get payment requests for move operation
func NewGetPaymentRequestsForMove(ctx *middleware.Context, handler GetPaymentRequestsForMoveHandler) *GetPaymentRequestsForMove {
	return &GetPaymentRequestsForMove{Context: ctx, Handler: handler}
}

/*
	GetPaymentRequestsForMove swagger:route GET /moves/{locator}/payment-requests paymentRequests getPaymentRequestsForMove

Fetches payment requests using the move code (locator).

Fetches payment requests for a move
*/
type GetPaymentRequestsForMove struct {
	Context *middleware.Context
	Handler GetPaymentRequestsForMoveHandler
}

func (o *GetPaymentRequestsForMove) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPaymentRequestsForMoveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
