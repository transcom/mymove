// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	ghcmessages "github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// NewPatchMTOShipmentStatusParams creates a new PatchMTOShipmentStatusParams object
// no default values defined in spec.
func NewPatchMTOShipmentStatusParams() PatchMTOShipmentStatusParams {

	return PatchMTOShipmentStatusParams{}
}

// PatchMTOShipmentStatusParams contains all the bound params for the patch m t o shipment status operation
// typically these are obtained from a http.Request
//
// swagger:parameters patchMTOShipmentStatus
type PatchMTOShipmentStatusParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: header
	*/
	IfUnmodifiedSince strfmt.DateTime
	/*
	  Required: true
	  In: body
	*/
	Body *ghcmessages.MTOShipment
	/*ID of move task order for mto shipment to use
	  Required: true
	  In: path
	*/
	MoveTaskOrderID strfmt.UUID
	/*ID of the shipment
	  Required: true
	  In: path
	*/
	ShipmentID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPatchMTOShipmentStatusParams() beforehand.
func (o *PatchMTOShipmentStatusParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindIfUnmodifiedSince(r.Header[http.CanonicalHeaderKey("If-Unmodified-Since")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body ghcmessages.MTOShipment
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body"))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	} else {
		res = append(res, errors.Required("body", "body"))
	}
	rMoveTaskOrderID, rhkMoveTaskOrderID, _ := route.Params.GetOK("moveTaskOrderID")
	if err := o.bindMoveTaskOrderID(rMoveTaskOrderID, rhkMoveTaskOrderID, route.Formats); err != nil {
		res = append(res, err)
	}

	rShipmentID, rhkShipmentID, _ := route.Params.GetOK("shipmentID")
	if err := o.bindShipmentID(rShipmentID, rhkShipmentID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIfUnmodifiedSince binds and validates parameter IfUnmodifiedSince from header.
func (o *PatchMTOShipmentStatusParams) bindIfUnmodifiedSince(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("If-Unmodified-Since", "header")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("If-Unmodified-Since", "header", raw); err != nil {
		return err
	}

	// Format: datetime
	value, err := formats.Parse("datetime", raw)
	if err != nil {
		return errors.InvalidType("If-Unmodified-Since", "header", "strfmt.DateTime", raw)
	}
	o.IfUnmodifiedSince = *(value.(*strfmt.DateTime))

	if err := o.validateIfUnmodifiedSince(formats); err != nil {
		return err
	}

	return nil
}

// validateIfUnmodifiedSince carries on validations for parameter IfUnmodifiedSince
func (o *PatchMTOShipmentStatusParams) validateIfUnmodifiedSince(formats strfmt.Registry) error {

	if err := validate.FormatOf("If-Unmodified-Since", "header", "datetime", o.IfUnmodifiedSince.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindMoveTaskOrderID binds and validates parameter MoveTaskOrderID from path.
func (o *PatchMTOShipmentStatusParams) bindMoveTaskOrderID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("moveTaskOrderID", "path", "strfmt.UUID", raw)
	}
	o.MoveTaskOrderID = *(value.(*strfmt.UUID))

	if err := o.validateMoveTaskOrderID(formats); err != nil {
		return err
	}

	return nil
}

// validateMoveTaskOrderID carries on validations for parameter MoveTaskOrderID
func (o *PatchMTOShipmentStatusParams) validateMoveTaskOrderID(formats strfmt.Registry) error {

	if err := validate.FormatOf("moveTaskOrderID", "path", "uuid", o.MoveTaskOrderID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindShipmentID binds and validates parameter ShipmentID from path.
func (o *PatchMTOShipmentStatusParams) bindShipmentID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("shipmentID", "path", "strfmt.UUID", raw)
	}
	o.ShipmentID = *(value.(*strfmt.UUID))

	if err := o.validateShipmentID(formats); err != nil {
		return err
	}

	return nil
}

// validateShipmentID carries on validations for parameter ShipmentID
func (o *PatchMTOShipmentStatusParams) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.FormatOf("shipmentID", "path", "uuid", o.ShipmentID.String(), formats); err != nil {
		return err
	}
	return nil
}
