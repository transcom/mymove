// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteShipmentHandlerFunc turns a function with the right signature into a delete shipment handler
type DeleteShipmentHandlerFunc func(DeleteShipmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteShipmentHandlerFunc) Handle(params DeleteShipmentParams) middleware.Responder {
	return fn(params)
}

// DeleteShipmentHandler interface for that can handle valid delete shipment params
type DeleteShipmentHandler interface {
	Handle(DeleteShipmentParams) middleware.Responder
}

// NewDeleteShipment creates a new http.Handler for the delete shipment operation
func NewDeleteShipment(ctx *middleware.Context, handler DeleteShipmentHandler) *DeleteShipment {
	return &DeleteShipment{Context: ctx, Handler: handler}
}

/*
	DeleteShipment swagger:route DELETE /shipments/{shipmentID} shipment deleteShipment

# Soft deletes a shipment by ID

Soft deletes a shipment by ID
*/
type DeleteShipment struct {
	Context *middleware.Context
	Handler DeleteShipmentHandler
}

func (o *DeleteShipment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteShipmentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
