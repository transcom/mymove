// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ApproveShipmentDiversionHandlerFunc turns a function with the right signature into a approve shipment diversion handler
type ApproveShipmentDiversionHandlerFunc func(ApproveShipmentDiversionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ApproveShipmentDiversionHandlerFunc) Handle(params ApproveShipmentDiversionParams) middleware.Responder {
	return fn(params)
}

// ApproveShipmentDiversionHandler interface for that can handle valid approve shipment diversion params
type ApproveShipmentDiversionHandler interface {
	Handle(ApproveShipmentDiversionParams) middleware.Responder
}

// NewApproveShipmentDiversion creates a new http.Handler for the approve shipment diversion operation
func NewApproveShipmentDiversion(ctx *middleware.Context, handler ApproveShipmentDiversionHandler) *ApproveShipmentDiversion {
	return &ApproveShipmentDiversion{Context: ctx, Handler: handler}
}

/*
	ApproveShipmentDiversion swagger:route POST /shipments/{shipmentID}/approve-diversion shipment approveShipmentDiversion

# Approves a shipment diversion

Approves a shipment diversion
*/
type ApproveShipmentDiversion struct {
	Context *middleware.Context
	Handler ApproveShipmentDiversionHandler
}

func (o *ApproveShipmentDiversion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewApproveShipmentDiversionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
