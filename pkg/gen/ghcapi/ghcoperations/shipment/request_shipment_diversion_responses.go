// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// RequestShipmentDiversionOKCode is the HTTP code returned for type RequestShipmentDiversionOK
const RequestShipmentDiversionOKCode int = 200

/*
RequestShipmentDiversionOK Successfully requested the shipment diversion

swagger:response requestShipmentDiversionOK
*/
type RequestShipmentDiversionOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.MTOShipment `json:"body,omitempty"`
}

// NewRequestShipmentDiversionOK creates RequestShipmentDiversionOK with default headers values
func NewRequestShipmentDiversionOK() *RequestShipmentDiversionOK {

	return &RequestShipmentDiversionOK{}
}

// WithPayload adds the payload to the request shipment diversion o k response
func (o *RequestShipmentDiversionOK) WithPayload(payload *ghcmessages.MTOShipment) *RequestShipmentDiversionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment diversion o k response
func (o *RequestShipmentDiversionOK) SetPayload(payload *ghcmessages.MTOShipment) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentDiversionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestShipmentDiversionForbiddenCode is the HTTP code returned for type RequestShipmentDiversionForbidden
const RequestShipmentDiversionForbiddenCode int = 403

/*
RequestShipmentDiversionForbidden The request was denied

swagger:response requestShipmentDiversionForbidden
*/
type RequestShipmentDiversionForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestShipmentDiversionForbidden creates RequestShipmentDiversionForbidden with default headers values
func NewRequestShipmentDiversionForbidden() *RequestShipmentDiversionForbidden {

	return &RequestShipmentDiversionForbidden{}
}

// WithPayload adds the payload to the request shipment diversion forbidden response
func (o *RequestShipmentDiversionForbidden) WithPayload(payload *ghcmessages.Error) *RequestShipmentDiversionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment diversion forbidden response
func (o *RequestShipmentDiversionForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentDiversionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestShipmentDiversionNotFoundCode is the HTTP code returned for type RequestShipmentDiversionNotFound
const RequestShipmentDiversionNotFoundCode int = 404

/*
RequestShipmentDiversionNotFound The requested resource wasn't found

swagger:response requestShipmentDiversionNotFound
*/
type RequestShipmentDiversionNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestShipmentDiversionNotFound creates RequestShipmentDiversionNotFound with default headers values
func NewRequestShipmentDiversionNotFound() *RequestShipmentDiversionNotFound {

	return &RequestShipmentDiversionNotFound{}
}

// WithPayload adds the payload to the request shipment diversion not found response
func (o *RequestShipmentDiversionNotFound) WithPayload(payload *ghcmessages.Error) *RequestShipmentDiversionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment diversion not found response
func (o *RequestShipmentDiversionNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentDiversionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestShipmentDiversionConflictCode is the HTTP code returned for type RequestShipmentDiversionConflict
const RequestShipmentDiversionConflictCode int = 409

/*
RequestShipmentDiversionConflict Conflict error

swagger:response requestShipmentDiversionConflict
*/
type RequestShipmentDiversionConflict struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestShipmentDiversionConflict creates RequestShipmentDiversionConflict with default headers values
func NewRequestShipmentDiversionConflict() *RequestShipmentDiversionConflict {

	return &RequestShipmentDiversionConflict{}
}

// WithPayload adds the payload to the request shipment diversion conflict response
func (o *RequestShipmentDiversionConflict) WithPayload(payload *ghcmessages.Error) *RequestShipmentDiversionConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment diversion conflict response
func (o *RequestShipmentDiversionConflict) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentDiversionConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestShipmentDiversionPreconditionFailedCode is the HTTP code returned for type RequestShipmentDiversionPreconditionFailed
const RequestShipmentDiversionPreconditionFailedCode int = 412

/*
RequestShipmentDiversionPreconditionFailed Precondition failed

swagger:response requestShipmentDiversionPreconditionFailed
*/
type RequestShipmentDiversionPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestShipmentDiversionPreconditionFailed creates RequestShipmentDiversionPreconditionFailed with default headers values
func NewRequestShipmentDiversionPreconditionFailed() *RequestShipmentDiversionPreconditionFailed {

	return &RequestShipmentDiversionPreconditionFailed{}
}

// WithPayload adds the payload to the request shipment diversion precondition failed response
func (o *RequestShipmentDiversionPreconditionFailed) WithPayload(payload *ghcmessages.Error) *RequestShipmentDiversionPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment diversion precondition failed response
func (o *RequestShipmentDiversionPreconditionFailed) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentDiversionPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestShipmentDiversionUnprocessableEntityCode is the HTTP code returned for type RequestShipmentDiversionUnprocessableEntity
const RequestShipmentDiversionUnprocessableEntityCode int = 422

/*
RequestShipmentDiversionUnprocessableEntity The payload was unprocessable.

swagger:response requestShipmentDiversionUnprocessableEntity
*/
type RequestShipmentDiversionUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewRequestShipmentDiversionUnprocessableEntity creates RequestShipmentDiversionUnprocessableEntity with default headers values
func NewRequestShipmentDiversionUnprocessableEntity() *RequestShipmentDiversionUnprocessableEntity {

	return &RequestShipmentDiversionUnprocessableEntity{}
}

// WithPayload adds the payload to the request shipment diversion unprocessable entity response
func (o *RequestShipmentDiversionUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *RequestShipmentDiversionUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment diversion unprocessable entity response
func (o *RequestShipmentDiversionUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentDiversionUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestShipmentDiversionInternalServerErrorCode is the HTTP code returned for type RequestShipmentDiversionInternalServerError
const RequestShipmentDiversionInternalServerErrorCode int = 500

/*
RequestShipmentDiversionInternalServerError A server error occurred

swagger:response requestShipmentDiversionInternalServerError
*/
type RequestShipmentDiversionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestShipmentDiversionInternalServerError creates RequestShipmentDiversionInternalServerError with default headers values
func NewRequestShipmentDiversionInternalServerError() *RequestShipmentDiversionInternalServerError {

	return &RequestShipmentDiversionInternalServerError{}
}

// WithPayload adds the payload to the request shipment diversion internal server error response
func (o *RequestShipmentDiversionInternalServerError) WithPayload(payload *ghcmessages.Error) *RequestShipmentDiversionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment diversion internal server error response
func (o *RequestShipmentDiversionInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentDiversionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
