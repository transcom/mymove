// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateSitExtensionHandlerFunc turns a function with the right signature into a create sit extension handler
type CreateSitExtensionHandlerFunc func(CreateSitExtensionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateSitExtensionHandlerFunc) Handle(params CreateSitExtensionParams) middleware.Responder {
	return fn(params)
}

// CreateSitExtensionHandler interface for that can handle valid create sit extension params
type CreateSitExtensionHandler interface {
	Handle(CreateSitExtensionParams) middleware.Responder
}

// NewCreateSitExtension creates a new http.Handler for the create sit extension operation
func NewCreateSitExtension(ctx *middleware.Context, handler CreateSitExtensionHandler) *CreateSitExtension {
	return &CreateSitExtension{Context: ctx, Handler: handler}
}

/* CreateSitExtension swagger:route POST /shipments/{shipmentID}/sit-extensions/ shipment sitExtension createSitExtension

Create an approved SIT extension

TOO can creates an already-approved SIT extension on behalf of a customer

*/
type CreateSitExtension struct {
	Context *middleware.Context
	Handler CreateSitExtensionHandler
}

func (o *CreateSitExtension) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateSitExtensionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
