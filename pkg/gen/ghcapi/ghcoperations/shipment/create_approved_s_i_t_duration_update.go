// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateApprovedSITDurationUpdateHandlerFunc turns a function with the right signature into a create approved s i t duration update handler
type CreateApprovedSITDurationUpdateHandlerFunc func(CreateApprovedSITDurationUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateApprovedSITDurationUpdateHandlerFunc) Handle(params CreateApprovedSITDurationUpdateParams) middleware.Responder {
	return fn(params)
}

// CreateApprovedSITDurationUpdateHandler interface for that can handle valid create approved s i t duration update params
type CreateApprovedSITDurationUpdateHandler interface {
	Handle(CreateApprovedSITDurationUpdateParams) middleware.Responder
}

// NewCreateApprovedSITDurationUpdate creates a new http.Handler for the create approved s i t duration update operation
func NewCreateApprovedSITDurationUpdate(ctx *middleware.Context, handler CreateApprovedSITDurationUpdateHandler) *CreateApprovedSITDurationUpdate {
	return &CreateApprovedSITDurationUpdate{Context: ctx, Handler: handler}
}

/*
	CreateApprovedSITDurationUpdate swagger:route POST /shipments/{shipmentID}/sit-extensions shipment sitExtension createApprovedSITDurationUpdate

# Create an approved SIT Duration Update

TOO can creates an already-approved SIT Duration Update on behalf of a customer
*/
type CreateApprovedSITDurationUpdate struct {
	Context *middleware.Context
	Handler CreateApprovedSITDurationUpdateHandler
}

func (o *CreateApprovedSITDurationUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateApprovedSITDurationUpdateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
