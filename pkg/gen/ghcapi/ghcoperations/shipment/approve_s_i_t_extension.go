// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ApproveSITExtensionHandlerFunc turns a function with the right signature into a approve s i t extension handler
type ApproveSITExtensionHandlerFunc func(ApproveSITExtensionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ApproveSITExtensionHandlerFunc) Handle(params ApproveSITExtensionParams) middleware.Responder {
	return fn(params)
}

// ApproveSITExtensionHandler interface for that can handle valid approve s i t extension params
type ApproveSITExtensionHandler interface {
	Handle(ApproveSITExtensionParams) middleware.Responder
}

// NewApproveSITExtension creates a new http.Handler for the approve s i t extension operation
func NewApproveSITExtension(ctx *middleware.Context, handler ApproveSITExtensionHandler) *ApproveSITExtension {
	return &ApproveSITExtension{Context: ctx, Handler: handler}
}

/*
	ApproveSITExtension swagger:route PATCH /shipments/{shipmentID}/sit-extensions/{sitExtensionID}/approve shipment sitExtension approveSITExtension

# Approves a SIT extension

Approves a SIT extension
*/
type ApproveSITExtension struct {
	Context *middleware.Context
	Handler ApproveSITExtensionHandler
}

func (o *ApproveSITExtension) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewApproveSITExtensionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
