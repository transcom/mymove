// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ApproveShipmentsHandlerFunc turns a function with the right signature into a approve shipments handler
type ApproveShipmentsHandlerFunc func(ApproveShipmentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ApproveShipmentsHandlerFunc) Handle(params ApproveShipmentsParams) middleware.Responder {
	return fn(params)
}

// ApproveShipmentsHandler interface for that can handle valid approve shipments params
type ApproveShipmentsHandler interface {
	Handle(ApproveShipmentsParams) middleware.Responder
}

// NewApproveShipments creates a new http.Handler for the approve shipments operation
func NewApproveShipments(ctx *middleware.Context, handler ApproveShipmentsHandler) *ApproveShipments {
	return &ApproveShipments{Context: ctx, Handler: handler}
}

/*
	ApproveShipments swagger:route POST /shipments/approve shipment approveShipments

# Approves multiple shipments at once

Approves multiple shipments in one request
*/
type ApproveShipments struct {
	Context *middleware.Context
	Handler ApproveShipmentsHandler
}

func (o *ApproveShipments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewApproveShipmentsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
