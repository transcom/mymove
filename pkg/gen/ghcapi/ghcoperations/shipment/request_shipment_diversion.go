// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RequestShipmentDiversionHandlerFunc turns a function with the right signature into a request shipment diversion handler
type RequestShipmentDiversionHandlerFunc func(RequestShipmentDiversionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RequestShipmentDiversionHandlerFunc) Handle(params RequestShipmentDiversionParams) middleware.Responder {
	return fn(params)
}

// RequestShipmentDiversionHandler interface for that can handle valid request shipment diversion params
type RequestShipmentDiversionHandler interface {
	Handle(RequestShipmentDiversionParams) middleware.Responder
}

// NewRequestShipmentDiversion creates a new http.Handler for the request shipment diversion operation
func NewRequestShipmentDiversion(ctx *middleware.Context, handler RequestShipmentDiversionHandler) *RequestShipmentDiversion {
	return &RequestShipmentDiversion{Context: ctx, Handler: handler}
}

/*
	RequestShipmentDiversion swagger:route POST /shipments/{shipmentID}/request-diversion shipment requestShipmentDiversion

# Requests a shipment diversion

Requests a shipment diversion
*/
type RequestShipmentDiversion struct {
	Context *middleware.Context
	Handler RequestShipmentDiversionHandler
}

func (o *RequestShipmentDiversion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRequestShipmentDiversionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
