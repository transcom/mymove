// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateSITExtensionAsTOOHandlerFunc turns a function with the right signature into a create s i t extension as t o o handler
type CreateSITExtensionAsTOOHandlerFunc func(CreateSITExtensionAsTOOParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateSITExtensionAsTOOHandlerFunc) Handle(params CreateSITExtensionAsTOOParams) middleware.Responder {
	return fn(params)
}

// CreateSITExtensionAsTOOHandler interface for that can handle valid create s i t extension as t o o params
type CreateSITExtensionAsTOOHandler interface {
	Handle(CreateSITExtensionAsTOOParams) middleware.Responder
}

// NewCreateSITExtensionAsTOO creates a new http.Handler for the create s i t extension as t o o operation
func NewCreateSITExtensionAsTOO(ctx *middleware.Context, handler CreateSITExtensionAsTOOHandler) *CreateSITExtensionAsTOO {
	return &CreateSITExtensionAsTOO{Context: ctx, Handler: handler}
}

/* CreateSITExtensionAsTOO swagger:route POST /shipments/{shipmentID}/sit-extensions/ shipment sitExtension createSITExtensionAsTOO

Create an approved SIT extension

TOO can creates an already-approved SIT extension on behalf of a customer

*/
type CreateSITExtensionAsTOO struct {
	Context *middleware.Context
	Handler CreateSITExtensionAsTOOHandler
}

func (o *CreateSITExtensionAsTOO) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateSITExtensionAsTOOParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
