// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// RequestShipmentReweighOKCode is the HTTP code returned for type RequestShipmentReweighOK
const RequestShipmentReweighOKCode int = 200

/*
RequestShipmentReweighOK Successfully requested a reweigh of the shipment

swagger:response requestShipmentReweighOK
*/
type RequestShipmentReweighOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Reweigh `json:"body,omitempty"`
}

// NewRequestShipmentReweighOK creates RequestShipmentReweighOK with default headers values
func NewRequestShipmentReweighOK() *RequestShipmentReweighOK {

	return &RequestShipmentReweighOK{}
}

// WithPayload adds the payload to the request shipment reweigh o k response
func (o *RequestShipmentReweighOK) WithPayload(payload *ghcmessages.Reweigh) *RequestShipmentReweighOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment reweigh o k response
func (o *RequestShipmentReweighOK) SetPayload(payload *ghcmessages.Reweigh) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentReweighOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestShipmentReweighForbiddenCode is the HTTP code returned for type RequestShipmentReweighForbidden
const RequestShipmentReweighForbiddenCode int = 403

/*
RequestShipmentReweighForbidden The request was denied

swagger:response requestShipmentReweighForbidden
*/
type RequestShipmentReweighForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestShipmentReweighForbidden creates RequestShipmentReweighForbidden with default headers values
func NewRequestShipmentReweighForbidden() *RequestShipmentReweighForbidden {

	return &RequestShipmentReweighForbidden{}
}

// WithPayload adds the payload to the request shipment reweigh forbidden response
func (o *RequestShipmentReweighForbidden) WithPayload(payload *ghcmessages.Error) *RequestShipmentReweighForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment reweigh forbidden response
func (o *RequestShipmentReweighForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentReweighForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestShipmentReweighNotFoundCode is the HTTP code returned for type RequestShipmentReweighNotFound
const RequestShipmentReweighNotFoundCode int = 404

/*
RequestShipmentReweighNotFound The requested resource wasn't found

swagger:response requestShipmentReweighNotFound
*/
type RequestShipmentReweighNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestShipmentReweighNotFound creates RequestShipmentReweighNotFound with default headers values
func NewRequestShipmentReweighNotFound() *RequestShipmentReweighNotFound {

	return &RequestShipmentReweighNotFound{}
}

// WithPayload adds the payload to the request shipment reweigh not found response
func (o *RequestShipmentReweighNotFound) WithPayload(payload *ghcmessages.Error) *RequestShipmentReweighNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment reweigh not found response
func (o *RequestShipmentReweighNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentReweighNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestShipmentReweighConflictCode is the HTTP code returned for type RequestShipmentReweighConflict
const RequestShipmentReweighConflictCode int = 409

/*
RequestShipmentReweighConflict Conflict error

swagger:response requestShipmentReweighConflict
*/
type RequestShipmentReweighConflict struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestShipmentReweighConflict creates RequestShipmentReweighConflict with default headers values
func NewRequestShipmentReweighConflict() *RequestShipmentReweighConflict {

	return &RequestShipmentReweighConflict{}
}

// WithPayload adds the payload to the request shipment reweigh conflict response
func (o *RequestShipmentReweighConflict) WithPayload(payload *ghcmessages.Error) *RequestShipmentReweighConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment reweigh conflict response
func (o *RequestShipmentReweighConflict) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentReweighConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestShipmentReweighPreconditionFailedCode is the HTTP code returned for type RequestShipmentReweighPreconditionFailed
const RequestShipmentReweighPreconditionFailedCode int = 412

/*
RequestShipmentReweighPreconditionFailed Precondition failed

swagger:response requestShipmentReweighPreconditionFailed
*/
type RequestShipmentReweighPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestShipmentReweighPreconditionFailed creates RequestShipmentReweighPreconditionFailed with default headers values
func NewRequestShipmentReweighPreconditionFailed() *RequestShipmentReweighPreconditionFailed {

	return &RequestShipmentReweighPreconditionFailed{}
}

// WithPayload adds the payload to the request shipment reweigh precondition failed response
func (o *RequestShipmentReweighPreconditionFailed) WithPayload(payload *ghcmessages.Error) *RequestShipmentReweighPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment reweigh precondition failed response
func (o *RequestShipmentReweighPreconditionFailed) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentReweighPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestShipmentReweighUnprocessableEntityCode is the HTTP code returned for type RequestShipmentReweighUnprocessableEntity
const RequestShipmentReweighUnprocessableEntityCode int = 422

/*
RequestShipmentReweighUnprocessableEntity The payload was unprocessable.

swagger:response requestShipmentReweighUnprocessableEntity
*/
type RequestShipmentReweighUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewRequestShipmentReweighUnprocessableEntity creates RequestShipmentReweighUnprocessableEntity with default headers values
func NewRequestShipmentReweighUnprocessableEntity() *RequestShipmentReweighUnprocessableEntity {

	return &RequestShipmentReweighUnprocessableEntity{}
}

// WithPayload adds the payload to the request shipment reweigh unprocessable entity response
func (o *RequestShipmentReweighUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *RequestShipmentReweighUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment reweigh unprocessable entity response
func (o *RequestShipmentReweighUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentReweighUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestShipmentReweighInternalServerErrorCode is the HTTP code returned for type RequestShipmentReweighInternalServerError
const RequestShipmentReweighInternalServerErrorCode int = 500

/*
RequestShipmentReweighInternalServerError A server error occurred

swagger:response requestShipmentReweighInternalServerError
*/
type RequestShipmentReweighInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewRequestShipmentReweighInternalServerError creates RequestShipmentReweighInternalServerError with default headers values
func NewRequestShipmentReweighInternalServerError() *RequestShipmentReweighInternalServerError {

	return &RequestShipmentReweighInternalServerError{}
}

// WithPayload adds the payload to the request shipment reweigh internal server error response
func (o *RequestShipmentReweighInternalServerError) WithPayload(payload *ghcmessages.Error) *RequestShipmentReweighInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request shipment reweigh internal server error response
func (o *RequestShipmentReweighInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestShipmentReweighInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
