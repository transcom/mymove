// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateSITServiceItemCustomerExpenseHandlerFunc turns a function with the right signature into a update s i t service item customer expense handler
type UpdateSITServiceItemCustomerExpenseHandlerFunc func(UpdateSITServiceItemCustomerExpenseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateSITServiceItemCustomerExpenseHandlerFunc) Handle(params UpdateSITServiceItemCustomerExpenseParams) middleware.Responder {
	return fn(params)
}

// UpdateSITServiceItemCustomerExpenseHandler interface for that can handle valid update s i t service item customer expense params
type UpdateSITServiceItemCustomerExpenseHandler interface {
	Handle(UpdateSITServiceItemCustomerExpenseParams) middleware.Responder
}

// NewUpdateSITServiceItemCustomerExpense creates a new http.Handler for the update s i t service item customer expense operation
func NewUpdateSITServiceItemCustomerExpense(ctx *middleware.Context, handler UpdateSITServiceItemCustomerExpenseHandler) *UpdateSITServiceItemCustomerExpense {
	return &UpdateSITServiceItemCustomerExpense{Context: ctx, Handler: handler}
}

/*
	UpdateSITServiceItemCustomerExpense swagger:route PATCH /shipments/{shipmentID}/sit-service-item/convert-to-customer-expense shipment mtoServiceItem updateSITServiceItemCustomerExpense

# Converts a SIT to customer expense

Converts a SIT to customer expense
*/
type UpdateSITServiceItemCustomerExpense struct {
	Context *middleware.Context
	Handler UpdateSITServiceItemCustomerExpenseHandler
}

func (o *UpdateSITServiceItemCustomerExpense) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateSITServiceItemCustomerExpenseParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
