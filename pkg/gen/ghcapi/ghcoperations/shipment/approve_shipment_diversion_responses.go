// Code generated by go-swagger; DO NOT EDIT.

package shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// ApproveShipmentDiversionOKCode is the HTTP code returned for type ApproveShipmentDiversionOK
const ApproveShipmentDiversionOKCode int = 200

/*
ApproveShipmentDiversionOK Successfully approved the shipment diversion

swagger:response approveShipmentDiversionOK
*/
type ApproveShipmentDiversionOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.MTOShipment `json:"body,omitempty"`
}

// NewApproveShipmentDiversionOK creates ApproveShipmentDiversionOK with default headers values
func NewApproveShipmentDiversionOK() *ApproveShipmentDiversionOK {

	return &ApproveShipmentDiversionOK{}
}

// WithPayload adds the payload to the approve shipment diversion o k response
func (o *ApproveShipmentDiversionOK) WithPayload(payload *ghcmessages.MTOShipment) *ApproveShipmentDiversionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the approve shipment diversion o k response
func (o *ApproveShipmentDiversionOK) SetPayload(payload *ghcmessages.MTOShipment) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ApproveShipmentDiversionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ApproveShipmentDiversionForbiddenCode is the HTTP code returned for type ApproveShipmentDiversionForbidden
const ApproveShipmentDiversionForbiddenCode int = 403

/*
ApproveShipmentDiversionForbidden The request was denied

swagger:response approveShipmentDiversionForbidden
*/
type ApproveShipmentDiversionForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewApproveShipmentDiversionForbidden creates ApproveShipmentDiversionForbidden with default headers values
func NewApproveShipmentDiversionForbidden() *ApproveShipmentDiversionForbidden {

	return &ApproveShipmentDiversionForbidden{}
}

// WithPayload adds the payload to the approve shipment diversion forbidden response
func (o *ApproveShipmentDiversionForbidden) WithPayload(payload *ghcmessages.Error) *ApproveShipmentDiversionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the approve shipment diversion forbidden response
func (o *ApproveShipmentDiversionForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ApproveShipmentDiversionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ApproveShipmentDiversionNotFoundCode is the HTTP code returned for type ApproveShipmentDiversionNotFound
const ApproveShipmentDiversionNotFoundCode int = 404

/*
ApproveShipmentDiversionNotFound The requested resource wasn't found

swagger:response approveShipmentDiversionNotFound
*/
type ApproveShipmentDiversionNotFound struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewApproveShipmentDiversionNotFound creates ApproveShipmentDiversionNotFound with default headers values
func NewApproveShipmentDiversionNotFound() *ApproveShipmentDiversionNotFound {

	return &ApproveShipmentDiversionNotFound{}
}

// WithPayload adds the payload to the approve shipment diversion not found response
func (o *ApproveShipmentDiversionNotFound) WithPayload(payload *ghcmessages.Error) *ApproveShipmentDiversionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the approve shipment diversion not found response
func (o *ApproveShipmentDiversionNotFound) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ApproveShipmentDiversionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ApproveShipmentDiversionConflictCode is the HTTP code returned for type ApproveShipmentDiversionConflict
const ApproveShipmentDiversionConflictCode int = 409

/*
ApproveShipmentDiversionConflict Conflict error

swagger:response approveShipmentDiversionConflict
*/
type ApproveShipmentDiversionConflict struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewApproveShipmentDiversionConflict creates ApproveShipmentDiversionConflict with default headers values
func NewApproveShipmentDiversionConflict() *ApproveShipmentDiversionConflict {

	return &ApproveShipmentDiversionConflict{}
}

// WithPayload adds the payload to the approve shipment diversion conflict response
func (o *ApproveShipmentDiversionConflict) WithPayload(payload *ghcmessages.Error) *ApproveShipmentDiversionConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the approve shipment diversion conflict response
func (o *ApproveShipmentDiversionConflict) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ApproveShipmentDiversionConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ApproveShipmentDiversionPreconditionFailedCode is the HTTP code returned for type ApproveShipmentDiversionPreconditionFailed
const ApproveShipmentDiversionPreconditionFailedCode int = 412

/*
ApproveShipmentDiversionPreconditionFailed Precondition failed

swagger:response approveShipmentDiversionPreconditionFailed
*/
type ApproveShipmentDiversionPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewApproveShipmentDiversionPreconditionFailed creates ApproveShipmentDiversionPreconditionFailed with default headers values
func NewApproveShipmentDiversionPreconditionFailed() *ApproveShipmentDiversionPreconditionFailed {

	return &ApproveShipmentDiversionPreconditionFailed{}
}

// WithPayload adds the payload to the approve shipment diversion precondition failed response
func (o *ApproveShipmentDiversionPreconditionFailed) WithPayload(payload *ghcmessages.Error) *ApproveShipmentDiversionPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the approve shipment diversion precondition failed response
func (o *ApproveShipmentDiversionPreconditionFailed) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ApproveShipmentDiversionPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ApproveShipmentDiversionUnprocessableEntityCode is the HTTP code returned for type ApproveShipmentDiversionUnprocessableEntity
const ApproveShipmentDiversionUnprocessableEntityCode int = 422

/*
ApproveShipmentDiversionUnprocessableEntity The payload was unprocessable.

swagger:response approveShipmentDiversionUnprocessableEntity
*/
type ApproveShipmentDiversionUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ValidationError `json:"body,omitempty"`
}

// NewApproveShipmentDiversionUnprocessableEntity creates ApproveShipmentDiversionUnprocessableEntity with default headers values
func NewApproveShipmentDiversionUnprocessableEntity() *ApproveShipmentDiversionUnprocessableEntity {

	return &ApproveShipmentDiversionUnprocessableEntity{}
}

// WithPayload adds the payload to the approve shipment diversion unprocessable entity response
func (o *ApproveShipmentDiversionUnprocessableEntity) WithPayload(payload *ghcmessages.ValidationError) *ApproveShipmentDiversionUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the approve shipment diversion unprocessable entity response
func (o *ApproveShipmentDiversionUnprocessableEntity) SetPayload(payload *ghcmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ApproveShipmentDiversionUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ApproveShipmentDiversionInternalServerErrorCode is the HTTP code returned for type ApproveShipmentDiversionInternalServerError
const ApproveShipmentDiversionInternalServerErrorCode int = 500

/*
ApproveShipmentDiversionInternalServerError A server error occurred

swagger:response approveShipmentDiversionInternalServerError
*/
type ApproveShipmentDiversionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewApproveShipmentDiversionInternalServerError creates ApproveShipmentDiversionInternalServerError with default headers values
func NewApproveShipmentDiversionInternalServerError() *ApproveShipmentDiversionInternalServerError {

	return &ApproveShipmentDiversionInternalServerError{}
}

// WithPayload adds the payload to the approve shipment diversion internal server error response
func (o *ApproveShipmentDiversionInternalServerError) WithPayload(payload *ghcmessages.Error) *ApproveShipmentDiversionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the approve shipment diversion internal server error response
func (o *ApproveShipmentDiversionInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ApproveShipmentDiversionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
