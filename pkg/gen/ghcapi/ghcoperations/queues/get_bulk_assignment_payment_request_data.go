// Code generated by go-swagger; DO NOT EDIT.

package queues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetBulkAssignmentPaymentRequestDataHandlerFunc turns a function with the right signature into a get bulk assignment payment request data handler
type GetBulkAssignmentPaymentRequestDataHandlerFunc func(GetBulkAssignmentPaymentRequestDataParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBulkAssignmentPaymentRequestDataHandlerFunc) Handle(params GetBulkAssignmentPaymentRequestDataParams) middleware.Responder {
	return fn(params)
}

// GetBulkAssignmentPaymentRequestDataHandler interface for that can handle valid get bulk assignment payment request data params
type GetBulkAssignmentPaymentRequestDataHandler interface {
	Handle(GetBulkAssignmentPaymentRequestDataParams) middleware.Responder
}

// NewGetBulkAssignmentPaymentRequestData creates a new http.Handler for the get bulk assignment payment request data operation
func NewGetBulkAssignmentPaymentRequestData(ctx *middleware.Context, handler GetBulkAssignmentPaymentRequestDataHandler) *GetBulkAssignmentPaymentRequestData {
	return &GetBulkAssignmentPaymentRequestData{Context: ctx, Handler: handler}
}

/*
	GetBulkAssignmentPaymentRequestData swagger:route GET /queues/bulk-assignment-payment-requests queues getBulkAssignmentPaymentRequestData

# Gets data for bulk assignment payment request modal

Supervisor office users are able to bulk assign payment requests. This endpoint returns the relevant data to them; the current workload of the office users that work under them, and the payment requests that are available to be assigned
*/
type GetBulkAssignmentPaymentRequestData struct {
	Context *middleware.Context
	Handler GetBulkAssignmentPaymentRequestDataHandler
}

func (o *GetBulkAssignmentPaymentRequestData) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBulkAssignmentPaymentRequestDataParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
