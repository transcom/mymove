// Code generated by go-swagger; DO NOT EDIT.

package queues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// NewPostBulkAssignmentDataParams creates a new PostBulkAssignmentDataParams object
//
// There are no default values defined in the spec.
func NewPostBulkAssignmentDataParams() PostBulkAssignmentDataParams {

	return PostBulkAssignmentDataParams{}
}

// PostBulkAssignmentDataParams contains all the bound params for the post bulk assignment data operation
// typically these are obtained from a http.Request
//
// swagger:parameters postBulkAssignmentData
type PostBulkAssignmentDataParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: body
	*/
	BulkAssignmentSavePayload *ghcmessages.BulkAssignmentSavePayload
	/*A string corresponding to the queue type
	  In: query
	*/
	QueueType *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostBulkAssignmentDataParams() beforehand.
func (o *PostBulkAssignmentDataParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body ghcmessages.BulkAssignmentSavePayload
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("bulkAssignmentSavePayload", "body", ""))
			} else {
				res = append(res, errors.NewParseError("bulkAssignmentSavePayload", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(r.Context())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.BulkAssignmentSavePayload = &body
			}
		}
	} else {
		res = append(res, errors.Required("bulkAssignmentSavePayload", "body", ""))
	}

	qQueueType, qhkQueueType, _ := qs.GetOK("queueType")
	if err := o.bindQueueType(qQueueType, qhkQueueType, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindQueueType binds and validates parameter QueueType from query.
func (o *PostBulkAssignmentDataParams) bindQueueType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.QueueType = &raw

	if err := o.validateQueueType(formats); err != nil {
		return err
	}

	return nil
}

// validateQueueType carries on validations for parameter QueueType
func (o *PostBulkAssignmentDataParams) validateQueueType(formats strfmt.Registry) error {

	if err := validate.EnumCase("queueType", "query", *o.QueueType, []interface{}{"COUNSELING", "CLOSEOUT", "TASK_ORDER", "PAYMENT_REQUEST"}, true); err != nil {
		return err
	}

	return nil
}
