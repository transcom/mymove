// Code generated by go-swagger; DO NOT EDIT.

package queues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetCounselingQueueHandlerFunc turns a function with the right signature into a get counseling queue handler
type GetCounselingQueueHandlerFunc func(GetCounselingQueueParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCounselingQueueHandlerFunc) Handle(params GetCounselingQueueParams) middleware.Responder {
	return fn(params)
}

// GetCounselingQueueHandler interface for that can handle valid get counseling queue params
type GetCounselingQueueHandler interface {
	Handle(GetCounselingQueueParams) middleware.Responder
}

// NewGetCounselingQueue creates a new http.Handler for the get counseling queue operation
func NewGetCounselingQueue(ctx *middleware.Context, handler GetCounselingQueueHandler) *GetCounselingQueue {
	return &GetCounselingQueue{Context: ctx, Handler: handler}
}

/*
	GetCounselingQueue swagger:route GET /queues/counselingQueue queues getCounselingQueue

# Gets queued list of all customer moves needing services counseling by GBLOC origin

An office services counselor user will be assigned a transportation office that will determine which moves are displayed in their queue based on the origin duty location.  GHC moves will show up here onced they have reached the NEEDS SERVICE COUNSELING status after submission from a customer or created on a customer's behalf.
*/
type GetCounselingQueue struct {
	Context *middleware.Context
	Handler GetCounselingQueueHandler
}

func (o *GetCounselingQueue) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCounselingQueueParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
