// Code generated by go-swagger; DO NOT EDIT.

package queues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// GetCounselingQueueOKCode is the HTTP code returned for type GetCounselingQueueOK
const GetCounselingQueueOKCode int = 200

/*
GetCounselingQueueOK Successfully returned all moves matching the criteria

swagger:response getCounselingQueueOK
*/
type GetCounselingQueueOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.CounselingQueueMovesResult `json:"body,omitempty"`
}

// NewGetCounselingQueueOK creates GetCounselingQueueOK with default headers values
func NewGetCounselingQueueOK() *GetCounselingQueueOK {

	return &GetCounselingQueueOK{}
}

// WithPayload adds the payload to the get counseling queue o k response
func (o *GetCounselingQueueOK) WithPayload(payload *ghcmessages.CounselingQueueMovesResult) *GetCounselingQueueOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get counseling queue o k response
func (o *GetCounselingQueueOK) SetPayload(payload *ghcmessages.CounselingQueueMovesResult) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCounselingQueueOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCounselingQueueForbiddenCode is the HTTP code returned for type GetCounselingQueueForbidden
const GetCounselingQueueForbiddenCode int = 403

/*
GetCounselingQueueForbidden The request was denied

swagger:response getCounselingQueueForbidden
*/
type GetCounselingQueueForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetCounselingQueueForbidden creates GetCounselingQueueForbidden with default headers values
func NewGetCounselingQueueForbidden() *GetCounselingQueueForbidden {

	return &GetCounselingQueueForbidden{}
}

// WithPayload adds the payload to the get counseling queue forbidden response
func (o *GetCounselingQueueForbidden) WithPayload(payload *ghcmessages.Error) *GetCounselingQueueForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get counseling queue forbidden response
func (o *GetCounselingQueueForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCounselingQueueForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCounselingQueueInternalServerErrorCode is the HTTP code returned for type GetCounselingQueueInternalServerError
const GetCounselingQueueInternalServerErrorCode int = 500

/*
GetCounselingQueueInternalServerError A server error occurred

swagger:response getCounselingQueueInternalServerError
*/
type GetCounselingQueueInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewGetCounselingQueueInternalServerError creates GetCounselingQueueInternalServerError with default headers values
func NewGetCounselingQueueInternalServerError() *GetCounselingQueueInternalServerError {

	return &GetCounselingQueueInternalServerError{}
}

// WithPayload adds the payload to the get counseling queue internal server error response
func (o *GetCounselingQueueInternalServerError) WithPayload(payload *ghcmessages.Error) *GetCounselingQueueInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get counseling queue internal server error response
func (o *GetCounselingQueueInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCounselingQueueInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
