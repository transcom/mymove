// Code generated by go-swagger; DO NOT EDIT.

package queues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetDestinationRequestsQueueParams creates a new GetDestinationRequestsQueueParams object
//
// There are no default values defined in the spec.
func NewGetDestinationRequestsQueueParams() GetDestinationRequestsQueueParams {

	return GetDestinationRequestsQueueParams{}
}

// GetDestinationRequestsQueueParams contains all the bound params for the get destination requests queue operation
// typically these are obtained from a http.Request
//
// swagger:parameters getDestinationRequestsQueue
type GetDestinationRequestsQueueParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*user's actively logged in transportation office ID
	  In: query
	*/
	ActiveOfficeID *strfmt.UUID
	/*user's actively logged in role.

	  In: query
	*/
	ActiveRole *string
	/*
	  In: query
	*/
	AppearedInTooAt *strfmt.DateTime
	/*Used to illustrate which user is assigned to this move.

	  In: query
	*/
	AssignedTo *string
	/*
	  In: query
	*/
	Branch *string
	/*filters using a counselingOffice name of the move
	  In: query
	*/
	CounselingOffice *string
	/*
	  In: query
	*/
	CustomerName *string
	/*
	  In: query
	*/
	DestinationDutyLocation *string
	/*
	  In: query
	*/
	Edipi *string
	/*
	  In: query
	*/
	Emplid *string
	/*
	  In: query
	*/
	Locator *string
	/*direction of sort order if applied
	  In: query
	*/
	Order *string
	/*order type
	  In: query
	*/
	OrderType *string
	/*
	  Unique: true
	  In: query
	  Collection Format: multi
	*/
	OriginDutyLocation []string
	/*requested page of results
	  In: query
	*/
	Page *int64
	/*results per page
	  In: query
	*/
	PerPage *int64
	/*filters the requested pickup date of a shipment on the move
	  In: query
	*/
	RequestedMoveDate *string
	/*field that results should be sorted by
	  In: query
	*/
	Sort *string
	/*Filtering for the status.
	  Unique: true
	  In: query
	*/
	Status []string
	/*Used to return a queue for a GBLOC other than the default of the current user. Requires the HQ role or a secondary transportation office assignment. The parameter is ignored if the requesting user does not have the necessary role or assignment.

	  In: query
	*/
	ViewAsGBLOC *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetDestinationRequestsQueueParams() beforehand.
func (o *GetDestinationRequestsQueueParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qActiveOfficeID, qhkActiveOfficeID, _ := qs.GetOK("activeOfficeID")
	if err := o.bindActiveOfficeID(qActiveOfficeID, qhkActiveOfficeID, route.Formats); err != nil {
		res = append(res, err)
	}

	qActiveRole, qhkActiveRole, _ := qs.GetOK("activeRole")
	if err := o.bindActiveRole(qActiveRole, qhkActiveRole, route.Formats); err != nil {
		res = append(res, err)
	}

	qAppearedInTooAt, qhkAppearedInTooAt, _ := qs.GetOK("appearedInTooAt")
	if err := o.bindAppearedInTooAt(qAppearedInTooAt, qhkAppearedInTooAt, route.Formats); err != nil {
		res = append(res, err)
	}

	qAssignedTo, qhkAssignedTo, _ := qs.GetOK("assignedTo")
	if err := o.bindAssignedTo(qAssignedTo, qhkAssignedTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qBranch, qhkBranch, _ := qs.GetOK("branch")
	if err := o.bindBranch(qBranch, qhkBranch, route.Formats); err != nil {
		res = append(res, err)
	}

	qCounselingOffice, qhkCounselingOffice, _ := qs.GetOK("counselingOffice")
	if err := o.bindCounselingOffice(qCounselingOffice, qhkCounselingOffice, route.Formats); err != nil {
		res = append(res, err)
	}

	qCustomerName, qhkCustomerName, _ := qs.GetOK("customerName")
	if err := o.bindCustomerName(qCustomerName, qhkCustomerName, route.Formats); err != nil {
		res = append(res, err)
	}

	qDestinationDutyLocation, qhkDestinationDutyLocation, _ := qs.GetOK("destinationDutyLocation")
	if err := o.bindDestinationDutyLocation(qDestinationDutyLocation, qhkDestinationDutyLocation, route.Formats); err != nil {
		res = append(res, err)
	}

	qEdipi, qhkEdipi, _ := qs.GetOK("edipi")
	if err := o.bindEdipi(qEdipi, qhkEdipi, route.Formats); err != nil {
		res = append(res, err)
	}

	qEmplid, qhkEmplid, _ := qs.GetOK("emplid")
	if err := o.bindEmplid(qEmplid, qhkEmplid, route.Formats); err != nil {
		res = append(res, err)
	}

	qLocator, qhkLocator, _ := qs.GetOK("locator")
	if err := o.bindLocator(qLocator, qhkLocator, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrder, qhkOrder, _ := qs.GetOK("order")
	if err := o.bindOrder(qOrder, qhkOrder, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderType, qhkOrderType, _ := qs.GetOK("orderType")
	if err := o.bindOrderType(qOrderType, qhkOrderType, route.Formats); err != nil {
		res = append(res, err)
	}

	qOriginDutyLocation, qhkOriginDutyLocation, _ := qs.GetOK("originDutyLocation")
	if err := o.bindOriginDutyLocation(qOriginDutyLocation, qhkOriginDutyLocation, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qPerPage, qhkPerPage, _ := qs.GetOK("perPage")
	if err := o.bindPerPage(qPerPage, qhkPerPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qRequestedMoveDate, qhkRequestedMoveDate, _ := qs.GetOK("requestedMoveDate")
	if err := o.bindRequestedMoveDate(qRequestedMoveDate, qhkRequestedMoveDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qSort, qhkSort, _ := qs.GetOK("sort")
	if err := o.bindSort(qSort, qhkSort, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	qViewAsGBLOC, qhkViewAsGBLOC, _ := qs.GetOK("viewAsGBLOC")
	if err := o.bindViewAsGBLOC(qViewAsGBLOC, qhkViewAsGBLOC, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindActiveOfficeID binds and validates parameter ActiveOfficeID from query.
func (o *GetDestinationRequestsQueueParams) bindActiveOfficeID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("activeOfficeID", "query", "strfmt.UUID", raw)
	}
	o.ActiveOfficeID = (value.(*strfmt.UUID))

	if err := o.validateActiveOfficeID(formats); err != nil {
		return err
	}

	return nil
}

// validateActiveOfficeID carries on validations for parameter ActiveOfficeID
func (o *GetDestinationRequestsQueueParams) validateActiveOfficeID(formats strfmt.Registry) error {

	if err := validate.FormatOf("activeOfficeID", "query", "uuid", o.ActiveOfficeID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindActiveRole binds and validates parameter ActiveRole from query.
func (o *GetDestinationRequestsQueueParams) bindActiveRole(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ActiveRole = &raw

	return nil
}

// bindAppearedInTooAt binds and validates parameter AppearedInTooAt from query.
func (o *GetDestinationRequestsQueueParams) bindAppearedInTooAt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("appearedInTooAt", "query", "strfmt.DateTime", raw)
	}
	o.AppearedInTooAt = (value.(*strfmt.DateTime))

	if err := o.validateAppearedInTooAt(formats); err != nil {
		return err
	}

	return nil
}

// validateAppearedInTooAt carries on validations for parameter AppearedInTooAt
func (o *GetDestinationRequestsQueueParams) validateAppearedInTooAt(formats strfmt.Registry) error {

	if err := validate.FormatOf("appearedInTooAt", "query", "date-time", o.AppearedInTooAt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindAssignedTo binds and validates parameter AssignedTo from query.
func (o *GetDestinationRequestsQueueParams) bindAssignedTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.AssignedTo = &raw

	return nil
}

// bindBranch binds and validates parameter Branch from query.
func (o *GetDestinationRequestsQueueParams) bindBranch(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Branch = &raw

	return nil
}

// bindCounselingOffice binds and validates parameter CounselingOffice from query.
func (o *GetDestinationRequestsQueueParams) bindCounselingOffice(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.CounselingOffice = &raw

	return nil
}

// bindCustomerName binds and validates parameter CustomerName from query.
func (o *GetDestinationRequestsQueueParams) bindCustomerName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.CustomerName = &raw

	return nil
}

// bindDestinationDutyLocation binds and validates parameter DestinationDutyLocation from query.
func (o *GetDestinationRequestsQueueParams) bindDestinationDutyLocation(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.DestinationDutyLocation = &raw

	return nil
}

// bindEdipi binds and validates parameter Edipi from query.
func (o *GetDestinationRequestsQueueParams) bindEdipi(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Edipi = &raw

	return nil
}

// bindEmplid binds and validates parameter Emplid from query.
func (o *GetDestinationRequestsQueueParams) bindEmplid(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Emplid = &raw

	return nil
}

// bindLocator binds and validates parameter Locator from query.
func (o *GetDestinationRequestsQueueParams) bindLocator(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Locator = &raw

	return nil
}

// bindOrder binds and validates parameter Order from query.
func (o *GetDestinationRequestsQueueParams) bindOrder(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Order = &raw

	if err := o.validateOrder(formats); err != nil {
		return err
	}

	return nil
}

// validateOrder carries on validations for parameter Order
func (o *GetDestinationRequestsQueueParams) validateOrder(formats strfmt.Registry) error {

	if err := validate.EnumCase("order", "query", *o.Order, []interface{}{"asc", "desc"}, true); err != nil {
		return err
	}

	return nil
}

// bindOrderType binds and validates parameter OrderType from query.
func (o *GetDestinationRequestsQueueParams) bindOrderType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.OrderType = &raw

	return nil
}

// bindOriginDutyLocation binds and validates array parameter OriginDutyLocation from query.
//
// Arrays are parsed according to CollectionFormat: "multi" (defaults to "csv" when empty).
func (o *GetDestinationRequestsQueueParams) bindOriginDutyLocation(rawData []string, hasKey bool, formats strfmt.Registry) error {
	// CollectionFormat: multi
	originDutyLocationIC := rawData
	if len(originDutyLocationIC) == 0 {
		return nil
	}

	var originDutyLocationIR []string
	for _, originDutyLocationIV := range originDutyLocationIC {
		originDutyLocationI := originDutyLocationIV

		originDutyLocationIR = append(originDutyLocationIR, originDutyLocationI)
	}

	o.OriginDutyLocation = originDutyLocationIR
	if err := o.validateOriginDutyLocation(formats); err != nil {
		return err
	}

	return nil
}

// validateOriginDutyLocation carries on validations for parameter OriginDutyLocation
func (o *GetDestinationRequestsQueueParams) validateOriginDutyLocation(formats strfmt.Registry) error {

	// uniqueItems: true
	if err := validate.UniqueItems("originDutyLocation", "query", o.OriginDutyLocation); err != nil {
		return err
	}
	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *GetDestinationRequestsQueueParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = &value

	return nil
}

// bindPerPage binds and validates parameter PerPage from query.
func (o *GetDestinationRequestsQueueParams) bindPerPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("perPage", "query", "int64", raw)
	}
	o.PerPage = &value

	return nil
}

// bindRequestedMoveDate binds and validates parameter RequestedMoveDate from query.
func (o *GetDestinationRequestsQueueParams) bindRequestedMoveDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.RequestedMoveDate = &raw

	return nil
}

// bindSort binds and validates parameter Sort from query.
func (o *GetDestinationRequestsQueueParams) bindSort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Sort = &raw

	if err := o.validateSort(formats); err != nil {
		return err
	}

	return nil
}

// validateSort carries on validations for parameter Sort
func (o *GetDestinationRequestsQueueParams) validateSort(formats strfmt.Registry) error {

	if err := validate.EnumCase("sort", "query", *o.Sort, []interface{}{"customerName", "edipi", "emplid", "branch", "locator", "status", "originDutyLocation", "destinationDutyLocation", "requestedMoveDate", "appearedInTooAt", "assignedTo", "counselingOffice"}, true); err != nil {
		return err
	}

	return nil
}

// bindStatus binds and validates array parameter Status from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetDestinationRequestsQueueParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvStatus string
	if len(rawData) > 0 {
		qvStatus = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	statusIC := swag.SplitByFormat(qvStatus, "")
	if len(statusIC) == 0 {
		return nil
	}

	var statusIR []string
	for i, statusIV := range statusIC {
		statusI := statusIV

		if err := validate.EnumCase(fmt.Sprintf("%s.%v", "status", i), "query", statusI, []interface{}{"SUBMITTED", "SERVICE COUNSELING COMPLETED", "APPROVALS REQUESTED"}, true); err != nil {
			return err
		}

		statusIR = append(statusIR, statusI)
	}

	o.Status = statusIR
	if err := o.validateStatus(formats); err != nil {
		return err
	}

	return nil
}

// validateStatus carries on validations for parameter Status
func (o *GetDestinationRequestsQueueParams) validateStatus(formats strfmt.Registry) error {

	// uniqueItems: true
	if err := validate.UniqueItems("status", "query", o.Status); err != nil {
		return err
	}
	return nil
}

// bindViewAsGBLOC binds and validates parameter ViewAsGBLOC from query.
func (o *GetDestinationRequestsQueueParams) bindViewAsGBLOC(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ViewAsGBLOC = &raw

	return nil
}
