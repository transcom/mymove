// Code generated by go-swagger; DO NOT EDIT.

package queues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPPMCloseoutQueueHandlerFunc turns a function with the right signature into a get p p m closeout queue handler
type GetPPMCloseoutQueueHandlerFunc func(GetPPMCloseoutQueueParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPPMCloseoutQueueHandlerFunc) Handle(params GetPPMCloseoutQueueParams) middleware.Responder {
	return fn(params)
}

// GetPPMCloseoutQueueHandler interface for that can handle valid get p p m closeout queue params
type GetPPMCloseoutQueueHandler interface {
	Handle(GetPPMCloseoutQueueParams) middleware.Responder
}

// NewGetPPMCloseoutQueue creates a new http.Handler for the get p p m closeout queue operation
func NewGetPPMCloseoutQueue(ctx *middleware.Context, handler GetPPMCloseoutQueueHandler) *GetPPMCloseoutQueue {
	return &GetPPMCloseoutQueue{Context: ctx, Handler: handler}
}

/*
	GetPPMCloseoutQueue swagger:route GET /queues/ppmCloseout queues getPPMCloseoutQueue

# Gets queued list of all customer moves needing PPM closeout by GBLOC origin

An office services counselor user will be assigned a transportation office that will determine which moves are displayed in their queue based on the origin duty location. Personally procured moves will show up here once they are pending closeout by the services counselor. The services counselor is the designated role to action the items in this queue.
*/
type GetPPMCloseoutQueue struct {
	Context *middleware.Context
	Handler GetPPMCloseoutQueueHandler
}

func (o *GetPPMCloseoutQueue) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPPMCloseoutQueueParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
