// Code generated by go-swagger; DO NOT EDIT.

package queues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetServicesCounselingQueueHandlerFunc turns a function with the right signature into a get services counseling queue handler
type GetServicesCounselingQueueHandlerFunc func(GetServicesCounselingQueueParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetServicesCounselingQueueHandlerFunc) Handle(params GetServicesCounselingQueueParams) middleware.Responder {
	return fn(params)
}

// GetServicesCounselingQueueHandler interface for that can handle valid get services counseling queue params
type GetServicesCounselingQueueHandler interface {
	Handle(GetServicesCounselingQueueParams) middleware.Responder
}

// NewGetServicesCounselingQueue creates a new http.Handler for the get services counseling queue operation
func NewGetServicesCounselingQueue(ctx *middleware.Context, handler GetServicesCounselingQueueHandler) *GetServicesCounselingQueue {
	return &GetServicesCounselingQueue{Context: ctx, Handler: handler}
}

/*GetServicesCounselingQueue swagger:route GET /queues/counseling queues getServicesCounselingQueue

Gets queued list of all customer moves needing services counseling by GBLOC origin

An office services counselor user will be assigned a transportation office that will determine which moves are displayed in their queue based on the origin duty station.  GHC moves will show up here onced they have reached the NEEDS SERVICE COUNSELING status after submission from a customer or created on a customer's behalf.


*/
type GetServicesCounselingQueue struct {
	Context *middleware.Context
	Handler GetServicesCounselingQueueHandler
}

func (o *GetServicesCounselingQueue) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetServicesCounselingQueueParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
