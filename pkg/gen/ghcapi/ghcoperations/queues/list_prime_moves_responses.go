// Code generated by go-swagger; DO NOT EDIT.

package queues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// ListPrimeMovesOKCode is the HTTP code returned for type ListPrimeMovesOK
const ListPrimeMovesOKCode int = 200

/*
ListPrimeMovesOK Successfully retrieved moves. A successful fetch might still return zero moves.

swagger:response listPrimeMovesOK
*/
type ListPrimeMovesOK struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.ListPrimeMovesResult `json:"body,omitempty"`
}

// NewListPrimeMovesOK creates ListPrimeMovesOK with default headers values
func NewListPrimeMovesOK() *ListPrimeMovesOK {

	return &ListPrimeMovesOK{}
}

// WithPayload adds the payload to the list prime moves o k response
func (o *ListPrimeMovesOK) WithPayload(payload *ghcmessages.ListPrimeMovesResult) *ListPrimeMovesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list prime moves o k response
func (o *ListPrimeMovesOK) SetPayload(payload *ghcmessages.ListPrimeMovesResult) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListPrimeMovesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListPrimeMovesForbiddenCode is the HTTP code returned for type ListPrimeMovesForbidden
const ListPrimeMovesForbiddenCode int = 403

/*
ListPrimeMovesForbidden The request was denied

swagger:response listPrimeMovesForbidden
*/
type ListPrimeMovesForbidden struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewListPrimeMovesForbidden creates ListPrimeMovesForbidden with default headers values
func NewListPrimeMovesForbidden() *ListPrimeMovesForbidden {

	return &ListPrimeMovesForbidden{}
}

// WithPayload adds the payload to the list prime moves forbidden response
func (o *ListPrimeMovesForbidden) WithPayload(payload *ghcmessages.Error) *ListPrimeMovesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list prime moves forbidden response
func (o *ListPrimeMovesForbidden) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListPrimeMovesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListPrimeMovesInternalServerErrorCode is the HTTP code returned for type ListPrimeMovesInternalServerError
const ListPrimeMovesInternalServerErrorCode int = 500

/*
ListPrimeMovesInternalServerError A server error occurred

swagger:response listPrimeMovesInternalServerError
*/
type ListPrimeMovesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ghcmessages.Error `json:"body,omitempty"`
}

// NewListPrimeMovesInternalServerError creates ListPrimeMovesInternalServerError with default headers values
func NewListPrimeMovesInternalServerError() *ListPrimeMovesInternalServerError {

	return &ListPrimeMovesInternalServerError{}
}

// WithPayload adds the payload to the list prime moves internal server error response
func (o *ListPrimeMovesInternalServerError) WithPayload(payload *ghcmessages.Error) *ListPrimeMovesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list prime moves internal server error response
func (o *ListPrimeMovesInternalServerError) SetPayload(payload *ghcmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListPrimeMovesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
