// Code generated by go-swagger; DO NOT EDIT.

package queues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDestinationRequestsQueueHandlerFunc turns a function with the right signature into a get destination requests queue handler
type GetDestinationRequestsQueueHandlerFunc func(GetDestinationRequestsQueueParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDestinationRequestsQueueHandlerFunc) Handle(params GetDestinationRequestsQueueParams) middleware.Responder {
	return fn(params)
}

// GetDestinationRequestsQueueHandler interface for that can handle valid get destination requests queue params
type GetDestinationRequestsQueueHandler interface {
	Handle(GetDestinationRequestsQueueParams) middleware.Responder
}

// NewGetDestinationRequestsQueue creates a new http.Handler for the get destination requests queue operation
func NewGetDestinationRequestsQueue(ctx *middleware.Context, handler GetDestinationRequestsQueueHandler) *GetDestinationRequestsQueue {
	return &GetDestinationRequestsQueue{Context: ctx, Handler: handler}
}

/*
	GetDestinationRequestsQueue swagger:route GET /queues/destination-requests queues getDestinationRequestsQueue

Gets queued list of all customer moves by GBLOC that have destination requests (destination SIT, shuttle, address requests)

A TOO will view this queue when they have destination requests tied to their GBLOC. This includes unapproved destination SIT service items (including shuttle) and destination address requests that are not approved.
*/
type GetDestinationRequestsQueue struct {
	Context *middleware.Context
	Handler GetDestinationRequestsQueueHandler
}

func (o *GetDestinationRequestsQueue) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetDestinationRequestsQueueParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
