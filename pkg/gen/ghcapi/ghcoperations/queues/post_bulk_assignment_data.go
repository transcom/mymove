// Code generated by go-swagger; DO NOT EDIT.

package queues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostBulkAssignmentDataHandlerFunc turns a function with the right signature into a post bulk assignment data handler
type PostBulkAssignmentDataHandlerFunc func(PostBulkAssignmentDataParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostBulkAssignmentDataHandlerFunc) Handle(params PostBulkAssignmentDataParams) middleware.Responder {
	return fn(params)
}

// PostBulkAssignmentDataHandler interface for that can handle valid post bulk assignment data params
type PostBulkAssignmentDataHandler interface {
	Handle(PostBulkAssignmentDataParams) middleware.Responder
}

// NewPostBulkAssignmentData creates a new http.Handler for the post bulk assignment data operation
func NewPostBulkAssignmentData(ctx *middleware.Context, handler PostBulkAssignmentDataHandler) *PostBulkAssignmentData {
	return &PostBulkAssignmentData{Context: ctx, Handler: handler}
}

/*
	PostBulkAssignmentData swagger:route POST /queues/bulk-assignment/assign queues postBulkAssignmentData

# Assigns one or more moves to one or more office users

Supervisor office users are able to assign moves. This endpoint saves office user assignments to multiple moves.
*/
type PostBulkAssignmentData struct {
	Context *middleware.Context
	Handler PostBulkAssignmentDataHandler
}

func (o *PostBulkAssignmentData) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostBulkAssignmentDataParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
