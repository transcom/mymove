// Code generated by go-swagger; DO NOT EDIT.

package service_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetServiceItemHandlerFunc turns a function with the right signature into a get service item handler
type GetServiceItemHandlerFunc func(GetServiceItemParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetServiceItemHandlerFunc) Handle(params GetServiceItemParams) middleware.Responder {
	return fn(params)
}

// GetServiceItemHandler interface for that can handle valid get service item params
type GetServiceItemHandler interface {
	Handle(GetServiceItemParams) middleware.Responder
}

// NewGetServiceItem creates a new http.Handler for the get service item operation
func NewGetServiceItem(ctx *middleware.Context, handler GetServiceItemHandler) *GetServiceItem {
	return &GetServiceItem{Context: ctx, Handler: handler}
}

/*GetServiceItem swagger:route GET /move-task-orders/{moveTaskOrderID}/service-items/{serviceItemID} serviceItem getServiceItem

Gets a line item by ID for a move order by ID

Gets a line item by ID for a move order by ID

*/
type GetServiceItem struct {
	Context *middleware.Context
	Handler GetServiceItemHandler
}

func (o *GetServiceItem) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetServiceItemParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
