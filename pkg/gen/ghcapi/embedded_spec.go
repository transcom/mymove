// Code generated by go-swagger; DO NOT EDIT.

package ghcapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The API for move.mil",
    "title": "move.mil API",
    "contact": {
      "email": "dp3@truss.works"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/ghc/v1",
  "paths": {
    "/customer/{customerID}": {
      "get": {
        "description": "Returns a given customer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Returns a given customer",
        "operationId": "getCustomer",
        "responses": {
          "200": {
            "description": "Successfully retrieved information on an individual customer",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of customer to use",
          "name": "customerID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-orders": {
      "get": {
        "description": "Gets all move orders",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveOrder"
        ],
        "summary": "Gets all move orders",
        "operationId": "listMoveOrders",
        "responses": {
          "200": {
            "description": "Successfully retrieved all move orders",
            "schema": {
              "$ref": "#/definitions/MoveOrders"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      }
    },
    "/move-orders/{moveOrderID}": {
      "get": {
        "description": "Gets a move order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveOrder"
        ],
        "summary": "Gets a move order by ID",
        "operationId": "getMoveOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieved move order",
            "schema": {
              "$ref": "#/definitions/MoveOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of customer to use",
          "name": "moveOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-orders/{moveOrderID}/move-task-orders": {
      "get": {
        "description": "Gets move task orders associated with a move order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveOrder"
        ],
        "summary": "Gets move task orders associated with a move order",
        "operationId": "listMoveTaskOrders",
        "responses": {
          "200": {
            "description": "Successfully retrieved all move task orders associated with a move order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrders"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move order to use",
          "name": "moveOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}": {
      "get": {
        "description": "Gets a move order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Gets a move order by ID",
        "operationId": "getMoveTaskOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieved move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a move order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Deletes a move order by ID",
        "operationId": "deleteMoveTaskOrder",
        "responses": {
          "200": {
            "description": "Successfully deleted move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "patch": {
        "description": "Updates a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Updates a move order by ID",
        "operationId": "updateMoveTaskOrder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/entitlements": {
      "get": {
        "description": "Gets entitlements",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Gets entitlements for a move order by ID",
        "operationId": "getEntitlements",
        "responses": {
          "200": {
            "description": "Successfully retrieved entitlements",
            "schema": {
              "$ref": "#/definitions/Entitlements"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/payment-service-items/{paymentServiceItemID}/status": {
      "patch": {
        "description": "Changes the status of a line item for a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentServiceItem"
        ],
        "summary": "Change the status of a payment service item for a move order by ID",
        "operationId": "updatePaymentServiceItemStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentServiceItem"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status for a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/PaymentServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of payment service item to use",
          "name": "paymentServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}": {
      "get": {
        "description": "Gets a line item by ID for a move order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Gets a line item by ID for a move order by ID",
        "operationId": "getMTOServiceItem",
        "responses": {
          "200": {
            "description": "Successfully retrieved a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a line item by ID for a move order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Deletes a line item by ID for a move order by ID",
        "operationId": "deleteMTOServiceItem",
        "responses": {
          "200": {
            "description": "Successfully deleted move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "patch": {
        "description": "Updates a service item by ID for a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Updates a service item by ID for a move order by ID",
        "operationId": "updateMTOServiceItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order status",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of line item to use",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}/status": {
      "patch": {
        "description": "Changes the status of a line item for a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Change the status of a line item for a move order by ID",
        "operationId": "updateMTOServiceItemStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMTOServiceItemStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status for a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of line item to use",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/status": {
      "patch": {
        "description": "Changes move task order status to make it available to prime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Change the status of a move task order to make it available to prime",
        "operationId": "updateMoveTaskOrderStatus",
        "parameters": [
          {
            "type": "string",
            "description": "ID of move order to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "serviceItemCodes",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOApprovalServiceItemCodes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order status",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      }
    },
    "/move/{locator}": {
      "get": {
        "description": "Returns a given move",
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Returns a given move",
        "operationId": "getMove",
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "The locator provided is invalid"
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Code used to identify a move in the system",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_service_items": {
      "get": {
        "description": "Gets all line items for a move orders",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Gets all line items for a move order",
        "operationId": "listMTOServiceItems",
        "responses": {
          "200": {
            "description": "Successfully retrieved all line items for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOServiceItems"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "post": {
        "description": "Creates a service item for a move order by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Creates a service item for a move order by id",
        "operationId": "createMTOServiceItem",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of move order to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "description": "ID of the rate engine services",
            "name": "createMTOServiceItemBody",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "reServiceID",
                "mtoShipmentID"
              ],
              "properties": {
                "mtoShipmentID": {
                  "type": "string",
                  "format": "uuid"
                },
                "reServiceID": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created service item for move task order",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move order for mto service item to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments": {
      "get": {
        "description": "Gets all shipments for a move task order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Gets all shipments for a move task order",
        "operationId": "listMTOShipments",
        "responses": {
          "200": {
            "description": "Successfully retrieved all mto shipments for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOShipments"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order for mto shipment to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}/mto-agents": {
      "get": {
        "description": "Fetches a list of agents associated with a move task order.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoAgent"
        ],
        "summary": "Fetch move task order agents.",
        "operationId": "fetchMTOAgentList",
        "responses": {
          "200": {
            "description": "Successfully retrieved all agents for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOAgents"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}/status": {
      "patch": {
        "description": "Updates a shipment's status",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Updates a shipment's status",
        "operationId": "patchMTOShipmentStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMTOShipmentStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated shipment",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/responses/Conflict"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order for mto shipment to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests": {
      "get": {
        "description": "Gets a list of payment requests",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests",
          "gov"
        ],
        "summary": "Gets payment requests",
        "operationId": "listPaymentRequests",
        "responses": {
          "200": {
            "description": "fetched list of payment requests",
            "schema": {
              "$ref": "#/definitions/PaymentRequests"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/payment-requests/{paymentRequestID}": {
      "get": {
        "description": "Fetches an instance of a payment request by id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests",
          "gov"
        ],
        "summary": "Fetches a payment request by id",
        "operationId": "getPaymentRequest",
        "responses": {
          "200": {
            "description": "fetched instance of payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "patch": {
        "description": "Updates a payment request by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Updates a payment request by id",
        "operationId": "updatePaymentRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePaymentRequestPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of payment request",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}/status": {
      "patch": {
        "description": "Updates status of a payment request by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests",
          "gov"
        ],
        "summary": "Updates status of a payment request by id",
        "operationId": "updatePaymentRequestStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of payment request",
            "name": "paymentRequestID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePaymentRequestStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "required": [
        "street_address_1",
        "city",
        "state",
        "postal_code"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "street_address_1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "street_address_2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "street_address_3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "agency": {
          "type": "string",
          "title": "Agency customer is affilated with"
        },
        "current_address": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "dodID": {
          "type": "string"
        },
        "eTag": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "CustomerContactType": {
      "description": "Describes a customer contact type for a MTOServiceItem of type domestic destination SIT.",
      "type": "string",
      "enum": [
        "FIRST",
        "SECOND"
      ]
    },
    "DeptIndicator": {
      "type": "string",
      "title": "Dept. indicator",
      "enum": [
        "NAVY_AND_MARINES",
        "ARMY",
        "AIR_FORCE",
        "COAST_GUARD"
      ],
      "x-display-value": {
        "AIR_FORCE": "57 Air Force",
        "ARMY": "21 Army",
        "COAST_GUARD": "70 Coast Guard",
        "NAVY_AND_MARINES": "17 Navy and Marine Corps"
      }
    },
    "DimensionType": {
      "description": "Describes a dimension type for a MTOServiceItemDimension.",
      "type": "string",
      "enum": [
        "ITEM",
        "CRATE"
      ]
    },
    "DutyStation": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "address_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        }
      }
    },
    "Entitlements": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "571008b1-b0de-454d-b843-d71be9f02c04"
        },
        "nonTemporaryStorage": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "privatelyOwnedVehicle": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "proGearWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 2000
        },
        "proGearWeightSpouse": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "storageInTransit": {
          "type": "integer",
          "example": 90
        },
        "totalDependents": {
          "type": "integer",
          "example": 2
        },
        "totalWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "type": "string",
          "enum": [
            "RELEASING_AGENT",
            "RECEIVING_AGENT"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOAgents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOApprovalServiceItemCode": {
      "type": "string",
      "enum": [
        "MS",
        "CS"
      ]
    },
    "MTOApprovalServiceItemCodes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOApprovalServiceItemCode"
      }
    },
    "MTOServiceItem": {
      "type": "object",
      "required": [
        "id",
        "moveTaskOrderID",
        "reServiceID",
        "reServiceCode",
        "reServiceName",
        "mtoShipmentID",
        "reason",
        "pickupPostalCode",
        "description"
      ],
      "properties": {
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerContacts": {
          "$ref": "#/definitions/MTOServiceItemCustomerContacts"
        },
        "deletedAt": {
          "type": "string",
          "format": "date"
        },
        "description": {
          "type": "string"
        },
        "dimensions": {
          "$ref": "#/definitions/MTOServiceItemDimensions"
        },
        "eTag": {
          "type": "string"
        },
        "feeType": {
          "type": "string",
          "enum": [
            "COUNSELING",
            "CRATING",
            "TRUCKING",
            "SHUTTLE"
          ]
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupPostalCode": {
          "type": "string"
        },
        "quantity": {
          "type": "integer"
        },
        "rate": {
          "type": "integer"
        },
        "reServiceCode": {
          "type": "string"
        },
        "reServiceID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "rejectedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date"
        },
        "total": {
          "type": "integer",
          "format": "cents"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOServiceItemCustomerContact": {
      "description": "Customer contact information for a destination SIT service item",
      "type": "object",
      "properties": {
        "firstAvailableDeliveryDate": {
          "description": "First available date that Prime can deliver SIT service item.",
          "type": "string",
          "format": "date",
          "example": "2020-12-31"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "timeMilitary": {
          "description": "Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate` + "`" + `.",
          "type": "string",
          "example": "0400Z"
        },
        "type": {
          "$ref": "#/definitions/CustomerContactType"
        }
      }
    },
    "MTOServiceItemCustomerContacts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItemCustomerContact"
      }
    },
    "MTOServiceItemDimension": {
      "description": "Describes a dimension object for the MTOServiceItem.",
      "type": "object",
      "properties": {
        "height": {
          "description": "Height in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "length": {
          "description": "Length in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "type": {
          "$ref": "#/definitions/DimensionType"
        },
        "width": {
          "description": "Width in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        }
      }
    },
    "MTOServiceItemDimensions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItemDimension"
      }
    },
    "MTOServiceItemStatus": {
      "description": "Describes all statuses for a MTOServiceItem",
      "type": "string",
      "enum": [
        "SUBMITTED",
        "APPROVED",
        "REJECTED"
      ]
    },
    "MTOServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItem"
      }
    },
    "MTOServiceItemstatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "SUBMITTED",
            "REJECTED"
          ]
        }
      }
    },
    "MTOShipment": {
      "properties": {
        "approvedDate": {
          "type": "string",
          "format": "date"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "primeActualWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "primeEstimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment not good enough"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "scheduledPickupDate": {
          "type": "string",
          "format": "date"
        },
        "secondaryDeliveryAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "enum": [
            "HHG",
            "INTERNATIONAL_HHG",
            "INTERNATIONAL_UB"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "SUBMITTED",
            "REJECTED"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOShipments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "Move": {
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "locator": {
          "type": "string",
          "example": "1K43A"
        },
        "orders_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveOrder": {
      "type": "object",
      "properties": {
        "agency": {
          "type": "string",
          "example": "civilian"
        },
        "confirmation_number": {
          "type": "string",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "customerID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "date_issued": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "department_indicator": {
          "x-nullable": true,
          "$ref": "#/definitions/DeptIndicator"
        },
        "destinationDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "eTag": {
          "type": "string"
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlements"
        },
        "first_name": {
          "type": "string",
          "readOnly": true,
          "example": "John"
        },
        "grade": {
          "type": "string",
          "example": "E_1"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "last_name": {
          "type": "string",
          "readOnly": true,
          "example": "Doe"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "order_number": {
          "type": "string",
          "x-nullable": true,
          "example": "030-00362"
        },
        "order_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "order_type_detail": {
          "x-nullable": true,
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "report_by_date": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "MoveOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveOrder"
      }
    },
    "MoveTaskOrder": {
      "type": "object",
      "properties": {
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "destinationDutyStation": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "eTag": {
          "type": "string"
        },
        "entitlements": {
          "$ref": "#/definitions/Entitlements"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "isCanceled": {
          "type": "boolean",
          "x-nullable": true
        },
        "moveOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "originDutyStation": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveTaskOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveTaskOrder"
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "RETIREMENT",
        "SEPARATION"
      ],
      "x-display-value": {
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station",
        "RETIREMENT": "Retirement",
        "SEPARATION": "Separation"
      }
    },
    "OrdersTypeDetail": {
      "type": "string",
      "title": "Orders type detail",
      "enum": [
        "HHG_PERMITTED",
        "PCS_TDY",
        "HHG_RESTRICTED_PROHIBITED",
        "HHG_RESTRICTED_AREA",
        "INSTRUCTION_20_WEEKS",
        "HHG_PROHIBITED_20_WEEKS",
        "DELAYED_APPROVAL"
      ],
      "x-display-value": {
        "DELAYED_APPROVAL": "Delayed Approval 20 Weeks or More",
        "HHG_PERMITTED": "Shipment of HHG Permitted",
        "HHG_PROHIBITED_20_WEEKS": "Shipment of HHG Prohibited but Authorized within 20 weeks",
        "HHG_RESTRICTED_AREA": "HHG Restricted Area-HHG Prohibited",
        "HHG_RESTRICTED_PROHIBITED": "Shipment of HHG Restricted or Prohibited",
        "INSTRUCTION_20_WEEKS": "Course of Instruction 20 Weeks or More",
        "PCS_TDY": "PCS with TDY Enroute"
      }
    },
    "PatchMTOServiceItemStatusPayload": {
      "properties": {
        "rejectionReason": {
          "description": "Reason the service item was rejected",
          "type": "string",
          "x-nullable": true,
          "example": "Insufficent details provided"
        },
        "status": {
          "description": "Describes all statuses for a MTOServiceItem",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "APPROVED",
            "REJECTED"
          ]
        }
      }
    },
    "PatchMTOShipmentStatusPayload": {
      "properties": {
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment not good enough"
        },
        "status": {
          "type": "string",
          "enum": [
            "REJECTED",
            "APPROVED",
            "SUBMITTED"
          ]
        }
      }
    },
    "PaymentRequest": {
      "type": "object",
      "properties": {
        "documentPackage": {
          "$ref": "#/definitions/ProofOfServicePackage"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestNumber": {
          "type": "string",
          "readOnly": true,
          "example": "1234-5678-1"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "reviewedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "serviceItems": {
          "$ref": "#/definitions/PaymentServiceItems"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "PaymentRequestStatus": {
      "type": "string",
      "title": "Payment Request Status",
      "enum": [
        "PENDING",
        "REVIEWED",
        "SENT_TO_GEX",
        "RECEIVED_BY_GEX",
        "PAID"
      ]
    },
    "PaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentRequest"
      }
    },
    "PaymentServiceItem": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentServiceItemParams": {
          "$ref": "#/definitions/PaymentServiceItemParams"
        },
        "priceCents": {
          "type": "integer",
          "format": "cents",
          "title": "Price of the service item in cents",
          "x-nullable": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentServiceItemStatus"
        }
      }
    },
    "PaymentServiceItemParam": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "key": {
          "$ref": "#/definitions/ServiceItemParamName"
        },
        "origin": {
          "$ref": "#/definitions/ServiceItemParamOrigin"
        },
        "paymentServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "type": {
          "$ref": "#/definitions/ServiceItemParamType"
        },
        "value": {
          "type": "string",
          "example": 3025
        }
      }
    },
    "PaymentServiceItemParams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItemParam"
      }
    },
    "PaymentServiceItemStatus": {
      "type": "string",
      "title": "Payment Service Item Status",
      "enum": [
        "REQUESTED",
        "APPROVED",
        "DENIED",
        "SENT_TO_GEX",
        "PAID"
      ]
    },
    "PaymentServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItem"
      }
    },
    "ProofOfServicePackage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "ReServiceCode": {
      "description": "This is the full list of service items that can be found on a shipment. Not all service items\nmay be requested by the Prime, but may be returned in a response.\n\nDocumentation of all the service items will be provided.\n",
      "type": "string",
      "enum": [
        "CS",
        "DBHF",
        "DBTF",
        "DCRT",
        "DCRTSA",
        "DDASIT",
        "DDDSIT",
        "DDFSIT",
        "DDP",
        "DDSHUT",
        "DLH",
        "DMHF",
        "DNPKF",
        "DOASIT",
        "DOFSIT",
        "DOP",
        "DOPSIT",
        "DOSHUT",
        "DPK",
        "DSH",
        "DUCRT",
        "DUPK",
        "FSC",
        "IBHF",
        "IBTF",
        "ICOLH",
        "ICOUB",
        "ICRT",
        "ICRTSA",
        "IDASIT",
        "IDDSIT",
        "IDFSIT",
        "IDSHUT",
        "IHPK",
        "IHUPK",
        "INPKF",
        "IOASIT",
        "IOCLH",
        "IOCUB",
        "IOFSIT",
        "IOOLH",
        "IOOUB",
        "IOPSIT",
        "IOSHUT",
        "IUBPK",
        "IUBUPK",
        "IUCRT",
        "MS",
        "NSTH",
        "NSTUB"
      ]
    },
    "ServiceItem": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "params": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "example": "Service Item Parameter Name"
              },
              "value": {
                "type": "string",
                "example": "Service Item Parameter Value"
              }
            }
          },
          "readOnly": true
        }
      }
    },
    "ServiceItemParamName": {
      "type": "string",
      "enum": [
        "ActualPickupDate",
        "CanStandAlone",
        "ContractCode",
        "CubicFeetBilled",
        "CubicFeetCrating",
        "DistanceZip3",
        "DistanceZip5",
        "DistanceZip5SITDest",
        "DistanceZip5SITOrigin",
        "EIAFuelPrice",
        "FSCWeightBasedDistanceMultiplier",
        "MarketDest",
        "MarketOrigin",
        "MTOAvailableToPrimeAt",
        "NumberDaysSIT",
        "PriceAreaDest",
        "PriceAreaIntlDest",
        "PriceAreaIntlOrigin",
        "PriceAreaOrigin",
        "PSI_LinehaulDom",
        "PSI_LinehaulDomPrice",
        "PSI_LinehaulShort",
        "PSI_LinehaulShortPrice",
        "PSI_PackingDom",
        "PSI_PackingDomPrice",
        "PSI_PackingHHGIntl",
        "PSI_PackingHHGIntlPrice",
        "PSI_PriceDomDest",
        "PSI_PriceDomDestPrice",
        "PSI_PriceDomOrigin",
        "PSI_PriceDomOriginPrice",
        "PSI_ShippingLinehaulIntlCO",
        "PSI_ShippingLinehaulIntlCOPrice",
        "PSI_ShippingLinehaulIntlOC",
        "PSI_ShippingLinehaulIntlOCPrice",
        "PSI_ShippingLinehaulIntlOO",
        "PSI_ShippingLinehaulIntlOOPrice",
        "RateAreaNonStdDest",
        "RateAreaNonStdOrigin",
        "RequestedPickupDate",
        "ServiceAreaDest",
        "ServiceAreaOrigin",
        "ServicesScheduleDest",
        "ServicesScheduleOrigin",
        "SITScheduleDest",
        "SITScheduleOrigin",
        "WeightActual",
        "WeightBilledActual",
        "WeightEstimated",
        "ZipDestAddress",
        "ZipPickupAddress",
        "ZipSITAddress"
      ]
    },
    "ServiceItemParamOrigin": {
      "type": "string",
      "enum": [
        "PRIME",
        "SYSTEM"
      ]
    },
    "ServiceItemParamType": {
      "type": "string",
      "enum": [
        "STRING",
        "DATE",
        "INTEGER",
        "DECIMAL",
        "TIMESTAMP",
        "PaymentServiceItemUUID"
      ]
    },
    "UpdatePaymentRequestPayload": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "proofOfServicePackage": {
          "$ref": "#/definitions/ProofOfServicePackage"
        },
        "serviceItemIDs": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          }
        }
      }
    },
    "UpdatePaymentRequestStatusPayload": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "Upload": {
      "type": "object",
      "required": [
        "id",
        "url",
        "filename",
        "contentType",
        "bytes",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "bytes": {
          "type": "integer"
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "filename": {
          "type": "string",
          "format": "binary",
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalid_fields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "type": "object"
        }
      ],
      "properties": {
        "invalid_fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    }
  },
  "responses": {
    "Conflict": {
      "description": "Conflict error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ServerError": {
      "description": "A server error occurred",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The API for move.mil",
    "title": "move.mil API",
    "contact": {
      "email": "dp3@truss.works"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/ghc/v1",
  "paths": {
    "/customer/{customerID}": {
      "get": {
        "description": "Returns a given customer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Returns a given customer",
        "operationId": "getCustomer",
        "responses": {
          "200": {
            "description": "Successfully retrieved information on an individual customer",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of customer to use",
          "name": "customerID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-orders": {
      "get": {
        "description": "Gets all move orders",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveOrder"
        ],
        "summary": "Gets all move orders",
        "operationId": "listMoveOrders",
        "responses": {
          "200": {
            "description": "Successfully retrieved all move orders",
            "schema": {
              "$ref": "#/definitions/MoveOrders"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "/move-orders/{moveOrderID}": {
      "get": {
        "description": "Gets a move order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveOrder"
        ],
        "summary": "Gets a move order by ID",
        "operationId": "getMoveOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieved move order",
            "schema": {
              "$ref": "#/definitions/MoveOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of customer to use",
          "name": "moveOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-orders/{moveOrderID}/move-task-orders": {
      "get": {
        "description": "Gets move task orders associated with a move order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveOrder"
        ],
        "summary": "Gets move task orders associated with a move order",
        "operationId": "listMoveTaskOrders",
        "responses": {
          "200": {
            "description": "Successfully retrieved all move task orders associated with a move order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrders"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move order to use",
          "name": "moveOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}": {
      "get": {
        "description": "Gets a move order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Gets a move order by ID",
        "operationId": "getMoveTaskOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieved move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a move order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Deletes a move order by ID",
        "operationId": "deleteMoveTaskOrder",
        "responses": {
          "200": {
            "description": "Successfully deleted move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Updates a move order by ID",
        "operationId": "updateMoveTaskOrder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/entitlements": {
      "get": {
        "description": "Gets entitlements",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Gets entitlements for a move order by ID",
        "operationId": "getEntitlements",
        "responses": {
          "200": {
            "description": "Successfully retrieved entitlements",
            "schema": {
              "$ref": "#/definitions/Entitlements"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/payment-service-items/{paymentServiceItemID}/status": {
      "patch": {
        "description": "Changes the status of a line item for a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentServiceItem"
        ],
        "summary": "Change the status of a payment service item for a move order by ID",
        "operationId": "updatePaymentServiceItemStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentServiceItem"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status for a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/PaymentServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of payment service item to use",
          "name": "paymentServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}": {
      "get": {
        "description": "Gets a line item by ID for a move order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Gets a line item by ID for a move order by ID",
        "operationId": "getMTOServiceItem",
        "responses": {
          "200": {
            "description": "Successfully retrieved a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a line item by ID for a move order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Deletes a line item by ID for a move order by ID",
        "operationId": "deleteMTOServiceItem",
        "responses": {
          "200": {
            "description": "Successfully deleted move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates a service item by ID for a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Updates a service item by ID for a move order by ID",
        "operationId": "updateMTOServiceItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order status",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of line item to use",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}/status": {
      "patch": {
        "description": "Changes the status of a line item for a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Change the status of a line item for a move order by ID",
        "operationId": "updateMTOServiceItemStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMTOServiceItemStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status for a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of line item to use",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/status": {
      "patch": {
        "description": "Changes move task order status to make it available to prime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Change the status of a move task order to make it available to prime",
        "operationId": "updateMoveTaskOrderStatus",
        "parameters": [
          {
            "type": "string",
            "description": "ID of move order to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "serviceItemCodes",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOApprovalServiceItemCodes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order status",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "/move/{locator}": {
      "get": {
        "description": "Returns a given move",
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Returns a given move",
        "operationId": "getMove",
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "The locator provided is invalid"
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Code used to identify a move in the system",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_service_items": {
      "get": {
        "description": "Gets all line items for a move orders",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Gets all line items for a move order",
        "operationId": "listMTOServiceItems",
        "responses": {
          "200": {
            "description": "Successfully retrieved all line items for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOServiceItems"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a service item for a move order by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Creates a service item for a move order by id",
        "operationId": "createMTOServiceItem",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of move order to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "description": "ID of the rate engine services",
            "name": "createMTOServiceItemBody",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "reServiceID",
                "mtoShipmentID"
              ],
              "properties": {
                "mtoShipmentID": {
                  "type": "string",
                  "format": "uuid"
                },
                "reServiceID": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created service item for move task order",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move order for mto service item to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments": {
      "get": {
        "description": "Gets all shipments for a move task order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Gets all shipments for a move task order",
        "operationId": "listMTOShipments",
        "responses": {
          "200": {
            "description": "Successfully retrieved all mto shipments for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOShipments"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order for mto shipment to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}/mto-agents": {
      "get": {
        "description": "Fetches a list of agents associated with a move task order.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoAgent"
        ],
        "summary": "Fetch move task order agents.",
        "operationId": "fetchMTOAgentList",
        "responses": {
          "200": {
            "description": "Successfully retrieved all agents for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOAgents"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}/status": {
      "patch": {
        "description": "Updates a shipment's status",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Updates a shipment's status",
        "operationId": "patchMTOShipmentStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMTOShipmentStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated shipment",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "description": "Conflict error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order for mto shipment to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests": {
      "get": {
        "description": "Gets a list of payment requests",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests",
          "gov"
        ],
        "summary": "Gets payment requests",
        "operationId": "listPaymentRequests",
        "responses": {
          "200": {
            "description": "fetched list of payment requests",
            "schema": {
              "$ref": "#/definitions/PaymentRequests"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/payment-requests/{paymentRequestID}": {
      "get": {
        "description": "Fetches an instance of a payment request by id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests",
          "gov"
        ],
        "summary": "Fetches a payment request by id",
        "operationId": "getPaymentRequest",
        "responses": {
          "200": {
            "description": "fetched instance of payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates a payment request by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Updates a payment request by id",
        "operationId": "updatePaymentRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePaymentRequestPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of payment request",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}/status": {
      "patch": {
        "description": "Updates status of a payment request by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests",
          "gov"
        ],
        "summary": "Updates status of a payment request by id",
        "operationId": "updatePaymentRequestStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of payment request",
            "name": "paymentRequestID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePaymentRequestStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "required": [
        "street_address_1",
        "city",
        "state",
        "postal_code"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "street_address_1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "street_address_2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "street_address_3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "agency": {
          "type": "string",
          "title": "Agency customer is affilated with"
        },
        "current_address": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "dodID": {
          "type": "string"
        },
        "eTag": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "CustomerContactType": {
      "description": "Describes a customer contact type for a MTOServiceItem of type domestic destination SIT.",
      "type": "string",
      "enum": [
        "FIRST",
        "SECOND"
      ]
    },
    "DeptIndicator": {
      "type": "string",
      "title": "Dept. indicator",
      "enum": [
        "NAVY_AND_MARINES",
        "ARMY",
        "AIR_FORCE",
        "COAST_GUARD"
      ],
      "x-display-value": {
        "AIR_FORCE": "57 Air Force",
        "ARMY": "21 Army",
        "COAST_GUARD": "70 Coast Guard",
        "NAVY_AND_MARINES": "17 Navy and Marine Corps"
      }
    },
    "DimensionType": {
      "description": "Describes a dimension type for a MTOServiceItemDimension.",
      "type": "string",
      "enum": [
        "ITEM",
        "CRATE"
      ]
    },
    "DutyStation": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "address_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        }
      }
    },
    "Entitlements": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "571008b1-b0de-454d-b843-d71be9f02c04"
        },
        "nonTemporaryStorage": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "privatelyOwnedVehicle": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "proGearWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 2000
        },
        "proGearWeightSpouse": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "storageInTransit": {
          "type": "integer",
          "example": 90
        },
        "totalDependents": {
          "type": "integer",
          "example": 2
        },
        "totalWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "type": "string",
          "enum": [
            "RELEASING_AGENT",
            "RECEIVING_AGENT"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOAgents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOApprovalServiceItemCode": {
      "type": "string",
      "enum": [
        "MS",
        "CS"
      ]
    },
    "MTOApprovalServiceItemCodes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOApprovalServiceItemCode"
      }
    },
    "MTOServiceItem": {
      "type": "object",
      "required": [
        "id",
        "moveTaskOrderID",
        "reServiceID",
        "reServiceCode",
        "reServiceName",
        "mtoShipmentID",
        "reason",
        "pickupPostalCode",
        "description"
      ],
      "properties": {
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerContacts": {
          "$ref": "#/definitions/MTOServiceItemCustomerContacts"
        },
        "deletedAt": {
          "type": "string",
          "format": "date"
        },
        "description": {
          "type": "string"
        },
        "dimensions": {
          "$ref": "#/definitions/MTOServiceItemDimensions"
        },
        "eTag": {
          "type": "string"
        },
        "feeType": {
          "type": "string",
          "enum": [
            "COUNSELING",
            "CRATING",
            "TRUCKING",
            "SHUTTLE"
          ]
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupPostalCode": {
          "type": "string"
        },
        "quantity": {
          "type": "integer"
        },
        "rate": {
          "type": "integer"
        },
        "reServiceCode": {
          "type": "string"
        },
        "reServiceID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "rejectedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date"
        },
        "total": {
          "type": "integer",
          "format": "cents"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOServiceItemCustomerContact": {
      "description": "Customer contact information for a destination SIT service item",
      "type": "object",
      "properties": {
        "firstAvailableDeliveryDate": {
          "description": "First available date that Prime can deliver SIT service item.",
          "type": "string",
          "format": "date",
          "example": "2020-12-31"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "timeMilitary": {
          "description": "Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate` + "`" + `.",
          "type": "string",
          "example": "0400Z"
        },
        "type": {
          "$ref": "#/definitions/CustomerContactType"
        }
      }
    },
    "MTOServiceItemCustomerContacts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItemCustomerContact"
      }
    },
    "MTOServiceItemDimension": {
      "description": "Describes a dimension object for the MTOServiceItem.",
      "type": "object",
      "properties": {
        "height": {
          "description": "Height in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "length": {
          "description": "Length in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "type": {
          "$ref": "#/definitions/DimensionType"
        },
        "width": {
          "description": "Width in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        }
      }
    },
    "MTOServiceItemDimensions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItemDimension"
      }
    },
    "MTOServiceItemStatus": {
      "description": "Describes all statuses for a MTOServiceItem",
      "type": "string",
      "enum": [
        "SUBMITTED",
        "APPROVED",
        "REJECTED"
      ]
    },
    "MTOServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItem"
      }
    },
    "MTOServiceItemstatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "SUBMITTED",
            "REJECTED"
          ]
        }
      }
    },
    "MTOShipment": {
      "properties": {
        "approvedDate": {
          "type": "string",
          "format": "date"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "primeActualWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "primeEstimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment not good enough"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "scheduledPickupDate": {
          "type": "string",
          "format": "date"
        },
        "secondaryDeliveryAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "enum": [
            "HHG",
            "INTERNATIONAL_HHG",
            "INTERNATIONAL_UB"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "SUBMITTED",
            "REJECTED"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOShipments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "Move": {
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "locator": {
          "type": "string",
          "example": "1K43A"
        },
        "orders_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveOrder": {
      "type": "object",
      "properties": {
        "agency": {
          "type": "string",
          "example": "civilian"
        },
        "confirmation_number": {
          "type": "string",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "customerID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "date_issued": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "department_indicator": {
          "x-nullable": true,
          "$ref": "#/definitions/DeptIndicator"
        },
        "destinationDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "eTag": {
          "type": "string"
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlements"
        },
        "first_name": {
          "type": "string",
          "readOnly": true,
          "example": "John"
        },
        "grade": {
          "type": "string",
          "example": "E_1"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "last_name": {
          "type": "string",
          "readOnly": true,
          "example": "Doe"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "order_number": {
          "type": "string",
          "x-nullable": true,
          "example": "030-00362"
        },
        "order_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "order_type_detail": {
          "x-nullable": true,
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "report_by_date": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "MoveOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveOrder"
      }
    },
    "MoveTaskOrder": {
      "type": "object",
      "properties": {
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "destinationDutyStation": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "eTag": {
          "type": "string"
        },
        "entitlements": {
          "$ref": "#/definitions/Entitlements"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "isCanceled": {
          "type": "boolean",
          "x-nullable": true
        },
        "moveOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "originDutyStation": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveTaskOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveTaskOrder"
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "RETIREMENT",
        "SEPARATION"
      ],
      "x-display-value": {
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station",
        "RETIREMENT": "Retirement",
        "SEPARATION": "Separation"
      }
    },
    "OrdersTypeDetail": {
      "type": "string",
      "title": "Orders type detail",
      "enum": [
        "HHG_PERMITTED",
        "PCS_TDY",
        "HHG_RESTRICTED_PROHIBITED",
        "HHG_RESTRICTED_AREA",
        "INSTRUCTION_20_WEEKS",
        "HHG_PROHIBITED_20_WEEKS",
        "DELAYED_APPROVAL"
      ],
      "x-display-value": {
        "DELAYED_APPROVAL": "Delayed Approval 20 Weeks or More",
        "HHG_PERMITTED": "Shipment of HHG Permitted",
        "HHG_PROHIBITED_20_WEEKS": "Shipment of HHG Prohibited but Authorized within 20 weeks",
        "HHG_RESTRICTED_AREA": "HHG Restricted Area-HHG Prohibited",
        "HHG_RESTRICTED_PROHIBITED": "Shipment of HHG Restricted or Prohibited",
        "INSTRUCTION_20_WEEKS": "Course of Instruction 20 Weeks or More",
        "PCS_TDY": "PCS with TDY Enroute"
      }
    },
    "PatchMTOServiceItemStatusPayload": {
      "properties": {
        "rejectionReason": {
          "description": "Reason the service item was rejected",
          "type": "string",
          "x-nullable": true,
          "example": "Insufficent details provided"
        },
        "status": {
          "description": "Describes all statuses for a MTOServiceItem",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "APPROVED",
            "REJECTED"
          ]
        }
      }
    },
    "PatchMTOShipmentStatusPayload": {
      "properties": {
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment not good enough"
        },
        "status": {
          "type": "string",
          "enum": [
            "REJECTED",
            "APPROVED",
            "SUBMITTED"
          ]
        }
      }
    },
    "PaymentRequest": {
      "type": "object",
      "properties": {
        "documentPackage": {
          "$ref": "#/definitions/ProofOfServicePackage"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestNumber": {
          "type": "string",
          "readOnly": true,
          "example": "1234-5678-1"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "reviewedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "serviceItems": {
          "$ref": "#/definitions/PaymentServiceItems"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "PaymentRequestStatus": {
      "type": "string",
      "title": "Payment Request Status",
      "enum": [
        "PENDING",
        "REVIEWED",
        "SENT_TO_GEX",
        "RECEIVED_BY_GEX",
        "PAID"
      ]
    },
    "PaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentRequest"
      }
    },
    "PaymentServiceItem": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentServiceItemParams": {
          "$ref": "#/definitions/PaymentServiceItemParams"
        },
        "priceCents": {
          "type": "integer",
          "format": "cents",
          "title": "Price of the service item in cents",
          "x-nullable": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentServiceItemStatus"
        }
      }
    },
    "PaymentServiceItemParam": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "key": {
          "$ref": "#/definitions/ServiceItemParamName"
        },
        "origin": {
          "$ref": "#/definitions/ServiceItemParamOrigin"
        },
        "paymentServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "type": {
          "$ref": "#/definitions/ServiceItemParamType"
        },
        "value": {
          "type": "string",
          "example": 3025
        }
      }
    },
    "PaymentServiceItemParams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItemParam"
      }
    },
    "PaymentServiceItemStatus": {
      "type": "string",
      "title": "Payment Service Item Status",
      "enum": [
        "REQUESTED",
        "APPROVED",
        "DENIED",
        "SENT_TO_GEX",
        "PAID"
      ]
    },
    "PaymentServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItem"
      }
    },
    "ProofOfServicePackage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "ReServiceCode": {
      "description": "This is the full list of service items that can be found on a shipment. Not all service items\nmay be requested by the Prime, but may be returned in a response.\n\nDocumentation of all the service items will be provided.\n",
      "type": "string",
      "enum": [
        "CS",
        "DBHF",
        "DBTF",
        "DCRT",
        "DCRTSA",
        "DDASIT",
        "DDDSIT",
        "DDFSIT",
        "DDP",
        "DDSHUT",
        "DLH",
        "DMHF",
        "DNPKF",
        "DOASIT",
        "DOFSIT",
        "DOP",
        "DOPSIT",
        "DOSHUT",
        "DPK",
        "DSH",
        "DUCRT",
        "DUPK",
        "FSC",
        "IBHF",
        "IBTF",
        "ICOLH",
        "ICOUB",
        "ICRT",
        "ICRTSA",
        "IDASIT",
        "IDDSIT",
        "IDFSIT",
        "IDSHUT",
        "IHPK",
        "IHUPK",
        "INPKF",
        "IOASIT",
        "IOCLH",
        "IOCUB",
        "IOFSIT",
        "IOOLH",
        "IOOUB",
        "IOPSIT",
        "IOSHUT",
        "IUBPK",
        "IUBUPK",
        "IUCRT",
        "MS",
        "NSTH",
        "NSTUB"
      ]
    },
    "ServiceItem": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "params": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "example": "Service Item Parameter Name"
              },
              "value": {
                "type": "string",
                "example": "Service Item Parameter Value"
              }
            }
          },
          "readOnly": true
        }
      }
    },
    "ServiceItemParamName": {
      "type": "string",
      "enum": [
        "ActualPickupDate",
        "CanStandAlone",
        "ContractCode",
        "CubicFeetBilled",
        "CubicFeetCrating",
        "DistanceZip3",
        "DistanceZip5",
        "DistanceZip5SITDest",
        "DistanceZip5SITOrigin",
        "EIAFuelPrice",
        "FSCWeightBasedDistanceMultiplier",
        "MarketDest",
        "MarketOrigin",
        "MTOAvailableToPrimeAt",
        "NumberDaysSIT",
        "PriceAreaDest",
        "PriceAreaIntlDest",
        "PriceAreaIntlOrigin",
        "PriceAreaOrigin",
        "PSI_LinehaulDom",
        "PSI_LinehaulDomPrice",
        "PSI_LinehaulShort",
        "PSI_LinehaulShortPrice",
        "PSI_PackingDom",
        "PSI_PackingDomPrice",
        "PSI_PackingHHGIntl",
        "PSI_PackingHHGIntlPrice",
        "PSI_PriceDomDest",
        "PSI_PriceDomDestPrice",
        "PSI_PriceDomOrigin",
        "PSI_PriceDomOriginPrice",
        "PSI_ShippingLinehaulIntlCO",
        "PSI_ShippingLinehaulIntlCOPrice",
        "PSI_ShippingLinehaulIntlOC",
        "PSI_ShippingLinehaulIntlOCPrice",
        "PSI_ShippingLinehaulIntlOO",
        "PSI_ShippingLinehaulIntlOOPrice",
        "RateAreaNonStdDest",
        "RateAreaNonStdOrigin",
        "RequestedPickupDate",
        "ServiceAreaDest",
        "ServiceAreaOrigin",
        "ServicesScheduleDest",
        "ServicesScheduleOrigin",
        "SITScheduleDest",
        "SITScheduleOrigin",
        "WeightActual",
        "WeightBilledActual",
        "WeightEstimated",
        "ZipDestAddress",
        "ZipPickupAddress",
        "ZipSITAddress"
      ]
    },
    "ServiceItemParamOrigin": {
      "type": "string",
      "enum": [
        "PRIME",
        "SYSTEM"
      ]
    },
    "ServiceItemParamType": {
      "type": "string",
      "enum": [
        "STRING",
        "DATE",
        "INTEGER",
        "DECIMAL",
        "TIMESTAMP",
        "PaymentServiceItemUUID"
      ]
    },
    "UpdatePaymentRequestPayload": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "proofOfServicePackage": {
          "$ref": "#/definitions/ProofOfServicePackage"
        },
        "serviceItemIDs": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          }
        }
      }
    },
    "UpdatePaymentRequestStatusPayload": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "Upload": {
      "type": "object",
      "required": [
        "id",
        "url",
        "filename",
        "contentType",
        "bytes",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "bytes": {
          "type": "integer"
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "filename": {
          "type": "string",
          "format": "binary",
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalid_fields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "type": "object"
        }
      ],
      "properties": {
        "invalid_fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    }
  },
  "responses": {
    "Conflict": {
      "description": "Conflict error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ServerError": {
      "description": "A server error occurred",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  }
}`))
}
