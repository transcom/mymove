// Code generated by go-swagger; DO NOT EDIT.

package ghcapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The GHC API is a RESTful API that enables the Office application for MilMove.\n\nAll endpoints are located under ` + "`" + `/ghc/v1` + "`" + `.\n",
    "title": "MilMove GHC API",
    "contact": {
      "email": "milmove-developers@caci.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/ghc/v1",
  "paths": {
    "/application_parameters/{parameterName}": {
      "get": {
        "description": "Searches for an application parameter by name, returns nil if not found",
        "tags": [
          "application_parameters"
        ],
        "summary": "Searches for an application parameter by name, returns nil if not found",
        "operationId": "getParam",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "Parameter Name",
            "name": "parameterName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Application Parameters",
            "schema": {
              "$ref": "#/definitions/ApplicationParameters"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/calendar/{countryCode}/is-weekend-holiday/{date}": {
      "get": {
        "description": "Utility API to determine if input date falls on weekend and/or holiday.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "calendar"
        ],
        "summary": "Validate  move date selection",
        "operationId": "isDateWeekendHoliday",
        "parameters": [
          {
            "enum": [
              "US"
            ],
            "type": "string",
            "description": "country code for context of date",
            "name": "countryCode",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "description": "input date to determine if weekend/holiday for given country.",
            "name": "date",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully determine if given date is weekend and/or holiday for given country.",
            "schema": {
              "$ref": "#/definitions/IsDateWeekendHolidayInfo"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/counseling/orders/{orderID}": {
      "patch": {
        "description": "All fields sent in this request will be set on the order referenced",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates an order (performed by a services counselor)",
        "operationId": "counselingUpdateOrder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CounselingUpdateOrderPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of orders",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to update",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/counseling/orders/{orderID}/allowances": {
      "patch": {
        "description": "All fields sent in this request will be set on the order referenced",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates an allowance (Orders with Entitlements)",
        "operationId": "counselingUpdateAllowance",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CounselingUpdateAllowancePayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of allowance",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/customer": {
      "post": {
        "description": "Creates a customer with option to also create an Okta profile account based on the office user's input when completing the UI form and submitting.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Creates a customer with Okta option",
        "operationId": "createCustomerWithOktaOption",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCustomerPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created the customer",
            "schema": {
              "$ref": "#/definitions/CreatedCustomer"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/customer-support-remarks/{customerSupportRemarkID}": {
      "delete": {
        "description": "Soft deletes a customer support remark by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "customerSupportRemarks"
        ],
        "summary": "Soft deletes a customer support remark by ID",
        "operationId": "deleteCustomerSupportRemark",
        "responses": {
          "204": {
            "description": "Successfully soft deleted the shipment"
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "patch": {
        "description": "Updates a customer support remark for a move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customerSupportRemarks"
        ],
        "summary": "Updates a customer support remark for a move",
        "operationId": "updateCustomerSupportRemarkForMove",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomerSupportRemarkPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated customer support remark",
            "schema": {
              "$ref": "#/definitions/CustomerSupportRemark"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "the customer support remark ID to be modified",
          "name": "customerSupportRemarkID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/customer/search": {
      "post": {
        "description": "Search customers by DOD ID or customer name. Used by services counselors to locate profiles to update, find attached moves, and to create new moves.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Search customers by DOD ID or customer name",
        "operationId": "searchCustomers",
        "parameters": [
          {
            "description": "field that results should be sorted by",
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "branch": {
                  "description": "Branch",
                  "type": "string",
                  "minLength": 1
                },
                "customerName": {
                  "description": "Customer Name",
                  "type": "string",
                  "minLength": 1,
                  "x-nullable": true
                },
                "dodID": {
                  "description": "DOD ID",
                  "type": "string",
                  "maxLength": 10,
                  "minLength": 10,
                  "x-nullable": true
                },
                "emplid": {
                  "description": "EMPLID",
                  "type": "string",
                  "maxLength": 7,
                  "minLength": 7,
                  "x-nullable": true
                },
                "order": {
                  "type": "string",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "x-nullable": true
                },
                "page": {
                  "description": "requested page of results",
                  "type": "integer"
                },
                "perPage": {
                  "type": "integer"
                },
                "sort": {
                  "type": "string",
                  "enum": [
                    "customerName",
                    "dodID",
                    "emplid",
                    "branch",
                    "personalEmail",
                    "telephone"
                  ],
                  "x-nullable": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all customers matching the criteria",
            "schema": {
              "$ref": "#/definitions/SearchCustomersResult"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/customer/{customerID}": {
      "get": {
        "description": "Returns a given customer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Returns a given customer",
        "operationId": "getCustomer",
        "responses": {
          "200": {
            "description": "Successfully retrieved information on an individual customer",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "patch": {
        "description": "Updates customer info by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Updates customer info",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomerPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of orders",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.customer"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of customer to use",
          "name": "customerID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/documents": {
      "post": {
        "description": "Documents represent a physical artifact such as a scanned document or a PDF file",
        "tags": [
          "ghcDocuments"
        ],
        "summary": "Create a new document",
        "operationId": "createDocument",
        "parameters": [
          {
            "name": "documentPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostDocumentPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created document",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/documents/{documentId}": {
      "get": {
        "description": "Returns a document and its uploads",
        "tags": [
          "ghcDocuments"
        ],
        "summary": "Returns a document",
        "operationId": "getDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to return",
            "name": "documentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the requested document",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/evaluation-reports/{reportID}": {
      "get": {
        "description": "Gets an evaluation report by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "evaluationReports"
        ],
        "summary": "Gets an evaluation report by ID",
        "operationId": "getEvaluationReport",
        "responses": {
          "200": {
            "description": "Successfully got the report",
            "schema": {
              "$ref": "#/definitions/EvaluationReport"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "put": {
        "description": "Saves an evaluation report as a draft",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "evaluationReports"
        ],
        "summary": "Saves an evaluation report as a draft",
        "operationId": "saveEvaluationReport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EvaluationReport"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully saved the report"
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.evaluationReport"
        ]
      },
      "delete": {
        "description": "Deletes an evaluation report by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "evaluationReports"
        ],
        "summary": "Deletes an evaluation report by ID",
        "operationId": "deleteEvaluationReport",
        "responses": {
          "204": {
            "description": "Successfully deleted the report"
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "delete.evaluationReport"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "the evaluation report ID to be modified",
          "name": "reportID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/evaluation-reports/{reportID}/download": {
      "get": {
        "description": "Downloads an evaluation report as a PDF",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "evaluationReports"
        ],
        "summary": "Downloads an evaluation report as a PDF",
        "operationId": "downloadEvaluationReport",
        "responses": {
          "200": {
            "description": "Evaluation report PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "the evaluation report ID to be downloaded",
          "name": "reportID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/evaluation-reports/{reportID}/submit": {
      "post": {
        "description": "Submits an evaluation report",
        "produces": [
          "application/json"
        ],
        "tags": [
          "evaluationReports"
        ],
        "summary": "Submits an evaluation report",
        "operationId": "submitEvaluationReport",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully submitted an evaluation report with the provided ID"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.evaluationReport"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "the evaluation report ID to be modified",
          "name": "reportID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/lines-of-accounting": {
      "post": {
        "description": "Fetches a line of accounting based on provided service member affiliation, effective date, and Transportation Accounting Code (TAC). It uses these parameters to filter the correct Line of Accounting for the provided TAC. It does this by filtering through both TAC and LOAs based on the provided code and effective date. The 'Effective Date' is the date that can be either the orders issued date (For HHG shipments), MTO approval date (For NTS shipments), or even the current date for NTS shipments with no approval yet (Just providing a preview to the office users per customer request). Effective date is used to find \"Active\" TGET data by searching for the TACs and LOAs with begin and end dates containing this date.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "linesOfAccounting"
        ],
        "summary": "Fetch line of accounting",
        "operationId": "requestLineOfAccounting",
        "parameters": [
          {
            "description": "Service member affiliation, effective date, and TAC code.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FetchLineOfAccountingPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved line of accounting",
            "schema": {
              "$ref": "#/definitions/LineOfAccounting"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}": {
      "get": {
        "description": "Gets a move",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Gets a move by ID",
        "operationId": "getMoveTaskOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieved move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/billable-weights-reviewed-at": {
      "patch": {
        "description": "Changes move (move task order) billableWeightsReviewedAt field to a timestamp",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "operationId": "updateMTOReviewedBillableWeightsAt",
        "parameters": [
          {
            "type": "string",
            "description": "ID of move to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order billableWeightsReviewedAt field",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}/entitlements": {
      "get": {
        "description": "Gets entitlements",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Gets entitlements for a move by ID",
        "operationId": "getEntitlements",
        "responses": {
          "200": {
            "description": "Successfully retrieved entitlements",
            "schema": {
              "$ref": "#/definitions/Entitlements"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/payment-service-items/{paymentServiceItemID}/status": {
      "patch": {
        "description": "Changes the status of a line item for a move by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentServiceItem"
        ],
        "summary": "Change the status of a payment service item for a move by ID",
        "operationId": "updatePaymentServiceItemStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentServiceItem"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status for a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/PaymentServiceItem"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.paymentServiceItemStatus"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of payment service item to use",
          "name": "paymentServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}": {
      "get": {
        "description": "Gets a line item by ID for a move by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Gets a line item by ID for a move by ID",
        "operationId": "getMTOServiceItem",
        "responses": {
          "200": {
            "description": "Successfully retrieved a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/MTOServiceItemSingle"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of line item to use",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}/status": {
      "patch": {
        "description": "Changes the status of a line item for a move by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Change the status of a line item for a move by ID",
        "operationId": "updateMTOServiceItemStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMTOServiceItemStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status for a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.MTOServiceItem"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of line item to use",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/status": {
      "patch": {
        "description": "Changes move task order status to make it available to prime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Change the status of a move task order to make it available to prime",
        "operationId": "updateMoveTaskOrderStatus",
        "parameters": [
          {
            "type": "string",
            "description": "ID of move to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "serviceItemCodes",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOApprovalServiceItemCodes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order status",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.move",
          "create.serviceItem"
        ]
      }
    },
    "/move-task-orders/{moveTaskOrderID}/status/service-counseling-completed": {
      "patch": {
        "description": "Changes move (move task order) status to service counseling completed",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Changes move (move task order) status to service counseling completed",
        "operationId": "updateMTOStatusServiceCounselingCompleted",
        "parameters": [
          {
            "type": "string",
            "description": "ID of move to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order status",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}/tio-remarks": {
      "patch": {
        "description": "Changes move (move task order) billableWeightsReviewedAt field to a timestamp",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "operationId": "updateMoveTIORemarks",
        "parameters": [
          {
            "type": "string",
            "description": "ID of move to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Move"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order tioRemarks field",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/move/{locator}": {
      "get": {
        "description": "Returns a given move for a unique alphanumeric locator string",
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Returns a given move",
        "operationId": "getMove",
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Code used to identify a move in the system",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move/{locator}/history": {
      "get": {
        "description": "Returns the history for a given move for a unique alphanumeric locator string",
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Returns the history of an identified move",
        "operationId": "getMoveHistory",
        "parameters": [
          {
            "type": "integer",
            "description": "requested page of results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "results per page",
            "name": "perPage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual move history",
            "schema": {
              "$ref": "#/definitions/MoveHistoryResult"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Code used to identify a move in the system",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_service_items": {
      "get": {
        "description": "Gets all line items for a move",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Gets all line items for a move",
        "operationId": "listMTOServiceItems",
        "responses": {
          "200": {
            "description": "Successfully retrieved all line items for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOServiceItems"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move for mto service item to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments": {
      "get": {
        "description": "Gets all shipments for a move task order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Gets all shipments for a move task order",
        "operationId": "listMTOShipments",
        "responses": {
          "200": {
            "description": "Successfully retrieved all mto shipments for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOShipments"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order for mto shipment to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}": {
      "patch": {
        "description": "Updates a specified MTO shipment.\nRequired fields include:\n* MTO Shipment ID required in path\n* If-Match required in headers\n* No fields required in body\nOptional fields include:\n* New shipment status type\n* Shipment Type\n* Customer requested pick-up date\n* Pick-up Address\n* Delivery Address\n* Secondary Pick-up Address\n* SecondaryDelivery Address\n* Delivery Address Type\n* Customer Remarks\n* Counselor Remarks\n* Releasing / Receiving agents\n* Actual Pro Gear Weight\n* Actual Spouse Pro Gear Weight\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipment",
        "operationId": "updateMTOShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of move task order for mto shipment to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the MTO Shipment to update",
            "name": "shipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the specified MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}/mto-agents": {
      "get": {
        "description": "Fetches a list of agents associated with a move task order.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoAgent"
        ],
        "summary": "Fetch move task order agents.",
        "operationId": "fetchMTOAgentList",
        "responses": {
          "200": {
            "description": "Successfully retrieved all agents for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOAgents"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/search": {
      "post": {
        "description": "Search moves by locator, DOD ID, or customer name. Used by QAE and CSR users.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Search moves by locator, DOD ID, or customer name",
        "operationId": "searchMoves",
        "parameters": [
          {
            "description": "field that results should be sorted by",
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "branch": {
                  "type": "string",
                  "x-nullable": true
                },
                "customerName": {
                  "description": "Customer Name",
                  "type": "string",
                  "minLength": 1,
                  "x-nullable": true
                },
                "deliveryDate": {
                  "type": "string",
                  "format": "date-time",
                  "x-nullable": true
                },
                "destinationPostalCode": {
                  "type": "string",
                  "x-nullable": true
                },
                "dodID": {
                  "description": "DOD ID",
                  "type": "string",
                  "maxLength": 10,
                  "minLength": 10,
                  "x-nullable": true
                },
                "emplid": {
                  "description": "EMPLID",
                  "type": "string",
                  "maxLength": 7,
                  "minLength": 7,
                  "x-nullable": true
                },
                "locator": {
                  "description": "Move locator",
                  "type": "string",
                  "maxLength": 6,
                  "minLength": 6,
                  "x-nullable": true
                },
                "order": {
                  "type": "string",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "x-nullable": true
                },
                "originPostalCode": {
                  "type": "string",
                  "x-nullable": true
                },
                "page": {
                  "description": "requested page of results",
                  "type": "integer"
                },
                "paymentRequestCode": {
                  "type": "string",
                  "x-nullable": true,
                  "example": "9551-6199-2"
                },
                "perPage": {
                  "type": "integer"
                },
                "pickupDate": {
                  "type": "string",
                  "format": "date-time",
                  "x-nullable": true
                },
                "shipmentsCount": {
                  "type": "integer",
                  "x-nullable": true
                },
                "sort": {
                  "type": "string",
                  "enum": [
                    "customerName",
                    "dodID",
                    "emplid",
                    "branch",
                    "locator",
                    "status",
                    "originPostalCode",
                    "destinationPostalCode",
                    "shipmentsCount"
                  ],
                  "x-nullable": true
                },
                "status": {
                  "description": "Filtering for the status.",
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "string",
                    "enum": [
                      "DRAFT",
                      "SUBMITTED",
                      "APPROVALS REQUESTED",
                      "APPROVED",
                      "NEEDS SERVICE COUNSELING",
                      "SERVICE COUNSELING COMPLETED"
                    ]
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/SearchMovesResult"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/moves/{locator}/closeout-office": {
      "patch": {
        "description": "Sets the transportation office closeout location for where the Move's PPM Shipment documentation will be reviewed by",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Updates a Move's PPM closeout office for Army and Air Force customers",
        "operationId": "updateCloseoutOffice",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "closeoutOfficeId"
              ],
              "properties": {
                "closeoutOfficeId": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully set the closeout office for the move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.closeoutOffice"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "string",
          "description": "move code to identify a move to update the PPM shipment's closeout office for Army and Air Force service members",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{locator}/customer-support-remarks": {
      "get": {
        "description": "Fetches customer support remarks for a move",
        "produces": [
          "application/json"
        ],
        "tags": [
          "customerSupportRemarks"
        ],
        "summary": "Fetches customer support remarks using the move code (locator).",
        "operationId": "getCustomerSupportRemarksForMove",
        "responses": {
          "200": {
            "description": "Successfully retrieved all line items for a move task order",
            "schema": {
              "$ref": "#/definitions/CustomerSupportRemarks"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "post": {
        "description": "Creates a customer support remark for a move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customerSupportRemarks"
        ],
        "summary": "Creates a customer support remark for a move",
        "operationId": "createCustomerSupportRemarkForMove",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateCustomerSupportRemark"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created customer support remark",
            "schema": {
              "$ref": "#/definitions/CustomerSupportRemark"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "string",
          "description": "move code to identify a move for customer support remarks",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{locator}/evaluation-reports": {
      "post": {
        "description": "Creates an evaluation report",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "evaluationReports"
        ],
        "summary": "Creates an evaluation report",
        "operationId": "createEvaluationReport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateEvaluationReport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created evaluation report",
            "schema": {
              "$ref": "#/definitions/EvaluationReport"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "create.evaluationReport"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{locator}/payment-requests": {
      "get": {
        "description": "Fetches payment requests for a move",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Fetches payment requests using the move code (locator).",
        "operationId": "getPaymentRequestsForMove",
        "responses": {
          "200": {
            "description": "Successfully retrieved all line items for a move task order",
            "schema": {
              "$ref": "#/definitions/PaymentRequests"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "read.paymentRequest"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "string",
          "description": "move code to identify a move for payment requests",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{moveID}/assignOfficeUser": {
      "patch": {
        "description": "assigns either a services counselor, task ordering officer, or task invoicing officer to the move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "operationId": "updateAssignedOfficeUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignOfficeUserBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully assigned office user to the move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the move",
          "name": "moveID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{moveID}/cancel": {
      "post": {
        "description": "cancels a move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Cancels a move",
        "operationId": "moveCanceler",
        "responses": {
          "200": {
            "description": "Successfully cancelled move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the move",
          "name": "moveID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{moveID}/counseling-evaluation-reports-list": {
      "get": {
        "description": "Returns counseling evaluation reports for the specified move that are visible to the current office user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Returns counseling evaluation reports for the specified move that are visible to the current office user",
        "operationId": "getMoveCounselingEvaluationReportsList",
        "responses": {
          "200": {
            "description": "Successfully retrieved the move's evaluation reports",
            "schema": {
              "$ref": "#/definitions/EvaluationReportList"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "Code used to identify a move in the system",
          "name": "moveID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{moveID}/financial-review-flag": {
      "post": {
        "description": "This sets a flag which indicates that the move should be reviewed by a fincancial office. For example, if the origin or destination address of a shipment is far from the duty location and may incur excess costs to the customer.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Flags a move for financial office review",
        "operationId": "setFinancialReviewFlag",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "flagForReview"
              ],
              "properties": {
                "flagForReview": {
                  "description": "boolean value representing whether we should flag a move for financial review",
                  "type": "boolean",
                  "example": false
                },
                "remarks": {
                  "description": "explanation of why the move is being flagged for financial review",
                  "type": "string",
                  "x-nullable": true,
                  "example": "this address is way too far away"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated Move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.financialReviewFlag"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move to flag",
          "name": "moveID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{moveID}/shipment-evaluation-reports-list": {
      "get": {
        "description": "Returns shipment evaluation reports for the specified move that are visible to the current office user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Returns shipment evaluation reports for the specified move that are visible to the current office user",
        "operationId": "getMoveShipmentEvaluationReportsList",
        "responses": {
          "200": {
            "description": "Successfully retrieved the move's evaluation reports",
            "schema": {
              "$ref": "#/definitions/EvaluationReportList"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "Code used to identify a move in the system",
          "name": "moveID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{moveID}/unassignOfficeUser": {
      "patch": {
        "description": "unassigns either a services counselor, task ordering officer, or task invoicing officer from the move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "operationId": "deleteAssignedOfficeUser",
        "responses": {
          "200": {
            "description": "Successfully unassigned office user from the move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the move",
          "name": "moveID",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "required": [
              "roleType"
            ],
            "properties": {
              "roleType": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "/moves/{moveID}/uploadAdditionalDocuments": {
      "patch": {
        "description": "Customers will on occaision need the ability to upload additional supporting documents, for a variety of reasons. This does not include amended order.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "move"
        ],
        "summary": "Patch the additional documents for a given move",
        "operationId": "uploadAdditionalDocuments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the order",
            "name": "moveID",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        },
        "x-permissions": [
          "create.supportingDocuments"
        ]
      }
    },
    "/mto-shipments": {
      "post": {
        "description": "Creates a MTO shipment for the specified Move Task Order.\nRequired fields include:\n* Shipment Type\n* Customer requested pick-up date\n* Pick-up Address\n* Delivery Address\n* Releasing / Receiving agents\nOptional fields include:\n* Delivery Address Type\n* Customer Remarks\n* Releasing / Receiving agents\n* An array of optional accessorial service item codes\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOShipment",
        "operationId": "createMTOShipment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateMTOShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/open/requested-office-users": {
      "post": {
        "description": "This endpoint is publicly accessible as it is utilized for individuals who do not have an office account to request the creation of an office account.\nRequest the creation of an office user. An administrator will need to approve them after creation. Note on requirements: An identification method must be present. The following 2 fields have an \"OR\" requirement. - edipi - other_unique_id One of these two fields MUST be present to serve as identification for the office user being created. This logic is handled at the application level.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "officeUsers"
        ],
        "summary": "Create an Office User",
        "operationId": "createRequestedOfficeUser",
        "parameters": [
          {
            "description": "Office User information",
            "name": "officeUser",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OfficeUserCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully requested the creation of provided office user",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "422": {
            "description": "validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/open/transportation-offices": {
      "get": {
        "description": "This endpoint is publicly accessible as it is utilized to access transportation office information without having an office account.Returns the transportation offices matching the search query.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transportationOffice"
        ],
        "summary": "Returns the transportation offices matching the search query",
        "operationId": "getTransportationOfficesOpen",
        "parameters": [
          {
            "minLength": 2,
            "type": "string",
            "description": "Search string for transportation offices",
            "name": "search",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transportation offices",
            "schema": {
              "$ref": "#/definitions/TransportationOffices"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "description": "Creates an instance of orders tied to a service member, which allow for creation of a move and an entitlement. Orders are required before the creation of a move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Creates an orders model for a logged-in user",
        "operationId": "createOrder",
        "parameters": [
          {
            "name": "createOrders",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateOrders"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "created instance of orders",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/orders/{orderID}": {
      "get": {
        "description": "Gets an order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Gets an order by ID",
        "operationId": "getOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieved order",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "patch": {
        "description": "All fields sent in this request will be set on the order referenced",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates an order",
        "operationId": "updateOrder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOrderPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of orders",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.orders"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/orders/{orderID}/acknowledge-excess-weight-risk": {
      "post": {
        "description": "Saves the date and time a TOO acknowledged the excess weight risk by dismissing the alert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Saves the date and time a TOO acknowledged the excess weight risk by dismissing the alert",
        "operationId": "acknowledgeExcessWeightRisk",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated Move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.excessWeightRisk"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/orders/{orderID}/allowances": {
      "patch": {
        "description": "All fields sent in this request will be set on the order referenced",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates an allowance (Orders with Entitlements)",
        "operationId": "updateAllowance",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAllowancePayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of allowance",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.allowances"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/orders/{orderID}/update-billable-weight": {
      "patch": {
        "description": "Updates the DBAuthorizedWeight attribute for the Order Entitlements=",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates the max billable weight",
        "operationId": "updateBillableWeight",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateBillableWeightPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated Order",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.billableWeight"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/orders/{orderID}/update-max-billable-weight/tio": {
      "patch": {
        "description": "Updates the DBAuthorizedWeight attribute for the Order Entitlements and move TIO remarks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates the max billable weight with TIO remarks",
        "operationId": "updateMaxBillableWeightAsTIO",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMaxBillableWeightAsTIOPayload"
            }
          },
          {
            "$ref": "#/parameters/ifMatch"
          }
        ],
        "responses": {
          "200": {
            "description": "updated Order",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.maxBillableWeight"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/orders/{orderID}/upload_amended_orders": {
      "post": {
        "description": "Create an amended order for a given order",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "order"
        ],
        "summary": "Create an amended order for a given order",
        "operationId": "uploadAmendedOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the order",
            "name": "orderID",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/payment-requests/{paymentRequestID}": {
      "get": {
        "description": "Fetches an instance of a payment request by id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Fetches a payment request by id",
        "operationId": "getPaymentRequest",
        "responses": {
          "200": {
            "description": "fetched instance of payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "read.paymentRequest"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of payment request",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}/bulkDownload": {
      "get": {
        "description": "This endpoint downloads all uploaded payment request documentation combined into a single PDF.\n",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Downloads all Payment Request documents as a PDF",
        "operationId": "bulkDownload",
        "responses": {
          "200": {
            "description": "Payment Request Files PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "the id for the payment-request with files to be downloaded",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}/shipments-payment-sit-balance": {
      "get": {
        "description": "Returns all shipment payment request SIT usage to support partial SIT invoicing",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Returns all shipment payment request SIT usage to support partial SIT invoicing",
        "operationId": "getShipmentsPaymentSITBalance",
        "responses": {
          "200": {
            "description": "Successfully retrieved shipments and their SIT days balance from all payment requests on the move",
            "schema": {
              "$ref": "#/definitions/ShipmentsPaymentSITBalance"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "read.shipmentsPaymentSITBalance"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "payment request ID of the payment request with SIT service items being reviewed",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}/status": {
      "patch": {
        "description": "Updates status of a payment request by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Updates status of a payment request by id",
        "operationId": "updatePaymentRequestStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of payment request",
            "name": "paymentRequestID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePaymentRequestStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.paymentRequest"
        ]
      }
    },
    "/ppm-shipments/{ppmShipmentId}/actual-weight": {
      "get": {
        "description": "Retrieves the actual weight for the specified PPM shipment.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Get the actual weight for a PPM shipment",
        "operationId": "getPPMActualWeight",
        "responses": {
          "200": {
            "description": "Returns actual weight for the specified PPM shipment.",
            "schema": {
              "$ref": "#/definitions/PPMActualWeight"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/ppmShipmentId"
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/aoa-packet": {
      "get": {
        "description": "### Functionality\nThis endpoint downloads all uploaded move order documentation combined with the Shipment Summary Worksheet into a single PDF.\n### Errors\n* The PPMShipment must have requested an AOA.\n* The PPMShipment AOA Request must have been approved.\n",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Downloads AOA Packet form PPMShipment as a PDF",
        "operationId": "showAOAPacket",
        "responses": {
          "200": {
            "description": "AOA PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "the id for the ppmshipment with aoa to be downloaded",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/closeout": {
      "get": {
        "description": "Retrieves the closeout calculations for the specified PPM shipment.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Get the closeout calcuations for the specified PPM shipment",
        "operationId": "getPPMCloseout",
        "responses": {
          "200": {
            "description": "Returns closeout for the specified PPM shipment.",
            "schema": {
              "$ref": "#/definitions/PPMCloseout"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/ppmShipmentId"
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/finish-document-review": {
      "patch": {
        "description": "Updates a PPM shipment's status once documents have been reviewed. Status is updated depending on whether any documents have been rejected.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates a PPM shipment's status after document review",
        "operationId": "finishDocumentReview",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully finished document review",
            "schema": {
              "$ref": "#/definitions/PPMShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.shipment"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/ppmShipmentId"
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/moving-expenses/{movingExpenseId}": {
      "patch": {
        "description": "Updates a PPM shipment's moving expense with new information. Only some of the moving expense's fields are\neditable because some have to be set by the customer, e.g. the description and the moving expense type.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates the moving expense",
        "operationId": "updateMovingExpense",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatch"
          },
          {
            "name": "updateMovingExpense",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMovingExpense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an updated moving expense object",
            "schema": {
              "$ref": "#/definitions/MovingExpense"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/ppmShipmentId"
        },
        {
          "$ref": "#/parameters/movingExpenseId"
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/payment-packet": {
      "get": {
        "description": "Generates a PDF containing all user uploaded documentations for PPM. Contains SSW form, orders, weight and expense documentations.",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Returns PPM payment packet",
        "operationId": "showPaymentPacket",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the ppmShipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "PPM Payment Packet PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "ppm not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/ppm-sit": {
      "patch": {
        "description": "Updates a PPM shipment's SIT values\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates a PPM shipment's SIT values",
        "operationId": "updatePPMSIT",
        "parameters": [
          {
            "$ref": "#/parameters/ppmShipmentId"
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PPMShipmentSIT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully finished PPM SIT update",
            "schema": {
              "$ref": "#/definitions/PPMShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets/{proGearWeightTicketId}": {
      "patch": {
        "description": "Updates a PPM shipment's pro-gear weight ticket with new information. Only some of the fields are editable\nbecause some have to be set by the customer, e.g. the description.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates a pro-gear weight ticket",
        "operationId": "updateProGearWeightTicket",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatch"
          },
          {
            "name": "updateProGearWeightTicket",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProGearWeightTicket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an updated pro-gear weight ticket object",
            "schema": {
              "$ref": "#/definitions/ProGearWeightTicket"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/ppmShipmentId"
        },
        {
          "$ref": "#/parameters/proGearWeightTicketId"
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/sit_location/{sitLocation}/sit-estimated-cost": {
      "get": {
        "description": "Calculates and returns the SIT estimated cost for the specified PPM shipment.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Get the SIT estimated cost for a PPM shipment",
        "operationId": "getPPMSITEstimatedCost",
        "responses": {
          "200": {
            "description": "Calculates and returns the SIT estimated cost for the specified PPM shipment.",
            "schema": {
              "$ref": "#/definitions/PPMSITEstimatedCost"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/ppmShipmentId"
        },
        {
          "enum": [
            "ORIGIN",
            "DESTINATION"
          ],
          "type": "string",
          "format": "string",
          "description": "location of sit",
          "name": "sitLocation",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Date entered into SIT",
          "name": "sitEntryDate",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Date departed SIT",
          "name": "sitDepartureDate",
          "in": "query",
          "required": true
        },
        {
          "type": "integer",
          "description": "Weight stored in SIT",
          "name": "weightStored",
          "in": "query",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/weight-ticket/{weightTicketId}": {
      "patch": {
        "description": "Updates a PPM shipment's weight ticket document with new information. Only some of the weight ticket document's\nfields are editable because some have to be set by the customer, e.g. vehicle description.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates a weight ticket document",
        "operationId": "updateWeightTicket",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatch"
          },
          {
            "name": "updateWeightTicketPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateWeightTicket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an updated weight ticket object",
            "schema": {
              "$ref": "#/definitions/WeightTicket"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/ppmShipmentId"
        },
        {
          "$ref": "#/parameters/weightTicketId"
        }
      ]
    },
    "/pws-violations": {
      "get": {
        "description": "Fetch the possible PWS violations for an evaluation report",
        "produces": [
          "application/json"
        ],
        "tags": [
          "pwsViolations"
        ],
        "summary": "Fetch the possible PWS violations for an evaluation report",
        "operationId": "getPWSViolations",
        "responses": {
          "200": {
            "description": "Successfully retrieved the PWS violations",
            "schema": {
              "$ref": "#/definitions/PWSViolations"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/queues/counseling": {
      "get": {
        "description": "An office services counselor user will be assigned a transportation office that will determine which moves are displayed in their queue based on the origin duty location.  GHC moves will show up here onced they have reached the NEEDS SERVICE COUNSELING status after submission from a customer or created on a customer's behalf.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "Gets queued list of all customer moves needing services counseling by GBLOC origin",
        "operationId": "getServicesCounselingQueue",
        "parameters": [
          {
            "type": "integer",
            "description": "requested page number of paginated move results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "maximum number of moves to show on each page of paginated results",
            "name": "perPage",
            "in": "query"
          },
          {
            "enum": [
              "lastName",
              "dodID",
              "emplid",
              "branch",
              "locator",
              "status",
              "requestedMoveDate",
              "submittedAt",
              "originGBLOC",
              "originDutyLocation",
              "destinationDutyLocation",
              "ppmType",
              "closeoutInitiated",
              "closeoutLocation",
              "ppmStatus",
              "counselingOffice"
            ],
            "type": "string",
            "description": "field that results should be sorted by",
            "name": "sort",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "direction of sort order if applied",
            "name": "order",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters by the branch of the move's service member",
            "name": "branch",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters to match the unique move code locator",
            "name": "locator",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters using a prefix match on the service member's last name",
            "name": "lastName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters using a counselingOffice name of the move",
            "name": "counselingOffice",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters to match the unique service member's DoD ID",
            "name": "dodID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters to match the unique service member's EMPLID",
            "name": "emplid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters the requested pickup date of a shipment on the move",
            "name": "requestedMoveDate",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Start of the submitted at date in the user's local time zone converted to UTC",
            "name": "submittedAt",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters the GBLOC of the service member's origin duty location",
            "name": "originGBLOC",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filters the name of the origin duty location on the orders",
            "name": "originDutyLocation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters the name of the destination duty location on the orders",
            "name": "destinationDutyLocation",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "NEEDS SERVICE COUNSELING",
                "SERVICE COUNSELING COMPLETED"
              ],
              "type": "string"
            },
            "description": "filters the status of the move",
            "name": "status",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Only used for Services Counseling queue. If true, show PPM moves that are ready for closeout. Otherwise, show all other moves.",
            "name": "needsPPMCloseout",
            "in": "query"
          },
          {
            "enum": [
              "FULL",
              "PARTIAL"
            ],
            "type": "string",
            "description": "filters PPM type",
            "name": "ppmType",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Latest date that closeout was initiated on a PPM on the move",
            "name": "closeoutInitiated",
            "in": "query"
          },
          {
            "type": "string",
            "description": "closeout location",
            "name": "closeoutLocation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "order type",
            "name": "orderType",
            "in": "query"
          },
          {
            "enum": [
              "WAITING_ON_CUSTOMER",
              "NEEDS_CLOSEOUT"
            ],
            "type": "string",
            "description": "filters the status of the PPM shipment",
            "name": "ppmStatus",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Used to return a queue for a GBLOC other than the default of the current user. Requires the HQ role. The parameter is ignored if the requesting user does not have the necessary role.\n",
            "name": "viewAsGBLOC",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/QueueMovesResult"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/queues/counseling/origin-list": {
      "get": {
        "description": "An office services counselor user will be assigned a transportation office that will determine which moves are displayed in their queue based on the origin duty location. This pulls the availalble origin duty locations.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "Gets queued list of all moves origin locations in the counselors queue",
        "operationId": "getServicesCounselingOriginList",
        "parameters": [
          {
            "type": "boolean",
            "description": "Only used for Services Counseling queue. If true, show PPM moves origin locations that are ready for closeout. Otherwise, show all other moves origin locations.",
            "name": "needsPPMCloseout",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/Locations"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/queues/moves": {
      "get": {
        "description": "An office TOO user will be assigned a transportation office that will determine which moves are displayed in their queue based on the origin duty location.  GHC moves will show up here onced they have reached the submitted status sent by the customer and have move task orders, shipments, and service items to approve.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "Gets queued list of all customer moves by GBLOC origin",
        "operationId": "getMovesQueue",
        "parameters": [
          {
            "type": "integer",
            "description": "requested page of results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "results per page",
            "name": "perPage",
            "in": "query"
          },
          {
            "enum": [
              "lastName",
              "dodID",
              "emplid",
              "branch",
              "locator",
              "status",
              "originDutyLocation",
              "destinationDutyLocation",
              "requestedMoveDate",
              "appearedInTooAt"
            ],
            "type": "string",
            "description": "field that results should be sorted by",
            "name": "sort",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "direction of sort order if applied",
            "name": "order",
            "in": "query"
          },
          {
            "type": "string",
            "name": "branch",
            "in": "query"
          },
          {
            "type": "string",
            "name": "locator",
            "in": "query"
          },
          {
            "type": "string",
            "name": "lastName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "dodID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "emplid",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "originDutyLocation",
            "in": "query"
          },
          {
            "type": "string",
            "name": "destinationDutyLocation",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "name": "appearedInTooAt",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters the requested pickup date of a shipment on the move",
            "name": "requestedMoveDate",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "SUBMITTED",
                "SERVICE COUNSELING COMPLETED",
                "APPROVALS REQUESTED"
              ],
              "type": "string"
            },
            "description": "Filtering for the status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "order type",
            "name": "orderType",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Used to return a queue for a GBLOC other than the default of the current user. Requires the HQ role. The parameter is ignored if the requesting user does not have the necessary role.\n",
            "name": "viewAsGBLOC",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/QueueMovesResult"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/queues/payment-requests": {
      "get": {
        "description": "An office TIO user will be assigned a transportation office that will determine which payment requests are displayed in their queue based on the origin duty location.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "Gets queued list of all payment requests by GBLOC origin",
        "operationId": "getPaymentRequestsQueue",
        "parameters": [
          {
            "enum": [
              "lastName",
              "locator",
              "submittedAt",
              "branch",
              "status",
              "dodID",
              "emplid",
              "age",
              "originDutyLocation"
            ],
            "type": "string",
            "description": "field that results should be sorted by",
            "name": "sort",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "direction of sort order if applied",
            "name": "order",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "requested page of results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "number of records to include per page",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Start of the submitted at date in the user's local time zone converted to UTC",
            "name": "submittedAt",
            "in": "query"
          },
          {
            "type": "string",
            "name": "branch",
            "in": "query"
          },
          {
            "type": "string",
            "name": "locator",
            "in": "query"
          },
          {
            "type": "string",
            "name": "lastName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "dodID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "emplid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "destinationDutyLocation",
            "in": "query"
          },
          {
            "type": "string",
            "name": "originDutyLocation",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "PENDING",
                "REVIEWED",
                "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
                "PAID",
                "DEPRECATED",
                "EDI_ERROR"
              ],
              "type": "string"
            },
            "description": "Filtering for the status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "order type",
            "name": "orderType",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Used to return a queue for a GBLOC other than the default of the current user. Requires the HQ role. The parameter is ignored if the requesting user does not have the necessary role.\n",
            "name": "viewAsGBLOC",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/QueuePaymentRequestsResult"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/queues/prime-moves": {
      "get": {
        "description": "Gets all moves that have been reviewed and approved by the TOO. The ` + "`" + `since` + "`" + ` parameter can be used to filter this\nlist down to only the moves that have been updated since the provided timestamp. A move will be considered\nupdated if the ` + "`" + `updatedAt` + "`" + ` timestamp on the move or on its orders, shipments, service items, or payment\nrequests, is later than the provided date and time.\n\n**WIP**: Include what causes moves to leave this list. Currently, once the ` + "`" + `availableToPrimeAt` + "`" + ` timestamp has\nbeen set, that move will always appear in this list.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "getPrimeMovesQueue",
        "operationId": "listPrimeMoves",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Only return moves updated since this time. Formatted like \"2021-07-23T18:30:47.116Z\"",
            "name": "since",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "requested page of results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "results per page",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "moveCode",
            "in": "query"
          },
          {
            "type": "string",
            "description": "order type",
            "name": "orderType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moves. A successful fetch might still return zero moves.",
            "schema": {
              "$ref": "#/definitions/ListPrimeMovesResult"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/report-violations/{reportID}": {
      "get": {
        "description": "Fetch the report violations for an evaluation report",
        "produces": [
          "application/json"
        ],
        "tags": [
          "reportViolations"
        ],
        "summary": "Fetch the report violations for an evaluation report",
        "operationId": "getReportViolationsByReportID",
        "responses": {
          "200": {
            "description": "Successfully retrieved the report violations",
            "schema": {
              "$ref": "#/definitions/ReportViolations"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "post": {
        "description": "Associate violations with an evaluation report. This will overwrite any existing report-violations associations for the report and replace them with the newly provided ones.  An empty array will remove all violation associations for a given report.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "reportViolations"
        ],
        "summary": "Associate violations with an evaluation report",
        "operationId": "associateReportViolations",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AssociateReportViolations"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully saved the report violations"
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "create.reportViolation"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "the evaluation report ID that has associated violations",
          "name": "reportID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service-item/{mtoServiceItemID}/entry-date-update": {
      "patch": {
        "description": "Locates the service item in the database and updates the SIT entry date for the selected service item and returns the service item",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Updates a service item's SIT entry date by ID",
        "operationId": "updateServiceItemSitEntryDate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceItemSitEntryDate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated SIT entry date",
            "schema": {
              "$ref": "#/definitions/MTOServiceItemSingle"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the service item",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}": {
      "get": {
        "description": "fetches a shipment by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "fetches a shipment by ID",
        "operationId": "getShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipment to be fetched",
            "name": "shipmentID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the shipment",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "delete": {
        "description": "Soft deletes a shipment by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "Soft deletes a shipment by ID",
        "operationId": "deleteShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipment to be deleted",
            "name": "shipmentID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully soft deleted the shipment"
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/shipments/{shipmentID}/approve": {
      "post": {
        "description": "Approves a shipment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "Approves a shipment",
        "operationId": "approveShipment",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved the shipment",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.shipment"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/approve-diversion": {
      "post": {
        "description": "Approves a shipment diversion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "Approves a shipment diversion",
        "operationId": "approveShipmentDiversion",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved the shipment diversion",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.shipment"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/ppm-documents": {
      "get": {
        "description": "Retrieves all of the documents and associated uploads for each ppm document type connected to a PPM shipment. This\nexcludes any deleted PPM documents.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Gets all the PPM documents for a PPM shipment",
        "operationId": "getPPMDocuments",
        "responses": {
          "200": {
            "description": "All PPM documents and associated uploads for the specified PPM shipment.",
            "schema": {
              "$ref": "#/definitions/PPMDocuments"
            }
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/reject": {
      "post": {
        "description": "rejects a shipment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "rejects a shipment",
        "operationId": "rejectShipment",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully rejected the shipment",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/request-cancellation": {
      "post": {
        "description": "Requests a shipment cancellation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "Requests a shipment cancellation",
        "operationId": "requestShipmentCancellation",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully requested the shipment cancellation",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "create.shipmentCancellation"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/request-diversion": {
      "post": {
        "description": "Requests a shipment diversion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "Requests a shipment diversion",
        "operationId": "requestShipmentDiversion",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestDiversion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully requested the shipment diversion",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "create.shipmentDiversionRequest"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/request-reweigh": {
      "post": {
        "description": "Requests a shipment reweigh",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment",
          "reweigh"
        ],
        "summary": "Requests a shipment reweigh",
        "operationId": "requestShipmentReweigh",
        "responses": {
          "200": {
            "description": "Successfully requested a reweigh of the shipment",
            "schema": {
              "$ref": "#/definitions/Reweigh"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "create.reweighRequest"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/review-shipment-address-update": {
      "patch": {
        "description": "This endpoint is used to approve a address update request. Office remarks are required. Approving the address update will update the Destination Final Address of the associated service item",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "Allows TOO to review a shipment address update",
        "operationId": "reviewShipmentAddressUpdate",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "officeRemarks",
                "status"
              ],
              "properties": {
                "officeRemarks": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "REJECTED",
                    "APPROVED"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully requested a shipment address update",
            "schema": {
              "$ref": "#/definitions/ShipmentAddressUpdate"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/sit-extensions": {
      "post": {
        "description": "TOO can creates an already-approved SIT Duration Update on behalf of a customer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment",
          "sitExtension"
        ],
        "summary": "Create an approved SIT Duration Update",
        "operationId": "createApprovedSITDurationUpdate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipment",
            "name": "shipmentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApprovedSITDurationUpdate"
            }
          },
          {
            "type": "string",
            "description": "We want the shipment's eTag rather than the SIT Duration Update eTag as the SIT Duration Update is always associated with a shipment",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a SIT Extension.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "create.SITExtension"
        ]
      }
    },
    "/shipments/{shipmentID}/sit-extensions/{sitExtensionID}/approve": {
      "patch": {
        "description": "Approves a SIT extension",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment",
          "sitExtension"
        ],
        "summary": "Approves a SIT extension",
        "operationId": "approveSITExtension",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveSITExtension"
            }
          },
          {
            "type": "string",
            "description": "We want the shipment's eTag rather than the SIT extension eTag as the SIT extension is always associated with a shipment",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved a SIT extension",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.SITExtension"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the SIT extension",
          "name": "sitExtensionID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/sit-extensions/{sitExtensionID}/deny": {
      "patch": {
        "description": "Denies a SIT extension",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment",
          "sitExtension"
        ],
        "summary": "Denies a SIT extension",
        "operationId": "denySITExtension",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DenySITExtension"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully denied a SIT extension",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.SITExtension"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the SIT extension",
          "name": "sitExtensionID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/sit-service-item/convert-to-customer-expense": {
      "patch": {
        "description": "Converts a SIT to customer expense",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment",
          "mtoServiceItem"
        ],
        "summary": "Converts a SIT to customer expense",
        "operationId": "updateSITServiceItemCustomerExpense",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSITServiceItemCustomerExpense"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully converted to customer expense",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "412": {
            "$ref": "#/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        },
        "x-permissions": [
          "update.MTOServiceItem"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/tac/valid": {
      "get": {
        "description": "Returns a boolean based on whether a tac value is valid or not",
        "tags": [
          "tac",
          "order"
        ],
        "summary": "Validation of a TAC value",
        "operationId": "tacValidation",
        "parameters": [
          {
            "type": "string",
            "description": "The tac value to validate",
            "name": "tac",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved validation status",
            "schema": {
              "$ref": "#/definitions/TacValid"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/transportation-offices": {
      "get": {
        "description": "Returns the transportation offices matching the search query that is enabled for PPM closeout",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transportationOffice"
        ],
        "summary": "Returns the transportation offices matching the search query that is enabled for PPM closeout",
        "operationId": "getTransportationOffices",
        "parameters": [
          {
            "minLength": 2,
            "type": "string",
            "description": "Search string for transportation offices",
            "name": "search",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transportation offices",
            "schema": {
              "$ref": "#/definitions/TransportationOffices"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/transportation-offices/gblocs": {
      "get": {
        "description": "Returns a list of distinct GBLOCs that exist in the transportation offices table",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transportationOffice"
        ],
        "summary": "Returns a list of distinct GBLOCs that exist in the transportation offices table",
        "operationId": "getTransportationOfficesGBLOCs",
        "responses": {
          "200": {
            "description": "Successfully retrieved transportation offices",
            "schema": {
              "$ref": "#/definitions/GBLOCs"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/uploads": {
      "post": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF. Currently, office application uploads are only for Services Counselors to upload files for orders, but this may be expanded in the future.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "uploads"
        ],
        "summary": "Create a new upload",
        "operationId": "createUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to add an upload to",
            "name": "documentId",
            "in": "query"
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/uploads/get/": {
      "get": {
        "description": "Gets an upload",
        "produces": [
          "application/json"
        ],
        "tags": [
          "uploads"
        ],
        "summary": "Gets an upload by ID",
        "operationId": "getUpload",
        "responses": {
          "200": {
            "description": "Successfully retrieved upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/responses/PermissionDenied"
          },
          "403": {
            "$ref": "#/responses/PermissionDenied"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/uploads/{uploadID}": {
      "delete": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "tags": [
          "uploads"
        ],
        "summary": "Deletes an upload",
        "operationId": "deleteUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the upload to be deleted",
            "name": "uploadID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the order that the upload belongs to",
            "name": "orderID",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/uploads/{uploadID}/update": {
      "patch": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF. The rotation is relevant to how it is displayed on the page.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "uploads"
        ],
        "summary": "Update an existing upload. This is only needed currently for updating the image rotation.",
        "operationId": "updateUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the upload to be updated",
            "name": "uploadID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "properties": {
                "rotation": {
                  "description": "The rotation of the image",
                  "type": "integer",
                  "maximum": 3
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "updated upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "A postal address",
      "type": "object",
      "required": [
        "streetAddress1",
        "city",
        "state",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "county": {
          "type": "string",
          "title": "County",
          "x-nullable": true,
          "example": "LOS ANGELES"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isOconus": {
          "type": "boolean",
          "title": "isOconus",
          "x-nullable": true,
          "example": false
        },
        "postalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "Affiliation": {
      "description": "Military branch of service",
      "type": "string",
      "title": "Branch of service",
      "enum": [
        "ARMY",
        "NAVY",
        "MARINES",
        "AIR_FORCE",
        "COAST_GUARD",
        "SPACE_FORCE",
        "NAVY_AND_MARINES",
        "AIR_AND_SPACE_FORCE",
        "OTHER"
      ],
      "x-display-value": {
        "AIR_FORCE": "Air Force",
        "ARMY": "Army",
        "COAST_GUARD": "Coast Guard",
        "MARINES": "Marine Corps",
        "NAVY": "Navy",
        "OTHER": "OTHER",
        "SPACE_FORCE": "Space Force"
      },
      "x-nullable": true
    },
    "ApplicationParameters": {
      "type": "object",
      "properties": {
        "parameterName": {
          "type": "string",
          "format": "string",
          "x-nullable": true
        },
        "parameterValue": {
          "type": "string",
          "format": "string",
          "x-nullable": true
        },
        "validationCode": {
          "type": "string",
          "format": "string",
          "x-nullable": true
        }
      }
    },
    "ApproveSITExtension": {
      "required": [
        "approvedDays"
      ],
      "properties": {
        "approvedDays": {
          "description": "Number of days approved for SIT extension",
          "type": "integer",
          "minimum": 1,
          "example": 21
        },
        "officeRemarks": {
          "description": "Remarks from TOO about SIT approval",
          "type": "string",
          "x-nullable": true,
          "example": "Approved for three weeks rather than requested 45 days"
        },
        "requestReason": {
          "description": "Reason from service counselor-provided picklist for SIT Duration Update",
          "type": "string",
          "enum": [
            "SERIOUS_ILLNESS_MEMBER",
            "SERIOUS_ILLNESS_DEPENDENT",
            "IMPENDING_ASSIGNEMENT",
            "DIRECTED_TEMPORARY_DUTY",
            "NONAVAILABILITY_OF_CIVILIAN_HOUSING",
            "AWAITING_COMPLETION_OF_RESIDENCE",
            "OTHER"
          ],
          "example": "AWAITING_COMPLETION_OF_RESIDENCE"
        }
      }
    },
    "AssignOfficeUserBody": {
      "type": "object",
      "required": [
        "officeUserId",
        "roleType"
      ],
      "properties": {
        "officeUserId": {
          "type": "string",
          "format": "uuid"
        },
        "roleType": {
          "type": "string"
        }
      }
    },
    "AssignedOfficeUser": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "AssociateReportViolations": {
      "description": "A list of PWS violation string ids to associate with an evaluation report",
      "type": "object",
      "properties": {
        "violations": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "AvailableOfficeUser": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "hasSafetyPrivilege": {
          "type": "boolean"
        },
        "lastName": {
          "type": "string"
        },
        "officeUserId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "AvailableOfficeUsers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AvailableOfficeUser"
      }
    },
    "BackupContact": {
      "type": "object",
      "required": [
        "name",
        "email",
        "phone"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "example": "backupContact@mail.com"
        },
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$"
        }
      }
    },
    "BoatShipment": {
      "required": [
        "id",
        "shipmentId",
        "createdAt",
        "type",
        "year",
        "make",
        "model",
        "lengthInInches",
        "widthInInches",
        "heightInInches",
        "hasTrailer",
        "eTag"
      ],
      "properties": {
        "createdAt": {
          "description": "Timestamp of when the Boat Shipment was initially created (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "hasTrailer": {
          "description": "Does the boat have a trailer",
          "type": "boolean"
        },
        "heightInInches": {
          "description": "Height of the Boat in inches",
          "type": "integer"
        },
        "id": {
          "description": "Primary auto-generated unique identifier of the Boat shipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "isRoadworthy": {
          "description": "Is the trailer roadworthy",
          "type": "boolean",
          "x-nullable": true
        },
        "lengthInInches": {
          "description": "Length of the Boat in inches",
          "type": "integer"
        },
        "make": {
          "description": "Make of the Boat",
          "type": "string"
        },
        "model": {
          "description": "Model of the Boat",
          "type": "string"
        },
        "shipmentId": {
          "description": "The id of the parent MTOShipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "type": {
          "type": "string",
          "enum": [
            "HAUL_AWAY",
            "TOW_AWAY"
          ]
        },
        "updatedAt": {
          "description": "Timestamp of when a property of this object was last updated (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "widthInInches": {
          "description": "Width of the Boat in inches",
          "type": "integer"
        },
        "year": {
          "description": "Year of the Boat",
          "type": "integer"
        }
      },
      "x-nullable": true
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "Contractor": {
      "properties": {
        "contractNumber": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "CounselingUpdateAllowancePayload": {
      "type": "object",
      "properties": {
        "agency": {
          "$ref": "#/definitions/Affiliation"
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "gunSafe": {
          "description": "True if user is entitled to move a gun safe (up to 500 lbs) as part of their move without it being charged against their weight allowance.",
          "type": "boolean",
          "x-nullable": true
        },
        "organizationalClothingAndIndividualEquipment": {
          "description": "only for Army",
          "type": "boolean",
          "x-nullable": true
        },
        "proGearWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "maximum": 2000,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "proGearWeightSpouse": {
          "description": "unit is in lbs",
          "type": "integer",
          "maximum": 500,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "requiredMedicalEquipmentWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "x-formatting": "weight",
          "example": 2000
        },
        "storageInTransit": {
          "description": "the number of storage in transit days that the customer is entitled to for a given shipment on their move",
          "type": "integer"
        }
      }
    },
    "CounselingUpdateOrderPayload": {
      "type": "object",
      "required": [
        "issueDate",
        "reportByDate",
        "ordersType",
        "originDutyLocationId",
        "newDutyLocationId"
      ],
      "properties": {
        "departmentIndicator": {
          "x-nullable": true,
          "$ref": "#/definitions/DeptIndicator"
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "issueDate": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Orders date",
          "example": "2018-04-26"
        },
        "newDutyLocationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ntsSac": {
          "title": "NTS SAC",
          "$ref": "#/definitions/NullableString",
          "example": "N002214CSW32Y9"
        },
        "ntsTac": {
          "title": "NTS TAC",
          "maxLength": 4,
          "minLength": 4,
          "$ref": "#/definitions/NullableString",
          "example": "F8J1"
        },
        "ordersNumber": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "ordersType": {
          "$ref": "#/definitions/OrdersType"
        },
        "ordersTypeDetail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyLocationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reportByDate": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report-by date",
          "example": "2018-04-26"
        },
        "sac": {
          "title": "HHG SAC",
          "$ref": "#/definitions/NullableString",
          "example": "N002214CSW32Y9"
        },
        "tac": {
          "type": "string",
          "title": "HHG TAC",
          "maxLength": 4,
          "minLength": 4,
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "CreateApprovedSITDurationUpdate": {
      "required": [
        "requestReason",
        "approvedDays"
      ],
      "properties": {
        "approvedDays": {
          "description": "Number of days approved for SIT extension. This will match requested days saved to the SIT extension model.",
          "type": "integer",
          "example": 21
        },
        "officeRemarks": {
          "description": "Remarks from TOO about SIT Duration Update creation",
          "type": "string",
          "x-nullable": true,
          "example": "Customer needs additional storage time as their new place of residence is not yet ready"
        },
        "requestReason": {
          "description": "Reason from service counselor-provided picklist for SIT Duration Update",
          "type": "string",
          "enum": [
            "SERIOUS_ILLNESS_MEMBER",
            "SERIOUS_ILLNESS_DEPENDENT",
            "IMPENDING_ASSIGNEMENT",
            "DIRECTED_TEMPORARY_DUTY",
            "NONAVAILABILITY_OF_CIVILIAN_HOUSING",
            "AWAITING_COMPLETION_OF_RESIDENCE",
            "OTHER"
          ],
          "example": "AWAITING_COMPLETION_OF_RESIDENCE"
        }
      }
    },
    "CreateBoatShipment": {
      "description": "Boat shipment information for the move.",
      "required": [
        "type",
        "year",
        "make",
        "model",
        "lengthInInches",
        "widthInInches",
        "heightInInches",
        "hasTrailer"
      ],
      "properties": {
        "hasTrailer": {
          "description": "Does the boat have a trailer",
          "type": "boolean"
        },
        "heightInInches": {
          "description": "Height of the Boat in inches",
          "type": "integer"
        },
        "isRoadworthy": {
          "description": "Is the trailer roadworthy",
          "type": "boolean",
          "x-nullable": true
        },
        "lengthInInches": {
          "description": "Length of the Boat in inches",
          "type": "integer"
        },
        "make": {
          "description": "Make of the Boat",
          "type": "string"
        },
        "model": {
          "description": "Model of the Boat",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "HAUL_AWAY",
            "TOW_AWAY"
          ]
        },
        "widthInInches": {
          "description": "Width of the Boat in inches",
          "type": "integer"
        },
        "year": {
          "description": "Year of the Boat",
          "type": "integer"
        }
      }
    },
    "CreateCustomerPayload": {
      "type": "object",
      "properties": {
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "backupContact": {
          "$ref": "#/definitions/BackupContact"
        },
        "backupMailingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "cacUser": {
          "type": "boolean"
        },
        "createOktaAccount": {
          "type": "boolean"
        },
        "edipi": {
          "type": "string",
          "maxLength": 10,
          "x-nullable": false,
          "example": "1234567890"
        },
        "emailIsPreferred": {
          "type": "boolean"
        },
        "emplid": {
          "type": "string",
          "maxLength": 7,
          "x-nullable": true,
          "example": "9485155"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "middleName": {
          "type": "string",
          "x-nullable": true,
          "example": "David"
        },
        "personalEmail": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "example": "personalEmail@email.com"
        },
        "phoneIsPreferred": {
          "type": "boolean"
        },
        "residentialAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryTelephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "suffix": {
          "type": "string",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        }
      }
    },
    "CreateCustomerSupportRemark": {
      "description": "A text remark written by an customer support user that is associated with a specific move.",
      "type": "object",
      "required": [
        "content",
        "officeUserID"
      ],
      "properties": {
        "content": {
          "type": "string",
          "example": "This is a remark about a move."
        },
        "officeUserID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        }
      }
    },
    "CreateEvaluationReport": {
      "description": "Minimal set of info needed to create a shipment evaluation report, which is just a shipment ID.",
      "type": "object",
      "properties": {
        "shipmentID": {
          "description": "The shipment ID of the shipment to be evaluated in the report",
          "type": "string",
          "format": "uuid",
          "example": "01b9671e-b268-4906-967b-ba661a1d3933"
        }
      }
    },
    "CreateMTOShipment": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "shipmentType"
      ],
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "boatShipment": {
          "$ref": "#/definitions/CreateBoatShipment"
        },
        "counselorRemarks": {
          "description": "The counselor can use the counselor remarks field to inform the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\nCounselors enters this information when creating or editing an MTO Shipment. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "customerRemarks": {
          "description": "The customer can use the customer remarks field to inform the services counselor and the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\nCustomer enters this information during onboarding. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "description": "Where the movers should deliver this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "destinationType": {
          "$ref": "#/definitions/DestinationType"
        },
        "hasSecondaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "mobileHomeShipment": {
          "$ref": "#/definitions/CreateMobileHomeShipment"
        },
        "moveTaskOrderID": {
          "description": "The ID of the move this new shipment is for.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoServiceItems": {
          "$ref": "#/definitions/MTOServiceItems"
        },
        "ntsRecordedWeight": {
          "description": "The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "pickupAddress": {
          "description": "The address where the movers should pick up this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "ppmShipment": {
          "$ref": "#/definitions/CreatePPMShipment"
        },
        "requestedDeliveryDate": {
          "description": "The customer's preferred delivery date.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "requestedPickupDate": {
          "description": "The customer's preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sacType": {
          "allOf": [
            {
              "$ref": "#/definitions/LOAType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "secondaryDeliveryAddress": {
          "description": "Where the movers should deliver this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "description": "The address where the movers should pick up this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "serviceOrderNumber": {
          "type": "string",
          "x-nullable": true
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "storageFacility": {
          "x-nullable": true,
          "$ref": "#/definitions/StorageFacility"
        },
        "tacType": {
          "allOf": [
            {
              "$ref": "#/definitions/LOAType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "tertiaryDeliveryAddress": {
          "description": "Where the movers should deliver this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "tertiaryPickupAddress": {
          "description": "The address where the movers should pick up this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "usesExternalVendor": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        }
      }
    },
    "CreateMobileHomeShipment": {
      "description": "A mobile home shipment that the prime moves for a service member.",
      "required": [
        "make",
        "model",
        "year",
        "lengthInInches",
        "heightInInches",
        "widthInInches"
      ],
      "properties": {
        "heightInInches": {
          "description": "Height of the Mobile Home in inches",
          "type": "integer"
        },
        "lengthInInches": {
          "description": "Length of the Mobile Home in inches",
          "type": "integer"
        },
        "make": {
          "description": "Make of the Mobile Home",
          "type": "string"
        },
        "model": {
          "description": "Model of the Mobile Home",
          "type": "string"
        },
        "widthInInches": {
          "description": "Width of the Mobile Home in inches",
          "type": "integer"
        },
        "year": {
          "description": "Year of the Mobile Home",
          "type": "integer"
        }
      }
    },
    "CreateOrders": {
      "type": "object",
      "required": [
        "serviceMemberId",
        "issueDate",
        "reportByDate",
        "ordersType",
        "hasDependents",
        "spouseHasProGear",
        "newDutyLocationId"
      ],
      "properties": {
        "departmentIndicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "hasDependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?"
        },
        "issueDate": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Orders date"
        },
        "newDutyLocationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ordersNumber": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "ordersType": {
          "$ref": "#/definitions/OrdersType"
        },
        "ordersTypeDetail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyLocationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reportByDate": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report-by date"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "serviceMemberId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "spouseHasProGear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "CreatePPMShipment": {
      "description": "A personally procured move is a type of shipment that a service members moves themselves.",
      "required": [
        "expectedDepartureDate",
        "pickupAddress",
        "destinationAddress",
        "sitExpected",
        "estimatedWeight",
        "hasProGear"
      ],
      "properties": {
        "destinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "estimatedWeight": {
          "type": "integer",
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to move.\n",
          "type": "string",
          "format": "date"
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear.\n",
          "type": "boolean"
        },
        "hasSecondaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "pickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "proGearWeight": {
          "type": "integer",
          "x-nullable": true
        },
        "secondaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "sitEstimatedDepartureDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedEntryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "sitExpected": {
          "type": "boolean"
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "spouseProGearWeight": {
          "type": "integer",
          "x-nullable": true
        },
        "tertiaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "tertiaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        }
      }
    },
    "CreatedCustomer": {
      "type": "object",
      "properties": {
        "affiliation": {
          "type": "string",
          "title": "Branch of service customer is affilated with"
        },
        "backupAddress": {
          "$ref": "#/definitions/Address"
        },
        "backupContact": {
          "$ref": "#/definitions/BackupContact"
        },
        "cacValidated": {
          "type": "boolean"
        },
        "edipi": {
          "type": "string",
          "x-nullable": true
        },
        "emailIsPreferred": {
          "type": "boolean"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "middleName": {
          "type": "string",
          "x-nullable": true,
          "example": "David"
        },
        "oktaEmail": {
          "type": "string"
        },
        "oktaID": {
          "type": "string"
        },
        "personalEmail": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "phoneIsPreferred": {
          "type": "boolean"
        },
        "residentialAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryTelephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "suffix": {
          "type": "string",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "agency": {
          "type": "string",
          "title": "Agency customer is affilated with"
        },
        "backupAddress": {
          "$ref": "#/definitions/Address"
        },
        "backup_contact": {
          "$ref": "#/definitions/BackupContact"
        },
        "cacValidated": {
          "type": "boolean",
          "x-nullable": true
        },
        "current_address": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string"
        },
        "edipi": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "emailIsPreferred": {
          "type": "boolean"
        },
        "emplid": {
          "type": "string",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "middle_name": {
          "type": "string",
          "x-nullable": true,
          "example": "David"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "phoneIsPreferred": {
          "type": "boolean"
        },
        "secondaryTelephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$|^$",
          "x-nullable": true
        },
        "suffix": {
          "type": "string",
          "x-nullable": true,
          "example": "Jr."
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "CustomerContactType": {
      "description": "Describes a customer contact type for a MTOServiceItem of type domestic destination SIT.",
      "type": "string",
      "enum": [
        "FIRST",
        "SECOND"
      ]
    },
    "CustomerSupportRemark": {
      "description": "A text remark written by an office user that is associated with a specific move.",
      "type": "object",
      "required": [
        "id",
        "moveID",
        "officeUserID",
        "content"
      ],
      "properties": {
        "content": {
          "type": "string",
          "example": "This is a remark about a move."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "officeUserEmail": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "readOnly": true
        },
        "officeUserFirstName": {
          "type": "string",
          "readOnly": true,
          "example": "Grace"
        },
        "officeUserID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "officeUserLastName": {
          "type": "string",
          "readOnly": true,
          "example": "Griffin"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "CustomerSupportRemarks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CustomerSupportRemark"
      }
    },
    "DenySITExtension": {
      "required": [
        "officeRemarks",
        "convertToCustomerExpense"
      ],
      "properties": {
        "convertToCustomerExpense": {
          "description": "Whether or not to convert to members expense once SIT extension is denied.",
          "type": "boolean",
          "example": false
        },
        "officeRemarks": {
          "description": "Remarks from TOO about SIT denial",
          "type": "string",
          "x-nullable": true,
          "example": "Denied this extension as it does not match the criteria"
        }
      }
    },
    "DeptIndicator": {
      "type": "string",
      "title": "Dept. indicator",
      "enum": [
        "NAVY_AND_MARINES",
        "ARMY",
        "ARMY_CORPS_OF_ENGINEERS",
        "AIR_AND_SPACE_FORCE",
        "COAST_GUARD",
        "OFFICE_OF_SECRETARY_OF_DEFENSE"
      ],
      "x-display-value": {
        "AIR_AND_SPACE_FORCE": "57 Air Force and Space Force",
        "ARMY": "21 Army",
        "ARMY_CORPS_OF_ENGINEERS": "96 Army Corps of Engineers",
        "COAST_GUARD": "70 Coast Guard",
        "NAVY_AND_MARINES": "17 Navy and Marine Corps",
        "OFFICE_OF_SECRETARY_OF_DEFENSE": "97 Office of the Secretary of Defense"
      },
      "x-nullable": true
    },
    "DestinationType": {
      "type": "string",
      "title": "Destination Type",
      "enum": [
        "HOME_OF_RECORD",
        "HOME_OF_SELECTION",
        "PLACE_ENTERED_ACTIVE_DUTY",
        "OTHER_THAN_AUTHORIZED"
      ],
      "x-nullable": true,
      "example": "OTHER_THAN_AUTHORIZED"
    },
    "DimensionType": {
      "description": "Describes a dimension type for a MTOServiceItemDimension.",
      "type": "string",
      "enum": [
        "ITEM",
        "CRATE"
      ]
    },
    "Document": {
      "type": "object",
      "required": [
        "id",
        "service_member_id",
        "uploads"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "DutyLocation": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "address_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        }
      }
    },
    "Entitlements": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "eTag": {
          "type": "string"
        },
        "gunSafe": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "571008b1-b0de-454d-b843-d71be9f02c04"
        },
        "nonTemporaryStorage": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "organizationalClothingAndIndividualEquipment": {
          "type": "boolean",
          "example": true
        },
        "privatelyOwnedVehicle": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "proGearWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 2000
        },
        "proGearWeightSpouse": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "requiredMedicalEquipmentWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "storageInTransit": {
          "type": "integer",
          "x-nullable": true,
          "example": 90
        },
        "totalDependents": {
          "type": "integer",
          "example": 2
        },
        "totalWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "EvaluationReport": {
      "description": "An evaluation report",
      "type": "object",
      "properties": {
        "ReportViolations": {
          "x-nullable": true,
          "$ref": "#/definitions/ReportViolations"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string"
        },
        "evalEnd": {
          "type": "string",
          "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
          "x-nullable": true,
          "example": "18:00"
        },
        "evalStart": {
          "type": "string",
          "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
          "x-nullable": true,
          "example": "15:00"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "inspectionDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "inspectionType": {
          "x-nullable": true,
          "$ref": "#/definitions/EvaluationReportInspectionType"
        },
        "location": {
          "x-nullable": true,
          "$ref": "#/definitions/EvaluationReportLocation"
        },
        "locationDescription": {
          "type": "string",
          "x-nullable": true,
          "example": "Route 66 at crash inspection site 3"
        },
        "moveID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveReferenceID": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true
        },
        "observedClaimsResponseDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "observedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "observedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "observedPickupSpreadEndDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "observedPickupSpreadStartDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "observedShipmentDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "observedShipmentPhysicalPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "officeUser": {
          "$ref": "#/definitions/EvaluationReportOfficeUser"
        },
        "remarks": {
          "type": "string",
          "x-nullable": true
        },
        "seriousIncident": {
          "type": "boolean",
          "x-nullable": true
        },
        "seriousIncidentDesc": {
          "type": "string",
          "x-nullable": true
        },
        "shipmentID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "timeDepart": {
          "type": "string",
          "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
          "x-nullable": true,
          "example": "14:30"
        },
        "type": {
          "$ref": "#/definitions/EvaluationReportType"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "violationsObserved": {
          "type": "boolean",
          "x-nullable": true
        }
      }
    },
    "EvaluationReportInspectionType": {
      "type": "string",
      "enum": [
        "DATA_REVIEW",
        "PHYSICAL",
        "VIRTUAL"
      ],
      "x-nullable": true
    },
    "EvaluationReportList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/EvaluationReport"
      }
    },
    "EvaluationReportLocation": {
      "type": "string",
      "enum": [
        "ORIGIN",
        "DESTINATION",
        "OTHER"
      ],
      "x-nullable": true
    },
    "EvaluationReportOfficeUser": {
      "description": "The authoring office user for an evaluation report",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$"
        }
      },
      "readOnly": true
    },
    "EvaluationReportType": {
      "type": "string",
      "enum": [
        "SHIPMENT",
        "COUNSELING"
      ]
    },
    "FetchLineOfAccountingPayload": {
      "type": "object",
      "properties": {
        "effectiveDate": {
          "description": "The effective date for the Line Of Accounting (LOA) being fetched. Eg, the orders issue date or the Non-Temporary Storage (NTS) Move Task Order (MTO) approval date. Effective date is used to find \"Active\" TGET data by searching for the TACs and LOAs with begin and end dates containing this date. The 'Effective Date' is the date that can be either the orders issued date (For HHG shipments), MTO approval date (For NTS shipments), or even the current date for NTS shipments with no approval yet (Just providing a preview to the office users per customer request).\n",
          "type": "string",
          "format": "date",
          "example": "2023-01-01"
        },
        "serviceMemberAffiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "tacCode": {
          "type": "string",
          "maxLength": 4,
          "minLength": 4,
          "example": "F8J1"
        }
      }
    },
    "GBLOC": {
      "type": "string",
      "enum": [
        "AGFM",
        "APAT",
        "BGAC",
        "BGNC",
        "BKAS",
        "CFMQ",
        "CLPK",
        "CNNQ",
        "DMAT",
        "GSAT",
        "HAFC",
        "HBAT",
        "JEAT",
        "JENQ",
        "KKFA",
        "LHNQ",
        "LKNQ",
        "MAPK",
        "MAPS",
        "MBFL",
        "MLNQ",
        "XXXX"
      ]
    },
    "GBLOCs": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Grade": {
      "type": "string",
      "title": "grade",
      "enum": [
        "E_1",
        "E_2",
        "E_3",
        "E_4",
        "E_5",
        "E_6",
        "E_7",
        "E_8",
        "E_9",
        "E_9_SPECIAL_SENIOR_ENLISTED",
        "O_1_ACADEMY_GRADUATE",
        "O_2",
        "O_3",
        "O_4",
        "O_5",
        "O_6",
        "O_7",
        "O_8",
        "O_9",
        "O_10",
        "W_1",
        "W_2",
        "W_3",
        "W_4",
        "W_5",
        "AVIATION_CADET",
        "CIVILIAN_EMPLOYEE",
        "ACADEMY_CADET",
        "MIDSHIPMAN"
      ],
      "x-display-value": {
        "ACADEMY_CADET": "Service Academy Cadet",
        "AVIATION_CADET": "Aviation Cadet",
        "CIVILIAN_EMPLOYEE": "Civilian Employee",
        "E_1": "E-1",
        "E_2": "E-2",
        "E_3": "E-3",
        "E_4": "E-4",
        "E_5": "E-5",
        "E_6": "E-6",
        "E_7": "E-7",
        "E_8": "E-8",
        "E_9": "E-9",
        "E_9_SPECIAL_SENIOR_ENLISTED": "E-9 (Special Senior Enlisted)",
        "MIDSHIPMAN": "Midshipman",
        "O_10": "O-10",
        "O_1_ACADEMY_GRADUATE": "O-1 or Service Academy Graduate",
        "O_2": "O-2",
        "O_3": "O-3",
        "O_4": "O-4",
        "O_5": "O-5",
        "O_6": "O-6",
        "O_7": "O-7",
        "O_8": "O-8",
        "O_9": "O-9",
        "W_1": "W-1",
        "W_2": "W-2",
        "W_3": "W-3",
        "W_4": "W-4",
        "W_5": "W-5"
      },
      "x-nullable": true
    },
    "InvalidRequestResponsePayload": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "IsDateWeekendHolidayInfo": {
      "type": "object",
      "required": [
        "country_code",
        "country_name",
        "date",
        "is_weekend",
        "is_holiday"
      ],
      "properties": {
        "country_code": {
          "type": "string"
        },
        "country_name": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "2018-09-25"
        },
        "details": {
          "type": "string"
        },
        "is_holiday": {
          "type": "boolean"
        },
        "is_weekend": {
          "type": "boolean"
        }
      }
    },
    "LOAType": {
      "description": "The Line of accounting (TAC/SAC) type that will be used for the shipment",
      "type": "string",
      "enum": [
        "HHG",
        "NTS"
      ],
      "example": "HHG"
    },
    "LOATypeNullable": {
      "description": "The Line of accounting (TAC/SAC) type that will be used for the shipment",
      "type": "string",
      "enum": [
        "HHG",
        "NTS"
      ],
      "x-go-type": {
        "import": {
          "package": "github.com/transcom/mymove/pkg/swagger/nullable"
        },
        "type": "String"
      },
      "example": "HHG"
    },
    "LineOfAccounting": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-08-03T19:17:10.050Z"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "06254fc3-b763-484c-b555-42855d1ad5cd"
        },
        "loaActvtyID": {
          "type": "string",
          "maxLength": 11,
          "x-nullable": true
        },
        "loaAgncAcntngCd": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true
        },
        "loaAgncDsbrCd": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true
        },
        "loaAlltSnID": {
          "type": "string",
          "maxLength": 5,
          "x-nullable": true,
          "example": "123A"
        },
        "loaBafID": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true,
          "example": "1234"
        },
        "loaBdgtAcntClsNm": {
          "type": "string",
          "maxLength": 8,
          "x-nullable": true,
          "example": "000000"
        },
        "loaBetCd": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true
        },
        "loaBgFyTx": {
          "type": "integer",
          "x-nullable": true,
          "example": 2006
        },
        "loaBgnDt": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2005-10-01"
        },
        "loaBgtLnItmID": {
          "type": "string",
          "maxLength": 8,
          "x-nullable": true
        },
        "loaBgtRstrCd": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaBgtSubActCd": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true
        },
        "loaClsRefID": {
          "type": "string",
          "maxLength": 2,
          "x-nullable": true
        },
        "loaCstCd": {
          "type": "string",
          "maxLength": 16,
          "x-nullable": true
        },
        "loaCstCntrID": {
          "type": "string",
          "maxLength": 16,
          "x-nullable": true
        },
        "loaCustNm": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true
        },
        "loaDfAgncyAlctnRcpntID": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true
        },
        "loaDocID": {
          "type": "string",
          "maxLength": 15,
          "x-nullable": true,
          "example": "HHG12345678900"
        },
        "loaDptID": {
          "type": "string",
          "maxLength": 2,
          "x-nullable": true,
          "example": "1 "
        },
        "loaDscTx": {
          "type": "string",
          "x-nullable": true,
          "example": "PERSONAL PROPERTY - PARANORMAL ACTIVITY DIVISION (OTHER)"
        },
        "loaDtlRmbsmtSrcID": {
          "type": "string",
          "maxLength": 3,
          "x-nullable": true
        },
        "loaEndDt": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2015-10-01"
        },
        "loaEndFyTx": {
          "type": "integer",
          "x-nullable": true,
          "example": 2016
        },
        "loaFmsTrnsactnID": {
          "type": "string",
          "maxLength": 12,
          "x-nullable": true
        },
        "loaFnclArID": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true
        },
        "loaFnctPrsNm": {
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "loaFndCntrID": {
          "type": "string",
          "maxLength": 12,
          "x-nullable": true
        },
        "loaFndTyFgCd": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaHistStatCd": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaHsGdsCd": {
          "type": "string",
          "maxLength": 2,
          "x-nullable": true,
          "example": "HT"
        },
        "loaInstlAcntgActID": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true,
          "example": "12345"
        },
        "loaJbOrdNm": {
          "type": "string",
          "maxLength": 10,
          "x-nullable": true
        },
        "loaLclInstlID": {
          "type": "string",
          "maxLength": 18,
          "x-nullable": true
        },
        "loaMajClmNm": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true
        },
        "loaMajRmbsmtSrcID": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaObjClsID": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true,
          "example": "22NL"
        },
        "loaOpAgncyID": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true,
          "example": "1A"
        },
        "loaPgmElmntID": {
          "type": "string",
          "maxLength": 12,
          "x-nullable": true,
          "example": "00000000"
        },
        "loaPrjID": {
          "type": "string",
          "maxLength": 12,
          "x-nullable": true
        },
        "loaSbaltmtRcpntID": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaScrtyCoopCustCd": {
          "type": "string",
          "maxLength": 2,
          "x-nullable": true
        },
        "loaScrtyCoopDsgntrCd": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true
        },
        "loaScrtyCoopImplAgncCd": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaScrtyCoopLnItmID": {
          "type": "string",
          "maxLength": 3,
          "x-nullable": true
        },
        "loaSpclIntrID": {
          "type": "string",
          "maxLength": 2,
          "x-nullable": true
        },
        "loaSrvSrcID": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaStatCd": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true,
          "example": "U"
        },
        "loaSubAcntID": {
          "type": "string",
          "maxLength": 3,
          "x-nullable": true
        },
        "loaSysId": {
          "type": "string",
          "maxLength": 20,
          "x-nullable": true,
          "example": "10003"
        },
        "loaTnsfrDptNm": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true
        },
        "loaTrnsnID": {
          "type": "string",
          "maxLength": 3,
          "x-nullable": true,
          "example": "B1"
        },
        "loaTrsySfxTx": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true,
          "example": "0000"
        },
        "loaTskBdgtSblnTx": {
          "type": "string",
          "maxLength": 8,
          "x-nullable": true
        },
        "loaUic": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true
        },
        "loaWkCntrRcpntNm": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true
        },
        "loaWrkOrdID": {
          "type": "string",
          "maxLength": 16,
          "x-nullable": true
        },
        "orgGrpDfasCd": {
          "type": "string",
          "maxLength": 2,
          "x-nullable": true,
          "example": "ZZ"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-08-03T19:17:38.776Z"
        },
        "validHhgProgramCodeForLoa": {
          "type": "boolean",
          "x-nullable": true
        },
        "validLoaForTac": {
          "type": "boolean",
          "x-nullable": true
        }
      }
    },
    "ListPrimeMove": {
      "description": "An abbreviated definition for a move, without all the nested information (shipments, service items, etc). Used to fetch a list of moves more efficiently.\n",
      "type": "object",
      "properties": {
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveCode": {
          "type": "string",
          "readOnly": true,
          "example": "HYXFJF"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "orderType": {
          "type": "string"
        },
        "ppmType": {
          "type": "string",
          "enum": [
            "FULL",
            "PARTIAL"
          ]
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ListPrimeMoves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ListPrimeMove"
      }
    },
    "ListPrimeMovesResult": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "queueMoves": {
          "$ref": "#/definitions/ListPrimeMoves"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "Location": {
      "type": "object",
      "required": [
        "label",
        "value"
      ],
      "properties": {
        "label": {
          "type": "string",
          "example": "Label for display"
        },
        "value": {
          "type": "string",
          "example": "Value for location"
        }
      }
    },
    "Locations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Location"
      }
    },
    "LockedOfficeUser": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "transportationOffice": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "type": "string",
          "enum": [
            "RELEASING_AGENT",
            "RECEIVING_AGENT"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$)|(^$)",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "(^[2-9]\\d{2}-\\d{3}-\\d{4}$)|(^$)",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOAgents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOApprovalServiceItemCodes": {
      "description": "MTO level service items to create when updating MTO status.",
      "type": "object",
      "properties": {
        "serviceCodeCS": {
          "type": "boolean",
          "example": true
        },
        "serviceCodeMS": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "MTOServiceItem": {
      "type": "object",
      "required": [
        "id",
        "moveTaskOrderID",
        "reServiceID",
        "reServiceCode",
        "reServiceName"
      ],
      "properties": {
        "SITPostalCode": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true
        },
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "convertToCustomerExpense": {
          "type": "boolean",
          "x-omitempty": false,
          "example": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerContacts": {
          "$ref": "#/definitions/MTOServiceItemCustomerContacts"
        },
        "customerExpenseReason": {
          "type": "string",
          "x-nullable": true
        },
        "deletedAt": {
          "type": "string",
          "format": "date"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "dimensions": {
          "$ref": "#/definitions/MTOServiceItemDimensions"
        },
        "eTag": {
          "type": "string"
        },
        "estimatedPrice": {
          "type": "integer",
          "format": "cents",
          "x-nullable": true
        },
        "estimatedWeight": {
          "description": "estimated weight of the shuttle service item provided by the prime",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2500
        },
        "feeType": {
          "type": "string",
          "enum": [
            "COUNSELING",
            "CRATING",
            "TRUCKING",
            "SHUTTLE"
          ]
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lockedPriceCents": {
          "type": "integer",
          "format": "cents",
          "x-nullable": true
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupPostalCode": {
          "type": "string",
          "x-nullable": true
        },
        "quantity": {
          "type": "integer"
        },
        "rate": {
          "type": "integer"
        },
        "reServiceCode": {
          "type": "string"
        },
        "reServiceID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "type": "string"
        },
        "reason": {
          "type": "string",
          "x-nullable": true
        },
        "rejectedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true
        },
        "serviceRequestDocuments": {
          "$ref": "#/definitions/ServiceRequestDocuments"
        },
        "sitCustomerContacted": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitDeliveryMiles": {
          "type": "integer",
          "x-nullable": true
        },
        "sitDepartureDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sitDestinationFinalAddress": {
          "$ref": "#/definitions/Address"
        },
        "sitDestinationOriginalAddress": {
          "$ref": "#/definitions/Address"
        },
        "sitEntryDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sitOriginHHGActualAddress": {
          "$ref": "#/definitions/Address"
        },
        "sitOriginHHGOriginalAddress": {
          "$ref": "#/definitions/Address"
        },
        "sitRequestedDelivery": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "standaloneCrate": {
          "type": "boolean",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date"
        },
        "total": {
          "type": "integer",
          "format": "cents"
        },
        "updateReason": {
          "description": "Reason for updating service item.",
          "type": "string",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOServiceItemCustomerContact": {
      "description": "Customer contact information for a destination SIT service item",
      "type": "object",
      "properties": {
        "dateOfContact": {
          "description": "Date of attempted contact by the prime.",
          "type": "string",
          "format": "date"
        },
        "firstAvailableDeliveryDate": {
          "description": "First available date that the Prime can deliver SIT service item.",
          "type": "string",
          "format": "date",
          "example": "2020-12-31"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "timeMilitary": {
          "description": "Time of attempted contact by the prime.",
          "type": "string",
          "example": "0400Z"
        },
        "type": {
          "$ref": "#/definitions/CustomerContactType"
        }
      }
    },
    "MTOServiceItemCustomerContacts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItemCustomerContact"
      }
    },
    "MTOServiceItemDimension": {
      "description": "Describes a dimension object for the MTOServiceItem.",
      "type": "object",
      "properties": {
        "height": {
          "description": "Height in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "length": {
          "description": "Length in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "type": {
          "$ref": "#/definitions/DimensionType"
        },
        "width": {
          "description": "Width in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        }
      }
    },
    "MTOServiceItemDimensions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItemDimension"
      }
    },
    "MTOServiceItemSingle": {
      "type": "object",
      "properties": {
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "convertToCustomerExpense": {
          "type": "boolean",
          "x-omitempty": false,
          "example": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "customerExpenseReason": {
          "type": "string",
          "x-nullable": true
        },
        "deletedAt": {
          "type": "string",
          "format": "date"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupPostalCode": {
          "type": "string",
          "x-nullable": true
        },
        "reServiceCode": {
          "type": "string"
        },
        "reServiceID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "type": "string"
        },
        "rejectedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true
        },
        "sitCustomerContacted": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitDepartureDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sitEntryDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sitPostalCode": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true
        },
        "sitRequestedDelivery": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOServiceItemStatus": {
      "description": "Describes all statuses for a MTOServiceItem",
      "type": "string",
      "enum": [
        "SUBMITTED",
        "APPROVED",
        "REJECTED"
      ]
    },
    "MTOServiceItems": {
      "description": "A list of service items connected to this shipment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItem"
      }
    },
    "MTOShipment": {
      "properties": {
        "actualDeliveryDate": {
          "description": "The actual date that the shipment was delivered to the destination address by the Prime",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "actualPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "actualProGearWeight": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualSpouseProGearWeight": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "approvedDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "billableWeightCap": {
          "description": "TIO override billable weight to be used for calculations",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2500
        },
        "billableWeightJustification": {
          "type": "string",
          "x-nullable": true,
          "example": "more weight than expected"
        },
        "boatShipment": {
          "$ref": "#/definitions/BoatShipment"
        },
        "calculatedBillableWeight": {
          "type": "integer",
          "x-nullable": true,
          "readOnly": true,
          "example": 2000
        },
        "counselorRemarks": {
          "description": "The counselor can use the counselor remarks field to inform the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\nCounselors enters this information when creating or editing an MTO Shipment. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "deliveryAddressUpdate": {
          "$ref": "#/definitions/ShipmentAddressUpdate"
        },
        "destinationAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "destinationSitAuthEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "destinationType": {
          "$ref": "#/definitions/DestinationType"
        },
        "distance": {
          "type": "integer",
          "x-nullable": true,
          "example": 500
        },
        "diversion": {
          "type": "boolean",
          "example": true
        },
        "diversionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment needs rerouted"
        },
        "eTag": {
          "type": "string"
        },
        "hasSecondaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mobileHomeShipment": {
          "$ref": "#/definitions/MobileHome"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoAgents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "mtoServiceItems": {
          "$ref": "#/definitions/MTOServiceItems"
        },
        "ntsRecordedWeight": {
          "description": "The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "originSitAuthEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "pickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "ppmShipment": {
          "$ref": "#/definitions/PPMShipment"
        },
        "primeActualWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "primeEstimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment not good enough"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "requiredDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "reweigh": {
          "x-nullable": true,
          "x-omitempty": true,
          "$ref": "#/definitions/Reweigh"
        },
        "sacType": {
          "allOf": [
            {
              "$ref": "#/definitions/LOAType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "scheduledDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "scheduledPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "secondaryDeliveryAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "serviceOrderNumber": {
          "type": "string",
          "x-nullable": true
        },
        "shipmentLocator": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "1K43AR-01"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "sitDaysAllowance": {
          "type": "integer",
          "x-nullable": true
        },
        "sitExtensions": {
          "$ref": "#/definitions/SITExtensions"
        },
        "sitStatus": {
          "$ref": "#/definitions/SITStatus"
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        },
        "storageFacility": {
          "x-nullable": true,
          "$ref": "#/definitions/StorageFacility"
        },
        "tacType": {
          "allOf": [
            {
              "$ref": "#/definitions/LOAType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "tertiaryDeliveryAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "tertiaryPickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "usesExternalVendor": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "MTOShipmentStatus": {
      "type": "string",
      "title": "Shipment Status",
      "enum": [
        "SUBMITTED",
        "REJECTED",
        "APPROVED",
        "CANCELLATION_REQUESTED",
        "CANCELED",
        "DIVERSION_REQUESTED"
      ],
      "example": "SUBMITTED"
    },
    "MTOShipmentType": {
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "HHG",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "INTERNATIONAL_HHG",
        "INTERNATIONAL_UB",
        "PPM",
        "BOAT_HAUL_AWAY",
        "BOAT_TOW_AWAY",
        "MOBILE_HOME"
      ],
      "x-display-value": {
        "BOAT_HAUL_AWAY": "Boat Haul-Away",
        "BOAT_TOW_AWAY": "Boat Tow-Away",
        "HHG": "HHG",
        "HHG_INTO_NTS_DOMESTIC": "NTS",
        "HHG_OUTOF_NTS_DOMESTIC": "NTS Release",
        "INTERNATIONAL_HHG": "International HHG",
        "INTERNATIONAL_UB": "International UB",
        "MOBILE_HOME": "Mobile Home",
        "PPM": "PPM"
      },
      "example": "HHG"
    },
    "MTOShipments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "MobileHome": {
      "description": "A mobile home is a type of shipment that a service member moves a mobile home.",
      "properties": {
        "createdAt": {
          "description": "Timestamp of when a property of this object was created (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "heightInInches": {
          "type": "integer"
        },
        "id": {
          "description": "Primary auto-generated unique identifier of the Mobile Home object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lengthInInches": {
          "type": "integer"
        },
        "make": {
          "description": "The make of the mobile home",
          "type": "string"
        },
        "model": {
          "description": "The model of the mobile home.",
          "type": "string"
        },
        "shipmentId": {
          "description": "The id of the parent MTOShipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "updatedAt": {
          "description": "Timestamp of when a property of this object was last updated (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "widthInInches": {
          "type": "integer"
        },
        "year": {
          "description": "The year the mobile home was made.",
          "type": "integer"
        }
      },
      "x-nullable": true
    },
    "Move": {
      "properties": {
        "SCAssignedUser": {
          "$ref": "#/definitions/AssignedOfficeUser"
        },
        "TIOAssignedUser": {
          "$ref": "#/definitions/AssignedOfficeUser"
        },
        "TOOAssignedUser": {
          "$ref": "#/definitions/AssignedOfficeUser"
        },
        "additionalDocuments": {
          "$ref": "#/definitions/Document"
        },
        "approvalsRequestedAt": {
          "description": "The time at which a move is sent back to the TOO becuase the prime added a new service item for approval",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "billableWeightsReviewedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "closeoutOffice": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "closeoutOfficeId": {
          "description": "The transportation office that will handle reviewing PPM Closeout documentation for Army and Air Force service members",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "contractor": {
          "$ref": "#/definitions/Contractor"
        },
        "contractorId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "excess_weight_acknowledged_at": {
          "description": "Timestamp of when the TOO acknowledged the excess weight risk by either dismissing the alert or updating the max billable weight",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "excess_weight_qualified_at": {
          "description": "Timestamp of when the estimated shipment weights of the move reached 90% of the weight allowance",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "financialReviewFlag": {
          "description": "This flag is set by office users if a move should be reviewed by a Financial Office",
          "type": "boolean",
          "x-nullable": false,
          "readOnly": true,
          "example": false
        },
        "financialReviewRemarks": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "Destination address is too far from duty location"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "locator": {
          "type": "string",
          "example": "1K43AR"
        },
        "lockExpiresAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "lockedByOfficeUser": {
          "x-nullable": true,
          "$ref": "#/definitions/LockedOfficeUser"
        },
        "lockedByOfficeUserID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "orders": {
          "$ref": "#/definitions/Order"
        },
        "ordersId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "referenceId": {
          "type": "string",
          "x-nullable": true,
          "example": "1001-3456"
        },
        "serviceCounselingCompletedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "shipmentGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "tioRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "approved additional weight"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveAuditHistories": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveAuditHistory"
      }
    },
    "MoveAuditHistory": {
      "properties": {
        "action": {
          "description": "Action type; I = insert, D = delete, U = update, T = truncate",
          "type": "string"
        },
        "actionTstampClk": {
          "description": "Wall clock time at which audited event's trigger call occurred",
          "type": "string",
          "format": "date-time"
        },
        "actionTstampStm": {
          "description": "Statement start timestamp for tx in which audited event occurred",
          "type": "string",
          "format": "date-time"
        },
        "actionTstampTx": {
          "description": "Transaction start timestamp for tx in which audited event occurred",
          "type": "string",
          "format": "date-time"
        },
        "changedValues": {
          "description": "A list of (changed/updated) MoveAuditHistoryItem's for a record after the change.",
          "type": "object",
          "additionalProperties": true,
          "x-nullable": true
        },
        "context": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "x-nullable": true
        },
        "contextId": {
          "description": "id column for the context table the record belongs to",
          "type": "string",
          "x-nullable": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "eventName": {
          "description": "API endpoint name that was called to make the change",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "id from audity_history table",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "objectId": {
          "description": "id column for the tableName where the data was changed",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "oldValues": {
          "description": "A list of (old/previous) MoveAuditHistoryItem's for a record before the change.",
          "type": "object",
          "additionalProperties": true,
          "x-nullable": true
        },
        "relId": {
          "description": "relation OID. Table OID (object identifier). Changes with drop/create.",
          "type": "integer"
        },
        "schemaName": {
          "description": "Database schema audited table for this event is in",
          "type": "string"
        },
        "sessionUserEmail": {
          "type": "string",
          "x-nullable": true,
          "example": "foobar@example.com"
        },
        "sessionUserFirstName": {
          "type": "string",
          "x-nullable": true,
          "example": "foo"
        },
        "sessionUserId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "sessionUserLastName": {
          "type": "string",
          "x-nullable": true,
          "example": "bar"
        },
        "sessionUserTelephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "statementOnly": {
          "description": "true if audit event is from an FOR EACH STATEMENT trigger, false for FOR EACH ROW'",
          "type": "boolean",
          "example": false
        },
        "tableName": {
          "description": "name of database table that was changed",
          "type": "string"
        },
        "transactionId": {
          "description": "Identifier of transaction that made the change. May wrap, but unique paired with action_tstamp_tx.",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "MoveAuditHistoryItem": {
      "properties": {
        "columnName": {
          "type": "string"
        },
        "columnValue": {
          "type": "string"
        }
      }
    },
    "MoveAuditHistoryItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveAuditHistoryItem"
      }
    },
    "MoveHistory": {
      "properties": {
        "historyRecords": {
          "description": "A list of MoveAuditHistory's connected to the move.",
          "$ref": "#/definitions/MoveAuditHistories"
        },
        "id": {
          "description": "move ID",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "locator": {
          "description": "move locator",
          "type": "string",
          "example": "1K43AR"
        },
        "referenceId": {
          "description": "move referenceID",
          "type": "string",
          "x-nullable": true,
          "example": "1001-3456"
        }
      }
    },
    "MoveHistoryResult": {
      "type": "object",
      "properties": {
        "historyRecords": {
          "description": "A list of MoveAuditHistory's connected to the move.",
          "$ref": "#/definitions/MoveAuditHistories"
        },
        "id": {
          "description": "move ID",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "locator": {
          "description": "move locator",
          "type": "string",
          "example": "1K43AR"
        },
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "referenceId": {
          "description": "move referenceID",
          "type": "string",
          "x-nullable": true,
          "example": "1001-3456"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "MovePayload": {
      "type": "object",
      "required": [
        "id",
        "orders_id",
        "locator",
        "created_at",
        "updated_at",
        "eTag"
      ],
      "properties": {
        "additionalDocuments": {
          "$ref": "#/definitions/Document"
        },
        "cancel_reason": {
          "type": "string",
          "x-nullable": true,
          "example": "Change of orders"
        },
        "closeout_office": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "mto_shipments": {
          "$ref": "#/definitions/MTOShipments"
        },
        "orders_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "primeCounselingCompletedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "submitted_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveStatus": {
      "type": "string",
      "enum": [
        "DRAFT",
        "NEEDS SERVICE COUNSELING",
        "SERVICE COUNSELING COMPLETED",
        "SUBMITTED",
        "APPROVALS REQUESTED",
        "APPROVED",
        "CANCELED"
      ]
    },
    "MoveTaskOrder": {
      "description": "The Move (MoveTaskOrder)",
      "type": "object",
      "properties": {
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "destinationDutyLocation": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "eTag": {
          "type": "string"
        },
        "entitlements": {
          "$ref": "#/definitions/Entitlements"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "locator": {
          "type": "string",
          "example": "1K43AR"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "originDutyLocation": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "serviceCounselingCompletedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "tioRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "approved additional weight"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveTaskOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveTaskOrder"
      }
    },
    "MovingExpense": {
      "description": "Expense information and receipts of costs incurred that can be reimbursed while moving a PPM shipment.",
      "type": "object",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "ppmShipmentId",
        "documentId",
        "document"
      ],
      "properties": {
        "amount": {
          "description": "The total amount of the expense as indicated on the receipt",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "description": "Timestamp the moving expense object was initially created in the system (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "A brief description of the expense",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "document": {
          "allOf": [
            {
              "description": "The Document object that contains all file uploads for this expense"
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "documentId": {
          "description": "The id of the Document that contains all file uploads for this expense",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique primary identifier of the Moving Expense object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "missingReceipt": {
          "description": "Indicates if the service member is missing the receipt with the proof of expense amount",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "movingExpenseType": {
          "$ref": "#/definitions/OmittableMovingExpenseType"
        },
        "paidWithGtcc": {
          "description": "Indicates if the service member used their government issued card to pay for the expense",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ppmShipmentId": {
          "description": "The PPM Shipment id that this moving expense belongs to",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reason": {
          "$ref": "#/definitions/PPMDocumentStatusReason"
        },
        "sitEndDate": {
          "description": "The date the shipment exited storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "2018-05-26"
        },
        "sitEstimatedCost": {
          "description": "The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "sitReimburseableAmount": {
          "description": "The amount of SIT that will be reimbursed",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitStartDate": {
          "description": "The date the shipment entered storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "2022-04-26"
        },
        "status": {
          "$ref": "#/definitions/OmittablePPMDocumentStatus"
        },
        "submittedAmount": {
          "description": "Customer submitted total amount of the expense as indicated on the receipt",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedDescription": {
          "description": "Customer submitted description of the expense",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedMovingExpenseType": {
          "$ref": "#/definitions/SubmittedMovingExpenseType"
        },
        "submittedSitEndDate": {
          "description": "Customer submitted date the shipment exited storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "2018-05-26"
        },
        "submittedSitStartDate": {
          "description": "Customer submitted date the shipment entered storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "2022-04-26"
        },
        "updatedAt": {
          "description": "Timestamp when a property of this moving expense object was last modified (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "weightStored": {
          "description": "The total weight stored in PPM SIT",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        }
      }
    },
    "MovingExpenses": {
      "description": "All moving expenses associated with a PPM shipment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MovingExpense"
      },
      "x-omitempty": false
    },
    "NullableString": {
      "type": "string",
      "x-go-type": {
        "import": {
          "package": "github.com/transcom/mymove/pkg/swagger/nullable"
        },
        "type": "String"
      }
    },
    "OfficeUser": {
      "type": "object",
      "required": [
        "id",
        "firstName",
        "middleInitials",
        "lastName",
        "email",
        "telephone",
        "transportationOfficeId",
        "active",
        "roles",
        "edipi",
        "otherUniqueId",
        "rejectionReason",
        "status",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "edipi": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string"
        },
        "middleInitials": {
          "type": "string"
        },
        "otherUniqueId": {
          "type": "string"
        },
        "rejectionReason": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "REQUESTED",
            "REJECTED"
          ]
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$"
        },
        "transportationOffice": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "OfficeUserCreate": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "email",
        "telephone",
        "transportationOfficeId",
        "roles"
      ],
      "properties": {
        "edipi": {
          "type": "string",
          "title": "EDIPI",
          "maxLength": 10,
          "x-nullable": true,
          "example": "1234567890"
        },
        "email": {
          "type": "string",
          "title": "Email",
          "x-nullable": false,
          "example": "user@userdomain.com"
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": false
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": false
        },
        "middleInitials": {
          "type": "string",
          "title": "Middle Initials",
          "x-nullable": true,
          "example": "L."
        },
        "otherUniqueId": {
          "type": "string",
          "title": "Office user identifier when EDIPI is not available",
          "x-nullable": true
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserRole"
          },
          "x-nullable": false
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": false,
          "example": "212-555-5555"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": false,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OfficeUserRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "x-nullable": true,
          "example": "Task Ordering Officer"
        },
        "roleType": {
          "type": "string",
          "title": "roleType",
          "x-nullable": true,
          "example": "task_ordering_officer"
        }
      }
    },
    "OmittableMovingExpenseType": {
      "description": "Moving Expense Type",
      "type": "string",
      "enum": [
        "CONTRACTED_EXPENSE",
        "GAS",
        "OIL",
        "OTHER",
        "PACKING_MATERIALS",
        "RENTAL_EQUIPMENT",
        "STORAGE",
        "TOLLS",
        "WEIGHING_FEE"
      ],
      "x-display-value": {
        "CONTRACTED_EXPENSE": "Contracted expense",
        "GAS": "Gas",
        "OIL": "Oil",
        "OTHER": "Other",
        "PACKING_MATERIALS": "Packing materials",
        "RENTAL_EQUIPMENT": "Rental equipment",
        "STORAGE": "Storage",
        "TOLLS": "Tolls",
        "WEIGHING_FEE": "Weighing fee"
      },
      "x-nullable": true,
      "x-omitempty": false
    },
    "OmittablePPMDocumentStatus": {
      "description": "Status of the PPM document.",
      "type": "string",
      "enum": [
        "APPROVED",
        "EXCLUDED",
        "REJECTED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "EXCLUDED": "Excluded",
        "REJECTED": "Rejected"
      },
      "x-nullable": true,
      "x-omitempty": false
    },
    "Order": {
      "type": "object",
      "properties": {
        "agency": {
          "$ref": "#/definitions/Affiliation"
        },
        "amendedOrdersAcknowledgedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "customerID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "date_issued": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "department_indicator": {
          "x-nullable": true,
          "$ref": "#/definitions/DeptIndicator"
        },
        "destinationDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "destinationDutyLocationGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "eTag": {
          "type": "string"
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlements"
        },
        "first_name": {
          "type": "string",
          "readOnly": true,
          "example": "John"
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "has_dependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?",
          "example": false
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "last_name": {
          "type": "string",
          "readOnly": true,
          "example": "Doe"
        },
        "methodOfPayment": {
          "type": "string"
        },
        "moveCode": {
          "type": "string",
          "example": "H2XFJF"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "naics": {
          "type": "string"
        },
        "ntsSac": {
          "type": "string",
          "title": "NTS SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "ntsTac": {
          "type": "string",
          "title": "NTS TAC",
          "x-nullable": true,
          "example": "F8J1"
        },
        "order_number": {
          "type": "string",
          "x-nullable": true,
          "example": "030-00362"
        },
        "order_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "order_type_detail": {
          "x-nullable": true,
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "orders_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "originDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "originDutyLocationGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "packingAndShippingInstructions": {
          "type": "string"
        },
        "report_by_date": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "spouse_has_pro_gear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?",
          "example": false
        },
        "supplyAndServicesCostEstimate": {
          "type": "string"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        },
        "uploadedAmendedOrderID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "uploaded_order_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OrderBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "LOCAL_MOVE",
        "RETIREMENT",
        "SEPARATION",
        "WOUNDED_WARRIOR",
        "BLUEBARK",
        "SAFETY"
      ],
      "x-display-value": {
        "BLUEBARK": "BLUEBARK",
        "LOCAL_MOVE": "Local Move",
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station",
        "RETIREMENT": "Retirement",
        "SAFETY": "Safety",
        "SEPARATION": "Separation",
        "WOUNDED_WARRIOR": "Wounded Warrior"
      }
    },
    "OrdersTypeDetail": {
      "type": "string",
      "title": "Orders type detail",
      "enum": [
        "HHG_PERMITTED",
        "PCS_TDY",
        "HHG_RESTRICTED_PROHIBITED",
        "HHG_RESTRICTED_AREA",
        "INSTRUCTION_20_WEEKS",
        "HHG_PROHIBITED_20_WEEKS",
        "DELAYED_APPROVAL"
      ],
      "x-display-value": {
        "DELAYED_APPROVAL": "Delayed Approval 20 Weeks or More",
        "HHG_PERMITTED": "Shipment of HHG Permitted",
        "HHG_PROHIBITED_20_WEEKS": "Shipment of HHG Prohibited but Authorized within 20 weeks",
        "HHG_RESTRICTED_AREA": "HHG Restricted Area-HHG Prohibited",
        "HHG_RESTRICTED_PROHIBITED": "Shipment of HHG Restricted or Prohibited",
        "INSTRUCTION_20_WEEKS": "Course of Instruction 20 Weeks or More",
        "PCS_TDY": "PCS with TDY Enroute"
      },
      "x-nullable": true
    },
    "PPMActualWeight": {
      "description": "The actual net weight of a single PPM shipment. Used during document review for PPM closeout.",
      "required": [
        "actualWeight"
      ],
      "properties": {
        "actualWeight": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        }
      }
    },
    "PPMAdvanceStatus": {
      "description": "Indicates whether an advance status has been accepted, rejected, or edited, or a prime counseled PPM has been received or not received",
      "type": "string",
      "title": "PPM Advance Status",
      "enum": [
        "APPROVED",
        "REJECTED",
        "EDITED",
        "RECEIVED",
        "NOT_RECEIVED"
      ],
      "x-nullable": true
    },
    "PPMCloseout": {
      "description": "The calculations needed in the \"Review Documents\" section of a PPM closeout. LIst of all expenses/reimbursements related toa PPM shipment.",
      "required": [
        "id"
      ],
      "properties": {
        "SITReimbursement": {
          "description": "The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualMoveDate": {
          "description": "The actual start date of when the PPM shipment left the origin.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualWeight": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        },
        "aoa": {
          "description": "Advance Operating Allowance (AOA).",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ddp": {
          "description": "The Domestic Destination Price (DDP).",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "dop": {
          "description": "The Domestic Origin Price (DOP).",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "estimatedWeight": {
          "description": "The estimated weight of the PPM shipment goods being moved.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 4200
        },
        "gcc": {
          "description": "Government Constructive Cost (GCC)",
          "type": "integer",
          "format": "cents",
          "title": "GCC",
          "x-nullable": true,
          "x-omitempty": false
        },
        "grossIncentive": {
          "description": "The final calculated incentive for the PPM shipment. This does not include **SIT** as it is a reimbursement.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "haulFSC": {
          "description": "The linehaul/shorthaul Fuel Surcharge (FSC).",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "haulPrice": {
          "description": "The price of the linehaul or shorthaul.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "haulType": {
          "description": "The type of haul calculation used for this shipment (shorthaul or linehaul).",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "Primary auto-generated unique identifier of the PPM shipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "miles": {
          "description": "The distance between the old address and the new address in miles.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 54
        },
        "packPrice": {
          "description": "The full price of all packing/unpacking services.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "plannedMoveDate": {
          "description": "Date the customer expects to begin their move.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "proGearWeightCustomer": {
          "description": "The estimated weight of the pro-gear being moved belonging to the service member.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "proGearWeightSpouse": {
          "description": "The estimated weight of the pro-gear being moved belonging to a spouse.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "remainingIncentive": {
          "description": "The remaining reimbursement amount that is still owed to the customer.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "unpackPrice": {
          "description": "The full price of all packing/unpacking services.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        }
      }
    },
    "PPMDocumentStatus": {
      "description": "Status of the PPM document.",
      "type": "string",
      "enum": [
        "APPROVED",
        "EXCLUDED",
        "REJECTED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "EXCLUDED": "Excluded",
        "REJECTED": "Rejected"
      }
    },
    "PPMDocumentStatusReason": {
      "description": "The reason the services counselor has excluded or rejected the item.",
      "type": "string",
      "x-nullable": true,
      "x-omitempty": false
    },
    "PPMDocuments": {
      "description": "All documents associated with a PPM shipment, including weight tickets, progear weight tickets, and moving expenses.",
      "type": "object",
      "properties": {
        "MovingExpenses": {
          "$ref": "#/definitions/MovingExpenses"
        },
        "ProGearWeightTickets": {
          "$ref": "#/definitions/ProGearWeightTickets"
        },
        "WeightTickets": {
          "$ref": "#/definitions/WeightTickets"
        }
      },
      "x-nullable": true,
      "x-omitempty": false
    },
    "PPMSITEstimatedCost": {
      "description": "The estimated cost of SIT for a single PPM shipment. Used during document review for PPM.",
      "required": [
        "sitCost",
        "priceFirstDaySIT",
        "priceAdditionalDaySIT"
      ],
      "properties": {
        "paramsAdditionalDaySIT": {
          "type": "object",
          "properties": {
            "contractYearName": {
              "type": "string",
              "example": "Award Term 1"
            },
            "escalationCompounded": {
              "type": "string",
              "example": "1.01"
            },
            "isPeak": {
              "type": "string",
              "example": "true"
            },
            "numberDaysSIT": {
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true,
              "example": "30"
            },
            "priceRateOrFactor": {
              "type": "string",
              "example": "0.53"
            },
            "serviceAreaDestination": {
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true,
              "example": "252"
            },
            "serviceAreaOrigin": {
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true,
              "example": "252"
            }
          }
        },
        "paramsFirstDaySIT": {
          "type": "object",
          "properties": {
            "contractYearName": {
              "type": "string",
              "example": "Award Term 1"
            },
            "escalationCompounded": {
              "type": "string",
              "example": "1.01"
            },
            "isPeak": {
              "type": "string",
              "example": "true"
            },
            "priceRateOrFactor": {
              "type": "string",
              "example": "20.53"
            },
            "serviceAreaDestination": {
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true,
              "example": "252"
            },
            "serviceAreaOrigin": {
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true,
              "example": "252"
            }
          }
        },
        "priceAdditionalDaySIT": {
          "type": "integer",
          "format": "cents",
          "title": "Price of an additional day in SIT",
          "example": 2000
        },
        "priceFirstDaySIT": {
          "type": "integer",
          "format": "cents",
          "title": "Price of the first day in SIT",
          "example": 2000
        },
        "sitCost": {
          "type": "integer",
          "example": 2000
        }
      }
    },
    "PPMShipment": {
      "description": "A personally procured move is a type of shipment that a service member moves themselves.",
      "required": [
        "id",
        "shipmentId",
        "createdAt",
        "status",
        "expectedDepartureDate",
        "sitExpected",
        "eTag"
      ],
      "properties": {
        "actualDestinationPostalCode": {
          "description": "The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "actualMoveDate": {
          "description": "The actual start date of when the PPM shipment left the origin.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualPickupPostalCode": {
          "description": "The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "advanceAmountReceived": {
          "description": "The amount received for an advance, or null if no advance is received.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "advanceAmountRequested": {
          "description": "The amount requested as an advance by the service member up to a maximum percentage of the estimated incentive.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "advanceStatus": {
          "$ref": "#/definitions/PPMAdvanceStatus"
        },
        "approvedAt": {
          "description": "The timestamp of when the shipment was approved and the service member can begin their move.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "description": "Timestamp of when the PPM Shipment was initially created (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "estimatedIncentive": {
          "description": "The estimated amount the government will pay the service member to move their belongings based on the moving date, locations, and shipment weight.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "estimatedWeight": {
          "description": "The estimated weight of the PPM shipment goods being moved.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to begin their move.\n",
          "type": "string",
          "format": "date"
        },
        "finalIncentive": {
          "description": "The final calculated incentive for the PPM shipment. This does not include **SIT** as it is a reimbursement.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear for themselves or their spouse.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasReceivedAdvance": {
          "description": "Indicates whether an advance was received for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasRequestedAdvance": {
          "description": "Indicates whether an advance has been requested for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "Primary auto-generated unique identifier of the PPM shipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "movingExpenses": {
          "description": "All expense documentation receipt records of this PPM shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MovingExpense"
          }
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "proGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to the service member.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "proGearWeightTickets": {
          "description": "All pro-gear weight ticket documentation records for this PPM shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProGearWeightTicket"
          }
        },
        "reviewedAt": {
          "description": "The timestamp of when the Service Counselor has reviewed all of the closeout documents.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "secondaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "secondaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "shipmentId": {
          "description": "The id of the parent MTOShipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "signedCertification": {
          "$ref": "#/definitions/SignedCertification"
        },
        "sitEstimatedCost": {
          "description": "The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedDepartureDate": {
          "description": "The date that goods will exit the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedEntryDate": {
          "description": "The date that goods will first enter the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedWeight": {
          "description": "The estimated weight of the goods being put into storage.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        },
        "sitExpected": {
          "description": "Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.\n\nMust be set to ` + "`" + `true` + "`" + ` when providing ` + "`" + `sitLocation` + "`" + `, ` + "`" + `sitEstimatedWeight` + "`" + `, ` + "`" + `sitEstimatedEntryDate` + "`" + `, and ` + "`" + `sitEstimatedDepartureDate` + "`" + ` values to calculate the ` + "`" + `sitEstimatedCost` + "`" + `.\n",
          "type": "boolean"
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "spouseProGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to a spouse.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "status": {
          "$ref": "#/definitions/PPMShipmentStatus"
        },
        "submittedAt": {
          "description": "The timestamp of when the customer submitted their PPM documentation to the counselor for review.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "tertiaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "tertiaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "updatedAt": {
          "description": "Timestamp of when a property of this object was last updated (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "w2Address": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "weightTickets": {
          "$ref": "#/definitions/WeightTickets"
        }
      },
      "x-nullable": true
    },
    "PPMShipmentSIT": {
      "description": "SIT related items for a PPM shipment",
      "required": [
        "sitLocation"
      ],
      "properties": {
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "updatedAt": {
          "description": "Timestamp of when a property of this object was last updated (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "x-nullable": true
    },
    "PPMShipmentStatus": {
      "description": "Status of the PPM Shipment:\n  * **DRAFT**: The customer has created the PPM shipment but has not yet submitted their move for counseling.\n  * **SUBMITTED**: The shipment belongs to a move that has been submitted by the customer or has been created by a Service Counselor or Prime Contractor for a submitted move.\n  * **WAITING_ON_CUSTOMER**: The PPM shipment has been approved and the customer may now provide their actual move closeout information and documentation required to get paid.\n  * **NEEDS_ADVANCE_APPROVAL**: The shipment was counseled by the Prime Contractor and approved but an advance was requested so will need further financial approval from the government.\n  * **NEEDS_CLOSEOUT**: The customer has provided their closeout weight tickets, receipts, and expenses and certified it for the Service Counselor to approve, exclude or reject.\n  * **CLOSEOUT_COMPLETE**: The Service Counselor has reviewed all of the customer's PPM closeout documentation and authorizes the customer can download and submit their finalized SSW packet.\n",
      "type": "string",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "WAITING_ON_CUSTOMER",
        "NEEDS_ADVANCE_APPROVAL",
        "NEEDS_CLOSEOUT",
        "CLOSEOUT_COMPLETE",
        "CANCELED"
      ],
      "readOnly": true
    },
    "PPMStatus": {
      "type": "string",
      "enum": [
        "CANCELLED",
        "DRAFT",
        "SUBMITTED",
        "WAITING_ON_CUSTOMER",
        "NEEDS_ADVANCE_APPROVAL",
        "NEEDS_CLOSEOUT",
        "CLOSEOUT_COMPLETE",
        "COMPLETED"
      ]
    },
    "PWSViolation": {
      "description": "A PWS violation for an evaluation report",
      "type": "object",
      "properties": {
        "additionalDataElem": {
          "type": "string",
          "example": "QAE Observed Delivery Date"
        },
        "category": {
          "type": "string",
          "example": "Pre-Move Services"
        },
        "displayOrder": {
          "type": "integer",
          "example": 3
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "isKpi": {
          "type": "boolean",
          "example": false
        },
        "paragraphNumber": {
          "type": "string",
          "example": "1.2.3.4.5"
        },
        "requirementStatement": {
          "type": "string",
          "example": "The contractor shall prepare and load property going into NTS in containers at residence for shipment to NTS."
        },
        "requirementSummary": {
          "type": "string",
          "example": "Provide a single point of contact (POC)"
        },
        "subCategory": {
          "type": "string",
          "example": "Weight Estimate"
        },
        "title": {
          "type": "string",
          "example": "Customer Support"
        }
      },
      "readOnly": true
    },
    "PWSViolations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PWSViolation"
      }
    },
    "PatchMTOServiceItemStatusPayload": {
      "properties": {
        "rejectionReason": {
          "description": "Reason the service item was rejected",
          "type": "string",
          "x-nullable": true,
          "example": "Insufficent details provided"
        },
        "status": {
          "description": "Describes all statuses for a MTOServiceItem",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "APPROVED",
            "REJECTED"
          ]
        }
      }
    },
    "PaymentRequest": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "ediErrorCode": {
          "description": "Reported code from syncada for the EDI error encountered",
          "type": "string",
          "x-nullable": true
        },
        "ediErrorDescription": {
          "description": "The reason the services counselor has excluded or rejected the item.",
          "type": "string",
          "x-nullable": true
        },
        "ediErrorType": {
          "description": "Type of EDI reporting or causing the issue. Can be EDI 997, 824, and 858.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrder": {
          "$ref": "#/definitions/Move"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestNumber": {
          "type": "string",
          "readOnly": true,
          "example": "1234-5678-1"
        },
        "proofOfServiceDocs": {
          "$ref": "#/definitions/ProofOfServiceDocs"
        },
        "recalculationOfPaymentRequestID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "receivedByGexAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "reviewedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sentToGexAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "serviceItems": {
          "$ref": "#/definitions/PaymentServiceItems"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        },
        "tppsInvoiceAmountPaidTotalMillicents": {
          "type": "integer",
          "format": "millients",
          "title": "Total amount that TPPS paid for all service items on the payment request in millicents",
          "x-nullable": true
        },
        "tppsInvoiceSellerPaidDate": {
          "type": "string",
          "format": "date-time",
          "title": "Date that TPPS paid HS for the payment request",
          "x-nullable": true
        }
      }
    },
    "PaymentRequestStatus": {
      "type": "string",
      "title": "Payment Request Status",
      "enum": [
        "PENDING",
        "REVIEWED",
        "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
        "SENT_TO_GEX",
        "TPPS_RECEIVED",
        "PAID",
        "EDI_ERROR",
        "DEPRECATED"
      ]
    },
    "PaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentRequest"
      }
    },
    "PaymentServiceItem": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemCode": {
          "type": "string",
          "example": "DLH"
        },
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemName": {
          "type": "string",
          "example": "Move management"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoShipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "paymentRequestID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentServiceItemParams": {
          "$ref": "#/definitions/PaymentServiceItemParams"
        },
        "priceCents": {
          "type": "integer",
          "format": "cents",
          "title": "Price of the service item in cents",
          "x-nullable": true
        },
        "referenceID": {
          "format": "string",
          "readOnly": true,
          "example": "1234-5678-c56a4180"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentServiceItemStatus"
        },
        "tppsInvoiceAmountPaidPerServiceItemMillicents": {
          "type": "integer",
          "format": "millicents",
          "title": "Amount that TPPS paid for the individual service item in millicents",
          "x-nullable": true
        }
      }
    },
    "PaymentServiceItemParam": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "key": {
          "$ref": "#/definitions/ServiceItemParamName"
        },
        "origin": {
          "$ref": "#/definitions/ServiceItemParamOrigin"
        },
        "paymentServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "type": {
          "$ref": "#/definitions/ServiceItemParamType"
        },
        "value": {
          "type": "string",
          "example": "3025"
        }
      }
    },
    "PaymentServiceItemParams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItemParam"
      }
    },
    "PaymentServiceItemStatus": {
      "type": "string",
      "title": "Payment Service Item Status",
      "enum": [
        "REQUESTED",
        "APPROVED",
        "DENIED",
        "SENT_TO_GEX",
        "PAID",
        "EDI_ERROR"
      ]
    },
    "PaymentServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItem"
      }
    },
    "PostDocumentPayload": {
      "type": "object",
      "properties": {
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        }
      }
    },
    "ProGearWeightTicket": {
      "description": "Pro-gear associated information and weight docs for a PPM shipment",
      "type": "object",
      "required": [
        "ppmShipmentId",
        "createdAt",
        "updatedAt",
        "documentId",
        "document"
      ],
      "properties": {
        "belongsToSelf": {
          "description": "Indicates if this information is for the customer's own pro-gear, otherwise, it's the spouse's.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "Describes the pro-gear that was moved.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "document": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the pro-gear weight."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "documentId": {
          "description": "The ID of the document that is associated with the user uploads containing the pro-gear weight.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "hasWeightTickets": {
          "description": "Indicates if the user has a weight ticket for their pro-gear, otherwise they have a constructed weight.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "The ID of the pro-gear weight ticket.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ppmShipmentId": {
          "description": "The ID of the PPM shipment that this pro-gear weight ticket is associated with.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reason": {
          "$ref": "#/definitions/PPMDocumentStatusReason"
        },
        "status": {
          "$ref": "#/definitions/OmittablePPMDocumentStatus"
        },
        "submittedBelongsToSelf": {
          "description": "Indicates if this information is for the customer's own pro-gear, otherwise, it's the spouse's.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedHasWeightTickets": {
          "description": "Indicates if the user has a weight ticket for their pro-gear, otherwise they have a constructed weight.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedWeight": {
          "description": "Customer submitted weight of the pro-gear.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "weight": {
          "description": "Weight of the pro-gear.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        }
      }
    },
    "ProGearWeightTickets": {
      "description": "All progear weight tickets associated with a PPM shipment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProGearWeightTicket"
      },
      "x-omitempty": false
    },
    "ProofOfServiceDoc": {
      "properties": {
        "isWeightTicket": {
          "type": "boolean"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "ProofOfServiceDocs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProofOfServiceDoc"
      }
    },
    "QueueMove": {
      "type": "object",
      "properties": {
        "appearedInTooAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "assignedTo": {
          "x-nullable": true,
          "$ref": "#/definitions/AssignedOfficeUser"
        },
        "closeoutInitiated": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "closeoutLocation": {
          "type": "string",
          "x-nullable": true
        },
        "counselingOffice": {
          "type": "string",
          "x-nullable": true
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "departmentIndicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "destinationDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "locator": {
          "type": "string"
        },
        "lockExpiresAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "lockedByOfficeUser": {
          "x-nullable": true,
          "$ref": "#/definitions/LockedOfficeUser"
        },
        "lockedByOfficeUserID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "orderType": {
          "type": "string",
          "x-nullable": true
        },
        "originDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "originGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "ppmStatus": {
          "x-nullable": true,
          "$ref": "#/definitions/PPMStatus"
        },
        "ppmType": {
          "type": "string",
          "enum": [
            "FULL",
            "PARTIAL"
          ],
          "x-nullable": true
        },
        "requestedMoveDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "shipmentsCount": {
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "QueueMoves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QueueMove"
      }
    },
    "QueueMovesResult": {
      "type": "object",
      "properties": {
        "availableOfficeUsers": {
          "$ref": "#/definitions/AvailableOfficeUsers"
        },
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "queueMoves": {
          "$ref": "#/definitions/QueueMoves"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "QueuePaymentRequest": {
      "type": "object",
      "properties": {
        "age": {
          "description": "Days since the payment request has been requested.  Decimal representation will allow more accurate sorting.",
          "type": "number",
          "format": "double"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "departmentIndicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "locator": {
          "type": "string"
        },
        "lockExpiresAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "lockedByOfficeUserID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "moveID": {
          "type": "string",
          "format": "uuid"
        },
        "orderType": {
          "type": "string",
          "x-nullable": true
        },
        "originDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "originGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "status": {
          "$ref": "#/definitions/QueuePaymentRequestStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "QueuePaymentRequestStatus": {
      "type": "string",
      "title": "Queue Payment Request Status",
      "enum": [
        "Payment requested",
        "Reviewed",
        "Rejected",
        "Paid"
      ]
    },
    "QueuePaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QueuePaymentRequest"
      }
    },
    "QueuePaymentRequestsResult": {
      "type": "object",
      "properties": {
        "availableOfficeUsers": {
          "$ref": "#/definitions/AvailableOfficeUsers"
        },
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "queuePaymentRequests": {
          "$ref": "#/definitions/QueuePaymentRequests"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "RejectShipment": {
      "required": [
        "rejectionReason"
      ],
      "properties": {
        "rejectionReason": {
          "type": "string",
          "example": "MTO Shipment not good enough"
        }
      }
    },
    "ReportViolation": {
      "description": "An object associating violations to evaluation reports",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reportID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "violation": {
          "$ref": "#/definitions/PWSViolation"
        },
        "violationID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        }
      }
    },
    "ReportViolations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ReportViolation"
      }
    },
    "RequestDiversion": {
      "required": [
        "diversionReason"
      ],
      "properties": {
        "diversionReason": {
          "type": "string",
          "example": "Shipment route needs to change"
        }
      }
    },
    "Reweigh": {
      "description": "A reweigh  is when a shipment is weighed for a second time due to the request of a customer, the contractor, system or TOO.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "requestedAt": {
          "type": "string",
          "format": "date-time"
        },
        "requestedBy": {
          "$ref": "#/definitions/ReweighRequester"
        },
        "shipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "verificationProvidedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "verificationReason": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "The reweigh was not performed due to some justification provided by the counselor"
        },
        "weight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        }
      }
    },
    "ReweighRequester": {
      "type": "string",
      "enum": [
        "CUSTOMER",
        "PRIME",
        "SYSTEM",
        "TOO"
      ]
    },
    "Role": {
      "type": "object",
      "required": [
        "id",
        "roleType",
        "roleName",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "roleName": {
          "type": "string",
          "example": "Task Ordering Officer"
        },
        "roleType": {
          "type": "string",
          "example": "customer"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SITExtension": {
      "description": "A storage in transit (SIT) Extension is a request for an increase in the billable number of days a shipment is allowed to be in SIT.",
      "type": "object",
      "properties": {
        "approvedDays": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 30
        },
        "contractorRemarks": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "We need SIT additional days. The customer has not found a house yet."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "decisionDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "officeRemarks": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "requestReason": {
          "type": "string",
          "enum": [
            "SERIOUS_ILLNESS_MEMBER",
            "SERIOUS_ILLNESS_DEPENDENT",
            "IMPENDING_ASSIGNEMENT",
            "DIRECTED_TEMPORARY_DUTY",
            "NONAVAILABILITY_OF_CIVILIAN_HOUSING",
            "AWAITING_COMPLETION_OF_RESIDENCE",
            "OTHER"
          ]
        },
        "requestedDays": {
          "type": "integer",
          "example": 30
        },
        "status": {
          "enum": [
            "PENDING",
            "APPROVED",
            "DENIED"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SITExtensions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SITExtension"
      }
    },
    "SITLocationType": {
      "description": "The list of SIT location types.",
      "type": "string",
      "enum": [
        "ORIGIN",
        "DESTINATION"
      ]
    },
    "SITServiceItemGrouping": {
      "properties": {
        "serviceItems": {
          "$ref": "#/definitions/MTOServiceItems"
        },
        "summary": {
          "description": "Holds the top level summary of a Service Item Grouping, detailing the ServiceItemID of the first day SIT service item (Eg, DOFSIT, DOASIT), the location (ORIGIN/DESTINATION), how many days the provided instance of SIT has been in storage, SIT entry date, departure date, authorized end date, customer contacted date, requested delivery date.\nThis is provided at a top level because due to our service item architecture, SIT information is sometimes split across multiple service items, and this summary is a compilation of said information. This prevents the need to loop over many service items.\n",
          "$ref": "#/definitions/SITSummary"
        }
      }
    },
    "SITServiceItemGroupings": {
      "description": "Holds groupings of SIT service items and their summaries, detailing the summary ServiceItemID of the first day SIT service item (Eg, DOFSIT, DOASIT), the location (ORIGIN/DESTINATION), how many days the provided instance of SIT has been in storage, SIT entry date, departure date, authorized end date, customer contacted date, requested delivery date.\n",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SITServiceItemGrouping"
      }
    },
    "SITStatus": {
      "properties": {
        "calculatedTotalDaysInSIT": {
          "type": "integer"
        },
        "currentSIT": {
          "type": "object",
          "properties": {
            "daysInSIT": {
              "type": "integer"
            },
            "location": {
              "enum": [
                "ORIGIN",
                "DESTINATION"
              ]
            },
            "serviceItemID": {
              "type": "string",
              "format": "uuid",
              "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
            },
            "sitAuthorizedEndDate": {
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitCustomerContacted": {
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitDepartureDate": {
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitEntryDate": {
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitRequestedDelivery": {
              "type": "string",
              "format": "date",
              "x-nullable": true
            }
          }
        },
        "pastSITServiceItemGroupings": {
          "description": "A list of past SIT service item groupings. These will contain the given SIT service items for an instance of SIT (Either Origin or Destination), grouped by the date they went into SIT and service items limited explicitly to SIT related Re Service Codes.\n",
          "$ref": "#/definitions/SITServiceItemGroupings"
        },
        "totalDaysRemaining": {
          "type": "integer"
        },
        "totalSITDaysUsed": {
          "type": "integer"
        }
      }
    },
    "SITSummary": {
      "properties": {
        "daysInSIT": {
          "type": "integer"
        },
        "firstDaySITServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "location": {
          "enum": [
            "ORIGIN",
            "DESTINATION"
          ]
        },
        "sitAuthorizedEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "sitCustomerContacted": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sitDepartureDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sitEntryDate": {
          "type": "string",
          "format": "date-time"
        },
        "sitRequestedDelivery": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "SearchCustomer": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "dodID": {
          "type": "string",
          "x-nullable": true
        },
        "emplid": {
          "type": "string",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true,
          "example": "Doe"
        },
        "personalEmail": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "personalEmail@email.com"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        }
      }
    },
    "SearchCustomers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SearchCustomer"
      }
    },
    "SearchCustomersResult": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "searchCustomers": {
          "$ref": "#/definitions/SearchCustomers"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "SearchMove": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "destinationDutyLocationPostalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "example": "90210"
        },
        "destinationGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "dodID": {
          "type": "string",
          "x-nullable": true,
          "example": 1234567890
        },
        "emplid": {
          "type": "string",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true,
          "example": "Doe"
        },
        "locator": {
          "type": "string"
        },
        "lockExpiresAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "lockedByOfficeUserID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "orderType": {
          "type": "string"
        },
        "originDutyLocationPostalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "example": "90210"
        },
        "originGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "paymentRequestCode": {
          "type": "string",
          "x-nullable": true,
          "example": "9551-6199-2"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "shipmentsCount": {
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        }
      }
    },
    "SearchMoves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SearchMove"
      }
    },
    "SearchMovesResult": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "searchMoves": {
          "$ref": "#/definitions/SearchMoves"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "ServiceItemParamName": {
      "type": "string",
      "enum": [
        "ActualPickupDate",
        "ContractCode",
        "ContractYearName",
        "CubicFeetBilled",
        "CubicFeetCrating",
        "DimensionHeight",
        "DimensionLength",
        "DimensionWidth",
        "DistanceZip",
        "DistanceZipSITDest",
        "DistanceZipSITOrigin",
        "EIAFuelPrice",
        "EscalationCompounded",
        "FSCMultiplier",
        "FSCPriceDifferenceInCents",
        "FSCWeightBasedDistanceMultiplier",
        "IsPeak",
        "MarketDest",
        "MarketOrigin",
        "MTOAvailableToPrimeAt",
        "NTSPackingFactor",
        "NumberDaysSIT",
        "PriceAreaDest",
        "PriceAreaIntlDest",
        "PriceAreaIntlOrigin",
        "PriceAreaOrigin",
        "PriceRateOrFactor",
        "PSI_LinehaulDom",
        "PSI_LinehaulDomPrice",
        "PSI_LinehaulShort",
        "PSI_LinehaulShortPrice",
        "PSI_PriceDomDest",
        "PSI_PriceDomDestPrice",
        "PSI_PriceDomOrigin",
        "PSI_PriceDomOriginPrice",
        "PSI_ShippingLinehaulIntlCO",
        "PSI_ShippingLinehaulIntlCOPrice",
        "PSI_ShippingLinehaulIntlOC",
        "PSI_ShippingLinehaulIntlOCPrice",
        "PSI_ShippingLinehaulIntlOO",
        "PSI_ShippingLinehaulIntlOOPrice",
        "RateAreaNonStdDest",
        "RateAreaNonStdOrigin",
        "ReferenceDate",
        "RequestedPickupDate",
        "ServiceAreaDest",
        "ServiceAreaOrigin",
        "ServicesScheduleDest",
        "ServicesScheduleOrigin",
        "SITPaymentRequestEnd",
        "SITPaymentRequestStart",
        "SITScheduleDest",
        "SITScheduleOrigin",
        "SITServiceAreaDest",
        "SITServiceAreaOrigin",
        "WeightAdjusted",
        "WeightBilled",
        "WeightEstimated",
        "WeightOriginal",
        "WeightReweigh",
        "ZipDestAddress",
        "ZipPickupAddress",
        "ZipSITDestHHGFinalAddress",
        "ZipSITDestHHGOriginalAddress",
        "ZipSITOriginHHGActualAddress",
        "ZipSITOriginHHGOriginalAddress",
        "StandaloneCrate",
        "StandaloneCrateCap",
        "UncappedRequestTotal",
        "LockedPriceCents"
      ]
    },
    "ServiceItemParamOrigin": {
      "type": "string",
      "enum": [
        "PRIME",
        "SYSTEM",
        "PRICER",
        "PAYMENT_REQUEST"
      ]
    },
    "ServiceItemParamType": {
      "type": "string",
      "enum": [
        "STRING",
        "DATE",
        "INTEGER",
        "DECIMAL",
        "TIMESTAMP",
        "PaymentServiceItemUUID",
        "BOOLEAN"
      ]
    },
    "ServiceItemSitEntryDate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "sitEntryDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "ServiceRequestDocument": {
      "type": "object",
      "properties": {
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "ServiceRequestDocuments": {
      "description": "documents uploaded by the Prime as proof of request for service items",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceRequestDocument"
      }
    },
    "ShipmentAddressUpdate": {
      "description": "This represents a destination address change request made by the Prime that is either auto-approved or requires review if the pricing criteria has changed. If criteria has changed, then it must be approved or rejected by a TOO.\n",
      "type": "object",
      "required": [
        "id",
        "status",
        "shipmentID",
        "originalAddress",
        "newAddress",
        "contractorRemarks"
      ],
      "properties": {
        "contractorRemarks": {
          "description": "The reason there is an address change.",
          "type": "string",
          "title": "Contractor Remarks",
          "readOnly": true,
          "example": "This is a contractor remark"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "newAddress": {
          "$ref": "#/definitions/Address"
        },
        "newSitDistanceBetween": {
          "description": "The distance between the original SIT address and requested new destination address of shipment",
          "type": "integer",
          "example": 88
        },
        "officeRemarks": {
          "description": "The TOO comment on approval or rejection.",
          "type": "string",
          "title": "Office Remarks",
          "x-nullable": true,
          "example": "This is an office remark"
        },
        "oldSitDistanceBetween": {
          "description": "The distance between the original SIT address and the previous/old destination address of shipment",
          "type": "integer",
          "example": 50
        },
        "originalAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "sitOriginalAddress": {
          "$ref": "#/definitions/Address"
        },
        "status": {
          "$ref": "#/definitions/ShipmentAddressUpdateStatus"
        }
      }
    },
    "ShipmentAddressUpdateStatus": {
      "type": "string",
      "title": "Status",
      "enum": [
        "REQUESTED",
        "REJECTED",
        "APPROVED"
      ],
      "x-display-value": {
        "APPROVED": "APPROVED",
        "REJECTED": "REJECTED",
        "REQUESTED": "REQUESTED"
      },
      "readOnly": true
    },
    "ShipmentPaymentSITBalance": {
      "properties": {
        "pendingBilledEndDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "pendingBilledStartDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "pendingSITDaysInvoiced": {
          "type": "integer"
        },
        "previouslyBilledDays": {
          "type": "integer",
          "x-nullable": true
        },
        "previouslyBilledEndDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "previouslyBilledStartDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "shipmentID": {
          "type": "string",
          "format": "uuid"
        },
        "totalSITDaysAuthorized": {
          "type": "integer"
        },
        "totalSITDaysRemaining": {
          "type": "integer"
        },
        "totalSITEndDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        }
      }
    },
    "ShipmentsPaymentSITBalance": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ShipmentPaymentSITBalance"
      }
    },
    "SignedCertification": {
      "description": "Signed certification",
      "type": "object",
      "required": [
        "id",
        "submittingUserId",
        "moveId",
        "certificationType",
        "certificationText",
        "signature",
        "date",
        "createdAt",
        "updatedAt",
        "eTag"
      ],
      "properties": {
        "certificationText": {
          "description": "Full text that the customer agreed to and signed.",
          "type": "string"
        },
        "certificationType": {
          "$ref": "#/definitions/SignedCertificationType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "date": {
          "description": "Date that the customer signed the certification.",
          "type": "string",
          "format": "date"
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "The ID of the signed certification.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moveId": {
          "description": "The ID of the move associated with this signed certification.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ppmId": {
          "description": "The ID of the PPM shipment associated with this signed certification, if any.",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "signature": {
          "description": "The signature that the customer provided.",
          "type": "string"
        },
        "submittingUserId": {
          "description": "The ID of the user that signed.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SignedCertificationType": {
      "description": "The type of signed certification:\n  - PPM_PAYMENT: This is used when the customer has a PPM shipment that they have uploaded their documents for and are\n      ready to submit their documentation for review. When they submit, they will be asked to sign certifying the\n      information is correct.\n  - SHIPMENT: This is used when a customer submits their move with their shipments to be reviewed by office users.\n  - PRE_CLOSEOUT_REVIEWED_PPM_PAYMENT: This is used when a move has a PPM shipment and is set to\n       service-counseling-completed \"Submit move details\" by service counselor.\n  - CLOSEOUT_REVIEWED_PPM_PAYMENT: This is used when a PPM shipment is reviewed by counselor in close out queue.\n",
      "type": "string",
      "enum": [
        "PPM_PAYMENT",
        "SHIPMENT",
        "PRE_CLOSEOUT_REVIEWED_PPM_PAYMENT",
        "CLOSEOUT_REVIEWED_PPM_PAYMENT"
      ],
      "readOnly": true
    },
    "StorageFacility": {
      "description": "The Storage Facility information for the shipment",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "facilityName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lotNumber": {
          "type": "string",
          "x-nullable": true
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        }
      }
    },
    "SubmittedMovingExpenseType": {
      "description": "Customer Submitted Moving Expense Type",
      "type": "string",
      "enum": [
        "CONTRACTED_EXPENSE",
        "GAS",
        "OIL",
        "OTHER",
        "PACKING_MATERIALS",
        "RENTAL_EQUIPMENT",
        "STORAGE",
        "TOLLS",
        "WEIGHING_FEE"
      ],
      "x-display-value": {
        "CONTRACTED_EXPENSE": "Contracted expense",
        "GAS": "Gas",
        "OIL": "Oil",
        "OTHER": "Other",
        "PACKING_MATERIALS": "Packing materials",
        "RENTAL_EQUIPMENT": "Rental equipment",
        "STORAGE": "Storage",
        "TOLLS": "Tolls",
        "WEIGHING_FEE": "Weighing fee"
      },
      "x-nullable": true,
      "x-omitempty": false
    },
    "TacValid": {
      "type": "object",
      "required": [
        "isValid"
      ],
      "properties": {
        "isValid": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "TransportationOffice": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "gbloc": {
          "type": "string",
          "pattern": "^[A-Z]{4}$",
          "example": "JENQ"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "example": 29.382973
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "example": -98.62759
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "phone_lines": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "telephone",
            "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
            "example": "212-555-5555"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TransportationOffices": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransportationOffice"
      }
    },
    "UpdateAllowancePayload": {
      "type": "object",
      "properties": {
        "agency": {
          "$ref": "#/definitions/Affiliation"
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "gunSafe": {
          "description": "True if user is entitled to move a gun safe (up to 500 lbs) as part of their move without it being charged against their weight allowance.",
          "type": "boolean",
          "x-nullable": true
        },
        "organizationalClothingAndIndividualEquipment": {
          "description": "only for Army",
          "type": "boolean",
          "x-nullable": true
        },
        "proGearWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "maximum": 2000,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "proGearWeightSpouse": {
          "description": "unit is in lbs",
          "type": "integer",
          "maximum": 500,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 500
        },
        "requiredMedicalEquipmentWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "x-formatting": "weight",
          "example": 2000
        },
        "storageInTransit": {
          "description": "the number of storage in transit days that the customer is entitled to for a given shipment on their move",
          "type": "integer"
        }
      }
    },
    "UpdateBillableWeightPayload": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "minimum": 1,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        }
      }
    },
    "UpdateBoatShipment": {
      "type": "object",
      "properties": {
        "hasTrailer": {
          "description": "Does the boat have a trailer",
          "type": "boolean",
          "x-nullable": true
        },
        "heightInInches": {
          "description": "Height of the Boat in inches",
          "type": "integer",
          "x-nullable": true
        },
        "isRoadworthy": {
          "description": "Is the trailer roadworthy",
          "type": "boolean",
          "x-nullable": true
        },
        "lengthInInches": {
          "description": "Length of the Boat in inches",
          "type": "integer",
          "x-nullable": true
        },
        "make": {
          "description": "Make of the Boat",
          "type": "string",
          "x-nullable": true
        },
        "model": {
          "description": "Model of the Boat",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "enum": [
            "HAUL_AWAY",
            "TOW_AWAY"
          ],
          "x-nullable": true
        },
        "widthInInches": {
          "description": "Width of the Boat in inches",
          "type": "integer",
          "x-nullable": true
        },
        "year": {
          "description": "Year of the Boat",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "UpdateCustomerPayload": {
      "type": "object",
      "properties": {
        "backupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "backup_contact": {
          "$ref": "#/definitions/BackupContact"
        },
        "cac_validated": {
          "type": "boolean"
        },
        "current_address": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "emailIsPreferred": {
          "type": "boolean"
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "middle_name": {
          "type": "string",
          "x-nullable": true,
          "example": "David"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "phoneIsPreferred": {
          "type": "boolean"
        },
        "secondaryTelephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$|^$",
          "x-nullable": true
        },
        "suffix": {
          "type": "string",
          "x-nullable": true,
          "example": "Jr."
        }
      }
    },
    "UpdateCustomerSupportRemarkPayload": {
      "description": "A text remark update to an existing remark created by the current active user (the CSR).",
      "type": "object",
      "required": [
        "content"
      ],
      "properties": {
        "content": {
          "type": "string",
          "example": "This is a remark about a move."
        }
      }
    },
    "UpdateMaxBillableWeightAsTIOPayload": {
      "type": "object",
      "required": [
        "authorizedWeight",
        "tioRemarks"
      ],
      "properties": {
        "authorizedWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "minimum": 1,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "tioRemarks": {
          "description": "TIO remarks for updating the max billable weight",
          "type": "string",
          "minLength": 1,
          "x-nullable": true,
          "example": "Increasing max billable weight"
        }
      }
    },
    "UpdateMobileHomeShipment": {
      "type": "object",
      "properties": {
        "heightInInches": {
          "description": "Height of the Boat in inches",
          "type": "integer",
          "x-nullable": true
        },
        "lengthInInches": {
          "description": "Length of the Boat in inches",
          "type": "integer",
          "x-nullable": true
        },
        "make": {
          "description": "Make of the Boat",
          "type": "string",
          "x-nullable": true
        },
        "model": {
          "description": "Model of the Boat",
          "type": "string",
          "x-nullable": true
        },
        "widthInInches": {
          "description": "Width of the Boat in inches",
          "type": "integer",
          "x-nullable": true
        },
        "year": {
          "description": "Year of the Boat",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "UpdateMovingExpense": {
      "type": "object",
      "properties": {
        "amount": {
          "description": "The total amount of the expense as indicated on the receipt",
          "type": "integer"
        },
        "description": {
          "description": "A brief description of the expense.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "movingExpenseType": {
          "$ref": "#/definitions/OmittableMovingExpenseType"
        },
        "reason": {
          "description": "The reason the services counselor has excluded or rejected the item.",
          "type": "string"
        },
        "sitEndDate": {
          "description": "The date the shipment exited storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date"
        },
        "sitEstimatedCost": {
          "description": "The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "sitReimburseableAmount": {
          "description": "The amount of SIT that will be reimbursed",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitStartDate": {
          "description": "The date the shipment entered storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date"
        },
        "status": {
          "$ref": "#/definitions/PPMDocumentStatus"
        },
        "weightStored": {
          "description": "The total weight stored in PPM SIT",
          "type": "integer"
        }
      }
    },
    "UpdateOrderPayload": {
      "type": "object",
      "required": [
        "issueDate",
        "reportByDate",
        "ordersType",
        "newDutyLocationId",
        "originDutyLocationId"
      ],
      "properties": {
        "departmentIndicator": {
          "x-nullable": true,
          "$ref": "#/definitions/DeptIndicator"
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "issueDate": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Orders date",
          "example": "2018-04-26"
        },
        "newDutyLocationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ntsSac": {
          "title": "NTS SAC",
          "$ref": "#/definitions/NullableString",
          "example": "N002214CSW32Y9"
        },
        "ntsTac": {
          "title": "NTS TAC",
          "maxLength": 4,
          "minLength": 4,
          "$ref": "#/definitions/NullableString",
          "example": "F8J1"
        },
        "ordersAcknowledgement": {
          "description": "Confirmation that the new amended orders were reviewed after previously approving the original orders",
          "type": "boolean",
          "x-nullable": true
        },
        "ordersNumber": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "ordersType": {
          "$ref": "#/definitions/OrdersType"
        },
        "ordersTypeDetail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyLocationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reportByDate": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report-by date",
          "example": "2018-04-26"
        },
        "sac": {
          "title": "HHG SAC",
          "$ref": "#/definitions/NullableString",
          "example": "N002214CSW32Y9"
        },
        "tac": {
          "type": "string",
          "title": "HHG TAC",
          "maxLength": 4,
          "minLength": 4,
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "UpdatePPMShipment": {
      "type": "object",
      "properties": {
        "actualDestinationPostalCode": {
          "description": "The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "example": "90210"
        },
        "actualMoveDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "actualPickupPostalCode": {
          "description": "The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "example": "90210"
        },
        "advanceAmountReceived": {
          "description": "The amount received for an advance, or null if no advance is received\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true
        },
        "advanceAmountRequested": {
          "description": "The amount request for an advance, or null if no advance is requested\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true
        },
        "advanceStatus": {
          "x-nullable": true,
          "$ref": "#/definitions/PPMAdvanceStatus"
        },
        "destinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "estimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to move.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "hasReceivedAdvance": {
          "description": "Indicates whether an advance was received for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "hasRequestedAdvance": {
          "description": "Indicates whether an advance has been requested for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "hasSecondaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "pickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "proGearWeight": {
          "type": "integer",
          "x-nullable": true
        },
        "secondaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "sitEstimatedDepartureDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedEntryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "sitExpected": {
          "type": "boolean",
          "x-nullable": true
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "spouseProGearWeight": {
          "type": "integer",
          "x-nullable": true
        },
        "tertiaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "tertiaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "w2Address": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        }
      }
    },
    "UpdatePaymentRequestStatusPayload": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "UpdateProGearWeightTicket": {
      "type": "object",
      "properties": {
        "belongsToSelf": {
          "description": "Indicates if this information is for the customer's own pro-gear, otherwise, it's the spouse's.",
          "type": "boolean"
        },
        "hasWeightTickets": {
          "description": "Indicates if the user has a weight ticket for their pro-gear, otherwise they have a constructed weight.",
          "type": "boolean"
        },
        "reason": {
          "description": "The reason the services counselor has excluded or rejected the item.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/PPMDocumentStatus"
        },
        "weight": {
          "description": "Weight of the pro-gear contained in the shipment.",
          "type": "integer"
        }
      }
    },
    "UpdateSITServiceItemCustomerExpense": {
      "required": [
        "convertToCustomerExpense",
        "customerExpenseReason"
      ],
      "properties": {
        "convertToCustomerExpense": {
          "type": "boolean",
          "example": true
        },
        "customerExpenseReason": {
          "description": "Reason the service item was rejected",
          "type": "string",
          "example": "Insufficent details provided"
        }
      }
    },
    "UpdateShipment": {
      "type": "object",
      "properties": {
        "actualProGearWeight": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualSpouseProGearWeight": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "agents": {
          "x-nullable": true,
          "$ref": "#/definitions/MTOAgents"
        },
        "billableWeightCap": {
          "description": "estimated weight of the shuttle service item provided by the prime",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2500
        },
        "billableWeightJustification": {
          "type": "string",
          "x-nullable": true,
          "example": "more weight than expected"
        },
        "boatShipment": {
          "$ref": "#/definitions/UpdateBoatShipment"
        },
        "counselorRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "counselor approved"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "destinationType": {
          "$ref": "#/definitions/DestinationType"
        },
        "hasSecondaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "mobileHomeShipment": {
          "$ref": "#/definitions/UpdateMobileHomeShipment"
        },
        "ntsRecordedWeight": {
          "description": "The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "pickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "ppmShipment": {
          "$ref": "#/definitions/UpdatePPMShipment"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sacType": {
          "$ref": "#/definitions/LOATypeNullable"
        },
        "secondaryDeliveryAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "serviceOrderNumber": {
          "type": "string",
          "x-nullable": true
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "storageFacility": {
          "x-nullable": true,
          "$ref": "#/definitions/StorageFacility"
        },
        "tacType": {
          "$ref": "#/definitions/LOATypeNullable"
        },
        "tertiaryDeliveryAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "tertiaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "usesExternalVendor": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        }
      }
    },
    "UpdateWeightTicket": {
      "type": "object",
      "properties": {
        "adjustedNetWeight": {
          "description": "Indicates the adjusted net weight of the vehicle",
          "type": "integer"
        },
        "allowableWeight": {
          "description": "Indicates the maximum reimbursable weight of the shipment",
          "type": "integer"
        },
        "emptyWeight": {
          "description": "Weight of the vehicle when empty.",
          "type": "integer"
        },
        "fullWeight": {
          "description": "The weight of the vehicle when full.",
          "type": "integer"
        },
        "netWeightRemarks": {
          "description": "Remarks explaining any edits made to the net weight",
          "type": "string"
        },
        "ownsTrailer": {
          "description": "Indicates if the customer used a trailer they own for the move.",
          "type": "boolean"
        },
        "reason": {
          "description": "The reason the services counselor has excluded or rejected the item.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/PPMDocumentStatus"
        },
        "trailerMeetsCriteria": {
          "description": "Indicates if the trailer that the customer used meets all the criteria to be claimable.",
          "type": "boolean"
        }
      }
    },
    "Upload": {
      "description": "An uploaded file.",
      "type": "object",
      "required": [
        "id",
        "url",
        "filename",
        "contentType",
        "bytes",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "bytes": {
          "type": "integer",
          "readOnly": true
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "readOnly": true,
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "readOnly": true,
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isWeightTicket": {
          "type": "boolean"
        },
        "rotation": {
          "type": "integer",
          "example": 2
        },
        "status": {
          "type": "string",
          "enum": [
            "INFECTED",
            "CLEAN",
            "PROCESSING"
          ],
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploadType": {
          "type": "string",
          "enum": [
            "USER",
            "PRIME",
            "OFFICE"
          ],
          "readOnly": true,
          "example": "OFFICE"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalid_fields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "type": "object"
        }
      ],
      "properties": {
        "invalid_fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "WeightTicket": {
      "description": "Vehicle and optional trailer information and weight documents used to move this PPM shipment.",
      "type": "object",
      "required": [
        "ppmShipmentId",
        "createdAt",
        "updatedAt",
        "emptyDocumentId",
        "emptyDocument",
        "fullDocument",
        "fullDocumentId",
        "proofOfTrailerOwnershipDocument",
        "proofOfTrailerOwnershipDocumentId"
      ],
      "properties": {
        "adjustedNetWeight": {
          "description": "Indicates the adjusted net weight of the vehicle",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "allowableWeight": {
          "description": "Maximum reimbursable weight.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "emptyDocument": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the vehicle weight when empty."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "emptyDocumentId": {
          "description": "ID of the document that is associated with the user uploads containing the vehicle weight when empty.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "emptyWeight": {
          "description": "Weight of the vehicle when empty.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "fullDocument": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the vehicle weight when full."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "fullDocumentId": {
          "description": "ID of the document that is associated with the user uploads containing the vehicle weight when full.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "fullWeight": {
          "description": "The weight of the vehicle when full.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "ID of this set of weight tickets.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "missingEmptyWeightTicket": {
          "description": "Indicates if the customer is missing a weight ticket for the vehicle weight when empty.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "missingFullWeightTicket": {
          "description": "Indicates if the customer is missing a weight ticket for the vehicle weight when full.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "netWeightRemarks": {
          "description": "Remarks explaining any edits made to the net weight",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ownsTrailer": {
          "description": "Indicates if the customer used a trailer they own for the move.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ppmShipmentId": {
          "description": "The ID of the PPM shipment that this set of weight tickets is for.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "proofOfTrailerOwnershipDocument": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the proof of trailer ownership."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "proofOfTrailerOwnershipDocumentId": {
          "description": "ID of the document that is associated with the user uploads containing the proof of trailer ownership.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reason": {
          "$ref": "#/definitions/PPMDocumentStatusReason"
        },
        "status": {
          "$ref": "#/definitions/OmittablePPMDocumentStatus"
        },
        "submittedEmptyWeight": {
          "description": "Customer submitted weight of the vehicle when empty.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedFullWeight": {
          "description": "Customer submitted weight of the vehicle when full.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedOwnsTrailer": {
          "description": "Indicates if the customer used a trailer they own for the move.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedTrailerMeetsCriteria": {
          "description": "Indicates if the trailer that the customer used meets all the criteria to be claimable.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "trailerMeetsCriteria": {
          "description": "Indicates if the trailer that the customer used meets all the criteria to be claimable.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "vehicleDescription": {
          "description": "Description of the vehicle used for the trip. E.g. make/model, type of truck/van, etc.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        }
      }
    },
    "WeightTickets": {
      "description": "All weight tickets associated with a PPM shipment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/WeightTicket"
      },
      "x-omitempty": false
    }
  },
  "parameters": {
    "ifMatch": {
      "type": "string",
      "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
      "name": "If-Match",
      "in": "header",
      "required": true
    },
    "movingExpenseId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the moving expense",
      "name": "movingExpenseId",
      "in": "path",
      "required": true
    },
    "ppmShipmentId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the PPM shipment",
      "name": "ppmShipmentId",
      "in": "path",
      "required": true
    },
    "proGearWeightTicketId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the pro-gear weight ticket",
      "name": "proGearWeightTicketId",
      "in": "path",
      "required": true
    },
    "weightTicketId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the weight ticket",
      "name": "weightTicketId",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "Conflict": {
      "description": "Conflict error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ServerError": {
      "description": "A server error occurred",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "The payload was unprocessable.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "queues"
    },
    {
      "name": "move"
    },
    {
      "description": "Move Orders - Commonly called “Orders,” especially in customer-facing language. Orders are plural because they're a bundle of related orders issued bya Service (e.g. Army, Air Force, Navy) to a customer that authorize (and order) that customer to move from one location to another.\nOrders are backed by $$ in the bank to support that move, which is identified by a Line of Account (LOA) code on the orders document.\n",
      "name": "order"
    },
    {
      "name": "moveTaskOrder"
    },
    {
      "name": "customer"
    },
    {
      "name": "mtoServiceItem"
    },
    {
      "name": "mtoShipment"
    },
    {
      "name": "shipment"
    },
    {
      "name": "mtoAgent"
    },
    {
      "name": "paymentServiceItem"
    },
    {
      "name": "ppm"
    },
    {
      "name": "tac"
    },
    {
      "name": "transportationOffice"
    },
    {
      "name": "uploads"
    },
    {
      "name": "paymentRequests"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The GHC API is a RESTful API that enables the Office application for MilMove.\n\nAll endpoints are located under ` + "`" + `/ghc/v1` + "`" + `.\n",
    "title": "MilMove GHC API",
    "contact": {
      "email": "milmove-developers@caci.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/ghc/v1",
  "paths": {
    "/application_parameters/{parameterName}": {
      "get": {
        "description": "Searches for an application parameter by name, returns nil if not found",
        "tags": [
          "application_parameters"
        ],
        "summary": "Searches for an application parameter by name, returns nil if not found",
        "operationId": "getParam",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "Parameter Name",
            "name": "parameterName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Application Parameters",
            "schema": {
              "$ref": "#/definitions/ApplicationParameters"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/calendar/{countryCode}/is-weekend-holiday/{date}": {
      "get": {
        "description": "Utility API to determine if input date falls on weekend and/or holiday.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "calendar"
        ],
        "summary": "Validate  move date selection",
        "operationId": "isDateWeekendHoliday",
        "parameters": [
          {
            "enum": [
              "US"
            ],
            "type": "string",
            "description": "country code for context of date",
            "name": "countryCode",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "description": "input date to determine if weekend/holiday for given country.",
            "name": "date",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully determine if given date is weekend and/or holiday for given country.",
            "schema": {
              "$ref": "#/definitions/IsDateWeekendHolidayInfo"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/counseling/orders/{orderID}": {
      "patch": {
        "description": "All fields sent in this request will be set on the order referenced",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates an order (performed by a services counselor)",
        "operationId": "counselingUpdateOrder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CounselingUpdateOrderPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of orders",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to update",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/counseling/orders/{orderID}/allowances": {
      "patch": {
        "description": "All fields sent in this request will be set on the order referenced",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates an allowance (Orders with Entitlements)",
        "operationId": "counselingUpdateAllowance",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CounselingUpdateAllowancePayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of allowance",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/customer": {
      "post": {
        "description": "Creates a customer with option to also create an Okta profile account based on the office user's input when completing the UI form and submitting.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Creates a customer with Okta option",
        "operationId": "createCustomerWithOktaOption",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCustomerPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created the customer",
            "schema": {
              "$ref": "#/definitions/CreatedCustomer"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customer-support-remarks/{customerSupportRemarkID}": {
      "delete": {
        "description": "Soft deletes a customer support remark by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "customerSupportRemarks"
        ],
        "summary": "Soft deletes a customer support remark by ID",
        "operationId": "deleteCustomerSupportRemark",
        "responses": {
          "204": {
            "description": "Successfully soft deleted the shipment"
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates a customer support remark for a move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customerSupportRemarks"
        ],
        "summary": "Updates a customer support remark for a move",
        "operationId": "updateCustomerSupportRemarkForMove",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomerSupportRemarkPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated customer support remark",
            "schema": {
              "$ref": "#/definitions/CustomerSupportRemark"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "the customer support remark ID to be modified",
          "name": "customerSupportRemarkID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/customer/search": {
      "post": {
        "description": "Search customers by DOD ID or customer name. Used by services counselors to locate profiles to update, find attached moves, and to create new moves.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Search customers by DOD ID or customer name",
        "operationId": "searchCustomers",
        "parameters": [
          {
            "description": "field that results should be sorted by",
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "branch": {
                  "description": "Branch",
                  "type": "string",
                  "minLength": 1
                },
                "customerName": {
                  "description": "Customer Name",
                  "type": "string",
                  "minLength": 1,
                  "x-nullable": true
                },
                "dodID": {
                  "description": "DOD ID",
                  "type": "string",
                  "maxLength": 10,
                  "minLength": 10,
                  "x-nullable": true
                },
                "emplid": {
                  "description": "EMPLID",
                  "type": "string",
                  "maxLength": 7,
                  "minLength": 7,
                  "x-nullable": true
                },
                "order": {
                  "type": "string",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "x-nullable": true
                },
                "page": {
                  "description": "requested page of results",
                  "type": "integer"
                },
                "perPage": {
                  "type": "integer"
                },
                "sort": {
                  "type": "string",
                  "enum": [
                    "customerName",
                    "dodID",
                    "emplid",
                    "branch",
                    "personalEmail",
                    "telephone"
                  ],
                  "x-nullable": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all customers matching the criteria",
            "schema": {
              "$ref": "#/definitions/SearchCustomersResult"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customer/{customerID}": {
      "get": {
        "description": "Returns a given customer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Returns a given customer",
        "operationId": "getCustomer",
        "responses": {
          "200": {
            "description": "Successfully retrieved information on an individual customer",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates customer info by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Updates customer info",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomerPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of orders",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.customer"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of customer to use",
          "name": "customerID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/documents": {
      "post": {
        "description": "Documents represent a physical artifact such as a scanned document or a PDF file",
        "tags": [
          "ghcDocuments"
        ],
        "summary": "Create a new document",
        "operationId": "createDocument",
        "parameters": [
          {
            "name": "documentPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostDocumentPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created document",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/documents/{documentId}": {
      "get": {
        "description": "Returns a document and its uploads",
        "tags": [
          "ghcDocuments"
        ],
        "summary": "Returns a document",
        "operationId": "getDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to return",
            "name": "documentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the requested document",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/evaluation-reports/{reportID}": {
      "get": {
        "description": "Gets an evaluation report by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "evaluationReports"
        ],
        "summary": "Gets an evaluation report by ID",
        "operationId": "getEvaluationReport",
        "responses": {
          "200": {
            "description": "Successfully got the report",
            "schema": {
              "$ref": "#/definitions/EvaluationReport"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Saves an evaluation report as a draft",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "evaluationReports"
        ],
        "summary": "Saves an evaluation report as a draft",
        "operationId": "saveEvaluationReport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EvaluationReport"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully saved the report"
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.evaluationReport"
        ]
      },
      "delete": {
        "description": "Deletes an evaluation report by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "evaluationReports"
        ],
        "summary": "Deletes an evaluation report by ID",
        "operationId": "deleteEvaluationReport",
        "responses": {
          "204": {
            "description": "Successfully deleted the report"
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "delete.evaluationReport"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "the evaluation report ID to be modified",
          "name": "reportID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/evaluation-reports/{reportID}/download": {
      "get": {
        "description": "Downloads an evaluation report as a PDF",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "evaluationReports"
        ],
        "summary": "Downloads an evaluation report as a PDF",
        "operationId": "downloadEvaluationReport",
        "responses": {
          "200": {
            "description": "Evaluation report PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "the evaluation report ID to be downloaded",
          "name": "reportID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/evaluation-reports/{reportID}/submit": {
      "post": {
        "description": "Submits an evaluation report",
        "produces": [
          "application/json"
        ],
        "tags": [
          "evaluationReports"
        ],
        "summary": "Submits an evaluation report",
        "operationId": "submitEvaluationReport",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully submitted an evaluation report with the provided ID"
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.evaluationReport"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "the evaluation report ID to be modified",
          "name": "reportID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/lines-of-accounting": {
      "post": {
        "description": "Fetches a line of accounting based on provided service member affiliation, effective date, and Transportation Accounting Code (TAC). It uses these parameters to filter the correct Line of Accounting for the provided TAC. It does this by filtering through both TAC and LOAs based on the provided code and effective date. The 'Effective Date' is the date that can be either the orders issued date (For HHG shipments), MTO approval date (For NTS shipments), or even the current date for NTS shipments with no approval yet (Just providing a preview to the office users per customer request). Effective date is used to find \"Active\" TGET data by searching for the TACs and LOAs with begin and end dates containing this date.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "linesOfAccounting"
        ],
        "summary": "Fetch line of accounting",
        "operationId": "requestLineOfAccounting",
        "parameters": [
          {
            "description": "Service member affiliation, effective date, and TAC code.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FetchLineOfAccountingPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved line of accounting",
            "schema": {
              "$ref": "#/definitions/LineOfAccounting"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}": {
      "get": {
        "description": "Gets a move",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Gets a move by ID",
        "operationId": "getMoveTaskOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieved move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/billable-weights-reviewed-at": {
      "patch": {
        "description": "Changes move (move task order) billableWeightsReviewedAt field to a timestamp",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "operationId": "updateMTOReviewedBillableWeightsAt",
        "parameters": [
          {
            "type": "string",
            "description": "ID of move to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order billableWeightsReviewedAt field",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}/entitlements": {
      "get": {
        "description": "Gets entitlements",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Gets entitlements for a move by ID",
        "operationId": "getEntitlements",
        "responses": {
          "200": {
            "description": "Successfully retrieved entitlements",
            "schema": {
              "$ref": "#/definitions/Entitlements"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/payment-service-items/{paymentServiceItemID}/status": {
      "patch": {
        "description": "Changes the status of a line item for a move by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentServiceItem"
        ],
        "summary": "Change the status of a payment service item for a move by ID",
        "operationId": "updatePaymentServiceItemStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentServiceItem"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status for a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/PaymentServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.paymentServiceItemStatus"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of payment service item to use",
          "name": "paymentServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}": {
      "get": {
        "description": "Gets a line item by ID for a move by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Gets a line item by ID for a move by ID",
        "operationId": "getMTOServiceItem",
        "responses": {
          "200": {
            "description": "Successfully retrieved a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/MTOServiceItemSingle"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of line item to use",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}/status": {
      "patch": {
        "description": "Changes the status of a line item for a move by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Change the status of a line item for a move by ID",
        "operationId": "updateMTOServiceItemStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMTOServiceItemStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status for a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.MTOServiceItem"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of line item to use",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/status": {
      "patch": {
        "description": "Changes move task order status to make it available to prime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Change the status of a move task order to make it available to prime",
        "operationId": "updateMoveTaskOrderStatus",
        "parameters": [
          {
            "type": "string",
            "description": "ID of move to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "serviceItemCodes",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOApprovalServiceItemCodes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order status",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.move",
          "create.serviceItem"
        ]
      }
    },
    "/move-task-orders/{moveTaskOrderID}/status/service-counseling-completed": {
      "patch": {
        "description": "Changes move (move task order) status to service counseling completed",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Changes move (move task order) status to service counseling completed",
        "operationId": "updateMTOStatusServiceCounselingCompleted",
        "parameters": [
          {
            "type": "string",
            "description": "ID of move to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order status",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/move-task-orders/{moveTaskOrderID}/tio-remarks": {
      "patch": {
        "description": "Changes move (move task order) billableWeightsReviewedAt field to a timestamp",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "operationId": "updateMoveTIORemarks",
        "parameters": [
          {
            "type": "string",
            "description": "ID of move to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Move"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order tioRemarks field",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/move/{locator}": {
      "get": {
        "description": "Returns a given move for a unique alphanumeric locator string",
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Returns a given move",
        "operationId": "getMove",
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Code used to identify a move in the system",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move/{locator}/history": {
      "get": {
        "description": "Returns the history for a given move for a unique alphanumeric locator string",
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Returns the history of an identified move",
        "operationId": "getMoveHistory",
        "parameters": [
          {
            "type": "integer",
            "description": "requested page of results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "results per page",
            "name": "perPage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual move history",
            "schema": {
              "$ref": "#/definitions/MoveHistoryResult"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Code used to identify a move in the system",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_service_items": {
      "get": {
        "description": "Gets all line items for a move",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Gets all line items for a move",
        "operationId": "listMTOServiceItems",
        "responses": {
          "200": {
            "description": "Successfully retrieved all line items for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOServiceItems"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move for mto service item to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments": {
      "get": {
        "description": "Gets all shipments for a move task order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Gets all shipments for a move task order",
        "operationId": "listMTOShipments",
        "responses": {
          "200": {
            "description": "Successfully retrieved all mto shipments for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOShipments"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order for mto shipment to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}": {
      "patch": {
        "description": "Updates a specified MTO shipment.\nRequired fields include:\n* MTO Shipment ID required in path\n* If-Match required in headers\n* No fields required in body\nOptional fields include:\n* New shipment status type\n* Shipment Type\n* Customer requested pick-up date\n* Pick-up Address\n* Delivery Address\n* Secondary Pick-up Address\n* SecondaryDelivery Address\n* Delivery Address Type\n* Customer Remarks\n* Counselor Remarks\n* Releasing / Receiving agents\n* Actual Pro Gear Weight\n* Actual Spouse Pro Gear Weight\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "updateMTOShipment",
        "operationId": "updateMTOShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of move task order for mto shipment to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the MTO Shipment to update",
            "name": "shipmentID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the specified MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}/mto-agents": {
      "get": {
        "description": "Fetches a list of agents associated with a move task order.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoAgent"
        ],
        "summary": "Fetch move task order agents.",
        "operationId": "fetchMTOAgentList",
        "responses": {
          "200": {
            "description": "Successfully retrieved all agents for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOAgents"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/search": {
      "post": {
        "description": "Search moves by locator, DOD ID, or customer name. Used by QAE and CSR users.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Search moves by locator, DOD ID, or customer name",
        "operationId": "searchMoves",
        "parameters": [
          {
            "description": "field that results should be sorted by",
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "branch": {
                  "type": "string",
                  "x-nullable": true
                },
                "customerName": {
                  "description": "Customer Name",
                  "type": "string",
                  "minLength": 1,
                  "x-nullable": true
                },
                "deliveryDate": {
                  "type": "string",
                  "format": "date-time",
                  "x-nullable": true
                },
                "destinationPostalCode": {
                  "type": "string",
                  "x-nullable": true
                },
                "dodID": {
                  "description": "DOD ID",
                  "type": "string",
                  "maxLength": 10,
                  "minLength": 10,
                  "x-nullable": true
                },
                "emplid": {
                  "description": "EMPLID",
                  "type": "string",
                  "maxLength": 7,
                  "minLength": 7,
                  "x-nullable": true
                },
                "locator": {
                  "description": "Move locator",
                  "type": "string",
                  "maxLength": 6,
                  "minLength": 6,
                  "x-nullable": true
                },
                "order": {
                  "type": "string",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "x-nullable": true
                },
                "originPostalCode": {
                  "type": "string",
                  "x-nullable": true
                },
                "page": {
                  "description": "requested page of results",
                  "type": "integer"
                },
                "paymentRequestCode": {
                  "type": "string",
                  "x-nullable": true,
                  "example": "9551-6199-2"
                },
                "perPage": {
                  "type": "integer"
                },
                "pickupDate": {
                  "type": "string",
                  "format": "date-time",
                  "x-nullable": true
                },
                "shipmentsCount": {
                  "type": "integer",
                  "x-nullable": true
                },
                "sort": {
                  "type": "string",
                  "enum": [
                    "customerName",
                    "dodID",
                    "emplid",
                    "branch",
                    "locator",
                    "status",
                    "originPostalCode",
                    "destinationPostalCode",
                    "shipmentsCount"
                  ],
                  "x-nullable": true
                },
                "status": {
                  "description": "Filtering for the status.",
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "string",
                    "enum": [
                      "DRAFT",
                      "SUBMITTED",
                      "APPROVALS REQUESTED",
                      "APPROVED",
                      "NEEDS SERVICE COUNSELING",
                      "SERVICE COUNSELING COMPLETED"
                    ]
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/SearchMovesResult"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/moves/{locator}/closeout-office": {
      "patch": {
        "description": "Sets the transportation office closeout location for where the Move's PPM Shipment documentation will be reviewed by",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Updates a Move's PPM closeout office for Army and Air Force customers",
        "operationId": "updateCloseoutOffice",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "closeoutOfficeId"
              ],
              "properties": {
                "closeoutOfficeId": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully set the closeout office for the move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.closeoutOffice"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "string",
          "description": "move code to identify a move to update the PPM shipment's closeout office for Army and Air Force service members",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{locator}/customer-support-remarks": {
      "get": {
        "description": "Fetches customer support remarks for a move",
        "produces": [
          "application/json"
        ],
        "tags": [
          "customerSupportRemarks"
        ],
        "summary": "Fetches customer support remarks using the move code (locator).",
        "operationId": "getCustomerSupportRemarksForMove",
        "responses": {
          "200": {
            "description": "Successfully retrieved all line items for a move task order",
            "schema": {
              "$ref": "#/definitions/CustomerSupportRemarks"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Creates a customer support remark for a move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customerSupportRemarks"
        ],
        "summary": "Creates a customer support remark for a move",
        "operationId": "createCustomerSupportRemarkForMove",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateCustomerSupportRemark"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created customer support remark",
            "schema": {
              "$ref": "#/definitions/CustomerSupportRemark"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "string",
          "description": "move code to identify a move for customer support remarks",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{locator}/evaluation-reports": {
      "post": {
        "description": "Creates an evaluation report",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "evaluationReports"
        ],
        "summary": "Creates an evaluation report",
        "operationId": "createEvaluationReport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateEvaluationReport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created evaluation report",
            "schema": {
              "$ref": "#/definitions/EvaluationReport"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "create.evaluationReport"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{locator}/payment-requests": {
      "get": {
        "description": "Fetches payment requests for a move",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Fetches payment requests using the move code (locator).",
        "operationId": "getPaymentRequestsForMove",
        "responses": {
          "200": {
            "description": "Successfully retrieved all line items for a move task order",
            "schema": {
              "$ref": "#/definitions/PaymentRequests"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "read.paymentRequest"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "string",
          "description": "move code to identify a move for payment requests",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{moveID}/assignOfficeUser": {
      "patch": {
        "description": "assigns either a services counselor, task ordering officer, or task invoicing officer to the move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "operationId": "updateAssignedOfficeUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignOfficeUserBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully assigned office user to the move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the move",
          "name": "moveID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{moveID}/cancel": {
      "post": {
        "description": "cancels a move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Cancels a move",
        "operationId": "moveCanceler",
        "responses": {
          "200": {
            "description": "Successfully cancelled move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the move",
          "name": "moveID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{moveID}/counseling-evaluation-reports-list": {
      "get": {
        "description": "Returns counseling evaluation reports for the specified move that are visible to the current office user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Returns counseling evaluation reports for the specified move that are visible to the current office user",
        "operationId": "getMoveCounselingEvaluationReportsList",
        "responses": {
          "200": {
            "description": "Successfully retrieved the move's evaluation reports",
            "schema": {
              "$ref": "#/definitions/EvaluationReportList"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "Code used to identify a move in the system",
          "name": "moveID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{moveID}/financial-review-flag": {
      "post": {
        "description": "This sets a flag which indicates that the move should be reviewed by a fincancial office. For example, if the origin or destination address of a shipment is far from the duty location and may incur excess costs to the customer.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Flags a move for financial office review",
        "operationId": "setFinancialReviewFlag",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "flagForReview"
              ],
              "properties": {
                "flagForReview": {
                  "description": "boolean value representing whether we should flag a move for financial review",
                  "type": "boolean",
                  "example": false
                },
                "remarks": {
                  "description": "explanation of why the move is being flagged for financial review",
                  "type": "string",
                  "x-nullable": true,
                  "example": "this address is way too far away"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated Move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.financialReviewFlag"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move to flag",
          "name": "moveID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{moveID}/shipment-evaluation-reports-list": {
      "get": {
        "description": "Returns shipment evaluation reports for the specified move that are visible to the current office user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Returns shipment evaluation reports for the specified move that are visible to the current office user",
        "operationId": "getMoveShipmentEvaluationReportsList",
        "responses": {
          "200": {
            "description": "Successfully retrieved the move's evaluation reports",
            "schema": {
              "$ref": "#/definitions/EvaluationReportList"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "Code used to identify a move in the system",
          "name": "moveID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{moveID}/unassignOfficeUser": {
      "patch": {
        "description": "unassigns either a services counselor, task ordering officer, or task invoicing officer from the move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "operationId": "deleteAssignedOfficeUser",
        "responses": {
          "200": {
            "description": "Successfully unassigned office user from the move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the move",
          "name": "moveID",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "required": [
              "roleType"
            ],
            "properties": {
              "roleType": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "/moves/{moveID}/uploadAdditionalDocuments": {
      "patch": {
        "description": "Customers will on occaision need the ability to upload additional supporting documents, for a variety of reasons. This does not include amended order.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "move"
        ],
        "summary": "Patch the additional documents for a given move",
        "operationId": "uploadAdditionalDocuments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the order",
            "name": "moveID",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        },
        "x-permissions": [
          "create.supportingDocuments"
        ]
      }
    },
    "/mto-shipments": {
      "post": {
        "description": "Creates a MTO shipment for the specified Move Task Order.\nRequired fields include:\n* Shipment Type\n* Customer requested pick-up date\n* Pick-up Address\n* Delivery Address\n* Releasing / Receiving agents\nOptional fields include:\n* Delivery Address Type\n* Customer Remarks\n* Releasing / Receiving agents\n* An array of optional accessorial service item codes\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "createMTOShipment",
        "operationId": "createMTOShipment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateMTOShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a MTO shipment.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/open/requested-office-users": {
      "post": {
        "description": "This endpoint is publicly accessible as it is utilized for individuals who do not have an office account to request the creation of an office account.\nRequest the creation of an office user. An administrator will need to approve them after creation. Note on requirements: An identification method must be present. The following 2 fields have an \"OR\" requirement. - edipi - other_unique_id One of these two fields MUST be present to serve as identification for the office user being created. This logic is handled at the application level.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "officeUsers"
        ],
        "summary": "Create an Office User",
        "operationId": "createRequestedOfficeUser",
        "parameters": [
          {
            "description": "Office User information",
            "name": "officeUser",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OfficeUserCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully requested the creation of provided office user",
            "schema": {
              "$ref": "#/definitions/OfficeUser"
            }
          },
          "422": {
            "description": "validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/open/transportation-offices": {
      "get": {
        "description": "This endpoint is publicly accessible as it is utilized to access transportation office information without having an office account.Returns the transportation offices matching the search query.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transportationOffice"
        ],
        "summary": "Returns the transportation offices matching the search query",
        "operationId": "getTransportationOfficesOpen",
        "parameters": [
          {
            "minLength": 2,
            "type": "string",
            "description": "Search string for transportation offices",
            "name": "search",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transportation offices",
            "schema": {
              "$ref": "#/definitions/TransportationOffices"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/orders": {
      "post": {
        "description": "Creates an instance of orders tied to a service member, which allow for creation of a move and an entitlement. Orders are required before the creation of a move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Creates an orders model for a logged-in user",
        "operationId": "createOrder",
        "parameters": [
          {
            "name": "createOrders",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateOrders"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "created instance of orders",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/orders/{orderID}": {
      "get": {
        "description": "Gets an order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Gets an order by ID",
        "operationId": "getOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieved order",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "All fields sent in this request will be set on the order referenced",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates an order",
        "operationId": "updateOrder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOrderPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of orders",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.orders"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/orders/{orderID}/acknowledge-excess-weight-risk": {
      "post": {
        "description": "Saves the date and time a TOO acknowledged the excess weight risk by dismissing the alert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Saves the date and time a TOO acknowledged the excess weight risk by dismissing the alert",
        "operationId": "acknowledgeExcessWeightRisk",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated Move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.excessWeightRisk"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/orders/{orderID}/allowances": {
      "patch": {
        "description": "All fields sent in this request will be set on the order referenced",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates an allowance (Orders with Entitlements)",
        "operationId": "updateAllowance",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAllowancePayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of allowance",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.allowances"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/orders/{orderID}/update-billable-weight": {
      "patch": {
        "description": "Updates the DBAuthorizedWeight attribute for the Order Entitlements=",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates the max billable weight",
        "operationId": "updateBillableWeight",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateBillableWeightPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated Order",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.billableWeight"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/orders/{orderID}/update-max-billable-weight/tio": {
      "patch": {
        "description": "Updates the DBAuthorizedWeight attribute for the Order Entitlements and move TIO remarks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates the max billable weight with TIO remarks",
        "operationId": "updateMaxBillableWeightAsTIO",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMaxBillableWeightAsTIOPayload"
            }
          },
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated Order",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.maxBillableWeight"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/orders/{orderID}/upload_amended_orders": {
      "post": {
        "description": "Create an amended order for a given order",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "order"
        ],
        "summary": "Create an amended order for a given order",
        "operationId": "uploadAmendedOrders",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the order",
            "name": "orderID",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/payment-requests/{paymentRequestID}": {
      "get": {
        "description": "Fetches an instance of a payment request by id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Fetches a payment request by id",
        "operationId": "getPaymentRequest",
        "responses": {
          "200": {
            "description": "fetched instance of payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "read.paymentRequest"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of payment request",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}/bulkDownload": {
      "get": {
        "description": "This endpoint downloads all uploaded payment request documentation combined into a single PDF.\n",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Downloads all Payment Request documents as a PDF",
        "operationId": "bulkDownload",
        "responses": {
          "200": {
            "description": "Payment Request Files PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "the id for the payment-request with files to be downloaded",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}/shipments-payment-sit-balance": {
      "get": {
        "description": "Returns all shipment payment request SIT usage to support partial SIT invoicing",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Returns all shipment payment request SIT usage to support partial SIT invoicing",
        "operationId": "getShipmentsPaymentSITBalance",
        "responses": {
          "200": {
            "description": "Successfully retrieved shipments and their SIT days balance from all payment requests on the move",
            "schema": {
              "$ref": "#/definitions/ShipmentsPaymentSITBalance"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "read.shipmentsPaymentSITBalance"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "payment request ID of the payment request with SIT service items being reviewed",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}/status": {
      "patch": {
        "description": "Updates status of a payment request by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Updates status of a payment request by id",
        "operationId": "updatePaymentRequestStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of payment request",
            "name": "paymentRequestID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePaymentRequestStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.paymentRequest"
        ]
      }
    },
    "/ppm-shipments/{ppmShipmentId}/actual-weight": {
      "get": {
        "description": "Retrieves the actual weight for the specified PPM shipment.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Get the actual weight for a PPM shipment",
        "operationId": "getPPMActualWeight",
        "responses": {
          "200": {
            "description": "Returns actual weight for the specified PPM shipment.",
            "schema": {
              "$ref": "#/definitions/PPMActualWeight"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the PPM shipment",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/aoa-packet": {
      "get": {
        "description": "### Functionality\nThis endpoint downloads all uploaded move order documentation combined with the Shipment Summary Worksheet into a single PDF.\n### Errors\n* The PPMShipment must have requested an AOA.\n* The PPMShipment AOA Request must have been approved.\n",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Downloads AOA Packet form PPMShipment as a PDF",
        "operationId": "showAOAPacket",
        "responses": {
          "200": {
            "description": "AOA PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "the id for the ppmshipment with aoa to be downloaded",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/closeout": {
      "get": {
        "description": "Retrieves the closeout calculations for the specified PPM shipment.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Get the closeout calcuations for the specified PPM shipment",
        "operationId": "getPPMCloseout",
        "responses": {
          "200": {
            "description": "Returns closeout for the specified PPM shipment.",
            "schema": {
              "$ref": "#/definitions/PPMCloseout"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the PPM shipment",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/finish-document-review": {
      "patch": {
        "description": "Updates a PPM shipment's status once documents have been reviewed. Status is updated depending on whether any documents have been rejected.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates a PPM shipment's status after document review",
        "operationId": "finishDocumentReview",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully finished document review",
            "schema": {
              "$ref": "#/definitions/PPMShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.shipment"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the PPM shipment",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/moving-expenses/{movingExpenseId}": {
      "patch": {
        "description": "Updates a PPM shipment's moving expense with new information. Only some of the moving expense's fields are\neditable because some have to be set by the customer, e.g. the description and the moving expense type.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates the moving expense",
        "operationId": "updateMovingExpense",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "updateMovingExpense",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMovingExpense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an updated moving expense object",
            "schema": {
              "$ref": "#/definitions/MovingExpense"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the PPM shipment",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the moving expense",
          "name": "movingExpenseId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/payment-packet": {
      "get": {
        "description": "Generates a PDF containing all user uploaded documentations for PPM. Contains SSW form, orders, weight and expense documentations.",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Returns PPM payment packet",
        "operationId": "showPaymentPacket",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the ppmShipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "PPM Payment Packet PDF",
            "schema": {
              "type": "file",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "File name to download"
              }
            }
          },
          "400": {
            "description": "invalid request"
          },
          "401": {
            "description": "request requires user authentication"
          },
          "403": {
            "description": "user is not authorized"
          },
          "404": {
            "description": "ppm not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/ppm-sit": {
      "patch": {
        "description": "Updates a PPM shipment's SIT values\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates a PPM shipment's SIT values",
        "operationId": "updatePPMSIT",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the PPM shipment",
            "name": "ppmShipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PPMShipmentSIT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully finished PPM SIT update",
            "schema": {
              "$ref": "#/definitions/PPMShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets/{proGearWeightTicketId}": {
      "patch": {
        "description": "Updates a PPM shipment's pro-gear weight ticket with new information. Only some of the fields are editable\nbecause some have to be set by the customer, e.g. the description.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates a pro-gear weight ticket",
        "operationId": "updateProGearWeightTicket",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "updateProGearWeightTicket",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProGearWeightTicket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an updated pro-gear weight ticket object",
            "schema": {
              "$ref": "#/definitions/ProGearWeightTicket"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the PPM shipment",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the pro-gear weight ticket",
          "name": "proGearWeightTicketId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/sit_location/{sitLocation}/sit-estimated-cost": {
      "get": {
        "description": "Calculates and returns the SIT estimated cost for the specified PPM shipment.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Get the SIT estimated cost for a PPM shipment",
        "operationId": "getPPMSITEstimatedCost",
        "responses": {
          "200": {
            "description": "Calculates and returns the SIT estimated cost for the specified PPM shipment.",
            "schema": {
              "$ref": "#/definitions/PPMSITEstimatedCost"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the PPM shipment",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "ORIGIN",
            "DESTINATION"
          ],
          "type": "string",
          "format": "string",
          "description": "location of sit",
          "name": "sitLocation",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Date entered into SIT",
          "name": "sitEntryDate",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Date departed SIT",
          "name": "sitDepartureDate",
          "in": "query",
          "required": true
        },
        {
          "minimum": 0,
          "type": "integer",
          "description": "Weight stored in SIT",
          "name": "weightStored",
          "in": "query",
          "required": true
        }
      ]
    },
    "/ppm-shipments/{ppmShipmentId}/weight-ticket/{weightTicketId}": {
      "patch": {
        "description": "Updates a PPM shipment's weight ticket document with new information. Only some of the weight ticket document's\nfields are editable because some have to be set by the customer, e.g. vehicle description.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Updates a weight ticket document",
        "operationId": "updateWeightTicket",
        "parameters": [
          {
            "type": "string",
            "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "updateWeightTicketPayload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateWeightTicket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an updated weight ticket object",
            "schema": {
              "$ref": "#/definitions/WeightTicket"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the PPM shipment",
          "name": "ppmShipmentId",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the weight ticket",
          "name": "weightTicketId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/pws-violations": {
      "get": {
        "description": "Fetch the possible PWS violations for an evaluation report",
        "produces": [
          "application/json"
        ],
        "tags": [
          "pwsViolations"
        ],
        "summary": "Fetch the possible PWS violations for an evaluation report",
        "operationId": "getPWSViolations",
        "responses": {
          "200": {
            "description": "Successfully retrieved the PWS violations",
            "schema": {
              "$ref": "#/definitions/PWSViolations"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/queues/counseling": {
      "get": {
        "description": "An office services counselor user will be assigned a transportation office that will determine which moves are displayed in their queue based on the origin duty location.  GHC moves will show up here onced they have reached the NEEDS SERVICE COUNSELING status after submission from a customer or created on a customer's behalf.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "Gets queued list of all customer moves needing services counseling by GBLOC origin",
        "operationId": "getServicesCounselingQueue",
        "parameters": [
          {
            "type": "integer",
            "description": "requested page number of paginated move results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "maximum number of moves to show on each page of paginated results",
            "name": "perPage",
            "in": "query"
          },
          {
            "enum": [
              "lastName",
              "dodID",
              "emplid",
              "branch",
              "locator",
              "status",
              "requestedMoveDate",
              "submittedAt",
              "originGBLOC",
              "originDutyLocation",
              "destinationDutyLocation",
              "ppmType",
              "closeoutInitiated",
              "closeoutLocation",
              "ppmStatus",
              "counselingOffice"
            ],
            "type": "string",
            "description": "field that results should be sorted by",
            "name": "sort",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "direction of sort order if applied",
            "name": "order",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters by the branch of the move's service member",
            "name": "branch",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters to match the unique move code locator",
            "name": "locator",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters using a prefix match on the service member's last name",
            "name": "lastName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters using a counselingOffice name of the move",
            "name": "counselingOffice",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters to match the unique service member's DoD ID",
            "name": "dodID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters to match the unique service member's EMPLID",
            "name": "emplid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters the requested pickup date of a shipment on the move",
            "name": "requestedMoveDate",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Start of the submitted at date in the user's local time zone converted to UTC",
            "name": "submittedAt",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters the GBLOC of the service member's origin duty location",
            "name": "originGBLOC",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "filters the name of the origin duty location on the orders",
            "name": "originDutyLocation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters the name of the destination duty location on the orders",
            "name": "destinationDutyLocation",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "NEEDS SERVICE COUNSELING",
                "SERVICE COUNSELING COMPLETED"
              ],
              "type": "string"
            },
            "description": "filters the status of the move",
            "name": "status",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Only used for Services Counseling queue. If true, show PPM moves that are ready for closeout. Otherwise, show all other moves.",
            "name": "needsPPMCloseout",
            "in": "query"
          },
          {
            "enum": [
              "FULL",
              "PARTIAL"
            ],
            "type": "string",
            "description": "filters PPM type",
            "name": "ppmType",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Latest date that closeout was initiated on a PPM on the move",
            "name": "closeoutInitiated",
            "in": "query"
          },
          {
            "type": "string",
            "description": "closeout location",
            "name": "closeoutLocation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "order type",
            "name": "orderType",
            "in": "query"
          },
          {
            "enum": [
              "WAITING_ON_CUSTOMER",
              "NEEDS_CLOSEOUT"
            ],
            "type": "string",
            "description": "filters the status of the PPM shipment",
            "name": "ppmStatus",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Used to return a queue for a GBLOC other than the default of the current user. Requires the HQ role. The parameter is ignored if the requesting user does not have the necessary role.\n",
            "name": "viewAsGBLOC",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/QueueMovesResult"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/queues/counseling/origin-list": {
      "get": {
        "description": "An office services counselor user will be assigned a transportation office that will determine which moves are displayed in their queue based on the origin duty location. This pulls the availalble origin duty locations.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "Gets queued list of all moves origin locations in the counselors queue",
        "operationId": "getServicesCounselingOriginList",
        "parameters": [
          {
            "type": "boolean",
            "description": "Only used for Services Counseling queue. If true, show PPM moves origin locations that are ready for closeout. Otherwise, show all other moves origin locations.",
            "name": "needsPPMCloseout",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/Locations"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/queues/moves": {
      "get": {
        "description": "An office TOO user will be assigned a transportation office that will determine which moves are displayed in their queue based on the origin duty location.  GHC moves will show up here onced they have reached the submitted status sent by the customer and have move task orders, shipments, and service items to approve.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "Gets queued list of all customer moves by GBLOC origin",
        "operationId": "getMovesQueue",
        "parameters": [
          {
            "type": "integer",
            "description": "requested page of results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "results per page",
            "name": "perPage",
            "in": "query"
          },
          {
            "enum": [
              "lastName",
              "dodID",
              "emplid",
              "branch",
              "locator",
              "status",
              "originDutyLocation",
              "destinationDutyLocation",
              "requestedMoveDate",
              "appearedInTooAt"
            ],
            "type": "string",
            "description": "field that results should be sorted by",
            "name": "sort",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "direction of sort order if applied",
            "name": "order",
            "in": "query"
          },
          {
            "type": "string",
            "name": "branch",
            "in": "query"
          },
          {
            "type": "string",
            "name": "locator",
            "in": "query"
          },
          {
            "type": "string",
            "name": "lastName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "dodID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "emplid",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "originDutyLocation",
            "in": "query"
          },
          {
            "type": "string",
            "name": "destinationDutyLocation",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "name": "appearedInTooAt",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filters the requested pickup date of a shipment on the move",
            "name": "requestedMoveDate",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "SUBMITTED",
                "SERVICE COUNSELING COMPLETED",
                "APPROVALS REQUESTED"
              ],
              "type": "string"
            },
            "description": "Filtering for the status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "order type",
            "name": "orderType",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Used to return a queue for a GBLOC other than the default of the current user. Requires the HQ role. The parameter is ignored if the requesting user does not have the necessary role.\n",
            "name": "viewAsGBLOC",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/QueueMovesResult"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/queues/payment-requests": {
      "get": {
        "description": "An office TIO user will be assigned a transportation office that will determine which payment requests are displayed in their queue based on the origin duty location.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "Gets queued list of all payment requests by GBLOC origin",
        "operationId": "getPaymentRequestsQueue",
        "parameters": [
          {
            "enum": [
              "lastName",
              "locator",
              "submittedAt",
              "branch",
              "status",
              "dodID",
              "emplid",
              "age",
              "originDutyLocation"
            ],
            "type": "string",
            "description": "field that results should be sorted by",
            "name": "sort",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "direction of sort order if applied",
            "name": "order",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "requested page of results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "number of records to include per page",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Start of the submitted at date in the user's local time zone converted to UTC",
            "name": "submittedAt",
            "in": "query"
          },
          {
            "type": "string",
            "name": "branch",
            "in": "query"
          },
          {
            "type": "string",
            "name": "locator",
            "in": "query"
          },
          {
            "type": "string",
            "name": "lastName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "dodID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "emplid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "destinationDutyLocation",
            "in": "query"
          },
          {
            "type": "string",
            "name": "originDutyLocation",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "PENDING",
                "REVIEWED",
                "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
                "PAID",
                "DEPRECATED",
                "EDI_ERROR"
              ],
              "type": "string"
            },
            "description": "Filtering for the status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "order type",
            "name": "orderType",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Used to return a queue for a GBLOC other than the default of the current user. Requires the HQ role. The parameter is ignored if the requesting user does not have the necessary role.\n",
            "name": "viewAsGBLOC",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/QueuePaymentRequestsResult"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/queues/prime-moves": {
      "get": {
        "description": "Gets all moves that have been reviewed and approved by the TOO. The ` + "`" + `since` + "`" + ` parameter can be used to filter this\nlist down to only the moves that have been updated since the provided timestamp. A move will be considered\nupdated if the ` + "`" + `updatedAt` + "`" + ` timestamp on the move or on its orders, shipments, service items, or payment\nrequests, is later than the provided date and time.\n\n**WIP**: Include what causes moves to leave this list. Currently, once the ` + "`" + `availableToPrimeAt` + "`" + ` timestamp has\nbeen set, that move will always appear in this list.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "getPrimeMovesQueue",
        "operationId": "listPrimeMoves",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Only return moves updated since this time. Formatted like \"2021-07-23T18:30:47.116Z\"",
            "name": "since",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "requested page of results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "results per page",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "moveCode",
            "in": "query"
          },
          {
            "type": "string",
            "description": "order type",
            "name": "orderType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moves. A successful fetch might still return zero moves.",
            "schema": {
              "$ref": "#/definitions/ListPrimeMovesResult"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/report-violations/{reportID}": {
      "get": {
        "description": "Fetch the report violations for an evaluation report",
        "produces": [
          "application/json"
        ],
        "tags": [
          "reportViolations"
        ],
        "summary": "Fetch the report violations for an evaluation report",
        "operationId": "getReportViolationsByReportID",
        "responses": {
          "200": {
            "description": "Successfully retrieved the report violations",
            "schema": {
              "$ref": "#/definitions/ReportViolations"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Associate violations with an evaluation report. This will overwrite any existing report-violations associations for the report and replace them with the newly provided ones.  An empty array will remove all violation associations for a given report.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "reportViolations"
        ],
        "summary": "Associate violations with an evaluation report",
        "operationId": "associateReportViolations",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AssociateReportViolations"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully saved the report violations"
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "create.reportViolation"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "the evaluation report ID that has associated violations",
          "name": "reportID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service-item/{mtoServiceItemID}/entry-date-update": {
      "patch": {
        "description": "Locates the service item in the database and updates the SIT entry date for the selected service item and returns the service item",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Updates a service item's SIT entry date by ID",
        "operationId": "updateServiceItemSitEntryDate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceItemSitEntryDate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated SIT entry date",
            "schema": {
              "$ref": "#/definitions/MTOServiceItemSingle"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the service item",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}": {
      "get": {
        "description": "fetches a shipment by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "fetches a shipment by ID",
        "operationId": "getShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipment to be fetched",
            "name": "shipmentID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the shipment",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Soft deletes a shipment by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "Soft deletes a shipment by ID",
        "operationId": "deleteShipment",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipment to be deleted",
            "name": "shipmentID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully soft deleted the shipment"
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shipments/{shipmentID}/approve": {
      "post": {
        "description": "Approves a shipment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "Approves a shipment",
        "operationId": "approveShipment",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved the shipment",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.shipment"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/approve-diversion": {
      "post": {
        "description": "Approves a shipment diversion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "Approves a shipment diversion",
        "operationId": "approveShipmentDiversion",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved the shipment diversion",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.shipment"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/ppm-documents": {
      "get": {
        "description": "Retrieves all of the documents and associated uploads for each ppm document type connected to a PPM shipment. This\nexcludes any deleted PPM documents.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ppm"
        ],
        "summary": "Gets all the PPM documents for a PPM shipment",
        "operationId": "getPPMDocuments",
        "responses": {
          "200": {
            "description": "All PPM documents and associated uploads for the specified PPM shipment.",
            "schema": {
              "$ref": "#/definitions/PPMDocuments"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/reject": {
      "post": {
        "description": "rejects a shipment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "rejects a shipment",
        "operationId": "rejectShipment",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectShipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully rejected the shipment",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/request-cancellation": {
      "post": {
        "description": "Requests a shipment cancellation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "Requests a shipment cancellation",
        "operationId": "requestShipmentCancellation",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully requested the shipment cancellation",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "create.shipmentCancellation"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/request-diversion": {
      "post": {
        "description": "Requests a shipment diversion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "Requests a shipment diversion",
        "operationId": "requestShipmentDiversion",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestDiversion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully requested the shipment diversion",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "create.shipmentDiversionRequest"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/request-reweigh": {
      "post": {
        "description": "Requests a shipment reweigh",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment",
          "reweigh"
        ],
        "summary": "Requests a shipment reweigh",
        "operationId": "requestShipmentReweigh",
        "responses": {
          "200": {
            "description": "Successfully requested a reweigh of the shipment",
            "schema": {
              "$ref": "#/definitions/Reweigh"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "create.reweighRequest"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/review-shipment-address-update": {
      "patch": {
        "description": "This endpoint is used to approve a address update request. Office remarks are required. Approving the address update will update the Destination Final Address of the associated service item",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment"
        ],
        "summary": "Allows TOO to review a shipment address update",
        "operationId": "reviewShipmentAddressUpdate",
        "parameters": [
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "officeRemarks",
                "status"
              ],
              "properties": {
                "officeRemarks": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "REJECTED",
                    "APPROVED"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully requested a shipment address update",
            "schema": {
              "$ref": "#/definitions/ShipmentAddressUpdate"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/sit-extensions": {
      "post": {
        "description": "TOO can creates an already-approved SIT Duration Update on behalf of a customer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment",
          "sitExtension"
        ],
        "summary": "Create an approved SIT Duration Update",
        "operationId": "createApprovedSITDurationUpdate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipment",
            "name": "shipmentID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApprovedSITDurationUpdate"
            }
          },
          {
            "type": "string",
            "description": "We want the shipment's eTag rather than the SIT Duration Update eTag as the SIT Duration Update is always associated with a shipment",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a SIT Extension.",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "create.SITExtension"
        ]
      }
    },
    "/shipments/{shipmentID}/sit-extensions/{sitExtensionID}/approve": {
      "patch": {
        "description": "Approves a SIT extension",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment",
          "sitExtension"
        ],
        "summary": "Approves a SIT extension",
        "operationId": "approveSITExtension",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveSITExtension"
            }
          },
          {
            "type": "string",
            "description": "We want the shipment's eTag rather than the SIT extension eTag as the SIT extension is always associated with a shipment",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved a SIT extension",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.SITExtension"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the SIT extension",
          "name": "sitExtensionID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/sit-extensions/{sitExtensionID}/deny": {
      "patch": {
        "description": "Denies a SIT extension",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment",
          "sitExtension"
        ],
        "summary": "Denies a SIT extension",
        "operationId": "denySITExtension",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DenySITExtension"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully denied a SIT extension",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.SITExtension"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the SIT extension",
          "name": "sitExtensionID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/shipments/{shipmentID}/sit-service-item/convert-to-customer-expense": {
      "patch": {
        "description": "Converts a SIT to customer expense",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "shipment",
          "mtoServiceItem"
        ],
        "summary": "Converts a SIT to customer expense",
        "operationId": "updateSITServiceItemCustomerExpense",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSITServiceItemCustomerExpense"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully converted to customer expense",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The payload was unprocessable.",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-permissions": [
          "update.MTOServiceItem"
        ]
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/tac/valid": {
      "get": {
        "description": "Returns a boolean based on whether a tac value is valid or not",
        "tags": [
          "tac",
          "order"
        ],
        "summary": "Validation of a TAC value",
        "operationId": "tacValidation",
        "parameters": [
          {
            "type": "string",
            "description": "The tac value to validate",
            "name": "tac",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved validation status",
            "schema": {
              "$ref": "#/definitions/TacValid"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transportation-offices": {
      "get": {
        "description": "Returns the transportation offices matching the search query that is enabled for PPM closeout",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transportationOffice"
        ],
        "summary": "Returns the transportation offices matching the search query that is enabled for PPM closeout",
        "operationId": "getTransportationOffices",
        "parameters": [
          {
            "minLength": 2,
            "type": "string",
            "description": "Search string for transportation offices",
            "name": "search",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transportation offices",
            "schema": {
              "$ref": "#/definitions/TransportationOffices"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transportation-offices/gblocs": {
      "get": {
        "description": "Returns a list of distinct GBLOCs that exist in the transportation offices table",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transportationOffice"
        ],
        "summary": "Returns a list of distinct GBLOCs that exist in the transportation offices table",
        "operationId": "getTransportationOfficesGBLOCs",
        "responses": {
          "200": {
            "description": "Successfully retrieved transportation offices",
            "schema": {
              "$ref": "#/definitions/GBLOCs"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/uploads": {
      "post": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF. Currently, office application uploads are only for Services Counselors to upload files for orders, but this may be expanded in the future.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "uploads"
        ],
        "summary": "Create a new upload",
        "operationId": "createUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to add an upload to",
            "name": "documentId",
            "in": "query"
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/uploads/get/": {
      "get": {
        "description": "Gets an upload",
        "produces": [
          "application/json"
        ],
        "tags": [
          "uploads"
        ],
        "summary": "Gets an upload by ID",
        "operationId": "getUpload",
        "responses": {
          "200": {
            "description": "Successfully retrieved upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/uploads/{uploadID}": {
      "delete": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF.",
        "tags": [
          "uploads"
        ],
        "summary": "Deletes an upload",
        "operationId": "deleteUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the upload to be deleted",
            "name": "uploadID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the order that the upload belongs to",
            "name": "orderID",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestResponsePayload"
            }
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    },
    "/uploads/{uploadID}/update": {
      "patch": {
        "description": "Uploads represent a single digital file, such as a JPEG or PDF. The rotation is relevant to how it is displayed on the page.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "uploads"
        ],
        "summary": "Update an existing upload. This is only needed currently for updating the image rotation.",
        "operationId": "updateUpload",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the upload to be updated",
            "name": "uploadID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "properties": {
                "rotation": {
                  "description": "The rotation of the image",
                  "type": "integer",
                  "maximum": 3,
                  "minimum": 0
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "updated upload",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "400": {
            "description": "invalid request"
          },
          "403": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          },
          "413": {
            "description": "payload is too large"
          },
          "500": {
            "description": "server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "A postal address",
      "type": "object",
      "required": [
        "streetAddress1",
        "city",
        "state",
        "postalCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "county": {
          "type": "string",
          "title": "County",
          "x-nullable": true,
          "example": "LOS ANGELES"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isOconus": {
          "type": "boolean",
          "title": "isOconus",
          "x-nullable": true,
          "example": false
        },
        "postalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "streetAddress1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "streetAddress2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "streetAddress3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "Affiliation": {
      "description": "Military branch of service",
      "type": "string",
      "title": "Branch of service",
      "enum": [
        "ARMY",
        "NAVY",
        "MARINES",
        "AIR_FORCE",
        "COAST_GUARD",
        "SPACE_FORCE",
        "NAVY_AND_MARINES",
        "AIR_AND_SPACE_FORCE",
        "OTHER"
      ],
      "x-display-value": {
        "AIR_FORCE": "Air Force",
        "ARMY": "Army",
        "COAST_GUARD": "Coast Guard",
        "MARINES": "Marine Corps",
        "NAVY": "Navy",
        "OTHER": "OTHER",
        "SPACE_FORCE": "Space Force"
      },
      "x-nullable": true
    },
    "ApplicationParameters": {
      "type": "object",
      "properties": {
        "parameterName": {
          "type": "string",
          "format": "string",
          "x-nullable": true
        },
        "parameterValue": {
          "type": "string",
          "format": "string",
          "x-nullable": true
        },
        "validationCode": {
          "type": "string",
          "format": "string",
          "x-nullable": true
        }
      }
    },
    "ApproveSITExtension": {
      "required": [
        "approvedDays"
      ],
      "properties": {
        "approvedDays": {
          "description": "Number of days approved for SIT extension",
          "type": "integer",
          "minimum": 1,
          "example": 21
        },
        "officeRemarks": {
          "description": "Remarks from TOO about SIT approval",
          "type": "string",
          "x-nullable": true,
          "example": "Approved for three weeks rather than requested 45 days"
        },
        "requestReason": {
          "description": "Reason from service counselor-provided picklist for SIT Duration Update",
          "type": "string",
          "enum": [
            "SERIOUS_ILLNESS_MEMBER",
            "SERIOUS_ILLNESS_DEPENDENT",
            "IMPENDING_ASSIGNEMENT",
            "DIRECTED_TEMPORARY_DUTY",
            "NONAVAILABILITY_OF_CIVILIAN_HOUSING",
            "AWAITING_COMPLETION_OF_RESIDENCE",
            "OTHER"
          ],
          "example": "AWAITING_COMPLETION_OF_RESIDENCE"
        }
      }
    },
    "AssignOfficeUserBody": {
      "type": "object",
      "required": [
        "officeUserId",
        "roleType"
      ],
      "properties": {
        "officeUserId": {
          "type": "string",
          "format": "uuid"
        },
        "roleType": {
          "type": "string"
        }
      }
    },
    "AssignedOfficeUser": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "AssociateReportViolations": {
      "description": "A list of PWS violation string ids to associate with an evaluation report",
      "type": "object",
      "properties": {
        "violations": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "AvailableOfficeUser": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "hasSafetyPrivilege": {
          "type": "boolean"
        },
        "lastName": {
          "type": "string"
        },
        "officeUserId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "AvailableOfficeUsers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AvailableOfficeUser"
      }
    },
    "BackupContact": {
      "type": "object",
      "required": [
        "name",
        "email",
        "phone"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "example": "backupContact@mail.com"
        },
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$"
        }
      }
    },
    "BoatShipment": {
      "required": [
        "id",
        "shipmentId",
        "createdAt",
        "type",
        "year",
        "make",
        "model",
        "lengthInInches",
        "widthInInches",
        "heightInInches",
        "hasTrailer",
        "eTag"
      ],
      "properties": {
        "createdAt": {
          "description": "Timestamp of when the Boat Shipment was initially created (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "hasTrailer": {
          "description": "Does the boat have a trailer",
          "type": "boolean"
        },
        "heightInInches": {
          "description": "Height of the Boat in inches",
          "type": "integer"
        },
        "id": {
          "description": "Primary auto-generated unique identifier of the Boat shipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "isRoadworthy": {
          "description": "Is the trailer roadworthy",
          "type": "boolean",
          "x-nullable": true
        },
        "lengthInInches": {
          "description": "Length of the Boat in inches",
          "type": "integer"
        },
        "make": {
          "description": "Make of the Boat",
          "type": "string"
        },
        "model": {
          "description": "Model of the Boat",
          "type": "string"
        },
        "shipmentId": {
          "description": "The id of the parent MTOShipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "type": {
          "type": "string",
          "enum": [
            "HAUL_AWAY",
            "TOW_AWAY"
          ]
        },
        "updatedAt": {
          "description": "Timestamp of when a property of this object was last updated (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "widthInInches": {
          "description": "Width of the Boat in inches",
          "type": "integer"
        },
        "year": {
          "description": "Year of the Boat",
          "type": "integer"
        }
      },
      "x-nullable": true
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "Contractor": {
      "properties": {
        "contractNumber": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "CounselingUpdateAllowancePayload": {
      "type": "object",
      "properties": {
        "agency": {
          "$ref": "#/definitions/Affiliation"
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "gunSafe": {
          "description": "True if user is entitled to move a gun safe (up to 500 lbs) as part of their move without it being charged against their weight allowance.",
          "type": "boolean",
          "x-nullable": true
        },
        "organizationalClothingAndIndividualEquipment": {
          "description": "only for Army",
          "type": "boolean",
          "x-nullable": true
        },
        "proGearWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "maximum": 2000,
          "minimum": 0,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "proGearWeightSpouse": {
          "description": "unit is in lbs",
          "type": "integer",
          "maximum": 500,
          "minimum": 0,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "requiredMedicalEquipmentWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "minimum": 0,
          "x-formatting": "weight",
          "example": 2000
        },
        "storageInTransit": {
          "description": "the number of storage in transit days that the customer is entitled to for a given shipment on their move",
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "CounselingUpdateOrderPayload": {
      "type": "object",
      "required": [
        "issueDate",
        "reportByDate",
        "ordersType",
        "originDutyLocationId",
        "newDutyLocationId"
      ],
      "properties": {
        "departmentIndicator": {
          "x-nullable": true,
          "$ref": "#/definitions/DeptIndicator"
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "issueDate": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Orders date",
          "example": "2018-04-26"
        },
        "newDutyLocationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ntsSac": {
          "title": "NTS SAC",
          "$ref": "#/definitions/NullableString",
          "example": "N002214CSW32Y9"
        },
        "ntsTac": {
          "title": "NTS TAC",
          "maxLength": 4,
          "minLength": 4,
          "$ref": "#/definitions/NullableString",
          "example": "F8J1"
        },
        "ordersNumber": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "ordersType": {
          "$ref": "#/definitions/OrdersType"
        },
        "ordersTypeDetail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyLocationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reportByDate": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report-by date",
          "example": "2018-04-26"
        },
        "sac": {
          "title": "HHG SAC",
          "$ref": "#/definitions/NullableString",
          "example": "N002214CSW32Y9"
        },
        "tac": {
          "type": "string",
          "title": "HHG TAC",
          "maxLength": 4,
          "minLength": 4,
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "CreateApprovedSITDurationUpdate": {
      "required": [
        "requestReason",
        "approvedDays"
      ],
      "properties": {
        "approvedDays": {
          "description": "Number of days approved for SIT extension. This will match requested days saved to the SIT extension model.",
          "type": "integer",
          "example": 21
        },
        "officeRemarks": {
          "description": "Remarks from TOO about SIT Duration Update creation",
          "type": "string",
          "x-nullable": true,
          "example": "Customer needs additional storage time as their new place of residence is not yet ready"
        },
        "requestReason": {
          "description": "Reason from service counselor-provided picklist for SIT Duration Update",
          "type": "string",
          "enum": [
            "SERIOUS_ILLNESS_MEMBER",
            "SERIOUS_ILLNESS_DEPENDENT",
            "IMPENDING_ASSIGNEMENT",
            "DIRECTED_TEMPORARY_DUTY",
            "NONAVAILABILITY_OF_CIVILIAN_HOUSING",
            "AWAITING_COMPLETION_OF_RESIDENCE",
            "OTHER"
          ],
          "example": "AWAITING_COMPLETION_OF_RESIDENCE"
        }
      }
    },
    "CreateBoatShipment": {
      "description": "Boat shipment information for the move.",
      "required": [
        "type",
        "year",
        "make",
        "model",
        "lengthInInches",
        "widthInInches",
        "heightInInches",
        "hasTrailer"
      ],
      "properties": {
        "hasTrailer": {
          "description": "Does the boat have a trailer",
          "type": "boolean"
        },
        "heightInInches": {
          "description": "Height of the Boat in inches",
          "type": "integer"
        },
        "isRoadworthy": {
          "description": "Is the trailer roadworthy",
          "type": "boolean",
          "x-nullable": true
        },
        "lengthInInches": {
          "description": "Length of the Boat in inches",
          "type": "integer"
        },
        "make": {
          "description": "Make of the Boat",
          "type": "string"
        },
        "model": {
          "description": "Model of the Boat",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "HAUL_AWAY",
            "TOW_AWAY"
          ]
        },
        "widthInInches": {
          "description": "Width of the Boat in inches",
          "type": "integer"
        },
        "year": {
          "description": "Year of the Boat",
          "type": "integer"
        }
      }
    },
    "CreateCustomerPayload": {
      "type": "object",
      "properties": {
        "affiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "backupContact": {
          "$ref": "#/definitions/BackupContact"
        },
        "backupMailingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "cacUser": {
          "type": "boolean"
        },
        "createOktaAccount": {
          "type": "boolean"
        },
        "edipi": {
          "type": "string",
          "maxLength": 10,
          "x-nullable": false,
          "example": "1234567890"
        },
        "emailIsPreferred": {
          "type": "boolean"
        },
        "emplid": {
          "type": "string",
          "maxLength": 7,
          "x-nullable": true,
          "example": "9485155"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "middleName": {
          "type": "string",
          "x-nullable": true,
          "example": "David"
        },
        "personalEmail": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "example": "personalEmail@email.com"
        },
        "phoneIsPreferred": {
          "type": "boolean"
        },
        "residentialAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryTelephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "suffix": {
          "type": "string",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        }
      }
    },
    "CreateCustomerSupportRemark": {
      "description": "A text remark written by an customer support user that is associated with a specific move.",
      "type": "object",
      "required": [
        "content",
        "officeUserID"
      ],
      "properties": {
        "content": {
          "type": "string",
          "example": "This is a remark about a move."
        },
        "officeUserID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        }
      }
    },
    "CreateEvaluationReport": {
      "description": "Minimal set of info needed to create a shipment evaluation report, which is just a shipment ID.",
      "type": "object",
      "properties": {
        "shipmentID": {
          "description": "The shipment ID of the shipment to be evaluated in the report",
          "type": "string",
          "format": "uuid",
          "example": "01b9671e-b268-4906-967b-ba661a1d3933"
        }
      }
    },
    "CreateMTOShipment": {
      "type": "object",
      "required": [
        "moveTaskOrderID",
        "shipmentType"
      ],
      "properties": {
        "agents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "boatShipment": {
          "$ref": "#/definitions/CreateBoatShipment"
        },
        "counselorRemarks": {
          "description": "The counselor can use the counselor remarks field to inform the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\nCounselors enters this information when creating or editing an MTO Shipment. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "customerRemarks": {
          "description": "The customer can use the customer remarks field to inform the services counselor and the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\nCustomer enters this information during onboarding. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "description": "Where the movers should deliver this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "destinationType": {
          "$ref": "#/definitions/DestinationType"
        },
        "hasSecondaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "mobileHomeShipment": {
          "$ref": "#/definitions/CreateMobileHomeShipment"
        },
        "moveTaskOrderID": {
          "description": "The ID of the move this new shipment is for.",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoServiceItems": {
          "$ref": "#/definitions/MTOServiceItems"
        },
        "ntsRecordedWeight": {
          "description": "The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "pickupAddress": {
          "description": "The address where the movers should pick up this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "ppmShipment": {
          "$ref": "#/definitions/CreatePPMShipment"
        },
        "requestedDeliveryDate": {
          "description": "The customer's preferred delivery date.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "requestedPickupDate": {
          "description": "The customer's preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sacType": {
          "allOf": [
            {
              "$ref": "#/definitions/LOAType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "secondaryDeliveryAddress": {
          "description": "Where the movers should deliver this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "description": "The address where the movers should pick up this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "serviceOrderNumber": {
          "type": "string",
          "x-nullable": true
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "storageFacility": {
          "x-nullable": true,
          "$ref": "#/definitions/StorageFacility"
        },
        "tacType": {
          "allOf": [
            {
              "$ref": "#/definitions/LOAType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "tertiaryDeliveryAddress": {
          "description": "Where the movers should deliver this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "tertiaryPickupAddress": {
          "description": "The address where the movers should pick up this shipment.",
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "usesExternalVendor": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        }
      }
    },
    "CreateMobileHomeShipment": {
      "description": "A mobile home shipment that the prime moves for a service member.",
      "required": [
        "make",
        "model",
        "year",
        "lengthInInches",
        "heightInInches",
        "widthInInches"
      ],
      "properties": {
        "heightInInches": {
          "description": "Height of the Mobile Home in inches",
          "type": "integer"
        },
        "lengthInInches": {
          "description": "Length of the Mobile Home in inches",
          "type": "integer"
        },
        "make": {
          "description": "Make of the Mobile Home",
          "type": "string"
        },
        "model": {
          "description": "Model of the Mobile Home",
          "type": "string"
        },
        "widthInInches": {
          "description": "Width of the Mobile Home in inches",
          "type": "integer"
        },
        "year": {
          "description": "Year of the Mobile Home",
          "type": "integer"
        }
      }
    },
    "CreateOrders": {
      "type": "object",
      "required": [
        "serviceMemberId",
        "issueDate",
        "reportByDate",
        "ordersType",
        "hasDependents",
        "spouseHasProGear",
        "newDutyLocationId"
      ],
      "properties": {
        "departmentIndicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "hasDependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?"
        },
        "issueDate": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Orders date"
        },
        "newDutyLocationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ordersNumber": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "ordersType": {
          "$ref": "#/definitions/OrdersType"
        },
        "ordersTypeDetail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyLocationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reportByDate": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report-by date"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "serviceMemberId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "spouseHasProGear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "CreatePPMShipment": {
      "description": "A personally procured move is a type of shipment that a service members moves themselves.",
      "required": [
        "expectedDepartureDate",
        "pickupAddress",
        "destinationAddress",
        "sitExpected",
        "estimatedWeight",
        "hasProGear"
      ],
      "properties": {
        "destinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "estimatedWeight": {
          "type": "integer",
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to move.\n",
          "type": "string",
          "format": "date"
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear.\n",
          "type": "boolean"
        },
        "hasSecondaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "pickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "proGearWeight": {
          "type": "integer",
          "x-nullable": true
        },
        "secondaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "sitEstimatedDepartureDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedEntryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "sitExpected": {
          "type": "boolean"
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "spouseProGearWeight": {
          "type": "integer",
          "x-nullable": true
        },
        "tertiaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "tertiaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        }
      }
    },
    "CreatedCustomer": {
      "type": "object",
      "properties": {
        "affiliation": {
          "type": "string",
          "title": "Branch of service customer is affilated with"
        },
        "backupAddress": {
          "$ref": "#/definitions/Address"
        },
        "backupContact": {
          "$ref": "#/definitions/BackupContact"
        },
        "cacValidated": {
          "type": "boolean"
        },
        "edipi": {
          "type": "string",
          "x-nullable": true
        },
        "emailIsPreferred": {
          "type": "boolean"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "middleName": {
          "type": "string",
          "x-nullable": true,
          "example": "David"
        },
        "oktaEmail": {
          "type": "string"
        },
        "oktaID": {
          "type": "string"
        },
        "personalEmail": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "phoneIsPreferred": {
          "type": "boolean"
        },
        "residentialAddress": {
          "$ref": "#/definitions/Address"
        },
        "secondaryTelephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "suffix": {
          "type": "string",
          "x-nullable": true,
          "example": "Jr."
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "agency": {
          "type": "string",
          "title": "Agency customer is affilated with"
        },
        "backupAddress": {
          "$ref": "#/definitions/Address"
        },
        "backup_contact": {
          "$ref": "#/definitions/BackupContact"
        },
        "cacValidated": {
          "type": "boolean",
          "x-nullable": true
        },
        "current_address": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string"
        },
        "edipi": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "emailIsPreferred": {
          "type": "boolean"
        },
        "emplid": {
          "type": "string",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "middle_name": {
          "type": "string",
          "x-nullable": true,
          "example": "David"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "phoneIsPreferred": {
          "type": "boolean"
        },
        "secondaryTelephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$|^$",
          "x-nullable": true
        },
        "suffix": {
          "type": "string",
          "x-nullable": true,
          "example": "Jr."
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "CustomerContactType": {
      "description": "Describes a customer contact type for a MTOServiceItem of type domestic destination SIT.",
      "type": "string",
      "enum": [
        "FIRST",
        "SECOND"
      ]
    },
    "CustomerSupportRemark": {
      "description": "A text remark written by an office user that is associated with a specific move.",
      "type": "object",
      "required": [
        "id",
        "moveID",
        "officeUserID",
        "content"
      ],
      "properties": {
        "content": {
          "type": "string",
          "example": "This is a remark about a move."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "officeUserEmail": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "readOnly": true
        },
        "officeUserFirstName": {
          "type": "string",
          "readOnly": true,
          "example": "Grace"
        },
        "officeUserID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "officeUserLastName": {
          "type": "string",
          "readOnly": true,
          "example": "Griffin"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "CustomerSupportRemarks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CustomerSupportRemark"
      }
    },
    "DenySITExtension": {
      "required": [
        "officeRemarks",
        "convertToCustomerExpense"
      ],
      "properties": {
        "convertToCustomerExpense": {
          "description": "Whether or not to convert to members expense once SIT extension is denied.",
          "type": "boolean",
          "example": false
        },
        "officeRemarks": {
          "description": "Remarks from TOO about SIT denial",
          "type": "string",
          "x-nullable": true,
          "example": "Denied this extension as it does not match the criteria"
        }
      }
    },
    "DeptIndicator": {
      "type": "string",
      "title": "Dept. indicator",
      "enum": [
        "NAVY_AND_MARINES",
        "ARMY",
        "ARMY_CORPS_OF_ENGINEERS",
        "AIR_AND_SPACE_FORCE",
        "COAST_GUARD",
        "OFFICE_OF_SECRETARY_OF_DEFENSE"
      ],
      "x-display-value": {
        "AIR_AND_SPACE_FORCE": "57 Air Force and Space Force",
        "ARMY": "21 Army",
        "ARMY_CORPS_OF_ENGINEERS": "96 Army Corps of Engineers",
        "COAST_GUARD": "70 Coast Guard",
        "NAVY_AND_MARINES": "17 Navy and Marine Corps",
        "OFFICE_OF_SECRETARY_OF_DEFENSE": "97 Office of the Secretary of Defense"
      },
      "x-nullable": true
    },
    "DestinationType": {
      "type": "string",
      "title": "Destination Type",
      "enum": [
        "HOME_OF_RECORD",
        "HOME_OF_SELECTION",
        "PLACE_ENTERED_ACTIVE_DUTY",
        "OTHER_THAN_AUTHORIZED"
      ],
      "x-nullable": true,
      "example": "OTHER_THAN_AUTHORIZED"
    },
    "DimensionType": {
      "description": "Describes a dimension type for a MTOServiceItemDimension.",
      "type": "string",
      "enum": [
        "ITEM",
        "CRATE"
      ]
    },
    "Document": {
      "type": "object",
      "required": [
        "id",
        "service_member_id",
        "uploads"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "DutyLocation": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "address_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        }
      }
    },
    "Entitlements": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "eTag": {
          "type": "string"
        },
        "gunSafe": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "571008b1-b0de-454d-b843-d71be9f02c04"
        },
        "nonTemporaryStorage": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "organizationalClothingAndIndividualEquipment": {
          "type": "boolean",
          "example": true
        },
        "privatelyOwnedVehicle": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "proGearWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 2000
        },
        "proGearWeightSpouse": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "requiredMedicalEquipmentWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "storageInTransit": {
          "type": "integer",
          "x-nullable": true,
          "example": 90
        },
        "totalDependents": {
          "type": "integer",
          "example": 2
        },
        "totalWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "EvaluationReport": {
      "description": "An evaluation report",
      "type": "object",
      "properties": {
        "ReportViolations": {
          "x-nullable": true,
          "$ref": "#/definitions/ReportViolations"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string"
        },
        "evalEnd": {
          "type": "string",
          "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
          "x-nullable": true,
          "example": "18:00"
        },
        "evalStart": {
          "type": "string",
          "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
          "x-nullable": true,
          "example": "15:00"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "inspectionDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "inspectionType": {
          "x-nullable": true,
          "$ref": "#/definitions/EvaluationReportInspectionType"
        },
        "location": {
          "x-nullable": true,
          "$ref": "#/definitions/EvaluationReportLocation"
        },
        "locationDescription": {
          "type": "string",
          "x-nullable": true,
          "example": "Route 66 at crash inspection site 3"
        },
        "moveID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveReferenceID": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true
        },
        "observedClaimsResponseDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "observedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "observedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "observedPickupSpreadEndDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "observedPickupSpreadStartDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "observedShipmentDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "observedShipmentPhysicalPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "officeUser": {
          "$ref": "#/definitions/EvaluationReportOfficeUser"
        },
        "remarks": {
          "type": "string",
          "x-nullable": true
        },
        "seriousIncident": {
          "type": "boolean",
          "x-nullable": true
        },
        "seriousIncidentDesc": {
          "type": "string",
          "x-nullable": true
        },
        "shipmentID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "timeDepart": {
          "type": "string",
          "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
          "x-nullable": true,
          "example": "14:30"
        },
        "type": {
          "$ref": "#/definitions/EvaluationReportType"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "violationsObserved": {
          "type": "boolean",
          "x-nullable": true
        }
      }
    },
    "EvaluationReportInspectionType": {
      "type": "string",
      "enum": [
        "DATA_REVIEW",
        "PHYSICAL",
        "VIRTUAL"
      ],
      "x-nullable": true
    },
    "EvaluationReportList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/EvaluationReport"
      }
    },
    "EvaluationReportLocation": {
      "type": "string",
      "enum": [
        "ORIGIN",
        "DESTINATION",
        "OTHER"
      ],
      "x-nullable": true
    },
    "EvaluationReportOfficeUser": {
      "description": "The authoring office user for an evaluation report",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$"
        }
      },
      "readOnly": true
    },
    "EvaluationReportType": {
      "type": "string",
      "enum": [
        "SHIPMENT",
        "COUNSELING"
      ]
    },
    "FetchLineOfAccountingPayload": {
      "type": "object",
      "properties": {
        "effectiveDate": {
          "description": "The effective date for the Line Of Accounting (LOA) being fetched. Eg, the orders issue date or the Non-Temporary Storage (NTS) Move Task Order (MTO) approval date. Effective date is used to find \"Active\" TGET data by searching for the TACs and LOAs with begin and end dates containing this date. The 'Effective Date' is the date that can be either the orders issued date (For HHG shipments), MTO approval date (For NTS shipments), or even the current date for NTS shipments with no approval yet (Just providing a preview to the office users per customer request).\n",
          "type": "string",
          "format": "date",
          "example": "2023-01-01"
        },
        "serviceMemberAffiliation": {
          "$ref": "#/definitions/Affiliation"
        },
        "tacCode": {
          "type": "string",
          "maxLength": 4,
          "minLength": 4,
          "example": "F8J1"
        }
      }
    },
    "GBLOC": {
      "type": "string",
      "enum": [
        "AGFM",
        "APAT",
        "BGAC",
        "BGNC",
        "BKAS",
        "CFMQ",
        "CLPK",
        "CNNQ",
        "DMAT",
        "GSAT",
        "HAFC",
        "HBAT",
        "JEAT",
        "JENQ",
        "KKFA",
        "LHNQ",
        "LKNQ",
        "MAPK",
        "MAPS",
        "MBFL",
        "MLNQ",
        "XXXX"
      ]
    },
    "GBLOCs": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Grade": {
      "type": "string",
      "title": "grade",
      "enum": [
        "E_1",
        "E_2",
        "E_3",
        "E_4",
        "E_5",
        "E_6",
        "E_7",
        "E_8",
        "E_9",
        "E_9_SPECIAL_SENIOR_ENLISTED",
        "O_1_ACADEMY_GRADUATE",
        "O_2",
        "O_3",
        "O_4",
        "O_5",
        "O_6",
        "O_7",
        "O_8",
        "O_9",
        "O_10",
        "W_1",
        "W_2",
        "W_3",
        "W_4",
        "W_5",
        "AVIATION_CADET",
        "CIVILIAN_EMPLOYEE",
        "ACADEMY_CADET",
        "MIDSHIPMAN"
      ],
      "x-display-value": {
        "ACADEMY_CADET": "Service Academy Cadet",
        "AVIATION_CADET": "Aviation Cadet",
        "CIVILIAN_EMPLOYEE": "Civilian Employee",
        "E_1": "E-1",
        "E_2": "E-2",
        "E_3": "E-3",
        "E_4": "E-4",
        "E_5": "E-5",
        "E_6": "E-6",
        "E_7": "E-7",
        "E_8": "E-8",
        "E_9": "E-9",
        "E_9_SPECIAL_SENIOR_ENLISTED": "E-9 (Special Senior Enlisted)",
        "MIDSHIPMAN": "Midshipman",
        "O_10": "O-10",
        "O_1_ACADEMY_GRADUATE": "O-1 or Service Academy Graduate",
        "O_2": "O-2",
        "O_3": "O-3",
        "O_4": "O-4",
        "O_5": "O-5",
        "O_6": "O-6",
        "O_7": "O-7",
        "O_8": "O-8",
        "O_9": "O-9",
        "W_1": "W-1",
        "W_2": "W-2",
        "W_3": "W-3",
        "W_4": "W-4",
        "W_5": "W-5"
      },
      "x-nullable": true
    },
    "InvalidRequestResponsePayload": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "IsDateWeekendHolidayInfo": {
      "type": "object",
      "required": [
        "country_code",
        "country_name",
        "date",
        "is_weekend",
        "is_holiday"
      ],
      "properties": {
        "country_code": {
          "type": "string"
        },
        "country_name": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "2018-09-25"
        },
        "details": {
          "type": "string"
        },
        "is_holiday": {
          "type": "boolean"
        },
        "is_weekend": {
          "type": "boolean"
        }
      }
    },
    "LOAType": {
      "description": "The Line of accounting (TAC/SAC) type that will be used for the shipment",
      "type": "string",
      "enum": [
        "HHG",
        "NTS"
      ],
      "example": "HHG"
    },
    "LOATypeNullable": {
      "description": "The Line of accounting (TAC/SAC) type that will be used for the shipment",
      "type": "string",
      "enum": [
        "HHG",
        "NTS"
      ],
      "x-go-type": {
        "import": {
          "package": "github.com/transcom/mymove/pkg/swagger/nullable"
        },
        "type": "String"
      },
      "example": "HHG"
    },
    "LineOfAccounting": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-08-03T19:17:10.050Z"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "06254fc3-b763-484c-b555-42855d1ad5cd"
        },
        "loaActvtyID": {
          "type": "string",
          "maxLength": 11,
          "x-nullable": true
        },
        "loaAgncAcntngCd": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true
        },
        "loaAgncDsbrCd": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true
        },
        "loaAlltSnID": {
          "type": "string",
          "maxLength": 5,
          "x-nullable": true,
          "example": "123A"
        },
        "loaBafID": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true,
          "example": "1234"
        },
        "loaBdgtAcntClsNm": {
          "type": "string",
          "maxLength": 8,
          "x-nullable": true,
          "example": "000000"
        },
        "loaBetCd": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true
        },
        "loaBgFyTx": {
          "type": "integer",
          "x-nullable": true,
          "example": 2006
        },
        "loaBgnDt": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2005-10-01"
        },
        "loaBgtLnItmID": {
          "type": "string",
          "maxLength": 8,
          "x-nullable": true
        },
        "loaBgtRstrCd": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaBgtSubActCd": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true
        },
        "loaClsRefID": {
          "type": "string",
          "maxLength": 2,
          "x-nullable": true
        },
        "loaCstCd": {
          "type": "string",
          "maxLength": 16,
          "x-nullable": true
        },
        "loaCstCntrID": {
          "type": "string",
          "maxLength": 16,
          "x-nullable": true
        },
        "loaCustNm": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true
        },
        "loaDfAgncyAlctnRcpntID": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true
        },
        "loaDocID": {
          "type": "string",
          "maxLength": 15,
          "x-nullable": true,
          "example": "HHG12345678900"
        },
        "loaDptID": {
          "type": "string",
          "maxLength": 2,
          "x-nullable": true,
          "example": "1 "
        },
        "loaDscTx": {
          "type": "string",
          "x-nullable": true,
          "example": "PERSONAL PROPERTY - PARANORMAL ACTIVITY DIVISION (OTHER)"
        },
        "loaDtlRmbsmtSrcID": {
          "type": "string",
          "maxLength": 3,
          "x-nullable": true
        },
        "loaEndDt": {
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "example": "2015-10-01"
        },
        "loaEndFyTx": {
          "type": "integer",
          "x-nullable": true,
          "example": 2016
        },
        "loaFmsTrnsactnID": {
          "type": "string",
          "maxLength": 12,
          "x-nullable": true
        },
        "loaFnclArID": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true
        },
        "loaFnctPrsNm": {
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "loaFndCntrID": {
          "type": "string",
          "maxLength": 12,
          "x-nullable": true
        },
        "loaFndTyFgCd": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaHistStatCd": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaHsGdsCd": {
          "type": "string",
          "maxLength": 2,
          "x-nullable": true,
          "example": "HT"
        },
        "loaInstlAcntgActID": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true,
          "example": "12345"
        },
        "loaJbOrdNm": {
          "type": "string",
          "maxLength": 10,
          "x-nullable": true
        },
        "loaLclInstlID": {
          "type": "string",
          "maxLength": 18,
          "x-nullable": true
        },
        "loaMajClmNm": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true
        },
        "loaMajRmbsmtSrcID": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaObjClsID": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true,
          "example": "22NL"
        },
        "loaOpAgncyID": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true,
          "example": "1A"
        },
        "loaPgmElmntID": {
          "type": "string",
          "maxLength": 12,
          "x-nullable": true,
          "example": "00000000"
        },
        "loaPrjID": {
          "type": "string",
          "maxLength": 12,
          "x-nullable": true
        },
        "loaSbaltmtRcpntID": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaScrtyCoopCustCd": {
          "type": "string",
          "maxLength": 2,
          "x-nullable": true
        },
        "loaScrtyCoopDsgntrCd": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true
        },
        "loaScrtyCoopImplAgncCd": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaScrtyCoopLnItmID": {
          "type": "string",
          "maxLength": 3,
          "x-nullable": true
        },
        "loaSpclIntrID": {
          "type": "string",
          "maxLength": 2,
          "x-nullable": true
        },
        "loaSrvSrcID": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "loaStatCd": {
          "type": "string",
          "maxLength": 1,
          "x-nullable": true,
          "example": "U"
        },
        "loaSubAcntID": {
          "type": "string",
          "maxLength": 3,
          "x-nullable": true
        },
        "loaSysId": {
          "type": "string",
          "maxLength": 20,
          "x-nullable": true,
          "example": "10003"
        },
        "loaTnsfrDptNm": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true
        },
        "loaTrnsnID": {
          "type": "string",
          "maxLength": 3,
          "x-nullable": true,
          "example": "B1"
        },
        "loaTrsySfxTx": {
          "type": "string",
          "maxLength": 4,
          "x-nullable": true,
          "example": "0000"
        },
        "loaTskBdgtSblnTx": {
          "type": "string",
          "maxLength": 8,
          "x-nullable": true
        },
        "loaUic": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true
        },
        "loaWkCntrRcpntNm": {
          "type": "string",
          "maxLength": 6,
          "x-nullable": true
        },
        "loaWrkOrdID": {
          "type": "string",
          "maxLength": 16,
          "x-nullable": true
        },
        "orgGrpDfasCd": {
          "type": "string",
          "maxLength": 2,
          "x-nullable": true,
          "example": "ZZ"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-08-03T19:17:38.776Z"
        },
        "validHhgProgramCodeForLoa": {
          "type": "boolean",
          "x-nullable": true
        },
        "validLoaForTac": {
          "type": "boolean",
          "x-nullable": true
        }
      }
    },
    "ListPrimeMove": {
      "description": "An abbreviated definition for a move, without all the nested information (shipments, service items, etc). Used to fetch a list of moves more efficiently.\n",
      "type": "object",
      "properties": {
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveCode": {
          "type": "string",
          "readOnly": true,
          "example": "HYXFJF"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "orderType": {
          "type": "string"
        },
        "ppmType": {
          "type": "string",
          "enum": [
            "FULL",
            "PARTIAL"
          ]
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ListPrimeMoves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ListPrimeMove"
      }
    },
    "ListPrimeMovesResult": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "queueMoves": {
          "$ref": "#/definitions/ListPrimeMoves"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "Location": {
      "type": "object",
      "required": [
        "label",
        "value"
      ],
      "properties": {
        "label": {
          "type": "string",
          "example": "Label for display"
        },
        "value": {
          "type": "string",
          "example": "Value for location"
        }
      }
    },
    "Locations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Location"
      }
    },
    "LockedOfficeUser": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "transportationOffice": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "type": "string",
          "enum": [
            "RELEASING_AGENT",
            "RECEIVING_AGENT"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$)|(^$)",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "(^[2-9]\\d{2}-\\d{3}-\\d{4}$)|(^$)",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOAgents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOApprovalServiceItemCodes": {
      "description": "MTO level service items to create when updating MTO status.",
      "type": "object",
      "properties": {
        "serviceCodeCS": {
          "type": "boolean",
          "example": true
        },
        "serviceCodeMS": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "MTOServiceItem": {
      "type": "object",
      "required": [
        "id",
        "moveTaskOrderID",
        "reServiceID",
        "reServiceCode",
        "reServiceName"
      ],
      "properties": {
        "SITPostalCode": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true
        },
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "convertToCustomerExpense": {
          "type": "boolean",
          "x-omitempty": false,
          "example": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerContacts": {
          "$ref": "#/definitions/MTOServiceItemCustomerContacts"
        },
        "customerExpenseReason": {
          "type": "string",
          "x-nullable": true
        },
        "deletedAt": {
          "type": "string",
          "format": "date"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "dimensions": {
          "$ref": "#/definitions/MTOServiceItemDimensions"
        },
        "eTag": {
          "type": "string"
        },
        "estimatedPrice": {
          "type": "integer",
          "format": "cents",
          "x-nullable": true
        },
        "estimatedWeight": {
          "description": "estimated weight of the shuttle service item provided by the prime",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2500
        },
        "feeType": {
          "type": "string",
          "enum": [
            "COUNSELING",
            "CRATING",
            "TRUCKING",
            "SHUTTLE"
          ]
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lockedPriceCents": {
          "type": "integer",
          "format": "cents",
          "x-nullable": true
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupPostalCode": {
          "type": "string",
          "x-nullable": true
        },
        "quantity": {
          "type": "integer"
        },
        "rate": {
          "type": "integer"
        },
        "reServiceCode": {
          "type": "string"
        },
        "reServiceID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "type": "string"
        },
        "reason": {
          "type": "string",
          "x-nullable": true
        },
        "rejectedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true
        },
        "serviceRequestDocuments": {
          "$ref": "#/definitions/ServiceRequestDocuments"
        },
        "sitCustomerContacted": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitDeliveryMiles": {
          "type": "integer",
          "x-nullable": true
        },
        "sitDepartureDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sitDestinationFinalAddress": {
          "$ref": "#/definitions/Address"
        },
        "sitDestinationOriginalAddress": {
          "$ref": "#/definitions/Address"
        },
        "sitEntryDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sitOriginHHGActualAddress": {
          "$ref": "#/definitions/Address"
        },
        "sitOriginHHGOriginalAddress": {
          "$ref": "#/definitions/Address"
        },
        "sitRequestedDelivery": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "standaloneCrate": {
          "type": "boolean",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date"
        },
        "total": {
          "type": "integer",
          "format": "cents"
        },
        "updateReason": {
          "description": "Reason for updating service item.",
          "type": "string",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOServiceItemCustomerContact": {
      "description": "Customer contact information for a destination SIT service item",
      "type": "object",
      "properties": {
        "dateOfContact": {
          "description": "Date of attempted contact by the prime.",
          "type": "string",
          "format": "date"
        },
        "firstAvailableDeliveryDate": {
          "description": "First available date that the Prime can deliver SIT service item.",
          "type": "string",
          "format": "date",
          "example": "2020-12-31"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "timeMilitary": {
          "description": "Time of attempted contact by the prime.",
          "type": "string",
          "example": "0400Z"
        },
        "type": {
          "$ref": "#/definitions/CustomerContactType"
        }
      }
    },
    "MTOServiceItemCustomerContacts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItemCustomerContact"
      }
    },
    "MTOServiceItemDimension": {
      "description": "Describes a dimension object for the MTOServiceItem.",
      "type": "object",
      "properties": {
        "height": {
          "description": "Height in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "length": {
          "description": "Length in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "type": {
          "$ref": "#/definitions/DimensionType"
        },
        "width": {
          "description": "Width in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        }
      }
    },
    "MTOServiceItemDimensions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItemDimension"
      }
    },
    "MTOServiceItemSingle": {
      "type": "object",
      "properties": {
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "convertToCustomerExpense": {
          "type": "boolean",
          "x-omitempty": false,
          "example": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "customerExpenseReason": {
          "type": "string",
          "x-nullable": true
        },
        "deletedAt": {
          "type": "string",
          "format": "date"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupPostalCode": {
          "type": "string",
          "x-nullable": true
        },
        "reServiceCode": {
          "type": "string"
        },
        "reServiceID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "type": "string"
        },
        "rejectedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true
        },
        "sitCustomerContacted": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitDepartureDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sitEntryDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sitPostalCode": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true
        },
        "sitRequestedDelivery": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MTOServiceItemStatus": {
      "description": "Describes all statuses for a MTOServiceItem",
      "type": "string",
      "enum": [
        "SUBMITTED",
        "APPROVED",
        "REJECTED"
      ]
    },
    "MTOServiceItems": {
      "description": "A list of service items connected to this shipment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItem"
      }
    },
    "MTOShipment": {
      "properties": {
        "actualDeliveryDate": {
          "description": "The actual date that the shipment was delivered to the destination address by the Prime",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "actualPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "actualProGearWeight": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualSpouseProGearWeight": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "approvedDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "billableWeightCap": {
          "description": "TIO override billable weight to be used for calculations",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2500
        },
        "billableWeightJustification": {
          "type": "string",
          "x-nullable": true,
          "example": "more weight than expected"
        },
        "boatShipment": {
          "$ref": "#/definitions/BoatShipment"
        },
        "calculatedBillableWeight": {
          "type": "integer",
          "x-nullable": true,
          "readOnly": true,
          "example": 2000
        },
        "counselorRemarks": {
          "description": "The counselor can use the counselor remarks field to inform the movers about any\nspecial circumstances for this shipment. Typical examples:\n  * bulky or fragile items,\n  * weapons,\n  * access info for their address.\nCounselors enters this information when creating or editing an MTO Shipment. Optional field.\n",
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "deliveryAddressUpdate": {
          "$ref": "#/definitions/ShipmentAddressUpdate"
        },
        "destinationAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "destinationSitAuthEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "destinationType": {
          "$ref": "#/definitions/DestinationType"
        },
        "distance": {
          "type": "integer",
          "x-nullable": true,
          "example": 500
        },
        "diversion": {
          "type": "boolean",
          "example": true
        },
        "diversionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment needs rerouted"
        },
        "eTag": {
          "type": "string"
        },
        "hasSecondaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mobileHomeShipment": {
          "$ref": "#/definitions/MobileHome"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoAgents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "mtoServiceItems": {
          "$ref": "#/definitions/MTOServiceItems"
        },
        "ntsRecordedWeight": {
          "description": "The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "originSitAuthEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "pickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "ppmShipment": {
          "$ref": "#/definitions/PPMShipment"
        },
        "primeActualWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "primeEstimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment not good enough"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "requiredDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "reweigh": {
          "x-nullable": true,
          "x-omitempty": true,
          "$ref": "#/definitions/Reweigh"
        },
        "sacType": {
          "allOf": [
            {
              "$ref": "#/definitions/LOAType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "scheduledDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "scheduledPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "secondaryDeliveryAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "serviceOrderNumber": {
          "type": "string",
          "x-nullable": true
        },
        "shipmentLocator": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "1K43AR-01"
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "sitDaysAllowance": {
          "type": "integer",
          "x-nullable": true
        },
        "sitExtensions": {
          "$ref": "#/definitions/SITExtensions"
        },
        "sitStatus": {
          "$ref": "#/definitions/SITStatus"
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        },
        "storageFacility": {
          "x-nullable": true,
          "$ref": "#/definitions/StorageFacility"
        },
        "tacType": {
          "allOf": [
            {
              "$ref": "#/definitions/LOAType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "tertiaryDeliveryAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "tertiaryPickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "usesExternalVendor": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "MTOShipmentStatus": {
      "type": "string",
      "title": "Shipment Status",
      "enum": [
        "SUBMITTED",
        "REJECTED",
        "APPROVED",
        "CANCELLATION_REQUESTED",
        "CANCELED",
        "DIVERSION_REQUESTED"
      ],
      "example": "SUBMITTED"
    },
    "MTOShipmentType": {
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "HHG",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "INTERNATIONAL_HHG",
        "INTERNATIONAL_UB",
        "PPM",
        "BOAT_HAUL_AWAY",
        "BOAT_TOW_AWAY",
        "MOBILE_HOME"
      ],
      "x-display-value": {
        "BOAT_HAUL_AWAY": "Boat Haul-Away",
        "BOAT_TOW_AWAY": "Boat Tow-Away",
        "HHG": "HHG",
        "HHG_INTO_NTS_DOMESTIC": "NTS",
        "HHG_OUTOF_NTS_DOMESTIC": "NTS Release",
        "INTERNATIONAL_HHG": "International HHG",
        "INTERNATIONAL_UB": "International UB",
        "MOBILE_HOME": "Mobile Home",
        "PPM": "PPM"
      },
      "example": "HHG"
    },
    "MTOShipments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "MobileHome": {
      "description": "A mobile home is a type of shipment that a service member moves a mobile home.",
      "properties": {
        "createdAt": {
          "description": "Timestamp of when a property of this object was created (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "heightInInches": {
          "type": "integer"
        },
        "id": {
          "description": "Primary auto-generated unique identifier of the Mobile Home object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lengthInInches": {
          "type": "integer"
        },
        "make": {
          "description": "The make of the mobile home",
          "type": "string"
        },
        "model": {
          "description": "The model of the mobile home.",
          "type": "string"
        },
        "shipmentId": {
          "description": "The id of the parent MTOShipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "updatedAt": {
          "description": "Timestamp of when a property of this object was last updated (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "widthInInches": {
          "type": "integer"
        },
        "year": {
          "description": "The year the mobile home was made.",
          "type": "integer"
        }
      },
      "x-nullable": true
    },
    "Move": {
      "properties": {
        "SCAssignedUser": {
          "$ref": "#/definitions/AssignedOfficeUser"
        },
        "TIOAssignedUser": {
          "$ref": "#/definitions/AssignedOfficeUser"
        },
        "TOOAssignedUser": {
          "$ref": "#/definitions/AssignedOfficeUser"
        },
        "additionalDocuments": {
          "$ref": "#/definitions/Document"
        },
        "approvalsRequestedAt": {
          "description": "The time at which a move is sent back to the TOO becuase the prime added a new service item for approval",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "billableWeightsReviewedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "closeoutOffice": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "closeoutOfficeId": {
          "description": "The transportation office that will handle reviewing PPM Closeout documentation for Army and Air Force service members",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "contractor": {
          "$ref": "#/definitions/Contractor"
        },
        "contractorId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "excess_weight_acknowledged_at": {
          "description": "Timestamp of when the TOO acknowledged the excess weight risk by either dismissing the alert or updating the max billable weight",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "excess_weight_qualified_at": {
          "description": "Timestamp of when the estimated shipment weights of the move reached 90% of the weight allowance",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "financialReviewFlag": {
          "description": "This flag is set by office users if a move should be reviewed by a Financial Office",
          "type": "boolean",
          "x-nullable": false,
          "readOnly": true,
          "example": false
        },
        "financialReviewRemarks": {
          "type": "string",
          "x-nullable": true,
          "readOnly": true,
          "example": "Destination address is too far from duty location"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "locator": {
          "type": "string",
          "example": "1K43AR"
        },
        "lockExpiresAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "lockedByOfficeUser": {
          "x-nullable": true,
          "$ref": "#/definitions/LockedOfficeUser"
        },
        "lockedByOfficeUserID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "orders": {
          "$ref": "#/definitions/Order"
        },
        "ordersId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "referenceId": {
          "type": "string",
          "x-nullable": true,
          "example": "1001-3456"
        },
        "serviceCounselingCompletedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "shipmentGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "tioRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "approved additional weight"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveAuditHistories": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveAuditHistory"
      }
    },
    "MoveAuditHistory": {
      "properties": {
        "action": {
          "description": "Action type; I = insert, D = delete, U = update, T = truncate",
          "type": "string"
        },
        "actionTstampClk": {
          "description": "Wall clock time at which audited event's trigger call occurred",
          "type": "string",
          "format": "date-time"
        },
        "actionTstampStm": {
          "description": "Statement start timestamp for tx in which audited event occurred",
          "type": "string",
          "format": "date-time"
        },
        "actionTstampTx": {
          "description": "Transaction start timestamp for tx in which audited event occurred",
          "type": "string",
          "format": "date-time"
        },
        "changedValues": {
          "description": "A list of (changed/updated) MoveAuditHistoryItem's for a record after the change.",
          "type": "object",
          "additionalProperties": true,
          "x-nullable": true
        },
        "context": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "x-nullable": true
        },
        "contextId": {
          "description": "id column for the context table the record belongs to",
          "type": "string",
          "x-nullable": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "eventName": {
          "description": "API endpoint name that was called to make the change",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "id from audity_history table",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "objectId": {
          "description": "id column for the tableName where the data was changed",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "oldValues": {
          "description": "A list of (old/previous) MoveAuditHistoryItem's for a record before the change.",
          "type": "object",
          "additionalProperties": true,
          "x-nullable": true
        },
        "relId": {
          "description": "relation OID. Table OID (object identifier). Changes with drop/create.",
          "type": "integer"
        },
        "schemaName": {
          "description": "Database schema audited table for this event is in",
          "type": "string"
        },
        "sessionUserEmail": {
          "type": "string",
          "x-nullable": true,
          "example": "foobar@example.com"
        },
        "sessionUserFirstName": {
          "type": "string",
          "x-nullable": true,
          "example": "foo"
        },
        "sessionUserId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "sessionUserLastName": {
          "type": "string",
          "x-nullable": true,
          "example": "bar"
        },
        "sessionUserTelephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "statementOnly": {
          "description": "true if audit event is from an FOR EACH STATEMENT trigger, false for FOR EACH ROW'",
          "type": "boolean",
          "example": false
        },
        "tableName": {
          "description": "name of database table that was changed",
          "type": "string"
        },
        "transactionId": {
          "description": "Identifier of transaction that made the change. May wrap, but unique paired with action_tstamp_tx.",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "MoveAuditHistoryItem": {
      "properties": {
        "columnName": {
          "type": "string"
        },
        "columnValue": {
          "type": "string"
        }
      }
    },
    "MoveAuditHistoryItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveAuditHistoryItem"
      }
    },
    "MoveHistory": {
      "properties": {
        "historyRecords": {
          "description": "A list of MoveAuditHistory's connected to the move.",
          "$ref": "#/definitions/MoveAuditHistories"
        },
        "id": {
          "description": "move ID",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "locator": {
          "description": "move locator",
          "type": "string",
          "example": "1K43AR"
        },
        "referenceId": {
          "description": "move referenceID",
          "type": "string",
          "x-nullable": true,
          "example": "1001-3456"
        }
      }
    },
    "MoveHistoryResult": {
      "type": "object",
      "properties": {
        "historyRecords": {
          "description": "A list of MoveAuditHistory's connected to the move.",
          "$ref": "#/definitions/MoveAuditHistories"
        },
        "id": {
          "description": "move ID",
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "locator": {
          "description": "move locator",
          "type": "string",
          "example": "1K43AR"
        },
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "referenceId": {
          "description": "move referenceID",
          "type": "string",
          "x-nullable": true,
          "example": "1001-3456"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "MovePayload": {
      "type": "object",
      "required": [
        "id",
        "orders_id",
        "locator",
        "created_at",
        "updated_at",
        "eTag"
      ],
      "properties": {
        "additionalDocuments": {
          "$ref": "#/definitions/Document"
        },
        "cancel_reason": {
          "type": "string",
          "x-nullable": true,
          "example": "Change of orders"
        },
        "closeout_office": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "locator": {
          "type": "string",
          "example": "12432"
        },
        "mto_shipments": {
          "$ref": "#/definitions/MTOShipments"
        },
        "orders_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "primeCounselingCompletedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "submitted_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveStatus": {
      "type": "string",
      "enum": [
        "DRAFT",
        "NEEDS SERVICE COUNSELING",
        "SERVICE COUNSELING COMPLETED",
        "SUBMITTED",
        "APPROVALS REQUESTED",
        "APPROVED",
        "CANCELED"
      ]
    },
    "MoveTaskOrder": {
      "description": "The Move (MoveTaskOrder)",
      "type": "object",
      "properties": {
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "destinationDutyLocation": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "eTag": {
          "type": "string"
        },
        "entitlements": {
          "$ref": "#/definitions/Entitlements"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "locator": {
          "type": "string",
          "example": "1K43AR"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "originDutyLocation": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "serviceCounselingCompletedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "tioRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "approved additional weight"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveTaskOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveTaskOrder"
      }
    },
    "MovingExpense": {
      "description": "Expense information and receipts of costs incurred that can be reimbursed while moving a PPM shipment.",
      "type": "object",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "ppmShipmentId",
        "documentId",
        "document"
      ],
      "properties": {
        "amount": {
          "description": "The total amount of the expense as indicated on the receipt",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "description": "Timestamp the moving expense object was initially created in the system (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "A brief description of the expense",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "document": {
          "allOf": [
            {
              "description": "The Document object that contains all file uploads for this expense"
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "documentId": {
          "description": "The id of the Document that contains all file uploads for this expense",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique primary identifier of the Moving Expense object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "missingReceipt": {
          "description": "Indicates if the service member is missing the receipt with the proof of expense amount",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "movingExpenseType": {
          "$ref": "#/definitions/OmittableMovingExpenseType"
        },
        "paidWithGtcc": {
          "description": "Indicates if the service member used their government issued card to pay for the expense",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ppmShipmentId": {
          "description": "The PPM Shipment id that this moving expense belongs to",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reason": {
          "$ref": "#/definitions/PPMDocumentStatusReason"
        },
        "sitEndDate": {
          "description": "The date the shipment exited storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "2018-05-26"
        },
        "sitEstimatedCost": {
          "description": "The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "sitReimburseableAmount": {
          "description": "The amount of SIT that will be reimbursed",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitStartDate": {
          "description": "The date the shipment entered storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "2022-04-26"
        },
        "status": {
          "$ref": "#/definitions/OmittablePPMDocumentStatus"
        },
        "submittedAmount": {
          "description": "Customer submitted total amount of the expense as indicated on the receipt",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedDescription": {
          "description": "Customer submitted description of the expense",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedMovingExpenseType": {
          "$ref": "#/definitions/SubmittedMovingExpenseType"
        },
        "submittedSitEndDate": {
          "description": "Customer submitted date the shipment exited storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "2018-05-26"
        },
        "submittedSitStartDate": {
          "description": "Customer submitted date the shipment entered storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "2022-04-26"
        },
        "updatedAt": {
          "description": "Timestamp when a property of this moving expense object was last modified (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "weightStored": {
          "description": "The total weight stored in PPM SIT",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        }
      }
    },
    "MovingExpenses": {
      "description": "All moving expenses associated with a PPM shipment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MovingExpense"
      },
      "x-omitempty": false
    },
    "NullableString": {
      "type": "string",
      "x-go-type": {
        "import": {
          "package": "github.com/transcom/mymove/pkg/swagger/nullable"
        },
        "type": "String"
      }
    },
    "OfficeUser": {
      "type": "object",
      "required": [
        "id",
        "firstName",
        "middleInitials",
        "lastName",
        "email",
        "telephone",
        "transportationOfficeId",
        "active",
        "roles",
        "edipi",
        "otherUniqueId",
        "rejectionReason",
        "status",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "edipi": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lastName": {
          "type": "string"
        },
        "middleInitials": {
          "type": "string"
        },
        "otherUniqueId": {
          "type": "string"
        },
        "rejectionReason": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "REQUESTED",
            "REJECTED"
          ]
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$"
        },
        "transportationOffice": {
          "$ref": "#/definitions/TransportationOffice"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "OfficeUserCreate": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "email",
        "telephone",
        "transportationOfficeId",
        "roles"
      ],
      "properties": {
        "edipi": {
          "type": "string",
          "title": "EDIPI",
          "maxLength": 10,
          "x-nullable": true,
          "example": "1234567890"
        },
        "email": {
          "type": "string",
          "title": "Email",
          "x-nullable": false,
          "example": "user@userdomain.com"
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "x-nullable": false
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "x-nullable": false
        },
        "middleInitials": {
          "type": "string",
          "title": "Middle Initials",
          "x-nullable": true,
          "example": "L."
        },
        "otherUniqueId": {
          "type": "string",
          "title": "Office user identifier when EDIPI is not available",
          "x-nullable": true
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeUserRole"
          },
          "x-nullable": false
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": false,
          "example": "212-555-5555"
        },
        "transportationOfficeId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": false,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OfficeUserRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "x-nullable": true,
          "example": "Task Ordering Officer"
        },
        "roleType": {
          "type": "string",
          "title": "roleType",
          "x-nullable": true,
          "example": "task_ordering_officer"
        }
      }
    },
    "OmittableMovingExpenseType": {
      "description": "Moving Expense Type",
      "type": "string",
      "enum": [
        "CONTRACTED_EXPENSE",
        "GAS",
        "OIL",
        "OTHER",
        "PACKING_MATERIALS",
        "RENTAL_EQUIPMENT",
        "STORAGE",
        "TOLLS",
        "WEIGHING_FEE"
      ],
      "x-display-value": {
        "CONTRACTED_EXPENSE": "Contracted expense",
        "GAS": "Gas",
        "OIL": "Oil",
        "OTHER": "Other",
        "PACKING_MATERIALS": "Packing materials",
        "RENTAL_EQUIPMENT": "Rental equipment",
        "STORAGE": "Storage",
        "TOLLS": "Tolls",
        "WEIGHING_FEE": "Weighing fee"
      },
      "x-nullable": true,
      "x-omitempty": false
    },
    "OmittablePPMDocumentStatus": {
      "description": "Status of the PPM document.",
      "type": "string",
      "enum": [
        "APPROVED",
        "EXCLUDED",
        "REJECTED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "EXCLUDED": "Excluded",
        "REJECTED": "Rejected"
      },
      "x-nullable": true,
      "x-omitempty": false
    },
    "Order": {
      "type": "object",
      "properties": {
        "agency": {
          "$ref": "#/definitions/Affiliation"
        },
        "amendedOrdersAcknowledgedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "customerID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "date_issued": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "department_indicator": {
          "x-nullable": true,
          "$ref": "#/definitions/DeptIndicator"
        },
        "destinationDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "destinationDutyLocationGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "eTag": {
          "type": "string"
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlements"
        },
        "first_name": {
          "type": "string",
          "readOnly": true,
          "example": "John"
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "has_dependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?",
          "example": false
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "last_name": {
          "type": "string",
          "readOnly": true,
          "example": "Doe"
        },
        "methodOfPayment": {
          "type": "string"
        },
        "moveCode": {
          "type": "string",
          "example": "H2XFJF"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "naics": {
          "type": "string"
        },
        "ntsSac": {
          "type": "string",
          "title": "NTS SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "ntsTac": {
          "type": "string",
          "title": "NTS TAC",
          "x-nullable": true,
          "example": "F8J1"
        },
        "order_number": {
          "type": "string",
          "x-nullable": true,
          "example": "030-00362"
        },
        "order_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "order_type_detail": {
          "x-nullable": true,
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "orders_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "originDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "originDutyLocationGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "packingAndShippingInstructions": {
          "type": "string"
        },
        "report_by_date": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "spouse_has_pro_gear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?",
          "example": false
        },
        "supplyAndServicesCostEstimate": {
          "type": "string"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        },
        "uploadedAmendedOrderID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "uploaded_order_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OrderBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "LOCAL_MOVE",
        "RETIREMENT",
        "SEPARATION",
        "WOUNDED_WARRIOR",
        "BLUEBARK",
        "SAFETY"
      ],
      "x-display-value": {
        "BLUEBARK": "BLUEBARK",
        "LOCAL_MOVE": "Local Move",
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station",
        "RETIREMENT": "Retirement",
        "SAFETY": "Safety",
        "SEPARATION": "Separation",
        "WOUNDED_WARRIOR": "Wounded Warrior"
      }
    },
    "OrdersTypeDetail": {
      "type": "string",
      "title": "Orders type detail",
      "enum": [
        "HHG_PERMITTED",
        "PCS_TDY",
        "HHG_RESTRICTED_PROHIBITED",
        "HHG_RESTRICTED_AREA",
        "INSTRUCTION_20_WEEKS",
        "HHG_PROHIBITED_20_WEEKS",
        "DELAYED_APPROVAL"
      ],
      "x-display-value": {
        "DELAYED_APPROVAL": "Delayed Approval 20 Weeks or More",
        "HHG_PERMITTED": "Shipment of HHG Permitted",
        "HHG_PROHIBITED_20_WEEKS": "Shipment of HHG Prohibited but Authorized within 20 weeks",
        "HHG_RESTRICTED_AREA": "HHG Restricted Area-HHG Prohibited",
        "HHG_RESTRICTED_PROHIBITED": "Shipment of HHG Restricted or Prohibited",
        "INSTRUCTION_20_WEEKS": "Course of Instruction 20 Weeks or More",
        "PCS_TDY": "PCS with TDY Enroute"
      },
      "x-nullable": true
    },
    "PPMActualWeight": {
      "description": "The actual net weight of a single PPM shipment. Used during document review for PPM closeout.",
      "required": [
        "actualWeight"
      ],
      "properties": {
        "actualWeight": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        }
      }
    },
    "PPMAdvanceStatus": {
      "description": "Indicates whether an advance status has been accepted, rejected, or edited, or a prime counseled PPM has been received or not received",
      "type": "string",
      "title": "PPM Advance Status",
      "enum": [
        "APPROVED",
        "REJECTED",
        "EDITED",
        "RECEIVED",
        "NOT_RECEIVED"
      ],
      "x-nullable": true
    },
    "PPMCloseout": {
      "description": "The calculations needed in the \"Review Documents\" section of a PPM closeout. LIst of all expenses/reimbursements related toa PPM shipment.",
      "required": [
        "id"
      ],
      "properties": {
        "SITReimbursement": {
          "description": "The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualMoveDate": {
          "description": "The actual start date of when the PPM shipment left the origin.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualWeight": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        },
        "aoa": {
          "description": "Advance Operating Allowance (AOA).",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ddp": {
          "description": "The Domestic Destination Price (DDP).",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "dop": {
          "description": "The Domestic Origin Price (DOP).",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "estimatedWeight": {
          "description": "The estimated weight of the PPM shipment goods being moved.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 4200
        },
        "gcc": {
          "description": "Government Constructive Cost (GCC)",
          "type": "integer",
          "format": "cents",
          "title": "GCC",
          "x-nullable": true,
          "x-omitempty": false
        },
        "grossIncentive": {
          "description": "The final calculated incentive for the PPM shipment. This does not include **SIT** as it is a reimbursement.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "haulFSC": {
          "description": "The linehaul/shorthaul Fuel Surcharge (FSC).",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "haulPrice": {
          "description": "The price of the linehaul or shorthaul.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "haulType": {
          "description": "The type of haul calculation used for this shipment (shorthaul or linehaul).",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "Primary auto-generated unique identifier of the PPM shipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "miles": {
          "description": "The distance between the old address and the new address in miles.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false,
          "example": 54
        },
        "packPrice": {
          "description": "The full price of all packing/unpacking services.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "plannedMoveDate": {
          "description": "Date the customer expects to begin their move.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "proGearWeightCustomer": {
          "description": "The estimated weight of the pro-gear being moved belonging to the service member.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "proGearWeightSpouse": {
          "description": "The estimated weight of the pro-gear being moved belonging to a spouse.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "remainingIncentive": {
          "description": "The remaining reimbursement amount that is still owed to the customer.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "unpackPrice": {
          "description": "The full price of all packing/unpacking services.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        }
      }
    },
    "PPMDocumentStatus": {
      "description": "Status of the PPM document.",
      "type": "string",
      "enum": [
        "APPROVED",
        "EXCLUDED",
        "REJECTED"
      ],
      "x-display-value": {
        "APPROVED": "Approved",
        "EXCLUDED": "Excluded",
        "REJECTED": "Rejected"
      }
    },
    "PPMDocumentStatusReason": {
      "description": "The reason the services counselor has excluded or rejected the item.",
      "type": "string",
      "x-nullable": true,
      "x-omitempty": false
    },
    "PPMDocuments": {
      "description": "All documents associated with a PPM shipment, including weight tickets, progear weight tickets, and moving expenses.",
      "type": "object",
      "properties": {
        "MovingExpenses": {
          "$ref": "#/definitions/MovingExpenses"
        },
        "ProGearWeightTickets": {
          "$ref": "#/definitions/ProGearWeightTickets"
        },
        "WeightTickets": {
          "$ref": "#/definitions/WeightTickets"
        }
      },
      "x-nullable": true,
      "x-omitempty": false
    },
    "PPMSITEstimatedCost": {
      "description": "The estimated cost of SIT for a single PPM shipment. Used during document review for PPM.",
      "required": [
        "sitCost",
        "priceFirstDaySIT",
        "priceAdditionalDaySIT"
      ],
      "properties": {
        "paramsAdditionalDaySIT": {
          "type": "object",
          "properties": {
            "contractYearName": {
              "type": "string",
              "example": "Award Term 1"
            },
            "escalationCompounded": {
              "type": "string",
              "example": "1.01"
            },
            "isPeak": {
              "type": "string",
              "example": "true"
            },
            "numberDaysSIT": {
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true,
              "example": "30"
            },
            "priceRateOrFactor": {
              "type": "string",
              "example": "0.53"
            },
            "serviceAreaDestination": {
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true,
              "example": "252"
            },
            "serviceAreaOrigin": {
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true,
              "example": "252"
            }
          }
        },
        "paramsFirstDaySIT": {
          "type": "object",
          "properties": {
            "contractYearName": {
              "type": "string",
              "example": "Award Term 1"
            },
            "escalationCompounded": {
              "type": "string",
              "example": "1.01"
            },
            "isPeak": {
              "type": "string",
              "example": "true"
            },
            "priceRateOrFactor": {
              "type": "string",
              "example": "20.53"
            },
            "serviceAreaDestination": {
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true,
              "example": "252"
            },
            "serviceAreaOrigin": {
              "type": "string",
              "x-nullable": true,
              "x-omitempty": true,
              "example": "252"
            }
          }
        },
        "priceAdditionalDaySIT": {
          "type": "integer",
          "format": "cents",
          "title": "Price of an additional day in SIT",
          "example": 2000
        },
        "priceFirstDaySIT": {
          "type": "integer",
          "format": "cents",
          "title": "Price of the first day in SIT",
          "example": 2000
        },
        "sitCost": {
          "type": "integer",
          "example": 2000
        }
      }
    },
    "PPMSITEstimatedCostParamsAdditionalDaySIT": {
      "type": "object",
      "properties": {
        "contractYearName": {
          "type": "string",
          "example": "Award Term 1"
        },
        "escalationCompounded": {
          "type": "string",
          "example": "1.01"
        },
        "isPeak": {
          "type": "string",
          "example": "true"
        },
        "numberDaysSIT": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true,
          "example": "30"
        },
        "priceRateOrFactor": {
          "type": "string",
          "example": "0.53"
        },
        "serviceAreaDestination": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true,
          "example": "252"
        },
        "serviceAreaOrigin": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true,
          "example": "252"
        }
      }
    },
    "PPMSITEstimatedCostParamsFirstDaySIT": {
      "type": "object",
      "properties": {
        "contractYearName": {
          "type": "string",
          "example": "Award Term 1"
        },
        "escalationCompounded": {
          "type": "string",
          "example": "1.01"
        },
        "isPeak": {
          "type": "string",
          "example": "true"
        },
        "priceRateOrFactor": {
          "type": "string",
          "example": "20.53"
        },
        "serviceAreaDestination": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true,
          "example": "252"
        },
        "serviceAreaOrigin": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true,
          "example": "252"
        }
      }
    },
    "PPMShipment": {
      "description": "A personally procured move is a type of shipment that a service member moves themselves.",
      "required": [
        "id",
        "shipmentId",
        "createdAt",
        "status",
        "expectedDepartureDate",
        "sitExpected",
        "eTag"
      ],
      "properties": {
        "actualDestinationPostalCode": {
          "description": "The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "actualMoveDate": {
          "description": "The actual start date of when the PPM shipment left the origin.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualPickupPostalCode": {
          "description": "The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "90210"
        },
        "advanceAmountReceived": {
          "description": "The amount received for an advance, or null if no advance is received.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "advanceAmountRequested": {
          "description": "The amount requested as an advance by the service member up to a maximum percentage of the estimated incentive.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "advanceStatus": {
          "$ref": "#/definitions/PPMAdvanceStatus"
        },
        "approvedAt": {
          "description": "The timestamp of when the shipment was approved and the service member can begin their move.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "description": "Timestamp of when the PPM Shipment was initially created (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "description": "A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "estimatedIncentive": {
          "description": "The estimated amount the government will pay the service member to move their belongings based on the moving date, locations, and shipment weight.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "estimatedWeight": {
          "description": "The estimated weight of the PPM shipment goods being moved.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to begin their move.\n",
          "type": "string",
          "format": "date"
        },
        "finalIncentive": {
          "description": "The final calculated incentive for the PPM shipment. This does not include **SIT** as it is a reimbursement.\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear for themselves or their spouse.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasReceivedAdvance": {
          "description": "Indicates whether an advance was received for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasRequestedAdvance": {
          "description": "Indicates whether an advance has been requested for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "Primary auto-generated unique identifier of the PPM shipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "movingExpenses": {
          "description": "All expense documentation receipt records of this PPM shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MovingExpense"
          }
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "proGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to the service member.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "proGearWeightTickets": {
          "description": "All pro-gear weight ticket documentation records for this PPM shipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProGearWeightTicket"
          }
        },
        "reviewedAt": {
          "description": "The timestamp of when the Service Counselor has reviewed all of the closeout documents.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "secondaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "secondaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "shipmentId": {
          "description": "The id of the parent MTOShipment object",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "signedCertification": {
          "$ref": "#/definitions/SignedCertification"
        },
        "sitEstimatedCost": {
          "description": "The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedDepartureDate": {
          "description": "The date that goods will exit the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedEntryDate": {
          "description": "The date that goods will first enter the storage location.",
          "type": "string",
          "format": "date",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitEstimatedWeight": {
          "description": "The estimated weight of the goods being put into storage.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        },
        "sitExpected": {
          "description": "Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.\n\nMust be set to ` + "`" + `true` + "`" + ` when providing ` + "`" + `sitLocation` + "`" + `, ` + "`" + `sitEstimatedWeight` + "`" + `, ` + "`" + `sitEstimatedEntryDate` + "`" + `, and ` + "`" + `sitEstimatedDepartureDate` + "`" + ` values to calculate the ` + "`" + `sitEstimatedCost` + "`" + `.\n",
          "type": "boolean"
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "spouseProGearWeight": {
          "description": "The estimated weight of the pro-gear being moved belonging to a spouse.",
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "status": {
          "$ref": "#/definitions/PPMShipmentStatus"
        },
        "submittedAt": {
          "description": "The timestamp of when the customer submitted their PPM documentation to the counselor for review.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "tertiaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "tertiaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "updatedAt": {
          "description": "Timestamp of when a property of this object was last updated (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "w2Address": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "weightTickets": {
          "$ref": "#/definitions/WeightTickets"
        }
      },
      "x-nullable": true
    },
    "PPMShipmentSIT": {
      "description": "SIT related items for a PPM shipment",
      "required": [
        "sitLocation"
      ],
      "properties": {
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            },
            {
              "x-omitempty": false
            }
          ]
        },
        "updatedAt": {
          "description": "Timestamp of when a property of this object was last updated (UTC)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "x-nullable": true
    },
    "PPMShipmentStatus": {
      "description": "Status of the PPM Shipment:\n  * **DRAFT**: The customer has created the PPM shipment but has not yet submitted their move for counseling.\n  * **SUBMITTED**: The shipment belongs to a move that has been submitted by the customer or has been created by a Service Counselor or Prime Contractor for a submitted move.\n  * **WAITING_ON_CUSTOMER**: The PPM shipment has been approved and the customer may now provide their actual move closeout information and documentation required to get paid.\n  * **NEEDS_ADVANCE_APPROVAL**: The shipment was counseled by the Prime Contractor and approved but an advance was requested so will need further financial approval from the government.\n  * **NEEDS_CLOSEOUT**: The customer has provided their closeout weight tickets, receipts, and expenses and certified it for the Service Counselor to approve, exclude or reject.\n  * **CLOSEOUT_COMPLETE**: The Service Counselor has reviewed all of the customer's PPM closeout documentation and authorizes the customer can download and submit their finalized SSW packet.\n",
      "type": "string",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "WAITING_ON_CUSTOMER",
        "NEEDS_ADVANCE_APPROVAL",
        "NEEDS_CLOSEOUT",
        "CLOSEOUT_COMPLETE",
        "CANCELED"
      ],
      "readOnly": true
    },
    "PPMStatus": {
      "type": "string",
      "enum": [
        "CANCELLED",
        "DRAFT",
        "SUBMITTED",
        "WAITING_ON_CUSTOMER",
        "NEEDS_ADVANCE_APPROVAL",
        "NEEDS_CLOSEOUT",
        "CLOSEOUT_COMPLETE",
        "COMPLETED"
      ]
    },
    "PWSViolation": {
      "description": "A PWS violation for an evaluation report",
      "type": "object",
      "properties": {
        "additionalDataElem": {
          "type": "string",
          "example": "QAE Observed Delivery Date"
        },
        "category": {
          "type": "string",
          "example": "Pre-Move Services"
        },
        "displayOrder": {
          "type": "integer",
          "example": 3
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "isKpi": {
          "type": "boolean",
          "example": false
        },
        "paragraphNumber": {
          "type": "string",
          "example": "1.2.3.4.5"
        },
        "requirementStatement": {
          "type": "string",
          "example": "The contractor shall prepare and load property going into NTS in containers at residence for shipment to NTS."
        },
        "requirementSummary": {
          "type": "string",
          "example": "Provide a single point of contact (POC)"
        },
        "subCategory": {
          "type": "string",
          "example": "Weight Estimate"
        },
        "title": {
          "type": "string",
          "example": "Customer Support"
        }
      },
      "readOnly": true
    },
    "PWSViolations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PWSViolation"
      }
    },
    "PatchMTOServiceItemStatusPayload": {
      "properties": {
        "rejectionReason": {
          "description": "Reason the service item was rejected",
          "type": "string",
          "x-nullable": true,
          "example": "Insufficent details provided"
        },
        "status": {
          "description": "Describes all statuses for a MTOServiceItem",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "APPROVED",
            "REJECTED"
          ]
        }
      }
    },
    "PaymentRequest": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "ediErrorCode": {
          "description": "Reported code from syncada for the EDI error encountered",
          "type": "string",
          "x-nullable": true
        },
        "ediErrorDescription": {
          "description": "The reason the services counselor has excluded or rejected the item.",
          "type": "string",
          "x-nullable": true
        },
        "ediErrorType": {
          "description": "Type of EDI reporting or causing the issue. Can be EDI 997, 824, and 858.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrder": {
          "$ref": "#/definitions/Move"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestNumber": {
          "type": "string",
          "readOnly": true,
          "example": "1234-5678-1"
        },
        "proofOfServiceDocs": {
          "$ref": "#/definitions/ProofOfServiceDocs"
        },
        "recalculationOfPaymentRequestID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "receivedByGexAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "reviewedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sentToGexAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "serviceItems": {
          "$ref": "#/definitions/PaymentServiceItems"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        },
        "tppsInvoiceAmountPaidTotalMillicents": {
          "type": "integer",
          "format": "millients",
          "title": "Total amount that TPPS paid for all service items on the payment request in millicents",
          "x-nullable": true
        },
        "tppsInvoiceSellerPaidDate": {
          "type": "string",
          "format": "date-time",
          "title": "Date that TPPS paid HS for the payment request",
          "x-nullable": true
        }
      }
    },
    "PaymentRequestStatus": {
      "type": "string",
      "title": "Payment Request Status",
      "enum": [
        "PENDING",
        "REVIEWED",
        "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
        "SENT_TO_GEX",
        "TPPS_RECEIVED",
        "PAID",
        "EDI_ERROR",
        "DEPRECATED"
      ]
    },
    "PaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentRequest"
      }
    },
    "PaymentServiceItem": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemCode": {
          "type": "string",
          "example": "DLH"
        },
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemName": {
          "type": "string",
          "example": "Move management"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoShipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "paymentRequestID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentServiceItemParams": {
          "$ref": "#/definitions/PaymentServiceItemParams"
        },
        "priceCents": {
          "type": "integer",
          "format": "cents",
          "title": "Price of the service item in cents",
          "x-nullable": true
        },
        "referenceID": {
          "format": "string",
          "readOnly": true,
          "example": "1234-5678-c56a4180"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentServiceItemStatus"
        },
        "tppsInvoiceAmountPaidPerServiceItemMillicents": {
          "type": "integer",
          "format": "millicents",
          "title": "Amount that TPPS paid for the individual service item in millicents",
          "x-nullable": true
        }
      }
    },
    "PaymentServiceItemParam": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "key": {
          "$ref": "#/definitions/ServiceItemParamName"
        },
        "origin": {
          "$ref": "#/definitions/ServiceItemParamOrigin"
        },
        "paymentServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "type": {
          "$ref": "#/definitions/ServiceItemParamType"
        },
        "value": {
          "type": "string",
          "example": "3025"
        }
      }
    },
    "PaymentServiceItemParams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItemParam"
      }
    },
    "PaymentServiceItemStatus": {
      "type": "string",
      "title": "Payment Service Item Status",
      "enum": [
        "REQUESTED",
        "APPROVED",
        "DENIED",
        "SENT_TO_GEX",
        "PAID",
        "EDI_ERROR"
      ]
    },
    "PaymentServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItem"
      }
    },
    "PostDocumentPayload": {
      "type": "object",
      "properties": {
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        }
      }
    },
    "ProGearWeightTicket": {
      "description": "Pro-gear associated information and weight docs for a PPM shipment",
      "type": "object",
      "required": [
        "ppmShipmentId",
        "createdAt",
        "updatedAt",
        "documentId",
        "document"
      ],
      "properties": {
        "belongsToSelf": {
          "description": "Indicates if this information is for the customer's own pro-gear, otherwise, it's the spouse's.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "Describes the pro-gear that was moved.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "document": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the pro-gear weight."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "documentId": {
          "description": "The ID of the document that is associated with the user uploads containing the pro-gear weight.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "hasWeightTickets": {
          "description": "Indicates if the user has a weight ticket for their pro-gear, otherwise they have a constructed weight.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "The ID of the pro-gear weight ticket.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ppmShipmentId": {
          "description": "The ID of the PPM shipment that this pro-gear weight ticket is associated with.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reason": {
          "$ref": "#/definitions/PPMDocumentStatusReason"
        },
        "status": {
          "$ref": "#/definitions/OmittablePPMDocumentStatus"
        },
        "submittedBelongsToSelf": {
          "description": "Indicates if this information is for the customer's own pro-gear, otherwise, it's the spouse's.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedHasWeightTickets": {
          "description": "Indicates if the user has a weight ticket for their pro-gear, otherwise they have a constructed weight.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedWeight": {
          "description": "Customer submitted weight of the pro-gear.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "weight": {
          "description": "Weight of the pro-gear.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        }
      }
    },
    "ProGearWeightTickets": {
      "description": "All progear weight tickets associated with a PPM shipment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProGearWeightTicket"
      },
      "x-omitempty": false
    },
    "ProofOfServiceDoc": {
      "properties": {
        "isWeightTicket": {
          "type": "boolean"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "ProofOfServiceDocs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProofOfServiceDoc"
      }
    },
    "QueueMove": {
      "type": "object",
      "properties": {
        "appearedInTooAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "assignedTo": {
          "x-nullable": true,
          "$ref": "#/definitions/AssignedOfficeUser"
        },
        "closeoutInitiated": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "closeoutLocation": {
          "type": "string",
          "x-nullable": true
        },
        "counselingOffice": {
          "type": "string",
          "x-nullable": true
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "departmentIndicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "destinationDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "locator": {
          "type": "string"
        },
        "lockExpiresAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "lockedByOfficeUser": {
          "x-nullable": true,
          "$ref": "#/definitions/LockedOfficeUser"
        },
        "lockedByOfficeUserID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "orderType": {
          "type": "string",
          "x-nullable": true
        },
        "originDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "originGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "ppmStatus": {
          "x-nullable": true,
          "$ref": "#/definitions/PPMStatus"
        },
        "ppmType": {
          "type": "string",
          "enum": [
            "FULL",
            "PARTIAL"
          ],
          "x-nullable": true
        },
        "requestedMoveDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "shipmentsCount": {
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "QueueMoves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QueueMove"
      }
    },
    "QueueMovesResult": {
      "type": "object",
      "properties": {
        "availableOfficeUsers": {
          "$ref": "#/definitions/AvailableOfficeUsers"
        },
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "queueMoves": {
          "$ref": "#/definitions/QueueMoves"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "QueuePaymentRequest": {
      "type": "object",
      "properties": {
        "age": {
          "description": "Days since the payment request has been requested.  Decimal representation will allow more accurate sorting.",
          "type": "number",
          "format": "double"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "departmentIndicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "locator": {
          "type": "string"
        },
        "lockExpiresAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "lockedByOfficeUserID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "moveID": {
          "type": "string",
          "format": "uuid"
        },
        "orderType": {
          "type": "string",
          "x-nullable": true
        },
        "originDutyLocation": {
          "$ref": "#/definitions/DutyLocation"
        },
        "originGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "status": {
          "$ref": "#/definitions/QueuePaymentRequestStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "QueuePaymentRequestStatus": {
      "type": "string",
      "title": "Queue Payment Request Status",
      "enum": [
        "Payment requested",
        "Reviewed",
        "Rejected",
        "Paid"
      ]
    },
    "QueuePaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QueuePaymentRequest"
      }
    },
    "QueuePaymentRequestsResult": {
      "type": "object",
      "properties": {
        "availableOfficeUsers": {
          "$ref": "#/definitions/AvailableOfficeUsers"
        },
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "queuePaymentRequests": {
          "$ref": "#/definitions/QueuePaymentRequests"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "RejectShipment": {
      "required": [
        "rejectionReason"
      ],
      "properties": {
        "rejectionReason": {
          "type": "string",
          "example": "MTO Shipment not good enough"
        }
      }
    },
    "ReportViolation": {
      "description": "An object associating violations to evaluation reports",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reportID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "violation": {
          "$ref": "#/definitions/PWSViolation"
        },
        "violationID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        }
      }
    },
    "ReportViolations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ReportViolation"
      }
    },
    "RequestDiversion": {
      "required": [
        "diversionReason"
      ],
      "properties": {
        "diversionReason": {
          "type": "string",
          "example": "Shipment route needs to change"
        }
      }
    },
    "Reweigh": {
      "description": "A reweigh  is when a shipment is weighed for a second time due to the request of a customer, the contractor, system or TOO.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "requestedAt": {
          "type": "string",
          "format": "date-time"
        },
        "requestedBy": {
          "$ref": "#/definitions/ReweighRequester"
        },
        "shipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "verificationProvidedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "verificationReason": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "The reweigh was not performed due to some justification provided by the counselor"
        },
        "weight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 2000
        }
      }
    },
    "ReweighRequester": {
      "type": "string",
      "enum": [
        "CUSTOMER",
        "PRIME",
        "SYSTEM",
        "TOO"
      ]
    },
    "Role": {
      "type": "object",
      "required": [
        "id",
        "roleType",
        "roleName",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "roleName": {
          "type": "string",
          "example": "Task Ordering Officer"
        },
        "roleType": {
          "type": "string",
          "example": "customer"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SITExtension": {
      "description": "A storage in transit (SIT) Extension is a request for an increase in the billable number of days a shipment is allowed to be in SIT.",
      "type": "object",
      "properties": {
        "approvedDays": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false,
          "example": 30
        },
        "contractorRemarks": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "We need SIT additional days. The customer has not found a house yet."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "decisionDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "x-omitempty": false
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "officeRemarks": {
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "requestReason": {
          "type": "string",
          "enum": [
            "SERIOUS_ILLNESS_MEMBER",
            "SERIOUS_ILLNESS_DEPENDENT",
            "IMPENDING_ASSIGNEMENT",
            "DIRECTED_TEMPORARY_DUTY",
            "NONAVAILABILITY_OF_CIVILIAN_HOUSING",
            "AWAITING_COMPLETION_OF_RESIDENCE",
            "OTHER"
          ]
        },
        "requestedDays": {
          "type": "integer",
          "example": 30
        },
        "status": {
          "enum": [
            "PENDING",
            "APPROVED",
            "DENIED"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SITExtensions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SITExtension"
      }
    },
    "SITLocationType": {
      "description": "The list of SIT location types.",
      "type": "string",
      "enum": [
        "ORIGIN",
        "DESTINATION"
      ]
    },
    "SITServiceItemGrouping": {
      "properties": {
        "serviceItems": {
          "$ref": "#/definitions/MTOServiceItems"
        },
        "summary": {
          "description": "Holds the top level summary of a Service Item Grouping, detailing the ServiceItemID of the first day SIT service item (Eg, DOFSIT, DOASIT), the location (ORIGIN/DESTINATION), how many days the provided instance of SIT has been in storage, SIT entry date, departure date, authorized end date, customer contacted date, requested delivery date.\nThis is provided at a top level because due to our service item architecture, SIT information is sometimes split across multiple service items, and this summary is a compilation of said information. This prevents the need to loop over many service items.\n",
          "$ref": "#/definitions/SITSummary"
        }
      }
    },
    "SITServiceItemGroupings": {
      "description": "Holds groupings of SIT service items and their summaries, detailing the summary ServiceItemID of the first day SIT service item (Eg, DOFSIT, DOASIT), the location (ORIGIN/DESTINATION), how many days the provided instance of SIT has been in storage, SIT entry date, departure date, authorized end date, customer contacted date, requested delivery date.\n",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SITServiceItemGrouping"
      }
    },
    "SITStatus": {
      "properties": {
        "calculatedTotalDaysInSIT": {
          "type": "integer",
          "minimum": 0
        },
        "currentSIT": {
          "type": "object",
          "properties": {
            "daysInSIT": {
              "type": "integer",
              "minimum": 0
            },
            "location": {
              "enum": [
                "ORIGIN",
                "DESTINATION"
              ]
            },
            "serviceItemID": {
              "type": "string",
              "format": "uuid",
              "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
            },
            "sitAuthorizedEndDate": {
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitCustomerContacted": {
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitDepartureDate": {
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitEntryDate": {
              "type": "string",
              "format": "date",
              "x-nullable": true
            },
            "sitRequestedDelivery": {
              "type": "string",
              "format": "date",
              "x-nullable": true
            }
          }
        },
        "pastSITServiceItemGroupings": {
          "description": "A list of past SIT service item groupings. These will contain the given SIT service items for an instance of SIT (Either Origin or Destination), grouped by the date they went into SIT and service items limited explicitly to SIT related Re Service Codes.\n",
          "$ref": "#/definitions/SITServiceItemGroupings"
        },
        "totalDaysRemaining": {
          "type": "integer",
          "minimum": 0
        },
        "totalSITDaysUsed": {
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "SITStatusCurrentSIT": {
      "type": "object",
      "properties": {
        "daysInSIT": {
          "type": "integer",
          "minimum": 0
        },
        "location": {
          "enum": [
            "ORIGIN",
            "DESTINATION"
          ]
        },
        "serviceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "sitAuthorizedEndDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitCustomerContacted": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitDepartureDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEntryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitRequestedDelivery": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        }
      }
    },
    "SITSummary": {
      "properties": {
        "daysInSIT": {
          "type": "integer",
          "minimum": 0
        },
        "firstDaySITServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "location": {
          "enum": [
            "ORIGIN",
            "DESTINATION"
          ]
        },
        "sitAuthorizedEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "sitCustomerContacted": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sitDepartureDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "sitEntryDate": {
          "type": "string",
          "format": "date-time"
        },
        "sitRequestedDelivery": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "SearchCustomer": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "dodID": {
          "type": "string",
          "x-nullable": true
        },
        "emplid": {
          "type": "string",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true,
          "example": "Doe"
        },
        "personalEmail": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true,
          "example": "personalEmail@email.com"
        },
        "telephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        }
      }
    },
    "SearchCustomers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SearchCustomer"
      }
    },
    "SearchCustomersResult": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "searchCustomers": {
          "$ref": "#/definitions/SearchCustomers"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "SearchMove": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "destinationDutyLocationPostalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "example": "90210"
        },
        "destinationGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "dodID": {
          "type": "string",
          "x-nullable": true,
          "example": 1234567890
        },
        "emplid": {
          "type": "string",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true,
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true,
          "example": "Doe"
        },
        "locator": {
          "type": "string"
        },
        "lockExpiresAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "lockedByOfficeUserID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "orderType": {
          "type": "string"
        },
        "originDutyLocationPostalCode": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "example": "90210"
        },
        "originGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "paymentRequestCode": {
          "type": "string",
          "x-nullable": true,
          "example": "9551-6199-2"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "shipmentsCount": {
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        }
      }
    },
    "SearchMoves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SearchMove"
      }
    },
    "SearchMovesResult": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "searchMoves": {
          "$ref": "#/definitions/SearchMoves"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "ServiceItemParamName": {
      "type": "string",
      "enum": [
        "ActualPickupDate",
        "ContractCode",
        "ContractYearName",
        "CubicFeetBilled",
        "CubicFeetCrating",
        "DimensionHeight",
        "DimensionLength",
        "DimensionWidth",
        "DistanceZip",
        "DistanceZipSITDest",
        "DistanceZipSITOrigin",
        "EIAFuelPrice",
        "EscalationCompounded",
        "FSCMultiplier",
        "FSCPriceDifferenceInCents",
        "FSCWeightBasedDistanceMultiplier",
        "IsPeak",
        "MarketDest",
        "MarketOrigin",
        "MTOAvailableToPrimeAt",
        "NTSPackingFactor",
        "NumberDaysSIT",
        "PriceAreaDest",
        "PriceAreaIntlDest",
        "PriceAreaIntlOrigin",
        "PriceAreaOrigin",
        "PriceRateOrFactor",
        "PSI_LinehaulDom",
        "PSI_LinehaulDomPrice",
        "PSI_LinehaulShort",
        "PSI_LinehaulShortPrice",
        "PSI_PriceDomDest",
        "PSI_PriceDomDestPrice",
        "PSI_PriceDomOrigin",
        "PSI_PriceDomOriginPrice",
        "PSI_ShippingLinehaulIntlCO",
        "PSI_ShippingLinehaulIntlCOPrice",
        "PSI_ShippingLinehaulIntlOC",
        "PSI_ShippingLinehaulIntlOCPrice",
        "PSI_ShippingLinehaulIntlOO",
        "PSI_ShippingLinehaulIntlOOPrice",
        "RateAreaNonStdDest",
        "RateAreaNonStdOrigin",
        "ReferenceDate",
        "RequestedPickupDate",
        "ServiceAreaDest",
        "ServiceAreaOrigin",
        "ServicesScheduleDest",
        "ServicesScheduleOrigin",
        "SITPaymentRequestEnd",
        "SITPaymentRequestStart",
        "SITScheduleDest",
        "SITScheduleOrigin",
        "SITServiceAreaDest",
        "SITServiceAreaOrigin",
        "WeightAdjusted",
        "WeightBilled",
        "WeightEstimated",
        "WeightOriginal",
        "WeightReweigh",
        "ZipDestAddress",
        "ZipPickupAddress",
        "ZipSITDestHHGFinalAddress",
        "ZipSITDestHHGOriginalAddress",
        "ZipSITOriginHHGActualAddress",
        "ZipSITOriginHHGOriginalAddress",
        "StandaloneCrate",
        "StandaloneCrateCap",
        "UncappedRequestTotal",
        "LockedPriceCents"
      ]
    },
    "ServiceItemParamOrigin": {
      "type": "string",
      "enum": [
        "PRIME",
        "SYSTEM",
        "PRICER",
        "PAYMENT_REQUEST"
      ]
    },
    "ServiceItemParamType": {
      "type": "string",
      "enum": [
        "STRING",
        "DATE",
        "INTEGER",
        "DECIMAL",
        "TIMESTAMP",
        "PaymentServiceItemUUID",
        "BOOLEAN"
      ]
    },
    "ServiceItemSitEntryDate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "sitEntryDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "ServiceRequestDocument": {
      "type": "object",
      "properties": {
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "ServiceRequestDocuments": {
      "description": "documents uploaded by the Prime as proof of request for service items",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceRequestDocument"
      }
    },
    "ShipmentAddressUpdate": {
      "description": "This represents a destination address change request made by the Prime that is either auto-approved or requires review if the pricing criteria has changed. If criteria has changed, then it must be approved or rejected by a TOO.\n",
      "type": "object",
      "required": [
        "id",
        "status",
        "shipmentID",
        "originalAddress",
        "newAddress",
        "contractorRemarks"
      ],
      "properties": {
        "contractorRemarks": {
          "description": "The reason there is an address change.",
          "type": "string",
          "title": "Contractor Remarks",
          "readOnly": true,
          "example": "This is a contractor remark"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "newAddress": {
          "$ref": "#/definitions/Address"
        },
        "newSitDistanceBetween": {
          "description": "The distance between the original SIT address and requested new destination address of shipment",
          "type": "integer",
          "minimum": 0,
          "example": 88
        },
        "officeRemarks": {
          "description": "The TOO comment on approval or rejection.",
          "type": "string",
          "title": "Office Remarks",
          "x-nullable": true,
          "example": "This is an office remark"
        },
        "oldSitDistanceBetween": {
          "description": "The distance between the original SIT address and the previous/old destination address of shipment",
          "type": "integer",
          "minimum": 0,
          "example": 50
        },
        "originalAddress": {
          "$ref": "#/definitions/Address"
        },
        "shipmentID": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "sitOriginalAddress": {
          "$ref": "#/definitions/Address"
        },
        "status": {
          "$ref": "#/definitions/ShipmentAddressUpdateStatus"
        }
      }
    },
    "ShipmentAddressUpdateStatus": {
      "type": "string",
      "title": "Status",
      "enum": [
        "REQUESTED",
        "REJECTED",
        "APPROVED"
      ],
      "x-display-value": {
        "APPROVED": "APPROVED",
        "REJECTED": "REJECTED",
        "REQUESTED": "REQUESTED"
      },
      "readOnly": true
    },
    "ShipmentPaymentSITBalance": {
      "properties": {
        "pendingBilledEndDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "pendingBilledStartDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "pendingSITDaysInvoiced": {
          "type": "integer"
        },
        "previouslyBilledDays": {
          "type": "integer",
          "x-nullable": true
        },
        "previouslyBilledEndDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "previouslyBilledStartDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "shipmentID": {
          "type": "string",
          "format": "uuid"
        },
        "totalSITDaysAuthorized": {
          "type": "integer"
        },
        "totalSITDaysRemaining": {
          "type": "integer"
        },
        "totalSITEndDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        }
      }
    },
    "ShipmentsPaymentSITBalance": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ShipmentPaymentSITBalance"
      }
    },
    "SignedCertification": {
      "description": "Signed certification",
      "type": "object",
      "required": [
        "id",
        "submittingUserId",
        "moveId",
        "certificationType",
        "certificationText",
        "signature",
        "date",
        "createdAt",
        "updatedAt",
        "eTag"
      ],
      "properties": {
        "certificationText": {
          "description": "Full text that the customer agreed to and signed.",
          "type": "string"
        },
        "certificationType": {
          "$ref": "#/definitions/SignedCertificationType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "date": {
          "description": "Date that the customer signed the certification.",
          "type": "string",
          "format": "date"
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "The ID of the signed certification.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "moveId": {
          "description": "The ID of the move associated with this signed certification.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ppmId": {
          "description": "The ID of the PPM shipment associated with this signed certification, if any.",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "x-omitempty": false,
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "signature": {
          "description": "The signature that the customer provided.",
          "type": "string"
        },
        "submittingUserId": {
          "description": "The ID of the user that signed.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SignedCertificationType": {
      "description": "The type of signed certification:\n  - PPM_PAYMENT: This is used when the customer has a PPM shipment that they have uploaded their documents for and are\n      ready to submit their documentation for review. When they submit, they will be asked to sign certifying the\n      information is correct.\n  - SHIPMENT: This is used when a customer submits their move with their shipments to be reviewed by office users.\n  - PRE_CLOSEOUT_REVIEWED_PPM_PAYMENT: This is used when a move has a PPM shipment and is set to\n       service-counseling-completed \"Submit move details\" by service counselor.\n  - CLOSEOUT_REVIEWED_PPM_PAYMENT: This is used when a PPM shipment is reviewed by counselor in close out queue.\n",
      "type": "string",
      "enum": [
        "PPM_PAYMENT",
        "SHIPMENT",
        "PRE_CLOSEOUT_REVIEWED_PPM_PAYMENT",
        "CLOSEOUT_REVIEWED_PPM_PAYMENT"
      ],
      "readOnly": true
    },
    "StorageFacility": {
      "description": "The Storage Facility information for the shipment",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "facilityName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "lotNumber": {
          "type": "string",
          "x-nullable": true
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        }
      }
    },
    "SubmittedMovingExpenseType": {
      "description": "Customer Submitted Moving Expense Type",
      "type": "string",
      "enum": [
        "CONTRACTED_EXPENSE",
        "GAS",
        "OIL",
        "OTHER",
        "PACKING_MATERIALS",
        "RENTAL_EQUIPMENT",
        "STORAGE",
        "TOLLS",
        "WEIGHING_FEE"
      ],
      "x-display-value": {
        "CONTRACTED_EXPENSE": "Contracted expense",
        "GAS": "Gas",
        "OIL": "Oil",
        "OTHER": "Other",
        "PACKING_MATERIALS": "Packing materials",
        "RENTAL_EQUIPMENT": "Rental equipment",
        "STORAGE": "Storage",
        "TOLLS": "Tolls",
        "WEIGHING_FEE": "Weighing fee"
      },
      "x-nullable": true,
      "x-omitempty": false
    },
    "TacValid": {
      "type": "object",
      "required": [
        "isValid"
      ],
      "properties": {
        "isValid": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "TransportationOffice": {
      "type": "object",
      "required": [
        "id",
        "name",
        "address",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "gbloc": {
          "type": "string",
          "pattern": "^[A-Z]{4}$",
          "example": "JENQ"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "example": 29.382973
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "example": -98.62759
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        },
        "phone_lines": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "telephone",
            "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
            "example": "212-555-5555"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TransportationOffices": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransportationOffice"
      }
    },
    "UpdateAllowancePayload": {
      "type": "object",
      "properties": {
        "agency": {
          "$ref": "#/definitions/Affiliation"
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "gunSafe": {
          "description": "True if user is entitled to move a gun safe (up to 500 lbs) as part of their move without it being charged against their weight allowance.",
          "type": "boolean",
          "x-nullable": true
        },
        "organizationalClothingAndIndividualEquipment": {
          "description": "only for Army",
          "type": "boolean",
          "x-nullable": true
        },
        "proGearWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "maximum": 2000,
          "minimum": 0,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "proGearWeightSpouse": {
          "description": "unit is in lbs",
          "type": "integer",
          "maximum": 500,
          "minimum": 0,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 500
        },
        "requiredMedicalEquipmentWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "minimum": 0,
          "x-formatting": "weight",
          "example": 2000
        },
        "storageInTransit": {
          "description": "the number of storage in transit days that the customer is entitled to for a given shipment on their move",
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "UpdateBillableWeightPayload": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "minimum": 1,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        }
      }
    },
    "UpdateBoatShipment": {
      "type": "object",
      "properties": {
        "hasTrailer": {
          "description": "Does the boat have a trailer",
          "type": "boolean",
          "x-nullable": true
        },
        "heightInInches": {
          "description": "Height of the Boat in inches",
          "type": "integer",
          "x-nullable": true
        },
        "isRoadworthy": {
          "description": "Is the trailer roadworthy",
          "type": "boolean",
          "x-nullable": true
        },
        "lengthInInches": {
          "description": "Length of the Boat in inches",
          "type": "integer",
          "x-nullable": true
        },
        "make": {
          "description": "Make of the Boat",
          "type": "string",
          "x-nullable": true
        },
        "model": {
          "description": "Model of the Boat",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "enum": [
            "HAUL_AWAY",
            "TOW_AWAY"
          ],
          "x-nullable": true
        },
        "widthInInches": {
          "description": "Width of the Boat in inches",
          "type": "integer",
          "x-nullable": true
        },
        "year": {
          "description": "Year of the Boat",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "UpdateCustomerPayload": {
      "type": "object",
      "properties": {
        "backupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "backup_contact": {
          "$ref": "#/definitions/BackupContact"
        },
        "cac_validated": {
          "type": "boolean"
        },
        "current_address": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "emailIsPreferred": {
          "type": "boolean"
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "middle_name": {
          "type": "string",
          "x-nullable": true,
          "example": "David"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "phoneIsPreferred": {
          "type": "boolean"
        },
        "secondaryTelephone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$|^$",
          "x-nullable": true
        },
        "suffix": {
          "type": "string",
          "x-nullable": true,
          "example": "Jr."
        }
      }
    },
    "UpdateCustomerSupportRemarkPayload": {
      "description": "A text remark update to an existing remark created by the current active user (the CSR).",
      "type": "object",
      "required": [
        "content"
      ],
      "properties": {
        "content": {
          "type": "string",
          "example": "This is a remark about a move."
        }
      }
    },
    "UpdateMaxBillableWeightAsTIOPayload": {
      "type": "object",
      "required": [
        "authorizedWeight",
        "tioRemarks"
      ],
      "properties": {
        "authorizedWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "minimum": 1,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "tioRemarks": {
          "description": "TIO remarks for updating the max billable weight",
          "type": "string",
          "minLength": 1,
          "x-nullable": true,
          "example": "Increasing max billable weight"
        }
      }
    },
    "UpdateMobileHomeShipment": {
      "type": "object",
      "properties": {
        "heightInInches": {
          "description": "Height of the Boat in inches",
          "type": "integer",
          "x-nullable": true
        },
        "lengthInInches": {
          "description": "Length of the Boat in inches",
          "type": "integer",
          "x-nullable": true
        },
        "make": {
          "description": "Make of the Boat",
          "type": "string",
          "x-nullable": true
        },
        "model": {
          "description": "Model of the Boat",
          "type": "string",
          "x-nullable": true
        },
        "widthInInches": {
          "description": "Width of the Boat in inches",
          "type": "integer",
          "x-nullable": true
        },
        "year": {
          "description": "Year of the Boat",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "UpdateMovingExpense": {
      "type": "object",
      "properties": {
        "amount": {
          "description": "The total amount of the expense as indicated on the receipt",
          "type": "integer"
        },
        "description": {
          "description": "A brief description of the expense.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "movingExpenseType": {
          "$ref": "#/definitions/OmittableMovingExpenseType"
        },
        "reason": {
          "description": "The reason the services counselor has excluded or rejected the item.",
          "type": "string"
        },
        "sitEndDate": {
          "description": "The date the shipment exited storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date"
        },
        "sitEstimatedCost": {
          "description": "The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "sitReimburseableAmount": {
          "description": "The amount of SIT that will be reimbursed",
          "type": "integer",
          "format": "cents",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sitStartDate": {
          "description": "The date the shipment entered storage, applicable for the ` + "`" + `STORAGE` + "`" + ` movingExpenseType only",
          "type": "string",
          "format": "date"
        },
        "status": {
          "$ref": "#/definitions/PPMDocumentStatus"
        },
        "weightStored": {
          "description": "The total weight stored in PPM SIT",
          "type": "integer"
        }
      }
    },
    "UpdateOrderPayload": {
      "type": "object",
      "required": [
        "issueDate",
        "reportByDate",
        "ordersType",
        "newDutyLocationId",
        "originDutyLocationId"
      ],
      "properties": {
        "departmentIndicator": {
          "x-nullable": true,
          "$ref": "#/definitions/DeptIndicator"
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "issueDate": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Orders date",
          "example": "2018-04-26"
        },
        "newDutyLocationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ntsSac": {
          "title": "NTS SAC",
          "$ref": "#/definitions/NullableString",
          "example": "N002214CSW32Y9"
        },
        "ntsTac": {
          "title": "NTS TAC",
          "maxLength": 4,
          "minLength": 4,
          "$ref": "#/definitions/NullableString",
          "example": "F8J1"
        },
        "ordersAcknowledgement": {
          "description": "Confirmation that the new amended orders were reviewed after previously approving the original orders",
          "type": "boolean",
          "x-nullable": true
        },
        "ordersNumber": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "ordersType": {
          "$ref": "#/definitions/OrdersType"
        },
        "ordersTypeDetail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyLocationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reportByDate": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report-by date",
          "example": "2018-04-26"
        },
        "sac": {
          "title": "HHG SAC",
          "$ref": "#/definitions/NullableString",
          "example": "N002214CSW32Y9"
        },
        "tac": {
          "type": "string",
          "title": "HHG TAC",
          "maxLength": 4,
          "minLength": 4,
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "UpdatePPMShipment": {
      "type": "object",
      "properties": {
        "actualDestinationPostalCode": {
          "description": "The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "example": "90210"
        },
        "actualMoveDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "actualPickupPostalCode": {
          "description": "The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment.\n",
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5})$",
          "x-nullable": true,
          "example": "90210"
        },
        "advanceAmountReceived": {
          "description": "The amount received for an advance, or null if no advance is received\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true
        },
        "advanceAmountRequested": {
          "description": "The amount request for an advance, or null if no advance is requested\n",
          "type": "integer",
          "format": "cents",
          "x-nullable": true
        },
        "advanceStatus": {
          "x-nullable": true,
          "$ref": "#/definitions/PPMAdvanceStatus"
        },
        "destinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "estimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 4200
        },
        "expectedDepartureDate": {
          "description": "Date the customer expects to move.\n",
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "hasProGear": {
          "description": "Indicates whether PPM shipment has pro gear.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "hasReceivedAdvance": {
          "description": "Indicates whether an advance was received for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "hasRequestedAdvance": {
          "description": "Indicates whether an advance has been requested for the PPM shipment.\n",
          "type": "boolean",
          "x-nullable": true
        },
        "hasSecondaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryDestinationAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "pickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "proGearWeight": {
          "type": "integer",
          "x-nullable": true
        },
        "secondaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "sitEstimatedDepartureDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedEntryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sitEstimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "sitExpected": {
          "type": "boolean",
          "x-nullable": true
        },
        "sitLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/SITLocationType"
            },
            {
              "x-nullable": true
            }
          ]
        },
        "spouseProGearWeight": {
          "type": "integer",
          "x-nullable": true
        },
        "tertiaryDestinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "tertiaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "w2Address": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        }
      }
    },
    "UpdatePaymentRequestStatusPayload": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "UpdateProGearWeightTicket": {
      "type": "object",
      "properties": {
        "belongsToSelf": {
          "description": "Indicates if this information is for the customer's own pro-gear, otherwise, it's the spouse's.",
          "type": "boolean"
        },
        "hasWeightTickets": {
          "description": "Indicates if the user has a weight ticket for their pro-gear, otherwise they have a constructed weight.",
          "type": "boolean"
        },
        "reason": {
          "description": "The reason the services counselor has excluded or rejected the item.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/PPMDocumentStatus"
        },
        "weight": {
          "description": "Weight of the pro-gear contained in the shipment.",
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "UpdateSITServiceItemCustomerExpense": {
      "required": [
        "convertToCustomerExpense",
        "customerExpenseReason"
      ],
      "properties": {
        "convertToCustomerExpense": {
          "type": "boolean",
          "example": true
        },
        "customerExpenseReason": {
          "description": "Reason the service item was rejected",
          "type": "string",
          "example": "Insufficent details provided"
        }
      }
    },
    "UpdateShipment": {
      "type": "object",
      "properties": {
        "actualProGearWeight": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "actualSpouseProGearWeight": {
          "type": "integer",
          "x-nullable": true,
          "x-omitempty": false
        },
        "agents": {
          "x-nullable": true,
          "$ref": "#/definitions/MTOAgents"
        },
        "billableWeightCap": {
          "description": "estimated weight of the shuttle service item provided by the prime",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2500
        },
        "billableWeightJustification": {
          "type": "string",
          "x-nullable": true,
          "example": "more weight than expected"
        },
        "boatShipment": {
          "$ref": "#/definitions/UpdateBoatShipment"
        },
        "counselorRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "counselor approved"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "destinationType": {
          "$ref": "#/definitions/DestinationType"
        },
        "hasSecondaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasSecondaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryDeliveryAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "hasTertiaryPickupAddress": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "mobileHomeShipment": {
          "$ref": "#/definitions/UpdateMobileHomeShipment"
        },
        "ntsRecordedWeight": {
          "description": "The previously recorded weight for the NTS Shipment. Used for NTS Release to know what the previous primeActualWeight or billable weight was.",
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "pickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "ppmShipment": {
          "$ref": "#/definitions/UpdatePPMShipment"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date",
          "x-nullable": true
        },
        "sacType": {
          "$ref": "#/definitions/LOATypeNullable"
        },
        "secondaryDeliveryAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "secondaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "serviceOrderNumber": {
          "type": "string",
          "x-nullable": true
        },
        "shipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "storageFacility": {
          "x-nullable": true,
          "$ref": "#/definitions/StorageFacility"
        },
        "tacType": {
          "$ref": "#/definitions/LOATypeNullable"
        },
        "tertiaryDeliveryAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "tertiaryPickupAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/Address"
            }
          ]
        },
        "usesExternalVendor": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        }
      }
    },
    "UpdateWeightTicket": {
      "type": "object",
      "properties": {
        "adjustedNetWeight": {
          "description": "Indicates the adjusted net weight of the vehicle",
          "type": "integer",
          "minimum": 0
        },
        "allowableWeight": {
          "description": "Indicates the maximum reimbursable weight of the shipment",
          "type": "integer",
          "minimum": 0
        },
        "emptyWeight": {
          "description": "Weight of the vehicle when empty.",
          "type": "integer",
          "minimum": 0
        },
        "fullWeight": {
          "description": "The weight of the vehicle when full.",
          "type": "integer",
          "minimum": 0
        },
        "netWeightRemarks": {
          "description": "Remarks explaining any edits made to the net weight",
          "type": "string"
        },
        "ownsTrailer": {
          "description": "Indicates if the customer used a trailer they own for the move.",
          "type": "boolean"
        },
        "reason": {
          "description": "The reason the services counselor has excluded or rejected the item.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/PPMDocumentStatus"
        },
        "trailerMeetsCriteria": {
          "description": "Indicates if the trailer that the customer used meets all the criteria to be claimable.",
          "type": "boolean"
        }
      }
    },
    "Upload": {
      "description": "An uploaded file.",
      "type": "object",
      "required": [
        "id",
        "url",
        "filename",
        "contentType",
        "bytes",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "bytes": {
          "type": "integer",
          "readOnly": true
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "readOnly": true,
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "readOnly": true,
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isWeightTicket": {
          "type": "boolean"
        },
        "rotation": {
          "type": "integer",
          "example": 2
        },
        "status": {
          "type": "string",
          "enum": [
            "INFECTED",
            "CLEAN",
            "PROCESSING"
          ],
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploadType": {
          "type": "string",
          "enum": [
            "USER",
            "PRIME",
            "OFFICE"
          ],
          "readOnly": true,
          "example": "OFFICE"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalid_fields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "$ref": "#/definitions/ValidationErrorAllOf1"
        }
      ],
      "properties": {
        "invalid_fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ValidationErrorAllOf1": {
      "type": "object"
    },
    "WeightTicket": {
      "description": "Vehicle and optional trailer information and weight documents used to move this PPM shipment.",
      "type": "object",
      "required": [
        "ppmShipmentId",
        "createdAt",
        "updatedAt",
        "emptyDocumentId",
        "emptyDocument",
        "fullDocument",
        "fullDocumentId",
        "proofOfTrailerOwnershipDocument",
        "proofOfTrailerOwnershipDocumentId"
      ],
      "properties": {
        "adjustedNetWeight": {
          "description": "Indicates the adjusted net weight of the vehicle",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        },
        "allowableWeight": {
          "description": "Maximum reimbursable weight.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "eTag": {
          "description": "A hash that should be used as the \"If-Match\" header for any updates.",
          "type": "string",
          "readOnly": true
        },
        "emptyDocument": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the vehicle weight when empty."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "emptyDocumentId": {
          "description": "ID of the document that is associated with the user uploads containing the vehicle weight when empty.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "emptyWeight": {
          "description": "Weight of the vehicle when empty.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        },
        "fullDocument": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the vehicle weight when full."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "fullDocumentId": {
          "description": "ID of the document that is associated with the user uploads containing the vehicle weight when full.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "fullWeight": {
          "description": "The weight of the vehicle when full.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        },
        "id": {
          "description": "ID of this set of weight tickets.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "missingEmptyWeightTicket": {
          "description": "Indicates if the customer is missing a weight ticket for the vehicle weight when empty.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "missingFullWeightTicket": {
          "description": "Indicates if the customer is missing a weight ticket for the vehicle weight when full.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "netWeightRemarks": {
          "description": "Remarks explaining any edits made to the net weight",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ownsTrailer": {
          "description": "Indicates if the customer used a trailer they own for the move.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "ppmShipmentId": {
          "description": "The ID of the PPM shipment that this set of weight tickets is for.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "proofOfTrailerOwnershipDocument": {
          "allOf": [
            {
              "description": "Document that is associated with the user uploads containing the proof of trailer ownership."
            },
            {
              "$ref": "#/definitions/Document"
            }
          ]
        },
        "proofOfTrailerOwnershipDocumentId": {
          "description": "ID of the document that is associated with the user uploads containing the proof of trailer ownership.",
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reason": {
          "$ref": "#/definitions/PPMDocumentStatusReason"
        },
        "status": {
          "$ref": "#/definitions/OmittablePPMDocumentStatus"
        },
        "submittedEmptyWeight": {
          "description": "Customer submitted weight of the vehicle when empty.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedFullWeight": {
          "description": "Customer submitted weight of the vehicle when full.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedOwnsTrailer": {
          "description": "Indicates if the customer used a trailer they own for the move.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "submittedTrailerMeetsCriteria": {
          "description": "Indicates if the trailer that the customer used meets all the criteria to be claimable.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "trailerMeetsCriteria": {
          "description": "Indicates if the trailer that the customer used meets all the criteria to be claimable.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "vehicleDescription": {
          "description": "Description of the vehicle used for the trip. E.g. make/model, type of truck/van, etc.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false
        }
      }
    },
    "WeightTickets": {
      "description": "All weight tickets associated with a PPM shipment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/WeightTicket"
      },
      "x-omitempty": false
    }
  },
  "parameters": {
    "ifMatch": {
      "type": "string",
      "description": "Optimistic locking is implemented via the ` + "`" + `If-Match` + "`" + ` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a ` + "`" + `412 Precondition Failed` + "`" + ` error.\n",
      "name": "If-Match",
      "in": "header",
      "required": true
    },
    "movingExpenseId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the moving expense",
      "name": "movingExpenseId",
      "in": "path",
      "required": true
    },
    "ppmShipmentId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the PPM shipment",
      "name": "ppmShipmentId",
      "in": "path",
      "required": true
    },
    "proGearWeightTicketId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the pro-gear weight ticket",
      "name": "proGearWeightTicketId",
      "in": "path",
      "required": true
    },
    "weightTicketId": {
      "type": "string",
      "format": "uuid",
      "description": "UUID of the weight ticket",
      "name": "weightTicketId",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "Conflict": {
      "description": "Conflict error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ServerError": {
      "description": "A server error occurred",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "The payload was unprocessable.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "queues"
    },
    {
      "name": "move"
    },
    {
      "description": "Move Orders - Commonly called “Orders,” especially in customer-facing language. Orders are plural because they're a bundle of related orders issued bya Service (e.g. Army, Air Force, Navy) to a customer that authorize (and order) that customer to move from one location to another.\nOrders are backed by $$ in the bank to support that move, which is identified by a Line of Account (LOA) code on the orders document.\n",
      "name": "order"
    },
    {
      "name": "moveTaskOrder"
    },
    {
      "name": "customer"
    },
    {
      "name": "mtoServiceItem"
    },
    {
      "name": "mtoShipment"
    },
    {
      "name": "shipment"
    },
    {
      "name": "mtoAgent"
    },
    {
      "name": "paymentServiceItem"
    },
    {
      "name": "ppm"
    },
    {
      "name": "tac"
    },
    {
      "name": "transportationOffice"
    },
    {
      "name": "uploads"
    },
    {
      "name": "paymentRequests"
    }
  ]
}`))
}
