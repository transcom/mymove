// Code generated by go-swagger; DO NOT EDIT.

package ghcapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The API for move.mil",
    "title": "move.mil API",
    "contact": {
      "email": "dp3@truss.works"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/ghc/v1",
  "paths": {
    "/customer/{customerID}": {
      "get": {
        "description": "Returns a given customer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Returns a given customer",
        "operationId": "getCustomer",
        "responses": {
          "200": {
            "description": "Successfully retrieved information on an individual customer",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of customer to use",
          "name": "customerID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/documents/{documentId}": {
      "get": {
        "description": "Returns a document and its uploads",
        "tags": [
          "ghcDocuments"
        ],
        "summary": "Returns a document",
        "operationId": "getDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to return",
            "name": "documentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the requested document",
            "schema": {
              "$ref": "#/definitions/DocumentPayload"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      }
    },
    "/move-orders/{orderID}": {
      "get": {
        "description": "Gets an order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Gets an order by ID",
        "operationId": "getOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieved order",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "patch": {
        "description": "All fields sent in this request will be set on the order referenced",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates an order",
        "operationId": "updateMoveOrder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMoveOrderPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of orders",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was unauthenticated",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was unauthorized",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-orders/{orderID}/move-task-orders": {
      "get": {
        "description": "Gets move task orders associated with an order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Gets move task orders associated with an order",
        "operationId": "listMoveTaskOrders",
        "responses": {
          "200": {
            "description": "Successfully retrieved all move task orders associated with an order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrders"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}": {
      "get": {
        "description": "Gets a move order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Gets a move order by ID",
        "operationId": "getMoveTaskOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieved move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a move order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Deletes a move order by ID",
        "operationId": "deleteMoveTaskOrder",
        "responses": {
          "200": {
            "description": "Successfully deleted move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "patch": {
        "description": "Updates a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Updates a move order by ID",
        "operationId": "updateMoveTaskOrder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/entitlements": {
      "get": {
        "description": "Gets entitlements",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Gets entitlements for a move order by ID",
        "operationId": "getEntitlements",
        "responses": {
          "200": {
            "description": "Successfully retrieved entitlements",
            "schema": {
              "$ref": "#/definitions/Entitlements"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/payment-service-items/{paymentServiceItemID}/status": {
      "patch": {
        "description": "Changes the status of a line item for a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentServiceItem"
        ],
        "summary": "Change the status of a payment service item for a move order by ID",
        "operationId": "updatePaymentServiceItemStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentServiceItem"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status for a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/PaymentServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of payment service item to use",
          "name": "paymentServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}": {
      "get": {
        "description": "Gets a line item by ID for a move order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Gets a line item by ID for a move order by ID",
        "operationId": "getMTOServiceItem",
        "responses": {
          "200": {
            "description": "Successfully retrieved a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a line item by ID for a move order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Deletes a line item by ID for a move order by ID",
        "operationId": "deleteMTOServiceItem",
        "responses": {
          "200": {
            "description": "Successfully deleted move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "patch": {
        "description": "Updates a service item by ID for a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Updates a service item by ID for a move order by ID",
        "operationId": "updateMTOServiceItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order status",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of line item to use",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}/status": {
      "patch": {
        "description": "Changes the status of a line item for a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Change the status of a line item for a move order by ID",
        "operationId": "updateMTOServiceItemStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMTOServiceItemStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status for a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of line item to use",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/status": {
      "patch": {
        "description": "Changes move task order status to make it available to prime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Change the status of a move task order to make it available to prime",
        "operationId": "updateMoveTaskOrderStatus",
        "parameters": [
          {
            "type": "string",
            "description": "ID of move order to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "serviceItemCodes",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOApprovalServiceItemCodes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order status",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/responses/Conflict"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      }
    },
    "/move/{locator}": {
      "get": {
        "description": "Returns a given move for a unique alphanumeric locator string",
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Returns a given move",
        "operationId": "getMove",
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "The locator provided is invalid"
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Code used to identify a move in the system",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_service_items": {
      "get": {
        "description": "Gets all line items for a move orders",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Gets all line items for a move order",
        "operationId": "listMTOServiceItems",
        "responses": {
          "200": {
            "description": "Successfully retrieved all line items for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOServiceItems"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move order for mto service item to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments": {
      "get": {
        "description": "Gets all shipments for a move task order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Gets all shipments for a move task order",
        "operationId": "listMTOShipments",
        "responses": {
          "200": {
            "description": "Successfully retrieved all mto shipments for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOShipments"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order for mto shipment to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}/mto-agents": {
      "get": {
        "description": "Fetches a list of agents associated with a move task order.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoAgent"
        ],
        "summary": "Fetch move task order agents.",
        "operationId": "fetchMTOAgentList",
        "responses": {
          "200": {
            "description": "Successfully retrieved all agents for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOAgents"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}/status": {
      "patch": {
        "description": "Updates a shipment's status",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Updates a shipment's status",
        "operationId": "patchMTOShipmentStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMTOShipmentStatus"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated shipment",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "$ref": "#/responses/Conflict"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order for mto shipment to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{locator}/payment-requests": {
      "get": {
        "description": "Fetches payment requests for a move",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Fetches payment requests using the move code (locator).",
        "operationId": "getPaymentRequestsForMove",
        "responses": {
          "200": {
            "description": "Successfully retrieved all line items for a move task order",
            "schema": {
              "$ref": "#/definitions/PaymentRequests"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "string",
          "description": "move code to identify a move for payment requests",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}": {
      "get": {
        "description": "Fetches an instance of a payment request by id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Fetches a payment request by id",
        "operationId": "getPaymentRequest",
        "responses": {
          "200": {
            "description": "fetched instance of payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of payment request",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}/status": {
      "patch": {
        "description": "Updates status of a payment request by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Updates status of a payment request by id",
        "operationId": "updatePaymentRequestStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of payment request",
            "name": "paymentRequestID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePaymentRequestStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/responses/PreconditionFailed"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      }
    },
    "/queues/moves": {
      "get": {
        "description": "An office TOO user will be assigned a transportation office that will determine which moves are displayed in their queue based on the origin duty station.  GHC moves will show up here onced they have reached the submitted status sent by the customer and have move task orders, shipments, and service items to approve.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "Gets queued list of all customer moves by GBLOC origin",
        "operationId": "getMovesQueue",
        "parameters": [
          {
            "type": "integer",
            "description": "requested page of results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "results per page",
            "name": "perPage",
            "in": "query"
          },
          {
            "enum": [
              "lastName",
              "dodID",
              "branch",
              "locator",
              "status",
              "destinationDutyStation"
            ],
            "type": "string",
            "description": "field that results should be sorted by",
            "name": "sort",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "direction of sort order if applied",
            "name": "order",
            "in": "query"
          },
          {
            "type": "string",
            "name": "branch",
            "in": "query"
          },
          {
            "type": "string",
            "name": "locator",
            "in": "query"
          },
          {
            "type": "string",
            "name": "lastName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "dodID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "destinationDutyStation",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "SUBMITTED",
                "APPROVALS REQUESTED",
                "APPROVED"
              ],
              "type": "string"
            },
            "description": "Filtering for the status.",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/QueueMovesResult"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      }
    },
    "/queues/payment-requests": {
      "get": {
        "description": "An office TIO user will be assigned a transportation office that will determine which payment requests are displayed in their queue based on the origin duty station.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "Gets queued list of all payment requests by GBLOC origin",
        "operationId": "getPaymentRequestsQueue",
        "parameters": [
          {
            "enum": [
              "lastName",
              "locator",
              "submittedAt",
              "branch",
              "status",
              "dodID",
              "age"
            ],
            "type": "string",
            "description": "field that results should be sorted by",
            "name": "sort",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "direction of sort order if applied",
            "name": "order",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "requested page of results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "number of records to include per page",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date",
            "description": "limit results to those matching submitted at date",
            "name": "submittedAt",
            "in": "query"
          },
          {
            "type": "string",
            "name": "branch",
            "in": "query"
          },
          {
            "type": "string",
            "name": "locator",
            "in": "query"
          },
          {
            "type": "string",
            "name": "lastName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "dodID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "destinationDutyStation",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "Payment requested",
                "Reviewed",
                "Rejected",
                "Paid"
              ],
              "type": "string"
            },
            "description": "Filtering for the status.",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/QueuePaymentRequestsResult"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      }
    },
    "/tac/valid": {
      "get": {
        "description": "Returns a boolean based on whether a tac value is valid or not",
        "tags": [
          "tac",
          "order"
        ],
        "summary": "Validation of a TAC value",
        "operationId": "tacValidation",
        "parameters": [
          {
            "type": "string",
            "description": "The tac value to validate",
            "name": "tac",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved validation status",
            "schema": {
              "$ref": "#/definitions/TacValid"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "$ref": "#/responses/InvalidRequest"
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "$ref": "#/responses/PermissionDenied"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "$ref": "#/responses/NotFound"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "$ref": "#/responses/ServerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "required": [
        "street_address_1",
        "city",
        "state",
        "postal_code"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "street_address_1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "street_address_2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "street_address_3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "BackupContact": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        }
      }
    },
    "Branch": {
      "type": "string",
      "title": "branch",
      "enum": [
        "ARMY",
        "NAVY",
        "MARINES",
        "AIR_FORCE",
        "COAST_GUARD",
        "OTHER"
      ],
      "x-display-value": {
        "AIR_FORCE": "Air Force",
        "ARMY": "Army",
        "COAST_GUARD": "Coast Guard",
        "MARINES": "Marines",
        "NAVY": "Navy",
        "OTHER": "OTHER"
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "Contractor": {
      "properties": {
        "contractNumber": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "agency": {
          "type": "string",
          "title": "Agency customer is affilated with"
        },
        "backup_contact": {
          "x-nullable": true,
          "$ref": "#/definitions/BackupContact"
        },
        "current_address": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "dodID": {
          "type": "string"
        },
        "eTag": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "CustomerContactType": {
      "description": "Describes a customer contact type for a MTOServiceItem of type domestic destination SIT.",
      "type": "string",
      "enum": [
        "FIRST",
        "SECOND"
      ]
    },
    "DeptIndicator": {
      "type": "string",
      "title": "Dept. indicator",
      "enum": [
        "NAVY_AND_MARINES",
        "ARMY",
        "AIR_FORCE",
        "COAST_GUARD"
      ],
      "x-display-value": {
        "AIR_FORCE": "57 Air Force",
        "ARMY": "21 Army",
        "COAST_GUARD": "70 Coast Guard",
        "NAVY_AND_MARINES": "17 Navy and Marine Corps"
      },
      "x-nullable": true
    },
    "DimensionType": {
      "description": "Describes a dimension type for a MTOServiceItemDimension.",
      "type": "string",
      "enum": [
        "ITEM",
        "CRATE"
      ]
    },
    "DocumentPayload": {
      "type": "object",
      "required": [
        "id",
        "service_member_id",
        "uploads"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "DutyStation": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "address_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        }
      }
    },
    "Entitlements": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "571008b1-b0de-454d-b843-d71be9f02c04"
        },
        "nonTemporaryStorage": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "privatelyOwnedVehicle": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "proGearWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 2000
        },
        "proGearWeightSpouse": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "storageInTransit": {
          "type": "integer",
          "x-nullable": true,
          "example": 90
        },
        "totalDependents": {
          "type": "integer",
          "example": 2
        },
        "totalWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "GBLOC": {
      "type": "string",
      "enum": [
        "AGFM",
        "APAT",
        "BGAC",
        "BGNC",
        "BKAS",
        "CFMQ",
        "CLPK",
        "CNNQ",
        "DMAT",
        "GSAT",
        "HAFC",
        "HBAT",
        "JEAT",
        "JENQ",
        "KKFA",
        "LHNQ",
        "LKNQ",
        "MAPK",
        "MAPS",
        "MBFL",
        "MLNQ",
        "XXXX"
      ]
    },
    "Grade": {
      "type": "string",
      "title": "grade",
      "enum": [
        "E_1",
        "E_2",
        "E_3",
        "E_4",
        "E_5",
        "E_6",
        "E_7",
        "E_8",
        "E_9",
        "O_1_ACADEMY_GRADUATE",
        "O_2",
        "O_3",
        "O_4",
        "O_5",
        "O_6",
        "O_7",
        "O_8",
        "O_9",
        "O_10",
        "W_1",
        "W_2",
        "W_3",
        "W_4",
        "W_5",
        "AVIATION_CADET",
        "CIVILIAN_EMPLOYEE",
        "ACADEMY_CADET",
        "MIDSHIPMAN"
      ],
      "x-display-value": {
        "ACADEMY_CADET": "Service Academy Cadet",
        "AVIATION_CADET": "Aviation Cadet",
        "CIVILIAN_EMPLOYEE": "Civilian Employee",
        "E_1": "E-1",
        "E_2": "E-2",
        "E_3": "E-3",
        "E_4": "E-4",
        "E_5": "E-5",
        "E_6": "E-6",
        "E_7": "E-7",
        "E_8": "E-8",
        "E_9": "E-9",
        "MIDSHIPMAN": "Midshipman",
        "O_10": "O-10",
        "O_1_ACADEMY_GRADUATE": "O-1/Service Academy Graduate",
        "O_2": "O-2",
        "O_3": "O-3",
        "O_4": "O-4",
        "O_5": "O-5",
        "O_6": "O-6",
        "O_7": "O-7",
        "O_8": "O-8",
        "O_9": "O-9",
        "W_1": "W-1",
        "W_2": "W-2",
        "W_3": "W-3",
        "W_4": "W-4",
        "W_5": "W-5"
      },
      "x-nullable": true
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "type": "string",
          "enum": [
            "RELEASING_AGENT",
            "RECEIVING_AGENT"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOAgents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOApprovalServiceItemCodes": {
      "description": "MTO level service items to create when updating MTO status.",
      "type": "object",
      "properties": {
        "serviceCodeCS": {
          "type": "boolean",
          "example": true
        },
        "serviceCodeMS": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "MTOServiceItem": {
      "type": "object",
      "required": [
        "id",
        "moveTaskOrderID",
        "reServiceID",
        "reServiceCode",
        "reServiceName",
        "mtoShipmentID",
        "reason",
        "pickupPostalCode",
        "description"
      ],
      "properties": {
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerContacts": {
          "$ref": "#/definitions/MTOServiceItemCustomerContacts"
        },
        "deletedAt": {
          "type": "string",
          "format": "date"
        },
        "description": {
          "type": "string"
        },
        "dimensions": {
          "$ref": "#/definitions/MTOServiceItemDimensions"
        },
        "eTag": {
          "type": "string"
        },
        "feeType": {
          "type": "string",
          "enum": [
            "COUNSELING",
            "CRATING",
            "TRUCKING",
            "SHUTTLE"
          ]
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupPostalCode": {
          "type": "string"
        },
        "quantity": {
          "type": "integer"
        },
        "rate": {
          "type": "integer"
        },
        "reServiceCode": {
          "type": "string"
        },
        "reServiceID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "rejectedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date"
        },
        "total": {
          "type": "integer",
          "format": "cents"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOServiceItemCustomerContact": {
      "description": "Customer contact information for a destination SIT service item",
      "type": "object",
      "properties": {
        "firstAvailableDeliveryDate": {
          "description": "First available date that Prime can deliver SIT service item.",
          "type": "string",
          "format": "date",
          "example": "2020-12-31"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "timeMilitary": {
          "description": "Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate` + "`" + `.",
          "type": "string",
          "example": "0400Z"
        },
        "type": {
          "$ref": "#/definitions/CustomerContactType"
        }
      }
    },
    "MTOServiceItemCustomerContacts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItemCustomerContact"
      }
    },
    "MTOServiceItemDimension": {
      "description": "Describes a dimension object for the MTOServiceItem.",
      "type": "object",
      "properties": {
        "height": {
          "description": "Height in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "length": {
          "description": "Length in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "type": {
          "$ref": "#/definitions/DimensionType"
        },
        "width": {
          "description": "Width in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        }
      }
    },
    "MTOServiceItemDimensions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItemDimension"
      }
    },
    "MTOServiceItemStatus": {
      "description": "Describes all statuses for a MTOServiceItem",
      "type": "string",
      "enum": [
        "SUBMITTED",
        "APPROVED",
        "REJECTED"
      ]
    },
    "MTOServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItem"
      }
    },
    "MTOShipment": {
      "properties": {
        "approvedDate": {
          "type": "string",
          "format": "date"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoAgents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "mtoServiceItems": {
          "$ref": "#/definitions/MTOServiceItems"
        },
        "pickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "primeActualWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "primeEstimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment not good enough"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "scheduledPickupDate": {
          "type": "string",
          "format": "date"
        },
        "secondaryDeliveryAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "enum": [
            "HHG",
            "INTERNATIONAL_HHG",
            "INTERNATIONAL_UB"
          ]
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOShipmentStatus": {
      "type": "string",
      "title": "Shipment Status",
      "enum": [
        "SUBMITTED",
        "REJECTED",
        "APPROVED",
        "CANCELLATION_REQUESTED"
      ],
      "example": "SUBMITTED"
    },
    "MTOShipmentType": {
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "HHG",
        "HHG_LONGHAUL_DOMESTIC",
        "HHG_SHORTHAUL_DOMESTIC",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "INTERNATIONAL_HHG",
        "INTERNATIONAL_UB"
      ],
      "x-display-value": {
        "HHG": "HHG",
        "INTERNATIONAL_HHG": "International HHG",
        "INTERNATIONAL_UB": "International UB"
      },
      "example": "HHG"
    },
    "MTOShipments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "Move": {
      "properties": {
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "contractor": {
          "$ref": "#/definitions/Contractor"
        },
        "contractorId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "locator": {
          "type": "string",
          "example": "1K43AR"
        },
        "orders": {
          "$ref": "#/definitions/Order"
        },
        "ordersId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "referenceId": {
          "type": "string",
          "x-nullable": true,
          "example": "1001-3456"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveStatus": {
      "type": "string",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVALS REQUESTED",
        "APPROVED",
        "CANCELED"
      ]
    },
    "MoveTaskOrder": {
      "type": "object",
      "properties": {
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "destinationDutyStation": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "eTag": {
          "type": "string"
        },
        "entitlements": {
          "$ref": "#/definitions/Entitlements"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "isCanceled": {
          "type": "boolean",
          "x-nullable": true
        },
        "locator": {
          "type": "string",
          "example": "1K43AR"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "originDutyStation": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveTaskOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveTaskOrder"
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "agency": {
          "type": "string",
          "$ref": "#/definitions/Branch"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "customerID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "date_issued": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "department_indicator": {
          "x-nullable": true,
          "$ref": "#/definitions/DeptIndicator"
        },
        "destinationDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "eTag": {
          "type": "string"
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlements"
        },
        "first_name": {
          "type": "string",
          "readOnly": true,
          "example": "John"
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "has_dependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?",
          "example": false
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "last_name": {
          "type": "string",
          "readOnly": true,
          "example": "Doe"
        },
        "moveCode": {
          "type": "string",
          "example": "H2XFJF"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "order_number": {
          "type": "string",
          "x-nullable": true,
          "example": "030-00362"
        },
        "order_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "order_type_detail": {
          "x-nullable": true,
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "report_by_date": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "spouse_has_pro_gear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?",
          "example": false
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        },
        "uploaded_order_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "RETIREMENT",
        "SEPARATION"
      ],
      "x-display-value": {
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station",
        "RETIREMENT": "Retirement",
        "SEPARATION": "Separation"
      }
    },
    "OrdersTypeDetail": {
      "type": "string",
      "title": "Orders type detail",
      "enum": [
        "HHG_PERMITTED",
        "PCS_TDY",
        "HHG_RESTRICTED_PROHIBITED",
        "HHG_RESTRICTED_AREA",
        "INSTRUCTION_20_WEEKS",
        "HHG_PROHIBITED_20_WEEKS",
        "DELAYED_APPROVAL"
      ],
      "x-display-value": {
        "DELAYED_APPROVAL": "Delayed Approval 20 Weeks or More",
        "HHG_PERMITTED": "Shipment of HHG Permitted",
        "HHG_PROHIBITED_20_WEEKS": "Shipment of HHG Prohibited but Authorized within 20 weeks",
        "HHG_RESTRICTED_AREA": "HHG Restricted Area-HHG Prohibited",
        "HHG_RESTRICTED_PROHIBITED": "Shipment of HHG Restricted or Prohibited",
        "INSTRUCTION_20_WEEKS": "Course of Instruction 20 Weeks or More",
        "PCS_TDY": "PCS with TDY Enroute"
      },
      "x-nullable": true
    },
    "PatchMTOServiceItemStatusPayload": {
      "properties": {
        "rejectionReason": {
          "description": "Reason the service item was rejected",
          "type": "string",
          "x-nullable": true,
          "example": "Insufficent details provided"
        },
        "status": {
          "description": "Describes all statuses for a MTOServiceItem",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "APPROVED",
            "REJECTED"
          ]
        }
      }
    },
    "PatchMTOShipmentStatus": {
      "required": [
        "status"
      ],
      "properties": {
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment not good enough"
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        }
      }
    },
    "PaymentRequest": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrder": {
          "$ref": "#/definitions/Move"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestNumber": {
          "type": "string",
          "readOnly": true,
          "example": "1234-5678-1"
        },
        "proofOfServiceDocs": {
          "$ref": "#/definitions/ProofOfServiceDocs"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "reviewedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "serviceItems": {
          "$ref": "#/definitions/PaymentServiceItems"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "PaymentRequestStatus": {
      "type": "string",
      "title": "Payment Request Status",
      "enum": [
        "PENDING",
        "REVIEWED",
        "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
        "SENT_TO_GEX",
        "RECEIVED_BY_GEX",
        "PAID"
      ]
    },
    "PaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentRequest"
      }
    },
    "PaymentServiceItem": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemName": {
          "type": "string",
          "example": "Move management"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoShipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "paymentRequestID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentServiceItemParams": {
          "$ref": "#/definitions/PaymentServiceItemParams"
        },
        "priceCents": {
          "type": "integer",
          "format": "cents",
          "title": "Price of the service item in cents",
          "x-nullable": true
        },
        "referenceID": {
          "format": "string",
          "readOnly": true,
          "example": "1234-5678-c56a4180"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentServiceItemStatus"
        }
      }
    },
    "PaymentServiceItemParam": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "key": {
          "$ref": "#/definitions/ServiceItemParamName"
        },
        "origin": {
          "$ref": "#/definitions/ServiceItemParamOrigin"
        },
        "paymentServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "type": {
          "$ref": "#/definitions/ServiceItemParamType"
        },
        "value": {
          "type": "string",
          "example": 3025
        }
      }
    },
    "PaymentServiceItemParams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItemParam"
      }
    },
    "PaymentServiceItemStatus": {
      "type": "string",
      "title": "Payment Service Item Status",
      "enum": [
        "REQUESTED",
        "APPROVED",
        "DENIED",
        "SENT_TO_GEX",
        "PAID"
      ]
    },
    "PaymentServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItem"
      }
    },
    "ProofOfServiceDoc": {
      "properties": {
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "ProofOfServiceDocs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProofOfServiceDoc"
      }
    },
    "QueueMove": {
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "departmentIndicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "destinationDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "locator": {
          "type": "string"
        },
        "originGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "shipmentsCount": {
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/QueueMoveStatus"
        }
      }
    },
    "QueueMoveStatus": {
      "type": "string",
      "enum": [
        "New move",
        "Move approved",
        "Approvals requested"
      ]
    },
    "QueueMoves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QueueMove"
      }
    },
    "QueueMovesResult": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "queueMoves": {
          "$ref": "#/definitions/QueueMoves"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "QueuePaymentRequest": {
      "type": "object",
      "properties": {
        "age": {
          "description": "Days since the payment request has been requested.  Decimal representation will allow more accurate sorting.",
          "type": "number",
          "format": "integer"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "departmentIndicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "locator": {
          "type": "string"
        },
        "moveID": {
          "type": "string",
          "format": "uuid"
        },
        "originGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "QueuePaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QueuePaymentRequest"
      }
    },
    "QueuePaymentRequestsResult": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "queuePaymentRequests": {
          "$ref": "#/definitions/QueuePaymentRequests"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "ServiceItemParamName": {
      "type": "string",
      "enum": [
        "ActualPickupDate",
        "CanStandAlone",
        "ContractCode",
        "CubicFeetBilled",
        "CubicFeetCrating",
        "DistanceZip3",
        "DistanceZip5",
        "DistanceZipSITDest",
        "DistanceZipSITOrigin",
        "EIAFuelPrice",
        "FSCWeightBasedDistanceMultiplier",
        "MarketDest",
        "MarketOrigin",
        "MTOAvailableToPrimeAt",
        "NumberDaysSIT",
        "PriceAreaDest",
        "PriceAreaIntlDest",
        "PriceAreaIntlOrigin",
        "PriceAreaOrigin",
        "PSI_LinehaulDom",
        "PSI_LinehaulDomPrice",
        "PSI_LinehaulShort",
        "PSI_LinehaulShortPrice",
        "PSI_PackingDom",
        "PSI_PackingDomPrice",
        "PSI_PackingHHGIntl",
        "PSI_PackingHHGIntlPrice",
        "PSI_PriceDomDest",
        "PSI_PriceDomDestPrice",
        "PSI_PriceDomOrigin",
        "PSI_PriceDomOriginPrice",
        "PSI_ShippingLinehaulIntlCO",
        "PSI_ShippingLinehaulIntlCOPrice",
        "PSI_ShippingLinehaulIntlOC",
        "PSI_ShippingLinehaulIntlOCPrice",
        "PSI_ShippingLinehaulIntlOO",
        "PSI_ShippingLinehaulIntlOOPrice",
        "RateAreaNonStdDest",
        "RateAreaNonStdOrigin",
        "RequestedPickupDate",
        "ServiceAreaDest",
        "ServiceAreaOrigin",
        "ServicesScheduleDest",
        "ServicesScheduleOrigin",
        "SITScheduleDest",
        "SITScheduleOrigin",
        "WeightActual",
        "WeightBilledActual",
        "WeightEstimated",
        "ZipDestAddress",
        "ZipPickupAddress",
        "ZipSITDestHHGFinalAddress"
      ]
    },
    "ServiceItemParamOrigin": {
      "type": "string",
      "enum": [
        "PRIME",
        "SYSTEM"
      ]
    },
    "ServiceItemParamType": {
      "type": "string",
      "enum": [
        "STRING",
        "DATE",
        "INTEGER",
        "DECIMAL",
        "TIMESTAMP",
        "PaymentServiceItemUUID"
      ]
    },
    "TacValid": {
      "type": "object",
      "required": [
        "isValid"
      ],
      "properties": {
        "isValid": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "UpdateMoveOrderPayload": {
      "type": "object",
      "required": [
        "issueDate",
        "reportByDate",
        "ordersType",
        "newDutyStationId",
        "originDutyStationId",
        "agency"
      ],
      "properties": {
        "agency": {
          "description": "the branch that the service member belongs to",
          "$ref": "#/definitions/Branch"
        },
        "authorizedWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "minimum": 1,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "departmentIndicator": {
          "x-nullable": true,
          "$ref": "#/definitions/DeptIndicator"
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "issueDate": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Orders date",
          "example": "2018-04-26"
        },
        "newDutyStationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ordersNumber": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "ordersType": {
          "$ref": "#/definitions/OrdersType"
        },
        "ordersTypeDetail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyStationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reportByDate": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report-by date",
          "example": "2018-04-26"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "UpdatePaymentRequestStatusPayload": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "Upload": {
      "type": "object",
      "required": [
        "id",
        "url",
        "filename",
        "contentType",
        "bytes",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "bytes": {
          "type": "integer"
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "filename": {
          "type": "string",
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "type": "string",
          "enum": [
            "INFECTED",
            "CLEAN",
            "PROCESSING"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalid_fields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "type": "object"
        }
      ],
      "properties": {
        "invalid_fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    }
  },
  "responses": {
    "Conflict": {
      "description": "Conflict error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ServerError": {
      "description": "A server error occurred",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "tags": [
    {
      "name": "queues"
    },
    {
      "name": "move"
    },
    {
      "name": "order"
    },
    {
      "name": "moveTaskOrder"
    },
    {
      "name": "customer"
    },
    {
      "name": "mtoServiceItem"
    },
    {
      "name": "mtoShipment"
    },
    {
      "name": "mtoAgent"
    },
    {
      "name": "paymentServiceItem"
    },
    {
      "name": "tac"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The API for move.mil",
    "title": "move.mil API",
    "contact": {
      "email": "dp3@truss.works"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "basePath": "/ghc/v1",
  "paths": {
    "/customer/{customerID}": {
      "get": {
        "description": "Returns a given customer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Returns a given customer",
        "operationId": "getCustomer",
        "responses": {
          "200": {
            "description": "Successfully retrieved information on an individual customer",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of customer to use",
          "name": "customerID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/documents/{documentId}": {
      "get": {
        "description": "Returns a document and its uploads",
        "tags": [
          "ghcDocuments"
        ],
        "summary": "Returns a document",
        "operationId": "getDocument",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the document to return",
            "name": "documentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the requested document",
            "schema": {
              "$ref": "#/definitions/DocumentPayload"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "/move-orders/{orderID}": {
      "get": {
        "description": "Gets an order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Gets an order by ID",
        "operationId": "getOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieved order",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "patch": {
        "description": "All fields sent in this request will be set on the order referenced",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Updates an order",
        "operationId": "updateMoveOrder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMoveOrderPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated instance of orders",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was unauthenticated",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was unauthorized",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-orders/{orderID}/move-task-orders": {
      "get": {
        "description": "Gets move task orders associated with an order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Gets move task orders associated with an order",
        "operationId": "listMoveTaskOrders",
        "responses": {
          "200": {
            "description": "Successfully retrieved all move task orders associated with an order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrders"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of order to use",
          "name": "orderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}": {
      "get": {
        "description": "Gets a move order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Gets a move order by ID",
        "operationId": "getMoveTaskOrder",
        "responses": {
          "200": {
            "description": "Successfully retrieved move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a move order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Deletes a move order by ID",
        "operationId": "deleteMoveTaskOrder",
        "responses": {
          "200": {
            "description": "Successfully deleted move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Updates a move order by ID",
        "operationId": "updateMoveTaskOrder",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/entitlements": {
      "get": {
        "description": "Gets entitlements",
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Gets entitlements for a move order by ID",
        "operationId": "getEntitlements",
        "responses": {
          "200": {
            "description": "Successfully retrieved entitlements",
            "schema": {
              "$ref": "#/definitions/Entitlements"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/payment-service-items/{paymentServiceItemID}/status": {
      "patch": {
        "description": "Changes the status of a line item for a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentServiceItem"
        ],
        "summary": "Change the status of a payment service item for a move order by ID",
        "operationId": "updatePaymentServiceItemStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentServiceItem"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status for a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/PaymentServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of payment service item to use",
          "name": "paymentServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}": {
      "get": {
        "description": "Gets a line item by ID for a move order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Gets a line item by ID for a move order by ID",
        "operationId": "getMTOServiceItem",
        "responses": {
          "200": {
            "description": "Successfully retrieved a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a line item by ID for a move order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Deletes a line item by ID for a move order by ID",
        "operationId": "deleteMTOServiceItem",
        "responses": {
          "200": {
            "description": "Successfully deleted move task order",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates a service item by ID for a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Updates a service item by ID for a move order by ID",
        "operationId": "updateMTOServiceItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order status",
            "schema": {
              "$ref": "#/definitions/MoveTaskOrder"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of line item to use",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}/status": {
      "patch": {
        "description": "Changes the status of a line item for a move order by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Change the status of a line item for a move order by ID",
        "operationId": "updateMTOServiceItemStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMTOServiceItemStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated status for a line item for a move task order by ID",
            "schema": {
              "$ref": "#/definitions/MTOServiceItem"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of move order to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of line item to use",
          "name": "mtoServiceItemID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move-task-orders/{moveTaskOrderID}/status": {
      "patch": {
        "description": "Changes move task order status to make it available to prime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "moveTaskOrder"
        ],
        "summary": "Change the status of a move task order to make it available to prime",
        "operationId": "updateMoveTaskOrderStatus",
        "parameters": [
          {
            "type": "string",
            "description": "ID of move order to use",
            "name": "moveTaskOrderID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "name": "serviceItemCodes",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTOApprovalServiceItemCodes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated move task order status",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "description": "Conflict error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "/move/{locator}": {
      "get": {
        "description": "Returns a given move for a unique alphanumeric locator string",
        "produces": [
          "application/json"
        ],
        "tags": [
          "move"
        ],
        "summary": "Returns a given move",
        "operationId": "getMove",
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual move",
            "schema": {
              "$ref": "#/definitions/Move"
            }
          },
          "400": {
            "description": "The locator provided is invalid"
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Code used to identify a move in the system",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_service_items": {
      "get": {
        "description": "Gets all line items for a move orders",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoServiceItem"
        ],
        "summary": "Gets all line items for a move order",
        "operationId": "listMTOServiceItems",
        "responses": {
          "200": {
            "description": "Successfully retrieved all line items for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOServiceItems"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move order for mto service item to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments": {
      "get": {
        "description": "Gets all shipments for a move task order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Gets all shipments for a move task order",
        "operationId": "listMTOShipments",
        "responses": {
          "200": {
            "description": "Successfully retrieved all mto shipments for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOShipments"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order for mto shipment to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}/mto-agents": {
      "get": {
        "description": "Fetches a list of agents associated with a move task order.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoAgent"
        ],
        "summary": "Fetch move task order agents.",
        "operationId": "fetchMTOAgentList",
        "responses": {
          "200": {
            "description": "Successfully retrieved all agents for a move task order",
            "schema": {
              "$ref": "#/definitions/MTOAgents"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/move_task_orders/{moveTaskOrderID}/mto_shipments/{shipmentID}/status": {
      "patch": {
        "description": "Updates a shipment's status",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mtoShipment"
        ],
        "summary": "Updates a shipment's status",
        "operationId": "patchMTOShipmentStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchMTOShipmentStatus"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated shipment",
            "schema": {
              "$ref": "#/definitions/MTOShipment"
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "409": {
            "description": "Conflict error",
            "schema": {
              "description": "Conflict error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of move task order for mto shipment to use",
          "name": "moveTaskOrderID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shipment",
          "name": "shipmentID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/moves/{locator}/payment-requests": {
      "get": {
        "description": "Fetches payment requests for a move",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Fetches payment requests using the move code (locator).",
        "operationId": "getPaymentRequestsForMove",
        "responses": {
          "200": {
            "description": "Successfully retrieved all line items for a move task order",
            "schema": {
              "$ref": "#/definitions/PaymentRequests"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "string",
          "description": "move code to identify a move for payment requests",
          "name": "locator",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}": {
      "get": {
        "description": "Fetches an instance of a payment request by id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Fetches a payment request by id",
        "operationId": "getPaymentRequest",
        "responses": {
          "200": {
            "description": "fetched instance of payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "UUID of payment request",
          "name": "paymentRequestID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-requests/{paymentRequestID}/status": {
      "patch": {
        "description": "Updates status of a payment request by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "paymentRequests"
        ],
        "summary": "Updates status of a payment request by id",
        "operationId": "updatePaymentRequestStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "UUID of payment request",
            "name": "paymentRequestID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePaymentRequestStatusPayload"
            }
          },
          {
            "type": "string",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated payment request",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "description": "Precondition failed",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "/queues/moves": {
      "get": {
        "description": "An office TOO user will be assigned a transportation office that will determine which moves are displayed in their queue based on the origin duty station.  GHC moves will show up here onced they have reached the submitted status sent by the customer and have move task orders, shipments, and service items to approve.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "Gets queued list of all customer moves by GBLOC origin",
        "operationId": "getMovesQueue",
        "parameters": [
          {
            "type": "integer",
            "description": "requested page of results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "results per page",
            "name": "perPage",
            "in": "query"
          },
          {
            "enum": [
              "lastName",
              "dodID",
              "branch",
              "locator",
              "status",
              "destinationDutyStation"
            ],
            "type": "string",
            "description": "field that results should be sorted by",
            "name": "sort",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "direction of sort order if applied",
            "name": "order",
            "in": "query"
          },
          {
            "type": "string",
            "name": "branch",
            "in": "query"
          },
          {
            "type": "string",
            "name": "locator",
            "in": "query"
          },
          {
            "type": "string",
            "name": "lastName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "dodID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "destinationDutyStation",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "SUBMITTED",
                "APPROVALS REQUESTED",
                "APPROVED"
              ],
              "type": "string"
            },
            "description": "Filtering for the status.",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/QueueMovesResult"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "/queues/payment-requests": {
      "get": {
        "description": "An office TIO user will be assigned a transportation office that will determine which payment requests are displayed in their queue based on the origin duty station.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queues"
        ],
        "summary": "Gets queued list of all payment requests by GBLOC origin",
        "operationId": "getPaymentRequestsQueue",
        "parameters": [
          {
            "enum": [
              "lastName",
              "locator",
              "submittedAt",
              "branch",
              "status",
              "dodID",
              "age"
            ],
            "type": "string",
            "description": "field that results should be sorted by",
            "name": "sort",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "direction of sort order if applied",
            "name": "order",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "requested page of results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "number of records to include per page",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date",
            "description": "limit results to those matching submitted at date",
            "name": "submittedAt",
            "in": "query"
          },
          {
            "type": "string",
            "name": "branch",
            "in": "query"
          },
          {
            "type": "string",
            "name": "locator",
            "in": "query"
          },
          {
            "type": "string",
            "name": "lastName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "dodID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "destinationDutyStation",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "Payment requested",
                "Reviewed",
                "Rejected",
                "Paid"
              ],
              "type": "string"
            },
            "description": "Filtering for the status.",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all moves matching the criteria",
            "schema": {
              "$ref": "#/definitions/QueuePaymentRequestsResult"
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "/tac/valid": {
      "get": {
        "description": "Returns a boolean based on whether a tac value is valid or not",
        "tags": [
          "tac",
          "order"
        ],
        "summary": "Validation of a TAC value",
        "operationId": "tacValidation",
        "parameters": [
          {
            "type": "string",
            "description": "The tac value to validate",
            "name": "tac",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved validation status",
            "schema": {
              "$ref": "#/definitions/TacValid"
            }
          },
          "400": {
            "description": "The request payload is invalid",
            "schema": {
              "description": "The request payload is invalid",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "403": {
            "description": "The request was denied",
            "schema": {
              "description": "The request was denied",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "404": {
            "description": "The requested resource wasn't found",
            "schema": {
              "description": "The requested resource wasn't found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "500": {
            "description": "A server error occurred",
            "schema": {
              "description": "A server error occurred",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "required": [
        "street_address_1",
        "city",
        "state",
        "postal_code"
      ],
      "properties": {
        "city": {
          "type": "string",
          "title": "City",
          "example": "Anytown"
        },
        "country": {
          "type": "string",
          "title": "Country",
          "default": "USA",
          "x-nullable": true,
          "example": "USA"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "postal_code": {
          "type": "string",
          "format": "zip",
          "title": "ZIP",
          "pattern": "^(\\d{5}([\\-]\\d{4})?)$",
          "example": "90210"
        },
        "state": {
          "type": "string",
          "title": "State",
          "enum": [
            "AL",
            "AK",
            "AR",
            "AZ",
            "CA",
            "CO",
            "CT",
            "DC",
            "DE",
            "FL",
            "GA",
            "HI",
            "IA",
            "ID",
            "IL",
            "IN",
            "KS",
            "KY",
            "LA",
            "MA",
            "MD",
            "ME",
            "MI",
            "MN",
            "MO",
            "MS",
            "MT",
            "NC",
            "ND",
            "NE",
            "NH",
            "NJ",
            "NM",
            "NV",
            "NY",
            "OH",
            "OK",
            "OR",
            "PA",
            "RI",
            "SC",
            "SD",
            "TN",
            "TX",
            "UT",
            "VA",
            "VT",
            "WA",
            "WI",
            "WV",
            "WY"
          ],
          "x-display-value": {
            "AK": "AK",
            "AL": "AL",
            "AR": "AR",
            "AZ": "AZ",
            "CA": "CA",
            "CO": "CO",
            "CT": "CT",
            "DC": "DC",
            "DE": "DE",
            "FL": "FL",
            "GA": "GA",
            "HI": "HI",
            "IA": "IA",
            "ID": "ID",
            "IL": "IL",
            "IN": "IN",
            "KS": "KS",
            "KY": "KY",
            "LA": "LA",
            "MA": "MA",
            "MD": "MD",
            "ME": "ME",
            "MI": "MI",
            "MN": "MN",
            "MO": "MO",
            "MS": "MS",
            "MT": "MT",
            "NC": "NC",
            "ND": "ND",
            "NE": "NE",
            "NH": "NH",
            "NJ": "NJ",
            "NM": "NM",
            "NV": "NV",
            "NY": "NY",
            "OH": "OH",
            "OK": "OK",
            "OR": "OR",
            "PA": "PA",
            "RI": "RI",
            "SC": "SC",
            "SD": "SD",
            "TN": "TN",
            "TX": "TX",
            "UT": "UT",
            "VA": "VA",
            "VT": "VT",
            "WA": "WA",
            "WI": "WI",
            "WV": "WV",
            "WY": "WY"
          }
        },
        "street_address_1": {
          "type": "string",
          "title": "Street address 1",
          "example": "123 Main Ave"
        },
        "street_address_2": {
          "type": "string",
          "title": "Street address 2",
          "x-nullable": true,
          "example": "Apartment 9000"
        },
        "street_address_3": {
          "type": "string",
          "title": "Address Line 3",
          "x-nullable": true,
          "example": "Montmârtre"
        }
      }
    },
    "BackupContact": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        }
      }
    },
    "Branch": {
      "type": "string",
      "title": "branch",
      "enum": [
        "ARMY",
        "NAVY",
        "MARINES",
        "AIR_FORCE",
        "COAST_GUARD",
        "OTHER"
      ],
      "x-display-value": {
        "AIR_FORCE": "Air Force",
        "ARMY": "Army",
        "COAST_GUARD": "Coast Guard",
        "MARINES": "Marines",
        "NAVY": "Navy",
        "OTHER": "OTHER"
      }
    },
    "ClientError": {
      "type": "object",
      "required": [
        "title",
        "detail",
        "instance"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "Contractor": {
      "properties": {
        "contractNumber": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "agency": {
          "type": "string",
          "title": "Agency customer is affilated with"
        },
        "backup_contact": {
          "x-nullable": true,
          "$ref": "#/definitions/BackupContact"
        },
        "current_address": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "dodID": {
          "type": "string"
        },
        "eTag": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "userID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "CustomerContactType": {
      "description": "Describes a customer contact type for a MTOServiceItem of type domestic destination SIT.",
      "type": "string",
      "enum": [
        "FIRST",
        "SECOND"
      ]
    },
    "DeptIndicator": {
      "type": "string",
      "title": "Dept. indicator",
      "enum": [
        "NAVY_AND_MARINES",
        "ARMY",
        "AIR_FORCE",
        "COAST_GUARD"
      ],
      "x-display-value": {
        "AIR_FORCE": "57 Air Force",
        "ARMY": "21 Army",
        "COAST_GUARD": "70 Coast Guard",
        "NAVY_AND_MARINES": "17 Navy and Marine Corps"
      },
      "x-nullable": true
    },
    "DimensionType": {
      "description": "Describes a dimension type for a MTOServiceItemDimension.",
      "type": "string",
      "enum": [
        "ITEM",
        "CRATE"
      ]
    },
    "DocumentPayload": {
      "type": "object",
      "required": [
        "id",
        "service_member_id",
        "uploads"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "service_member_id": {
          "type": "string",
          "format": "uuid",
          "title": "The service member this document belongs to"
        },
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "DutyStation": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "address_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "name": {
          "type": "string",
          "example": "Fort Bragg North Station"
        }
      }
    },
    "Entitlements": {
      "type": "object",
      "properties": {
        "authorizedWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true,
          "example": true
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "571008b1-b0de-454d-b843-d71be9f02c04"
        },
        "nonTemporaryStorage": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "privatelyOwnedVehicle": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "proGearWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 2000
        },
        "proGearWeightSpouse": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        },
        "storageInTransit": {
          "type": "integer",
          "x-nullable": true,
          "example": 90
        },
        "totalDependents": {
          "type": "integer",
          "example": 2
        },
        "totalWeight": {
          "type": "integer",
          "x-formatting": "weight",
          "example": 500
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "GBLOC": {
      "type": "string",
      "enum": [
        "AGFM",
        "APAT",
        "BGAC",
        "BGNC",
        "BKAS",
        "CFMQ",
        "CLPK",
        "CNNQ",
        "DMAT",
        "GSAT",
        "HAFC",
        "HBAT",
        "JEAT",
        "JENQ",
        "KKFA",
        "LHNQ",
        "LKNQ",
        "MAPK",
        "MAPS",
        "MBFL",
        "MLNQ",
        "XXXX"
      ]
    },
    "Grade": {
      "type": "string",
      "title": "grade",
      "enum": [
        "E_1",
        "E_2",
        "E_3",
        "E_4",
        "E_5",
        "E_6",
        "E_7",
        "E_8",
        "E_9",
        "O_1_ACADEMY_GRADUATE",
        "O_2",
        "O_3",
        "O_4",
        "O_5",
        "O_6",
        "O_7",
        "O_8",
        "O_9",
        "O_10",
        "W_1",
        "W_2",
        "W_3",
        "W_4",
        "W_5",
        "AVIATION_CADET",
        "CIVILIAN_EMPLOYEE",
        "ACADEMY_CADET",
        "MIDSHIPMAN"
      ],
      "x-display-value": {
        "ACADEMY_CADET": "Service Academy Cadet",
        "AVIATION_CADET": "Aviation Cadet",
        "CIVILIAN_EMPLOYEE": "Civilian Employee",
        "E_1": "E-1",
        "E_2": "E-2",
        "E_3": "E-3",
        "E_4": "E-4",
        "E_5": "E-5",
        "E_6": "E-6",
        "E_7": "E-7",
        "E_8": "E-8",
        "E_9": "E-9",
        "MIDSHIPMAN": "Midshipman",
        "O_10": "O-10",
        "O_1_ACADEMY_GRADUATE": "O-1/Service Academy Graduate",
        "O_2": "O-2",
        "O_3": "O-3",
        "O_4": "O-4",
        "O_5": "O-5",
        "O_6": "O-6",
        "O_7": "O-7",
        "O_8": "O-8",
        "O_9": "O-9",
        "W_1": "W-1",
        "W_2": "W-2",
        "W_3": "W-3",
        "W_4": "W-4",
        "W_5": "W-5"
      },
      "x-nullable": true
    },
    "MTOAgent": {
      "type": "object",
      "properties": {
        "agentType": {
          "type": "string",
          "enum": [
            "RELEASING_AGENT",
            "RECEIVING_AGENT"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "x-email",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          "x-nullable": true
        },
        "firstName": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "lastName": {
          "type": "string",
          "x-nullable": true
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "phone": {
          "type": "string",
          "format": "telephone",
          "pattern": "^[2-9]\\d{2}-\\d{3}-\\d{4}$",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOAgents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOAgent"
      }
    },
    "MTOApprovalServiceItemCodes": {
      "description": "MTO level service items to create when updating MTO status.",
      "type": "object",
      "properties": {
        "serviceCodeCS": {
          "type": "boolean",
          "example": true
        },
        "serviceCodeMS": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "MTOServiceItem": {
      "type": "object",
      "required": [
        "id",
        "moveTaskOrderID",
        "reServiceID",
        "reServiceCode",
        "reServiceName",
        "mtoShipmentID",
        "reason",
        "pickupPostalCode",
        "description"
      ],
      "properties": {
        "approvedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerContacts": {
          "$ref": "#/definitions/MTOServiceItemCustomerContacts"
        },
        "deletedAt": {
          "type": "string",
          "format": "date"
        },
        "description": {
          "type": "string"
        },
        "dimensions": {
          "$ref": "#/definitions/MTOServiceItemDimensions"
        },
        "eTag": {
          "type": "string"
        },
        "feeType": {
          "type": "string",
          "enum": [
            "COUNSELING",
            "CRATING",
            "TRUCKING",
            "SHUTTLE"
          ]
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupPostalCode": {
          "type": "string"
        },
        "quantity": {
          "type": "integer"
        },
        "rate": {
          "type": "integer"
        },
        "reServiceCode": {
          "type": "string"
        },
        "reServiceID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "reServiceName": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "rejectedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/MTOServiceItemStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date"
        },
        "total": {
          "type": "integer",
          "format": "cents"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOServiceItemCustomerContact": {
      "description": "Customer contact information for a destination SIT service item",
      "type": "object",
      "properties": {
        "firstAvailableDeliveryDate": {
          "description": "First available date that Prime can deliver SIT service item.",
          "type": "string",
          "format": "date",
          "example": "2020-12-31"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "timeMilitary": {
          "description": "Time of delivery corresponding to ` + "`" + `firstAvailableDeliveryDate` + "`" + `.",
          "type": "string",
          "example": "0400Z"
        },
        "type": {
          "$ref": "#/definitions/CustomerContactType"
        }
      }
    },
    "MTOServiceItemCustomerContacts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItemCustomerContact"
      }
    },
    "MTOServiceItemDimension": {
      "description": "Describes a dimension object for the MTOServiceItem.",
      "type": "object",
      "properties": {
        "height": {
          "description": "Height in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "length": {
          "description": "Length in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        },
        "type": {
          "$ref": "#/definitions/DimensionType"
        },
        "width": {
          "description": "Width in thousandth inches. 1000 thou = 1 inch.",
          "type": "integer",
          "format": "int32",
          "example": 1000
        }
      }
    },
    "MTOServiceItemDimensions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItemDimension"
      }
    },
    "MTOServiceItemStatus": {
      "description": "Describes all statuses for a MTOServiceItem",
      "type": "string",
      "enum": [
        "SUBMITTED",
        "APPROVED",
        "REJECTED"
      ]
    },
    "MTOServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOServiceItem"
      }
    },
    "MTOShipment": {
      "properties": {
        "approvedDate": {
          "type": "string",
          "format": "date"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerRemarks": {
          "type": "string",
          "x-nullable": true,
          "example": "handle with care"
        },
        "destinationAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "mtoAgents": {
          "$ref": "#/definitions/MTOAgents"
        },
        "mtoServiceItems": {
          "$ref": "#/definitions/MTOServiceItems"
        },
        "pickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "primeActualWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "primeEstimatedWeight": {
          "type": "integer",
          "x-nullable": true,
          "example": 2000
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment not good enough"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "scheduledPickupDate": {
          "type": "string",
          "format": "date"
        },
        "secondaryDeliveryAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "secondaryPickupAddress": {
          "x-nullable": true,
          "$ref": "#/definitions/Address"
        },
        "shipmentType": {
          "enum": [
            "HHG",
            "INTERNATIONAL_HHG",
            "INTERNATIONAL_UB"
          ]
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MTOShipmentStatus": {
      "type": "string",
      "title": "Shipment Status",
      "enum": [
        "SUBMITTED",
        "REJECTED",
        "APPROVED",
        "CANCELLATION_REQUESTED"
      ],
      "example": "SUBMITTED"
    },
    "MTOShipmentType": {
      "type": "string",
      "title": "Shipment Type",
      "enum": [
        "HHG",
        "HHG_LONGHAUL_DOMESTIC",
        "HHG_SHORTHAUL_DOMESTIC",
        "HHG_INTO_NTS_DOMESTIC",
        "HHG_OUTOF_NTS_DOMESTIC",
        "INTERNATIONAL_HHG",
        "INTERNATIONAL_UB"
      ],
      "x-display-value": {
        "HHG": "HHG",
        "INTERNATIONAL_HHG": "International HHG",
        "INTERNATIONAL_UB": "International UB"
      },
      "example": "HHG"
    },
    "MTOShipments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MTOShipment"
      }
    },
    "Move": {
      "properties": {
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "contractor": {
          "$ref": "#/definitions/Contractor"
        },
        "contractorId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "locator": {
          "type": "string",
          "example": "1K43AR"
        },
        "orders": {
          "$ref": "#/definitions/Order"
        },
        "ordersId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "referenceId": {
          "type": "string",
          "x-nullable": true,
          "example": "1001-3456"
        },
        "status": {
          "$ref": "#/definitions/MoveStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveStatus": {
      "type": "string",
      "enum": [
        "DRAFT",
        "SUBMITTED",
        "APPROVALS REQUESTED",
        "APPROVED",
        "CANCELED"
      ]
    },
    "MoveTaskOrder": {
      "type": "object",
      "properties": {
        "availableToPrimeAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "destinationAddress": {
          "$ref": "#/definitions/Address"
        },
        "destinationDutyStation": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "eTag": {
          "type": "string"
        },
        "entitlements": {
          "$ref": "#/definitions/Entitlements"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "isCanceled": {
          "type": "boolean",
          "x-nullable": true
        },
        "locator": {
          "type": "string",
          "example": "1K43AR"
        },
        "orderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "originDutyStation": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "pickupAddress": {
          "$ref": "#/definitions/Address"
        },
        "referenceId": {
          "type": "string",
          "example": "1001-3456"
        },
        "requestedPickupDate": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MoveTaskOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveTaskOrder"
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "agency": {
          "type": "string",
          "$ref": "#/definitions/Branch"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "customerID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "date_issued": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "department_indicator": {
          "x-nullable": true,
          "$ref": "#/definitions/DeptIndicator"
        },
        "destinationDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "eTag": {
          "type": "string"
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlements"
        },
        "first_name": {
          "type": "string",
          "readOnly": true,
          "example": "John"
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "has_dependents": {
          "type": "boolean",
          "title": "Are dependents included in your orders?",
          "example": false
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "1f2270c7-7166-40ae-981e-b200ebdf3054"
        },
        "last_name": {
          "type": "string",
          "readOnly": true,
          "example": "Doe"
        },
        "moveCode": {
          "type": "string",
          "example": "H2XFJF"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "order_number": {
          "type": "string",
          "x-nullable": true,
          "example": "030-00362"
        },
        "order_type": {
          "$ref": "#/definitions/OrdersType"
        },
        "order_type_detail": {
          "x-nullable": true,
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "report_by_date": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "spouse_has_pro_gear": {
          "type": "boolean",
          "title": "Do you have a spouse who will need to move items related to their occupation (also known as spouse pro-gear)?",
          "example": false
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        },
        "uploaded_order_id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "OrdersType": {
      "type": "string",
      "title": "Orders type",
      "enum": [
        "PERMANENT_CHANGE_OF_STATION",
        "RETIREMENT",
        "SEPARATION"
      ],
      "x-display-value": {
        "PERMANENT_CHANGE_OF_STATION": "Permanent Change Of Station",
        "RETIREMENT": "Retirement",
        "SEPARATION": "Separation"
      }
    },
    "OrdersTypeDetail": {
      "type": "string",
      "title": "Orders type detail",
      "enum": [
        "HHG_PERMITTED",
        "PCS_TDY",
        "HHG_RESTRICTED_PROHIBITED",
        "HHG_RESTRICTED_AREA",
        "INSTRUCTION_20_WEEKS",
        "HHG_PROHIBITED_20_WEEKS",
        "DELAYED_APPROVAL"
      ],
      "x-display-value": {
        "DELAYED_APPROVAL": "Delayed Approval 20 Weeks or More",
        "HHG_PERMITTED": "Shipment of HHG Permitted",
        "HHG_PROHIBITED_20_WEEKS": "Shipment of HHG Prohibited but Authorized within 20 weeks",
        "HHG_RESTRICTED_AREA": "HHG Restricted Area-HHG Prohibited",
        "HHG_RESTRICTED_PROHIBITED": "Shipment of HHG Restricted or Prohibited",
        "INSTRUCTION_20_WEEKS": "Course of Instruction 20 Weeks or More",
        "PCS_TDY": "PCS with TDY Enroute"
      },
      "x-nullable": true
    },
    "PatchMTOServiceItemStatusPayload": {
      "properties": {
        "rejectionReason": {
          "description": "Reason the service item was rejected",
          "type": "string",
          "x-nullable": true,
          "example": "Insufficent details provided"
        },
        "status": {
          "description": "Describes all statuses for a MTOServiceItem",
          "type": "string",
          "enum": [
            "SUBMITTED",
            "APPROVED",
            "REJECTED"
          ]
        }
      }
    },
    "PatchMTOShipmentStatus": {
      "required": [
        "status"
      ],
      "properties": {
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "MTO Shipment not good enough"
        },
        "status": {
          "$ref": "#/definitions/MTOShipmentStatus"
        }
      }
    },
    "PaymentRequest": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "isFinal": {
          "type": "boolean",
          "default": false
        },
        "moveTaskOrder": {
          "$ref": "#/definitions/Move"
        },
        "moveTaskOrderID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentRequestNumber": {
          "type": "string",
          "readOnly": true,
          "example": "1234-5678-1"
        },
        "proofOfServiceDocs": {
          "$ref": "#/definitions/ProofOfServiceDocs"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "reviewedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "serviceItems": {
          "$ref": "#/definitions/PaymentServiceItems"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "PaymentRequestStatus": {
      "type": "string",
      "title": "Payment Request Status",
      "enum": [
        "PENDING",
        "REVIEWED",
        "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
        "SENT_TO_GEX",
        "RECEIVED_BY_GEX",
        "PAID"
      ]
    },
    "PaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentRequest"
      }
    },
    "PaymentServiceItem": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoServiceItemName": {
          "type": "string",
          "example": "Move management"
        },
        "mtoShipmentID": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "mtoShipmentType": {
          "$ref": "#/definitions/MTOShipmentType"
        },
        "paymentRequestID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "paymentServiceItemParams": {
          "$ref": "#/definitions/PaymentServiceItemParams"
        },
        "priceCents": {
          "type": "integer",
          "format": "cents",
          "title": "Price of the service item in cents",
          "x-nullable": true
        },
        "referenceID": {
          "format": "string",
          "readOnly": true,
          "example": "1234-5678-c56a4180"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentServiceItemStatus"
        }
      }
    },
    "PaymentServiceItemParam": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true,
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "key": {
          "$ref": "#/definitions/ServiceItemParamName"
        },
        "origin": {
          "$ref": "#/definitions/ServiceItemParamOrigin"
        },
        "paymentServiceItemID": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "type": {
          "$ref": "#/definitions/ServiceItemParamType"
        },
        "value": {
          "type": "string",
          "example": 3025
        }
      }
    },
    "PaymentServiceItemParams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItemParam"
      }
    },
    "PaymentServiceItemStatus": {
      "type": "string",
      "title": "Payment Service Item Status",
      "enum": [
        "REQUESTED",
        "APPROVED",
        "DENIED",
        "SENT_TO_GEX",
        "PAID"
      ]
    },
    "PaymentServiceItems": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PaymentServiceItem"
      }
    },
    "ProofOfServiceDoc": {
      "properties": {
        "uploads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        }
      }
    },
    "ProofOfServiceDocs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProofOfServiceDoc"
      }
    },
    "QueueMove": {
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "departmentIndicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "destinationDutyStation": {
          "$ref": "#/definitions/DutyStation"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "locator": {
          "type": "string"
        },
        "originGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "shipmentsCount": {
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/QueueMoveStatus"
        }
      }
    },
    "QueueMoveStatus": {
      "type": "string",
      "enum": [
        "New move",
        "Move approved",
        "Approvals requested"
      ]
    },
    "QueueMoves": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QueueMove"
      }
    },
    "QueueMovesResult": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "queueMoves": {
          "$ref": "#/definitions/QueueMoves"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "QueuePaymentRequest": {
      "type": "object",
      "properties": {
        "age": {
          "description": "Days since the payment request has been requested.  Decimal representation will allow more accurate sorting.",
          "type": "number",
          "format": "integer"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "departmentIndicator": {
          "$ref": "#/definitions/DeptIndicator"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "locator": {
          "type": "string"
        },
        "moveID": {
          "type": "string",
          "format": "uuid"
        },
        "originGBLOC": {
          "$ref": "#/definitions/GBLOC"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        },
        "submittedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "QueuePaymentRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QueuePaymentRequest"
      }
    },
    "QueuePaymentRequestsResult": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer"
        },
        "perPage": {
          "type": "integer"
        },
        "queuePaymentRequests": {
          "$ref": "#/definitions/QueuePaymentRequests"
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "ServiceItemParamName": {
      "type": "string",
      "enum": [
        "ActualPickupDate",
        "CanStandAlone",
        "ContractCode",
        "CubicFeetBilled",
        "CubicFeetCrating",
        "DistanceZip3",
        "DistanceZip5",
        "DistanceZipSITDest",
        "DistanceZipSITOrigin",
        "EIAFuelPrice",
        "FSCWeightBasedDistanceMultiplier",
        "MarketDest",
        "MarketOrigin",
        "MTOAvailableToPrimeAt",
        "NumberDaysSIT",
        "PriceAreaDest",
        "PriceAreaIntlDest",
        "PriceAreaIntlOrigin",
        "PriceAreaOrigin",
        "PSI_LinehaulDom",
        "PSI_LinehaulDomPrice",
        "PSI_LinehaulShort",
        "PSI_LinehaulShortPrice",
        "PSI_PackingDom",
        "PSI_PackingDomPrice",
        "PSI_PackingHHGIntl",
        "PSI_PackingHHGIntlPrice",
        "PSI_PriceDomDest",
        "PSI_PriceDomDestPrice",
        "PSI_PriceDomOrigin",
        "PSI_PriceDomOriginPrice",
        "PSI_ShippingLinehaulIntlCO",
        "PSI_ShippingLinehaulIntlCOPrice",
        "PSI_ShippingLinehaulIntlOC",
        "PSI_ShippingLinehaulIntlOCPrice",
        "PSI_ShippingLinehaulIntlOO",
        "PSI_ShippingLinehaulIntlOOPrice",
        "RateAreaNonStdDest",
        "RateAreaNonStdOrigin",
        "RequestedPickupDate",
        "ServiceAreaDest",
        "ServiceAreaOrigin",
        "ServicesScheduleDest",
        "ServicesScheduleOrigin",
        "SITScheduleDest",
        "SITScheduleOrigin",
        "WeightActual",
        "WeightBilledActual",
        "WeightEstimated",
        "ZipDestAddress",
        "ZipPickupAddress",
        "ZipSITDestHHGFinalAddress"
      ]
    },
    "ServiceItemParamOrigin": {
      "type": "string",
      "enum": [
        "PRIME",
        "SYSTEM"
      ]
    },
    "ServiceItemParamType": {
      "type": "string",
      "enum": [
        "STRING",
        "DATE",
        "INTEGER",
        "DECIMAL",
        "TIMESTAMP",
        "PaymentServiceItemUUID"
      ]
    },
    "TacValid": {
      "type": "object",
      "required": [
        "isValid"
      ],
      "properties": {
        "isValid": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "UpdateMoveOrderPayload": {
      "type": "object",
      "required": [
        "issueDate",
        "reportByDate",
        "ordersType",
        "newDutyStationId",
        "originDutyStationId",
        "agency"
      ],
      "properties": {
        "agency": {
          "description": "the branch that the service member belongs to",
          "$ref": "#/definitions/Branch"
        },
        "authorizedWeight": {
          "description": "unit is in lbs",
          "type": "integer",
          "minimum": 1,
          "x-formatting": "weight",
          "x-nullable": true,
          "example": 2000
        },
        "departmentIndicator": {
          "x-nullable": true,
          "$ref": "#/definitions/DeptIndicator"
        },
        "dependentsAuthorized": {
          "type": "boolean",
          "x-nullable": true
        },
        "grade": {
          "$ref": "#/definitions/Grade"
        },
        "issueDate": {
          "description": "The date and time that these orders were cut.",
          "type": "string",
          "format": "date",
          "title": "Orders date",
          "example": "2018-04-26"
        },
        "newDutyStationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "ordersNumber": {
          "type": "string",
          "title": "Orders Number",
          "x-nullable": true,
          "example": "030-00362"
        },
        "ordersType": {
          "$ref": "#/definitions/OrdersType"
        },
        "ordersTypeDetail": {
          "$ref": "#/definitions/OrdersTypeDetail"
        },
        "originDutyStationId": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "reportByDate": {
          "description": "Report By Date",
          "type": "string",
          "format": "date",
          "title": "Report-by date",
          "example": "2018-04-26"
        },
        "sac": {
          "type": "string",
          "title": "SAC",
          "x-nullable": true,
          "example": "N002214CSW32Y9"
        },
        "tac": {
          "type": "string",
          "title": "TAC",
          "x-nullable": true,
          "example": "F8J1"
        }
      }
    },
    "UpdatePaymentRequestStatusPayload": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "rejectionReason": {
          "type": "string",
          "x-nullable": true,
          "example": "documentation was incomplete"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatus"
        }
      }
    },
    "Upload": {
      "type": "object",
      "required": [
        "id",
        "url",
        "filename",
        "contentType",
        "bytes",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "bytes": {
          "type": "integer"
        },
        "contentType": {
          "type": "string",
          "format": "mime-type",
          "example": "application/pdf"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "filename": {
          "type": "string",
          "example": "filename.pdf"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
        },
        "status": {
          "type": "string",
          "enum": [
            "INFECTED",
            "CLEAN",
            "PROCESSING"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "example": "https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538"
        }
      }
    },
    "ValidationError": {
      "required": [
        "invalid_fields"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "$ref": "#/definitions/ValidationErrorAllOf1"
        }
      ],
      "properties": {
        "invalid_fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ValidationErrorAllOf1": {
      "type": "object"
    }
  },
  "responses": {
    "Conflict": {
      "description": "Conflict error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InvalidRequest": {
      "description": "The request payload is invalid",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "The requested resource wasn't found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PermissionDenied": {
      "description": "The request was denied",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PreconditionFailed": {
      "description": "Precondition failed",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ServerError": {
      "description": "A server error occurred",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "tags": [
    {
      "name": "queues"
    },
    {
      "name": "move"
    },
    {
      "name": "order"
    },
    {
      "name": "moveTaskOrder"
    },
    {
      "name": "customer"
    },
    {
      "name": "mtoServiceItem"
    },
    {
      "name": "mtoShipment"
    },
    {
      "name": "mtoAgent"
    },
    {
      "name": "paymentServiceItem"
    },
    {
      "name": "tac"
    }
  ]
}`))
}
