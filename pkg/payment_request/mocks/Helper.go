// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// Helper is an autogenerated mock type for the Helper type
type Helper struct {
	mock.Mock
}

// FetchServiceParamList provides a mock function with given fields: appCtx, mtoServiceItem
func (_m *Helper) FetchServiceParamList(appCtx appcontext.AppContext, mtoServiceItem models.MTOServiceItem) (models.ServiceParams, error) {
	ret := _m.Called(appCtx, mtoServiceItem)

	if len(ret) == 0 {
		panic("no return value specified for FetchServiceParamList")
	}

	var r0 models.ServiceParams
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.MTOServiceItem) (models.ServiceParams, error)); ok {
		return rf(appCtx, mtoServiceItem)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.MTOServiceItem) models.ServiceParams); ok {
		r0 = rf(appCtx, mtoServiceItem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.ServiceParams)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.MTOServiceItem) error); ok {
		r1 = rf(appCtx, mtoServiceItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchServiceParamsForServiceItems provides a mock function with given fields: appCtx, mtoServiceItems
func (_m *Helper) FetchServiceParamsForServiceItems(appCtx appcontext.AppContext, mtoServiceItems []models.MTOServiceItem) (models.ServiceParams, error) {
	ret := _m.Called(appCtx, mtoServiceItems)

	if len(ret) == 0 {
		panic("no return value specified for FetchServiceParamsForServiceItems")
	}

	var r0 models.ServiceParams
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []models.MTOServiceItem) (models.ServiceParams, error)); ok {
		return rf(appCtx, mtoServiceItems)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []models.MTOServiceItem) models.ServiceParams); ok {
		r0 = rf(appCtx, mtoServiceItems)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.ServiceParams)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, []models.MTOServiceItem) error); ok {
		r1 = rf(appCtx, mtoServiceItems)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHelper creates a new instance of Helper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Helper {
	mock := &Helper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
