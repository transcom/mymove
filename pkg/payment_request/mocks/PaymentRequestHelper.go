// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	appcontext "github.com/transcom/mymove/pkg/appcontext"

	models "github.com/transcom/mymove/pkg/models"
)

// PaymentRequestHelper is an autogenerated mock type for the PaymentRequestHelper type
type PaymentRequestHelper struct {
	mock.Mock
}

// FetchDistinctSystemServiceParamList provides a mock function with given fields: appCtx, mtoServiceItems
func (_m *PaymentRequestHelper) FetchDistinctSystemServiceParamList(appCtx appcontext.AppContext, mtoServiceItems []models.MTOServiceItem) ([]models.ServiceItemParamKey, error) {
	ret := _m.Called(appCtx, mtoServiceItems)

	var r0 []models.ServiceItemParamKey
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, []models.MTOServiceItem) []models.ServiceItemParamKey); ok {
		r0 = rf(appCtx, mtoServiceItems)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ServiceItemParamKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, []models.MTOServiceItem) error); ok {
		r1 = rf(appCtx, mtoServiceItems)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchServiceParamList provides a mock function with given fields: appCtx, mtoServiceItem
func (_m *PaymentRequestHelper) FetchServiceParamList(appCtx appcontext.AppContext, mtoServiceItem models.MTOServiceItem) (models.ServiceParams, error) {
	ret := _m.Called(appCtx, mtoServiceItem)

	var r0 models.ServiceParams
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, models.MTOServiceItem) models.ServiceParams); ok {
		r0 = rf(appCtx, mtoServiceItem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.ServiceParams)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(appcontext.AppContext, models.MTOServiceItem) error); ok {
		r1 = rf(appCtx, mtoServiceItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
