package nullable

// inspired by
// https://github.com/romanyx/nullable/blob/master/int.go
//
// The Validate and ContextValidate methods below are needed by the
// code generated by go-swagger and so we create our own class
import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/go-openapi/strfmt"
)

// Int represents an int that may be null or not
// present in json at all.
type Int struct {
	Present bool // Present is true if key is present in json
	Value   *int64
}
// NewInt creates a new nullable Int
func NewInt(i int64) Int {
	return Int{
		Present: true,
		Value:   &i,
	}
}

// NewNullInt creates a null Int
func NewNullInt() Int {
	return Int{
		Present: true,
		Value:   nil,
	}
}


// UnmarshalJSON implements json.Unmarshaler interface.
func (i *Int) UnmarshalJSON(data []byte) error {
	i.Present = true

	if bytes.Equal(data, null) {
		return nil
	}

	if err := json.Unmarshal(data, &i.Value); err != nil {
		return err
	}

	return nil
}

// Validate always validates ok
// this is called from the go swagger generated code
func (s *Int) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate always validates ok
// this is called from the go swagger generated code
func (s *Int) ContextValidate(context context.Context, formats strfmt.Registry) error {
	// always validate ok
	return nil
}
