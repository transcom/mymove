package nullable

// inspired by
// https://github.com/romanyx/nullable/blob/master/string.go
//
// The Validate and ContextValidate methods below are needed by the
// code generated by go-swagger and so we create our own class

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/strfmt"
)

// recognize the JSON null
var null = []byte("null")

// String represents a string that may be null or not
// present in json at all.
type String struct {
	Present bool // Present is true if key is present in json
	Value   *string
}

// NewString creates a new nullable String
func NewString(str string) String {
	return String{
		Present: true,
		Value:   &str,
	}
}

// NewNullString creates a null string
func NewNullString() String {
	return String{
		Present: true,
		Value:   nil,
	}
}

// UnmarshalJSON implements json.Marshaler interface.
func (s *String) UnmarshalJSON(data []byte) error {
	s.Present = true

	if bytes.Equal(data, null) {
		return nil
	}

	if err := json.Unmarshal(data, &s.Value); err != nil {
		return err
	}

	return nil
}

// String always validates ok
// this is called from the go swagger generated code
func (s *String) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate always validates ok
// this is called from the go swagger generated code
func (s *String) ContextValidate(context context.Context, formats strfmt.Registry) error {
	// always validate ok
	return nil
}
