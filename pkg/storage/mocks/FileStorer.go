// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	io "io"

	afero "github.com/spf13/afero"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/transcom/mymove/pkg/storage"
)

// FileStorer is an autogenerated mock type for the FileStorer type
type FileStorer struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *FileStorer) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: _a0
func (_m *FileStorer) Fetch(_a0 string) (io.ReadCloser, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.ReadCloser, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileSystem provides a mock function with given fields:
func (_m *FileStorer) FileSystem() *afero.Afero {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FileSystem")
	}

	var r0 *afero.Afero
	if rf, ok := ret.Get(0).(func() *afero.Afero); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*afero.Afero)
		}
	}

	return r0
}

// PresignedURL provides a mock function with given fields: _a0, _a1
func (_m *FileStorer) PresignedURL(_a0 string, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PresignedURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *FileStorer) Store(_a0 string, _a1 io.ReadSeeker, _a2 string, _a3 *string) (*storage.StoreResult, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 *storage.StoreResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, io.ReadSeeker, string, *string) (*storage.StoreResult, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(string, io.ReadSeeker, string, *string) *storage.StoreResult); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.StoreResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, io.ReadSeeker, string, *string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tags provides a mock function with given fields: _a0
func (_m *FileStorer) Tags(_a0 string) (map[string]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Tags")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TempFileSystem provides a mock function with given fields:
func (_m *FileStorer) TempFileSystem() *afero.Afero {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TempFileSystem")
	}

	var r0 *afero.Afero
	if rf, ok := ret.Get(0).(func() *afero.Afero); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*afero.Afero)
		}
	}

	return r0
}

// NewFileStorer creates a new instance of FileStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileStorer {
	mock := &FileStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
