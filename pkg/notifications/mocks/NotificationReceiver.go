// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	appcontext "github.com/transcom/mymove/pkg/appcontext"

	mock "github.com/stretchr/testify/mock"

	notifications "github.com/transcom/mymove/pkg/notifications"
)

// NotificationReceiver is an autogenerated mock type for the NotificationReceiver type
type NotificationReceiver struct {
	mock.Mock
}

// CloseoutQueue provides a mock function with given fields: appCtx, queueUrl
func (_m *NotificationReceiver) CloseoutQueue(appCtx appcontext.AppContext, queueUrl string) error {
	ret := _m.Called(appCtx, queueUrl)

	if len(ret) == 0 {
		panic("no return value specified for CloseoutQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string) error); ok {
		r0 = rf(appCtx, queueUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateQueueWithSubscription provides a mock function with given fields: appCtx, params
func (_m *NotificationReceiver) CreateQueueWithSubscription(appCtx appcontext.AppContext, params notifications.NotificationQueueParams) (string, error) {
	ret := _m.Called(appCtx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueueWithSubscription")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, notifications.NotificationQueueParams) (string, error)); ok {
		return rf(appCtx, params)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, notifications.NotificationQueueParams) string); ok {
		r0 = rf(appCtx, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, notifications.NotificationQueueParams) error); ok {
		r1 = rf(appCtx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultTopic provides a mock function with given fields:
func (_m *NotificationReceiver) GetDefaultTopic() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultTopic")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiveMessages provides a mock function with given fields: appCtx, queueUrl, timerContext
func (_m *NotificationReceiver) ReceiveMessages(appCtx appcontext.AppContext, queueUrl string, timerContext context.Context) ([]notifications.ReceivedMessage, error) {
	ret := _m.Called(appCtx, queueUrl, timerContext)

	if len(ret) == 0 {
		panic("no return value specified for ReceiveMessages")
	}

	var r0 []notifications.ReceivedMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, context.Context) ([]notifications.ReceivedMessage, error)); ok {
		return rf(appCtx, queueUrl, timerContext)
	}
	if rf, ok := ret.Get(0).(func(appcontext.AppContext, string, context.Context) []notifications.ReceivedMessage); ok {
		r0 = rf(appCtx, queueUrl, timerContext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]notifications.ReceivedMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(appcontext.AppContext, string, context.Context) error); ok {
		r1 = rf(appCtx, queueUrl, timerContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNotificationReceiver creates a new instance of NotificationReceiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationReceiver(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationReceiver {
	mock := &NotificationReceiver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
