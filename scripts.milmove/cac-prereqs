#! /usr/bin/env bash

set -eu -o pipefail

#
# Check the prereqs for CAC
#
# Note: This script has no output other than Exit 0 on success  so it can be used in other scripts.
#

INSTALL_MSG=
if [ ! -r .nix-disable ] && [ -f ~/.nix-profile/bin/nix-env ]; then
  INSTALL_MSG="./nix/update.sh"
else
  INSTALL_MSG="make prereqs"
fi

PKCS11=$(command -v pkcs11-tool)
PKCS15=$(command -v pkcs15-tool)
if [[ ! -x "${PKCS11}" ]]; then
  echo "pkcs11-tool has not been installed"
  echo "Please install with '${INSTALL_MSG}'"
  exit 1
fi

if [[ ! -x "${PKCS15}" ]]; then
  echo "pkcs15-tool has not been installed"
  echo "Please install with '${INSTALL_MSG}'"
  exit 1
fi

# Looks like non-nix placement of this module can vary by versions. Some even have both. The module's docs don't really
# have info on this, so we'll just have to check both. It seems though, like if we move in the direction of using the
# cask version of opensc, that one may only use the /usr/local/lib/opensc-pkcs11.so path.
MODULE=
if [ ! -r .nix-disable ] && [[ -f "${PKCS11MODULE-}" ]]; then
  MODULE="${PKCS11MODULE}"
elif [[ -f /usr/local/lib/opensc-pkcs11.so ]]; then
  MODULE=/usr/local/lib/opensc-pkcs11.so
elif [[ -f /usr/local/lib/pkcs11/opensc-pkcs11.so ]]; then
  MODULE=/usr/local/lib/pkcs11/opensc-pkcs11.so
elif [[ -f /Library/OpenSC/lib/pkcs11/opensc-pkcs11.so ]]; then
  MODULE=/Library/OpenSC/lib/pkcs11/opensc-pkcs11.so
fi

readonly MODULE

if [[ -z "${MODULE}" ]]; then
  echo "Could not find the opensc-pkcs11 module. You are either missing it or the CAC scripts need to be updated."
  exit 1
fi
