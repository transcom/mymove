#! /usr/bin/env bash

set -eu -o pipefail

scripts/ensure-application app

# Setting REACT_APP_NODE_ENV to development enables the "Local Sign In" button
export REACT_APP_NODE_ENV=development

# Set Defaults
NETWORK="mymove_default" # Docker network

# When running locally enable TTY
DOCKER_RUN="docker run -t"

# Check that the docker process is running first
docker system info >> /dev/null

# Locally development requires that we build the container

# Let's clean things up before starting
docker-compose -f docker-compose.prime.yml down --remove-orphans || true

# Build artifacts
make client_build

# Build images and start everything up
docker-compose -f docker-compose.prime.yml up --remove-orphans -d --build

# Build a small tools dockerfile
docker build -f Dockerfile.tools_local --tag tools:latest .

# Following the logs should block any more actions until migrations are completed and the container exits
docker-compose logs -f milmove_migrate

# Need to wait not just for DB but also migrations to finish
while true; do
  MIGRATE_EXIT=$(docker ps --filter="name=mymove_milmove_migrate_1" --filter="status=exited" -q)
  if [[ -n "${MIGRATE_EXIT}" ]]; then
    break
  else
    echo
    echo "Waiting 5 seconds for migrations to complete"
    sleep 5
  fi
done

MIGRATE_EXIT_CODE=$(docker inspect --format='{{.State.ExitCode}}' mymove_milmove_migrate_1)
if [[ "${MIGRATE_EXIT_CODE}" != "0" ]]; then
  echo
  echo "Migration exited with exit code ${MIGRATE_EXIT_CODE}"
  exit 1
fi

# Truncate the DB
$DOCKER_RUN \
  --link="database" \
  --net "${NETWORK}" \
  --rm \
  --entrypoint psql \
  tools:latest \
  postgres://postgres:mysecretpassword@database:5432/dev_db?sslmode=disable -c 'TRUNCATE users CASCADE;'

# Generate Test Data
$DOCKER_RUN \
  -e DB_NAME=dev_db \
  -e DB_HOST=database \
  -e DB_PORT=5432 \
  -e DB_USER=postgres \
  -e DB_PASSWORD=mysecretpassword \
  -e LOCAL_STORAGE_ROOT=/tmp \
  -e LOCAL_STORAGE_WEB_ROOT=storage \
  --link="database" \
  --net "${NETWORK}" \
  -v "$(pwd)"/tmp:/tmp \
  --rm \
  --entrypoint generate-test-data \
  tools:latest \
  --named-scenario e2e_basic

# Signal this is good to go
echo
echo "READY FOR USE"
