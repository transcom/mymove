swagger: '2.0'
info:
  title: MilMove Prime API
  version: 0.0.1
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  contact:
    email: dp3@truss.works
  description:
    $ref: 'info/primev2_description.md'
basePath: /prime/v2
schemes:
  - http
tags:
  - $ref: 'tags/moveTaskOrder.yaml'
  - $ref: 'tags/mtoShipment.yaml'
  - name: mtoServiceItemprime_description.md
    description: |
      A service item is a service that the contractor can bill for. For example, if the movers pack and/or unpack a
      customer's belongings, those are billable services (packing and unpacking). All **mtoServiceItems** must be
      approved by the TOO before payment can be requested.

      There are three types of service items: accessorial, MTO-level, and standard.

      **WIP:** Add an external link to an article that explains the different types of service items in more detail.
  - name: paymentRequest
    description: |
      The contractor submits a **paymentRequest** to the TIO for approval in order to be reimbursed for 1 or more
      **mtoServiceItems** on a **moveTaskOrder**.

      Proof of service documentation may be uploaded for each **mtoServiceItem** in a **paymentRequest**.
x-tagGroups:
  - name: Endpoints
    tags:
      - moveTaskOrder
paths:
  /moves:
    get:
      summary: listMoves
      description: |
        Gets all moves that have been reviewed and approved by the TOO. The `since` parameter can be used to filter this
        list down to only the moves that have been updated since the provided timestamp. A move will be considered
        updated if the `updatedAt` timestamp on the move or on its orders, shipments, service items, or payment
        requests, is later than the provided date and time.

        **WIP**: Include what causes moves to leave this list.  Currently, once the `availableToPrimeAt` timestamp has
        been set, that move will always appear in this list.
      operationId: listMoves
      tags:
        - moveTaskOrder
      produces:
        - application/json
      parameters:
        - in: query
          name: since
          type: string
          format: date-time
          description: Only return moves updated since this time. Formatted like "2021-07-23T18:30:47.116Z"
      responses:
        '200':
          description: Successfully retrieved moves. A successful fetch might still return zero moves.
          schema:
            $ref: '#/definitions/ListMoves'
        '401':
          $ref: 'responses/PermissionDenied.yaml'
        '403':
          $ref: 'responses/PermissionDenied.yaml'
        '500':
          $ref: '#/responses/ServerError'
definitions:
  Error:
    properties:
      title:
        type: string
      detail:
        type: string
      instance:
        type: string
        format: uuid
    required:
      - title
      - detail
    type: object
  ListMove:
    description: >
      An abbreviated definition for a move, without all the nested information (shipments, service items, etc). Used to
      fetch a list of moves more efficiently.
    type: object
    properties:
      id:
        example: 1f2270c7-7166-40ae-981e-b200ebdf3054
        format: uuid
        type: string
      moveCode:
        type: string
        example: 'HYXFJF'
        readOnly: true
      createdAt:
        format: date-time
        type: string
        readOnly: true
      orderID:
        example: c56a4180-65aa-42ec-a945-5fd21dec0538
        format: uuid
        type: string
      availableToPrimeAt:
        format: date-time
        type: string
        x-nullable: true
        readOnly: true
      updatedAt:
        format: date-time
        type: string
        readOnly: true
      ppmType:
        type: string
        enum:
          - FULL
          - PARTIAL
      ppmEstimatedWeight:
        type: integer
      eTag:
        type: string
        readOnly: true
  ListMoves:
    items:
      $ref: '#/definitions/ListMove'
    type: array
responses:
  InvalidRequest:
    description: The request payload is invalid.
    schema:
      $ref: 'definitions/ClientError.yaml'
  ServerError:
    description: A server error occurred.
    schema:
      $ref: '#/definitions/Error'
  NotImplemented:
    description: The requested feature is still in development.
    schema:
      $ref: '#/definitions/Error'
  PreconditionFailed:
    description: Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
    schema:
      $ref: 'definitions/ClientError.yaml'
