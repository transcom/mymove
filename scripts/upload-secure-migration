#! /usr/bin/env bash
#
# A script to upload secure migrations to all environments
# https://github.com/transcom/mymove#secure-migrations
#

set -eu -o pipefail

readonly aws_command="aws"
# Environments to upload production migrations to
# shellcheck disable=SC2206
readonly environments=(${ENVIRONMENTS:-exp stg prd})
readonly valid_envs=("exp" "stg" "prd")
readonly aws_gov_bucket_prefix="transcom-gov-milmove-"
readonly aws_gov_bucket_suffix="-app-us-gov-west-1"
readonly aws_gov_id_account="transcom-gov-id"
readonly aws_gov_region="us-gov-west-1"
readonly aws_path_prefix="secure-migrations"

readonly usage="usage: $0 <production_migration_file>"

function proceed() {
  proceed_message=${1:-"proceed"}
  echo -en "\e[31m${proceed_message} (y/N) \e[39m"
  read -r proceed
  if [[ "$proceed" =~ ^[^yY]*$ ]]; then
    echo "exiting"
    exit 0
  fi
}

#
# Pre-flight checks
#

for environment in "${environments[@]}"; do
  if [[ ! ${valid_envs[*]} =~ $environment ]]; then
    echo "error: you submitted environment $environment. You may only pass in a subset of the following: ${valid_envs[*]}."
    exit 1
  fi
done

if [[ -z "${1:-}" ]]; then
  echo "$usage"
  exit 1
elif [[ ! -f "${1}" ]]; then
  echo "error: unable to find migration file: ${1}"
  exit 1
fi
readonly production_migration_file="$1"

# Migration files need to have the suffix ".up.sql"
basename_production_migration_file=$(basename "${production_migration_file}")
readonly basename_production_migration_file
if [[ "${basename_production_migration_file#*.}" != "up.sql" ]]; then
  echo "error: migration filename extensions must be '.up.sql'"
  exit 1
fi

# Ensure the file is below the limit for upload of 250MB for anti-virus
# Files larger than this size will not scan and thus will not be available for streaming download
# to the migration container.
FILESIZE=$(/usr/bin/stat -f%z "${1}")
# 250MB in bytes
BYTES_IN_MB=1048576
MAX_FILESIZE=$((250 * "${BYTES_IN_MB}" ))
if [[ ${FILESIZE} -gt ${MAX_FILESIZE} ]]; then
  FILESIZE_MB=$(( "${FILESIZE}" / "${BYTES_IN_MB}" ))
  echo "error: Max file size for upload is 250 MB, this file is too large for anti-virus to work."
  echo "Your file is ${FILESIZE_MB} MB, please reduce or split before uploading."
  exit 1
fi

# Test AWS command and freshen AWS session token
for environment in "${environments[@]}"; do
  if [[ $environment == "exp" ]]; then
    readonly aws_gov_exp_account="${aws_gov_bucket_prefix}${environment}"
    readonly aws_gov_exp_bucket_name="${aws_gov_exp_account}${aws_gov_bucket_suffix}"
    DISABLE_AWS_VAULT_WRAPPER=1 AWS_PROFILE=${aws_gov_id_account} AWS_REGION=${aws_gov_region} aws-vault exec "${aws_gov_exp_account}" -- ${aws_command} s3 ls "${aws_gov_exp_bucket_name}" > /dev/null
    echo "confirmed: you have access to ${aws_gov_exp_bucket_name} bucket via account ${aws_gov_id_account}"
  elif [[ $environment == "stg" ]]; then
    readonly aws_gov_stg_account="${aws_gov_bucket_prefix}${environment}"
    readonly aws_gov_stg_bucket_name="${aws_gov_stg_account}${aws_gov_bucket_suffix}"
    DISABLE_AWS_VAULT_WRAPPER=1 AWS_PROFILE=${aws_gov_id_account} AWS_REGION=${aws_gov_region} aws-vault exec "${aws_gov_stg_account}" -- ${aws_command} s3 ls "${aws_gov_stg_bucket_name}" > /dev/null
    echo "confirmed: you have access to ${aws_gov_stg_bucket_name} bucket via account ${aws_gov_id_account}"
  elif [[ $environment == "prd" ]]; then
    readonly aws_gov_prd_account="${aws_gov_bucket_prefix}${environment}"
    readonly aws_gov_prd_bucket_name="${aws_gov_prd_account}${aws_gov_bucket_suffix}"
    DISABLE_AWS_VAULT_WRAPPER=1 AWS_PROFILE=${aws_gov_id_account} AWS_REGION=${aws_gov_region} aws-vault exec "${aws_gov_prd_account}" -- ${aws_command} s3 ls "${aws_gov_prd_bucket_name}" > /dev/null
    echo "confirmed: you have access to ${aws_gov_prd_bucket_name} bucket via account ${aws_gov_id_account}"
  fi
done

#
# Test local secure migration
#

echo "Testing migrations ... (This could be several minutes!)"

make db_deployed_migrations_reset

MIGRATION_PATH="file://migrations/app/schema;file://migrations/app/secure" \
  DB_HOST=localhost \
  DB_PORT="${DB_PORT_DEPLOYED_MIGRATIONS}" \
  DB_NAME="${DB_NAME_DEPLOYED_MIGRATIONS}" \
	DB_DEBUG=0 \
  bin/milmove migrate

echo "Testing migrations was successful!"
echo

#
# Upload secure migration
#

proceed "Are you ready to upload your new migration? This will upload to the following GovCloud environments: ${environments[*]}."

for environment in "${environments[@]}"; do
  echo "Uploading to: $environment"
  sleep 1
  if [[ $environment == "exp" ]]; then
    DISABLE_AWS_VAULT_WRAPPER=1 \
      AWS_PROFILE=${aws_gov_id_account} \
      AWS_REGION=${aws_gov_region} \
      aws-vault exec "${aws_gov_exp_account}" -- ${aws_command} s3 cp --sse AES256 \
      "$production_migration_file" \
      "s3://${aws_gov_exp_bucket_name}/${aws_path_prefix}/"
    echo "confirmed: you ran a secure migration to ${aws_gov_exp_bucket_name} via ${aws_gov_id_account}"
  elif [[ $environment == "stg" ]]; then
    DISABLE_AWS_VAULT_WRAPPER=1 \
       AWS_PROFILE=${aws_gov_id_account} \
       AWS_REGION=${aws_gov_region} \
       aws-vault exec "${aws_gov_stg_account}" -- ${aws_command} s3 cp --sse AES256 \
       "$production_migration_file" \
       "s3://${aws_gov_stg_bucket_name}/${aws_path_prefix}/"
    echo "confirmed: you ran a secure migration to ${aws_gov_stg_bucket_name} via ${aws_gov_id_account}"
  elif [[ $environment == "prd" ]]; then
    DISABLE_AWS_VAULT_WRAPPER=1 \
       AWS_PROFILE=${aws_gov_id_account} \
       AWS_REGION=${aws_gov_region} \
       aws-vault exec "${aws_gov_prd_account}" -- ${aws_command} s3 cp --sse AES256 \
       "$production_migration_file" \
       "s3://${aws_gov_prd_bucket_name}/${aws_path_prefix}/"
    echo "confirmed: you ran a secure migration to ${aws_gov_prd_bucket_name} via ${aws_gov_id_account}"
  fi
done

#
# Cleanup
#

echo
echo "Production migration files contain sensitive data and should be deleted after uploading!"
rm -i "$production_migration_file"
