#! /usr/bin/env bash
#
# A script to upload secure migrations to all environments
# https://github.com/transcom/mymove#secure-migrations
#

set -eu -o pipefail

readonly aws_command="aws"
# Environments to upload production migrations to
readonly environments=(experimental staging prod)
readonly aws_bucket_prefix="transcom-ppp-app-"
readonly aws_bucket_suffix="-us-west-2"
readonly aws_path_prefix="secure-migrations"

readonly usage="usage: $0 <production_migration_file>"

function proceed() {
  proceed_message=${1:-"proceed"}
  echo -en "\e[31m${proceed_message} (y/N) \e[39m"
  read -r proceed
  if [[ "$proceed" =~ ^[^yY]*$ ]]; then
    echo "exiting"
    exit 0
  fi
}

function run() {
  command=( "$@" )
  echo "...executing: ${command[*]}"
  ${command[*]} &> /dev/null
}

#
# Pre-flight checks
#

if [[ -z "${1:-}" ]]; then
  echo "$usage"
  exit 1
elif [[ ! -f "${1}" ]]; then
  echo "error: unable to find migration file: ${1}"
  exit 1
fi
readonly production_migration_file="$1"

# Ensure our `aws` command is the one infra has wrapped with aws-vault
command -v "$aws_command" 2> /dev/null | grep "ppp-infra/bin/aws" &> /dev/null || \
  ( echo "error: aws command not pointing to 'ppp-infra/bin/aws"
    echo "see https://github.com/transcom/ppp-infra/blob/master/transcom-ppp/README.md#using-aws-vault"
    exit 1
  )

# Test AWS command and freshen AWS session token
${aws_command} s3 ls "${aws_bucket_prefix}${environments[0]}${aws_bucket_suffix}" > /dev/null

#
# Test local migration
#

echo "Testing migrations ... (This could be several minutes!)"

SECURE_MIGRATION_SOURCE=local make run_prod_migrations

echo "Testing migrations was successful!"
echo

#
# Upload secure migration
#

proceed "Are you ready to upload the migrations? This will overwrite files of the same name in S3."

for environment in "${environments[@]}"; do
  echo "Uploading to: $environment"
  sleep 1
  run aws s3 cp --sse AES256 \
    "$production_migration_file" \
    "s3://${aws_bucket_prefix}${environment}${aws_bucket_suffix}/${aws_path_prefix}/"
done

#
# Cleanup
#

echo
echo "Production migration files contain sensitive data and should be deleted after uploading!"
rm -i "$production_migration_file"
