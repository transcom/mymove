#! /usr/bin/env bash

circleci_build_image=milmove/circleci-docker:milmove-app-dd61e0303f06a916ea1ce1454ee152f563189e42

set -eux -o pipefail

# This script is no longer used in circleci because in CI we want some
# of the steps below to run in parallel and that's hard to integration
# with circleci config, so there's some duplication in .circleci/config.yml
if [ -n "${CIRCLECI+x}" ]; then
  echo "This script is only for running mtls tests locally"
  exit 1
fi

# Check that the docker process is running first
docker system info >> /dev/null

# ensure we nuke anything from a prior run
docker-compose -f docker-compose.mtls.yml down
docker rm -f prime_api_client || true
docker network rm e2e_mtls || true

# in CI, we can copy in the artifacts built in CI, but locally we have
# to compile inside docker first
rm -rf bin pkg/assets/assets.go
mkdir bin
# set GOPATH if not already set
: "${GOPATH:=$HOME/.gopath}"
docker run \
       --rm \
       -v "${GOPATH}:${GOPATH}" \
       -v "${PWD}:${PWD}" \
       -w "${PWD}" \
       -e GOPATH \
       -e CIRCLECI=1 \
       ${circleci_build_image} \
      make pkg/assets/assets.go \
       server_build \
       bin/prime-api-client \
       bin/generate-test-data \
       bin/rds-ca-2019-root.pem \
       bin/rds-ca-us-gov-west-1-2017-root.pem \
       bin/rds-ca-rsa4096-g1.pem
docker build -t milmove_mtls:local -f Dockerfile.e2e .

# clean up the generated files that are now for linux instead of macOS
rm -rf bin

docker network create e2e_mtls
docker-compose -f docker-compose.mtls.yml up -d

docker run \
       --name prime_api_client \
       --network e2e_mtls \
       --entrypoint /scripts/run-e2e-mtls-test \
       milmove_mtls:local

# Stop the app container to release the DB connection
docker-compose -f docker-compose.mtls.yml down
