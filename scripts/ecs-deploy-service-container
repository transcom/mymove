#! /usr/bin/env bash
#
#   Updates the named service with the given name, image, and environment.
#
set -eo pipefail

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly DIR

usage() {
    echo "$0 <name> <image> <environment> <entrypoint>"
    exit 1
}
[[ -z $1 || -z $2 || -z $3 || -z $4 ]] && usage

# Display command being run
echo "$0 $*"

set -u

# name also describes the service
readonly name=$1
readonly image=$2
readonly environment=$3
readonly entrypoint=$4

readonly RESERVATION_CPU=512
readonly RESERVATION_MEM=2048

# The cluster name is always `app-ENV`
# Needs to support `app` and `app-client-tls` on the same cluster.
# So don't overload `$name` and use it here.
readonly cluster="app-${environment}"

check_arn() {
    local arn=$1
    [[ $arn = arn:* ]] || { echo "Error: Bad ARN: ${arn}"; exit 1; }
}

update_service() {
    local arn="$1"
    echo "* Updating service ${name} with ARN ${arn}"

    local network_config
    network_config=$(aws ecs describe-services --services "${name}" --cluster "${cluster}" --query 'services[0].networkConfiguration')

    # echo "* Waiting for service to be stable before updating"
    # time aws ecs wait services-stable --services "${name}" --cluster "${cluster}"
    echo "* Currently running ECS tasks:"
    aws ecs list-tasks --service "${name}" --cluster "${cluster}" --desired-status=RUNNING
    echo "* Updating ${name} service to use ${arn}"
    aws ecs update-service --cluster "${cluster}" --service "${name}" --task-definition "${arn}" --query 'service.deployments' --network-configuration "${network_config}" || return 1
    echo "* Newly started ECS tasks:"
    aws ecs list-tasks --service "${name}" --cluster "${cluster}" --desired-status=PENDING
    echo "* Waiting for service to stabilize (this takes a while)"
    time aws ecs wait services-stable --services "${name}" --cluster "${cluster}"
    local exit_code=$?

    # show event log
    echo
    echo "Last 5 service events:"
    aws ecs describe-services --service "${name}" --cluster "${cluster}" --query 'services[].events[:5]'
    echo

    return $exit_code
}

# Put a dimensionless metric into cloudwatch
put_metric() {
    local metric_name="$1"
    local namespace="$2"
    local timestamp
    timestamp=$(date +"%Y-%m-%dT%H:%M:%SZ")
    aws cloudwatch put-metric-data --metric-name "${metric_name}" --namespace "${namespace}" --value 1 --timestamp "${timestamp}"
}

# get current task definiton (for rollback)
blue_task_def_arn=$(aws ecs describe-services --services "${name}" --cluster "${cluster}" --query 'services[0].taskDefinition' | jq -r .)

# create new task definition with the given image
echo "* Registering new task definition"
set +e
green_task_def_date_arn=$("${DIR}/../bin/ecs-deploy" task-def \
  --aws-account-id "${AWS_ACCOUNT_ID}" \
  --aws-region "${AWS_DEFAULT_REGION}" \
  --service "${name}" \
  --environment "${environment}" \
  --image "${image}" \
  --variables-file "${DIR}/../config/env/${environment}.${name}.env" \
  --entrypoint "${entrypoint}" \
  --cpu "${RESERVATION_CPU}" \
  --memory "${RESERVATION_MEM}" \
  --register)
# shellcheck disable=SC2181
if [ "$?" != "0" ]; then echo "$green_task_def_date_arn"; exit 1; fi
set -e

green_task_def_arn=$(echo "${green_task_def_date_arn}" | cut -d ' ' -f 3)
check_arn "$green_task_def_arn"

if update_service "$green_task_def_arn"; then
    echo "Success."
    put_metric DeployCount "${cluster}"
    exit 0
fi
echo "Service failed to stabilize!"
put_metric DeployFail "${cluster}"

echo
echo "Showing logs from recently stopped tasks:"
ecs-service-logs show --cluster "${cluster}" --service "${name}" --environment "${environment}" --status "STOPPED" --verbose --aws-region="${AWS_DEFAULT_REGION}"
echo

echo "* Rolling back to $blue_task_def_arn"
if update_service "$blue_task_def_arn"; then
    echo "Rollback complete."
    put_metric RollbackCount "${cluster}"
    exit 1
fi
echo "Rollback failed!"
put_metric RollbackFail "${cluster}"
exit 1
