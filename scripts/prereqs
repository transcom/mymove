#! /usr/bin/env bash

set -eu -o pipefail

RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

prereqs_found=true

function has() {
    local tool=$1
    local tool_install_direction=$2
    tool_location=$(type -p "${tool}" || true)
    if [[ -n ${tool_location} ]]; then
        if [[ -L ${tool_location} ]]; then
          # In the case of the aws-vault-wrapper being used we want to specifically
          # check that the tool exists in /usr/local/bin
          symtool=$(readlink "${tool_location}")
          if [[ "${symtool}" == "aws-vault-wrapper" ]]; then
            has "/usr/local/bin/${tool}" "${tool_install_direction}"
          else
            # A symlink that is not aws-vault-wrapper
            echo "${tool} installed."
          fi
        else
          # Not a symlink
          echo "${tool} installed."
        fi
    else
        echo -e "${YELLOW}WARNING: ${tool} not found, install via: ${tool_install_direction}${NC}"
        prereqs_found=false
    fi
}

has aws "brew install awscli"
has bash "brew install bash"
has chamber "brew install chamber"
has docker "Get Docker CE for Mac from https://download.docker.com/mac/stable/Docker.dmg"
has jq "brew install jq"
has go "brew install go"
has yarn "brew install yarn"
has pre-commit "brew install pre-commit"
has shellcheck "brew install shellcheck"
has psql "brew install postgresql"
has go-bindata "brew install go-bindata"
has node "brew install node@10 && brew link --force node@10"

# not on CircleCI
if [[ -z ${CIRCLECI-} ]]; then
  # CAC tools
  has pkcs11-tool "brew install opensc; chmod go+w /usr/local/bin/pkcs11-tool; brew link opensc"
  has pkcs15-tool "brew install opensc; chmod go+w /usr/local/bin/pkcs15-tool; brew link opensc"

  has circleci "brew install circleci"
  has direnv "brew install direnv"
  has entr "brew install entr"

  if [[ $(uname -s) = Darwin ]]; then
    # macOS only
    has aws-vault "brew cask install aws-vault"
    has watchman "brew install watchman"
  else
    # Linux
    has aws-vault "brew install aws-vault"
  fi
fi


if [[ $prereqs_found == "true" ]]; then
    echo "OK: all prereqs found"
else
    echo -e "${RED}ERROR: some prereqs missing, please install them.${NC}"
    exit 1
fi

# Ensure CAC prereqs are installed
# This script should have no output
cac-prereqs

# Now check versions are correct for prereqs
echo
check-aws-cli-version
check-aws-vault-version
check-bash-version
check-chamber-version
check-go-bindata-version
check-go-version
check-gopath
check-hosts-file
check-node-version
check-opensc-version
