#! /usr/bin/env bash

#
# Run golang server tests
#
# Set these environment variables to change behavior:
# - APPLICATION: 'app' or 'orders' will change which tests are run and which migrations are run for them
# - CIRCLECI: Will reduce parallelism and make the test output verbose
# - COVERAGE: '1' will enable test coverage flags
# - DRY_RUN: '1' will build the tests but not run them
# - SERVER_REPORT: '1' will run gotestsum and go coverage on output
# - LONG_TEST: '1' will remove the '-short' flag and run extended tests
# - NO_RACE: disables the race detector, allowing the tests to run faster
# - NO_DB: Will disable the db reset and migration steps
#
# Don't run tests in /cmd (those are done in acceptance testing) or for generated code (in /pkg/gen/ or mocks)
# Disable test caching with `-count 1` - caching was masking local test failures

set -eu -o pipefail

# colors
RED='\033[0;31m'
NC='\033[0m' # No Color

if [ "${APPLICATION}" == "app" ]; then
  readarray -t package_list < <(go list ./... | grep -E -v '(ordersapi|/pkg/gen/|/cmd|mocks|/pkg/testdatagen)')
elif [ "${APPLICATION}" == "orders" ]; then
  readarray -t package_list < <(go list ./pkg/handlers/ordersapi)
else
  echo "Must provider the environment variable APPLICATION and set to 'app' or 'orders'"
  exit 1
fi

gotest_args=("-count" "1")
if [ -z "${NO_RACE+x}" ]; then
   gotest_args+=("-race")
fi
if [ -n "${CIRCLECI+x}" ]; then
	# Limit the maximum number of tests to run in parallel for CircleCI due to memory constraints.
  gotest_args+=("-parallel" "4")
	# Add verbose (-v) so gotestsum can parse it for CircleCI
  # results
  verbose_flag="-v"
  # Don't fail fast in Circle CI so we can see all the tests that failed
else
  verbose_flag=""
  gotest_args+=("-parallel" "8")
  gotest_args+=("-failfast")
fi
gotest_args+=("-ldflags=-extldflags=-Wl,-ld_classic")

# Try to compile tests, but don't run them.
if [[ "${DRY_RUN:-}" == "1" ]]; then
  echo "Compiling tests only, not running"
  go test -run=nope "${gotest_args[@]}" "${package_list[@]}"
  exit 0
fi

# Like server_test but runs extended tests that may hit external services.
if [[ "${LONG_TEST:-}" != "1" ]]; then
  gotest_args+=("-short")
fi

# Add coverage tracker via go cover
if [[ "${COVERAGE:-}" == "1" ]]; then
  coverpkg=$(echo "${package_list[@]}" | paste -s -d , - | tr '[:blank:]' ',')
  gotest_args+=(-coverprofile=coverage.out -covermode=atomic -coverpkg="${coverpkg}")
fi

# Set up the test DB instance and wipe it
# do not run db commands if NO_DB is set to 1
if [[ "${NO_DB:-}" -ne 1 ]]; then
  make db_test_reset db_test_migrate
fi

# Setup test output for reporting
test_dir="tmp/test-results/gotest/${APPLICATION}"
test_output_file="${test_dir}/go-test.out"
test_report_file="${test_dir}/go-test-report.xml"
mkdir -p "${test_dir}"

function server_report_cleanup()
{
  if [[ "${COVERAGE:-}" == "1" ]]; then
    go tool cover -func=coverage.out -o "${test_dir}/go-coverage.txt"
    go tool cover -html=coverage.out -o "${test_dir}/go-coverage.html"
    cp coverage.out "${test_dir}"
    # parse out the total coverage percentage which is on the line with (statements) and strip off the % sign
    # https://unix.stackexchange.com/questions/305190/remove-last-character-from-string-captured-with-awk
    percent=$(grep '(statements)' "${test_dir}/go-coverage.txt" | awk '{print substr($NF, 1, length($NF)-1)}')
    goal_percent=50
    # using a oneline python function to test if percent is less than goal and return a proper exit code
    if python -c "exit(1) if ${percent} < ${goal_percent} else exit()"; then
      # coverage is good
      echo "total coverage is ${percent}%"
    else
      # coverage is under goal
      echo -e "${RED}total coverage has dropped to ${percent}% needs to be at least ${goal_percent}%${NC}"
      # fail build
      # commenting out the build failure line since we don't want to fail the build yet until we've had further discussions
      #exit 1
    fi
  fi
}

# Set up junit report and ensure its run on exit
if [[ "${SERVER_REPORT:-}" == "1" ]]; then
  # setup a trap incase the tests fail, we still want to generate the report
  trap server_report_cleanup EXIT
fi

gotest_args+=("-vet=off")
if [[ "${SERVER_REPORT:-}" == "1" ]]; then
  if [[ ! -f bin/gotestsum ]]; then
    make bin/gotestsum
  fi
  gotestsum_args=(--format=standard-quiet)
  if [[ -n "${verbose_flag}" ]]; then
    gotestsum_args=(--format=standard-verbose)
  fi
  if [[ "${SERVER_REPORT:-}" == "1" ]]; then
    gotestsum_args+=("--junitfile=${test_report_file}")
  fi

  DB_NAME="${DB_NAME_TEST}" DB_PORT="${DB_PORT_TEST}" \
         gotestsum "${gotestsum_args[@]}" -- \
         "${gotest_args[@]}" \
         "${package_list[@]}"
else
  if [[ -n "${verbose_flag}" ]]; then
    gotest_args+=("-v")
  fi
  DB_NAME="${DB_NAME_TEST}" DB_PORT="${DB_PORT_TEST}" \
         go test \
         "${gotest_args[@]}" \
         "${package_list[@]}" | tee "${test_output_file}"
fi
