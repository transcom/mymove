openapi: 3.0.2
info:
  title: move.mil Government System API
  description: The API for government officials interfacing with GHC for move.mil
  #  termsOfService:
  contact:
    email: dp3@truss.works
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.0.1
# servers:
paths:
  /payment-requests:
    get: # TODO add filters when we know what we are filtering
      summary: Gets payment requests
      description: Gets a list of payment requests
      operationId: getPaymentRequests
      tags:
        - payment-requests
      responses:
        '200':
          description: fetched list of payment requests
          content:
            application/json:
              schema:
                type: object # in order to include meta data, plus list
        '400':
          description: invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidRequestResponsePayload'
        '401':
          description: request requires user authentication
        '403':
          description: user is not authorized
        '500':
          description: internal server error
  /payment-requests/{paymentRequestId}:
    get:
      summary: Fetches a payment request
      description: Fetches an instance of a payment request
      operationId: fetchPaymentRequest
      tags:
        - payment-requests
      parameters:
        - name: paymentRequestId
          in: path
          description: UUID of payment request
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: fetched instance of payment request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequest'
        '400':
          description: invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidRequestResponsePayload'
        '401':
          description: request requires user authentication
        '403':
          description: user is not authorized
        '404':
          description: orders not found
        '500':
          description: internal server error
    patch:
      summary: Updates a payment request
      description: Updates a payment request
      operationId: updatePaymentRequest
      tags:
        - payment-requests
      parameters:
        - name: paymentRequestId
          in: path
          description: UUID of payment request
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentRequestPayload'
        required: true
      responses:
        '200':
          description: updated payment request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequest'
        '400':
          description: invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidRequestResponsePayload'
        '401':
          description: request requires user authentication
        '403':
          description: user is not authorized
        '404':
          description: orders not found
        '500':
          description: internal server error
  /uploads/{uploadId}:
    get:
      summary: Fetches upload
      description: Fetches an upload by id
      operationId: upload
      parameters:
        - name: uploadId
          in: path
          description: upload id
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - uploads
      responses:
        200:
          description: created upload
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Upload'
        400:
          description: invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidRequestResponsePayload'
        403:
          description: not authorized
        404:
          description: not found
        500:
          description: server error
components:
  schemas: # These are guesses at what values will be needed; need to know which fields are required
    PaymentRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: c56a4180-65aa-42ec-a945-5fd21dec0538
        documentPackage:
          $ref: '#/components/schemas/ProofOfServicePackage'
        task_order_id:
          type: string
          format: uuid
          example: c56a4180-65aa-42ec-a945-5fd21dec0538
        taskOrderLineItemIds:
          type: array
          items:
            type: string
            format: uuid
            example: c56a4180-65aa-42ec-a945-5fd21dec0538
        isFinal:
          type: boolean
          default: false
        status:
          $ref: '#/components/schemas/PaymentRequestStatus'
        paymentRejectionReason:
          type: string
          example: documentation was incomplete
          nullable: true
        invoiceRejectionReason:
          type: string
          example: documentation was incomplete
          nullable: true
    UpdatePaymentRequestPayload:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PaymentRequestStatus'
        paymentRejectionReason:
          type: string
          example: documentation was incomplete
          nullable: true
        invoiceRejectionReason:
          type: string
          example: documentation was incomplete
          nullable: true
    ProofOfServicePackage: # Need more info on what a ProofOfServicePackage is, what is in it
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: c56a4180-65aa-42ec-a945-5fd21dec0538
        uploads:
          type: array
          items:
            $ref: '#/components/schemas/Upload' # this could alternatively be a document that holds an upload
    TaskOrder: # stub
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: c56a4180-65aa-42ec-a945-5fd21dec0538
        task_order_line_items:
          type: array
          items:
            $ref: '#/components/schemas/TaskOrderLineItem'
    TaskOrderLineItem: #stub
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: c56a4180-65aa-42ec-a945-5fd21dec0538
    PaymentRequestStatus:
      type: string
      title: Payment Request Status
      enum:
        - DRAFT
        - PAYMENT_SUBMITTED
        - PAYMENT_REJECTED
        - PAYMENT_APPROVED
        - INVOICE_SUBMITTED
        - INVOICE_APPROVED
        - INVOICE_REJECTED
    Upload:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: c56a4180-65aa-42ec-a945-5fd21dec0538
        url:
          type: string
          format: uri
          example: https://uploads.domain.test/dir/c56a4180-65aa-42ec-a945-5fd21dec0538
        filename:
          type: string
          format: binary
          example: filename.pdf
        content_type:
          type: string
          format: mime-type
          example: application/pdf
        bytes:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - url
        - filename
        - content_type
        - bytes
        - created_at
        - updated_at
  responses:
    InvalidRequestResponsePayload:
      description: The request-response payload is invalid
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: string

