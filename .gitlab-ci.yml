# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

variables:
  DOCKER_AUTH_CONFIG: "{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD\"}}}"
  #circleci_docker: milmove/circleci-docker:milmove-app-726bfe44bd27d3b41da41acbe3eb231811a993f7
  DOCKER_APP_IMAGE: milmove01/transcom-docker:milmove-app
  DOCKER_BASE_IMAGE: milmove01/transcom-docker:base
  DOCKERHUB_USERNAME: DOCKERHUB_USERNAME
  DOCKERHUB_PASSWORD: DOCKERHUB_PASSWORD
  DOCKER_TOKEN: DOCKER_TOKEN
  registry: https://registry.hub.docker.com/
  KUBERNETES_CPU_REQUEST: "2"
  KUBERNETES_MEMORY_REQUEST: "4Gi"
  KUBERNETES_MEMORY_LIMIT: "4Gi"
  #load_tester: &load_tester cimg/python:3.11.3
  #postgres: &postgres cimg/postgres:12.11
  #redis: &redis redis:5.0.6
  #cimg_base: cimg/base:2022.12-22.04
  #aws-otel-collector: &aws-otel-collector public.ecr.aws/aws-observability/aws-otel-collector:v0.31.0
  #dp3-env: &dps-env placeholder_env
  #integration-ignore-branch: &integration-ignore-branch placeholder_branch_name
  #integration-mtls-ignore-branch: &integration-mtls-ignore-branch placeholder_branch_name
  #client-ignore-branch: &client-ignore-branch placeholder_branch_name
  #server-ignore-branch: &server-ignore-branch placeholder_branch_name
  GOPATH: "$CI_PROJECT_DIR/go"
  GOLANGCI_LINT_CONCURRENCY: "4"
  GOLANGCI_LINT_VERBOSE: "-v"
  #DOD_CA_PACKAGE: '/builds/your-group/your-project/config/tls/milmove-cert-bundle.p7b'
  #MIGRATION_MANIFEST: '/builds/your-group/your-project/migrations/app/migrations_manifest.txt'
  #MIGRATION_PATH: 'file:///builds/your-group/your-project/migrations/app/schema;file:///builds/your-group/your-project/migrations/app/secure'
  #EIA_KEY: db2522a43820268a41a802a16ae9fd26 # Consider storing sensitive keys as CI/CD variables instead
  #GIT_CLONE_PATH: '$CI_BUILDS_DIR/milmove/$CI_PROJECT_NAME/$CI_PIPELINE_ID'
  #add dependency to each step


stages:
#- security-testing
#- test
- pre_checks
- build
- deploy

# sast:
#   stage: security-testing
# include:
# - template: Jobs/SAST.gitlab-ci.yml
# - template: Jobs/Dependency-Scanning.gitlab-ci.yml
# - template: Jobs/Secret-Detection.gitlab-ci.yml

.setup_milmove_env: &setup_milmove_env
    - git config --global --add safe.directory /builds/milmove/mymove
    - export PATH=${PATH}:${GOPATH}/bin:~/transcom/mymove/builds/milmove/mymove
    - export REACT_APP_ERROR_LOGGING=otel

# base_noop:
#   stage: pre_checks
#   image: $DOCKER_APP_IMAGE
#   script: 
# - echo "noop"

# anti_virus:
#   stage: pre_checks
#   image: milmove/clamav-ci # This can reB-18585-gitlab-pipeline-work as is, or use any lightweight image since we're skipping the actual work.
#   script:
#      - clamscan --version
#      - cp -v ~/transcom/mymove/anti-virus/whitelist-*.{fp,ign2} /var/lib/clamav/
#      - >
#        clamscan \
#          --recursive \
#          --infected \
#          --detect-pua=yes \
#          --exclude-pua=NetTool \
#          --exclude-pua=PWTool \
#          --max-scansize=300M \
#          --max-filesize=100M \
#          --max-recursion=30 \
#        --max-files=50000 \
#          --tempdir=/tmp \
#          ~/transcom/mymove
#      - echo "Skipping anti-virus checks temporarily."
#   after_script:
#      - echo "Replace this line with your failure announcement logic."

pre_deps_golang:
  stage: pre_checks
  image: $DOCKER_APP_IMAGE
  before_script: *setup_milmove_env
  script:
    - for i in $(seq 1 5); do go mod download && break || s=$? && sleep 5; done; (exit $s)
    - scripts/check-generated-code go.sum
    - make bin/swagger
  artifacts:
    paths:
      - bin/
      - swagger/
  # cache:
  #   key: "$CI_COMMIT_REF_SLUG-go"
  #   paths:
  #     - $GOPATH/pkg/mod
  #     - /builds/milmove/mymove/bin  # Ensure this path is correct and writable.
  # Optionally, you can define an after_script for cleanup or notifications.

pre_deps_yarn:
  stage: pre_checks
  image: $DOCKER_APP_IMAGE
  needs:
    - pre_deps_golang
  script:
     - pwd
     - ls bin
     - yarn config set "strict-ssl" false
     - yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
     - scripts/check-generated-code yarn.lock
     - echo "Temporarily skipping yarn installation and code checks."
  artifacts:
    paths:
      - ~/.cache/yarn

#  policy: pull-push # This can reB-18585-gitlab-pipeline-work as is, since it doesn't affect job execution
# No need to uncomment after_script if it's just for passing the job

# check_tls_certificate_dp3:
#   stage: pre_checks
#   image: $DOCKER_APP_IMAGE
#   script:
#     - echo "check_tls_certificate_dp3"

#     # Setup TLS environment variables
#     - |
#       CI_ENVIRONMENT_SCRIPT="/tmp/ci_environment_script.sh"
#       mkdir -p $(dirname $CI_ENVIRONMENT_SCRIPT)
#       echo "export TLS_CERT=\$$(echo placeholder_env | tr 'a-z' 'A-Z')_DP3_CERT" >> $CI_ENVIRONMENT_SCRIPT
#       echo "export TLS_KEY=\$$(echo placeholder_env | tr 'a-z' 'A-Z')_DP3_KEY" >> $CI_ENVIRONMENT_SCRIPT
#       echo "export TLS_CA=\$$(echo placeholder_env | tr 'a-z' 'A-Z')_DP3_CA" >> $CI_ENVIRONMENT_SCRIPT
#       source $CI_ENVIRONMENT_SCRIPT
#       echo "Setup TLS environment variables"

#     # Check DP3 environment and TLS pair
#     - |
#       if [ "$DP3_ENV" = "demo" ] || [ "$DP3_ENV" = "exp" ] || [ "$DP3_ENV" = "loadtest" ]; then
#         echo "DP3 environment detected. Proceeding with TLS variables setup and check."
#         /usr/local/bin/check-tls-pair "$TLS_KEY" "$TLS_CERT"
#       else
#         echo "Not a DP3 environment. Skipping TLS check."
#       fi
#     # The check_tls_pair job seems redundant here if /usr/local/bin/check-tls-pair is called in the previous step, but you could include any additional checks or commands as needed.
#   after_script:
#     - |
#       if [ "$CI_COMMIT_BRANCH" = "B-18585-gitlab-pipeline-work" ]; then
#         scripts/circleci-announce-broken-branch || true
#       fi
#       echo "announce_failure"

# check_tls_certificate_stg:
#   stage: pre_checks
#   image: $DOCKER_APP_IMAGE # This can reB-18585-gitlab-pipeline-work unchanged, or you can use a lightweight image since no real work is done.
#   #before_script:
#     #- export TLS_KEY=<path_to_tls_key> # Comment out if not performing real TLS checks
#     #- export TLS_CERT=<path_to_tls_cert>
#   script:
#     - echo "Temporarily skipping TLS certificate check."

# check_tls_certificate_prd:
#   stage: pre_checks
#   image: $DOCKER_APP_IMAGE  # This can reB-18585-gitlab-pipeline-work unchanged, or you can use a lightweight image since no real work is done
#   #before_script:
#     # - export TLS_KEY=<path_to_tls_key> # Comment out if not performing real TLS checks
#     # - export TLS_CERT=<path_to_tls_cert>
#   script:
#     - echo "Temporarily skipping TLS certificate check."

# build_storybook:
#   stage: build
#   image: $DOCKER_APP_IMAGE 
#   needs: 
#     - pre_deps_yarn
#   cache:
#     - key: "v3-cache-yarn-v3-$(echo yarn.lock | md5sum)" # Adjust as necessary for GitLab CI
#       paths:
#         - ~/ .cache/yarn
#         - node_modules/ # Assuming yarn cache directory is .yarn/cache
#       policy: pull
#   script:
#     # - yarn install --frozen-lockfile
#     - yarn build-storybook
#     - echo "Skipping build storybook steps."
#    # - sleep 600
#   artifacts:
#     paths:
#       - storybook-static/
#     expire_in: 1 week
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "B-18585-gitlab-deploy" || $CI_COMMIT_BRANCH == "main"'


compile_app_client:
  stage: build
  image: $DOCKER_APP_IMAGE # Replace with the actual Docker image name if different.
  before_script: *setup_milmove_env
  needs:
    - pre_deps_yarn
  variables:
    KUBERNETES_CPU_REQUEST: "2"
    KUBERNETES_MEMORY_REQUEST: "4Gi"
    KUBERNETES_MEMORY_LIMIT: "4Gi"
  script:
    #- ls bin
    - make client_build
    - echo "Skipping actual build steps."
    - sleep 60
  rules:
    - if: '$CI_COMMIT_BRANCH == "B-18585-gitlab-deploy" || $CI_COMMIT_BRANCH == "main"'
  # cache:
  #   key: "yarn-cache-v3-$(echo $(md5sum yarn.lock) | cut -d ' ' -f 1)"
  #   paths:
  #     - .yarn/cache
  #     - /builds/milmove/mymove/build
  artifacts:
    paths:
      - ~/.cache/yarn
      - /builds/milmove/mymove/bin
      - /builds/milmove/mymove/build
      - playwright
      - playwright.config.js
      - package.json
      - yarn.lock
      - eslint-plugin-ato
    expire_in: 1 week

compile_app_server:
  stage: build
  image: $DOCKER_APP_IMAGE
  needs:
    - pre_deps_golang
    - pre_deps_yarn
  before_script: *setup_milmove_env
  script:
     - make -j 4 server_build build_tools
     - echo "Skipping server and tools compilation."
  artifacts:
    paths:
    - /builds/milmove/mymove/bin/milmove-tasks
    - /builds/milmove/mymove/bin/milmove
    - /builds/milmove/mymove/bin/rds-ca-rsa4096-g1.pem
    - /builds/milmove/mymove/bin/rds-ca-2019-root.pem
    - /builds/milmove/mymove/config/tls/milmove-cert-bundle.p7b
    - /builds/milmove/mymove/config/tls/dod-sw-ca-66.pem
    - /builds/milmove/mymove/swagger/*
    - /builds/milmove/mymove/build
    - pkg/testdatagen/testdata
  #   paths:
  #     - Makefile
  #     - Dockerfile
  #     - Dockerfile.dp3 #can possibly do "Dockerfile.*" to shorten
  #     - Dockerfile.e2e
  #     - Dockerfile.migrations
  #     - Dockerfile.tasks
  #     - Dockerfile.tasks_dp3
  #     - Dockerfile.tools
  #     - /builds/milmove/mymove
  #     - bin
  #     - config
  #     - migrations
  #     - scripts
  #     - swagger
  #     - pkg/testdatagen/testdata
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "B-18585-gitlab-deploy" || $CI_COMMIT_BRANCH == "main"'

push_otel_collector_image_demo:
  stage: build  # Define the appropriate stage
  image: 
    name: gcr.io/kaniko-project/executor:v1.14.0-debug  # Uncomment if you need a specific Docker image to run your job.
    entrypoint: [""]
  needs: 
    - compile_app_server
  before_script:
     - mkdir -p /kaniko/.docker
     - echo "{\"credHelpers\":{\"${ECR_REPOSITORY_URI}\":\"ecr-login\"}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context dir://dev/null --dockerfile /dev/null --destination "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY}:${OTEL_VERSION}" --build-arg BASE_IMAGE="public.ecr.aws/aws-observability/aws-otel-collector:${OTEL_VERSION}"
  after_script:
    - echo "Tagging and pushing the AWS OTel Collector image to ECR..."
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "B-18585-gitlab-deploy" || $CI_COMMIT_BRANCH == "main"'

build_app:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  needs:
     - compile_app_client
     - compile_app_server
  before_script:
    - ls bin
    - mkdir -p /kaniko/.docker
    - echo "Building app Docker image..."
    - echo "{\"credHelpers\":{\"447641181206.dkr.ecr.us-gov-west-1.amazonaws.com\":\"ecr-login\"}}" > /kaniko/.docker/config.json
    - echo "Checking Docker credential config:"
    #- cat /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context "${CI_PROJECT_DIR}/" --dockerfile "${CI_PROJECT_DIR}/Dockerfile" --no-push
    # - /kaniko/executor
    #   --context "${CI_PROJECT_DIR}/"
    #   --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
    #   --no-push
  after_script:
    - echo "Build_complete"

build_migrations:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  needs:
    - compile_app_server
    - build_app  # Added dependency on build_app to use Kaniko for building images
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "Building migrations Docker image..."
    - echo "{\"credHelpers\":{\"${ECR_REPOSITORY_URI}\":\"ecr-login\"}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context "${CI_PROJECT_DIR}/" --dockerfile "${CI_PROJECT_DIR}/Dockerfile.migrations" --no-push
    # - /kaniko/executor
    #   --context "${CI_PROJECT_DIR}/"
    #   --dockerfile "${CI_PROJECT_DIR}/Dockerfile.migrations"
    #   --no-push
  after_script:
    - echo "Migrations image built successfully."

build_tasks:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  needs:
    - compile_app_server
    - compile_app_client
    - build_app  # Added dependency on build_app to use Kaniko for building images
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"credHelpers\":{\"${ECR_REPOSITORY_URI}\":\"ecr-login\"}}" > /kaniko/.docker/config.json
    - echo "Building tasks Docker image..."
    - ls -la /builds/milmove/mymove/bin/
  script:
    - /kaniko/executor --context "${CI_PROJECT_DIR}/" --dockerfile "${CI_PROJECT_DIR}/Dockerfile.tasks" --no-push
    # - /kaniko/executor
    #   --context "${CI_PROJECT_DIR}/"
    #   --dockerfile "${CI_PROJECT_DIR}/Dockerfile.tasks"
    #   --no-push
  after_script:
    - echo "Tasks image built successfully."

push_migrations_gov_dev:
  stage: deploy
  image: gcr.io/kaniko-project/executor:v1.14.0-debug # Uncomment and use the correct image if needed
  needs:
    - build_migrations
    - compile_app_client
    - compile_app_server
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"credHelpers\":{\"${ECR_REPOSITORY_URI}\":\"ecr-login\"}}" > /kaniko/.docker/config.json
  script:
    # Push the migrations Docker image to ECR
    - /kaniko/executor --context "${CI_PROJECT_DIR}/" --dockerfile "${CI_PROJECT_DIR}/Dockerfile.migrations" --destination "${ECR_REPOSITORY_URI}/app-migrations:$CI_COMMIT_SHORT_SHA"
    # - /kaniko/executor
    #   --context "${CI_PROJECT_DIR}/"
    #   --dockerfile "${CI_PROJECT_DIR}/Dockerfile.migrations"
    #   --destination "${ECR_REPOSITORY_URI}/app-migrations:latest"  # Push the image
    - echo "Migrations image pushed successfully."
  after_script:
    - echo "Deployment completed. Check above for any errors."
  allow_failure: false

push_app_gov_dev:
  stage: deploy
  image: gcr.io/kaniko-project/executor:v1.14.0-debug
  needs:
    - build_app
    - compile_app_client
    - compile_app_server
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"credHelpers\":{\"${ECR_REPOSITORY_URI}\":\"ecr-login\"}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context "${CI_PROJECT_DIR}/" --dockerfile "${CI_PROJECT_DIR}/Dockerfile" --destination "${ECR_REPOSITORY_URI}/app:$CI_COMMIT_SHORT_SHA"
    # - /kaniko/executor
    #   --context "${CI_PROJECT_DIR}/"
    #   --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      # --destination "${ECR_REPOSITORY_URI}/app:latest"
  after_script:
    - echo "Tasks image pushed to AWS ECR successfully."
  allow_failure: false

push_tasks_gov_dev:
  stage: deploy
  image: gcr.io/kaniko-project/executor:v1.14.0-debug
  needs:
    - build_tasks
    - compile_app_client
    - compile_app_server
  before_script:
     - mkdir -p /kaniko/.docker
     - echo "{\"credHelpers\":{\"${ECR_REPOSITORY_URI}\":\"ecr-login\"}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context "${CI_PROJECT_DIR}/" --dockerfile "${CI_PROJECT_DIR}/Dockerfile.tasks" --destination "${ECR_REPOSITORY_URI}/app-tasks:$CI_COMMIT_SHORT_SHA"
    #- /kaniko/executor
    #  --context "${CI_PROJECT_DIR}/"
    #  --dockerfile "${CI_PROJECT_DIR}/Dockerfile.tasks"
    #  --destination "${ECR_REPOSITORY_URI}/app-tasks:latest"
  after_script:
    - echo "Tasks image pushed to AWS ECR successfully."



